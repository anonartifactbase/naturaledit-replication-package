[
    {
        "data": {},
        "source": "frontend",
        "event": "click_summarize_code",
        "timestamp": "2025-08-23 16:07:23.000",
        "id": "8vih4udQgxftQvyaJs2K"
    },
    {
        "data": {
            "selected_code": "import React from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  ReferenceLine,\n} from \"recharts\";\n\nconst StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;\n",
            "summary": {
                "medium_unstructured": "This code implements a React component called StockChart, which renders a line chart of stock prices using the Recharts library. It takes stock data as a prop, formats it, and displays the company's name and ticker above the chart. The chart includes axes, a tooltip, a legend, and plots closing prices over time.",
                "title": "StockChart React Component for Rendering Stock Price Line Charts",
                "medium_structured": "• Implements a StockChart React component\n• Accepts a data prop with stock information\n• Formats data for use with Recharts\n• Renders a line chart with axes, tooltip, and legend\n• Displays the company name and ticker above the chart",
                "low_structured": "• Defines a React component for stock charts\n• Uses Recharts to render a line chart\n• Displays company and ticker information",
                "low_unstructured": "This code defines a React component that displays a stock price line chart using the Recharts library.",
                "high_unstructured": "The provided code defines a functional React component named StockChart, which visualizes stock closing prices over time using the Recharts library. It first checks for valid data, extracts the company name and ticker, and formats the input data into an array suitable for charting. The component renders a responsive line chart with labeled axes, a tooltip, a legend, and a stylized line representing the stock's closing price, omitting data point dots for clarity. The chart is displayed within a container that also shows the company name and ticker symbol as a heading.",
                "high_structured": "• Defines a functional React component called StockChart\n• Validates input data:\n  ◦ Returns null if data is missing or empty\n• Extracts and displays company name and ticker symbol\n• Formats incoming stock data:\n  ◦ Maps each data point to an object with date and closing price\n• Renders a responsive line chart using Recharts:\n  ◦ Includes X and Y axes, with automatic Y-axis scaling\n  ◦ Adds a tooltip and legend for interactivity\n  ◦ Plots a monotone line for closing prices, styled with a specific color and no dots\n• Wraps the chart in a styled div with margin and a heading"
            }
        },
        "source": "backend",
        "event": "summarize_selected_code",
        "timestamp": "2025-08-23 16:07:29.000",
        "id": "uwd8pRuNFbnBbKeW4cfp"
    },
    {
        "data": {
            "mapping": [
                {
                    "summaryComponent": "This code defines a React component",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "that displays a stock price line chart",
                    "codeSegments": [
                        {
                            "line": 35,
                            "code": "<LineChart"
                        },
                        {
                            "line": 43,
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                        }
                    ]
                },
                {
                    "summaryComponent": "using the Recharts library",
                    "codeSegments": [
                        {
                            "line": 2,
                            "code": "import {"
                        },
                        {
                            "line": 11,
                            "code": "} from \"recharts\";"
                        }
                    ]
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));\n28: \n29:   return (\n30:     <div style={{ marginTop: \"2rem\" }}>\n31:       <h3>\n32:         {company} ({ticker})\n33:       </h3>\n34:       <ResponsiveContainer width=\"100%\" height={300}>\n35:         <LineChart\n36:           data={chartData}\n37:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n38:         >\n39:           <XAxis dataKey=\"date\" />\n40:           <YAxis domain={[\"auto\", \"auto\"]} />\n41:           <Tooltip />\n42:           <Legend />\n43:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n44:         </LineChart>\n45:       </ResponsiveContainer>\n46:     </div>\n47:   );\n48: };\n49: \n50: export default StockChart;\n51: ",
            "summary": "This code defines a React component that displays a stock price line chart using the Recharts library."
        },
        "source": "backend",
        "event": "map_summary_code",
        "timestamp": "2025-08-23 16:07:31.000",
        "id": "AWc9rPzBT7tnZq2Uy00v"
    },
    {
        "data": {
            "mapping": [
                {
                    "summaryComponent": "Defines a React component for stock charts",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        },
                        {
                            "line": 50,
                            "code": "export default StockChart;"
                        }
                    ]
                },
                {
                    "summaryComponent": "Uses Recharts to render a line chart",
                    "codeSegments": [
                        {
                            "line": 2,
                            "code": "import {"
                        },
                        {
                            "line": 3,
                            "code": "LineChart,"
                        },
                        {
                            "line": 35,
                            "code": "<LineChart"
                        },
                        {
                            "line": 43,
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                        }
                    ]
                },
                {
                    "summaryComponent": "Displays company and ticker information",
                    "codeSegments": [
                        {
                            "line": 16,
                            "code": "const company = data.name;"
                        },
                        {
                            "line": 17,
                            "code": "const ticker = data.ticker;"
                        },
                        {
                            "line": 31,
                            "code": "<h3>"
                        },
                        {
                            "line": 32,
                            "code": "{company} ({ticker})"
                        }
                    ]
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));\n28: \n29:   return (\n30:     <div style={{ marginTop: \"2rem\" }}>\n31:       <h3>\n32:         {company} ({ticker})\n33:       </h3>\n34:       <ResponsiveContainer width=\"100%\" height={300}>\n35:         <LineChart\n36:           data={chartData}\n37:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n38:         >\n39:           <XAxis dataKey=\"date\" />\n40:           <YAxis domain={[\"auto\", \"auto\"]} />\n41:           <Tooltip />\n42:           <Legend />\n43:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n44:         </LineChart>\n45:       </ResponsiveContainer>\n46:     </div>\n47:   );\n48: };\n49: \n50: export default StockChart;\n51: ",
            "summary": "• Defines a React component for stock charts\n• Uses Recharts to render a line chart\n• Displays company and ticker information"
        },
        "source": "backend",
        "event": "map_summary_code",
        "timestamp": "2025-08-23 16:07:31.000",
        "id": "t5pNuDxRfBOiq5tv0miP"
    },
    {
        "data": {
            "mapping": [
                {
                    "summaryComponent": "Implements a StockChart React component",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        },
                        {
                            "line": 50,
                            "code": "export default StockChart;"
                        }
                    ]
                },
                {
                    "summaryComponent": "Accepts a data prop with stock information",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "Formats data for use with Recharts",
                    "codeSegments": [
                        {
                            "line": 24,
                            "code": "const chartData = data.data.map((item) => ({"
                        },
                        {
                            "line": 25,
                            "code": "date: item.date,"
                        },
                        {
                            "line": 26,
                            "code": "price: item.close,"
                        }
                    ]
                },
                {
                    "summaryComponent": "Renders a line chart with axes, tooltip, and legend",
                    "codeSegments": [
                        {
                            "line": 35,
                            "code": "<LineChart"
                        },
                        {
                            "line": 39,
                            "code": "<XAxis dataKey=\"date\" />"
                        },
                        {
                            "line": 40,
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                        },
                        {
                            "line": 41,
                            "code": "<Tooltip />"
                        },
                        {
                            "line": 42,
                            "code": "<Legend />"
                        },
                        {
                            "line": 43,
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                        }
                    ]
                },
                {
                    "summaryComponent": "Displays the company name and ticker above the chart",
                    "codeSegments": [
                        {
                            "line": 31,
                            "code": "<h3>"
                        },
                        {
                            "line": 32,
                            "code": "{company} ({ticker})"
                        }
                    ]
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));\n28: \n29:   return (\n30:     <div style={{ marginTop: \"2rem\" }}>\n31:       <h3>\n32:         {company} ({ticker})\n33:       </h3>\n34:       <ResponsiveContainer width=\"100%\" height={300}>\n35:         <LineChart\n36:           data={chartData}\n37:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n38:         >\n39:           <XAxis dataKey=\"date\" />\n40:           <YAxis domain={[\"auto\", \"auto\"]} />\n41:           <Tooltip />\n42:           <Legend />\n43:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n44:         </LineChart>\n45:       </ResponsiveContainer>\n46:     </div>\n47:   );\n48: };\n49: \n50: export default StockChart;\n51: ",
            "summary": "• Implements a StockChart React component\n• Accepts a data prop with stock information\n• Formats data for use with Recharts\n• Renders a line chart with axes, tooltip, and legend\n• Displays the company name and ticker above the chart"
        },
        "source": "backend",
        "event": "map_summary_code",
        "timestamp": "2025-08-23 16:07:32.000",
        "id": "Qa48xM7kPD0FuiGwXcT7"
    },
    {
        "data": {
            "mapping": [
                {
                    "summaryComponent": "a React component called StockChart",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "renders a line chart of stock prices",
                    "codeSegments": [
                        {
                            "line": 35,
                            "code": "<LineChart"
                        },
                        {
                            "line": 43,
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                        }
                    ]
                },
                {
                    "summaryComponent": "using the Recharts library",
                    "codeSegments": [
                        {
                            "line": 2,
                            "code": "import {"
                        },
                        {
                            "line": 11,
                            "code": "} from \"recharts\";"
                        }
                    ]
                },
                {
                    "summaryComponent": "It takes stock data as a prop",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "formats it",
                    "codeSegments": [
                        {
                            "line": 24,
                            "code": "const chartData = data.data.map((item) => ({"
                        },
                        {
                            "line": 25,
                            "code": "date: item.date,"
                        },
                        {
                            "line": 26,
                            "code": "price: item.close,"
                        }
                    ]
                },
                {
                    "summaryComponent": "displays the company's name and ticker above the chart",
                    "codeSegments": [
                        {
                            "line": 31,
                            "code": "<h3>"
                        },
                        {
                            "line": 32,
                            "code": "{company} ({ticker})"
                        }
                    ]
                },
                {
                    "summaryComponent": "The chart includes axes",
                    "codeSegments": [
                        {
                            "line": 39,
                            "code": "<XAxis dataKey=\"date\" />"
                        },
                        {
                            "line": 40,
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                        }
                    ]
                },
                {
                    "summaryComponent": "a tooltip",
                    "codeSegments": [
                        {
                            "line": 41,
                            "code": "<Tooltip />"
                        }
                    ]
                },
                {
                    "summaryComponent": "a legend",
                    "codeSegments": [
                        {
                            "line": 42,
                            "code": "<Legend />"
                        }
                    ]
                },
                {
                    "summaryComponent": "plots closing prices over time",
                    "codeSegments": [
                        {
                            "line": 26,
                            "code": "price: item.close,"
                        },
                        {
                            "line": 43,
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                        }
                    ]
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));\n28: \n29:   return (\n30:     <div style={{ marginTop: \"2rem\" }}>\n31:       <h3>\n32:         {company} ({ticker})\n33:       </h3>\n34:       <ResponsiveContainer width=\"100%\" height={300}>\n35:         <LineChart\n36:           data={chartData}\n37:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n38:         >\n39:           <XAxis dataKey=\"date\" />\n40:           <YAxis domain={[\"auto\", \"auto\"]} />\n41:           <Tooltip />\n42:           <Legend />\n43:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n44:         </LineChart>\n45:       </ResponsiveContainer>\n46:     </div>\n47:   );\n48: };\n49: \n50: export default StockChart;\n51: ",
            "summary": "This code implements a React component called StockChart, which renders a line chart of stock prices using the Recharts library. It takes stock data as a prop, formats it, and displays the company's name and ticker above the chart. The chart includes axes, a tooltip, a legend, and plots closing prices over time."
        },
        "source": "backend",
        "event": "map_summary_code",
        "timestamp": "2025-08-23 16:07:33.000",
        "id": "VmcETaYHcUiLlcBfaSMH"
    },
    {
        "data": {
            "mapping": [
                {
                    "summaryComponent": "Defines a functional React component called StockChart",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "Validates input data:",
                    "codeSegments": [
                        {
                            "line": 14,
                            "code": "if (!data || !data.data || !data.data.length) return null;"
                        }
                    ]
                },
                {
                    "summaryComponent": "Returns null if data is missing or empty",
                    "codeSegments": [
                        {
                            "line": 14,
                            "code": "if (!data || !data.data || !data.data.length) return null;"
                        }
                    ]
                },
                {
                    "summaryComponent": "Extracts and displays company name and ticker symbol",
                    "codeSegments": [
                        {
                            "line": 16,
                            "code": "const company = data.name;"
                        },
                        {
                            "line": 17,
                            "code": "const ticker = data.ticker;"
                        },
                        {
                            "line": 32,
                            "code": "{company} ({ticker})"
                        }
                    ]
                },
                {
                    "summaryComponent": "Formats incoming stock data:",
                    "codeSegments": [
                        {
                            "line": 24,
                            "code": "const chartData = data.data.map((item) => ({"
                        }
                    ]
                },
                {
                    "summaryComponent": "Maps each data point to an object with date and closing price",
                    "codeSegments": [
                        {
                            "line": 25,
                            "code": "date: item.date,"
                        },
                        {
                            "line": 26,
                            "code": "price: item.close,"
                        }
                    ]
                },
                {
                    "summaryComponent": "Renders a responsive line chart using Recharts:",
                    "codeSegments": [
                        {
                            "line": 34,
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                        },
                        {
                            "line": 35,
                            "code": "<LineChart"
                        }
                    ]
                },
                {
                    "summaryComponent": "Includes X and Y axes, with automatic Y-axis scaling",
                    "codeSegments": [
                        {
                            "line": 39,
                            "code": "<XAxis dataKey=\"date\" />"
                        },
                        {
                            "line": 40,
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                        }
                    ]
                },
                {
                    "summaryComponent": "Adds a tooltip and legend for interactivity",
                    "codeSegments": [
                        {
                            "line": 41,
                            "code": "<Tooltip />"
                        },
                        {
                            "line": 42,
                            "code": "<Legend />"
                        }
                    ]
                },
                {
                    "summaryComponent": "Plots a monotone line for closing prices, styled with a specific color and no dots",
                    "codeSegments": [
                        {
                            "line": 43,
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                        }
                    ]
                },
                {
                    "summaryComponent": "Wraps the chart in a styled div with margin and a heading",
                    "codeSegments": [
                        {
                            "line": 30,
                            "code": "<div style={{ marginTop: \"2rem\" }}>"
                        },
                        {
                            "line": 31,
                            "code": "<h3>"
                        }
                    ]
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));\n28: \n29:   return (\n30:     <div style={{ marginTop: \"2rem\" }}>\n31:       <h3>\n32:         {company} ({ticker})\n33:       </h3>\n34:       <ResponsiveContainer width=\"100%\" height={300}>\n35:         <LineChart\n36:           data={chartData}\n37:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n38:         >\n39:           <XAxis dataKey=\"date\" />\n40:           <YAxis domain={[\"auto\", \"auto\"]} />\n41:           <Tooltip />\n42:           <Legend />\n43:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n44:         </LineChart>\n45:       </ResponsiveContainer>\n46:     </div>\n47:   );\n48: };\n49: \n50: export default StockChart;\n51: ",
            "summary": "• Defines a functional React component called StockChart\n• Validates input data:\n  ◦ Returns null if data is missing or empty\n• Extracts and displays company name and ticker symbol\n• Formats incoming stock data:\n  ◦ Maps each data point to an object with date and closing price\n• Renders a responsive line chart using Recharts:\n  ◦ Includes X and Y axes, with automatic Y-axis scaling\n  ◦ Adds a tooltip and legend for interactivity\n  ◦ Plots a monotone line for closing prices, styled with a specific color and no dots\n• Wraps the chart in a styled div with margin and a heading"
        },
        "source": "backend",
        "event": "map_summary_code",
        "timestamp": "2025-08-23 16:07:34.000",
        "id": "xLEHZ8u23WxwwlLMHES4"
    },
    {
        "data": {
            "after_section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "before_section_id": null
        },
        "source": "frontend",
        "event": "autotransit_section",
        "timestamp": "2025-08-23 16:07:35.000",
        "id": "4svAfHGVjpWspAd3lieG"
    },
    {
        "data": {
            "section_data": {
                "lines": [
                    1,
                    51
                ],
                "title": "StockChart React Component for Rendering Stock Price Line Charts",
                "summaryData": {
                    "medium_unstructured": "This code implements a React component called StockChart, which renders a line chart of stock prices using the Recharts library. It takes stock data as a prop, formats it, and displays the company's name and ticker above the chart. The chart includes axes, a tooltip, a legend, and plots closing prices over time.",
                    "title": "StockChart React Component for Rendering Stock Price Line Charts",
                    "medium_structured": "• Implements a StockChart React component\n• Accepts a data prop with stock information\n• Formats data for use with Recharts\n• Renders a line chart with axes, tooltip, and legend\n• Displays the company name and ticker above the chart",
                    "low_structured": "• Defines a React component for stock charts\n• Uses Recharts to render a line chart\n• Displays company and ticker information",
                    "low_unstructured": "This code defines a React component that displays a stock price line chart using the Recharts library.",
                    "high_unstructured": "The provided code defines a functional React component named StockChart, which visualizes stock closing prices over time using the Recharts library. It first checks for valid data, extracts the company name and ticker, and formats the input data into an array suitable for charting. The component renders a responsive line chart with labeled axes, a tooltip, a legend, and a stylized line representing the stock's closing price, omitting data point dots for clarity. The chart is displayed within a container that also shows the company name and ticker symbol as a heading.",
                    "high_structured": "• Defines a functional React component called StockChart\n• Validates input data:\n  ◦ Returns null if data is missing or empty\n• Extracts and displays company name and ticker symbol\n• Formats incoming stock data:\n  ◦ Maps each data point to an object with date and closing price\n• Renders a responsive line chart using Recharts:\n  ◦ Includes X and Y axes, with automatic Y-axis scaling\n  ◦ Adds a tooltip and legend for interactivity\n  ◦ Plots a monotone line for closing prices, styled with a specific color and no dots\n• Wraps the chart in a styled div with margin and a heading"
                },
                "editPromptDetailLevel": null,
                "summaryMappings": {
                    "medium_unstructured": [
                        {
                            "summaryComponent": "a React component called StockChart",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "renders a line chart of stock prices",
                            "codeSegments": [
                                {
                                    "line": 35,
                                    "code": "<LineChart"
                                },
                                {
                                    "line": 43,
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "using the Recharts library",
                            "codeSegments": [
                                {
                                    "line": 2,
                                    "code": "import {"
                                },
                                {
                                    "line": 11,
                                    "code": "} from \"recharts\";"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "It takes stock data as a prop",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "formats it",
                            "codeSegments": [
                                {
                                    "line": 24,
                                    "code": "const chartData = data.data.map((item) => ({"
                                },
                                {
                                    "line": 25,
                                    "code": "date: item.date,"
                                },
                                {
                                    "line": 26,
                                    "code": "price: item.close,"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "displays the company's name and ticker above the chart",
                            "codeSegments": [
                                {
                                    "line": 31,
                                    "code": "<h3>"
                                },
                                {
                                    "line": 32,
                                    "code": "{company} ({ticker})"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "The chart includes axes",
                            "codeSegments": [
                                {
                                    "line": 39,
                                    "code": "<XAxis dataKey=\"date\" />"
                                },
                                {
                                    "line": 40,
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "a tooltip",
                            "codeSegments": [
                                {
                                    "line": 41,
                                    "code": "<Tooltip />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "a legend",
                            "codeSegments": [
                                {
                                    "line": 42,
                                    "code": "<Legend />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "plots closing prices over time",
                            "codeSegments": [
                                {
                                    "line": 26,
                                    "code": "price: item.close,"
                                },
                                {
                                    "line": 43,
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                                }
                            ]
                        }
                    ],
                    "medium_structured": [
                        {
                            "summaryComponent": "Implements a StockChart React component",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                },
                                {
                                    "line": 50,
                                    "code": "export default StockChart;"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Accepts a data prop with stock information",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Formats data for use with Recharts",
                            "codeSegments": [
                                {
                                    "line": 24,
                                    "code": "const chartData = data.data.map((item) => ({"
                                },
                                {
                                    "line": 25,
                                    "code": "date: item.date,"
                                },
                                {
                                    "line": 26,
                                    "code": "price: item.close,"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Renders a line chart with axes, tooltip, and legend",
                            "codeSegments": [
                                {
                                    "line": 35,
                                    "code": "<LineChart"
                                },
                                {
                                    "line": 39,
                                    "code": "<XAxis dataKey=\"date\" />"
                                },
                                {
                                    "line": 40,
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                                },
                                {
                                    "line": 41,
                                    "code": "<Tooltip />"
                                },
                                {
                                    "line": 42,
                                    "code": "<Legend />"
                                },
                                {
                                    "line": 43,
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Displays the company name and ticker above the chart",
                            "codeSegments": [
                                {
                                    "line": 31,
                                    "code": "<h3>"
                                },
                                {
                                    "line": 32,
                                    "code": "{company} ({ticker})"
                                }
                            ]
                        }
                    ],
                    "low_structured": [
                        {
                            "summaryComponent": "Defines a React component for stock charts",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                },
                                {
                                    "line": 50,
                                    "code": "export default StockChart;"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Uses Recharts to render a line chart",
                            "codeSegments": [
                                {
                                    "line": 2,
                                    "code": "import {"
                                },
                                {
                                    "line": 3,
                                    "code": "LineChart,"
                                },
                                {
                                    "line": 35,
                                    "code": "<LineChart"
                                },
                                {
                                    "line": 43,
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Displays company and ticker information",
                            "codeSegments": [
                                {
                                    "line": 16,
                                    "code": "const company = data.name;"
                                },
                                {
                                    "line": 17,
                                    "code": "const ticker = data.ticker;"
                                },
                                {
                                    "line": 31,
                                    "code": "<h3>"
                                },
                                {
                                    "line": 32,
                                    "code": "{company} ({ticker})"
                                }
                            ]
                        }
                    ],
                    "low_unstructured": [
                        {
                            "summaryComponent": "This code defines a React component",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "that displays a stock price line chart",
                            "codeSegments": [
                                {
                                    "line": 35,
                                    "code": "<LineChart"
                                },
                                {
                                    "line": 43,
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "using the Recharts library",
                            "codeSegments": [
                                {
                                    "line": 2,
                                    "code": "import {"
                                },
                                {
                                    "line": 11,
                                    "code": "} from \"recharts\";"
                                }
                            ]
                        }
                    ],
                    "high_unstructured": [
                        {
                            "summaryComponent": "defines a functional React component named StockChart",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "visualizes stock closing prices over time using the Recharts library",
                            "codeSegments": [
                                {
                                    "line": 2,
                                    "code": "import {"
                                },
                                {
                                    "line": 3,
                                    "code": "LineChart,"
                                },
                                {
                                    "line": 4,
                                    "code": "Line,"
                                },
                                {
                                    "line": 5,
                                    "code": "XAxis,"
                                },
                                {
                                    "line": 6,
                                    "code": "YAxis,"
                                },
                                {
                                    "line": 7,
                                    "code": "Tooltip,"
                                },
                                {
                                    "line": 8,
                                    "code": "Legend,"
                                },
                                {
                                    "line": 9,
                                    "code": "ResponsiveContainer,"
                                },
                                {
                                    "line": 10,
                                    "code": "ReferenceLine,"
                                },
                                {
                                    "line": 11,
                                    "code": "} from \"recharts\";"
                                },
                                {
                                    "line": 35,
                                    "code": "<LineChart"
                                },
                                {
                                    "line": 43,
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "checks for valid data",
                            "codeSegments": [
                                {
                                    "line": 14,
                                    "code": "if (!data || !data.data || !data.data.length) return null;"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "extracts the company name and ticker",
                            "codeSegments": [
                                {
                                    "line": 16,
                                    "code": "const company = data.name;"
                                },
                                {
                                    "line": 17,
                                    "code": "const ticker = data.ticker;"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "formats the input data into an array suitable for charting",
                            "codeSegments": [
                                {
                                    "line": 24,
                                    "code": "const chartData = data.data.map((item) => ({"
                                },
                                {
                                    "line": 25,
                                    "code": "date: item.date,"
                                },
                                {
                                    "line": 26,
                                    "code": "price: item.close,"
                                },
                                {
                                    "line": 27,
                                    "code": "}));"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "renders a responsive line chart",
                            "codeSegments": [
                                {
                                    "line": 34,
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                                },
                                {
                                    "line": 35,
                                    "code": "<LineChart"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "with labeled axes",
                            "codeSegments": [
                                {
                                    "line": 39,
                                    "code": "<XAxis dataKey=\"date\" />"
                                },
                                {
                                    "line": 40,
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "a tooltip",
                            "codeSegments": [
                                {
                                    "line": 41,
                                    "code": "<Tooltip />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "a legend",
                            "codeSegments": [
                                {
                                    "line": 42,
                                    "code": "<Legend />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "a stylized line representing the stock's closing price, omitting data point dots for clarity",
                            "codeSegments": [
                                {
                                    "line": 43,
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "displayed within a container that also shows the company name and ticker symbol as a heading",
                            "codeSegments": [
                                {
                                    "line": 30,
                                    "code": "<div style={{ marginTop: \"2rem\" }}>"
                                },
                                {
                                    "line": 31,
                                    "code": "<h3>"
                                },
                                {
                                    "line": 32,
                                    "code": "{company} ({ticker})"
                                }
                            ]
                        }
                    ],
                    "high_structured": [
                        {
                            "summaryComponent": "Defines a functional React component called StockChart",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Validates input data:",
                            "codeSegments": [
                                {
                                    "line": 14,
                                    "code": "if (!data || !data.data || !data.data.length) return null;"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Returns null if data is missing or empty",
                            "codeSegments": [
                                {
                                    "line": 14,
                                    "code": "if (!data || !data.data || !data.data.length) return null;"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Extracts and displays company name and ticker symbol",
                            "codeSegments": [
                                {
                                    "line": 16,
                                    "code": "const company = data.name;"
                                },
                                {
                                    "line": 17,
                                    "code": "const ticker = data.ticker;"
                                },
                                {
                                    "line": 32,
                                    "code": "{company} ({ticker})"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Formats incoming stock data:",
                            "codeSegments": [
                                {
                                    "line": 24,
                                    "code": "const chartData = data.data.map((item) => ({"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Maps each data point to an object with date and closing price",
                            "codeSegments": [
                                {
                                    "line": 25,
                                    "code": "date: item.date,"
                                },
                                {
                                    "line": 26,
                                    "code": "price: item.close,"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Renders a responsive line chart using Recharts:",
                            "codeSegments": [
                                {
                                    "line": 34,
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                                },
                                {
                                    "line": 35,
                                    "code": "<LineChart"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Includes X and Y axes, with automatic Y-axis scaling",
                            "codeSegments": [
                                {
                                    "line": 39,
                                    "code": "<XAxis dataKey=\"date\" />"
                                },
                                {
                                    "line": 40,
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Adds a tooltip and legend for interactivity",
                            "codeSegments": [
                                {
                                    "line": 41,
                                    "code": "<Tooltip />"
                                },
                                {
                                    "line": 42,
                                    "code": "<Legend />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Plots a monotone line for closing prices, styled with a specific color and no dots",
                            "codeSegments": [
                                {
                                    "line": 43,
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Wraps the chart in a styled div with margin and a heading",
                            "codeSegments": [
                                {
                                    "line": 30,
                                    "code": "<div style={{ marginTop: \"2rem\" }}>"
                                },
                                {
                                    "line": 31,
                                    "code": "<h3>"
                                }
                            ]
                        }
                    ]
                },
                "metadata": {
                    "fullPath": "/project/workspace/frontend/src/StockChart.jsx",
                    "id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
                    "filename": "StockChart.jsx",
                    "offset": 0,
                    "originalCode": "import React from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  ReferenceLine,\n} from \"recharts\";\n\nconst StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;\n"
                },
                "editPromptStructured": null,
                "selectedStructured": "unstructured",
                "createdAt": 1755994055000,
                "editPromptValue": "",
                "selectedDetailLevel": "medium"
            },
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2"
        },
        "source": "frontend",
        "event": "create_new_section",
        "timestamp": "2025-08-23 16:07:35.000",
        "id": "RcKiTCAaKGzFJF697J76"
    },
    {
        "data": {
            "mapping": [
                {
                    "summaryComponent": "defines a functional React component named StockChart",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "visualizes stock closing prices over time using the Recharts library",
                    "codeSegments": [
                        {
                            "line": 2,
                            "code": "import {"
                        },
                        {
                            "line": 3,
                            "code": "LineChart,"
                        },
                        {
                            "line": 4,
                            "code": "Line,"
                        },
                        {
                            "line": 5,
                            "code": "XAxis,"
                        },
                        {
                            "line": 6,
                            "code": "YAxis,"
                        },
                        {
                            "line": 7,
                            "code": "Tooltip,"
                        },
                        {
                            "line": 8,
                            "code": "Legend,"
                        },
                        {
                            "line": 9,
                            "code": "ResponsiveContainer,"
                        },
                        {
                            "line": 10,
                            "code": "ReferenceLine,"
                        },
                        {
                            "line": 11,
                            "code": "} from \"recharts\";"
                        },
                        {
                            "line": 35,
                            "code": "<LineChart"
                        },
                        {
                            "line": 43,
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                        }
                    ]
                },
                {
                    "summaryComponent": "checks for valid data",
                    "codeSegments": [
                        {
                            "line": 14,
                            "code": "if (!data || !data.data || !data.data.length) return null;"
                        }
                    ]
                },
                {
                    "summaryComponent": "extracts the company name and ticker",
                    "codeSegments": [
                        {
                            "line": 16,
                            "code": "const company = data.name;"
                        },
                        {
                            "line": 17,
                            "code": "const ticker = data.ticker;"
                        }
                    ]
                },
                {
                    "summaryComponent": "formats the input data into an array suitable for charting",
                    "codeSegments": [
                        {
                            "line": 24,
                            "code": "const chartData = data.data.map((item) => ({"
                        },
                        {
                            "line": 25,
                            "code": "date: item.date,"
                        },
                        {
                            "line": 26,
                            "code": "price: item.close,"
                        },
                        {
                            "line": 27,
                            "code": "}));"
                        }
                    ]
                },
                {
                    "summaryComponent": "renders a responsive line chart",
                    "codeSegments": [
                        {
                            "line": 34,
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                        },
                        {
                            "line": 35,
                            "code": "<LineChart"
                        }
                    ]
                },
                {
                    "summaryComponent": "with labeled axes",
                    "codeSegments": [
                        {
                            "line": 39,
                            "code": "<XAxis dataKey=\"date\" />"
                        },
                        {
                            "line": 40,
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                        }
                    ]
                },
                {
                    "summaryComponent": "a tooltip",
                    "codeSegments": [
                        {
                            "line": 41,
                            "code": "<Tooltip />"
                        }
                    ]
                },
                {
                    "summaryComponent": "a legend",
                    "codeSegments": [
                        {
                            "line": 42,
                            "code": "<Legend />"
                        }
                    ]
                },
                {
                    "summaryComponent": "a stylized line representing the stock's closing price, omitting data point dots for clarity",
                    "codeSegments": [
                        {
                            "line": 43,
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                        }
                    ]
                },
                {
                    "summaryComponent": "displayed within a container that also shows the company name and ticker symbol as a heading",
                    "codeSegments": [
                        {
                            "line": 30,
                            "code": "<div style={{ marginTop: \"2rem\" }}>"
                        },
                        {
                            "line": 31,
                            "code": "<h3>"
                        },
                        {
                            "line": 32,
                            "code": "{company} ({ticker})"
                        }
                    ]
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));\n28: \n29:   return (\n30:     <div style={{ marginTop: \"2rem\" }}>\n31:       <h3>\n32:         {company} ({ticker})\n33:       </h3>\n34:       <ResponsiveContainer width=\"100%\" height={300}>\n35:         <LineChart\n36:           data={chartData}\n37:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n38:         >\n39:           <XAxis dataKey=\"date\" />\n40:           <YAxis domain={[\"auto\", \"auto\"]} />\n41:           <Tooltip />\n42:           <Legend />\n43:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n44:         </LineChart>\n45:       </ResponsiveContainer>\n46:     </div>\n47:   );\n48: };\n49: \n50: export default StockChart;\n51: ",
            "summary": "The provided code defines a functional React component named StockChart, which visualizes stock closing prices over time using the Recharts library. It first checks for valid data, extracts the company name and ticker, and formats the input data into an array suitable for charting. The component renders a responsive line chart with labeled axes, a tooltip, a legend, and a stylized line representing the stock's closing price, omitting data point dots for clarity. The chart is displayed within a container that also shows the company name and ticker symbol as a heading."
        },
        "source": "backend",
        "event": "map_summary_code",
        "timestamp": "2025-08-23 16:07:35.000",
        "id": "ds3cx2twIOX0kTb8Dg4t"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 0,
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:07:36.000",
        "id": "bUjeLmSkDLhA8VhX0Gbk"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:07:36.000",
        "id": "gqQ5JIiN0PkRnSmbbUEJ"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 1,
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:07:36.000",
        "id": "ng6RjlT0d48yv5WrUi5e"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 0,
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:07:37.000",
        "id": "GvR3R4koghWzkbE1s23V"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 0,
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:07:37.000",
        "id": "HdyXd0YZLiIogAMESePC"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:07:37.000",
        "id": "hof8twfyKnRGHJ9Pd6vz"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:07:37.000",
        "id": "rP5jNVwlhO1203cd7RFx"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 1,
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:07:38.000",
        "id": "3bAZXdLGGIyq1L6kw8rr"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:07:38.000",
        "id": "5M6kKQ0tcgGFwOGPW5He"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:07:38.000",
        "id": "TxJuujS7eKT61a6LJaFg"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:07:43.000",
        "id": "STmGp9vTDz0oQ4WS0K7J"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 0,
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:07:43.000",
        "id": "mN3duL8MAuoIIbbFKPVJ"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 1,
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:07:43.000",
        "id": "sX2nEw2GzusExHs2mb04"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:07:44.000",
        "id": "J2oDnM8JceTGnVa8ReYp"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 2,
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:07:44.000",
        "id": "hHxBPHP24GgGGIyiSbPq"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:07:45.000",
        "id": "G122HBCwFpYJZ5l64t3g"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 1,
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:07:45.000",
        "id": "gOlCQk25kxaKZSTUAAD5"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 2,
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:07:47.000",
        "id": "IC1XHuce4Y0urKzY1O8q"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:07:47.000",
        "id": "pDRVrTIGgwnvfEB1AG7E"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:07:48.000",
        "id": "3rrVU3kdVnZ7nUOz1kZo"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 3,
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:07:48.000",
        "id": "7699AkmxLhEGcO0zmmIB"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 5,
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:07:48.000",
        "id": "9CGdJucAn5REYkvox3sW"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:07:48.000",
        "id": "QWdaNYduKDieyBSxEqFh"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 8,
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:07:49.000",
        "id": "JhR59v3fAhFpc7N0Ndrl"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 9,
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:07:49.000",
        "id": "OSrl6xETKZ2vSR18hx9H"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:07:49.000",
        "id": "UKygFd4HiLpfjsNB0ARv"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:07:49.000",
        "id": "XnntLp5JVquBTsPVa6C8"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 6,
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:07:49.000",
        "id": "YjAK8VtjyoiE0gAegmG7"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:07:49.000",
        "id": "bLF7K3Opt3paREliBJGX"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:07:50.000",
        "id": "5G2TFKk77n0IyimzoSUI"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:07:50.000",
        "id": "9iuQSEEHc681IN6HkAak"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 6,
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:07:50.000",
        "id": "GQnEvg7ncswuuLqtckLO"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:07:50.000",
        "id": "LhPEnNLxBXH9GYbsY7rW"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 8,
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:07:50.000",
        "id": "ZP7Z1Y6gRJB7Bbae5sUv"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 5,
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:07:50.000",
        "id": "nlU1L3rLBSo0AKbDUujE"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:07:55.000",
        "id": "8g8KVmsUMWC9AfFkVgDU"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 6,
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:07:55.000",
        "id": "Uchiz6xUqbUT1W7aCklf"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:07:55.000",
        "id": "nNz3FIBJXw1OJQPbgg4J"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 5,
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:07:55.000",
        "id": "rNYua9j3lv7nNidzpPhB"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 6,
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:07:56.000",
        "id": "Eq8bxTEffONRCoWuVhls"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:07:56.000",
        "id": "HRuf6mNapECeQQHgUzUa"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 8,
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:07:56.000",
        "id": "KjeGagOtnO7XcfgbkCwT"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:07:56.000",
        "id": "warTfrQ1QKWKxCJNwqwU"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:07:57.000",
        "id": "rkzBXVUYyg0LjfMAOIY2"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:08:16.000",
        "id": "4HYWQgJVVfayePbPl024"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:08:16.000",
        "id": "S5uVLKaDatb1zFco8bjr"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:08:16.000",
        "id": "TPEyM2LE9HtquZrngjmL"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 0,
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:08:16.000",
        "id": "YSKC8hj3aZgaXecyNHC1"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 5,
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:08:16.000",
        "id": "fw8owmhA1ltenlsE7UUB"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 2,
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:08:16.000",
        "id": "mfFBj4dK58t5JGm8A9qF"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 3,
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:08:16.000",
        "id": "uHeA3DsF1WkFqCfVUDDV"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:08:17.000",
        "id": "6GSqxLyDFqtq9jxuxSc7"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 6,
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:08:17.000",
        "id": "HHW9wNVHFu7CJYWO26kY"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 7,
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:08:17.000",
        "id": "SfYJx3faMkPOInDcrVjN"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:08:17.000",
        "id": "fJK87uh6ruTIMFOeGOhU"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:08:17.000",
        "id": "nEwK5XrG7NxHcwD7hcN1"
    },
    {
        "data": {},
        "source": "frontend",
        "event": "click_summarize_code",
        "timestamp": "2025-08-23 16:08:22.000",
        "id": "9VIpoENdf0VPHNLzoJPS"
    },
    {
        "data": {
            "selected_code": "  const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };",
            "summary": {
                "medium_unstructured": "The formatDateString function takes a date string as input and returns only the date part by splitting the string at the 'T' character. This effectively removes any time information from ISO-formatted date-time strings.",
                "title": "Summary of formatDateString Function",
                "medium_structured": "• Accepts a date string as input\n• Splits the string at the 'T' character\n  ◦ Returns the part before 'T', which is the date\n• Removes time information from the input",
                "low_structured": "• Extracts date from a string\n• Removes time information",
                "low_unstructured": "This function extracts the date portion from a date-time string.",
                "high_unstructured": "The formatDateString function is designed to process ISO-formatted date-time strings by splitting the input string at the 'T' character, which typically separates the date and time components. It returns the first segment, corresponding to the date in 'YYYY-MM-DD' format, effectively discarding any time-related information. This utility is useful for displaying only the date portion in user interfaces or charts that do not require time details.",
                "high_structured": "• Processes ISO-formatted date-time strings\n• Splits the input string at the 'T' character\n  ◦ The 'T' typically separates date and time in ISO strings\n• Returns the segment before 'T', which is the date\n  ◦ Output is in 'YYYY-MM-DD' format\n• Discards any time information present in the original string\n• Useful for scenarios where only the date is needed, such as chart labels or summaries"
            }
        },
        "source": "backend",
        "event": "summarize_selected_code",
        "timestamp": "2025-08-23 16:08:26.000",
        "id": "Ad0OA2rD7DPUrrfY14ru"
    },
    {
        "data": {
            "mapping": [
                {
                    "summaryComponent": "Extracts date from a string",
                    "codeSegments": [
                        {
                            "line": 19,
                            "code": "const formatDateString = (date) => {"
                        },
                        {
                            "line": 20,
                            "code": "return date.split(\"T\")[0];"
                        }
                    ]
                },
                {
                    "summaryComponent": "Removes time information",
                    "codeSegments": [
                        {
                            "line": 20,
                            "code": "return date.split(\"T\")[0];"
                        }
                    ]
                }
            ],
            "code": "19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };",
            "summary": "• Extracts date from a string\n• Removes time information"
        },
        "source": "backend",
        "event": "map_summary_code",
        "timestamp": "2025-08-23 16:08:27.000",
        "id": "VNJW8GMbNGAHF1wQ6wxW"
    },
    {
        "data": {
            "mapping": [
                {
                    "summaryComponent": "Processes ISO-formatted date-time strings",
                    "codeSegments": [
                        {
                            "line": 19,
                            "code": "const formatDateString = (date) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "Splits the input string at the 'T' character",
                    "codeSegments": [
                        {
                            "line": 20,
                            "code": "date.split(\"T\")"
                        }
                    ]
                },
                {
                    "summaryComponent": "Returns the segment before 'T', which is the date",
                    "codeSegments": [
                        {
                            "line": 20,
                            "code": "return date.split(\"T\")[0];"
                        }
                    ]
                },
                {
                    "summaryComponent": "Discards any time information present in the original string",
                    "codeSegments": [
                        {
                            "line": 20,
                            "code": "date.split(\"T\")[0]"
                        }
                    ]
                }
            ],
            "code": "19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };",
            "summary": "• Processes ISO-formatted date-time strings\n• Splits the input string at the 'T' character\n  ◦ The 'T' typically separates date and time in ISO strings\n• Returns the segment before 'T', which is the date\n  ◦ Output is in 'YYYY-MM-DD' format\n• Discards any time information present in the original string\n• Useful for scenarios where only the date is needed, such as chart labels or summaries"
        },
        "source": "backend",
        "event": "map_summary_code",
        "timestamp": "2025-08-23 16:08:28.000",
        "id": "NjXQOqLBAJGdD7Eycnee"
    },
    {
        "data": {
            "mapping": [
                {
                    "summaryComponent": "Accepts a date string as input",
                    "codeSegments": [
                        {
                            "line": 19,
                            "code": "const formatDateString = (date) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "Splits the string at the 'T' character",
                    "codeSegments": [
                        {
                            "line": 20,
                            "code": "date.split(\"T\")"
                        }
                    ]
                },
                {
                    "summaryComponent": "Returns the part before 'T', which is the date",
                    "codeSegments": [
                        {
                            "line": 20,
                            "code": "return date.split(\"T\")[0];"
                        }
                    ]
                },
                {
                    "summaryComponent": "Removes time information from the input",
                    "codeSegments": [
                        {
                            "line": 20,
                            "code": "date.split(\"T\")[0]"
                        }
                    ]
                }
            ],
            "code": "19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };",
            "summary": "• Accepts a date string as input\n• Splits the string at the 'T' character\n  ◦ Returns the part before 'T', which is the date\n• Removes time information from the input"
        },
        "source": "backend",
        "event": "map_summary_code",
        "timestamp": "2025-08-23 16:08:28.000",
        "id": "qQgVEkCpv7C5CIIykFTK"
    },
    {
        "data": {
            "mapping": [
                {
                    "summaryComponent": "The formatDateString function",
                    "codeSegments": [
                        {
                            "line": 19,
                            "code": "const formatDateString = (date) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "takes a date string as input",
                    "codeSegments": [
                        {
                            "line": 19,
                            "code": "(date)"
                        }
                    ]
                },
                {
                    "summaryComponent": "returns only the date part",
                    "codeSegments": [
                        {
                            "line": 20,
                            "code": "return date.split(\"T\")[0];"
                        }
                    ]
                },
                {
                    "summaryComponent": "by splitting the string at the 'T' character",
                    "codeSegments": [
                        {
                            "line": 20,
                            "code": "date.split(\"T\")"
                        }
                    ]
                },
                {
                    "summaryComponent": "removes any time information from ISO-formatted date-time strings",
                    "codeSegments": [
                        {
                            "line": 20,
                            "code": "date.split(\"T\")[0];"
                        }
                    ]
                }
            ],
            "code": "19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };",
            "summary": "The formatDateString function takes a date string as input and returns only the date part by splitting the string at the 'T' character. This effectively removes any time information from ISO-formatted date-time strings."
        },
        "source": "backend",
        "event": "map_summary_code",
        "timestamp": "2025-08-23 16:08:28.000",
        "id": "rXcfyC3gZ6sg4bMm56r8"
    },
    {
        "data": {
            "mapping": [
                {
                    "summaryComponent": "The formatDateString function",
                    "codeSegments": [
                        {
                            "line": 19,
                            "code": "const formatDateString = (date) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "process ISO-formatted date-time strings",
                    "codeSegments": [
                        {
                            "line": 19,
                            "code": "(date)"
                        }
                    ]
                },
                {
                    "summaryComponent": "splitting the input string at the 'T' character",
                    "codeSegments": [
                        {
                            "line": 20,
                            "code": "date.split(\"T\")"
                        }
                    ]
                },
                {
                    "summaryComponent": "separates the date and time components",
                    "codeSegments": [
                        {
                            "line": 20,
                            "code": "date.split(\"T\")"
                        }
                    ]
                },
                {
                    "summaryComponent": "returns the first segment",
                    "codeSegments": [
                        {
                            "line": 20,
                            "code": "date.split(\"T\")[0]"
                        }
                    ]
                },
                {
                    "summaryComponent": "corresponding to the date in 'YYYY-MM-DD' format",
                    "codeSegments": [
                        {
                            "line": 20,
                            "code": "date.split(\"T\")[0]"
                        }
                    ]
                },
                {
                    "summaryComponent": "discarding any time-related information",
                    "codeSegments": [
                        {
                            "line": 20,
                            "code": "date.split(\"T\")[0]"
                        }
                    ]
                },
                {
                    "summaryComponent": "utility is useful for displaying only the date portion",
                    "codeSegments": [
                        {
                            "line": 20,
                            "code": "return date.split(\"T\")[0];"
                        }
                    ]
                }
            ],
            "code": "19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };",
            "summary": "The formatDateString function is designed to process ISO-formatted date-time strings by splitting the input string at the 'T' character, which typically separates the date and time components. It returns the first segment, corresponding to the date in 'YYYY-MM-DD' format, effectively discarding any time-related information. This utility is useful for displaying only the date portion in user interfaces or charts that do not require time details."
        },
        "source": "backend",
        "event": "map_summary_code",
        "timestamp": "2025-08-23 16:08:29.000",
        "id": "DKUeXSrsaw4WnGL9ORnL"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:08:30.000",
        "id": "GNg7PoN6KjSCzu0dufsk"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 1,
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:08:30.000",
        "id": "LvHvHDtmQU3saRTwV8Oc"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 3,
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:08:30.000",
        "id": "N0dm2xGWNPWLeASp9bce"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:08:30.000",
        "id": "SuP954TV6cAZ6TeNw1Ws"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 3,
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:08:30.000",
        "id": "TozqPlW1fbUikVpsMkXy"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 1,
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:08:30.000",
        "id": "Zo113n1t7sUKbjQTH41n"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 5,
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:08:30.000",
        "id": "ZrsN1BBgYcpjtnYzOA9d"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:08:30.000",
        "id": "cyMP4eOilDgiH3bJeYTZ"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:08:30.000",
        "id": "i95xiqEL74yr6TrDTEUH"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 0,
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:08:30.000",
        "id": "pm3ju66pINgh0GEmj4vE"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:08:30.000",
        "id": "rxK47t8ZRpDVZWxAfT95"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 2,
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:08:30.000",
        "id": "v1hL3QQI7KYKsPv7KgaP"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:08:30.000",
        "id": "xyEpFAgQB4V8Sw51WQ7t"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:08:30.000",
        "id": "yzsGcOb7YlUvARwkARVS"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:08:30.000",
        "id": "z0Jb40Frw3p9svjDz4I2"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 0,
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:08:30.000",
        "id": "zbCa6Dib6ZWjfo1lXopS"
    },
    {
        "data": {
            "after_section_id": "90cae355-de34-45ca-bfe3-da69ef86800b",
            "before_section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2"
        },
        "source": "frontend",
        "event": "autotransit_section",
        "timestamp": "2025-08-23 16:08:31.000",
        "id": "0EZ2stXxS3WBUZix7SQx"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:08:31.000",
        "id": "Cv20VoGONwtRNV5bKLtH"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 3,
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:08:31.000",
        "id": "Dtgl0OzXQOaHmnuHhXIc"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 1,
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:08:31.000",
        "id": "TMSIdIwdOT75CXRemPLz"
    },
    {
        "data": {
            "mapping": [
                {
                    "summaryComponent": "This function",
                    "codeSegments": [
                        {
                            "line": 19,
                            "code": "const formatDateString = (date) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "extracts the date portion",
                    "codeSegments": [
                        {
                            "line": 20,
                            "code": "return date.split(\"T\")[0];"
                        }
                    ]
                },
                {
                    "summaryComponent": "from a date-time string",
                    "codeSegments": [
                        {
                            "line": 19,
                            "code": "(date)"
                        }
                    ]
                }
            ],
            "code": "19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };",
            "summary": "This function extracts the date portion from a date-time string."
        },
        "source": "backend",
        "event": "map_summary_code",
        "timestamp": "2025-08-23 16:08:31.000",
        "id": "UmQobGrHEM7RqkX0kN2k"
    },
    {
        "data": {
            "section_data": {
                "lines": [
                    19,
                    21
                ],
                "title": "Summary of formatDateString Function",
                "summaryData": {
                    "medium_unstructured": "The formatDateString function takes a date string as input and returns only the date part by splitting the string at the 'T' character. This effectively removes any time information from ISO-formatted date-time strings.",
                    "title": "Summary of formatDateString Function",
                    "medium_structured": "• Accepts a date string as input\n• Splits the string at the 'T' character\n  ◦ Returns the part before 'T', which is the date\n• Removes time information from the input",
                    "low_structured": "• Extracts date from a string\n• Removes time information",
                    "low_unstructured": "This function extracts the date portion from a date-time string.",
                    "high_unstructured": "The formatDateString function is designed to process ISO-formatted date-time strings by splitting the input string at the 'T' character, which typically separates the date and time components. It returns the first segment, corresponding to the date in 'YYYY-MM-DD' format, effectively discarding any time-related information. This utility is useful for displaying only the date portion in user interfaces or charts that do not require time details.",
                    "high_structured": "• Processes ISO-formatted date-time strings\n• Splits the input string at the 'T' character\n  ◦ The 'T' typically separates date and time in ISO strings\n• Returns the segment before 'T', which is the date\n  ◦ Output is in 'YYYY-MM-DD' format\n• Discards any time information present in the original string\n• Useful for scenarios where only the date is needed, such as chart labels or summaries"
                },
                "editPromptDetailLevel": null,
                "summaryMappings": {
                    "medium_unstructured": [
                        {
                            "summaryComponent": "The formatDateString function",
                            "codeSegments": [
                                {
                                    "line": 19,
                                    "code": "const formatDateString = (date) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "takes a date string as input",
                            "codeSegments": [
                                {
                                    "line": 19,
                                    "code": "(date)"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "returns only the date part",
                            "codeSegments": [
                                {
                                    "line": 20,
                                    "code": "return date.split(\"T\")[0];"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "by splitting the string at the 'T' character",
                            "codeSegments": [
                                {
                                    "line": 20,
                                    "code": "date.split(\"T\")"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "removes any time information from ISO-formatted date-time strings",
                            "codeSegments": [
                                {
                                    "line": 20,
                                    "code": "date.split(\"T\")[0];"
                                }
                            ]
                        }
                    ],
                    "medium_structured": [
                        {
                            "summaryComponent": "Accepts a date string as input",
                            "codeSegments": [
                                {
                                    "line": 19,
                                    "code": "const formatDateString = (date) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Splits the string at the 'T' character",
                            "codeSegments": [
                                {
                                    "line": 20,
                                    "code": "date.split(\"T\")"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Returns the part before 'T', which is the date",
                            "codeSegments": [
                                {
                                    "line": 20,
                                    "code": "return date.split(\"T\")[0];"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Removes time information from the input",
                            "codeSegments": [
                                {
                                    "line": 20,
                                    "code": "date.split(\"T\")[0]"
                                }
                            ]
                        }
                    ],
                    "low_structured": [
                        {
                            "summaryComponent": "Extracts date from a string",
                            "codeSegments": [
                                {
                                    "line": 19,
                                    "code": "const formatDateString = (date) => {"
                                },
                                {
                                    "line": 20,
                                    "code": "return date.split(\"T\")[0];"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Removes time information",
                            "codeSegments": [
                                {
                                    "line": 20,
                                    "code": "return date.split(\"T\")[0];"
                                }
                            ]
                        }
                    ],
                    "low_unstructured": [
                        {
                            "summaryComponent": "This function",
                            "codeSegments": [
                                {
                                    "line": 19,
                                    "code": "const formatDateString = (date) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "extracts the date portion",
                            "codeSegments": [
                                {
                                    "line": 20,
                                    "code": "return date.split(\"T\")[0];"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "from a date-time string",
                            "codeSegments": [
                                {
                                    "line": 19,
                                    "code": "(date)"
                                }
                            ]
                        }
                    ],
                    "high_unstructured": [
                        {
                            "summaryComponent": "The formatDateString function",
                            "codeSegments": [
                                {
                                    "line": 19,
                                    "code": "const formatDateString = (date) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "process ISO-formatted date-time strings",
                            "codeSegments": [
                                {
                                    "line": 19,
                                    "code": "(date)"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "splitting the input string at the 'T' character",
                            "codeSegments": [
                                {
                                    "line": 20,
                                    "code": "date.split(\"T\")"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "separates the date and time components",
                            "codeSegments": [
                                {
                                    "line": 20,
                                    "code": "date.split(\"T\")"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "returns the first segment",
                            "codeSegments": [
                                {
                                    "line": 20,
                                    "code": "date.split(\"T\")[0]"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "corresponding to the date in 'YYYY-MM-DD' format",
                            "codeSegments": [
                                {
                                    "line": 20,
                                    "code": "date.split(\"T\")[0]"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "discarding any time-related information",
                            "codeSegments": [
                                {
                                    "line": 20,
                                    "code": "date.split(\"T\")[0]"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "utility is useful for displaying only the date portion",
                            "codeSegments": [
                                {
                                    "line": 20,
                                    "code": "return date.split(\"T\")[0];"
                                }
                            ]
                        }
                    ],
                    "high_structured": [
                        {
                            "summaryComponent": "Processes ISO-formatted date-time strings",
                            "codeSegments": [
                                {
                                    "line": 19,
                                    "code": "const formatDateString = (date) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Splits the input string at the 'T' character",
                            "codeSegments": [
                                {
                                    "line": 20,
                                    "code": "date.split(\"T\")"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Returns the segment before 'T', which is the date",
                            "codeSegments": [
                                {
                                    "line": 20,
                                    "code": "return date.split(\"T\")[0];"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Discards any time information present in the original string",
                            "codeSegments": [
                                {
                                    "line": 20,
                                    "code": "date.split(\"T\")[0]"
                                }
                            ]
                        }
                    ]
                },
                "metadata": {
                    "fullPath": "/project/workspace/frontend/src/StockChart.jsx",
                    "id": "90cae355-de34-45ca-bfe3-da69ef86800b",
                    "filename": "StockChart.jsx",
                    "offset": 313,
                    "originalCode": "  const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };"
                },
                "editPromptStructured": null,
                "selectedStructured": "unstructured",
                "createdAt": 1755994111000,
                "editPromptValue": "",
                "selectedDetailLevel": "medium"
            },
            "section_id": "90cae355-de34-45ca-bfe3-da69ef86800b"
        },
        "source": "frontend",
        "event": "create_new_section",
        "timestamp": "2025-08-23 16:08:31.000",
        "id": "d4LXD0cJamGedarQaZ1l"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 5,
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:08:31.000",
        "id": "iCuoqvnqFPo9iXyDIRo7"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:08:31.000",
        "id": "oN5nXdq2rNW7ZXTcOX0D"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:08:31.000",
        "id": "oVQlcwm5feF1wINGmVXu"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 0,
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:08:31.000",
        "id": "rYDsxRjmewVgSdIEuPy8"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:08:31.000",
        "id": "zaKxCccv3disy4KNGPpK"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 2,
            "section_id": "90cae355-de34-45ca-bfe3-da69ef86800b",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:08:32.000",
        "id": "5Di6RuLN4l1DhvoPziJm"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 3,
            "section_id": "90cae355-de34-45ca-bfe3-da69ef86800b",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:08:32.000",
        "id": "8cDMzDz2cKfnlWFqWxe4"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "90cae355-de34-45ca-bfe3-da69ef86800b",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:08:32.000",
        "id": "SxW6RfQujvA83LxElKwQ"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "90cae355-de34-45ca-bfe3-da69ef86800b",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:08:32.000",
        "id": "kGbnpfnBYlEvkysfmiSA"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 1,
            "section_id": "90cae355-de34-45ca-bfe3-da69ef86800b",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:08:32.000",
        "id": "lvnEVxyF8ldgds4APXvl"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "90cae355-de34-45ca-bfe3-da69ef86800b",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:08:32.000",
        "id": "sLMfTwXABWK7hlcDh1dC"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 4,
            "section_id": "90cae355-de34-45ca-bfe3-da69ef86800b",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:08:32.000",
        "id": "u1HCIIEwkHwfApV7AM8m"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "90cae355-de34-45ca-bfe3-da69ef86800b",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:08:33.000",
        "id": "1I956MgPMYrv2bRWPCgH"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 2,
            "section_id": "90cae355-de34-45ca-bfe3-da69ef86800b",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:08:33.000",
        "id": "3Zo73Cb6wBTbMOSGzW9v"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "90cae355-de34-45ca-bfe3-da69ef86800b",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:08:33.000",
        "id": "4feZpkZT70mqrfc4w93n"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "90cae355-de34-45ca-bfe3-da69ef86800b",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:08:33.000",
        "id": "NGdQA9dx0aatlLoGP6Ie"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "90cae355-de34-45ca-bfe3-da69ef86800b",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:08:33.000",
        "id": "QR8oMvWp8LYq3LqxKjXR"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 3,
            "section_id": "90cae355-de34-45ca-bfe3-da69ef86800b",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:08:33.000",
        "id": "h3zwFyrvaYmCYsU9CwId"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 0,
            "section_id": "90cae355-de34-45ca-bfe3-da69ef86800b",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:08:33.000",
        "id": "l9jnjVW0A07ISCZunNCW"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 1,
            "section_id": "90cae355-de34-45ca-bfe3-da69ef86800b",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:08:33.000",
        "id": "nuOy3Q2ON1aLWzAVL4PN"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "90cae355-de34-45ca-bfe3-da69ef86800b",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:08:33.000",
        "id": "vyXfzYBBSJbAVLmpJL3W"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "90cae355-de34-45ca-bfe3-da69ef86800b",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:08:34.000",
        "id": "6GrlPwquN6QuCBYrct1l"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "90cae355-de34-45ca-bfe3-da69ef86800b",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:08:34.000",
        "id": "Y9wa9gZuKKCnr7zGJ2Jd"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 2,
            "section_id": "90cae355-de34-45ca-bfe3-da69ef86800b",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:08:34.000",
        "id": "ZW8DPNA69KiBedjdONOy"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "90cae355-de34-45ca-bfe3-da69ef86800b",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:08:34.000",
        "id": "dQNe4LwbtDNOb8OXbrxI"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 4,
            "section_id": "90cae355-de34-45ca-bfe3-da69ef86800b",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:08:34.000",
        "id": "detjiNCBQpdVWO57fmfQ"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 2,
            "section_id": "90cae355-de34-45ca-bfe3-da69ef86800b",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:08:34.000",
        "id": "e8Jt8CCz5GF9wLGqFeFd"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "90cae355-de34-45ca-bfe3-da69ef86800b",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:08:34.000",
        "id": "eAWp0GKqbvBQ7C7xtCTm"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 0,
            "section_id": "90cae355-de34-45ca-bfe3-da69ef86800b",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:08:34.000",
        "id": "f8qJDAJiIAfr1eZnRP8y"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "90cae355-de34-45ca-bfe3-da69ef86800b",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:08:34.000",
        "id": "nIaUZoBAyjqHtFn0rBhk"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 3,
            "section_id": "90cae355-de34-45ca-bfe3-da69ef86800b",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:08:34.000",
        "id": "rcHuX6zCyHn4R6naStli"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 4,
            "section_id": "90cae355-de34-45ca-bfe3-da69ef86800b",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:08:34.000",
        "id": "zyJDjr747DWKwpYlH83z"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "90cae355-de34-45ca-bfe3-da69ef86800b",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:08:35.000",
        "id": "Kwz2L76G2APz8kwy7wUK"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 1,
            "section_id": "90cae355-de34-45ca-bfe3-da69ef86800b",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:08:35.000",
        "id": "MME503jgKl1FDO6mzuRK"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 3,
            "section_id": "90cae355-de34-45ca-bfe3-da69ef86800b",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:08:35.000",
        "id": "QaUd9I9s86sFiIcqKPdf"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "90cae355-de34-45ca-bfe3-da69ef86800b",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:08:35.000",
        "id": "UK5aVhz1N0SuXA0mtcuh"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 0,
            "section_id": "90cae355-de34-45ca-bfe3-da69ef86800b",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:08:35.000",
        "id": "XjH58GC4xSFHXAi8YfxY"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 2,
            "section_id": "90cae355-de34-45ca-bfe3-da69ef86800b",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:08:35.000",
        "id": "dxxyfOvhdAZK0zMsdTkv"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 3,
            "section_id": "90cae355-de34-45ca-bfe3-da69ef86800b",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:08:35.000",
        "id": "ft5svi7PLjRbmWMuaaT5"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "90cae355-de34-45ca-bfe3-da69ef86800b",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:08:35.000",
        "id": "jQjuYIAt9qxaE4Ss4Eqb"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "90cae355-de34-45ca-bfe3-da69ef86800b",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:08:35.000",
        "id": "mY0mxg4a4Ejaz3hlWo6E"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "90cae355-de34-45ca-bfe3-da69ef86800b",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:08:35.000",
        "id": "tto2DTJjSS73Rdsc7v4U"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "90cae355-de34-45ca-bfe3-da69ef86800b",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:08:35.000",
        "id": "yMt4AToINDqq7ShCugFb"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "90cae355-de34-45ca-bfe3-da69ef86800b",
            "detail_level": "low"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:08:36.000",
        "id": "1V7fueHzDo1VwOtRtQtC"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "90cae355-de34-45ca-bfe3-da69ef86800b",
            "detail_level": "low"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:08:36.000",
        "id": "OgPRu7z7V0C4G8DNB77n"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 2,
            "section_id": "90cae355-de34-45ca-bfe3-da69ef86800b",
            "detail_level": "low"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:08:36.000",
        "id": "bNuzE8SlHPImlNdDVOGA"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 1,
            "section_id": "90cae355-de34-45ca-bfe3-da69ef86800b",
            "detail_level": "low"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:08:36.000",
        "id": "g89G2OAXOhU87kscf0H1"
    },
    {
        "data": {
            "before_structured": "unstructured",
            "after_detail_level": "low",
            "after_structured": "unstructured",
            "section_id": "90cae355-de34-45ca-bfe3-da69ef86800b",
            "before_detail_level": "medium"
        },
        "source": "frontend",
        "event": "change_summary_level",
        "timestamp": "2025-08-23 16:08:36.000",
        "id": "gbkHtpewBjkvIVmleKFs"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "90cae355-de34-45ca-bfe3-da69ef86800b",
            "detail_level": "low"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:08:37.000",
        "id": "2Yv7IOjibYlfFnDn9iQG"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 1,
            "section_id": "90cae355-de34-45ca-bfe3-da69ef86800b",
            "detail_level": "low"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:08:37.000",
        "id": "OW26aUt8pIjIshLNqMxE"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "90cae355-de34-45ca-bfe3-da69ef86800b",
            "detail_level": "low"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:08:37.000",
        "id": "ScXnDGLUjqssRHb5X20W"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 2,
            "section_id": "90cae355-de34-45ca-bfe3-da69ef86800b",
            "detail_level": "low"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:08:37.000",
        "id": "uD6xJOWP1dYYn7Dd84IO"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 2,
            "section_id": "90cae355-de34-45ca-bfe3-da69ef86800b",
            "detail_level": "low"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:08:37.000",
        "id": "zF7GDWViLUB4fjLLbmhS"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "90cae355-de34-45ca-bfe3-da69ef86800b",
            "detail_level": "low"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:08:38.000",
        "id": "vnDNZEaMuOzUcxX2jyXA"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "90cae355-de34-45ca-bfe3-da69ef86800b",
            "detail_level": "low"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:08:53.000",
        "id": "GrXlXhg6MWUFCFImeAhU"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 2,
            "section_id": "90cae355-de34-45ca-bfe3-da69ef86800b",
            "detail_level": "low"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:08:53.000",
        "id": "MEKClZK1USZHM6twb3hU"
    },
    {
        "data": {
            "summary": "This function extracts the date portion from a date-time string.",
            "structured": "unstructured",
            "section_id": "90cae355-de34-45ca-bfe3-da69ef86800b",
            "detail_level": "low"
        },
        "source": "frontend",
        "event": "click_edit_in_prompt",
        "timestamp": "2025-08-23 16:08:56.000",
        "id": "2VQWirI9EWnIIOC335yP"
    },
    {
        "data": {
            "original_summary": "This function extracts the date portion from a date-time string.",
            "instruction": "show ticks about abbreviation of the months",
            "structured": "unstructured",
            "section_id": "90cae355-de34-45ca-bfe3-da69ef86800b",
            "detail_level": "low"
        },
        "source": "frontend",
        "event": "apply_instruction_summary",
        "timestamp": "2025-08-23 16:09:02.000",
        "id": "vBWtZWis9CZ9Zs4luswJ"
    },
    {
        "data": {
            "instruction": "show ticks about abbreviation of the months",
            "updated_summary": "This function extracts the date portion from a date-time string.  \nAdditionally, it should display ticks indicating the abbreviation of the months.",
            "original_code": "  const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };",
            "original_summary": "This function extracts the date portion from a date-time string."
        },
        "source": "backend",
        "event": "apply_instruction_summary",
        "timestamp": "2025-08-23 16:09:03.000",
        "id": "PRt4r6mrWUkkmK8G4wid"
    },
    {
        "data": {
            "edited_summary": "This function extracts the date portion from a date-time string.  \nAdditionally, it should display ticks indicating the abbreviation of the months.",
            "original_summary": "This function extracts the date portion from a date-time string.",
            "structured": "unstructured",
            "section_id": "90cae355-de34-45ca-bfe3-da69ef86800b",
            "detail_level": "low"
        },
        "source": "frontend",
        "event": "commit_modified_summary",
        "timestamp": "2025-08-23 16:09:08.000",
        "id": "gocLmWMW1iRUuIb1WXCT"
    },
    {
        "data": {
            "original_summary": "This function extracts the date portion from a date-time string.",
            "structured_type": "unstructured",
            "updated_code": "const formatDateString = (date) => {\n    const d = new Date(date);\n    return d.toLocaleString('default', { month: 'short', day: 'numeric' });\n  };",
            "original_code": "  const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };",
            "edited_summary": "This function extracts the date portion from a date-time string.  \nAdditionally, it should display ticks indicating the abbreviation of the months.",
            "detail_level": "low"
        },
        "source": "backend",
        "event": "modify_summary_mediation",
        "timestamp": "2025-08-23 16:09:09.000",
        "id": "ag3lGPPueoDiePoCZ1L6"
    },
    {
        "data": {
            "new_summary": {
                "medium_unstructured": "The formatDateString function now takes a date string as input, converts it to a Date object, and returns a formatted string displaying the abbreviated month and numeric day (e.g., 'Jun 5'), rather than just splitting at the 'T' character to extract the date part.",
                "title": "Summary of formatDateString Function (Updated Formatting)",
                "medium_structured": "• Accepts a date string as input\n• Converts the input to a Date object\n  ◦ Formats the date to show abbreviated month and numeric day (e.g., 'Jun 5')\n• Removes time information from the input",
                "low_structured": "• Formats a date string to show abbreviated month and numeric day\n• Removes time information",
                "low_unstructured": "This function formats a date string to display the abbreviated month and numeric day, instead of simply extracting the date portion.",
                "high_unstructured": "The formatDateString function has been updated to process date strings by converting them into Date objects and formatting them using toLocaleString with options for abbreviated month and numeric day. Instead of splitting the string at the 'T' character and returning the 'YYYY-MM-DD' format, it now outputs a more user-friendly format like 'Jun 5', making it suitable for display in user interfaces or charts where a concise date representation is preferred.",
                "high_structured": "• Processes date strings by converting them to Date objects\n• Formats the date using toLocaleString with options for abbreviated month and numeric day\n  ◦ Output is in a format like 'Jun 5' instead of 'YYYY-MM-DD'\n• No longer splits the string at the 'T' character\n• Discards any time information present in the original string\n• Useful for scenarios where a concise, user-friendly date label is needed, such as chart labels or summaries"
            },
            "old_summary": {
                "medium_unstructured": "The formatDateString function takes a date string as input and returns only the date part by splitting the string at the 'T' character. This effectively removes any time information from ISO-formatted date-time strings.",
                "title": "Summary of formatDateString Function",
                "medium_structured": "• Accepts a date string as input\n• Splits the string at the 'T' character\n  ◦ Returns the part before 'T', which is the date\n• Removes time information from the input",
                "low_structured": "• Extracts date from a string\n• Removes time information",
                "low_unstructured": "This function extracts the date portion from a date-time string.",
                "high_unstructured": "The formatDateString function is designed to process ISO-formatted date-time strings by splitting the input string at the 'T' character, which typically separates the date and time components. It returns the first segment, corresponding to the date in 'YYYY-MM-DD' format, effectively discarding any time-related information. This utility is useful for displaying only the date portion in user interfaces or charts that do not require time details.",
                "high_structured": "• Processes ISO-formatted date-time strings\n• Splits the input string at the 'T' character\n  ◦ The 'T' typically separates date and time in ISO strings\n• Returns the segment before 'T', which is the date\n  ◦ Output is in 'YYYY-MM-DD' format\n• Discards any time information present in the original string\n• Useful for scenarios where only the date is needed, such as chart labels or summaries"
            },
            "new_code": "  const formatDateString = (date) => {\n    const d = new Date(date);\n    return d.toLocaleString('default', { month: 'short', day: 'numeric' });\n  };",
            "original_code": "  const formatDateString = (date) => {\n    const d = new Date(date);\n    return d.toLocaleString('default', { month: 'short', day: 'numeric' });\n  };"
        },
        "source": "backend",
        "event": "summarize_modified_code",
        "timestamp": "2025-08-23 16:09:14.000",
        "id": "ICcDFJZlCuF77vvyedeW"
    },
    {
        "data": {
            "mapping": [
                {
                    "summaryComponent": "formats a date string",
                    "codeSegments": [
                        {
                            "line": 19,
                            "code": "const formatDateString = (date) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "to display the abbreviated month and numeric day",
                    "codeSegments": [
                        {
                            "line": 21,
                            "code": "return d.toLocaleString('default', { month: 'short', day: 'numeric' });"
                        }
                    ]
                },
                {
                    "summaryComponent": "instead of simply extracting the date portion",
                    "codeSegments": [
                        {
                            "line": 21,
                            "code": "return d.toLocaleString('default', { month: 'short', day: 'numeric' });"
                        }
                    ]
                }
            ],
            "code": "19:   const formatDateString = (date) => {\n20:     const d = new Date(date);\n21:     return d.toLocaleString('default', { month: 'short', day: 'numeric' });\n22:   };",
            "summary": "This function formats a date string to display the abbreviated month and numeric day, instead of simply extracting the date portion."
        },
        "source": "backend",
        "event": "map_summary_code",
        "timestamp": "2025-08-23 16:09:15.000",
        "id": "QeFZSX2LUmc8DFVOXnYv"
    },
    {
        "data": {
            "mapping": [
                {
                    "summaryComponent": "Accepts a date string as input",
                    "codeSegments": [
                        {
                            "line": 19,
                            "code": "const formatDateString = (date) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "Converts the input to a Date object",
                    "codeSegments": [
                        {
                            "line": 20,
                            "code": "const d = new Date(date);"
                        }
                    ]
                },
                {
                    "summaryComponent": "Formats the date to show abbreviated month and numeric day (e.g., 'Jun 5')",
                    "codeSegments": [
                        {
                            "line": 21,
                            "code": "return d.toLocaleString('default', { month: 'short', day: 'numeric' });"
                        }
                    ]
                },
                {
                    "summaryComponent": "Removes time information from the input",
                    "codeSegments": [
                        {
                            "line": 21,
                            "code": "return d.toLocaleString('default', { month: 'short', day: 'numeric' });"
                        }
                    ]
                }
            ],
            "code": "19:   const formatDateString = (date) => {\n20:     const d = new Date(date);\n21:     return d.toLocaleString('default', { month: 'short', day: 'numeric' });\n22:   };",
            "summary": "• Accepts a date string as input\n• Converts the input to a Date object\n  ◦ Formats the date to show abbreviated month and numeric day (e.g., 'Jun 5')\n• Removes time information from the input"
        },
        "source": "backend",
        "event": "map_summary_code",
        "timestamp": "2025-08-23 16:09:15.000",
        "id": "iakkfEoHH7bkaAwMv6bx"
    },
    {
        "data": {
            "mapping": [
                {
                    "summaryComponent": "Formats a date string to show abbreviated month and numeric day",
                    "codeSegments": [
                        {
                            "line": 19,
                            "code": "const formatDateString = (date) => {"
                        },
                        {
                            "line": 21,
                            "code": "return d.toLocaleString('default', { month: 'short', day: 'numeric' });"
                        }
                    ]
                },
                {
                    "summaryComponent": "Removes time information",
                    "codeSegments": [
                        {
                            "line": 21,
                            "code": "return d.toLocaleString('default', { month: 'short', day: 'numeric' });"
                        }
                    ]
                }
            ],
            "code": "19:   const formatDateString = (date) => {\n20:     const d = new Date(date);\n21:     return d.toLocaleString('default', { month: 'short', day: 'numeric' });\n22:   };",
            "summary": "• Formats a date string to show abbreviated month and numeric day\n• Removes time information"
        },
        "source": "backend",
        "event": "map_summary_code",
        "timestamp": "2025-08-23 16:09:15.000",
        "id": "rh9TIF6wY4hWcmBTEzu2"
    },
    {
        "data": {
            "mapping": [
                {
                    "summaryComponent": "Processes date strings by converting them to Date objects",
                    "codeSegments": [
                        {
                            "line": 20,
                            "code": "const d = new Date(date);"
                        }
                    ]
                },
                {
                    "summaryComponent": "Formats the date using toLocaleString with options for abbreviated month and numeric day",
                    "codeSegments": [
                        {
                            "line": 21,
                            "code": "return d.toLocaleString('default', { month: 'short', day: 'numeric' });"
                        }
                    ]
                },
                {
                    "summaryComponent": "Output is in a format like 'Jun 5' instead of 'YYYY-MM-DD'",
                    "codeSegments": [
                        {
                            "line": 21,
                            "code": "return d.toLocaleString('default', { month: 'short', day: 'numeric' });"
                        }
                    ]
                },
                {
                    "summaryComponent": "No longer splits the string at the 'T' character",
                    "codeSegments": [
                        {
                            "line": 20,
                            "code": "const d = new Date(date);"
                        }
                    ]
                },
                {
                    "summaryComponent": "Discards any time information present in the original string",
                    "codeSegments": [
                        {
                            "line": 21,
                            "code": "return d.toLocaleString('default', { month: 'short', day: 'numeric' });"
                        }
                    ]
                },
                {
                    "summaryComponent": "Useful for scenarios where a concise, user-friendly date label is needed, such as chart labels or summaries",
                    "codeSegments": [
                        {
                            "line": 19,
                            "code": "const formatDateString = (date) => {"
                        }
                    ]
                }
            ],
            "code": "19:   const formatDateString = (date) => {\n20:     const d = new Date(date);\n21:     return d.toLocaleString('default', { month: 'short', day: 'numeric' });\n22:   };",
            "summary": "• Processes date strings by converting them to Date objects\n• Formats the date using toLocaleString with options for abbreviated month and numeric day\n  ◦ Output is in a format like 'Jun 5' instead of 'YYYY-MM-DD'\n• No longer splits the string at the 'T' character\n• Discards any time information present in the original string\n• Useful for scenarios where a concise, user-friendly date label is needed, such as chart labels or summaries"
        },
        "source": "backend",
        "event": "map_summary_code",
        "timestamp": "2025-08-23 16:09:16.000",
        "id": "054rXJdZVQO18sNz6QJS"
    },
    {
        "data": {
            "mapping": [
                {
                    "summaryComponent": "The formatDateString function",
                    "codeSegments": [
                        {
                            "line": 19,
                            "code": "const formatDateString = (date) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "now takes a date string as input",
                    "codeSegments": [
                        {
                            "line": 19,
                            "code": "(date)"
                        }
                    ]
                },
                {
                    "summaryComponent": "converts it to a Date object",
                    "codeSegments": [
                        {
                            "line": 20,
                            "code": "const d = new Date(date);"
                        }
                    ]
                },
                {
                    "summaryComponent": "returns a formatted string displaying the abbreviated month and numeric day",
                    "codeSegments": [
                        {
                            "line": 21,
                            "code": "return d.toLocaleString('default', { month: 'short', day: 'numeric' });"
                        }
                    ]
                },
                {
                    "summaryComponent": "e.g., 'Jun 5'",
                    "codeSegments": [
                        {
                            "line": 21,
                            "code": "month: 'short', day: 'numeric'"
                        }
                    ]
                },
                {
                    "summaryComponent": "rather than just splitting at the 'T' character to extract the date part",
                    "codeSegments": [
                        {
                            "line": 19,
                            "code": "// No code present for splitting at 'T'; this is implied by the absence of such logic."
                        }
                    ]
                }
            ],
            "code": "19:   const formatDateString = (date) => {\n20:     const d = new Date(date);\n21:     return d.toLocaleString('default', { month: 'short', day: 'numeric' });\n22:   };",
            "summary": "The formatDateString function now takes a date string as input, converts it to a Date object, and returns a formatted string displaying the abbreviated month and numeric day (e.g., 'Jun 5'), rather than just splitting at the 'T' character to extract the date part."
        },
        "source": "backend",
        "event": "map_summary_code",
        "timestamp": "2025-08-23 16:09:16.000",
        "id": "5EK9Ly61JLQLvmZJa6Kp"
    },
    {
        "data": {
            "section_data": {
                "lines": [
                    19,
                    22
                ],
                "title": "Summary of formatDateString Function (Updated Formatting)",
                "summaryData": {
                    "medium_unstructured": "The formatDateString function now takes a date string as input, converts it to a Date object, and returns a formatted string displaying the abbreviated month and numeric day (e.g., 'Jun 5'), rather than just splitting at the 'T' character to extract the date part.",
                    "title": "Summary of formatDateString Function (Updated Formatting)",
                    "medium_structured": "• Accepts a date string as input\n• Converts the input to a Date object\n  ◦ Formats the date to show abbreviated month and numeric day (e.g., 'Jun 5')\n• Removes time information from the input",
                    "low_structured": "• Formats a date string to show abbreviated month and numeric day\n• Removes time information",
                    "low_unstructured": "This function formats a date string to display the abbreviated month and numeric day, instead of simply extracting the date portion.",
                    "high_unstructured": "The formatDateString function has been updated to process date strings by converting them into Date objects and formatting them using toLocaleString with options for abbreviated month and numeric day. Instead of splitting the string at the 'T' character and returning the 'YYYY-MM-DD' format, it now outputs a more user-friendly format like 'Jun 5', making it suitable for display in user interfaces or charts where a concise date representation is preferred.",
                    "high_structured": "• Processes date strings by converting them to Date objects\n• Formats the date using toLocaleString with options for abbreviated month and numeric day\n  ◦ Output is in a format like 'Jun 5' instead of 'YYYY-MM-DD'\n• No longer splits the string at the 'T' character\n• Discards any time information present in the original string\n• Useful for scenarios where a concise, user-friendly date label is needed, such as chart labels or summaries"
                },
                "oldSummaryData": {
                    "medium_unstructured": "The formatDateString function takes a date string as input and returns only the date part by splitting the string at the 'T' character. This effectively removes any time information from ISO-formatted date-time strings.",
                    "title": "Summary of formatDateString Function",
                    "medium_structured": "• Accepts a date string as input\n• Splits the string at the 'T' character\n  ◦ Returns the part before 'T', which is the date\n• Removes time information from the input",
                    "low_structured": "• Extracts date from a string\n• Removes time information",
                    "low_unstructured": "This function extracts the date portion from a date-time string.",
                    "high_unstructured": "The formatDateString function is designed to process ISO-formatted date-time strings by splitting the input string at the 'T' character, which typically separates the date and time components. It returns the first segment, corresponding to the date in 'YYYY-MM-DD' format, effectively discarding any time-related information. This utility is useful for displaying only the date portion in user interfaces or charts that do not require time details.",
                    "high_structured": "• Processes ISO-formatted date-time strings\n• Splits the input string at the 'T' character\n  ◦ The 'T' typically separates date and time in ISO strings\n• Returns the segment before 'T', which is the date\n  ◦ Output is in 'YYYY-MM-DD' format\n• Discards any time information present in the original string\n• Useful for scenarios where only the date is needed, such as chart labels or summaries"
                },
                "editPromptDetailLevel": null,
                "metadata": {
                    "fullPath": "/project/workspace/frontend/src/StockChart.jsx",
                    "id": "a3f2d23d-c808-4804-a5e3-960c37773172",
                    "filename": "StockChart.jsx",
                    "offset": 313,
                    "originalCode": "  const formatDateString = (date) => {\n    const d = new Date(date);\n    return d.toLocaleString('default', { month: 'short', day: 'numeric' });\n  };"
                },
                "editPromptStructured": null,
                "summaryMappings": {
                    "medium_unstructured": [
                        {
                            "summaryComponent": "The formatDateString function",
                            "codeSegments": [
                                {
                                    "line": 19,
                                    "code": "const formatDateString = (date) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "now takes a date string as input",
                            "codeSegments": [
                                {
                                    "line": 19,
                                    "code": "(date)"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "converts it to a Date object",
                            "codeSegments": [
                                {
                                    "line": 20,
                                    "code": "const d = new Date(date);"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "returns a formatted string displaying the abbreviated month and numeric day",
                            "codeSegments": [
                                {
                                    "line": 21,
                                    "code": "return d.toLocaleString('default', { month: 'short', day: 'numeric' });"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "e.g., 'Jun 5'",
                            "codeSegments": [
                                {
                                    "line": 21,
                                    "code": "month: 'short', day: 'numeric'"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "rather than just splitting at the 'T' character to extract the date part",
                            "codeSegments": [
                                {
                                    "line": 19,
                                    "code": "// No code present for splitting at 'T'; this is implied by the absence of such logic."
                                }
                            ]
                        }
                    ],
                    "medium_structured": [
                        {
                            "summaryComponent": "Accepts a date string as input",
                            "codeSegments": [
                                {
                                    "line": 19,
                                    "code": "const formatDateString = (date) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Converts the input to a Date object",
                            "codeSegments": [
                                {
                                    "line": 20,
                                    "code": "const d = new Date(date);"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Formats the date to show abbreviated month and numeric day (e.g., 'Jun 5')",
                            "codeSegments": [
                                {
                                    "line": 21,
                                    "code": "return d.toLocaleString('default', { month: 'short', day: 'numeric' });"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Removes time information from the input",
                            "codeSegments": [
                                {
                                    "line": 21,
                                    "code": "return d.toLocaleString('default', { month: 'short', day: 'numeric' });"
                                }
                            ]
                        }
                    ],
                    "low_structured": [
                        {
                            "summaryComponent": "Formats a date string to show abbreviated month and numeric day",
                            "codeSegments": [
                                {
                                    "line": 19,
                                    "code": "const formatDateString = (date) => {"
                                },
                                {
                                    "line": 21,
                                    "code": "return d.toLocaleString('default', { month: 'short', day: 'numeric' });"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Removes time information",
                            "codeSegments": [
                                {
                                    "line": 21,
                                    "code": "return d.toLocaleString('default', { month: 'short', day: 'numeric' });"
                                }
                            ]
                        }
                    ],
                    "low_unstructured": [
                        {
                            "summaryComponent": "formats a date string",
                            "codeSegments": [
                                {
                                    "line": 19,
                                    "code": "const formatDateString = (date) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "to display the abbreviated month and numeric day",
                            "codeSegments": [
                                {
                                    "line": 21,
                                    "code": "return d.toLocaleString('default', { month: 'short', day: 'numeric' });"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "instead of simply extracting the date portion",
                            "codeSegments": [
                                {
                                    "line": 21,
                                    "code": "return d.toLocaleString('default', { month: 'short', day: 'numeric' });"
                                }
                            ]
                        }
                    ],
                    "high_unstructured": [
                        {
                            "summaryComponent": "The formatDateString function has been updated",
                            "codeSegments": [
                                {
                                    "line": 19,
                                    "code": "const formatDateString = (date) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "to process date strings",
                            "codeSegments": [
                                {
                                    "line": 19,
                                    "code": "(date)"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "by converting them into Date objects",
                            "codeSegments": [
                                {
                                    "line": 20,
                                    "code": "const d = new Date(date);"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "and formatting them using toLocaleString",
                            "codeSegments": [
                                {
                                    "line": 21,
                                    "code": "return d.toLocaleString('default', { month: 'short', day: 'numeric' });"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "with options for abbreviated month and numeric day",
                            "codeSegments": [
                                {
                                    "line": 21,
                                    "code": "{ month: 'short', day: 'numeric' }"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "it now outputs a more user-friendly format like 'Jun 5'",
                            "codeSegments": [
                                {
                                    "line": 21,
                                    "code": "return d.toLocaleString('default', { month: 'short', day: 'numeric' });"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "making it suitable for display in user interfaces or charts",
                            "codeSegments": [
                                {
                                    "line": 21,
                                    "code": "return d.toLocaleString('default', { month: 'short', day: 'numeric' });"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "where a concise date representation is preferred",
                            "codeSegments": [
                                {
                                    "line": 21,
                                    "code": "return d.toLocaleString('default', { month: 'short', day: 'numeric' });"
                                }
                            ]
                        }
                    ],
                    "high_structured": [
                        {
                            "summaryComponent": "Processes date strings by converting them to Date objects",
                            "codeSegments": [
                                {
                                    "line": 20,
                                    "code": "const d = new Date(date);"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Formats the date using toLocaleString with options for abbreviated month and numeric day",
                            "codeSegments": [
                                {
                                    "line": 21,
                                    "code": "return d.toLocaleString('default', { month: 'short', day: 'numeric' });"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Output is in a format like 'Jun 5' instead of 'YYYY-MM-DD'",
                            "codeSegments": [
                                {
                                    "line": 21,
                                    "code": "return d.toLocaleString('default', { month: 'short', day: 'numeric' });"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "No longer splits the string at the 'T' character",
                            "codeSegments": [
                                {
                                    "line": 20,
                                    "code": "const d = new Date(date);"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Discards any time information present in the original string",
                            "codeSegments": [
                                {
                                    "line": 21,
                                    "code": "return d.toLocaleString('default', { month: 'short', day: 'numeric' });"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Useful for scenarios where a concise, user-friendly date label is needed, such as chart labels or summaries",
                            "codeSegments": [
                                {
                                    "line": 19,
                                    "code": "const formatDateString = (date) => {"
                                }
                            ]
                        }
                    ]
                },
                "selectedStructured": "unstructured",
                "createdAt": 1755994156000,
                "editPromptValue": "",
                "selectedDetailLevel": "medium"
            },
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172"
        },
        "source": "frontend",
        "event": "create_new_section",
        "timestamp": "2025-08-23 16:09:16.000",
        "id": "EEQxTomgw7fqAGsjJsmH"
    },
    {
        "data": {
            "mapping": [
                {
                    "summaryComponent": "The formatDateString function has been updated",
                    "codeSegments": [
                        {
                            "line": 19,
                            "code": "const formatDateString = (date) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "to process date strings",
                    "codeSegments": [
                        {
                            "line": 19,
                            "code": "(date)"
                        }
                    ]
                },
                {
                    "summaryComponent": "by converting them into Date objects",
                    "codeSegments": [
                        {
                            "line": 20,
                            "code": "const d = new Date(date);"
                        }
                    ]
                },
                {
                    "summaryComponent": "and formatting them using toLocaleString",
                    "codeSegments": [
                        {
                            "line": 21,
                            "code": "return d.toLocaleString('default', { month: 'short', day: 'numeric' });"
                        }
                    ]
                },
                {
                    "summaryComponent": "with options for abbreviated month and numeric day",
                    "codeSegments": [
                        {
                            "line": 21,
                            "code": "{ month: 'short', day: 'numeric' }"
                        }
                    ]
                },
                {
                    "summaryComponent": "it now outputs a more user-friendly format like 'Jun 5'",
                    "codeSegments": [
                        {
                            "line": 21,
                            "code": "return d.toLocaleString('default', { month: 'short', day: 'numeric' });"
                        }
                    ]
                },
                {
                    "summaryComponent": "making it suitable for display in user interfaces or charts",
                    "codeSegments": [
                        {
                            "line": 21,
                            "code": "return d.toLocaleString('default', { month: 'short', day: 'numeric' });"
                        }
                    ]
                },
                {
                    "summaryComponent": "where a concise date representation is preferred",
                    "codeSegments": [
                        {
                            "line": 21,
                            "code": "return d.toLocaleString('default', { month: 'short', day: 'numeric' });"
                        }
                    ]
                }
            ],
            "code": "19:   const formatDateString = (date) => {\n20:     const d = new Date(date);\n21:     return d.toLocaleString('default', { month: 'short', day: 'numeric' });\n22:   };",
            "summary": "The formatDateString function has been updated to process date strings by converting them into Date objects and formatting them using toLocaleString with options for abbreviated month and numeric day. Instead of splitting the string at the 'T' character and returning the 'YYYY-MM-DD' format, it now outputs a more user-friendly format like 'Jun 5', making it suitable for display in user interfaces or charts where a concise date representation is preferred."
        },
        "source": "backend",
        "event": "map_summary_code",
        "timestamp": "2025-08-23 16:09:16.000",
        "id": "ff2sMHZOVMamS0N79xQu"
    },
    {
        "data": {
            "after_section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "before_section_id": "90cae355-de34-45ca-bfe3-da69ef86800b"
        },
        "source": "frontend",
        "event": "autotransit_section",
        "timestamp": "2025-08-23 16:09:16.000",
        "id": "olmU7Jesu8c0QvH2e3Ny"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:09:36.000",
        "id": "429m3vhj7KYXpTrdmoFM"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 3,
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:09:36.000",
        "id": "IQhSrzFuFqW8iK5M0Aox"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 4,
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:09:36.000",
        "id": "JbfJ78CCnusP4KwIq40G"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:09:36.000",
        "id": "LtpfMfrqPow6rum4fbQl"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:09:36.000",
        "id": "WtkENMd1qYgYxVS6zahK"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 5,
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:09:36.000",
        "id": "cDGK45xAwiQahef9Caz0"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:09:36.000",
        "id": "ciFGNGp8QdpKBoLIcfwq"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:09:36.000",
        "id": "jPCUwQ4qcek5HyPaYe0X"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 0,
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:09:36.000",
        "id": "kpg3Ev8CRlADUgNbjLBH"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 2,
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:09:36.000",
        "id": "mCkbBZ138auhoQvc9iP7"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:09:37.000",
        "id": "3iMqlq913lxA8CxSX6Si"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 3,
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:09:37.000",
        "id": "598qOeS6JrihCj3OvdwK"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 0,
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:09:37.000",
        "id": "8fdZfn52rZ5HvDAQKsAb"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:09:37.000",
        "id": "J0sPnaZJodErvvpBc5uV"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:09:37.000",
        "id": "biGbOEFp0sbi2Gq4nZ1F"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 2,
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:09:37.000",
        "id": "fPRTpBXwCwljW94XBw5S"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 3,
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:09:37.000",
        "id": "g71GT6XQN8Ub0QaaB2E0"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:09:37.000",
        "id": "ur97A4uixrJkJEs4zvmF"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 5,
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:09:37.000",
        "id": "yO6xZFFAFnOfex2SiXdA"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 0,
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:09:38.000",
        "id": "4jnutZ8Kvl3UlabjL2Wu"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:09:38.000",
        "id": "Brbbrqsh4Y1aEduTK2jb"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 2,
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:09:38.000",
        "id": "gvWwvlVipepDqtuOx8Bv"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:09:38.000",
        "id": "jNO75AJMFv69HnjlzTq2"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:09:40.000",
        "id": "OdMKkjm37AyLeGAicuQV"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 1,
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:09:40.000",
        "id": "Xe8AcBjchsyLLiBPJ8vs"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:09:41.000",
        "id": "8h93kNlhkQ1rtYhwe0hY"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 2,
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:09:41.000",
        "id": "9wgpMrBXwNSfPuSIhuQN"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:09:41.000",
        "id": "MIJn75rdLZYQwHYP45Xo"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:09:41.000",
        "id": "WsVFwNkm2y3zUA5iVisc"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 0,
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:09:41.000",
        "id": "ZHVYV7XHPL25QIbr1Wj8"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 1,
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:09:41.000",
        "id": "hcNdig0FHjwnUv4qtfyC"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:09:41.000",
        "id": "nQNKuoAW5Z0snD9TFgOa"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 0,
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:09:41.000",
        "id": "o0vd2KwpYx7aC0Mi6YyB"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 3,
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:09:42.000",
        "id": "4XYrQLSmEU8v0vWAQt8H"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 2,
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:09:42.000",
        "id": "HUup2Rrgu5UvM1X4NU2I"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:09:42.000",
        "id": "Ldd3C5BdgrMPsVhsJVvJ"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:09:42.000",
        "id": "SlnPqXOI6dM0VkNSDlIE"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:09:43.000",
        "id": "AVdA1cvNC8ygCX9FvDMd"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 5,
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:09:43.000",
        "id": "XRxQriIgXyzU3u7djzR2"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:09:43.000",
        "id": "lbSqUOwWFfMmMDLy3ecr"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 3,
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:09:46.000",
        "id": "D0g1Qhoju4pQ3HBfShd2"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:09:46.000",
        "id": "LbcejxcWRfjdKb5v7nzr"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:09:46.000",
        "id": "OdDjLsWu11JXqKCnsL56"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 1,
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:09:46.000",
        "id": "cruWz2cuGFGWN1HmfUGF"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 2,
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:09:46.000",
        "id": "dxGZXaEE5f450aoCANr7"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:09:46.000",
        "id": "kZQF0chXENR3PqDQ8PpW"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 0,
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:09:46.000",
        "id": "zfqx0cpRTX5FWlWcINh9"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:09:47.000",
        "id": "Cnao2kgVrdUNAAqQyFdN"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 3,
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:09:47.000",
        "id": "Ix9uoMPlARjzHnyGzVIs"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 0,
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:09:51.000",
        "id": "7MR6NN3vAdEmnwWwsVJU"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:09:51.000",
        "id": "O9viizqetVQ00fjmVK3m"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:09:51.000",
        "id": "fNr22kgdoZ7CZkkgZIc0"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 2,
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:09:51.000",
        "id": "iprUPQGRPdihjstjiQXt"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:09:52.000",
        "id": "DHmavVNUJxPVcyy9JG2f"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:09:52.000",
        "id": "LrYlVQbQovJBNr83oTKZ"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 1,
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:09:52.000",
        "id": "WuHvhir5H5ARsWPxQcAB"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 5,
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:09:54.000",
        "id": "NatNrVILKhn7MrJGFitV"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:09:54.000",
        "id": "SbWJgK7MVIUtPMd9L2MZ"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 3,
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:09:54.000",
        "id": "swo8AteTH21S1vS2NoLT"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 5,
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:09:56.000",
        "id": "5udlzWiolm6x2o1PHLq3"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:09:56.000",
        "id": "7m2Ev1HwsiRau24kTJpr"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 5,
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:09:56.000",
        "id": "EU4pvIvcssI0GbHwN68S"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:09:56.000",
        "id": "m3ZpfbM1bvTANajn5vDt"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:09:56.000",
        "id": "nuS0FU2hKVdOkucwrNAp"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 3,
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:09:56.000",
        "id": "zAAOyXon1SNeE1WgTypv"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:09:57.000",
        "id": "KSwBtg1T3UMtrK69xqGr"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:09:57.000",
        "id": "NaDLJSQpOWGGsnakDTyB"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 5,
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:09:57.000",
        "id": "Q0zBPHPWWj4CziT0nCWG"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 3,
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:09:57.000",
        "id": "bopovXVTYlqidkeK8UcD"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 5,
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:09:58.000",
        "id": "3yfqggfMxJbsUklsifYH"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:09:58.000",
        "id": "cQIkfAViMamsmpnaqwqT"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:10:08.000",
        "id": "5MhmqyrPdGXJDfFmMyqY"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 3,
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:10:08.000",
        "id": "eFl2bw4kSiOG87LgLzOz"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:10:09.000",
        "id": "7wxBYVA2fLCH3phJdIhe"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 3,
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:10:09.000",
        "id": "FLitnaWaVx5dGl6HqR22"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 4,
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:10:09.000",
        "id": "cw1qqwTG2LFVwvXzzYGX"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:10:09.000",
        "id": "g7PdlRYgkSRxjvAy3lFX"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:10:09.000",
        "id": "j5qL8Z02OhaINIeIAdG7"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 4,
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:10:09.000",
        "id": "m2YYjqHQuYPm6t7zssZK"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:10:10.000",
        "id": "BuksxSKi0NFnBw0SbHMS"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:10:10.000",
        "id": "QCBUe0InYlWryJHwqkLM"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 5,
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:10:10.000",
        "id": "zDxmPxISdiHcXnx574Wq"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:10:22.000",
        "id": "LJaxT38LCuP9dBPvQz3v"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 5,
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:10:22.000",
        "id": "ghkmds8z7uj4aLmUGSw4"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 4,
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:10:22.000",
        "id": "xxmmTC0YsXcjYmIj5K4P"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:10:23.000",
        "id": "3uXg5mqtAD41E3qvjEBh"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:10:23.000",
        "id": "HaV3LEuxntT8sKberHxO"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 5,
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:10:23.000",
        "id": "Hmmx5J66ZJo0VviQIX3J"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 5,
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:10:23.000",
        "id": "mRNaArNKdHt7jcQGcbEr"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 3,
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:10:26.000",
        "id": "bd0Z3J8F4pMJdM0uok3R"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:10:26.000",
        "id": "zoqyWSGKGHaTBNfVG7IQ"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:10:28.000",
        "id": "0Z9243wqHAxxkcAiBcXN"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 5,
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:10:28.000",
        "id": "90S0Z8Hw2TS6pzpHYzAV"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "a3f2d23d-c808-4804-a5e3-960c37773172",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:10:29.000",
        "id": "6C0iz0NnOQzpRCwbySND"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:10:37.000",
        "id": "9GOJJ4hjy7t7T4f1L3CA"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:10:37.000",
        "id": "FJZoIJaCbiiQRraQiDum"
    },
    {
        "data": {
            "after_section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "before_section_id": "a3f2d23d-c808-4804-a5e3-960c37773172"
        },
        "source": "frontend",
        "event": "toggle_section",
        "timestamp": "2025-08-23 16:10:37.000",
        "id": "HgSu9MNTrPD07bNYzHZ6"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:10:37.000",
        "id": "MENHbyVavtTXY1mioBw0"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:10:37.000",
        "id": "NcRaMG4ECaf5YPFdUr74"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:10:37.000",
        "id": "SwvCIglq6pOIXwooaMWu"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 5,
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:10:37.000",
        "id": "aTMcasmWUhTv2BL1wdzd"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 6,
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:10:37.000",
        "id": "cEL2jlXtU2sVvYxPiXGj"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 3,
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:10:37.000",
        "id": "dVo824vy7ERzKvmQHYsE"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 9,
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:10:37.000",
        "id": "z4I7MHu0eixxai3A4CQ3"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 2,
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:10:37.000",
        "id": "zRWRWrfSBVjdh8DrLAmk"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:10:38.000",
        "id": "Aw0LLn3025v5JJ0AAfUf"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:10:38.000",
        "id": "Z47thT7vUIc0qMaHlPJi"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 5,
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:10:38.000",
        "id": "dyx2evvuF1I0UWROsLHg"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 2,
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:10:38.000",
        "id": "lqzmqlH1oaU6mcvlvNT0"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 1,
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:10:38.000",
        "id": "tcBaVFfW0c0pD10ZXpkg"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 8,
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:10:43.000",
        "id": "0BGjJ8BmnJA8FIUMMZhw"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:10:43.000",
        "id": "0at7CyRE4MLLVnCypKsG"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:10:43.000",
        "id": "18b2G10uXa4VYTGphq6Q"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 5,
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:10:43.000",
        "id": "7X2m0Q2o8CK7YqahNjQt"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 5,
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:10:43.000",
        "id": "Ita2Icktpxfd45cblYtc"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:10:43.000",
        "id": "JjZtElyZAkTdk94XSHOE"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:10:43.000",
        "id": "nP1u7c6WbSZRbQHcort6"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 8,
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:10:43.000",
        "id": "yFFoOyA435tC2Blpfd51"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 2,
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:10:44.000",
        "id": "4mD24YH0IQxAlL2gyRyT"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 1,
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:10:44.000",
        "id": "FF6oZV1Mp5f9A2774jvm"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:10:44.000",
        "id": "LAeeHr3m3fl4v3NzVc8E"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:10:44.000",
        "id": "NwEjBkTIxEuX4rK8oKYS"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:10:44.000",
        "id": "UXuTTKOK8sVxu5VCElsN"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 1,
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:10:47.000",
        "id": "Cerf4bV2vZBnDyACGrWq"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:10:47.000",
        "id": "DVDYzgs6vFt6HAYwKuKJ"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 2,
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:10:47.000",
        "id": "ImnKzOAOjYzGHrw45Qwr"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 5,
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:10:47.000",
        "id": "QcbqG66Xb7NqKlM5mAs1"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 0,
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:10:47.000",
        "id": "iU2W8Bl2RNy63dskIt66"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:10:47.000",
        "id": "wo4yJlsIFwZWm4F6wmwH"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:10:47.000",
        "id": "zkJaEMKb5tDBwA13oa9e"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 5,
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:10:49.000",
        "id": "9go1pcxsbt7iNa8OUjBl"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:10:49.000",
        "id": "f9ARIrxAzRgbTiprjFTZ"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 8,
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:10:51.000",
        "id": "DHuERR2iGBF6ChlPm7Gw"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:10:51.000",
        "id": "J5BxItFaTZC7KmcldmDs"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 8,
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:10:51.000",
        "id": "JNkOasve35RlZtJyy41K"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:10:51.000",
        "id": "ob8CH61TSvJFd8DlXUj5"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:10:53.000",
        "id": "EQjlquDm1qpN4EbfYvF4"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 5,
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:10:53.000",
        "id": "kxLRA0ZAFdnkRSPMzQFS"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 2,
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:10:55.000",
        "id": "CInBUShc7kpuy674iCZw"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 4,
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:10:55.000",
        "id": "Py4fca6gXmxdQpRNxEkd"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 1,
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:10:55.000",
        "id": "b5ilwMY3FwZjz6dpbjjC"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:10:55.000",
        "id": "seFfVbd4bdIAgzNdXfTX"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:10:55.000",
        "id": "tMRnfeRknhrjBB8uwWL4"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:10:55.000",
        "id": "wzAt2ctNN7W79EYvImpz"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:10:57.000",
        "id": "O3sEbgZOzFP4tstDMGOl"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 2,
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:10:57.000",
        "id": "VvNH6Zgd50KwnNgqMlMR"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:10:58.000",
        "id": "3X87WUZzufp58fEVtAwn"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:10:58.000",
        "id": "62OQV0iUdKSkCcSMtI7Y"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 4,
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:10:58.000",
        "id": "GidVK4ETnZJvUG2GuYHQ"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 4,
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:10:58.000",
        "id": "TWK1F4DXZj0stVHoribz"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:10:58.000",
        "id": "b0cmtJVxI4q2vmVlHELK"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 5,
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:10:58.000",
        "id": "ofKkg6ealPzHoclGj2UB"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:11:00.000",
        "id": "Den9bHPsWOZbgaWuNTto"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 5,
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:11:00.000",
        "id": "LN3Ohu2A3FGCYEHOl7Z9"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 9,
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:11:05.000",
        "id": "QVv8RpzZPxaM1JKZnukf"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:11:05.000",
        "id": "cT6vmjM3TAuavCffNRaS"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 7,
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:11:05.000",
        "id": "sJnDD9iBPJaj5FwyptJ7"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:11:05.000",
        "id": "wxF5bc9CyrslBq08XDWw"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 6,
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:11:06.000",
        "id": "8Ts7EU1f2IrSybTkq5r5"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:11:06.000",
        "id": "fpWphApFEDEZpANKTyY8"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 5,
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:11:08.000",
        "id": "DVqjU4NQ9fH9AxxBxGkO"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:11:08.000",
        "id": "TzgUZD6tMq67vcKUXs2s"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:11:08.000",
        "id": "tOCLKYVWlNcUumaYfmMI"
    },
    {
        "data": {},
        "source": "frontend",
        "event": "click_summarize_code",
        "timestamp": "2025-08-23 16:11:11.000",
        "id": "tZO0oBHglrHfuyTwg9AM"
    },
    {
        "data": {
            "selected_code": "import React from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  ReferenceLine,\n} from \"recharts\";\n\nconst StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    const d = new Date(date);\n    return d.toLocaleString(\"default\", { month: \"short\", day: \"numeric\" });\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;\n",
            "summary": {
                "medium_unstructured": "The code implements a React component that renders a line chart of stock prices using the Recharts library. It takes stock data as a prop, formats it, and displays the company name and ticker above the chart. The chart includes axes, a legend, and a tooltip for interactivity.",
                "title": "StockChart Component for Displaying Stock Price Data",
                "medium_structured": "• Defines a StockChart React component that visualizes stock data\n• Accepts a data prop containing company info and price history\n• Renders a line chart with company name and ticker\n  ◦ Uses Recharts components for axes, legend, and tooltip\n• Formats and maps input data for chart compatibility",
                "low_structured": "• React component renders a stock chart\n• Uses Recharts to display line chart\n• Shows company name and ticker",
                "low_unstructured": "This code defines a React component that displays a stock price line chart using Recharts.",
                "high_unstructured": "This code defines a StockChart React component that visualizes historical stock price data as a line chart using the Recharts library. The component expects a data prop containing the company's name, ticker, and an array of date/close price objects. It processes the data to create chart-friendly objects, formats date labels, and renders the chart with axes, legend, and tooltip, omitting dots for a cleaner line. The chart is responsive and displays the company name and ticker above the visualization, returning null if no valid data is provided.",
                "high_structured": "• Implements a StockChart React component for displaying stock price history\n• Expects a data prop with:\n  ◦ name (company name)\n  ◦ ticker (stock symbol)\n  ◦ data (array of objects with date and close price)\n• Validates input and returns null if data is missing or empty\n• Processes input data:\n  ◦ Maps each item to an object with date and price fields for charting\n  ◦ Includes a helper function to format date strings (not directly used in rendering)\n• Renders a responsive line chart using Recharts:\n  ◦ Displays company name and ticker above the chart\n  ◦ Includes X and Y axes, legend, and tooltip\n  ◦ Plots a monotone line for price, with no dots for data points\n• Sets chart margins and ensures the chart fits its container"
            }
        },
        "source": "backend",
        "event": "summarize_selected_code",
        "timestamp": "2025-08-23 16:11:18.000",
        "id": "XO4gjbbUQUDR8gWr7Zps"
    },
    {
        "data": {
            "mapping": [
                {
                    "summaryComponent": "React component renders a stock chart",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        },
                        {
                            "line": 30,
                            "code": "return ("
                        }
                    ]
                },
                {
                    "summaryComponent": "Uses Recharts to display line chart",
                    "codeSegments": [
                        {
                            "line": 2,
                            "code": "import {"
                        },
                        {
                            "line": 3,
                            "code": "LineChart,"
                        },
                        {
                            "line": 36,
                            "code": "<LineChart"
                        }
                    ]
                },
                {
                    "summaryComponent": "Shows company name and ticker",
                    "codeSegments": [
                        {
                            "line": 32,
                            "code": "<h3>"
                        },
                        {
                            "line": 33,
                            "code": "{company} ({ticker})"
                        }
                    ]
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     const d = new Date(date);\n21:     return d.toLocaleString(\"default\", { month: \"short\", day: \"numeric\" });\n22:   };\n23: \n24:   // Combine labels and values into an array of objects for Recharts\n25:   const chartData = data.data.map((item) => ({\n26:     date: item.date,\n27:     price: item.close,\n28:   }));\n29: \n30:   return (\n31:     <div style={{ marginTop: \"2rem\" }}>\n32:       <h3>\n33:         {company} ({ticker})\n34:       </h3>\n35:       <ResponsiveContainer width=\"100%\" height={300}>\n36:         <LineChart\n37:           data={chartData}\n38:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n39:         >\n40:           <XAxis dataKey=\"date\" />\n41:           <YAxis domain={[\"auto\", \"auto\"]} />\n42:           <Tooltip />\n43:           <Legend />\n44:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n45:         </LineChart>\n46:       </ResponsiveContainer>\n47:     </div>\n48:   );\n49: };\n50: \n51: export default StockChart;\n52: ",
            "summary": "• React component renders a stock chart\n• Uses Recharts to display line chart\n• Shows company name and ticker"
        },
        "source": "backend",
        "event": "map_summary_code",
        "timestamp": "2025-08-23 16:11:20.000",
        "id": "43Eq0iFBKZTuHVMdGIon"
    },
    {
        "data": {
            "mapping": [
                {
                    "summaryComponent": "This code defines a React component",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        },
                        {
                            "line": 51,
                            "code": "export default StockChart;"
                        }
                    ]
                },
                {
                    "summaryComponent": "that displays a stock price line chart",
                    "codeSegments": [
                        {
                            "line": 36,
                            "code": "<LineChart"
                        },
                        {
                            "line": 44,
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                        }
                    ]
                },
                {
                    "summaryComponent": "using Recharts",
                    "codeSegments": [
                        {
                            "line": 2,
                            "code": "import {"
                        },
                        {
                            "line": 11,
                            "code": "} from \"recharts\";"
                        }
                    ]
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     const d = new Date(date);\n21:     return d.toLocaleString(\"default\", { month: \"short\", day: \"numeric\" });\n22:   };\n23: \n24:   // Combine labels and values into an array of objects for Recharts\n25:   const chartData = data.data.map((item) => ({\n26:     date: item.date,\n27:     price: item.close,\n28:   }));\n29: \n30:   return (\n31:     <div style={{ marginTop: \"2rem\" }}>\n32:       <h3>\n33:         {company} ({ticker})\n34:       </h3>\n35:       <ResponsiveContainer width=\"100%\" height={300}>\n36:         <LineChart\n37:           data={chartData}\n38:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n39:         >\n40:           <XAxis dataKey=\"date\" />\n41:           <YAxis domain={[\"auto\", \"auto\"]} />\n42:           <Tooltip />\n43:           <Legend />\n44:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n45:         </LineChart>\n46:       </ResponsiveContainer>\n47:     </div>\n48:   );\n49: };\n50: \n51: export default StockChart;\n52: ",
            "summary": "This code defines a React component that displays a stock price line chart using Recharts."
        },
        "source": "backend",
        "event": "map_summary_code",
        "timestamp": "2025-08-23 16:11:20.000",
        "id": "LgIRBofFXfJEjQV8e1Tc"
    },
    {
        "data": {
            "mapping": [
                {
                    "summaryComponent": "Defines a StockChart React component that visualizes stock data",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "Accepts a data prop containing company info and price history",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        },
                        {
                            "line": 16,
                            "code": "const company = data.name;"
                        },
                        {
                            "line": 17,
                            "code": "const ticker = data.ticker;"
                        },
                        {
                            "line": 25,
                            "code": "const chartData = data.data.map((item) => ({"
                        }
                    ]
                },
                {
                    "summaryComponent": "Renders a line chart with company name and ticker",
                    "codeSegments": [
                        {
                            "line": 32,
                            "code": "<h3>"
                        },
                        {
                            "line": 33,
                            "code": "{company} ({ticker})"
                        },
                        {
                            "line": 36,
                            "code": "<LineChart"
                        }
                    ]
                },
                {
                    "summaryComponent": "Uses Recharts components for axes, legend, and tooltip",
                    "codeSegments": [
                        {
                            "line": 40,
                            "code": "<XAxis dataKey=\"date\" />"
                        },
                        {
                            "line": 41,
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                        },
                        {
                            "line": 42,
                            "code": "<Tooltip />"
                        },
                        {
                            "line": 43,
                            "code": "<Legend />"
                        }
                    ]
                },
                {
                    "summaryComponent": "Formats and maps input data for chart compatibility",
                    "codeSegments": [
                        {
                            "line": 25,
                            "code": "const chartData = data.data.map((item) => ({"
                        },
                        {
                            "line": 26,
                            "code": "date: item.date,"
                        },
                        {
                            "line": 27,
                            "code": "price: item.close,"
                        }
                    ]
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     const d = new Date(date);\n21:     return d.toLocaleString(\"default\", { month: \"short\", day: \"numeric\" });\n22:   };\n23: \n24:   // Combine labels and values into an array of objects for Recharts\n25:   const chartData = data.data.map((item) => ({\n26:     date: item.date,\n27:     price: item.close,\n28:   }));\n29: \n30:   return (\n31:     <div style={{ marginTop: \"2rem\" }}>\n32:       <h3>\n33:         {company} ({ticker})\n34:       </h3>\n35:       <ResponsiveContainer width=\"100%\" height={300}>\n36:         <LineChart\n37:           data={chartData}\n38:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n39:         >\n40:           <XAxis dataKey=\"date\" />\n41:           <YAxis domain={[\"auto\", \"auto\"]} />\n42:           <Tooltip />\n43:           <Legend />\n44:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n45:         </LineChart>\n46:       </ResponsiveContainer>\n47:     </div>\n48:   );\n49: };\n50: \n51: export default StockChart;\n52: ",
            "summary": "• Defines a StockChart React component that visualizes stock data\n• Accepts a data prop containing company info and price history\n• Renders a line chart with company name and ticker\n  ◦ Uses Recharts components for axes, legend, and tooltip\n• Formats and maps input data for chart compatibility"
        },
        "source": "backend",
        "event": "map_summary_code",
        "timestamp": "2025-08-23 16:11:21.000",
        "id": "K2T8Nx1dj5AdZE9ZDzQg"
    },
    {
        "data": {
            "mapping": [
                {
                    "summaryComponent": "Implements a StockChart React component for displaying stock price history",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "Expects a data prop with:",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "name (company name)",
                    "codeSegments": [
                        {
                            "line": 16,
                            "code": "const company = data.name;"
                        }
                    ]
                },
                {
                    "summaryComponent": "ticker (stock symbol)",
                    "codeSegments": [
                        {
                            "line": 17,
                            "code": "const ticker = data.ticker;"
                        }
                    ]
                },
                {
                    "summaryComponent": "data (array of objects with date and close price)",
                    "codeSegments": [
                        {
                            "line": 25,
                            "code": "const chartData = data.data.map((item) => ({"
                        },
                        {
                            "line": 26,
                            "code": "date: item.date,"
                        },
                        {
                            "line": 27,
                            "code": "price: item.close,"
                        }
                    ]
                },
                {
                    "summaryComponent": "Validates input and returns null if data is missing or empty",
                    "codeSegments": [
                        {
                            "line": 14,
                            "code": "if (!data || !data.data || !data.data.length) return null;"
                        }
                    ]
                },
                {
                    "summaryComponent": "Processes input data:",
                    "codeSegments": [
                        {
                            "line": 25,
                            "code": "const chartData = data.data.map((item) => ({"
                        }
                    ]
                },
                {
                    "summaryComponent": "Maps each item to an object with date and price fields for charting",
                    "codeSegments": [
                        {
                            "line": 25,
                            "code": "const chartData = data.data.map((item) => ({"
                        },
                        {
                            "line": 26,
                            "code": "date: item.date,"
                        },
                        {
                            "line": 27,
                            "code": "price: item.close,"
                        }
                    ]
                },
                {
                    "summaryComponent": "Includes a helper function to format date strings (not directly used in rendering)",
                    "codeSegments": [
                        {
                            "line": 19,
                            "code": "const formatDateString = (date) => {"
                        },
                        {
                            "line": 20,
                            "code": "const d = new Date(date);"
                        },
                        {
                            "line": 21,
                            "code": "return d.toLocaleString(\"default\", { month: \"short\", day: \"numeric\" });"
                        }
                    ]
                },
                {
                    "summaryComponent": "Renders a responsive line chart using Recharts:",
                    "codeSegments": [
                        {
                            "line": 35,
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                        },
                        {
                            "line": 36,
                            "code": "<LineChart"
                        }
                    ]
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     const d = new Date(date);\n21:     return d.toLocaleString(\"default\", { month: \"short\", day: \"numeric\" });\n22:   };\n23: \n24:   // Combine labels and values into an array of objects for Recharts\n25:   const chartData = data.data.map((item) => ({\n26:     date: item.date,\n27:     price: item.close,\n28:   }));\n29: \n30:   return (\n31:     <div style={{ marginTop: \"2rem\" }}>\n32:       <h3>\n33:         {company} ({ticker})\n34:       </h3>\n35:       <ResponsiveContainer width=\"100%\" height={300}>\n36:         <LineChart\n37:           data={chartData}\n38:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n39:         >\n40:           <XAxis dataKey=\"date\" />\n41:           <YAxis domain={[\"auto\", \"auto\"]} />\n42:           <Tooltip />\n43:           <Legend />\n44:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n45:         </LineChart>\n46:       </ResponsiveContainer>\n47:     </div>\n48:   );\n49: };\n50: \n51: export default StockChart;\n52: ",
            "summary": "• Implements a StockChart React component for displaying stock price history\n• Expects a data prop with:\n  ◦ name (company name)\n  ◦ ticker (stock symbol)\n  ◦ data (array of objects with date and close price)\n• Validates input and returns null if data is missing or empty\n• Processes input data:\n  ◦ Maps each item to an object with date and price fields for charting\n  ◦ Includes a helper function to format date strings (not directly used in rendering)\n• Renders a responsive line chart using Recharts:\n  ◦ Displays company name and ticker above the chart\n  ◦ Includes X and Y axes, legend, and tooltip\n  ◦ Plots a monotone line for price, with no dots for data points\n• Sets chart margins and ensures the chart fits its container"
        },
        "source": "backend",
        "event": "map_summary_code",
        "timestamp": "2025-08-23 16:11:22.000",
        "id": "45J5wqxcVdkm4ABU0eJa"
    },
    {
        "data": {
            "mapping": [
                {
                    "summaryComponent": "implements a React component",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "renders a line chart of stock prices",
                    "codeSegments": [
                        {
                            "line": 36,
                            "code": "<LineChart"
                        },
                        {
                            "line": 44,
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                        }
                    ]
                },
                {
                    "summaryComponent": "using the Recharts library",
                    "codeSegments": [
                        {
                            "line": 2,
                            "code": "import {"
                        },
                        {
                            "line": 11,
                            "code": "} from \"recharts\";"
                        }
                    ]
                },
                {
                    "summaryComponent": "takes stock data as a prop",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "formats it",
                    "codeSegments": [
                        {
                            "line": 25,
                            "code": "const chartData = data.data.map((item) => ({"
                        },
                        {
                            "line": 26,
                            "code": "date: item.date,"
                        },
                        {
                            "line": 27,
                            "code": "price: item.close,"
                        }
                    ]
                },
                {
                    "summaryComponent": "displays the company name and ticker above the chart",
                    "codeSegments": [
                        {
                            "line": 32,
                            "code": "<h3>"
                        },
                        {
                            "line": 33,
                            "code": "{company} ({ticker})"
                        }
                    ]
                },
                {
                    "summaryComponent": "The chart includes axes",
                    "codeSegments": [
                        {
                            "line": 40,
                            "code": "<XAxis dataKey=\"date\" />"
                        },
                        {
                            "line": 41,
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                        }
                    ]
                },
                {
                    "summaryComponent": "a legend",
                    "codeSegments": [
                        {
                            "line": 43,
                            "code": "<Legend />"
                        }
                    ]
                },
                {
                    "summaryComponent": "and a tooltip for interactivity",
                    "codeSegments": [
                        {
                            "line": 42,
                            "code": "<Tooltip />"
                        }
                    ]
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     const d = new Date(date);\n21:     return d.toLocaleString(\"default\", { month: \"short\", day: \"numeric\" });\n22:   };\n23: \n24:   // Combine labels and values into an array of objects for Recharts\n25:   const chartData = data.data.map((item) => ({\n26:     date: item.date,\n27:     price: item.close,\n28:   }));\n29: \n30:   return (\n31:     <div style={{ marginTop: \"2rem\" }}>\n32:       <h3>\n33:         {company} ({ticker})\n34:       </h3>\n35:       <ResponsiveContainer width=\"100%\" height={300}>\n36:         <LineChart\n37:           data={chartData}\n38:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n39:         >\n40:           <XAxis dataKey=\"date\" />\n41:           <YAxis domain={[\"auto\", \"auto\"]} />\n42:           <Tooltip />\n43:           <Legend />\n44:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n45:         </LineChart>\n46:       </ResponsiveContainer>\n47:     </div>\n48:   );\n49: };\n50: \n51: export default StockChart;\n52: ",
            "summary": "The code implements a React component that renders a line chart of stock prices using the Recharts library. It takes stock data as a prop, formats it, and displays the company name and ticker above the chart. The chart includes axes, a legend, and a tooltip for interactivity."
        },
        "source": "backend",
        "event": "map_summary_code",
        "timestamp": "2025-08-23 16:11:23.000",
        "id": "UlHLc0HfVQMxOeNMqahh"
    },
    {
        "data": {
            "section_data": {
                "lines": [
                    1,
                    52
                ],
                "title": "StockChart Component for Displaying Stock Price Data",
                "summaryData": {
                    "medium_unstructured": "The code implements a React component that renders a line chart of stock prices using the Recharts library. It takes stock data as a prop, formats it, and displays the company name and ticker above the chart. The chart includes axes, a legend, and a tooltip for interactivity.",
                    "title": "StockChart Component for Displaying Stock Price Data",
                    "medium_structured": "• Defines a StockChart React component that visualizes stock data\n• Accepts a data prop containing company info and price history\n• Renders a line chart with company name and ticker\n  ◦ Uses Recharts components for axes, legend, and tooltip\n• Formats and maps input data for chart compatibility",
                    "low_structured": "• React component renders a stock chart\n• Uses Recharts to display line chart\n• Shows company name and ticker",
                    "low_unstructured": "This code defines a React component that displays a stock price line chart using Recharts.",
                    "high_unstructured": "This code defines a StockChart React component that visualizes historical stock price data as a line chart using the Recharts library. The component expects a data prop containing the company's name, ticker, and an array of date/close price objects. It processes the data to create chart-friendly objects, formats date labels, and renders the chart with axes, legend, and tooltip, omitting dots for a cleaner line. The chart is responsive and displays the company name and ticker above the visualization, returning null if no valid data is provided.",
                    "high_structured": "• Implements a StockChart React component for displaying stock price history\n• Expects a data prop with:\n  ◦ name (company name)\n  ◦ ticker (stock symbol)\n  ◦ data (array of objects with date and close price)\n• Validates input and returns null if data is missing or empty\n• Processes input data:\n  ◦ Maps each item to an object with date and price fields for charting\n  ◦ Includes a helper function to format date strings (not directly used in rendering)\n• Renders a responsive line chart using Recharts:\n  ◦ Displays company name and ticker above the chart\n  ◦ Includes X and Y axes, legend, and tooltip\n  ◦ Plots a monotone line for price, with no dots for data points\n• Sets chart margins and ensures the chart fits its container"
                },
                "editPromptDetailLevel": null,
                "summaryMappings": {
                    "medium_unstructured": [
                        {
                            "summaryComponent": "implements a React component",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "renders a line chart of stock prices",
                            "codeSegments": [
                                {
                                    "line": 36,
                                    "code": "<LineChart"
                                },
                                {
                                    "line": 44,
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "using the Recharts library",
                            "codeSegments": [
                                {
                                    "line": 2,
                                    "code": "import {"
                                },
                                {
                                    "line": 11,
                                    "code": "} from \"recharts\";"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "takes stock data as a prop",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "formats it",
                            "codeSegments": [
                                {
                                    "line": 25,
                                    "code": "const chartData = data.data.map((item) => ({"
                                },
                                {
                                    "line": 26,
                                    "code": "date: item.date,"
                                },
                                {
                                    "line": 27,
                                    "code": "price: item.close,"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "displays the company name and ticker above the chart",
                            "codeSegments": [
                                {
                                    "line": 32,
                                    "code": "<h3>"
                                },
                                {
                                    "line": 33,
                                    "code": "{company} ({ticker})"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "The chart includes axes",
                            "codeSegments": [
                                {
                                    "line": 40,
                                    "code": "<XAxis dataKey=\"date\" />"
                                },
                                {
                                    "line": 41,
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "a legend",
                            "codeSegments": [
                                {
                                    "line": 43,
                                    "code": "<Legend />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "and a tooltip for interactivity",
                            "codeSegments": [
                                {
                                    "line": 42,
                                    "code": "<Tooltip />"
                                }
                            ]
                        }
                    ],
                    "medium_structured": [
                        {
                            "summaryComponent": "Defines a StockChart React component that visualizes stock data",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Accepts a data prop containing company info and price history",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                },
                                {
                                    "line": 16,
                                    "code": "const company = data.name;"
                                },
                                {
                                    "line": 17,
                                    "code": "const ticker = data.ticker;"
                                },
                                {
                                    "line": 25,
                                    "code": "const chartData = data.data.map((item) => ({"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Renders a line chart with company name and ticker",
                            "codeSegments": [
                                {
                                    "line": 32,
                                    "code": "<h3>"
                                },
                                {
                                    "line": 33,
                                    "code": "{company} ({ticker})"
                                },
                                {
                                    "line": 36,
                                    "code": "<LineChart"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Uses Recharts components for axes, legend, and tooltip",
                            "codeSegments": [
                                {
                                    "line": 40,
                                    "code": "<XAxis dataKey=\"date\" />"
                                },
                                {
                                    "line": 41,
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                                },
                                {
                                    "line": 42,
                                    "code": "<Tooltip />"
                                },
                                {
                                    "line": 43,
                                    "code": "<Legend />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Formats and maps input data for chart compatibility",
                            "codeSegments": [
                                {
                                    "line": 25,
                                    "code": "const chartData = data.data.map((item) => ({"
                                },
                                {
                                    "line": 26,
                                    "code": "date: item.date,"
                                },
                                {
                                    "line": 27,
                                    "code": "price: item.close,"
                                }
                            ]
                        }
                    ],
                    "low_structured": [
                        {
                            "summaryComponent": "React component renders a stock chart",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                },
                                {
                                    "line": 30,
                                    "code": "return ("
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Uses Recharts to display line chart",
                            "codeSegments": [
                                {
                                    "line": 2,
                                    "code": "import {"
                                },
                                {
                                    "line": 3,
                                    "code": "LineChart,"
                                },
                                {
                                    "line": 36,
                                    "code": "<LineChart"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Shows company name and ticker",
                            "codeSegments": [
                                {
                                    "line": 32,
                                    "code": "<h3>"
                                },
                                {
                                    "line": 33,
                                    "code": "{company} ({ticker})"
                                }
                            ]
                        }
                    ],
                    "low_unstructured": [
                        {
                            "summaryComponent": "This code defines a React component",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                },
                                {
                                    "line": 51,
                                    "code": "export default StockChart;"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "that displays a stock price line chart",
                            "codeSegments": [
                                {
                                    "line": 36,
                                    "code": "<LineChart"
                                },
                                {
                                    "line": 44,
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "using Recharts",
                            "codeSegments": [
                                {
                                    "line": 2,
                                    "code": "import {"
                                },
                                {
                                    "line": 11,
                                    "code": "} from \"recharts\";"
                                }
                            ]
                        }
                    ],
                    "high_unstructured": [
                        {
                            "summaryComponent": "defines a StockChart React component",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "visualizes historical stock price data as a line chart",
                            "codeSegments": [
                                {
                                    "line": 36,
                                    "code": "<LineChart"
                                },
                                {
                                    "line": 44,
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "using the Recharts library",
                            "codeSegments": [
                                {
                                    "line": 2,
                                    "code": "import {"
                                },
                                {
                                    "line": 11,
                                    "code": "} from \"recharts\";"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "expects a data prop containing the company's name, ticker, and an array of date/close price objects",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                },
                                {
                                    "line": 16,
                                    "code": "const company = data.name;"
                                },
                                {
                                    "line": 17,
                                    "code": "const ticker = data.ticker;"
                                },
                                {
                                    "line": 25,
                                    "code": "const chartData = data.data.map((item) => ({"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "processes the data to create chart-friendly objects",
                            "codeSegments": [
                                {
                                    "line": 25,
                                    "code": "const chartData = data.data.map((item) => ({"
                                },
                                {
                                    "line": 26,
                                    "code": "date: item.date,"
                                },
                                {
                                    "line": 27,
                                    "code": "price: item.close,"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "formats date labels",
                            "codeSegments": [
                                {
                                    "line": 19,
                                    "code": "const formatDateString = (date) => {"
                                },
                                {
                                    "line": 21,
                                    "code": "return d.toLocaleString(\"default\", { month: \"short\", day: \"numeric\" });"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "renders the chart with axes, legend, and tooltip",
                            "codeSegments": [
                                {
                                    "line": 40,
                                    "code": "<XAxis dataKey=\"date\" />"
                                },
                                {
                                    "line": 41,
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                                },
                                {
                                    "line": 42,
                                    "code": "<Tooltip />"
                                },
                                {
                                    "line": 43,
                                    "code": "<Legend />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "omitting dots for a cleaner line",
                            "codeSegments": [
                                {
                                    "line": 44,
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "chart is responsive",
                            "codeSegments": [
                                {
                                    "line": 35,
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "displays the company name and ticker above the visualization",
                            "codeSegments": [
                                {
                                    "line": 32,
                                    "code": "<h3>"
                                },
                                {
                                    "line": 33,
                                    "code": "{company} ({ticker})"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "returning null if no valid data is provided",
                            "codeSegments": [
                                {
                                    "line": 14,
                                    "code": "if (!data || !data.data || !data.data.length) return null;"
                                }
                            ]
                        }
                    ],
                    "high_structured": [
                        {
                            "summaryComponent": "Implements a StockChart React component for displaying stock price history",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Expects a data prop with:",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "name (company name)",
                            "codeSegments": [
                                {
                                    "line": 16,
                                    "code": "const company = data.name;"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "ticker (stock symbol)",
                            "codeSegments": [
                                {
                                    "line": 17,
                                    "code": "const ticker = data.ticker;"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "data (array of objects with date and close price)",
                            "codeSegments": [
                                {
                                    "line": 25,
                                    "code": "const chartData = data.data.map((item) => ({"
                                },
                                {
                                    "line": 26,
                                    "code": "date: item.date,"
                                },
                                {
                                    "line": 27,
                                    "code": "price: item.close,"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Validates input and returns null if data is missing or empty",
                            "codeSegments": [
                                {
                                    "line": 14,
                                    "code": "if (!data || !data.data || !data.data.length) return null;"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Processes input data:",
                            "codeSegments": [
                                {
                                    "line": 25,
                                    "code": "const chartData = data.data.map((item) => ({"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Maps each item to an object with date and price fields for charting",
                            "codeSegments": [
                                {
                                    "line": 25,
                                    "code": "const chartData = data.data.map((item) => ({"
                                },
                                {
                                    "line": 26,
                                    "code": "date: item.date,"
                                },
                                {
                                    "line": 27,
                                    "code": "price: item.close,"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Includes a helper function to format date strings (not directly used in rendering)",
                            "codeSegments": [
                                {
                                    "line": 19,
                                    "code": "const formatDateString = (date) => {"
                                },
                                {
                                    "line": 20,
                                    "code": "const d = new Date(date);"
                                },
                                {
                                    "line": 21,
                                    "code": "return d.toLocaleString(\"default\", { month: \"short\", day: \"numeric\" });"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Renders a responsive line chart using Recharts:",
                            "codeSegments": [
                                {
                                    "line": 35,
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                                },
                                {
                                    "line": 36,
                                    "code": "<LineChart"
                                }
                            ]
                        }
                    ]
                },
                "metadata": {
                    "fullPath": "/project/workspace/frontend/src/StockChart.jsx",
                    "id": "27328c98-cd66-476d-b489-4d7d8526807c",
                    "filename": "StockChart.jsx",
                    "offset": 0,
                    "originalCode": "import React from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  ReferenceLine,\n} from \"recharts\";\n\nconst StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    const d = new Date(date);\n    return d.toLocaleString(\"default\", { month: \"short\", day: \"numeric\" });\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;\n"
                },
                "editPromptStructured": null,
                "selectedStructured": "unstructured",
                "createdAt": 1755994284000,
                "editPromptValue": "",
                "selectedDetailLevel": "medium"
            },
            "section_id": "27328c98-cd66-476d-b489-4d7d8526807c"
        },
        "source": "frontend",
        "event": "create_new_section",
        "timestamp": "2025-08-23 16:11:24.000",
        "id": "AY730tT8RlVFXrHVRzv4"
    },
    {
        "data": {
            "mapping": [
                {
                    "summaryComponent": "defines a StockChart React component",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "visualizes historical stock price data as a line chart",
                    "codeSegments": [
                        {
                            "line": 36,
                            "code": "<LineChart"
                        },
                        {
                            "line": 44,
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                        }
                    ]
                },
                {
                    "summaryComponent": "using the Recharts library",
                    "codeSegments": [
                        {
                            "line": 2,
                            "code": "import {"
                        },
                        {
                            "line": 11,
                            "code": "} from \"recharts\";"
                        }
                    ]
                },
                {
                    "summaryComponent": "expects a data prop containing the company's name, ticker, and an array of date/close price objects",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        },
                        {
                            "line": 16,
                            "code": "const company = data.name;"
                        },
                        {
                            "line": 17,
                            "code": "const ticker = data.ticker;"
                        },
                        {
                            "line": 25,
                            "code": "const chartData = data.data.map((item) => ({"
                        }
                    ]
                },
                {
                    "summaryComponent": "processes the data to create chart-friendly objects",
                    "codeSegments": [
                        {
                            "line": 25,
                            "code": "const chartData = data.data.map((item) => ({"
                        },
                        {
                            "line": 26,
                            "code": "date: item.date,"
                        },
                        {
                            "line": 27,
                            "code": "price: item.close,"
                        }
                    ]
                },
                {
                    "summaryComponent": "formats date labels",
                    "codeSegments": [
                        {
                            "line": 19,
                            "code": "const formatDateString = (date) => {"
                        },
                        {
                            "line": 21,
                            "code": "return d.toLocaleString(\"default\", { month: \"short\", day: \"numeric\" });"
                        }
                    ]
                },
                {
                    "summaryComponent": "renders the chart with axes, legend, and tooltip",
                    "codeSegments": [
                        {
                            "line": 40,
                            "code": "<XAxis dataKey=\"date\" />"
                        },
                        {
                            "line": 41,
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                        },
                        {
                            "line": 42,
                            "code": "<Tooltip />"
                        },
                        {
                            "line": 43,
                            "code": "<Legend />"
                        }
                    ]
                },
                {
                    "summaryComponent": "omitting dots for a cleaner line",
                    "codeSegments": [
                        {
                            "line": 44,
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                        }
                    ]
                },
                {
                    "summaryComponent": "chart is responsive",
                    "codeSegments": [
                        {
                            "line": 35,
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                        }
                    ]
                },
                {
                    "summaryComponent": "displays the company name and ticker above the visualization",
                    "codeSegments": [
                        {
                            "line": 32,
                            "code": "<h3>"
                        },
                        {
                            "line": 33,
                            "code": "{company} ({ticker})"
                        }
                    ]
                },
                {
                    "summaryComponent": "returning null if no valid data is provided",
                    "codeSegments": [
                        {
                            "line": 14,
                            "code": "if (!data || !data.data || !data.data.length) return null;"
                        }
                    ]
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     const d = new Date(date);\n21:     return d.toLocaleString(\"default\", { month: \"short\", day: \"numeric\" });\n22:   };\n23: \n24:   // Combine labels and values into an array of objects for Recharts\n25:   const chartData = data.data.map((item) => ({\n26:     date: item.date,\n27:     price: item.close,\n28:   }));\n29: \n30:   return (\n31:     <div style={{ marginTop: \"2rem\" }}>\n32:       <h3>\n33:         {company} ({ticker})\n34:       </h3>\n35:       <ResponsiveContainer width=\"100%\" height={300}>\n36:         <LineChart\n37:           data={chartData}\n38:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n39:         >\n40:           <XAxis dataKey=\"date\" />\n41:           <YAxis domain={[\"auto\", \"auto\"]} />\n42:           <Tooltip />\n43:           <Legend />\n44:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n45:         </LineChart>\n46:       </ResponsiveContainer>\n47:     </div>\n48:   );\n49: };\n50: \n51: export default StockChart;\n52: ",
            "summary": "This code defines a StockChart React component that visualizes historical stock price data as a line chart using the Recharts library. The component expects a data prop containing the company's name, ticker, and an array of date/close price objects. It processes the data to create chart-friendly objects, formats date labels, and renders the chart with axes, legend, and tooltip, omitting dots for a cleaner line. The chart is responsive and displays the company name and ticker above the visualization, returning null if no valid data is provided."
        },
        "source": "backend",
        "event": "map_summary_code",
        "timestamp": "2025-08-23 16:11:24.000",
        "id": "CzurBjF3DrJMh96WWAeu"
    },
    {
        "data": {
            "after_section_id": "27328c98-cd66-476d-b489-4d7d8526807c",
            "before_section_id": "cdae37bf-04aa-451d-8e9f-b575c72239d2"
        },
        "source": "frontend",
        "event": "autotransit_section",
        "timestamp": "2025-08-23 16:11:24.000",
        "id": "RYr5cF7swF1CQCyGFWCG"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "27328c98-cd66-476d-b489-4d7d8526807c",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:11:25.000",
        "id": "0E1z6dLfin9DCBKI730j"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "27328c98-cd66-476d-b489-4d7d8526807c",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:11:25.000",
        "id": "0cOLoAer5jAw6Fx48yeA"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 4,
            "section_id": "27328c98-cd66-476d-b489-4d7d8526807c",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:11:25.000",
        "id": "BqbHcRVeiXtj8mqIWsBf"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 7,
            "section_id": "27328c98-cd66-476d-b489-4d7d8526807c",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:11:25.000",
        "id": "MkcodtvIOfpB8p1SLDKj"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 5,
            "section_id": "27328c98-cd66-476d-b489-4d7d8526807c",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:11:25.000",
        "id": "ObIrwQAoS5E3ARDOz8c3"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 1,
            "section_id": "27328c98-cd66-476d-b489-4d7d8526807c",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:11:25.000",
        "id": "V25lxh75uvldlRJtQ82R"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "27328c98-cd66-476d-b489-4d7d8526807c",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:11:25.000",
        "id": "bhEtpaSGaYs2vQSKKFvv"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "27328c98-cd66-476d-b489-4d7d8526807c",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:11:25.000",
        "id": "hZ650IMeqxQWks81LbKy"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 5,
            "section_id": "27328c98-cd66-476d-b489-4d7d8526807c",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:11:25.000",
        "id": "kiBsevKlnOy4Pzm5OeK3"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "27328c98-cd66-476d-b489-4d7d8526807c",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:11:25.000",
        "id": "nS48idGFVxrod6yM25R2"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 2,
            "section_id": "27328c98-cd66-476d-b489-4d7d8526807c",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:11:25.000",
        "id": "q9y4UC6mzqC7BYH0yrDJ"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 0,
            "section_id": "27328c98-cd66-476d-b489-4d7d8526807c",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:11:26.000",
        "id": "69mO9aKvgojVutpIqO5Q"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "27328c98-cd66-476d-b489-4d7d8526807c",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:11:26.000",
        "id": "6j7PQjJxoOvZyyW7ORlC"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "27328c98-cd66-476d-b489-4d7d8526807c",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:11:26.000",
        "id": "GiDWndhjcdMMGq5HOic4"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "27328c98-cd66-476d-b489-4d7d8526807c",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:11:26.000",
        "id": "XnBQor4eP9sZPwz1Sy2C"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 3,
            "section_id": "27328c98-cd66-476d-b489-4d7d8526807c",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:11:26.000",
        "id": "bJxgxeGIod720mvjttdb"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 1,
            "section_id": "27328c98-cd66-476d-b489-4d7d8526807c",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:11:26.000",
        "id": "z2OSyjgcGEXcTAJFFJ9a"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "27328c98-cd66-476d-b489-4d7d8526807c",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:11:27.000",
        "id": "1NOj27nGDTLowdM4zYmd"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "27328c98-cd66-476d-b489-4d7d8526807c",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:11:27.000",
        "id": "3CSxOVOUXlQdWsiqR5NJ"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "27328c98-cd66-476d-b489-4d7d8526807c",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:11:27.000",
        "id": "5co8uLsa4A3yQZhr7u1Z"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 5,
            "section_id": "27328c98-cd66-476d-b489-4d7d8526807c",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:11:27.000",
        "id": "BRdzHLU0VczaQGsFztUf"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 5,
            "section_id": "27328c98-cd66-476d-b489-4d7d8526807c",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:11:27.000",
        "id": "H6IECylPz4Uzp9UZiq5S"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 3,
            "section_id": "27328c98-cd66-476d-b489-4d7d8526807c",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:11:27.000",
        "id": "V6Qw5kh2BwnNgOdgSVyZ"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 1,
            "section_id": "27328c98-cd66-476d-b489-4d7d8526807c",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:11:27.000",
        "id": "XG8AJMW9ZTlHccuDLmHm"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "27328c98-cd66-476d-b489-4d7d8526807c",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:11:27.000",
        "id": "Z4gbUERHF5ZfmvwvYiL2"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 6,
            "section_id": "27328c98-cd66-476d-b489-4d7d8526807c",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:11:27.000",
        "id": "rMlo2Cf7w8zwRkGaRuw1"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "27328c98-cd66-476d-b489-4d7d8526807c",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:11:27.000",
        "id": "xGYOEatimCRY2PhmXr6E"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 2,
            "section_id": "27328c98-cd66-476d-b489-4d7d8526807c",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:11:28.000",
        "id": "BP14bNPHPoqUZEr4rEDY"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "27328c98-cd66-476d-b489-4d7d8526807c",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:11:28.000",
        "id": "JuOvjnuBqVGWEkqiFZM3"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "27328c98-cd66-476d-b489-4d7d8526807c",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:11:28.000",
        "id": "TbedDKuds8O7c9dNcHfA"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 3,
            "section_id": "27328c98-cd66-476d-b489-4d7d8526807c",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:11:28.000",
        "id": "bblhtX91mEV03narIRlw"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 3,
            "section_id": "27328c98-cd66-476d-b489-4d7d8526807c",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:11:28.000",
        "id": "eU8zfNg6elmFQyzihEg3"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "27328c98-cd66-476d-b489-4d7d8526807c",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:11:28.000",
        "id": "eZ2x7RfJvAY2mxQx7R0i"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 6,
            "section_id": "27328c98-cd66-476d-b489-4d7d8526807c",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:11:29.000",
        "id": "JPSbey33Fj6opQv6WdrJ"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 5,
            "section_id": "27328c98-cd66-476d-b489-4d7d8526807c",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:11:29.000",
        "id": "hA7cGpSTgrpvkkvfIng0"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "27328c98-cd66-476d-b489-4d7d8526807c",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:11:29.000",
        "id": "lu3mc2vQ2AbQVIcaPuFh"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "27328c98-cd66-476d-b489-4d7d8526807c",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:11:29.000",
        "id": "zeCWLCr9qclGzdBoztiA"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "27328c98-cd66-476d-b489-4d7d8526807c",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:11:30.000",
        "id": "7sZ7VFthuoajY2XGRoGa"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 6,
            "section_id": "27328c98-cd66-476d-b489-4d7d8526807c",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:11:30.000",
        "id": "HkyzB3DydZ52GnJlu7g8"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 5,
            "section_id": "27328c98-cd66-476d-b489-4d7d8526807c",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:11:30.000",
        "id": "NDdDHsuA3VEaIgtT10J4"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "27328c98-cd66-476d-b489-4d7d8526807c",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:11:30.000",
        "id": "UOAhpNzYTy0XZTAZpuGZ"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 8,
            "section_id": "27328c98-cd66-476d-b489-4d7d8526807c",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:11:31.000",
        "id": "ImOCMZWCrLeF3kyIOHgk"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "27328c98-cd66-476d-b489-4d7d8526807c",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:11:31.000",
        "id": "S6AsfOVNQqjEG0vLnjMP"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "27328c98-cd66-476d-b489-4d7d8526807c",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:11:32.000",
        "id": "Hd1C0y8kSuvs714lMIpA"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 3,
            "section_id": "27328c98-cd66-476d-b489-4d7d8526807c",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:11:32.000",
        "id": "TFaEPKoeCCVsqPSDDZU8"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 6,
            "section_id": "27328c98-cd66-476d-b489-4d7d8526807c",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:11:32.000",
        "id": "WwyMyQGqV4SdpJ2xcGFt"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "27328c98-cd66-476d-b489-4d7d8526807c",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:11:32.000",
        "id": "c7RIYpwf7Cwmqd39RJps"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 5,
            "section_id": "27328c98-cd66-476d-b489-4d7d8526807c",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:11:32.000",
        "id": "chVE0DPhR4Pfpn11wBew"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "27328c98-cd66-476d-b489-4d7d8526807c",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:11:32.000",
        "id": "saVn4ZcK7h1LlnkRItu4"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "27328c98-cd66-476d-b489-4d7d8526807c",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:11:32.000",
        "id": "yzRMwse9mCLJBV1RR138"
    },
    {
        "data": {
            "summary": "The code implements a React component that renders a line chart of stock prices using the Recharts library. It takes stock data as a prop, formats it, and displays the company name and ticker above the chart. The chart includes axes, a legend, and a tooltip for interactivity.",
            "structured": "unstructured",
            "section_id": "27328c98-cd66-476d-b489-4d7d8526807c",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "click_edit_in_prompt",
        "timestamp": "2025-08-23 16:11:34.000",
        "id": "MIwU0Mbs2BTAs7PoN3y2"
    },
    {
        "data": {
            "edited_summary": "The code implements a React component that renders a line chart of stock prices using the Recharts library. It takes stock data as a prop, formats it, and displays the company name and ticker above the chart. The chart includes axes, a legend, ticks of months and a tooltip for interactivity.",
            "original_summary": "The code implements a React component that renders a line chart of stock prices using the Recharts library. It takes stock data as a prop, formats it, and displays the company name and ticker above the chart. The chart includes axes, a legend, and a tooltip for interactivity.",
            "structured": "unstructured",
            "section_id": "27328c98-cd66-476d-b489-4d7d8526807c",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "commit_modified_summary",
        "timestamp": "2025-08-23 16:11:57.000",
        "id": "oiPmxDbfKuHXXM9hPGGu"
    },
    {
        "data": {
            "original_summary": "The code implements a React component that renders a line chart of stock prices using the Recharts library. It takes stock data as a prop, formats it, and displays the company name and ticker above the chart. The chart includes axes, a legend, and a tooltip for interactivity.",
            "structured_type": "unstructured",
            "updated_code": "import React from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  ReferenceLine,\n} from \"recharts\";\n\nconst StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    const d = new Date(date);\n    return d.toLocaleString(\"default\", { month: \"short\", day: \"numeric\" });\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  // Get unique months for ticks\n  const monthTicks = Array.from(\n    new Set(\n      chartData.map((item) => {\n        const d = new Date(item.date);\n        return `${d.getFullYear()}-${d.getMonth()}`;\n      })\n    )\n  ).map((key) => {\n    // Find the first date in chartData matching this month\n    const match = chartData.find((item) => {\n      const d = new Date(item.date);\n      return `${d.getFullYear()}-${d.getMonth()}` === key;\n    });\n    return match ? match.date : null;\n  }).filter(Boolean);\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis\n            dataKey=\"date\"\n            ticks={monthTicks}\n            tickFormatter={(date) => {\n              const d = new Date(date);\n              return d.toLocaleString(\"default\", { month: \"short\" });\n            }}\n          />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;",
            "original_code": "import React from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  ReferenceLine,\n} from \"recharts\";\n\nconst StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    const d = new Date(date);\n    return d.toLocaleString(\"default\", { month: \"short\", day: \"numeric\" });\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;\n",
            "edited_summary": "The code implements a React component that renders a line chart of stock prices using the Recharts library. It takes stock data as a prop, formats it, and displays the company name and ticker above the chart. The chart includes axes, a legend, ticks of months and a tooltip for interactivity.",
            "detail_level": "medium"
        },
        "source": "backend",
        "event": "modify_summary_mediation",
        "timestamp": "2025-08-23 16:12:00.000",
        "id": "AUJGeSV5uXVBsHrdh4xA"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 0,
            "section_id": "27328c98-cd66-476d-b489-4d7d8526807c",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:12:03.000",
        "id": "Vl7yYVZuMvkxcWArKE3H"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 1,
            "section_id": "27328c98-cd66-476d-b489-4d7d8526807c",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:12:03.000",
        "id": "oWenJjewx45P2Gftn0SV"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "27328c98-cd66-476d-b489-4d7d8526807c",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:12:03.000",
        "id": "w6VsqDKXHzIcwESzUqdD"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 3,
            "section_id": "27328c98-cd66-476d-b489-4d7d8526807c",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:12:04.000",
        "id": "IMxcFbYotFQ9T9kK7Yjg"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "27328c98-cd66-476d-b489-4d7d8526807c",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:12:04.000",
        "id": "KGMTkvp5ZUzLApFRkyeN"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "27328c98-cd66-476d-b489-4d7d8526807c",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:12:04.000",
        "id": "fT0yO2GCiHI7uX0GqgxN"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "27328c98-cd66-476d-b489-4d7d8526807c",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:12:04.000",
        "id": "qd60jMZwo7yNwtUFf3PW"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 5,
            "section_id": "27328c98-cd66-476d-b489-4d7d8526807c",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:12:04.000",
        "id": "wksBsdVXjuojbBeKSkaV"
    },
    {
        "data": {
            "new_summary": {
                "medium_unstructured": "The code implements a React component that renders a line chart of stock prices using the Recharts library. It takes stock data as a prop, formats it, and displays the company name and ticker above the chart. The chart includes axes, a legend, and a tooltip for interactivity, and now the X-axis is customized to show only one tick per unique month, with month names formatted as short strings.",
                "title": "StockChart Component with Customized X-Axis Month Ticks",
                "medium_structured": "• Defines a StockChart React component that visualizes stock data\n• Accepts a data prop containing company info and price history\n• Renders a line chart with company name and ticker\n  ◦ Uses Recharts components for axes, legend, and tooltip\n• Formats and maps input data for chart compatibility\n• X-axis is now customized to display a single tick per unique month, formatted as a short month name",
                "low_structured": "• React component renders a stock chart\n• Uses Recharts to display line chart\n• Shows company name and ticker\n• X-axis now displays only one tick per unique month, formatted as short month names",
                "low_unstructured": "This code defines a React component that displays a stock price line chart using Recharts, now with the X-axis showing only one tick per unique month formatted as short month names.",
                "high_unstructured": "This code defines a StockChart React component that visualizes historical stock price data as a line chart using the Recharts library. The component expects a data prop containing the company's name, ticker, and an array of date/close price objects. It processes the data to create chart-friendly objects, formats date labels, and renders the chart with axes, legend, and tooltip, omitting dots for a cleaner line. The chart is responsive and displays the company name and ticker above the visualization, returning null if no valid data is provided. The X-axis now only displays one tick per unique month, with each tick formatted as a short month name.",
                "high_structured": "• Implements a StockChart React component for displaying stock price history\n• Expects a data prop with:\n  ◦ name (company name)\n  ◦ ticker (stock symbol)\n  ◦ data (array of objects with date and close price)\n• Validates input and returns null if data is missing or empty\n• Processes input data:\n  ◦ Maps each item to an object with date and price fields for charting\n  ◦ Includes a helper function to format date strings (not directly used in rendering)\n• Renders a responsive line chart using Recharts:\n  ◦ Displays company name and ticker above the chart\n  ◦ Includes X and Y axes, legend, and tooltip\n  ◦ Plots a monotone line for price, with no dots for data points\n  ◦ X-axis now displays only one tick per unique month, formatted as a short month name\n• Sets chart margins and ensures the chart fits its container"
            },
            "old_summary": {
                "medium_unstructured": "The code implements a React component that renders a line chart of stock prices using the Recharts library. It takes stock data as a prop, formats it, and displays the company name and ticker above the chart. The chart includes axes, a legend, and a tooltip for interactivity.",
                "title": "StockChart Component for Displaying Stock Price Data",
                "medium_structured": "• Defines a StockChart React component that visualizes stock data\n• Accepts a data prop containing company info and price history\n• Renders a line chart with company name and ticker\n  ◦ Uses Recharts components for axes, legend, and tooltip\n• Formats and maps input data for chart compatibility",
                "low_structured": "• React component renders a stock chart\n• Uses Recharts to display line chart\n• Shows company name and ticker",
                "low_unstructured": "This code defines a React component that displays a stock price line chart using Recharts.",
                "high_unstructured": "This code defines a StockChart React component that visualizes historical stock price data as a line chart using the Recharts library. The component expects a data prop containing the company's name, ticker, and an array of date/close price objects. It processes the data to create chart-friendly objects, formats date labels, and renders the chart with axes, legend, and tooltip, omitting dots for a cleaner line. The chart is responsive and displays the company name and ticker above the visualization, returning null if no valid data is provided.",
                "high_structured": "• Implements a StockChart React component for displaying stock price history\n• Expects a data prop with:\n  ◦ name (company name)\n  ◦ ticker (stock symbol)\n  ◦ data (array of objects with date and close price)\n• Validates input and returns null if data is missing or empty\n• Processes input data:\n  ◦ Maps each item to an object with date and price fields for charting\n  ◦ Includes a helper function to format date strings (not directly used in rendering)\n• Renders a responsive line chart using Recharts:\n  ◦ Displays company name and ticker above the chart\n  ◦ Includes X and Y axes, legend, and tooltip\n  ◦ Plots a monotone line for price, with no dots for data points\n• Sets chart margins and ensures the chart fits its container"
            },
            "new_code": "import React from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  ReferenceLine,\n} from \"recharts\";\n\nconst StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    const d = new Date(date);\n    return d.toLocaleString(\"default\", { month: \"short\", day: \"numeric\" });\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  // Get unique months for ticks\n  const monthTicks = Array.from(\n    new Set(\n      chartData.map((item) => {\n        const d = new Date(item.date);\n        return `${d.getFullYear()}-${d.getMonth()}`;\n      })\n    )\n  ).map((key) => {\n    // Find the first date in chartData matching this month\n    const match = chartData.find((item) => {\n      const d = new Date(item.date);\n      return `${d.getFullYear()}-${d.getMonth()}` === key;\n    });\n    return match ? match.date : null;\n  }).filter(Boolean);\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis\n            dataKey=\"date\"\n            ticks={monthTicks}\n            tickFormatter={(date) => {\n              const d = new Date(date);\n              return d.toLocaleString(\"default\", { month: \"short\" });\n            }}\n          />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;",
            "original_code": "import React from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  ReferenceLine,\n} from \"recharts\";\n\nconst StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    const d = new Date(date);\n    return d.toLocaleString(\"default\", { month: \"short\", day: \"numeric\" });\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  // Get unique months for ticks\n  const monthTicks = Array.from(\n    new Set(\n      chartData.map((item) => {\n        const d = new Date(item.date);\n        return `${d.getFullYear()}-${d.getMonth()}`;\n      })\n    )\n  ).map((key) => {\n    // Find the first date in chartData matching this month\n    const match = chartData.find((item) => {\n      const d = new Date(item.date);\n      return `${d.getFullYear()}-${d.getMonth()}` === key;\n    });\n    return match ? match.date : null;\n  }).filter(Boolean);\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis\n            dataKey=\"date\"\n            ticks={monthTicks}\n            tickFormatter={(date) => {\n              const d = new Date(date);\n              return d.toLocaleString(\"default\", { month: \"short\" });\n            }}\n          />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;"
        },
        "source": "backend",
        "event": "summarize_modified_code",
        "timestamp": "2025-08-23 16:12:11.000",
        "id": "S2k6WhKBmTAhVCFSqpyA"
    },
    {
        "data": {
            "mapping": [
                {
                    "summaryComponent": "React component renders a stock chart",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        },
                        {
                            "line": 47,
                            "code": "return ("
                        }
                    ]
                },
                {
                    "summaryComponent": "Uses Recharts to display line chart",
                    "codeSegments": [
                        {
                            "line": 2,
                            "code": "import {"
                        },
                        {
                            "line": 3,
                            "code": "LineChart,"
                        },
                        {
                            "line": 53,
                            "code": "<LineChart"
                        }
                    ]
                },
                {
                    "summaryComponent": "Shows company name and ticker",
                    "codeSegments": [
                        {
                            "line": 16,
                            "code": "const company = data.name;"
                        },
                        {
                            "line": 17,
                            "code": "const ticker = data.ticker;"
                        },
                        {
                            "line": 49,
                            "code": "<h3>"
                        },
                        {
                            "line": 50,
                            "code": "{company} ({ticker})"
                        }
                    ]
                },
                {
                    "summaryComponent": "X-axis now displays only one tick per unique month, formatted as short month names",
                    "codeSegments": [
                        {
                            "line": 31,
                            "code": "const monthTicks = Array.from("
                        },
                        {
                            "line": 59,
                            "code": "ticks={monthTicks}"
                        },
                        {
                            "line": 60,
                            "code": "tickFormatter={(date) => {"
                        },
                        {
                            "line": 62,
                            "code": "return d.toLocaleString(\"default\", { month: \"short\" });"
                        }
                    ]
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     const d = new Date(date);\n21:     return d.toLocaleString(\"default\", { month: \"short\", day: \"numeric\" });\n22:   };\n23: \n24:   // Combine labels and values into an array of objects for Recharts\n25:   const chartData = data.data.map((item) => ({\n26:     date: item.date,\n27:     price: item.close,\n28:   }));\n29: \n30:   // Get unique months for ticks\n31:   const monthTicks = Array.from(\n32:     new Set(\n33:       chartData.map((item) => {\n34:         const d = new Date(item.date);\n35:         return `${d.getFullYear()}-${d.getMonth()}`;\n36:       })\n37:     )\n38:   ).map((key) => {\n39:     // Find the first date in chartData matching this month\n40:     const match = chartData.find((item) => {\n41:       const d = new Date(item.date);\n42:       return `${d.getFullYear()}-${d.getMonth()}` === key;\n43:     });\n44:     return match ? match.date : null;\n45:   }).filter(Boolean);\n46: \n47:   return (\n48:     <div style={{ marginTop: \"2rem\" }}>\n49:       <h3>\n50:         {company} ({ticker})\n51:       </h3>\n52:       <ResponsiveContainer width=\"100%\" height={300}>\n53:         <LineChart\n54:           data={chartData}\n55:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n56:         >\n57:           <XAxis\n58:             dataKey=\"date\"\n59:             ticks={monthTicks}\n60:             tickFormatter={(date) => {\n61:               const d = new Date(date);\n62:               return d.toLocaleString(\"default\", { month: \"short\" });\n63:             }}\n64:           />\n65:           <YAxis domain={[\"auto\", \"auto\"]} />\n66:           <Tooltip />\n67:           <Legend />\n68:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n69:         </LineChart>\n70:       </ResponsiveContainer>\n71:     </div>\n72:   );\n73: };\n74: \n75: export default StockChart;",
            "summary": "• React component renders a stock chart\n• Uses Recharts to display line chart\n• Shows company name and ticker\n• X-axis now displays only one tick per unique month, formatted as short month names"
        },
        "source": "backend",
        "event": "map_summary_code",
        "timestamp": "2025-08-23 16:12:13.000",
        "id": "3PYvA7EGU2QoYQ9ebX5j"
    },
    {
        "data": {
            "mapping": [
                {
                    "summaryComponent": "defines a React component",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "displays a stock price line chart",
                    "codeSegments": [
                        {
                            "line": 53,
                            "code": "<LineChart"
                        },
                        {
                            "line": 68,
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                        }
                    ]
                },
                {
                    "summaryComponent": "using Recharts",
                    "codeSegments": [
                        {
                            "line": 2,
                            "code": "import {"
                        },
                        {
                            "line": 11,
                            "code": "} from \"recharts\";"
                        }
                    ]
                },
                {
                    "summaryComponent": "now with the X-axis showing only one tick per unique month",
                    "codeSegments": [
                        {
                            "line": 31,
                            "code": "const monthTicks = Array.from("
                        },
                        {
                            "line": 59,
                            "code": "ticks={monthTicks}"
                        }
                    ]
                },
                {
                    "summaryComponent": "formatted as short month names",
                    "codeSegments": [
                        {
                            "line": 60,
                            "code": "tickFormatter={(date) => {"
                        },
                        {
                            "line": 62,
                            "code": "return d.toLocaleString(\"default\", { month: \"short\" });"
                        }
                    ]
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     const d = new Date(date);\n21:     return d.toLocaleString(\"default\", { month: \"short\", day: \"numeric\" });\n22:   };\n23: \n24:   // Combine labels and values into an array of objects for Recharts\n25:   const chartData = data.data.map((item) => ({\n26:     date: item.date,\n27:     price: item.close,\n28:   }));\n29: \n30:   // Get unique months for ticks\n31:   const monthTicks = Array.from(\n32:     new Set(\n33:       chartData.map((item) => {\n34:         const d = new Date(item.date);\n35:         return `${d.getFullYear()}-${d.getMonth()}`;\n36:       })\n37:     )\n38:   ).map((key) => {\n39:     // Find the first date in chartData matching this month\n40:     const match = chartData.find((item) => {\n41:       const d = new Date(item.date);\n42:       return `${d.getFullYear()}-${d.getMonth()}` === key;\n43:     });\n44:     return match ? match.date : null;\n45:   }).filter(Boolean);\n46: \n47:   return (\n48:     <div style={{ marginTop: \"2rem\" }}>\n49:       <h3>\n50:         {company} ({ticker})\n51:       </h3>\n52:       <ResponsiveContainer width=\"100%\" height={300}>\n53:         <LineChart\n54:           data={chartData}\n55:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n56:         >\n57:           <XAxis\n58:             dataKey=\"date\"\n59:             ticks={monthTicks}\n60:             tickFormatter={(date) => {\n61:               const d = new Date(date);\n62:               return d.toLocaleString(\"default\", { month: \"short\" });\n63:             }}\n64:           />\n65:           <YAxis domain={[\"auto\", \"auto\"]} />\n66:           <Tooltip />\n67:           <Legend />\n68:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n69:         </LineChart>\n70:       </ResponsiveContainer>\n71:     </div>\n72:   );\n73: };\n74: \n75: export default StockChart;",
            "summary": "This code defines a React component that displays a stock price line chart using Recharts, now with the X-axis showing only one tick per unique month formatted as short month names."
        },
        "source": "backend",
        "event": "map_summary_code",
        "timestamp": "2025-08-23 16:12:13.000",
        "id": "8fhif9hCTV5UNAWe4FWy"
    },
    {
        "data": {
            "mapping": [
                {
                    "summaryComponent": "Defines a StockChart React component that visualizes stock data",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "Accepts a data prop containing company info and price history",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "Renders a line chart with company name and ticker",
                    "codeSegments": [
                        {
                            "line": 49,
                            "code": "<h3>"
                        },
                        {
                            "line": 50,
                            "code": "{company} ({ticker})"
                        },
                        {
                            "line": 53,
                            "code": "<LineChart"
                        }
                    ]
                },
                {
                    "summaryComponent": "Uses Recharts components for axes, legend, and tooltip",
                    "codeSegments": [
                        {
                            "line": 57,
                            "code": "<XAxis"
                        },
                        {
                            "line": 65,
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                        },
                        {
                            "line": 66,
                            "code": "<Tooltip />"
                        },
                        {
                            "line": 67,
                            "code": "<Legend />"
                        }
                    ]
                },
                {
                    "summaryComponent": "Formats and maps input data for chart compatibility",
                    "codeSegments": [
                        {
                            "line": 25,
                            "code": "const chartData = data.data.map((item) => ({"
                        }
                    ]
                },
                {
                    "summaryComponent": "X-axis is now customized to display a single tick per unique month, formatted as a short month name",
                    "codeSegments": [
                        {
                            "line": 31,
                            "code": "const monthTicks = Array.from("
                        },
                        {
                            "line": 59,
                            "code": "ticks={monthTicks}"
                        },
                        {
                            "line": 60,
                            "code": "tickFormatter={(date) => {"
                        },
                        {
                            "line": 62,
                            "code": "return d.toLocaleString(\"default\", { month: \"short\" });"
                        }
                    ]
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     const d = new Date(date);\n21:     return d.toLocaleString(\"default\", { month: \"short\", day: \"numeric\" });\n22:   };\n23: \n24:   // Combine labels and values into an array of objects for Recharts\n25:   const chartData = data.data.map((item) => ({\n26:     date: item.date,\n27:     price: item.close,\n28:   }));\n29: \n30:   // Get unique months for ticks\n31:   const monthTicks = Array.from(\n32:     new Set(\n33:       chartData.map((item) => {\n34:         const d = new Date(item.date);\n35:         return `${d.getFullYear()}-${d.getMonth()}`;\n36:       })\n37:     )\n38:   ).map((key) => {\n39:     // Find the first date in chartData matching this month\n40:     const match = chartData.find((item) => {\n41:       const d = new Date(item.date);\n42:       return `${d.getFullYear()}-${d.getMonth()}` === key;\n43:     });\n44:     return match ? match.date : null;\n45:   }).filter(Boolean);\n46: \n47:   return (\n48:     <div style={{ marginTop: \"2rem\" }}>\n49:       <h3>\n50:         {company} ({ticker})\n51:       </h3>\n52:       <ResponsiveContainer width=\"100%\" height={300}>\n53:         <LineChart\n54:           data={chartData}\n55:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n56:         >\n57:           <XAxis\n58:             dataKey=\"date\"\n59:             ticks={monthTicks}\n60:             tickFormatter={(date) => {\n61:               const d = new Date(date);\n62:               return d.toLocaleString(\"default\", { month: \"short\" });\n63:             }}\n64:           />\n65:           <YAxis domain={[\"auto\", \"auto\"]} />\n66:           <Tooltip />\n67:           <Legend />\n68:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n69:         </LineChart>\n70:       </ResponsiveContainer>\n71:     </div>\n72:   );\n73: };\n74: \n75: export default StockChart;",
            "summary": "• Defines a StockChart React component that visualizes stock data\n• Accepts a data prop containing company info and price history\n• Renders a line chart with company name and ticker\n  ◦ Uses Recharts components for axes, legend, and tooltip\n• Formats and maps input data for chart compatibility\n• X-axis is now customized to display a single tick per unique month, formatted as a short month name"
        },
        "source": "backend",
        "event": "map_summary_code",
        "timestamp": "2025-08-23 16:12:14.000",
        "id": "3UxXBTXa3p2aReM3KZck"
    },
    {
        "data": {
            "mapping": [
                {
                    "summaryComponent": "Implements a StockChart React component for displaying stock price history",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "Expects a data prop with:",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "name (company name)",
                    "codeSegments": [
                        {
                            "line": 16,
                            "code": "const company = data.name;"
                        }
                    ]
                },
                {
                    "summaryComponent": "ticker (stock symbol)",
                    "codeSegments": [
                        {
                            "line": 17,
                            "code": "const ticker = data.ticker;"
                        }
                    ]
                },
                {
                    "summaryComponent": "data (array of objects with date and close price)",
                    "codeSegments": [
                        {
                            "line": 25,
                            "code": "const chartData = data.data.map((item) => ({"
                        },
                        {
                            "line": 26,
                            "code": "date: item.date,"
                        },
                        {
                            "line": 27,
                            "code": "price: item.close,"
                        }
                    ]
                },
                {
                    "summaryComponent": "Validates input and returns null if data is missing or empty",
                    "codeSegments": [
                        {
                            "line": 14,
                            "code": "if (!data || !data.data || !data.data.length) return null;"
                        }
                    ]
                },
                {
                    "summaryComponent": "Maps each item to an object with date and price fields for charting",
                    "codeSegments": [
                        {
                            "line": 25,
                            "code": "const chartData = data.data.map((item) => ({"
                        },
                        {
                            "line": 26,
                            "code": "date: item.date,"
                        },
                        {
                            "line": 27,
                            "code": "price: item.close,"
                        }
                    ]
                },
                {
                    "summaryComponent": "Includes a helper function to format date strings (not directly used in rendering)",
                    "codeSegments": [
                        {
                            "line": 19,
                            "code": "const formatDateString = (date) => {"
                        },
                        {
                            "line": 20,
                            "code": "const d = new Date(date);"
                        },
                        {
                            "line": 21,
                            "code": "return d.toLocaleString(\"default\", { month: \"short\", day: \"numeric\" });"
                        }
                    ]
                },
                {
                    "summaryComponent": "Renders a responsive line chart using Recharts:",
                    "codeSegments": [
                        {
                            "line": 52,
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                        },
                        {
                            "line": 53,
                            "code": "<LineChart"
                        }
                    ]
                },
                {
                    "summaryComponent": "Displays company name and ticker above the chart",
                    "codeSegments": [
                        {
                            "line": 49,
                            "code": "<h3>"
                        },
                        {
                            "line": 50,
                            "code": "{company} ({ticker})"
                        }
                    ]
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     const d = new Date(date);\n21:     return d.toLocaleString(\"default\", { month: \"short\", day: \"numeric\" });\n22:   };\n23: \n24:   // Combine labels and values into an array of objects for Recharts\n25:   const chartData = data.data.map((item) => ({\n26:     date: item.date,\n27:     price: item.close,\n28:   }));\n29: \n30:   // Get unique months for ticks\n31:   const monthTicks = Array.from(\n32:     new Set(\n33:       chartData.map((item) => {\n34:         const d = new Date(item.date);\n35:         return `${d.getFullYear()}-${d.getMonth()}`;\n36:       })\n37:     )\n38:   ).map((key) => {\n39:     // Find the first date in chartData matching this month\n40:     const match = chartData.find((item) => {\n41:       const d = new Date(item.date);\n42:       return `${d.getFullYear()}-${d.getMonth()}` === key;\n43:     });\n44:     return match ? match.date : null;\n45:   }).filter(Boolean);\n46: \n47:   return (\n48:     <div style={{ marginTop: \"2rem\" }}>\n49:       <h3>\n50:         {company} ({ticker})\n51:       </h3>\n52:       <ResponsiveContainer width=\"100%\" height={300}>\n53:         <LineChart\n54:           data={chartData}\n55:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n56:         >\n57:           <XAxis\n58:             dataKey=\"date\"\n59:             ticks={monthTicks}\n60:             tickFormatter={(date) => {\n61:               const d = new Date(date);\n62:               return d.toLocaleString(\"default\", { month: \"short\" });\n63:             }}\n64:           />\n65:           <YAxis domain={[\"auto\", \"auto\"]} />\n66:           <Tooltip />\n67:           <Legend />\n68:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n69:         </LineChart>\n70:       </ResponsiveContainer>\n71:     </div>\n72:   );\n73: };\n74: \n75: export default StockChart;",
            "summary": "• Implements a StockChart React component for displaying stock price history\n• Expects a data prop with:\n  ◦ name (company name)\n  ◦ ticker (stock symbol)\n  ◦ data (array of objects with date and close price)\n• Validates input and returns null if data is missing or empty\n• Processes input data:\n  ◦ Maps each item to an object with date and price fields for charting\n  ◦ Includes a helper function to format date strings (not directly used in rendering)\n• Renders a responsive line chart using Recharts:\n  ◦ Displays company name and ticker above the chart\n  ◦ Includes X and Y axes, legend, and tooltip\n  ◦ Plots a monotone line for price, with no dots for data points\n  ◦ X-axis now displays only one tick per unique month, formatted as a short month name\n• Sets chart margins and ensures the chart fits its container"
        },
        "source": "backend",
        "event": "map_summary_code",
        "timestamp": "2025-08-23 16:12:16.000",
        "id": "qP2plpBdY8xG6du5Rbsz"
    },
    {
        "data": {
            "mapping": [
                {
                    "summaryComponent": "implements a React component",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "renders a line chart of stock prices",
                    "codeSegments": [
                        {
                            "line": 53,
                            "code": "<LineChart"
                        },
                        {
                            "line": 68,
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                        }
                    ]
                },
                {
                    "summaryComponent": "using the Recharts library",
                    "codeSegments": [
                        {
                            "line": 2,
                            "code": "import {"
                        },
                        {
                            "line": 11,
                            "code": "} from \"recharts\";"
                        }
                    ]
                },
                {
                    "summaryComponent": "takes stock data as a prop",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "formats it",
                    "codeSegments": [
                        {
                            "line": 25,
                            "code": "const chartData = data.data.map((item) => ({"
                        },
                        {
                            "line": 26,
                            "code": "date: item.date,"
                        },
                        {
                            "line": 27,
                            "code": "price: item.close,"
                        }
                    ]
                },
                {
                    "summaryComponent": "displays the company name and ticker above the chart",
                    "codeSegments": [
                        {
                            "line": 49,
                            "code": "<h3>"
                        },
                        {
                            "line": 50,
                            "code": "{company} ({ticker})"
                        }
                    ]
                },
                {
                    "summaryComponent": "The chart includes axes",
                    "codeSegments": [
                        {
                            "line": 57,
                            "code": "<XAxis"
                        },
                        {
                            "line": 65,
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                        }
                    ]
                },
                {
                    "summaryComponent": "a legend",
                    "codeSegments": [
                        {
                            "line": 67,
                            "code": "<Legend />"
                        }
                    ]
                },
                {
                    "summaryComponent": "and a tooltip for interactivity",
                    "codeSegments": [
                        {
                            "line": 66,
                            "code": "<Tooltip />"
                        }
                    ]
                },
                {
                    "summaryComponent": "the X-axis is customized to show only one tick per unique month, with month names formatted as short strings",
                    "codeSegments": [
                        {
                            "line": 31,
                            "code": "const monthTicks = Array.from("
                        },
                        {
                            "line": 59,
                            "code": "ticks={monthTicks}"
                        },
                        {
                            "line": 60,
                            "code": "tickFormatter={(date) => {"
                        },
                        {
                            "line": 62,
                            "code": "return d.toLocaleString(\"default\", { month: \"short\" });"
                        }
                    ]
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     const d = new Date(date);\n21:     return d.toLocaleString(\"default\", { month: \"short\", day: \"numeric\" });\n22:   };\n23: \n24:   // Combine labels and values into an array of objects for Recharts\n25:   const chartData = data.data.map((item) => ({\n26:     date: item.date,\n27:     price: item.close,\n28:   }));\n29: \n30:   // Get unique months for ticks\n31:   const monthTicks = Array.from(\n32:     new Set(\n33:       chartData.map((item) => {\n34:         const d = new Date(item.date);\n35:         return `${d.getFullYear()}-${d.getMonth()}`;\n36:       })\n37:     )\n38:   ).map((key) => {\n39:     // Find the first date in chartData matching this month\n40:     const match = chartData.find((item) => {\n41:       const d = new Date(item.date);\n42:       return `${d.getFullYear()}-${d.getMonth()}` === key;\n43:     });\n44:     return match ? match.date : null;\n45:   }).filter(Boolean);\n46: \n47:   return (\n48:     <div style={{ marginTop: \"2rem\" }}>\n49:       <h3>\n50:         {company} ({ticker})\n51:       </h3>\n52:       <ResponsiveContainer width=\"100%\" height={300}>\n53:         <LineChart\n54:           data={chartData}\n55:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n56:         >\n57:           <XAxis\n58:             dataKey=\"date\"\n59:             ticks={monthTicks}\n60:             tickFormatter={(date) => {\n61:               const d = new Date(date);\n62:               return d.toLocaleString(\"default\", { month: \"short\" });\n63:             }}\n64:           />\n65:           <YAxis domain={[\"auto\", \"auto\"]} />\n66:           <Tooltip />\n67:           <Legend />\n68:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n69:         </LineChart>\n70:       </ResponsiveContainer>\n71:     </div>\n72:   );\n73: };\n74: \n75: export default StockChart;",
            "summary": "The code implements a React component that renders a line chart of stock prices using the Recharts library. It takes stock data as a prop, formats it, and displays the company name and ticker above the chart. The chart includes axes, a legend, and a tooltip for interactivity, and now the X-axis is customized to show only one tick per unique month, with month names formatted as short strings."
        },
        "source": "backend",
        "event": "map_summary_code",
        "timestamp": "2025-08-23 16:12:16.000",
        "id": "zvVt4mntbFXkhHqMsj2X"
    },
    {
        "data": {
            "after_section_id": "5f9b52fa-f5bb-439e-bc3c-a5f567f3aefa",
            "before_section_id": "27328c98-cd66-476d-b489-4d7d8526807c"
        },
        "source": "frontend",
        "event": "autotransit_section",
        "timestamp": "2025-08-23 16:12:18.000",
        "id": "2HTX96JOMwgBMEfH619A"
    },
    {
        "data": {
            "section_data": {
                "lines": [
                    1,
                    77
                ],
                "title": "StockChart Component with Customized X-Axis Month Ticks",
                "summaryData": {
                    "medium_unstructured": "The code implements a React component that renders a line chart of stock prices using the Recharts library. It takes stock data as a prop, formats it, and displays the company name and ticker above the chart. The chart includes axes, a legend, and a tooltip for interactivity, and now the X-axis is customized to show only one tick per unique month, with month names formatted as short strings.",
                    "title": "StockChart Component with Customized X-Axis Month Ticks",
                    "medium_structured": "• Defines a StockChart React component that visualizes stock data\n• Accepts a data prop containing company info and price history\n• Renders a line chart with company name and ticker\n  ◦ Uses Recharts components for axes, legend, and tooltip\n• Formats and maps input data for chart compatibility\n• X-axis is now customized to display a single tick per unique month, formatted as a short month name",
                    "low_structured": "• React component renders a stock chart\n• Uses Recharts to display line chart\n• Shows company name and ticker\n• X-axis now displays only one tick per unique month, formatted as short month names",
                    "low_unstructured": "This code defines a React component that displays a stock price line chart using Recharts, now with the X-axis showing only one tick per unique month formatted as short month names.",
                    "high_unstructured": "This code defines a StockChart React component that visualizes historical stock price data as a line chart using the Recharts library. The component expects a data prop containing the company's name, ticker, and an array of date/close price objects. It processes the data to create chart-friendly objects, formats date labels, and renders the chart with axes, legend, and tooltip, omitting dots for a cleaner line. The chart is responsive and displays the company name and ticker above the visualization, returning null if no valid data is provided. The X-axis now only displays one tick per unique month, with each tick formatted as a short month name.",
                    "high_structured": "• Implements a StockChart React component for displaying stock price history\n• Expects a data prop with:\n  ◦ name (company name)\n  ◦ ticker (stock symbol)\n  ◦ data (array of objects with date and close price)\n• Validates input and returns null if data is missing or empty\n• Processes input data:\n  ◦ Maps each item to an object with date and price fields for charting\n  ◦ Includes a helper function to format date strings (not directly used in rendering)\n• Renders a responsive line chart using Recharts:\n  ◦ Displays company name and ticker above the chart\n  ◦ Includes X and Y axes, legend, and tooltip\n  ◦ Plots a monotone line for price, with no dots for data points\n  ◦ X-axis now displays only one tick per unique month, formatted as a short month name\n• Sets chart margins and ensures the chart fits its container"
                },
                "oldSummaryData": {
                    "medium_unstructured": "The code implements a React component that renders a line chart of stock prices using the Recharts library. It takes stock data as a prop, formats it, and displays the company name and ticker above the chart. The chart includes axes, a legend, and a tooltip for interactivity.",
                    "title": "StockChart Component for Displaying Stock Price Data",
                    "medium_structured": "• Defines a StockChart React component that visualizes stock data\n• Accepts a data prop containing company info and price history\n• Renders a line chart with company name and ticker\n  ◦ Uses Recharts components for axes, legend, and tooltip\n• Formats and maps input data for chart compatibility",
                    "low_structured": "• React component renders a stock chart\n• Uses Recharts to display line chart\n• Shows company name and ticker",
                    "low_unstructured": "This code defines a React component that displays a stock price line chart using Recharts.",
                    "high_unstructured": "This code defines a StockChart React component that visualizes historical stock price data as a line chart using the Recharts library. The component expects a data prop containing the company's name, ticker, and an array of date/close price objects. It processes the data to create chart-friendly objects, formats date labels, and renders the chart with axes, legend, and tooltip, omitting dots for a cleaner line. The chart is responsive and displays the company name and ticker above the visualization, returning null if no valid data is provided.",
                    "high_structured": "• Implements a StockChart React component for displaying stock price history\n• Expects a data prop with:\n  ◦ name (company name)\n  ◦ ticker (stock symbol)\n  ◦ data (array of objects with date and close price)\n• Validates input and returns null if data is missing or empty\n• Processes input data:\n  ◦ Maps each item to an object with date and price fields for charting\n  ◦ Includes a helper function to format date strings (not directly used in rendering)\n• Renders a responsive line chart using Recharts:\n  ◦ Displays company name and ticker above the chart\n  ◦ Includes X and Y axes, legend, and tooltip\n  ◦ Plots a monotone line for price, with no dots for data points\n• Sets chart margins and ensures the chart fits its container"
                },
                "editPromptDetailLevel": null,
                "metadata": {
                    "fullPath": "/project/workspace/frontend/src/StockChart.jsx",
                    "id": "5f9b52fa-f5bb-439e-bc3c-a5f567f3aefa",
                    "filename": "StockChart.jsx",
                    "offset": 0,
                    "originalCode": "import React from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  ReferenceLine,\n} from \"recharts\";\n\nconst StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    const d = new Date(date);\n    return d.toLocaleString(\"default\", { month: \"short\", day: \"numeric\" });\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  // Get unique months for ticks\n  const monthTicks = Array.from(\n    new Set(\n      chartData.map((item) => {\n        const d = new Date(item.date);\n        return `${d.getFullYear()}-${d.getMonth()}`;\n      })\n    )\n  ).map((key) => {\n    // Find the first date in chartData matching this month\n    const match = chartData.find((item) => {\n      const d = new Date(item.date);\n      return `${d.getFullYear()}-${d.getMonth()}` === key;\n    });\n    return match ? match.date : null;\n  }).filter(Boolean);\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis\n            dataKey=\"date\"\n            ticks={monthTicks}\n            tickFormatter={(date) => {\n              const d = new Date(date);\n              return d.toLocaleString(\"default\", { month: \"short\" });\n            }}\n          />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;"
                },
                "editPromptStructured": null,
                "summaryMappings": {
                    "medium_unstructured": [
                        {
                            "summaryComponent": "implements a React component",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "renders a line chart of stock prices",
                            "codeSegments": [
                                {
                                    "line": 53,
                                    "code": "<LineChart"
                                },
                                {
                                    "line": 68,
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "using the Recharts library",
                            "codeSegments": [
                                {
                                    "line": 2,
                                    "code": "import {"
                                },
                                {
                                    "line": 11,
                                    "code": "} from \"recharts\";"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "takes stock data as a prop",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "formats it",
                            "codeSegments": [
                                {
                                    "line": 25,
                                    "code": "const chartData = data.data.map((item) => ({"
                                },
                                {
                                    "line": 26,
                                    "code": "date: item.date,"
                                },
                                {
                                    "line": 27,
                                    "code": "price: item.close,"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "displays the company name and ticker above the chart",
                            "codeSegments": [
                                {
                                    "line": 49,
                                    "code": "<h3>"
                                },
                                {
                                    "line": 50,
                                    "code": "{company} ({ticker})"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "The chart includes axes",
                            "codeSegments": [
                                {
                                    "line": 57,
                                    "code": "<XAxis"
                                },
                                {
                                    "line": 65,
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "a legend",
                            "codeSegments": [
                                {
                                    "line": 67,
                                    "code": "<Legend />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "and a tooltip for interactivity",
                            "codeSegments": [
                                {
                                    "line": 66,
                                    "code": "<Tooltip />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "the X-axis is customized to show only one tick per unique month, with month names formatted as short strings",
                            "codeSegments": [
                                {
                                    "line": 31,
                                    "code": "const monthTicks = Array.from("
                                },
                                {
                                    "line": 59,
                                    "code": "ticks={monthTicks}"
                                },
                                {
                                    "line": 60,
                                    "code": "tickFormatter={(date) => {"
                                },
                                {
                                    "line": 62,
                                    "code": "return d.toLocaleString(\"default\", { month: \"short\" });"
                                }
                            ]
                        }
                    ],
                    "medium_structured": [
                        {
                            "summaryComponent": "Defines a StockChart React component that visualizes stock data",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Accepts a data prop containing company info and price history",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Renders a line chart with company name and ticker",
                            "codeSegments": [
                                {
                                    "line": 49,
                                    "code": "<h3>"
                                },
                                {
                                    "line": 50,
                                    "code": "{company} ({ticker})"
                                },
                                {
                                    "line": 53,
                                    "code": "<LineChart"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Uses Recharts components for axes, legend, and tooltip",
                            "codeSegments": [
                                {
                                    "line": 57,
                                    "code": "<XAxis"
                                },
                                {
                                    "line": 65,
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                                },
                                {
                                    "line": 66,
                                    "code": "<Tooltip />"
                                },
                                {
                                    "line": 67,
                                    "code": "<Legend />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Formats and maps input data for chart compatibility",
                            "codeSegments": [
                                {
                                    "line": 25,
                                    "code": "const chartData = data.data.map((item) => ({"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "X-axis is now customized to display a single tick per unique month, formatted as a short month name",
                            "codeSegments": [
                                {
                                    "line": 31,
                                    "code": "const monthTicks = Array.from("
                                },
                                {
                                    "line": 59,
                                    "code": "ticks={monthTicks}"
                                },
                                {
                                    "line": 60,
                                    "code": "tickFormatter={(date) => {"
                                },
                                {
                                    "line": 62,
                                    "code": "return d.toLocaleString(\"default\", { month: \"short\" });"
                                }
                            ]
                        }
                    ],
                    "low_structured": [
                        {
                            "summaryComponent": "React component renders a stock chart",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                },
                                {
                                    "line": 47,
                                    "code": "return ("
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Uses Recharts to display line chart",
                            "codeSegments": [
                                {
                                    "line": 2,
                                    "code": "import {"
                                },
                                {
                                    "line": 3,
                                    "code": "LineChart,"
                                },
                                {
                                    "line": 53,
                                    "code": "<LineChart"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Shows company name and ticker",
                            "codeSegments": [
                                {
                                    "line": 16,
                                    "code": "const company = data.name;"
                                },
                                {
                                    "line": 17,
                                    "code": "const ticker = data.ticker;"
                                },
                                {
                                    "line": 49,
                                    "code": "<h3>"
                                },
                                {
                                    "line": 50,
                                    "code": "{company} ({ticker})"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "X-axis now displays only one tick per unique month, formatted as short month names",
                            "codeSegments": [
                                {
                                    "line": 31,
                                    "code": "const monthTicks = Array.from("
                                },
                                {
                                    "line": 59,
                                    "code": "ticks={monthTicks}"
                                },
                                {
                                    "line": 60,
                                    "code": "tickFormatter={(date) => {"
                                },
                                {
                                    "line": 62,
                                    "code": "return d.toLocaleString(\"default\", { month: \"short\" });"
                                }
                            ]
                        }
                    ],
                    "low_unstructured": [
                        {
                            "summaryComponent": "defines a React component",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "displays a stock price line chart",
                            "codeSegments": [
                                {
                                    "line": 53,
                                    "code": "<LineChart"
                                },
                                {
                                    "line": 68,
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "using Recharts",
                            "codeSegments": [
                                {
                                    "line": 2,
                                    "code": "import {"
                                },
                                {
                                    "line": 11,
                                    "code": "} from \"recharts\";"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "now with the X-axis showing only one tick per unique month",
                            "codeSegments": [
                                {
                                    "line": 31,
                                    "code": "const monthTicks = Array.from("
                                },
                                {
                                    "line": 59,
                                    "code": "ticks={monthTicks}"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "formatted as short month names",
                            "codeSegments": [
                                {
                                    "line": 60,
                                    "code": "tickFormatter={(date) => {"
                                },
                                {
                                    "line": 62,
                                    "code": "return d.toLocaleString(\"default\", { month: \"short\" });"
                                }
                            ]
                        }
                    ],
                    "high_unstructured": [
                        {
                            "summaryComponent": "defines a StockChart React component",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "visualizes historical stock price data as a line chart using the Recharts library",
                            "codeSegments": [
                                {
                                    "line": 2,
                                    "code": "import {"
                                },
                                {
                                    "line": 3,
                                    "code": "LineChart,"
                                },
                                {
                                    "line": 53,
                                    "code": "<LineChart"
                                },
                                {
                                    "line": 68,
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "expects a data prop containing the company's name, ticker, and an array of date/close price objects",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                },
                                {
                                    "line": 16,
                                    "code": "const company = data.name;"
                                },
                                {
                                    "line": 17,
                                    "code": "const ticker = data.ticker;"
                                },
                                {
                                    "line": 25,
                                    "code": "const chartData = data.data.map((item) => ({"
                                },
                                {
                                    "line": 26,
                                    "code": "date: item.date,"
                                },
                                {
                                    "line": 27,
                                    "code": "price: item.close,"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "processes the data to create chart-friendly objects",
                            "codeSegments": [
                                {
                                    "line": 25,
                                    "code": "const chartData = data.data.map((item) => ({"
                                },
                                {
                                    "line": 26,
                                    "code": "date: item.date,"
                                },
                                {
                                    "line": 27,
                                    "code": "price: item.close,"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "formats date labels",
                            "codeSegments": [
                                {
                                    "line": 19,
                                    "code": "const formatDateString = (date) => {"
                                },
                                {
                                    "line": 21,
                                    "code": "return d.toLocaleString(\"default\", { month: \"short\", day: \"numeric\" });"
                                },
                                {
                                    "line": 60,
                                    "code": "tickFormatter={(date) => {"
                                },
                                {
                                    "line": 62,
                                    "code": "return d.toLocaleString(\"default\", { month: \"short\" });"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "renders the chart with axes, legend, and tooltip",
                            "codeSegments": [
                                {
                                    "line": 57,
                                    "code": "<XAxis"
                                },
                                {
                                    "line": 65,
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                                },
                                {
                                    "line": 66,
                                    "code": "<Tooltip />"
                                },
                                {
                                    "line": 67,
                                    "code": "<Legend />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "omitting dots for a cleaner line",
                            "codeSegments": [
                                {
                                    "line": 68,
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "chart is responsive",
                            "codeSegments": [
                                {
                                    "line": 52,
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "displays the company name and ticker above the visualization",
                            "codeSegments": [
                                {
                                    "line": 49,
                                    "code": "<h3>"
                                },
                                {
                                    "line": 50,
                                    "code": "{company} ({ticker})"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "returning null if no valid data is provided",
                            "codeSegments": [
                                {
                                    "line": 14,
                                    "code": "if (!data || !data.data || !data.data.length) return null;"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "X-axis now only displays one tick per unique month",
                            "codeSegments": [
                                {
                                    "line": 31,
                                    "code": "const monthTicks = Array.from("
                                },
                                {
                                    "line": 59,
                                    "code": "ticks={monthTicks}"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "each tick formatted as a short month name",
                            "codeSegments": [
                                {
                                    "line": 60,
                                    "code": "tickFormatter={(date) => {"
                                },
                                {
                                    "line": 62,
                                    "code": "return d.toLocaleString(\"default\", { month: \"short\" });"
                                }
                            ]
                        }
                    ],
                    "high_structured": [
                        {
                            "summaryComponent": "Implements a StockChart React component for displaying stock price history",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Expects a data prop with:",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "name (company name)",
                            "codeSegments": [
                                {
                                    "line": 16,
                                    "code": "const company = data.name;"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "ticker (stock symbol)",
                            "codeSegments": [
                                {
                                    "line": 17,
                                    "code": "const ticker = data.ticker;"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "data (array of objects with date and close price)",
                            "codeSegments": [
                                {
                                    "line": 25,
                                    "code": "const chartData = data.data.map((item) => ({"
                                },
                                {
                                    "line": 26,
                                    "code": "date: item.date,"
                                },
                                {
                                    "line": 27,
                                    "code": "price: item.close,"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Validates input and returns null if data is missing or empty",
                            "codeSegments": [
                                {
                                    "line": 14,
                                    "code": "if (!data || !data.data || !data.data.length) return null;"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Maps each item to an object with date and price fields for charting",
                            "codeSegments": [
                                {
                                    "line": 25,
                                    "code": "const chartData = data.data.map((item) => ({"
                                },
                                {
                                    "line": 26,
                                    "code": "date: item.date,"
                                },
                                {
                                    "line": 27,
                                    "code": "price: item.close,"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Includes a helper function to format date strings (not directly used in rendering)",
                            "codeSegments": [
                                {
                                    "line": 19,
                                    "code": "const formatDateString = (date) => {"
                                },
                                {
                                    "line": 20,
                                    "code": "const d = new Date(date);"
                                },
                                {
                                    "line": 21,
                                    "code": "return d.toLocaleString(\"default\", { month: \"short\", day: \"numeric\" });"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Renders a responsive line chart using Recharts:",
                            "codeSegments": [
                                {
                                    "line": 52,
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                                },
                                {
                                    "line": 53,
                                    "code": "<LineChart"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Displays company name and ticker above the chart",
                            "codeSegments": [
                                {
                                    "line": 49,
                                    "code": "<h3>"
                                },
                                {
                                    "line": 50,
                                    "code": "{company} ({ticker})"
                                }
                            ]
                        }
                    ]
                },
                "selectedStructured": "unstructured",
                "createdAt": 1755994338000,
                "editPromptValue": "",
                "selectedDetailLevel": "medium"
            },
            "section_id": "5f9b52fa-f5bb-439e-bc3c-a5f567f3aefa"
        },
        "source": "frontend",
        "event": "create_new_section",
        "timestamp": "2025-08-23 16:12:18.000",
        "id": "LjqLn4xfhApvgUDanVPy"
    },
    {
        "data": {
            "mapping": [
                {
                    "summaryComponent": "defines a StockChart React component",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "visualizes historical stock price data as a line chart using the Recharts library",
                    "codeSegments": [
                        {
                            "line": 2,
                            "code": "import {"
                        },
                        {
                            "line": 3,
                            "code": "LineChart,"
                        },
                        {
                            "line": 53,
                            "code": "<LineChart"
                        },
                        {
                            "line": 68,
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                        }
                    ]
                },
                {
                    "summaryComponent": "expects a data prop containing the company's name, ticker, and an array of date/close price objects",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        },
                        {
                            "line": 16,
                            "code": "const company = data.name;"
                        },
                        {
                            "line": 17,
                            "code": "const ticker = data.ticker;"
                        },
                        {
                            "line": 25,
                            "code": "const chartData = data.data.map((item) => ({"
                        },
                        {
                            "line": 26,
                            "code": "date: item.date,"
                        },
                        {
                            "line": 27,
                            "code": "price: item.close,"
                        }
                    ]
                },
                {
                    "summaryComponent": "processes the data to create chart-friendly objects",
                    "codeSegments": [
                        {
                            "line": 25,
                            "code": "const chartData = data.data.map((item) => ({"
                        },
                        {
                            "line": 26,
                            "code": "date: item.date,"
                        },
                        {
                            "line": 27,
                            "code": "price: item.close,"
                        }
                    ]
                },
                {
                    "summaryComponent": "formats date labels",
                    "codeSegments": [
                        {
                            "line": 19,
                            "code": "const formatDateString = (date) => {"
                        },
                        {
                            "line": 21,
                            "code": "return d.toLocaleString(\"default\", { month: \"short\", day: \"numeric\" });"
                        },
                        {
                            "line": 60,
                            "code": "tickFormatter={(date) => {"
                        },
                        {
                            "line": 62,
                            "code": "return d.toLocaleString(\"default\", { month: \"short\" });"
                        }
                    ]
                },
                {
                    "summaryComponent": "renders the chart with axes, legend, and tooltip",
                    "codeSegments": [
                        {
                            "line": 57,
                            "code": "<XAxis"
                        },
                        {
                            "line": 65,
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                        },
                        {
                            "line": 66,
                            "code": "<Tooltip />"
                        },
                        {
                            "line": 67,
                            "code": "<Legend />"
                        }
                    ]
                },
                {
                    "summaryComponent": "omitting dots for a cleaner line",
                    "codeSegments": [
                        {
                            "line": 68,
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                        }
                    ]
                },
                {
                    "summaryComponent": "chart is responsive",
                    "codeSegments": [
                        {
                            "line": 52,
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                        }
                    ]
                },
                {
                    "summaryComponent": "displays the company name and ticker above the visualization",
                    "codeSegments": [
                        {
                            "line": 49,
                            "code": "<h3>"
                        },
                        {
                            "line": 50,
                            "code": "{company} ({ticker})"
                        }
                    ]
                },
                {
                    "summaryComponent": "returning null if no valid data is provided",
                    "codeSegments": [
                        {
                            "line": 14,
                            "code": "if (!data || !data.data || !data.data.length) return null;"
                        }
                    ]
                },
                {
                    "summaryComponent": "X-axis now only displays one tick per unique month",
                    "codeSegments": [
                        {
                            "line": 31,
                            "code": "const monthTicks = Array.from("
                        },
                        {
                            "line": 59,
                            "code": "ticks={monthTicks}"
                        }
                    ]
                },
                {
                    "summaryComponent": "each tick formatted as a short month name",
                    "codeSegments": [
                        {
                            "line": 60,
                            "code": "tickFormatter={(date) => {"
                        },
                        {
                            "line": 62,
                            "code": "return d.toLocaleString(\"default\", { month: \"short\" });"
                        }
                    ]
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     const d = new Date(date);\n21:     return d.toLocaleString(\"default\", { month: \"short\", day: \"numeric\" });\n22:   };\n23: \n24:   // Combine labels and values into an array of objects for Recharts\n25:   const chartData = data.data.map((item) => ({\n26:     date: item.date,\n27:     price: item.close,\n28:   }));\n29: \n30:   // Get unique months for ticks\n31:   const monthTicks = Array.from(\n32:     new Set(\n33:       chartData.map((item) => {\n34:         const d = new Date(item.date);\n35:         return `${d.getFullYear()}-${d.getMonth()}`;\n36:       })\n37:     )\n38:   ).map((key) => {\n39:     // Find the first date in chartData matching this month\n40:     const match = chartData.find((item) => {\n41:       const d = new Date(item.date);\n42:       return `${d.getFullYear()}-${d.getMonth()}` === key;\n43:     });\n44:     return match ? match.date : null;\n45:   }).filter(Boolean);\n46: \n47:   return (\n48:     <div style={{ marginTop: \"2rem\" }}>\n49:       <h3>\n50:         {company} ({ticker})\n51:       </h3>\n52:       <ResponsiveContainer width=\"100%\" height={300}>\n53:         <LineChart\n54:           data={chartData}\n55:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n56:         >\n57:           <XAxis\n58:             dataKey=\"date\"\n59:             ticks={monthTicks}\n60:             tickFormatter={(date) => {\n61:               const d = new Date(date);\n62:               return d.toLocaleString(\"default\", { month: \"short\" });\n63:             }}\n64:           />\n65:           <YAxis domain={[\"auto\", \"auto\"]} />\n66:           <Tooltip />\n67:           <Legend />\n68:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n69:         </LineChart>\n70:       </ResponsiveContainer>\n71:     </div>\n72:   );\n73: };\n74: \n75: export default StockChart;",
            "summary": "This code defines a StockChart React component that visualizes historical stock price data as a line chart using the Recharts library. The component expects a data prop containing the company's name, ticker, and an array of date/close price objects. It processes the data to create chart-friendly objects, formats date labels, and renders the chart with axes, legend, and tooltip, omitting dots for a cleaner line. The chart is responsive and displays the company name and ticker above the visualization, returning null if no valid data is provided. The X-axis now only displays one tick per unique month, with each tick formatted as a short month name."
        },
        "source": "backend",
        "event": "map_summary_code",
        "timestamp": "2025-08-23 16:12:18.000",
        "id": "NysYKk1AsdZhGVZvht8W"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 8,
            "section_id": "5f9b52fa-f5bb-439e-bc3c-a5f567f3aefa",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:12:36.000",
        "id": "1J7OQTwNfFGCEj0KFSTr"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 1,
            "section_id": "5f9b52fa-f5bb-439e-bc3c-a5f567f3aefa",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:12:36.000",
        "id": "6GiTowh11333gAEcoSae"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "5f9b52fa-f5bb-439e-bc3c-a5f567f3aefa",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:12:36.000",
        "id": "HdOgIJUxkjeTnPBZQG5A"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "5f9b52fa-f5bb-439e-bc3c-a5f567f3aefa",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:12:36.000",
        "id": "UYVTskFmp6UnbFowvSkO"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "5f9b52fa-f5bb-439e-bc3c-a5f567f3aefa",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:12:36.000",
        "id": "a6T6AAYobYZKBB5Zogsr"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "5f9b52fa-f5bb-439e-bc3c-a5f567f3aefa",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:12:36.000",
        "id": "afkWKbuAnJXQFqcpSHs7"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 5,
            "section_id": "5f9b52fa-f5bb-439e-bc3c-a5f567f3aefa",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:12:36.000",
        "id": "fbw8kYht9cEINUGVcgc0"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 6,
            "section_id": "5f9b52fa-f5bb-439e-bc3c-a5f567f3aefa",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:12:36.000",
        "id": "gzzE2iWlezjnTwOLKsFd"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "5f9b52fa-f5bb-439e-bc3c-a5f567f3aefa",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:12:36.000",
        "id": "pMEfFlKhiLfUxEJoBcFc"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 3,
            "section_id": "5f9b52fa-f5bb-439e-bc3c-a5f567f3aefa",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:12:36.000",
        "id": "spjavP4HWH0ZuyvagYmq"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 0,
            "section_id": "5f9b52fa-f5bb-439e-bc3c-a5f567f3aefa",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:12:36.000",
        "id": "zWqlSU3udk6XW0t0S3Ih"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "5f9b52fa-f5bb-439e-bc3c-a5f567f3aefa",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:12:37.000",
        "id": "5BEP4AH48RotMN2F0gbG"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 9,
            "section_id": "5f9b52fa-f5bb-439e-bc3c-a5f567f3aefa",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:12:37.000",
        "id": "z3mxh1UDdcYf6FYooll4"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "5f9b52fa-f5bb-439e-bc3c-a5f567f3aefa",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:12:40.000",
        "id": "3QCjNzCKhxsQgn9rqQrx"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 9,
            "section_id": "5f9b52fa-f5bb-439e-bc3c-a5f567f3aefa",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:12:41.000",
        "id": "wnSPEIkt09qISdbcv7ll"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 9,
            "section_id": "5f9b52fa-f5bb-439e-bc3c-a5f567f3aefa",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:12:45.000",
        "id": "e7LDUt0P1p0ew2IG4weH"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "5f9b52fa-f5bb-439e-bc3c-a5f567f3aefa",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:12:45.000",
        "id": "mGSxky1Cw4gbFWklF06H"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "5f9b52fa-f5bb-439e-bc3c-a5f567f3aefa",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:12:51.000",
        "id": "bzXdffg4fJQkDWslra6l"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 9,
            "section_id": "5f9b52fa-f5bb-439e-bc3c-a5f567f3aefa",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:12:54.000",
        "id": "iCuTFkqnEnTUX6bmasPJ"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "5f9b52fa-f5bb-439e-bc3c-a5f567f3aefa",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:12:54.000",
        "id": "pHvBoMa31Qm4XCbMLBdA"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 1,
            "section_id": "5f9b52fa-f5bb-439e-bc3c-a5f567f3aefa",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:12:56.000",
        "id": "AIXGF77c8fTsA6inGP7D"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 6,
            "section_id": "5f9b52fa-f5bb-439e-bc3c-a5f567f3aefa",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:12:56.000",
        "id": "F2FUdn6Dga45ZhClh9a7"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "5f9b52fa-f5bb-439e-bc3c-a5f567f3aefa",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:12:56.000",
        "id": "G1zrCVxwMp7vOkrI0rPQ"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 8,
            "section_id": "5f9b52fa-f5bb-439e-bc3c-a5f567f3aefa",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:12:56.000",
        "id": "My6SfUHUtDNdxcKwD6S4"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 0,
            "section_id": "5f9b52fa-f5bb-439e-bc3c-a5f567f3aefa",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:12:56.000",
        "id": "OI43TZoMNn3XO352ilmf"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 5,
            "section_id": "5f9b52fa-f5bb-439e-bc3c-a5f567f3aefa",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:12:56.000",
        "id": "dvIYwWYBnunaDyWYHsB2"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "5f9b52fa-f5bb-439e-bc3c-a5f567f3aefa",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:12:56.000",
        "id": "jMpPqbWQzsUdpYN70kEK"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "5f9b52fa-f5bb-439e-bc3c-a5f567f3aefa",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:12:56.000",
        "id": "nWbEYlqrhOp6c4l9Gly0"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "5f9b52fa-f5bb-439e-bc3c-a5f567f3aefa",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:12:56.000",
        "id": "q1AHZGWSEsGXb3z6BGI4"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "5f9b52fa-f5bb-439e-bc3c-a5f567f3aefa",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:12:57.000",
        "id": "8552NcmDsbMksIrEVhpo"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 3,
            "section_id": "5f9b52fa-f5bb-439e-bc3c-a5f567f3aefa",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:12:57.000",
        "id": "HbHfBiDXJssSx00EbnLz"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "5f9b52fa-f5bb-439e-bc3c-a5f567f3aefa",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:12:57.000",
        "id": "NJmUtH3sf3IxuZXDWy1Z"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 0,
            "section_id": "5f9b52fa-f5bb-439e-bc3c-a5f567f3aefa",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:12:57.000",
        "id": "OqMTpeQX1QOBEdXNTxCR"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 5,
            "section_id": "5f9b52fa-f5bb-439e-bc3c-a5f567f3aefa",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:12:57.000",
        "id": "PiAVu0NlMatLCJmAIdRK"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 1,
            "section_id": "5f9b52fa-f5bb-439e-bc3c-a5f567f3aefa",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:12:57.000",
        "id": "p5la6CxFdHzrP3gTkRYz"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "5f9b52fa-f5bb-439e-bc3c-a5f567f3aefa",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:12:57.000",
        "id": "ufLDUJklTBOtRcl7NH3M"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "5f9b52fa-f5bb-439e-bc3c-a5f567f3aefa",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:12:57.000",
        "id": "vFGZpJdZqAeCjFMVOEuh"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "5f9b52fa-f5bb-439e-bc3c-a5f567f3aefa",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:12:57.000",
        "id": "zD4tGYBVQGMyk7XUiTJL"
    },
    {
        "data": {
            "before_structured": "unstructured",
            "after_detail_level": "medium",
            "after_structured": "structured",
            "section_id": "5f9b52fa-f5bb-439e-bc3c-a5f567f3aefa",
            "before_detail_level": "medium"
        },
        "source": "frontend",
        "event": "change_summary_level",
        "timestamp": "2025-08-23 16:12:58.000",
        "id": "mZhuWHwo30T0NCtbj2Dw"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "5f9b52fa-f5bb-439e-bc3c-a5f567f3aefa",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:12:59.000",
        "id": "8jChLXGdjShKF1L20XLy"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 4,
            "section_id": "5f9b52fa-f5bb-439e-bc3c-a5f567f3aefa",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:12:59.000",
        "id": "C7p4femLf8J8adqbCImn"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 1,
            "section_id": "5f9b52fa-f5bb-439e-bc3c-a5f567f3aefa",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:12:59.000",
        "id": "MvroK51dWY0PvAK1sB4E"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "5f9b52fa-f5bb-439e-bc3c-a5f567f3aefa",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:12:59.000",
        "id": "Pg28oV5ch1OOwLkDxFaW"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 3,
            "section_id": "5f9b52fa-f5bb-439e-bc3c-a5f567f3aefa",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:12:59.000",
        "id": "Q2F79GJAavKMklCjkLHt"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 1,
            "section_id": "5f9b52fa-f5bb-439e-bc3c-a5f567f3aefa",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:12:59.000",
        "id": "QMeb0prhTxJuLZrIJlIW"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 2,
            "section_id": "5f9b52fa-f5bb-439e-bc3c-a5f567f3aefa",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:12:59.000",
        "id": "QZuqgdnQfPnDIT8LSy0R"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "5f9b52fa-f5bb-439e-bc3c-a5f567f3aefa",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:12:59.000",
        "id": "RLmjjXmuk6Pn6Vhy14pW"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "5f9b52fa-f5bb-439e-bc3c-a5f567f3aefa",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:12:59.000",
        "id": "W7c2HzT7v0HT0UAfEm5m"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "5f9b52fa-f5bb-439e-bc3c-a5f567f3aefa",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:12:59.000",
        "id": "Xp5NCLqSwr7Ial9RUVba"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "5f9b52fa-f5bb-439e-bc3c-a5f567f3aefa",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:12:59.000",
        "id": "Xt4EYt82I0O39J2DoiUy"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 0,
            "section_id": "5f9b52fa-f5bb-439e-bc3c-a5f567f3aefa",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:12:59.000",
        "id": "bNXoVwuIQ904FNazheYk"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "5f9b52fa-f5bb-439e-bc3c-a5f567f3aefa",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:12:59.000",
        "id": "hBm0DUfrU4j0cAYeBKjj"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 2,
            "section_id": "5f9b52fa-f5bb-439e-bc3c-a5f567f3aefa",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:12:59.000",
        "id": "muzxQcjmQQM4cJaXfqlP"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "5f9b52fa-f5bb-439e-bc3c-a5f567f3aefa",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:12:59.000",
        "id": "oxdsRPgZfdA94m0nnBHw"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 3,
            "section_id": "5f9b52fa-f5bb-439e-bc3c-a5f567f3aefa",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:12:59.000",
        "id": "vJeRMpVPq8hkEMFSm3WF"
    },
    {
        "data": {},
        "source": "frontend",
        "event": "click_summarize_code",
        "timestamp": "2025-08-23 16:13:40.000",
        "id": "PB7LUKhIAwfQQQJqBClF"
    },
    {
        "data": {
            "selected_code": "app.get(\"/api/stock/:symbol\", async (req, res) => {\n  try {\n    const symbol = req.params.symbol.toUpperCase();\n    const data = await yahooFinance.chart(symbol, {\n      period1: \"2024-01-01\",\n      interval: \"1d\",\n    });\n    const quotes = data.quotes;\n\n    const companyName = data.meta?.shortName || symbol;\n\n    const response = {\n      ticker: symbol,\n      name: companyName,\n      data: quotes.map((q) => ({\n        date: q.date,\n        close: q.close,\n        volume: q.volume,\n      })),\n    };\n\n    console.log(response);\n    res.json(response);\n  } catch (err) {\n    console.error(err);\n    res.status(500).send(\"Error fetching stock data\");\n  }\n});",
            "summary": {
                "medium_unstructured": "This code creates an Express GET endpoint at '/api/stock/:symbol' that retrieves daily stock data for a specified symbol using Yahoo Finance. It processes the data to include the ticker, company name, and an array of date, close price, and volume. The response is sent as JSON, and errors are handled with a 500 status.",
                "title": "Express Route for Fetching Stock Data from Yahoo Finance",
                "medium_structured": "• Defines a GET route at '/api/stock/:symbol'\n• Fetches daily stock chart data from Yahoo Finance starting from 2024-01-01\n• Processes and formats the response to include:\n  ◦ Ticker symbol and company name\n  ◦ An array of objects with date, close price, and volume\n• Sends the formatted data as JSON, handling errors with a 500 response",
                "low_structured": "• Sets up an endpoint to get stock info by symbol\n• Fetches and returns daily stock data",
                "low_unstructured": "This code defines an API endpoint that returns daily stock data for a given symbol.",
                "high_unstructured": "This snippet defines an Express route that handles GET requests to '/api/stock/:symbol', where it extracts the stock symbol from the URL, converts it to uppercase, and queries Yahoo Finance for daily stock chart data starting from January 1, 2024. The code then constructs a response object containing the ticker symbol, company name (using Yahoo's short name if available), and an array of objects with the date, closing price, and volume for each day. The response is logged to the console and sent as JSON to the client. If any error occurs during data fetching or processing, it logs the error and responds with a 500 status and an error message.",
                "high_structured": "• Sets up an Express GET endpoint at '/api/stock/:symbol'\n• Handles incoming requests by:\n  ◦ Extracting and uppercasing the stock symbol from the URL\n  ◦ Fetching daily chart data from Yahoo Finance for the symbol, starting from 2024-01-01\n• Processes the fetched data by:\n  ◦ Extracting the company name from the response metadata, defaulting to the symbol if unavailable\n  ◦ Mapping the quotes to an array of objects, each containing:\n    ▪ date\n    ▪ close price\n    ▪ volume\n• Constructs a response object with ticker, name, and the processed data array\n• Logs the response object to the console\n• Sends the response as JSON to the client\n• Handles errors by logging them and returning a 500 error with a message"
            }
        },
        "source": "backend",
        "event": "summarize_selected_code",
        "timestamp": "2025-08-23 16:13:45.000",
        "id": "OfgsqrMyHZv9rWPdqt1O"
    },
    {
        "data": {
            "mapping": [
                {
                    "summaryComponent": "defines an API endpoint",
                    "codeSegments": [
                        {
                            "line": 15,
                            "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "returns daily stock data",
                    "codeSegments": [
                        {
                            "line": 20,
                            "code": "interval: \"1d\","
                        },
                        {
                            "line": 37,
                            "code": "res.json(response);"
                        }
                    ]
                },
                {
                    "summaryComponent": "for a given symbol",
                    "codeSegments": [
                        {
                            "line": 17,
                            "code": "const symbol = req.params.symbol.toUpperCase();"
                        }
                    ]
                }
            ],
            "code": "15: app.get(\"/api/stock/:symbol\", async (req, res) => {\n16:   try {\n17:     const symbol = req.params.symbol.toUpperCase();\n18:     const data = await yahooFinance.chart(symbol, {\n19:       period1: \"2024-01-01\",\n20:       interval: \"1d\",\n21:     });\n22:     const quotes = data.quotes;\n23: \n24:     const companyName = data.meta?.shortName || symbol;\n25: \n26:     const response = {\n27:       ticker: symbol,\n28:       name: companyName,\n29:       data: quotes.map((q) => ({\n30:         date: q.date,\n31:         close: q.close,\n32:         volume: q.volume,\n33:       })),\n34:     };\n35: \n36:     console.log(response);\n37:     res.json(response);\n38:   } catch (err) {\n39:     console.error(err);\n40:     res.status(500).send(\"Error fetching stock data\");\n41:   }\n42: });",
            "summary": "This code defines an API endpoint that returns daily stock data for a given symbol."
        },
        "source": "backend",
        "event": "map_summary_code",
        "timestamp": "2025-08-23 16:13:46.000",
        "id": "2wzZHzi9TXXdXQqupUY8"
    },
    {
        "data": {
            "mapping": [
                {
                    "summaryComponent": "Sets up an endpoint to get stock info by symbol",
                    "codeSegments": [
                        {
                            "line": 15,
                            "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                        },
                        {
                            "line": 17,
                            "code": "const symbol = req.params.symbol.toUpperCase();"
                        }
                    ]
                },
                {
                    "summaryComponent": "Fetches and returns daily stock data",
                    "codeSegments": [
                        {
                            "line": 18,
                            "code": "const data = await yahooFinance.chart(symbol, {"
                        },
                        {
                            "line": 19,
                            "code": "period1: \"2024-01-01\","
                        },
                        {
                            "line": 20,
                            "code": "interval: \"1d\","
                        },
                        {
                            "line": 37,
                            "code": "res.json(response);"
                        }
                    ]
                }
            ],
            "code": "15: app.get(\"/api/stock/:symbol\", async (req, res) => {\n16:   try {\n17:     const symbol = req.params.symbol.toUpperCase();\n18:     const data = await yahooFinance.chart(symbol, {\n19:       period1: \"2024-01-01\",\n20:       interval: \"1d\",\n21:     });\n22:     const quotes = data.quotes;\n23: \n24:     const companyName = data.meta?.shortName || symbol;\n25: \n26:     const response = {\n27:       ticker: symbol,\n28:       name: companyName,\n29:       data: quotes.map((q) => ({\n30:         date: q.date,\n31:         close: q.close,\n32:         volume: q.volume,\n33:       })),\n34:     };\n35: \n36:     console.log(response);\n37:     res.json(response);\n38:   } catch (err) {\n39:     console.error(err);\n40:     res.status(500).send(\"Error fetching stock data\");\n41:   }\n42: });",
            "summary": "• Sets up an endpoint to get stock info by symbol\n• Fetches and returns daily stock data"
        },
        "source": "backend",
        "event": "map_summary_code",
        "timestamp": "2025-08-23 16:13:46.000",
        "id": "LfNH2o4NbBfEaab7EbMi"
    },
    {
        "data": {
            "mapping": [
                {
                    "summaryComponent": "Defines a GET route at '/api/stock/:symbol'",
                    "codeSegments": [
                        {
                            "line": 15,
                            "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "Fetches daily stock chart data from Yahoo Finance starting from 2024-01-01",
                    "codeSegments": [
                        {
                            "line": 18,
                            "code": "const data = await yahooFinance.chart(symbol, {"
                        },
                        {
                            "line": 19,
                            "code": "period1: \"2024-01-01\","
                        },
                        {
                            "line": 20,
                            "code": "interval: \"1d\","
                        }
                    ]
                },
                {
                    "summaryComponent": "Processes and formats the response to include:",
                    "codeSegments": [
                        {
                            "line": 26,
                            "code": "const response = {"
                        }
                    ]
                },
                {
                    "summaryComponent": "Ticker symbol and company name",
                    "codeSegments": [
                        {
                            "line": 27,
                            "code": "ticker: symbol,"
                        },
                        {
                            "line": 28,
                            "code": "name: companyName,"
                        }
                    ]
                },
                {
                    "summaryComponent": "An array of objects with date, close price, and volume",
                    "codeSegments": [
                        {
                            "line": 29,
                            "code": "data: quotes.map((q) => ({"
                        },
                        {
                            "line": 30,
                            "code": "date: q.date,"
                        },
                        {
                            "line": 31,
                            "code": "close: q.close,"
                        },
                        {
                            "line": 32,
                            "code": "volume: q.volume,"
                        }
                    ]
                },
                {
                    "summaryComponent": "Sends the formatted data as JSON, handling errors with a 500 response",
                    "codeSegments": [
                        {
                            "line": 37,
                            "code": "res.json(response);"
                        },
                        {
                            "line": 40,
                            "code": "res.status(500).send(\"Error fetching stock data\");"
                        }
                    ]
                }
            ],
            "code": "15: app.get(\"/api/stock/:symbol\", async (req, res) => {\n16:   try {\n17:     const symbol = req.params.symbol.toUpperCase();\n18:     const data = await yahooFinance.chart(symbol, {\n19:       period1: \"2024-01-01\",\n20:       interval: \"1d\",\n21:     });\n22:     const quotes = data.quotes;\n23: \n24:     const companyName = data.meta?.shortName || symbol;\n25: \n26:     const response = {\n27:       ticker: symbol,\n28:       name: companyName,\n29:       data: quotes.map((q) => ({\n30:         date: q.date,\n31:         close: q.close,\n32:         volume: q.volume,\n33:       })),\n34:     };\n35: \n36:     console.log(response);\n37:     res.json(response);\n38:   } catch (err) {\n39:     console.error(err);\n40:     res.status(500).send(\"Error fetching stock data\");\n41:   }\n42: });",
            "summary": "• Defines a GET route at '/api/stock/:symbol'\n• Fetches daily stock chart data from Yahoo Finance starting from 2024-01-01\n• Processes and formats the response to include:\n  ◦ Ticker symbol and company name\n  ◦ An array of objects with date, close price, and volume\n• Sends the formatted data as JSON, handling errors with a 500 response"
        },
        "source": "backend",
        "event": "map_summary_code",
        "timestamp": "2025-08-23 16:13:47.000",
        "id": "ndcFkWV6uWC7TJ05SDrW"
    },
    {
        "data": {
            "mapping": [
                {
                    "summaryComponent": "creates an Express GET endpoint at '/api/stock/:symbol'",
                    "codeSegments": [
                        {
                            "line": 15,
                            "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "retrieves daily stock data for a specified symbol using Yahoo Finance",
                    "codeSegments": [
                        {
                            "line": 17,
                            "code": "const symbol = req.params.symbol.toUpperCase();"
                        },
                        {
                            "line": 18,
                            "code": "const data = await yahooFinance.chart(symbol, {"
                        },
                        {
                            "line": 20,
                            "code": "interval: \"1d\","
                        }
                    ]
                },
                {
                    "summaryComponent": "processes the data to include the ticker",
                    "codeSegments": [
                        {
                            "line": 27,
                            "code": "ticker: symbol,"
                        }
                    ]
                },
                {
                    "summaryComponent": "company name",
                    "codeSegments": [
                        {
                            "line": 24,
                            "code": "const companyName = data.meta?.shortName || symbol;"
                        },
                        {
                            "line": 28,
                            "code": "name: companyName,"
                        }
                    ]
                },
                {
                    "summaryComponent": "an array of date, close price, and volume",
                    "codeSegments": [
                        {
                            "line": 29,
                            "code": "data: quotes.map((q) => ({"
                        },
                        {
                            "line": 30,
                            "code": "date: q.date,"
                        },
                        {
                            "line": 31,
                            "code": "close: q.close,"
                        },
                        {
                            "line": 32,
                            "code": "volume: q.volume,"
                        }
                    ]
                },
                {
                    "summaryComponent": "The response is sent as JSON",
                    "codeSegments": [
                        {
                            "line": 37,
                            "code": "res.json(response);"
                        }
                    ]
                },
                {
                    "summaryComponent": "errors are handled with a 500 status",
                    "codeSegments": [
                        {
                            "line": 40,
                            "code": "res.status(500).send(\"Error fetching stock data\");"
                        }
                    ]
                }
            ],
            "code": "15: app.get(\"/api/stock/:symbol\", async (req, res) => {\n16:   try {\n17:     const symbol = req.params.symbol.toUpperCase();\n18:     const data = await yahooFinance.chart(symbol, {\n19:       period1: \"2024-01-01\",\n20:       interval: \"1d\",\n21:     });\n22:     const quotes = data.quotes;\n23: \n24:     const companyName = data.meta?.shortName || symbol;\n25: \n26:     const response = {\n27:       ticker: symbol,\n28:       name: companyName,\n29:       data: quotes.map((q) => ({\n30:         date: q.date,\n31:         close: q.close,\n32:         volume: q.volume,\n33:       })),\n34:     };\n35: \n36:     console.log(response);\n37:     res.json(response);\n38:   } catch (err) {\n39:     console.error(err);\n40:     res.status(500).send(\"Error fetching stock data\");\n41:   }\n42: });",
            "summary": "This code creates an Express GET endpoint at '/api/stock/:symbol' that retrieves daily stock data for a specified symbol using Yahoo Finance. It processes the data to include the ticker, company name, and an array of date, close price, and volume. The response is sent as JSON, and errors are handled with a 500 status."
        },
        "source": "backend",
        "event": "map_summary_code",
        "timestamp": "2025-08-23 16:13:48.000",
        "id": "DKOXkMGTKvZZUkODkknZ"
    },
    {
        "data": {
            "mapping": [
                {
                    "summaryComponent": "Sets up an Express GET endpoint at '/api/stock/:symbol'",
                    "codeSegments": [
                        {
                            "line": 15,
                            "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "Extracting and uppercasing the stock symbol from the URL",
                    "codeSegments": [
                        {
                            "line": 17,
                            "code": "const symbol = req.params.symbol.toUpperCase();"
                        }
                    ]
                },
                {
                    "summaryComponent": "Fetching daily chart data from Yahoo Finance for the symbol, starting from 2024-01-01",
                    "codeSegments": [
                        {
                            "line": 18,
                            "code": "const data = await yahooFinance.chart(symbol, {"
                        },
                        {
                            "line": 19,
                            "code": "period1: \"2024-01-01\","
                        },
                        {
                            "line": 20,
                            "code": "interval: \"1d\","
                        }
                    ]
                },
                {
                    "summaryComponent": "Extracting the company name from the response metadata, defaulting to the symbol if unavailable",
                    "codeSegments": [
                        {
                            "line": 24,
                            "code": "const companyName = data.meta?.shortName || symbol;"
                        }
                    ]
                },
                {
                    "summaryComponent": "Mapping the quotes to an array of objects, each containing:",
                    "codeSegments": [
                        {
                            "line": 29,
                            "code": "data: quotes.map((q) => ({"
                        }
                    ]
                },
                {
                    "summaryComponent": "date",
                    "codeSegments": [
                        {
                            "line": 30,
                            "code": "date: q.date,"
                        }
                    ]
                },
                {
                    "summaryComponent": "close price",
                    "codeSegments": [
                        {
                            "line": 31,
                            "code": "close: q.close,"
                        }
                    ]
                },
                {
                    "summaryComponent": "volume",
                    "codeSegments": [
                        {
                            "line": 32,
                            "code": "volume: q.volume,"
                        }
                    ]
                },
                {
                    "summaryComponent": "Constructs a response object with ticker, name, and the processed data array",
                    "codeSegments": [
                        {
                            "line": 26,
                            "code": "const response = {"
                        },
                        {
                            "line": 27,
                            "code": "ticker: symbol,"
                        },
                        {
                            "line": 28,
                            "code": "name: companyName,"
                        },
                        {
                            "line": 29,
                            "code": "data: quotes.map((q) => ({"
                        }
                    ]
                },
                {
                    "summaryComponent": "Logs the response object to the console",
                    "codeSegments": [
                        {
                            "line": 36,
                            "code": "console.log(response);"
                        }
                    ]
                },
                {
                    "summaryComponent": "Sends the response as JSON to the client",
                    "codeSegments": [
                        {
                            "line": 37,
                            "code": "res.json(response);"
                        }
                    ]
                },
                {
                    "summaryComponent": "Handles errors by logging them and returning a 500 error with a message",
                    "codeSegments": [
                        {
                            "line": 39,
                            "code": "console.error(err);"
                        },
                        {
                            "line": 40,
                            "code": "res.status(500).send(\"Error fetching stock data\");"
                        }
                    ]
                }
            ],
            "code": "15: app.get(\"/api/stock/:symbol\", async (req, res) => {\n16:   try {\n17:     const symbol = req.params.symbol.toUpperCase();\n18:     const data = await yahooFinance.chart(symbol, {\n19:       period1: \"2024-01-01\",\n20:       interval: \"1d\",\n21:     });\n22:     const quotes = data.quotes;\n23: \n24:     const companyName = data.meta?.shortName || symbol;\n25: \n26:     const response = {\n27:       ticker: symbol,\n28:       name: companyName,\n29:       data: quotes.map((q) => ({\n30:         date: q.date,\n31:         close: q.close,\n32:         volume: q.volume,\n33:       })),\n34:     };\n35: \n36:     console.log(response);\n37:     res.json(response);\n38:   } catch (err) {\n39:     console.error(err);\n40:     res.status(500).send(\"Error fetching stock data\");\n41:   }\n42: });",
            "summary": "• Sets up an Express GET endpoint at '/api/stock/:symbol'\n• Handles incoming requests by:\n  ◦ Extracting and uppercasing the stock symbol from the URL\n  ◦ Fetching daily chart data from Yahoo Finance for the symbol, starting from 2024-01-01\n• Processes the fetched data by:\n  ◦ Extracting the company name from the response metadata, defaulting to the symbol if unavailable\n  ◦ Mapping the quotes to an array of objects, each containing:\n    ▪ date\n    ▪ close price\n    ▪ volume\n• Constructs a response object with ticker, name, and the processed data array\n• Logs the response object to the console\n• Sends the response as JSON to the client\n• Handles errors by logging them and returning a 500 error with a message"
        },
        "source": "backend",
        "event": "map_summary_code",
        "timestamp": "2025-08-23 16:13:49.000",
        "id": "0U0RYAGmmSXvtEtJdMEG"
    },
    {
        "data": {
            "after_section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "before_section_id": "5f9b52fa-f5bb-439e-bc3c-a5f567f3aefa"
        },
        "source": "frontend",
        "event": "autotransit_section",
        "timestamp": "2025-08-23 16:13:49.000",
        "id": "9zphvIhHzQ8kJx6vP6T2"
    },
    {
        "data": {
            "section_data": {
                "lines": [
                    15,
                    42
                ],
                "title": "Express Route for Fetching Stock Data from Yahoo Finance",
                "summaryData": {
                    "medium_unstructured": "This code creates an Express GET endpoint at '/api/stock/:symbol' that retrieves daily stock data for a specified symbol using Yahoo Finance. It processes the data to include the ticker, company name, and an array of date, close price, and volume. The response is sent as JSON, and errors are handled with a 500 status.",
                    "title": "Express Route for Fetching Stock Data from Yahoo Finance",
                    "medium_structured": "• Defines a GET route at '/api/stock/:symbol'\n• Fetches daily stock chart data from Yahoo Finance starting from 2024-01-01\n• Processes and formats the response to include:\n  ◦ Ticker symbol and company name\n  ◦ An array of objects with date, close price, and volume\n• Sends the formatted data as JSON, handling errors with a 500 response",
                    "low_structured": "• Sets up an endpoint to get stock info by symbol\n• Fetches and returns daily stock data",
                    "low_unstructured": "This code defines an API endpoint that returns daily stock data for a given symbol.",
                    "high_unstructured": "This snippet defines an Express route that handles GET requests to '/api/stock/:symbol', where it extracts the stock symbol from the URL, converts it to uppercase, and queries Yahoo Finance for daily stock chart data starting from January 1, 2024. The code then constructs a response object containing the ticker symbol, company name (using Yahoo's short name if available), and an array of objects with the date, closing price, and volume for each day. The response is logged to the console and sent as JSON to the client. If any error occurs during data fetching or processing, it logs the error and responds with a 500 status and an error message.",
                    "high_structured": "• Sets up an Express GET endpoint at '/api/stock/:symbol'\n• Handles incoming requests by:\n  ◦ Extracting and uppercasing the stock symbol from the URL\n  ◦ Fetching daily chart data from Yahoo Finance for the symbol, starting from 2024-01-01\n• Processes the fetched data by:\n  ◦ Extracting the company name from the response metadata, defaulting to the symbol if unavailable\n  ◦ Mapping the quotes to an array of objects, each containing:\n    ▪ date\n    ▪ close price\n    ▪ volume\n• Constructs a response object with ticker, name, and the processed data array\n• Logs the response object to the console\n• Sends the response as JSON to the client\n• Handles errors by logging them and returning a 500 error with a message"
                },
                "editPromptDetailLevel": null,
                "summaryMappings": {
                    "medium_unstructured": [
                        {
                            "summaryComponent": "creates an Express GET endpoint at '/api/stock/:symbol'",
                            "codeSegments": [
                                {
                                    "line": 15,
                                    "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "retrieves daily stock data for a specified symbol using Yahoo Finance",
                            "codeSegments": [
                                {
                                    "line": 17,
                                    "code": "const symbol = req.params.symbol.toUpperCase();"
                                },
                                {
                                    "line": 18,
                                    "code": "const data = await yahooFinance.chart(symbol, {"
                                },
                                {
                                    "line": 20,
                                    "code": "interval: \"1d\","
                                }
                            ]
                        },
                        {
                            "summaryComponent": "processes the data to include the ticker",
                            "codeSegments": [
                                {
                                    "line": 27,
                                    "code": "ticker: symbol,"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "company name",
                            "codeSegments": [
                                {
                                    "line": 24,
                                    "code": "const companyName = data.meta?.shortName || symbol;"
                                },
                                {
                                    "line": 28,
                                    "code": "name: companyName,"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "an array of date, close price, and volume",
                            "codeSegments": [
                                {
                                    "line": 29,
                                    "code": "data: quotes.map((q) => ({"
                                },
                                {
                                    "line": 30,
                                    "code": "date: q.date,"
                                },
                                {
                                    "line": 31,
                                    "code": "close: q.close,"
                                },
                                {
                                    "line": 32,
                                    "code": "volume: q.volume,"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "The response is sent as JSON",
                            "codeSegments": [
                                {
                                    "line": 37,
                                    "code": "res.json(response);"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "errors are handled with a 500 status",
                            "codeSegments": [
                                {
                                    "line": 40,
                                    "code": "res.status(500).send(\"Error fetching stock data\");"
                                }
                            ]
                        }
                    ],
                    "medium_structured": [
                        {
                            "summaryComponent": "Defines a GET route at '/api/stock/:symbol'",
                            "codeSegments": [
                                {
                                    "line": 15,
                                    "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Fetches daily stock chart data from Yahoo Finance starting from 2024-01-01",
                            "codeSegments": [
                                {
                                    "line": 18,
                                    "code": "const data = await yahooFinance.chart(symbol, {"
                                },
                                {
                                    "line": 19,
                                    "code": "period1: \"2024-01-01\","
                                },
                                {
                                    "line": 20,
                                    "code": "interval: \"1d\","
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Processes and formats the response to include:",
                            "codeSegments": [
                                {
                                    "line": 26,
                                    "code": "const response = {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Ticker symbol and company name",
                            "codeSegments": [
                                {
                                    "line": 27,
                                    "code": "ticker: symbol,"
                                },
                                {
                                    "line": 28,
                                    "code": "name: companyName,"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "An array of objects with date, close price, and volume",
                            "codeSegments": [
                                {
                                    "line": 29,
                                    "code": "data: quotes.map((q) => ({"
                                },
                                {
                                    "line": 30,
                                    "code": "date: q.date,"
                                },
                                {
                                    "line": 31,
                                    "code": "close: q.close,"
                                },
                                {
                                    "line": 32,
                                    "code": "volume: q.volume,"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Sends the formatted data as JSON, handling errors with a 500 response",
                            "codeSegments": [
                                {
                                    "line": 37,
                                    "code": "res.json(response);"
                                },
                                {
                                    "line": 40,
                                    "code": "res.status(500).send(\"Error fetching stock data\");"
                                }
                            ]
                        }
                    ],
                    "low_structured": [
                        {
                            "summaryComponent": "Sets up an endpoint to get stock info by symbol",
                            "codeSegments": [
                                {
                                    "line": 15,
                                    "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                                },
                                {
                                    "line": 17,
                                    "code": "const symbol = req.params.symbol.toUpperCase();"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Fetches and returns daily stock data",
                            "codeSegments": [
                                {
                                    "line": 18,
                                    "code": "const data = await yahooFinance.chart(symbol, {"
                                },
                                {
                                    "line": 19,
                                    "code": "period1: \"2024-01-01\","
                                },
                                {
                                    "line": 20,
                                    "code": "interval: \"1d\","
                                },
                                {
                                    "line": 37,
                                    "code": "res.json(response);"
                                }
                            ]
                        }
                    ],
                    "low_unstructured": [
                        {
                            "summaryComponent": "defines an API endpoint",
                            "codeSegments": [
                                {
                                    "line": 15,
                                    "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "returns daily stock data",
                            "codeSegments": [
                                {
                                    "line": 20,
                                    "code": "interval: \"1d\","
                                },
                                {
                                    "line": 37,
                                    "code": "res.json(response);"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "for a given symbol",
                            "codeSegments": [
                                {
                                    "line": 17,
                                    "code": "const symbol = req.params.symbol.toUpperCase();"
                                }
                            ]
                        }
                    ],
                    "high_unstructured": [
                        {
                            "summaryComponent": "defines an Express route that handles GET requests to '/api/stock/:symbol'",
                            "codeSegments": [
                                {
                                    "line": 15,
                                    "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "extracts the stock symbol from the URL",
                            "codeSegments": [
                                {
                                    "line": 17,
                                    "code": "const symbol = req.params.symbol.toUpperCase();"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "converts it to uppercase",
                            "codeSegments": [
                                {
                                    "line": 17,
                                    "code": "toUpperCase()"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "queries Yahoo Finance for daily stock chart data starting from January 1, 2024",
                            "codeSegments": [
                                {
                                    "line": 18,
                                    "code": "const data = await yahooFinance.chart(symbol, {"
                                },
                                {
                                    "line": 19,
                                    "code": "period1: \"2024-01-01\","
                                },
                                {
                                    "line": 20,
                                    "code": "interval: \"1d\","
                                }
                            ]
                        },
                        {
                            "summaryComponent": "constructs a response object containing the ticker symbol",
                            "codeSegments": [
                                {
                                    "line": 26,
                                    "code": "const response = {"
                                },
                                {
                                    "line": 27,
                                    "code": "ticker: symbol,"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "company name (using Yahoo's short name if available)",
                            "codeSegments": [
                                {
                                    "line": 24,
                                    "code": "const companyName = data.meta?.shortName || symbol;"
                                },
                                {
                                    "line": 28,
                                    "code": "name: companyName,"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "an array of objects with the date, closing price, and volume for each day",
                            "codeSegments": [
                                {
                                    "line": 29,
                                    "code": "data: quotes.map((q) => ({"
                                },
                                {
                                    "line": 30,
                                    "code": "date: q.date,"
                                },
                                {
                                    "line": 31,
                                    "code": "close: q.close,"
                                },
                                {
                                    "line": 32,
                                    "code": "volume: q.volume,"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "The response is logged to the console",
                            "codeSegments": [
                                {
                                    "line": 36,
                                    "code": "console.log(response);"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "sent as JSON to the client",
                            "codeSegments": [
                                {
                                    "line": 37,
                                    "code": "res.json(response);"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "If any error occurs during data fetching or processing, it logs the error and responds with a 500 status and an error message.",
                            "codeSegments": [
                                {
                                    "line": 38,
                                    "code": "catch (err) {"
                                },
                                {
                                    "line": 39,
                                    "code": "console.error(err);"
                                },
                                {
                                    "line": 40,
                                    "code": "res.status(500).send(\"Error fetching stock data\");"
                                }
                            ]
                        }
                    ],
                    "high_structured": [
                        {
                            "summaryComponent": "Sets up an Express GET endpoint at '/api/stock/:symbol'",
                            "codeSegments": [
                                {
                                    "line": 15,
                                    "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Extracting and uppercasing the stock symbol from the URL",
                            "codeSegments": [
                                {
                                    "line": 17,
                                    "code": "const symbol = req.params.symbol.toUpperCase();"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Fetching daily chart data from Yahoo Finance for the symbol, starting from 2024-01-01",
                            "codeSegments": [
                                {
                                    "line": 18,
                                    "code": "const data = await yahooFinance.chart(symbol, {"
                                },
                                {
                                    "line": 19,
                                    "code": "period1: \"2024-01-01\","
                                },
                                {
                                    "line": 20,
                                    "code": "interval: \"1d\","
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Extracting the company name from the response metadata, defaulting to the symbol if unavailable",
                            "codeSegments": [
                                {
                                    "line": 24,
                                    "code": "const companyName = data.meta?.shortName || symbol;"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Mapping the quotes to an array of objects, each containing:",
                            "codeSegments": [
                                {
                                    "line": 29,
                                    "code": "data: quotes.map((q) => ({"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "date",
                            "codeSegments": [
                                {
                                    "line": 30,
                                    "code": "date: q.date,"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "close price",
                            "codeSegments": [
                                {
                                    "line": 31,
                                    "code": "close: q.close,"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "volume",
                            "codeSegments": [
                                {
                                    "line": 32,
                                    "code": "volume: q.volume,"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Constructs a response object with ticker, name, and the processed data array",
                            "codeSegments": [
                                {
                                    "line": 26,
                                    "code": "const response = {"
                                },
                                {
                                    "line": 27,
                                    "code": "ticker: symbol,"
                                },
                                {
                                    "line": 28,
                                    "code": "name: companyName,"
                                },
                                {
                                    "line": 29,
                                    "code": "data: quotes.map((q) => ({"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Logs the response object to the console",
                            "codeSegments": [
                                {
                                    "line": 36,
                                    "code": "console.log(response);"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Sends the response as JSON to the client",
                            "codeSegments": [
                                {
                                    "line": 37,
                                    "code": "res.json(response);"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Handles errors by logging them and returning a 500 error with a message",
                            "codeSegments": [
                                {
                                    "line": 39,
                                    "code": "console.error(err);"
                                },
                                {
                                    "line": 40,
                                    "code": "res.status(500).send(\"Error fetching stock data\");"
                                }
                            ]
                        }
                    ]
                },
                "metadata": {
                    "fullPath": "/project/workspace/server/index.js",
                    "id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
                    "filename": "index.js",
                    "offset": 304,
                    "originalCode": "app.get(\"/api/stock/:symbol\", async (req, res) => {\n  try {\n    const symbol = req.params.symbol.toUpperCase();\n    const data = await yahooFinance.chart(symbol, {\n      period1: \"2024-01-01\",\n      interval: \"1d\",\n    });\n    const quotes = data.quotes;\n\n    const companyName = data.meta?.shortName || symbol;\n\n    const response = {\n      ticker: symbol,\n      name: companyName,\n      data: quotes.map((q) => ({\n        date: q.date,\n        close: q.close,\n        volume: q.volume,\n      })),\n    };\n\n    console.log(response);\n    res.json(response);\n  } catch (err) {\n    console.error(err);\n    res.status(500).send(\"Error fetching stock data\");\n  }\n});"
                },
                "editPromptStructured": null,
                "selectedStructured": "unstructured",
                "createdAt": 1755994429000,
                "editPromptValue": "",
                "selectedDetailLevel": "medium"
            },
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12"
        },
        "source": "frontend",
        "event": "create_new_section",
        "timestamp": "2025-08-23 16:13:49.000",
        "id": "BDPwyVOUQ6fb5JHlLtSU"
    },
    {
        "data": {
            "mapping": [
                {
                    "summaryComponent": "defines an Express route that handles GET requests to '/api/stock/:symbol'",
                    "codeSegments": [
                        {
                            "line": 15,
                            "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "extracts the stock symbol from the URL",
                    "codeSegments": [
                        {
                            "line": 17,
                            "code": "const symbol = req.params.symbol.toUpperCase();"
                        }
                    ]
                },
                {
                    "summaryComponent": "converts it to uppercase",
                    "codeSegments": [
                        {
                            "line": 17,
                            "code": "toUpperCase()"
                        }
                    ]
                },
                {
                    "summaryComponent": "queries Yahoo Finance for daily stock chart data starting from January 1, 2024",
                    "codeSegments": [
                        {
                            "line": 18,
                            "code": "const data = await yahooFinance.chart(symbol, {"
                        },
                        {
                            "line": 19,
                            "code": "period1: \"2024-01-01\","
                        },
                        {
                            "line": 20,
                            "code": "interval: \"1d\","
                        }
                    ]
                },
                {
                    "summaryComponent": "constructs a response object containing the ticker symbol",
                    "codeSegments": [
                        {
                            "line": 26,
                            "code": "const response = {"
                        },
                        {
                            "line": 27,
                            "code": "ticker: symbol,"
                        }
                    ]
                },
                {
                    "summaryComponent": "company name (using Yahoo's short name if available)",
                    "codeSegments": [
                        {
                            "line": 24,
                            "code": "const companyName = data.meta?.shortName || symbol;"
                        },
                        {
                            "line": 28,
                            "code": "name: companyName,"
                        }
                    ]
                },
                {
                    "summaryComponent": "an array of objects with the date, closing price, and volume for each day",
                    "codeSegments": [
                        {
                            "line": 29,
                            "code": "data: quotes.map((q) => ({"
                        },
                        {
                            "line": 30,
                            "code": "date: q.date,"
                        },
                        {
                            "line": 31,
                            "code": "close: q.close,"
                        },
                        {
                            "line": 32,
                            "code": "volume: q.volume,"
                        }
                    ]
                },
                {
                    "summaryComponent": "The response is logged to the console",
                    "codeSegments": [
                        {
                            "line": 36,
                            "code": "console.log(response);"
                        }
                    ]
                },
                {
                    "summaryComponent": "sent as JSON to the client",
                    "codeSegments": [
                        {
                            "line": 37,
                            "code": "res.json(response);"
                        }
                    ]
                },
                {
                    "summaryComponent": "If any error occurs during data fetching or processing, it logs the error and responds with a 500 status and an error message.",
                    "codeSegments": [
                        {
                            "line": 38,
                            "code": "catch (err) {"
                        },
                        {
                            "line": 39,
                            "code": "console.error(err);"
                        },
                        {
                            "line": 40,
                            "code": "res.status(500).send(\"Error fetching stock data\");"
                        }
                    ]
                }
            ],
            "code": "15: app.get(\"/api/stock/:symbol\", async (req, res) => {\n16:   try {\n17:     const symbol = req.params.symbol.toUpperCase();\n18:     const data = await yahooFinance.chart(symbol, {\n19:       period1: \"2024-01-01\",\n20:       interval: \"1d\",\n21:     });\n22:     const quotes = data.quotes;\n23: \n24:     const companyName = data.meta?.shortName || symbol;\n25: \n26:     const response = {\n27:       ticker: symbol,\n28:       name: companyName,\n29:       data: quotes.map((q) => ({\n30:         date: q.date,\n31:         close: q.close,\n32:         volume: q.volume,\n33:       })),\n34:     };\n35: \n36:     console.log(response);\n37:     res.json(response);\n38:   } catch (err) {\n39:     console.error(err);\n40:     res.status(500).send(\"Error fetching stock data\");\n41:   }\n42: });",
            "summary": "This snippet defines an Express route that handles GET requests to '/api/stock/:symbol', where it extracts the stock symbol from the URL, converts it to uppercase, and queries Yahoo Finance for daily stock chart data starting from January 1, 2024. The code then constructs a response object containing the ticker symbol, company name (using Yahoo's short name if available), and an array of objects with the date, closing price, and volume for each day. The response is logged to the console and sent as JSON to the client. If any error occurs during data fetching or processing, it logs the error and responds with a 500 status and an error message."
        },
        "source": "backend",
        "event": "map_summary_code",
        "timestamp": "2025-08-23 16:13:49.000",
        "id": "Ja826cIsvtl6rFJm4WDZ"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 0,
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:13:52.000",
        "id": "OzlV1c1UJLoPjflQg2Qa"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:13:52.000",
        "id": "PlJaF9QMbt41xAlWK2qM"
    },
    {
        "data": {
            "before_structured": "unstructured",
            "after_detail_level": "medium",
            "after_structured": "structured",
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "before_detail_level": "medium"
        },
        "source": "frontend",
        "event": "change_summary_level",
        "timestamp": "2025-08-23 16:13:52.000",
        "id": "VcxylWWdoDXs3cgglGiG"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 1,
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:13:52.000",
        "id": "pW1P304G1uPB0RUg42Rc"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:13:53.000",
        "id": "2lY7o7VE9l6OMgQYzT0i"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 1,
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:13:53.000",
        "id": "ERZMUGqn9Blwa2IGSh2k"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 2,
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:13:53.000",
        "id": "I8JuZ3UNZtQ0Y4U8hR5H"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:13:53.000",
        "id": "NGGXtO6uu0nryZSS0IDt"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:13:53.000",
        "id": "PgwU2jTVZrqLcBBDQhil"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 2,
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:13:53.000",
        "id": "tVmdfgSxTXqva26nDkUt"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:13:55.000",
        "id": "1egQxdw0EROZ8CNLzMla"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 3,
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:13:55.000",
        "id": "kbCHNpQsOCz2S3PFNjt3"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:13:56.000",
        "id": "ILwJHlagVugugPFlssc4"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:13:59.000",
        "id": "8LRV7i6zlraUeGql5Pdc"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 3,
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:13:59.000",
        "id": "A4SgfuIXhejldkeS5Zd4"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 1,
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:13:59.000",
        "id": "GmX4l0NJUPsO1rLs5Nbd"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:13:59.000",
        "id": "MFqMt8sbSgdGcPm2LHz8"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 1,
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:13:59.000",
        "id": "eYJVs75xV84NfXtD1T9w"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:13:59.000",
        "id": "hlSDRipdUJWAJyryUD3G"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:13:59.000",
        "id": "iGBbQQg9jYDhfHVWRwOr"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 2,
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:13:59.000",
        "id": "imeZGFPvOEEtCI29oXvP"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:13:59.000",
        "id": "iqDaqJwTKCVPAjfGY2BN"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 0,
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:13:59.000",
        "id": "oFk6v4D6cCjRfaWheq77"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:13:59.000",
        "id": "rhcVlEsWaHwkVDlaETWO"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 0,
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:13:59.000",
        "id": "uXrTw9rw3jORj0KJwuuj"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 1,
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:13:59.000",
        "id": "yPnwbMYjOlCQ2TKFKXyM"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:14:00.000",
        "id": "AEy1L2MyYEjVzpm9tpTs"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 2,
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:14:00.000",
        "id": "Ys4liVIAcN6t5uPYugD2"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:14:03.000",
        "id": "4rPvSSDVxz0c4vqUQecf"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:14:03.000",
        "id": "Gqa9o3fE7n9Nzz6gcKBn"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 5,
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:14:03.000",
        "id": "WLpuIpP108sf06L2Tpvm"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 4,
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:14:03.000",
        "id": "cSzAIgPqnrKe0F1OWnew"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 3,
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:14:03.000",
        "id": "dTPagM34eewzKxwPlk6J"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:14:03.000",
        "id": "uYhahhQP4LiloIh9umlj"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:14:05.000",
        "id": "VehQISvrVqdRRAyUTqLP"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 4,
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:14:05.000",
        "id": "meS7UX6sL8BL5oHxyKuW"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 1,
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:14:06.000",
        "id": "BDSOVZY6HDLdTCUjLbAE"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:14:06.000",
        "id": "JTfZWW5PEOIhkG85GV0W"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:14:06.000",
        "id": "W3qFpoXagex9c2WJ9rIZ"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:14:06.000",
        "id": "XFrmEh1avOK0NGUbNmhI"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 0,
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:14:06.000",
        "id": "Xyu1958tPeKRgcJLF9Yd"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:14:06.000",
        "id": "co4LcBqsTYOSap6Oyft9"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 2,
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:14:06.000",
        "id": "oVc6c899ewyHiFhwskhK"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 3,
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:14:06.000",
        "id": "rQlcWe9OJmDLdA7T8d03"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:14:06.000",
        "id": "vL04nJEpzkXLWNSQoK0m"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 3,
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:14:07.000",
        "id": "4L5jSgKhCp5ZJOdFDj2N"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 2,
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:14:07.000",
        "id": "4OIq9fxWnuQzR4EdVhpu"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 0,
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:14:07.000",
        "id": "Di6b2qNDrIbHcTzwUOvs"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:14:07.000",
        "id": "W0fofZlgN0wwd3leta7M"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:14:07.000",
        "id": "i1iZwNpbnM7652OOgVtX"
    },
    {
        "data": {
            "before_structured": "structured",
            "after_detail_level": "high",
            "after_structured": "structured",
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "before_detail_level": "medium"
        },
        "source": "frontend",
        "event": "change_summary_level",
        "timestamp": "2025-08-23 16:14:07.000",
        "id": "v803HWECT7jf7deSe4Kh"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 4,
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:14:08.000",
        "id": "1GZ05gVxpNNXudHVBZV5"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:14:08.000",
        "id": "BvgRE4SOI1TEHndVTbGC"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 6,
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:14:08.000",
        "id": "HNEIwyMvVQs8uMV1Vo6l"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:14:08.000",
        "id": "YcvxbwBHbAiCKUl4fTLr"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:14:08.000",
        "id": "pEfZQ3zLTlqVJbUUqkPK"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 4,
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:14:10.000",
        "id": "r0A0qkeDIhBrzovx1naa"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:14:11.000",
        "id": "272FfPTmbbWauy8AVVkJ"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 4,
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:14:11.000",
        "id": "FMwN3ONFDcaJ3S5sdoqt"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:14:11.000",
        "id": "XJENrCHKYklaNmKyL8rZ"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 5,
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:14:11.000",
        "id": "p0WcJE27kRQIZX24gmFj"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:14:12.000",
        "id": "hQkHlNJkEaYwNSlYfu07"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 6,
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:14:12.000",
        "id": "t0CovEdLJTREpyU6rked"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:14:13.000",
        "id": "1RHcxB4PqExVp4oNHHA9"
    },
    {
        "data": {
            "summary": "• Sets up an Express GET endpoint at '/api/stock/:symbol'\n• Handles incoming requests by:\n  ◦ Extracting and uppercasing the stock symbol from the URL\n  ◦ Fetching daily chart data from Yahoo Finance for the symbol, starting from 2024-01-01\n• Processes the fetched data by:\n  ◦ Extracting the company name from the response metadata, defaulting to the symbol if unavailable\n  ◦ Mapping the quotes to an array of objects, each containing:\n    ▪ date\n    ▪ close price\n    ▪ volume\n• Constructs a response object with ticker, name, and the processed data array\n• Logs the response object to the console\n• Sends the response as JSON to the client\n• Handles errors by logging them and returning a 500 error with a message",
            "structured": "structured",
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "click_edit_in_prompt",
        "timestamp": "2025-08-23 16:14:13.000",
        "id": "93eFC2HxdB43HQfyMeVN"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 3,
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:14:13.000",
        "id": "CnrjyItTvD0LuATpr2x8"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:14:13.000",
        "id": "Iw1JfYdvPRK4YfBygwrx"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 4,
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:14:13.000",
        "id": "PqIKBRycAmw1amR5hb60"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 1,
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:14:13.000",
        "id": "TT27VRaIA3sRo10Ale88"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:14:13.000",
        "id": "hgk20PCdOr3O6AMf0buc"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:14:13.000",
        "id": "lACK5z3eNgCIDl9ljINk"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 2,
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:14:13.000",
        "id": "necc67CFrBr0x4PkXaDf"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:14:13.000",
        "id": "vivlVjR2qxE0kvlL5PJQ"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:14:14.000",
        "id": "7FQT7NKmIaloGuYFbRks"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 2,
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:14:14.000",
        "id": "EMCXZmJJsWMyckKVFaKC"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 8,
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:14:14.000",
        "id": "IRyc6gSIxEtKhjsVY0Xu"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:14:14.000",
        "id": "Rz0aVA20mWLxGkw1Pwtz"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:14:14.000",
        "id": "Zj2r1XN7R5qSYErscJdi"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 3,
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:14:14.000",
        "id": "hdXhiCmdY7MaMxFkfePv"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:14:14.000",
        "id": "kUa4lY03aqGvRfvzA527"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 10,
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:14:14.000",
        "id": "lhg6mA72wP2lVhFqXOQZ"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 11,
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:14:14.000",
        "id": "lpxexL2ioJwaaoSEQoi8"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:14:14.000",
        "id": "mrMCU1XqdWBIVY2oC2wu"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 11,
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:14:47.000",
        "id": "WiKLbv0XySzmQ4lzs0wi"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:14:48.000",
        "id": "B16hMZvCYbtsFOriu4fm"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 9,
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:14:48.000",
        "id": "B2lj1nbO4ZWkp2SnxrZ1"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 10,
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:14:48.000",
        "id": "JaxNvDatTStXkEYgHmQO"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:14:48.000",
        "id": "Lp7KBASQplNFOdZDznjf"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 8,
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:14:48.000",
        "id": "MeGC3MKkt3QESF07i4wV"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:14:48.000",
        "id": "gr3QSYdHMyYofZfEivD5"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:14:48.000",
        "id": "lmSYlF6sh93JIoeZ8kFJ"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 8,
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:14:48.000",
        "id": "mNbKcTVWqt0BeMSaohLr"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:14:49.000",
        "id": "0VcIi3BnN1u0eEtBFByj"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 6,
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:14:49.000",
        "id": "7C2M3H13fK6pqpPRDfuK"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 5,
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:14:49.000",
        "id": "E6chWPIWIiYp9f9xOZLr"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:14:49.000",
        "id": "OjEbLOoRDVez2MrrEt3L"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 7,
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:14:49.000",
        "id": "WH1SLALnFPQc84kxWvGU"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 4,
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:14:49.000",
        "id": "X0QtHe3oWlUh5wkUoLxI"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:14:49.000",
        "id": "iDrzGE4HsBm76qynGo1H"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:14:49.000",
        "id": "qlz0FCDveACHZr2XHSFV"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:14:55.000",
        "id": "RpxIco5KYQksvYHnRLYF"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 5,
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:14:55.000",
        "id": "V337UGA0RlRHAzUMEAS8"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:14:55.000",
        "id": "opLZojJwuaIuYQbDjvZz"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 8,
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:15:02.000",
        "id": "3j16rKpLqCcUX0NqpHmT"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 8,
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:15:02.000",
        "id": "aGB5prbl7eJ0uJXPN5lt"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 7,
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:15:02.000",
        "id": "oznEWc8HIl8ykl8STrAs"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:15:02.000",
        "id": "xLBMSGNNR1aIBErxTONK"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:15:02.000",
        "id": "xrHj4uNx85pnXxeEXszX"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:15:03.000",
        "id": "0j3cP9yBxqhL5ARJtcKx"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 10,
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:15:03.000",
        "id": "0xFO3MPrqUT3uS2RUTp1"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 5,
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:15:03.000",
        "id": "O3wLHlbyr3IatRule8C9"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:15:03.000",
        "id": "P8A88dC0fniByDAZ7p7c"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 7,
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:15:03.000",
        "id": "WpPx9khEN9SMxTwlksHD"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:15:03.000",
        "id": "ZSfP9tuLJ1BWyIXvLJ0r"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 11,
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:15:03.000",
        "id": "cSkPkfB2KdllzSOYCL5H"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:15:03.000",
        "id": "i0lBhP0eAvEhWY1Nhk7w"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:15:03.000",
        "id": "iypitu68MvHrbZ08tWPP"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:15:03.000",
        "id": "qYjmigQSjItiZwIAin8M"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 6,
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:15:03.000",
        "id": "qvraqiZoRijAH6ItB3KW"
    },
    {
        "data": {
            "edited_summary": "• Sets up an Express GET endpoint at '/api/stock/:symbol'\n• Handles incoming requests by:\n  ◦ Extracting and uppercasing the stock symbol from the URL\n  ◦ Fetching daily chart data from Yahoo Finance for the symbol, starting from 2024-01-01\n• Processes the fetched data by:\n  ◦ Extracting the company name from the response metadata, defaulting to the symbol if unavailable\n  ◦ Mapping the quotes to an array of objects, each containing:\n    ▪ date\n    ▪ close price\n    ▪ current stock\n    ▪ volume\n• Constructs a response object with ticker, name, and the processed data array\n• Logs the response object to the console\n• Sends the response as JSON to the client\n• Handles errors by logging them and returning a 500 error with a message",
            "original_summary": "• Sets up an Express GET endpoint at '/api/stock/:symbol'\n• Handles incoming requests by:\n  ◦ Extracting and uppercasing the stock symbol from the URL\n  ◦ Fetching daily chart data from Yahoo Finance for the symbol, starting from 2024-01-01\n• Processes the fetched data by:\n  ◦ Extracting the company name from the response metadata, defaulting to the symbol if unavailable\n  ◦ Mapping the quotes to an array of objects, each containing:\n    ▪ date\n    ▪ close price\n    ▪ volume\n• Constructs a response object with ticker, name, and the processed data array\n• Logs the response object to the console\n• Sends the response as JSON to the client\n• Handles errors by logging them and returning a 500 error with a message",
            "structured": "structured",
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "commit_modified_summary",
        "timestamp": "2025-08-23 16:15:04.000",
        "id": "dHymzyamrecWpFyyTHTl"
    },
    {
        "data": {
            "original_summary": "• Sets up an Express GET endpoint at '/api/stock/:symbol'\n• Handles incoming requests by:\n  ◦ Extracting and uppercasing the stock symbol from the URL\n  ◦ Fetching daily chart data from Yahoo Finance for the symbol, starting from 2024-01-01\n• Processes the fetched data by:\n  ◦ Extracting the company name from the response metadata, defaulting to the symbol if unavailable\n  ◦ Mapping the quotes to an array of objects, each containing:\n    ▪ date\n    ▪ close price\n    ▪ volume\n• Constructs a response object with ticker, name, and the processed data array\n• Logs the response object to the console\n• Sends the response as JSON to the client\n• Handles errors by logging them and returning a 500 error with a message",
            "structured_type": "structured",
            "updated_code": "app.get(\"/api/stock/:symbol\", async (req, res) => {\n  try {\n    const symbol = req.params.symbol.toUpperCase();\n    const data = await yahooFinance.chart(symbol, {\n      period1: \"2024-01-01\",\n      interval: \"1d\",\n    });\n    const quotes = data.quotes;\n\n    const companyName = data.meta?.shortName || symbol;\n\n    const response = {\n      ticker: symbol,\n      name: companyName,\n      data: quotes.map((q) => ({\n        date: q.date,\n        close: q.close,\n        current: q.close,\n        volume: q.volume,\n      })),\n    };\n\n    console.log(response);\n    res.json(response);\n  } catch (err) {\n    console.error(err);\n    res.status(500).send(\"Error fetching stock data\");\n  }\n});",
            "original_code": "app.get(\"/api/stock/:symbol\", async (req, res) => {\n  try {\n    const symbol = req.params.symbol.toUpperCase();\n    const data = await yahooFinance.chart(symbol, {\n      period1: \"2024-01-01\",\n      interval: \"1d\",\n    });\n    const quotes = data.quotes;\n\n    const companyName = data.meta?.shortName || symbol;\n\n    const response = {\n      ticker: symbol,\n      name: companyName,\n      data: quotes.map((q) => ({\n        date: q.date,\n        close: q.close,\n        volume: q.volume,\n      })),\n    };\n\n    console.log(response);\n    res.json(response);\n  } catch (err) {\n    console.error(err);\n    res.status(500).send(\"Error fetching stock data\");\n  }\n});",
            "edited_summary": "• Sets up an Express GET endpoint at '/api/stock/:symbol'\n• Handles incoming requests by:\n  ◦ Extracting and uppercasing the stock symbol from the URL\n  ◦ Fetching daily chart data from Yahoo Finance for the symbol, starting from 2024-01-01\n• Processes the fetched data by:\n  ◦ Extracting the company name from the response metadata, defaulting to the symbol if unavailable\n  ◦ Mapping the quotes to an array of objects, each containing:\n    ▪ date\n    ▪ close price\n    ▪ current stock\n    ▪ volume\n• Constructs a response object with ticker, name, and the processed data array\n• Logs the response object to the console\n• Sends the response as JSON to the client\n• Handles errors by logging them and returning a 500 error with a message",
            "detail_level": "high"
        },
        "source": "backend",
        "event": "modify_summary_mediation",
        "timestamp": "2025-08-23 16:15:06.000",
        "id": "AphaUzkudufv1aX81JgA"
    },
    {
        "data": {
            "new_summary": {
                "medium_unstructured": "This code creates an Express GET endpoint at '/api/stock/:symbol' that retrieves daily stock data for a specified symbol using Yahoo Finance. It processes the data to include the ticker, company name, and an array of date, close price, current price (equal to close), and volume. The response is sent as JSON, and errors are handled with a 500 status.",
                "title": "Express Route for Fetching Stock Data from Yahoo Finance (Includes 'current' Field)",
                "medium_structured": "• Defines a GET route at '/api/stock/:symbol'\n• Fetches daily stock chart data from Yahoo Finance starting from 2024-01-01\n• Processes and formats the response to include:\n  ◦ Ticker symbol and company name\n  ◦ An array of objects with date, close price, current price (same as close), and volume\n• Sends the formatted data as JSON, handling errors with a 500 response",
                "low_structured": "• Sets up an endpoint to get stock info by symbol\n• Fetches and returns daily stock data, now including a 'current' field for each entry",
                "low_unstructured": "This code defines an API endpoint that returns daily stock data for a given symbol, now including a 'current' field in each data object.",
                "high_unstructured": "This snippet defines an Express route that handles GET requests to '/api/stock/:symbol', where it extracts the stock symbol from the URL, converts it to uppercase, and queries Yahoo Finance for daily stock chart data starting from January 1, 2024. The code then constructs a response object containing the ticker symbol, company name (using Yahoo's short name if available), and an array of objects with the date, closing price, current price (which is set to the close price), and volume for each day. The response is logged to the console and sent as JSON to the client. If any error occurs during data fetching or processing, it logs the error and responds with a 500 status and an error message.",
                "high_structured": "• Sets up an Express GET endpoint at '/api/stock/:symbol'\n• Handles incoming requests by:\n  ◦ Extracting and uppercasing the stock symbol from the URL\n  ◦ Fetching daily chart data from Yahoo Finance for the symbol, starting from 2024-01-01\n• Processes the fetched data by:\n  ◦ Extracting the company name from the response metadata, defaulting to the symbol if unavailable\n  ◦ Mapping the quotes to an array of objects, each containing:\n    ▪ date\n    ▪ close price\n    ▪ current price (same as close)\n    ▪ volume\n• Constructs a response object with ticker, name, and the processed data array\n• Logs the response object to the console\n• Sends the response as JSON to the client\n• Handles errors by logging them and returning a 500 error with a message"
            },
            "old_summary": {
                "medium_unstructured": "This code creates an Express GET endpoint at '/api/stock/:symbol' that retrieves daily stock data for a specified symbol using Yahoo Finance. It processes the data to include the ticker, company name, and an array of date, close price, and volume. The response is sent as JSON, and errors are handled with a 500 status.",
                "title": "Express Route for Fetching Stock Data from Yahoo Finance",
                "medium_structured": "• Defines a GET route at '/api/stock/:symbol'\n• Fetches daily stock chart data from Yahoo Finance starting from 2024-01-01\n• Processes and formats the response to include:\n  ◦ Ticker symbol and company name\n  ◦ An array of objects with date, close price, and volume\n• Sends the formatted data as JSON, handling errors with a 500 response",
                "low_structured": "• Sets up an endpoint to get stock info by symbol\n• Fetches and returns daily stock data",
                "low_unstructured": "This code defines an API endpoint that returns daily stock data for a given symbol.",
                "high_unstructured": "This snippet defines an Express route that handles GET requests to '/api/stock/:symbol', where it extracts the stock symbol from the URL, converts it to uppercase, and queries Yahoo Finance for daily stock chart data starting from January 1, 2024. The code then constructs a response object containing the ticker symbol, company name (using Yahoo's short name if available), and an array of objects with the date, closing price, and volume for each day. The response is logged to the console and sent as JSON to the client. If any error occurs during data fetching or processing, it logs the error and responds with a 500 status and an error message.",
                "high_structured": "• Sets up an Express GET endpoint at '/api/stock/:symbol'\n• Handles incoming requests by:\n  ◦ Extracting and uppercasing the stock symbol from the URL\n  ◦ Fetching daily chart data from Yahoo Finance for the symbol, starting from 2024-01-01\n• Processes the fetched data by:\n  ◦ Extracting the company name from the response metadata, defaulting to the symbol if unavailable\n  ◦ Mapping the quotes to an array of objects, each containing:\n    ▪ date\n    ▪ close price\n    ▪ volume\n• Constructs a response object with ticker, name, and the processed data array\n• Logs the response object to the console\n• Sends the response as JSON to the client\n• Handles errors by logging them and returning a 500 error with a message"
            },
            "new_code": "app.get(\"/api/stock/:symbol\", async (req, res) => {\n  try {\n    const symbol = req.params.symbol.toUpperCase();\n    const data = await yahooFinance.chart(symbol, {\n      period1: \"2024-01-01\",\n      interval: \"1d\",\n    });\n    const quotes = data.quotes;\n\n    const companyName = data.meta?.shortName || symbol;\n\n    const response = {\n      ticker: symbol,\n      name: companyName,\n      data: quotes.map((q) => ({\n        date: q.date,\n        close: q.close,\n        current: q.close,\n        volume: q.volume,\n      })),\n    };\n\n    console.log(response);\n    res.json(response);\n  } catch (err) {\n    console.error(err);\n    res.status(500).send(\"Error fetching stock data\");\n  }\n});",
            "original_code": "app.get(\"/api/stock/:symbol\", async (req, res) => {\n  try {\n    const symbol = req.params.symbol.toUpperCase();\n    const data = await yahooFinance.chart(symbol, {\n      period1: \"2024-01-01\",\n      interval: \"1d\",\n    });\n    const quotes = data.quotes;\n\n    const companyName = data.meta?.shortName || symbol;\n\n    const response = {\n      ticker: symbol,\n      name: companyName,\n      data: quotes.map((q) => ({\n        date: q.date,\n        close: q.close,\n        current: q.close,\n        volume: q.volume,\n      })),\n    };\n\n    console.log(response);\n    res.json(response);\n  } catch (err) {\n    console.error(err);\n    res.status(500).send(\"Error fetching stock data\");\n  }\n});"
        },
        "source": "backend",
        "event": "summarize_modified_code",
        "timestamp": "2025-08-23 16:15:09.000",
        "id": "MC2hNkMQEiDmMXgJuPZq"
    },
    {
        "data": {
            "mapping": [
                {
                    "summaryComponent": "defines an API endpoint",
                    "codeSegments": [
                        {
                            "line": 15,
                            "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "returns daily stock data",
                    "codeSegments": [
                        {
                            "line": 20,
                            "code": "interval: \"1d\","
                        },
                        {
                            "line": 38,
                            "code": "res.json(response);"
                        }
                    ]
                },
                {
                    "summaryComponent": "for a given symbol",
                    "codeSegments": [
                        {
                            "line": 17,
                            "code": "const symbol = req.params.symbol.toUpperCase();"
                        }
                    ]
                },
                {
                    "summaryComponent": "now including a 'current' field in each data object",
                    "codeSegments": [
                        {
                            "line": 32,
                            "code": "current: q.close,"
                        }
                    ]
                }
            ],
            "code": "15: app.get(\"/api/stock/:symbol\", async (req, res) => {\n16:   try {\n17:     const symbol = req.params.symbol.toUpperCase();\n18:     const data = await yahooFinance.chart(symbol, {\n19:       period1: \"2024-01-01\",\n20:       interval: \"1d\",\n21:     });\n22:     const quotes = data.quotes;\n23: \n24:     const companyName = data.meta?.shortName || symbol;\n25: \n26:     const response = {\n27:       ticker: symbol,\n28:       name: companyName,\n29:       data: quotes.map((q) => ({\n30:         date: q.date,\n31:         close: q.close,\n32:         current: q.close,\n33:         volume: q.volume,\n34:       })),\n35:     };\n36: \n37:     console.log(response);\n38:     res.json(response);\n39:   } catch (err) {\n40:     console.error(err);\n41:     res.status(500).send(\"Error fetching stock data\");\n42:   }\n43: });",
            "summary": "This code defines an API endpoint that returns daily stock data for a given symbol, now including a 'current' field in each data object."
        },
        "source": "backend",
        "event": "map_summary_code",
        "timestamp": "2025-08-23 16:15:11.000",
        "id": "YtDyjeDDvammxU59mzlB"
    },
    {
        "data": {
            "mapping": [
                {
                    "summaryComponent": "Sets up an endpoint to get stock info by symbol",
                    "codeSegments": [
                        {
                            "line": 15,
                            "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "Fetches and returns daily stock data, now including a 'current' field for each entry",
                    "codeSegments": [
                        {
                            "line": 18,
                            "code": "const data = await yahooFinance.chart(symbol, {"
                        },
                        {
                            "line": 20,
                            "code": "interval: \"1d\","
                        },
                        {
                            "line": 26,
                            "code": "const response = {"
                        },
                        {
                            "line": 29,
                            "code": "data: quotes.map((q) => ({"
                        },
                        {
                            "line": 32,
                            "code": "current: q.close,"
                        },
                        {
                            "line": 38,
                            "code": "res.json(response);"
                        }
                    ]
                }
            ],
            "code": "15: app.get(\"/api/stock/:symbol\", async (req, res) => {\n16:   try {\n17:     const symbol = req.params.symbol.toUpperCase();\n18:     const data = await yahooFinance.chart(symbol, {\n19:       period1: \"2024-01-01\",\n20:       interval: \"1d\",\n21:     });\n22:     const quotes = data.quotes;\n23: \n24:     const companyName = data.meta?.shortName || symbol;\n25: \n26:     const response = {\n27:       ticker: symbol,\n28:       name: companyName,\n29:       data: quotes.map((q) => ({\n30:         date: q.date,\n31:         close: q.close,\n32:         current: q.close,\n33:         volume: q.volume,\n34:       })),\n35:     };\n36: \n37:     console.log(response);\n38:     res.json(response);\n39:   } catch (err) {\n40:     console.error(err);\n41:     res.status(500).send(\"Error fetching stock data\");\n42:   }\n43: });",
            "summary": "• Sets up an endpoint to get stock info by symbol\n• Fetches and returns daily stock data, now including a 'current' field for each entry"
        },
        "source": "backend",
        "event": "map_summary_code",
        "timestamp": "2025-08-23 16:15:11.000",
        "id": "wKv0F4DjroKr1xpp83Hh"
    },
    {
        "data": {
            "mapping": [
                {
                    "summaryComponent": "Defines a GET route at '/api/stock/:symbol'",
                    "codeSegments": [
                        {
                            "line": 15,
                            "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "Fetches daily stock chart data from Yahoo Finance starting from 2024-01-01",
                    "codeSegments": [
                        {
                            "line": 18,
                            "code": "const data = await yahooFinance.chart(symbol, {"
                        },
                        {
                            "line": 19,
                            "code": "period1: \"2024-01-01\","
                        },
                        {
                            "line": 20,
                            "code": "interval: \"1d\","
                        }
                    ]
                },
                {
                    "summaryComponent": "Processes and formats the response to include:",
                    "codeSegments": [
                        {
                            "line": 26,
                            "code": "const response = {"
                        }
                    ]
                },
                {
                    "summaryComponent": "Ticker symbol and company name",
                    "codeSegments": [
                        {
                            "line": 27,
                            "code": "ticker: symbol,"
                        },
                        {
                            "line": 28,
                            "code": "name: companyName,"
                        }
                    ]
                },
                {
                    "summaryComponent": "An array of objects with date, close price, current price (same as close), and volume",
                    "codeSegments": [
                        {
                            "line": 29,
                            "code": "data: quotes.map((q) => ({"
                        },
                        {
                            "line": 30,
                            "code": "date: q.date,"
                        },
                        {
                            "line": 31,
                            "code": "close: q.close,"
                        },
                        {
                            "line": 32,
                            "code": "current: q.close,"
                        },
                        {
                            "line": 33,
                            "code": "volume: q.volume,"
                        }
                    ]
                },
                {
                    "summaryComponent": "Sends the formatted data as JSON, handling errors with a 500 response",
                    "codeSegments": [
                        {
                            "line": 38,
                            "code": "res.json(response);"
                        },
                        {
                            "line": 41,
                            "code": "res.status(500).send(\"Error fetching stock data\");"
                        }
                    ]
                }
            ],
            "code": "15: app.get(\"/api/stock/:symbol\", async (req, res) => {\n16:   try {\n17:     const symbol = req.params.symbol.toUpperCase();\n18:     const data = await yahooFinance.chart(symbol, {\n19:       period1: \"2024-01-01\",\n20:       interval: \"1d\",\n21:     });\n22:     const quotes = data.quotes;\n23: \n24:     const companyName = data.meta?.shortName || symbol;\n25: \n26:     const response = {\n27:       ticker: symbol,\n28:       name: companyName,\n29:       data: quotes.map((q) => ({\n30:         date: q.date,\n31:         close: q.close,\n32:         current: q.close,\n33:         volume: q.volume,\n34:       })),\n35:     };\n36: \n37:     console.log(response);\n38:     res.json(response);\n39:   } catch (err) {\n40:     console.error(err);\n41:     res.status(500).send(\"Error fetching stock data\");\n42:   }\n43: });",
            "summary": "• Defines a GET route at '/api/stock/:symbol'\n• Fetches daily stock chart data from Yahoo Finance starting from 2024-01-01\n• Processes and formats the response to include:\n  ◦ Ticker symbol and company name\n  ◦ An array of objects with date, close price, current price (same as close), and volume\n• Sends the formatted data as JSON, handling errors with a 500 response"
        },
        "source": "backend",
        "event": "map_summary_code",
        "timestamp": "2025-08-23 16:15:12.000",
        "id": "kdr7XklaAnroCuT5W1YH"
    },
    {
        "data": {
            "mapping": [
                {
                    "summaryComponent": "creates an Express GET endpoint at '/api/stock/:symbol'",
                    "codeSegments": [
                        {
                            "line": 15,
                            "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "retrieves daily stock data for a specified symbol using Yahoo Finance",
                    "codeSegments": [
                        {
                            "line": 17,
                            "code": "const symbol = req.params.symbol.toUpperCase();"
                        },
                        {
                            "line": 18,
                            "code": "const data = await yahooFinance.chart(symbol, {"
                        },
                        {
                            "line": 20,
                            "code": "interval: \"1d\","
                        }
                    ]
                },
                {
                    "summaryComponent": "processes the data to include the ticker",
                    "codeSegments": [
                        {
                            "line": 27,
                            "code": "ticker: symbol,"
                        }
                    ]
                },
                {
                    "summaryComponent": "company name",
                    "codeSegments": [
                        {
                            "line": 24,
                            "code": "const companyName = data.meta?.shortName || symbol;"
                        },
                        {
                            "line": 28,
                            "code": "name: companyName,"
                        }
                    ]
                },
                {
                    "summaryComponent": "an array of date, close price, current price (equal to close), and volume",
                    "codeSegments": [
                        {
                            "line": 29,
                            "code": "data: quotes.map((q) => ({"
                        },
                        {
                            "line": 30,
                            "code": "date: q.date,"
                        },
                        {
                            "line": 31,
                            "code": "close: q.close,"
                        },
                        {
                            "line": 32,
                            "code": "current: q.close,"
                        },
                        {
                            "line": 33,
                            "code": "volume: q.volume,"
                        }
                    ]
                },
                {
                    "summaryComponent": "The response is sent as JSON",
                    "codeSegments": [
                        {
                            "line": 38,
                            "code": "res.json(response);"
                        }
                    ]
                },
                {
                    "summaryComponent": "errors are handled with a 500 status",
                    "codeSegments": [
                        {
                            "line": 41,
                            "code": "res.status(500).send(\"Error fetching stock data\");"
                        }
                    ]
                }
            ],
            "code": "15: app.get(\"/api/stock/:symbol\", async (req, res) => {\n16:   try {\n17:     const symbol = req.params.symbol.toUpperCase();\n18:     const data = await yahooFinance.chart(symbol, {\n19:       period1: \"2024-01-01\",\n20:       interval: \"1d\",\n21:     });\n22:     const quotes = data.quotes;\n23: \n24:     const companyName = data.meta?.shortName || symbol;\n25: \n26:     const response = {\n27:       ticker: symbol,\n28:       name: companyName,\n29:       data: quotes.map((q) => ({\n30:         date: q.date,\n31:         close: q.close,\n32:         current: q.close,\n33:         volume: q.volume,\n34:       })),\n35:     };\n36: \n37:     console.log(response);\n38:     res.json(response);\n39:   } catch (err) {\n40:     console.error(err);\n41:     res.status(500).send(\"Error fetching stock data\");\n42:   }\n43: });",
            "summary": "This code creates an Express GET endpoint at '/api/stock/:symbol' that retrieves daily stock data for a specified symbol using Yahoo Finance. It processes the data to include the ticker, company name, and an array of date, close price, current price (equal to close), and volume. The response is sent as JSON, and errors are handled with a 500 status."
        },
        "source": "backend",
        "event": "map_summary_code",
        "timestamp": "2025-08-23 16:15:13.000",
        "id": "Os2bQmzdIDZ7D7lsN62l"
    },
    {
        "data": {
            "mapping": [
                {
                    "summaryComponent": "Sets up an Express GET endpoint at '/api/stock/:symbol'",
                    "codeSegments": [
                        {
                            "line": 15,
                            "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "Extracting and uppercasing the stock symbol from the URL",
                    "codeSegments": [
                        {
                            "line": 17,
                            "code": "const symbol = req.params.symbol.toUpperCase();"
                        }
                    ]
                },
                {
                    "summaryComponent": "Fetching daily chart data from Yahoo Finance for the symbol, starting from 2024-01-01",
                    "codeSegments": [
                        {
                            "line": 18,
                            "code": "const data = await yahooFinance.chart(symbol, {"
                        },
                        {
                            "line": 19,
                            "code": "period1: \"2024-01-01\","
                        },
                        {
                            "line": 20,
                            "code": "interval: \"1d\","
                        }
                    ]
                },
                {
                    "summaryComponent": "Extracting the company name from the response metadata, defaulting to the symbol if unavailable",
                    "codeSegments": [
                        {
                            "line": 24,
                            "code": "const companyName = data.meta?.shortName || symbol;"
                        }
                    ]
                },
                {
                    "summaryComponent": "Mapping the quotes to an array of objects, each containing:",
                    "codeSegments": [
                        {
                            "line": 29,
                            "code": "data: quotes.map((q) => ({"
                        }
                    ]
                },
                {
                    "summaryComponent": "date",
                    "codeSegments": [
                        {
                            "line": 30,
                            "code": "date: q.date,"
                        }
                    ]
                },
                {
                    "summaryComponent": "close price",
                    "codeSegments": [
                        {
                            "line": 31,
                            "code": "close: q.close,"
                        }
                    ]
                },
                {
                    "summaryComponent": "current price (same as close)",
                    "codeSegments": [
                        {
                            "line": 32,
                            "code": "current: q.close,"
                        }
                    ]
                },
                {
                    "summaryComponent": "volume",
                    "codeSegments": [
                        {
                            "line": 33,
                            "code": "volume: q.volume,"
                        }
                    ]
                },
                {
                    "summaryComponent": "Constructs a response object with ticker, name, and the processed data array",
                    "codeSegments": [
                        {
                            "line": 26,
                            "code": "const response = {"
                        },
                        {
                            "line": 27,
                            "code": "ticker: symbol,"
                        },
                        {
                            "line": 28,
                            "code": "name: companyName,"
                        },
                        {
                            "line": 29,
                            "code": "data: quotes.map((q) => ({"
                        }
                    ]
                },
                {
                    "summaryComponent": "Logs the response object to the console",
                    "codeSegments": [
                        {
                            "line": 37,
                            "code": "console.log(response);"
                        }
                    ]
                },
                {
                    "summaryComponent": "Sends the response as JSON to the client",
                    "codeSegments": [
                        {
                            "line": 38,
                            "code": "res.json(response);"
                        }
                    ]
                },
                {
                    "summaryComponent": "Handles errors by logging them and returning a 500 error with a message",
                    "codeSegments": [
                        {
                            "line": 40,
                            "code": "console.error(err);"
                        },
                        {
                            "line": 41,
                            "code": "res.status(500).send(\"Error fetching stock data\");"
                        }
                    ]
                }
            ],
            "code": "15: app.get(\"/api/stock/:symbol\", async (req, res) => {\n16:   try {\n17:     const symbol = req.params.symbol.toUpperCase();\n18:     const data = await yahooFinance.chart(symbol, {\n19:       period1: \"2024-01-01\",\n20:       interval: \"1d\",\n21:     });\n22:     const quotes = data.quotes;\n23: \n24:     const companyName = data.meta?.shortName || symbol;\n25: \n26:     const response = {\n27:       ticker: symbol,\n28:       name: companyName,\n29:       data: quotes.map((q) => ({\n30:         date: q.date,\n31:         close: q.close,\n32:         current: q.close,\n33:         volume: q.volume,\n34:       })),\n35:     };\n36: \n37:     console.log(response);\n38:     res.json(response);\n39:   } catch (err) {\n40:     console.error(err);\n41:     res.status(500).send(\"Error fetching stock data\");\n42:   }\n43: });",
            "summary": "• Sets up an Express GET endpoint at '/api/stock/:symbol'\n• Handles incoming requests by:\n  ◦ Extracting and uppercasing the stock symbol from the URL\n  ◦ Fetching daily chart data from Yahoo Finance for the symbol, starting from 2024-01-01\n• Processes the fetched data by:\n  ◦ Extracting the company name from the response metadata, defaulting to the symbol if unavailable\n  ◦ Mapping the quotes to an array of objects, each containing:\n    ▪ date\n    ▪ close price\n    ▪ current price (same as close)\n    ▪ volume\n• Constructs a response object with ticker, name, and the processed data array\n• Logs the response object to the console\n• Sends the response as JSON to the client\n• Handles errors by logging them and returning a 500 error with a message"
        },
        "source": "backend",
        "event": "map_summary_code",
        "timestamp": "2025-08-23 16:15:13.000",
        "id": "RYIq96rvRrz4OIBoroW1"
    },
    {
        "data": {
            "section_data": {
                "lines": [
                    15,
                    43
                ],
                "title": "Express Route for Fetching Stock Data from Yahoo Finance (Includes 'current' Field)",
                "summaryData": {
                    "medium_unstructured": "This code creates an Express GET endpoint at '/api/stock/:symbol' that retrieves daily stock data for a specified symbol using Yahoo Finance. It processes the data to include the ticker, company name, and an array of date, close price, current price (equal to close), and volume. The response is sent as JSON, and errors are handled with a 500 status.",
                    "title": "Express Route for Fetching Stock Data from Yahoo Finance (Includes 'current' Field)",
                    "medium_structured": "• Defines a GET route at '/api/stock/:symbol'\n• Fetches daily stock chart data from Yahoo Finance starting from 2024-01-01\n• Processes and formats the response to include:\n  ◦ Ticker symbol and company name\n  ◦ An array of objects with date, close price, current price (same as close), and volume\n• Sends the formatted data as JSON, handling errors with a 500 response",
                    "low_structured": "• Sets up an endpoint to get stock info by symbol\n• Fetches and returns daily stock data, now including a 'current' field for each entry",
                    "low_unstructured": "This code defines an API endpoint that returns daily stock data for a given symbol, now including a 'current' field in each data object.",
                    "high_unstructured": "This snippet defines an Express route that handles GET requests to '/api/stock/:symbol', where it extracts the stock symbol from the URL, converts it to uppercase, and queries Yahoo Finance for daily stock chart data starting from January 1, 2024. The code then constructs a response object containing the ticker symbol, company name (using Yahoo's short name if available), and an array of objects with the date, closing price, current price (which is set to the close price), and volume for each day. The response is logged to the console and sent as JSON to the client. If any error occurs during data fetching or processing, it logs the error and responds with a 500 status and an error message.",
                    "high_structured": "• Sets up an Express GET endpoint at '/api/stock/:symbol'\n• Handles incoming requests by:\n  ◦ Extracting and uppercasing the stock symbol from the URL\n  ◦ Fetching daily chart data from Yahoo Finance for the symbol, starting from 2024-01-01\n• Processes the fetched data by:\n  ◦ Extracting the company name from the response metadata, defaulting to the symbol if unavailable\n  ◦ Mapping the quotes to an array of objects, each containing:\n    ▪ date\n    ▪ close price\n    ▪ current price (same as close)\n    ▪ volume\n• Constructs a response object with ticker, name, and the processed data array\n• Logs the response object to the console\n• Sends the response as JSON to the client\n• Handles errors by logging them and returning a 500 error with a message"
                },
                "oldSummaryData": {
                    "medium_unstructured": "This code creates an Express GET endpoint at '/api/stock/:symbol' that retrieves daily stock data for a specified symbol using Yahoo Finance. It processes the data to include the ticker, company name, and an array of date, close price, and volume. The response is sent as JSON, and errors are handled with a 500 status.",
                    "title": "Express Route for Fetching Stock Data from Yahoo Finance",
                    "medium_structured": "• Defines a GET route at '/api/stock/:symbol'\n• Fetches daily stock chart data from Yahoo Finance starting from 2024-01-01\n• Processes and formats the response to include:\n  ◦ Ticker symbol and company name\n  ◦ An array of objects with date, close price, and volume\n• Sends the formatted data as JSON, handling errors with a 500 response",
                    "low_structured": "• Sets up an endpoint to get stock info by symbol\n• Fetches and returns daily stock data",
                    "low_unstructured": "This code defines an API endpoint that returns daily stock data for a given symbol.",
                    "high_unstructured": "This snippet defines an Express route that handles GET requests to '/api/stock/:symbol', where it extracts the stock symbol from the URL, converts it to uppercase, and queries Yahoo Finance for daily stock chart data starting from January 1, 2024. The code then constructs a response object containing the ticker symbol, company name (using Yahoo's short name if available), and an array of objects with the date, closing price, and volume for each day. The response is logged to the console and sent as JSON to the client. If any error occurs during data fetching or processing, it logs the error and responds with a 500 status and an error message.",
                    "high_structured": "• Sets up an Express GET endpoint at '/api/stock/:symbol'\n• Handles incoming requests by:\n  ◦ Extracting and uppercasing the stock symbol from the URL\n  ◦ Fetching daily chart data from Yahoo Finance for the symbol, starting from 2024-01-01\n• Processes the fetched data by:\n  ◦ Extracting the company name from the response metadata, defaulting to the symbol if unavailable\n  ◦ Mapping the quotes to an array of objects, each containing:\n    ▪ date\n    ▪ close price\n    ▪ volume\n• Constructs a response object with ticker, name, and the processed data array\n• Logs the response object to the console\n• Sends the response as JSON to the client\n• Handles errors by logging them and returning a 500 error with a message"
                },
                "editPromptDetailLevel": null,
                "metadata": {
                    "fullPath": "/project/workspace/server/index.js",
                    "id": "437a45e7-755b-46e2-b716-2cdf0969d80e",
                    "filename": "index.js",
                    "offset": 304,
                    "originalCode": "app.get(\"/api/stock/:symbol\", async (req, res) => {\n  try {\n    const symbol = req.params.symbol.toUpperCase();\n    const data = await yahooFinance.chart(symbol, {\n      period1: \"2024-01-01\",\n      interval: \"1d\",\n    });\n    const quotes = data.quotes;\n\n    const companyName = data.meta?.shortName || symbol;\n\n    const response = {\n      ticker: symbol,\n      name: companyName,\n      data: quotes.map((q) => ({\n        date: q.date,\n        close: q.close,\n        current: q.close,\n        volume: q.volume,\n      })),\n    };\n\n    console.log(response);\n    res.json(response);\n  } catch (err) {\n    console.error(err);\n    res.status(500).send(\"Error fetching stock data\");\n  }\n});"
                },
                "editPromptStructured": null,
                "summaryMappings": {
                    "medium_unstructured": [
                        {
                            "summaryComponent": "creates an Express GET endpoint at '/api/stock/:symbol'",
                            "codeSegments": [
                                {
                                    "line": 15,
                                    "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "retrieves daily stock data for a specified symbol using Yahoo Finance",
                            "codeSegments": [
                                {
                                    "line": 17,
                                    "code": "const symbol = req.params.symbol.toUpperCase();"
                                },
                                {
                                    "line": 18,
                                    "code": "const data = await yahooFinance.chart(symbol, {"
                                },
                                {
                                    "line": 20,
                                    "code": "interval: \"1d\","
                                }
                            ]
                        },
                        {
                            "summaryComponent": "processes the data to include the ticker",
                            "codeSegments": [
                                {
                                    "line": 27,
                                    "code": "ticker: symbol,"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "company name",
                            "codeSegments": [
                                {
                                    "line": 24,
                                    "code": "const companyName = data.meta?.shortName || symbol;"
                                },
                                {
                                    "line": 28,
                                    "code": "name: companyName,"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "an array of date, close price, current price (equal to close), and volume",
                            "codeSegments": [
                                {
                                    "line": 29,
                                    "code": "data: quotes.map((q) => ({"
                                },
                                {
                                    "line": 30,
                                    "code": "date: q.date,"
                                },
                                {
                                    "line": 31,
                                    "code": "close: q.close,"
                                },
                                {
                                    "line": 32,
                                    "code": "current: q.close,"
                                },
                                {
                                    "line": 33,
                                    "code": "volume: q.volume,"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "The response is sent as JSON",
                            "codeSegments": [
                                {
                                    "line": 38,
                                    "code": "res.json(response);"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "errors are handled with a 500 status",
                            "codeSegments": [
                                {
                                    "line": 41,
                                    "code": "res.status(500).send(\"Error fetching stock data\");"
                                }
                            ]
                        }
                    ],
                    "medium_structured": [
                        {
                            "summaryComponent": "Defines a GET route at '/api/stock/:symbol'",
                            "codeSegments": [
                                {
                                    "line": 15,
                                    "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Fetches daily stock chart data from Yahoo Finance starting from 2024-01-01",
                            "codeSegments": [
                                {
                                    "line": 18,
                                    "code": "const data = await yahooFinance.chart(symbol, {"
                                },
                                {
                                    "line": 19,
                                    "code": "period1: \"2024-01-01\","
                                },
                                {
                                    "line": 20,
                                    "code": "interval: \"1d\","
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Processes and formats the response to include:",
                            "codeSegments": [
                                {
                                    "line": 26,
                                    "code": "const response = {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Ticker symbol and company name",
                            "codeSegments": [
                                {
                                    "line": 27,
                                    "code": "ticker: symbol,"
                                },
                                {
                                    "line": 28,
                                    "code": "name: companyName,"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "An array of objects with date, close price, current price (same as close), and volume",
                            "codeSegments": [
                                {
                                    "line": 29,
                                    "code": "data: quotes.map((q) => ({"
                                },
                                {
                                    "line": 30,
                                    "code": "date: q.date,"
                                },
                                {
                                    "line": 31,
                                    "code": "close: q.close,"
                                },
                                {
                                    "line": 32,
                                    "code": "current: q.close,"
                                },
                                {
                                    "line": 33,
                                    "code": "volume: q.volume,"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Sends the formatted data as JSON, handling errors with a 500 response",
                            "codeSegments": [
                                {
                                    "line": 38,
                                    "code": "res.json(response);"
                                },
                                {
                                    "line": 41,
                                    "code": "res.status(500).send(\"Error fetching stock data\");"
                                }
                            ]
                        }
                    ],
                    "low_structured": [
                        {
                            "summaryComponent": "Sets up an endpoint to get stock info by symbol",
                            "codeSegments": [
                                {
                                    "line": 15,
                                    "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Fetches and returns daily stock data, now including a 'current' field for each entry",
                            "codeSegments": [
                                {
                                    "line": 18,
                                    "code": "const data = await yahooFinance.chart(symbol, {"
                                },
                                {
                                    "line": 20,
                                    "code": "interval: \"1d\","
                                },
                                {
                                    "line": 26,
                                    "code": "const response = {"
                                },
                                {
                                    "line": 29,
                                    "code": "data: quotes.map((q) => ({"
                                },
                                {
                                    "line": 32,
                                    "code": "current: q.close,"
                                },
                                {
                                    "line": 38,
                                    "code": "res.json(response);"
                                }
                            ]
                        }
                    ],
                    "low_unstructured": [
                        {
                            "summaryComponent": "defines an API endpoint",
                            "codeSegments": [
                                {
                                    "line": 15,
                                    "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "returns daily stock data",
                            "codeSegments": [
                                {
                                    "line": 20,
                                    "code": "interval: \"1d\","
                                },
                                {
                                    "line": 38,
                                    "code": "res.json(response);"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "for a given symbol",
                            "codeSegments": [
                                {
                                    "line": 17,
                                    "code": "const symbol = req.params.symbol.toUpperCase();"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "now including a 'current' field in each data object",
                            "codeSegments": [
                                {
                                    "line": 32,
                                    "code": "current: q.close,"
                                }
                            ]
                        }
                    ],
                    "high_unstructured": [
                        {
                            "summaryComponent": "defines an Express route that handles GET requests to '/api/stock/:symbol'",
                            "codeSegments": [
                                {
                                    "line": 15,
                                    "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "extracts the stock symbol from the URL",
                            "codeSegments": [
                                {
                                    "line": 17,
                                    "code": "const symbol = req.params.symbol.toUpperCase();"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "converts it to uppercase",
                            "codeSegments": [
                                {
                                    "line": 17,
                                    "code": "toUpperCase()"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "queries Yahoo Finance for daily stock chart data starting from January 1, 2024",
                            "codeSegments": [
                                {
                                    "line": 18,
                                    "code": "const data = await yahooFinance.chart(symbol, {"
                                },
                                {
                                    "line": 19,
                                    "code": "period1: \"2024-01-01\","
                                },
                                {
                                    "line": 20,
                                    "code": "interval: \"1d\","
                                }
                            ]
                        },
                        {
                            "summaryComponent": "constructs a response object containing the ticker symbol",
                            "codeSegments": [
                                {
                                    "line": 26,
                                    "code": "const response = {"
                                },
                                {
                                    "line": 27,
                                    "code": "ticker: symbol,"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "company name (using Yahoo's short name if available)",
                            "codeSegments": [
                                {
                                    "line": 24,
                                    "code": "const companyName = data.meta?.shortName || symbol;"
                                },
                                {
                                    "line": 28,
                                    "code": "name: companyName,"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "an array of objects with the date, closing price, current price (which is set to the close price), and volume for each day",
                            "codeSegments": [
                                {
                                    "line": 29,
                                    "code": "data: quotes.map((q) => ({"
                                },
                                {
                                    "line": 30,
                                    "code": "date: q.date,"
                                },
                                {
                                    "line": 31,
                                    "code": "close: q.close,"
                                },
                                {
                                    "line": 32,
                                    "code": "current: q.close,"
                                },
                                {
                                    "line": 33,
                                    "code": "volume: q.volume,"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "The response is logged to the console",
                            "codeSegments": [
                                {
                                    "line": 37,
                                    "code": "console.log(response);"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "sent as JSON to the client",
                            "codeSegments": [
                                {
                                    "line": 38,
                                    "code": "res.json(response);"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "If any error occurs during data fetching or processing, it logs the error and responds with a 500 status and an error message.",
                            "codeSegments": [
                                {
                                    "line": 39,
                                    "code": "catch (err) {"
                                },
                                {
                                    "line": 40,
                                    "code": "console.error(err);"
                                },
                                {
                                    "line": 41,
                                    "code": "res.status(500).send(\"Error fetching stock data\");"
                                }
                            ]
                        }
                    ],
                    "high_structured": [
                        {
                            "summaryComponent": "Sets up an Express GET endpoint at '/api/stock/:symbol'",
                            "codeSegments": [
                                {
                                    "line": 15,
                                    "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Extracting and uppercasing the stock symbol from the URL",
                            "codeSegments": [
                                {
                                    "line": 17,
                                    "code": "const symbol = req.params.symbol.toUpperCase();"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Fetching daily chart data from Yahoo Finance for the symbol, starting from 2024-01-01",
                            "codeSegments": [
                                {
                                    "line": 18,
                                    "code": "const data = await yahooFinance.chart(symbol, {"
                                },
                                {
                                    "line": 19,
                                    "code": "period1: \"2024-01-01\","
                                },
                                {
                                    "line": 20,
                                    "code": "interval: \"1d\","
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Extracting the company name from the response metadata, defaulting to the symbol if unavailable",
                            "codeSegments": [
                                {
                                    "line": 24,
                                    "code": "const companyName = data.meta?.shortName || symbol;"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Mapping the quotes to an array of objects, each containing:",
                            "codeSegments": [
                                {
                                    "line": 29,
                                    "code": "data: quotes.map((q) => ({"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "date",
                            "codeSegments": [
                                {
                                    "line": 30,
                                    "code": "date: q.date,"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "close price",
                            "codeSegments": [
                                {
                                    "line": 31,
                                    "code": "close: q.close,"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "current price (same as close)",
                            "codeSegments": [
                                {
                                    "line": 32,
                                    "code": "current: q.close,"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "volume",
                            "codeSegments": [
                                {
                                    "line": 33,
                                    "code": "volume: q.volume,"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Constructs a response object with ticker, name, and the processed data array",
                            "codeSegments": [
                                {
                                    "line": 26,
                                    "code": "const response = {"
                                },
                                {
                                    "line": 27,
                                    "code": "ticker: symbol,"
                                },
                                {
                                    "line": 28,
                                    "code": "name: companyName,"
                                },
                                {
                                    "line": 29,
                                    "code": "data: quotes.map((q) => ({"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Logs the response object to the console",
                            "codeSegments": [
                                {
                                    "line": 37,
                                    "code": "console.log(response);"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Sends the response as JSON to the client",
                            "codeSegments": [
                                {
                                    "line": 38,
                                    "code": "res.json(response);"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Handles errors by logging them and returning a 500 error with a message",
                            "codeSegments": [
                                {
                                    "line": 40,
                                    "code": "console.error(err);"
                                },
                                {
                                    "line": 41,
                                    "code": "res.status(500).send(\"Error fetching stock data\");"
                                }
                            ]
                        }
                    ]
                },
                "selectedStructured": "unstructured",
                "createdAt": 1755994514000,
                "editPromptValue": "",
                "selectedDetailLevel": "medium"
            },
            "section_id": "437a45e7-755b-46e2-b716-2cdf0969d80e"
        },
        "source": "frontend",
        "event": "create_new_section",
        "timestamp": "2025-08-23 16:15:14.000",
        "id": "0pHsHtPWr58kDz6emIdp"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 5,
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:15:14.000",
        "id": "2Om2cybl7FsylQcPpsYg"
    },
    {
        "data": {
            "mapping": [
                {
                    "summaryComponent": "defines an Express route that handles GET requests to '/api/stock/:symbol'",
                    "codeSegments": [
                        {
                            "line": 15,
                            "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "extracts the stock symbol from the URL",
                    "codeSegments": [
                        {
                            "line": 17,
                            "code": "const symbol = req.params.symbol.toUpperCase();"
                        }
                    ]
                },
                {
                    "summaryComponent": "converts it to uppercase",
                    "codeSegments": [
                        {
                            "line": 17,
                            "code": "toUpperCase()"
                        }
                    ]
                },
                {
                    "summaryComponent": "queries Yahoo Finance for daily stock chart data starting from January 1, 2024",
                    "codeSegments": [
                        {
                            "line": 18,
                            "code": "const data = await yahooFinance.chart(symbol, {"
                        },
                        {
                            "line": 19,
                            "code": "period1: \"2024-01-01\","
                        },
                        {
                            "line": 20,
                            "code": "interval: \"1d\","
                        }
                    ]
                },
                {
                    "summaryComponent": "constructs a response object containing the ticker symbol",
                    "codeSegments": [
                        {
                            "line": 26,
                            "code": "const response = {"
                        },
                        {
                            "line": 27,
                            "code": "ticker: symbol,"
                        }
                    ]
                },
                {
                    "summaryComponent": "company name (using Yahoo's short name if available)",
                    "codeSegments": [
                        {
                            "line": 24,
                            "code": "const companyName = data.meta?.shortName || symbol;"
                        },
                        {
                            "line": 28,
                            "code": "name: companyName,"
                        }
                    ]
                },
                {
                    "summaryComponent": "an array of objects with the date, closing price, current price (which is set to the close price), and volume for each day",
                    "codeSegments": [
                        {
                            "line": 29,
                            "code": "data: quotes.map((q) => ({"
                        },
                        {
                            "line": 30,
                            "code": "date: q.date,"
                        },
                        {
                            "line": 31,
                            "code": "close: q.close,"
                        },
                        {
                            "line": 32,
                            "code": "current: q.close,"
                        },
                        {
                            "line": 33,
                            "code": "volume: q.volume,"
                        }
                    ]
                },
                {
                    "summaryComponent": "The response is logged to the console",
                    "codeSegments": [
                        {
                            "line": 37,
                            "code": "console.log(response);"
                        }
                    ]
                },
                {
                    "summaryComponent": "sent as JSON to the client",
                    "codeSegments": [
                        {
                            "line": 38,
                            "code": "res.json(response);"
                        }
                    ]
                },
                {
                    "summaryComponent": "If any error occurs during data fetching or processing, it logs the error and responds with a 500 status and an error message.",
                    "codeSegments": [
                        {
                            "line": 39,
                            "code": "catch (err) {"
                        },
                        {
                            "line": 40,
                            "code": "console.error(err);"
                        },
                        {
                            "line": 41,
                            "code": "res.status(500).send(\"Error fetching stock data\");"
                        }
                    ]
                }
            ],
            "code": "15: app.get(\"/api/stock/:symbol\", async (req, res) => {\n16:   try {\n17:     const symbol = req.params.symbol.toUpperCase();\n18:     const data = await yahooFinance.chart(symbol, {\n19:       period1: \"2024-01-01\",\n20:       interval: \"1d\",\n21:     });\n22:     const quotes = data.quotes;\n23: \n24:     const companyName = data.meta?.shortName || symbol;\n25: \n26:     const response = {\n27:       ticker: symbol,\n28:       name: companyName,\n29:       data: quotes.map((q) => ({\n30:         date: q.date,\n31:         close: q.close,\n32:         current: q.close,\n33:         volume: q.volume,\n34:       })),\n35:     };\n36: \n37:     console.log(response);\n38:     res.json(response);\n39:   } catch (err) {\n40:     console.error(err);\n41:     res.status(500).send(\"Error fetching stock data\");\n42:   }\n43: });",
            "summary": "This snippet defines an Express route that handles GET requests to '/api/stock/:symbol', where it extracts the stock symbol from the URL, converts it to uppercase, and queries Yahoo Finance for daily stock chart data starting from January 1, 2024. The code then constructs a response object containing the ticker symbol, company name (using Yahoo's short name if available), and an array of objects with the date, closing price, current price (which is set to the close price), and volume for each day. The response is logged to the console and sent as JSON to the client. If any error occurs during data fetching or processing, it logs the error and responds with a 500 status and an error message."
        },
        "source": "backend",
        "event": "map_summary_code",
        "timestamp": "2025-08-23 16:15:14.000",
        "id": "FCGB5cGofqSiAfSYvNei"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:15:14.000",
        "id": "LTaWR2LJkzkQjgdSNjoj"
    },
    {
        "data": {
            "after_section_id": "437a45e7-755b-46e2-b716-2cdf0969d80e",
            "before_section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12"
        },
        "source": "frontend",
        "event": "autotransit_section",
        "timestamp": "2025-08-23 16:15:14.000",
        "id": "d2tIlNRC3xN4ZhsI23fh"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 4,
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:15:14.000",
        "id": "h4HfHE8HQdyELUs5NB4C"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:15:14.000",
        "id": "wXWVF6OcYfpFCuXl2fhj"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 2,
            "section_id": "437a45e7-755b-46e2-b716-2cdf0969d80e",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:15:15.000",
        "id": "0Kr8k8yVB85fxwsaLgBv"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "437a45e7-755b-46e2-b716-2cdf0969d80e",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:15:15.000",
        "id": "Rao9azCJUIayrRtmF8R7"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "437a45e7-755b-46e2-b716-2cdf0969d80e",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:15:15.000",
        "id": "Ua86rF2w2jtjbmy7MrLg"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 4,
            "section_id": "437a45e7-755b-46e2-b716-2cdf0969d80e",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:15:15.000",
        "id": "of4qqU1TMUnnY996pUXJ"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 1,
            "section_id": "437a45e7-755b-46e2-b716-2cdf0969d80e",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:15:34.000",
        "id": "Etg5piY9xAoVqPZdMUK4"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "437a45e7-755b-46e2-b716-2cdf0969d80e",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:15:35.000",
        "id": "JPRdRGkWm1JIdBorZaGr"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 4,
            "section_id": "437a45e7-755b-46e2-b716-2cdf0969d80e",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:15:35.000",
        "id": "Mf6IVtJqyKdlJMiKOnTL"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 2,
            "section_id": "437a45e7-755b-46e2-b716-2cdf0969d80e",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:15:35.000",
        "id": "nhBfcG6uEVsExv6rTXPq"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "437a45e7-755b-46e2-b716-2cdf0969d80e",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:15:35.000",
        "id": "qpjjUDG2y53Y626L4pTZ"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "437a45e7-755b-46e2-b716-2cdf0969d80e",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:15:35.000",
        "id": "xrMf5goGFtHUVvWqAafp"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "437a45e7-755b-46e2-b716-2cdf0969d80e",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:15:41.000",
        "id": "cwGRGUdIXA6Wo3wy6Rv9"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 0,
            "section_id": "437a45e7-755b-46e2-b716-2cdf0969d80e",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:15:41.000",
        "id": "mrSQprghaHe5dFUPrnN2"
    },
    {
        "data": {
            "section_id": "437a45e7-755b-46e2-b716-2cdf0969d80e"
        },
        "source": "frontend",
        "event": "delete_section",
        "timestamp": "2025-08-23 16:15:47.000",
        "id": "YaiIR3uzQZmo5jHbNGhU"
    },
    {
        "data": {
            "after_section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12",
            "before_section_id": "437a45e7-755b-46e2-b716-2cdf0969d80e"
        },
        "source": "frontend",
        "event": "toggle_section",
        "timestamp": "2025-08-23 16:15:48.000",
        "id": "030mckHHZ7gtj4ielVDO"
    },
    {
        "data": {},
        "source": "frontend",
        "event": "click_summarize_code",
        "timestamp": "2025-08-23 16:15:58.000",
        "id": "yHsBpZ4gWqvFYGdxFycL"
    },
    {
        "data": {
            "selected_code": "const express = require(\"express\");\nconst cors = require(\"cors\");\nconst yahooFinance = require(\"yahoo-finance2\").default;\n\nconst app = express();\nconst PORT = 3000;\n\napp.use(cors());\napp.use(express.json());\n\napp.get(\"/api/hello\", (req, res) => {\n  res.json({ message: \"Hello from the backend!\" });\n});\n\napp.get(\"/api/stock/:symbol\", async (req, res) => {\n  try {\n    const symbol = req.params.symbol.toUpperCase();\n    const data = await yahooFinance.chart(symbol, {\n      period1: \"2024-01-01\",\n      interval: \"1d\",\n    });\n    const quotes = data.quotes;\n\n    const companyName = data.meta?.shortName || symbol;\n\n    const response = {\n      ticker: symbol,\n      name: companyName,\n      data: quotes.map((q) => ({\n        date: q.date,\n        close: q.close,\n        volume: q.volume,\n      })),\n    };\n\n    console.log(response);\n    res.json(response);\n  } catch (err) {\n    console.error(err);\n    res.status(500).send(\"Error fetching stock data\");\n  }\n});\n\napp.listen(PORT, \"0.0.0.0\", () => {\n  console.log(`Server running on http://localhost:${PORT}`);\n});\n",
            "summary": {
                "medium_unstructured": "The code initializes an Express server that listens on port 3000 and supports CORS and JSON requests. It provides a '/api/hello' endpoint returning a greeting and a '/api/stock/:symbol' endpoint that fetches daily stock data from Yahoo Finance starting from January 1, 2024. The stock endpoint returns the ticker, company name, and an array of daily date, close price, and volume.",
                "title": "Express Server Providing Stock Data and Hello Endpoint",
                "medium_structured": "• Initializes an Express server on port 3000\n• Enables CORS and JSON body parsing\n• Provides two endpoints:\n  ◦ '/api/hello' returns a greeting message\n  ◦ '/api/stock/:symbol' fetches stock chart data from Yahoo Finance\n• Stock endpoint responds with ticker, company name, and daily close/volume data",
                "low_structured": "• Sets up an Express server\n• Provides endpoints for hello and stock data\n• Uses Yahoo Finance API for stock info",
                "low_unstructured": "This code sets up an Express server with endpoints for a hello message and fetching stock data.",
                "high_unstructured": "This code defines an Express server that listens on port 3000 and is configured to handle CORS and JSON payloads. It exposes two endpoints: '/api/hello', which returns a static greeting message, and '/api/stock/:symbol', which retrieves daily stock chart data for a given symbol from Yahoo Finance starting from January 1, 2024. The stock endpoint processes the symbol, fetches the data, extracts the company name and daily quotes (date, close, volume), and returns this information as a structured JSON response. Errors during data retrieval are logged and result in a 500 error response.",
                "high_structured": "• Sets up an Express server listening on port 3000\n• Middleware:\n  ◦ Enables CORS for cross-origin requests\n  ◦ Parses incoming JSON payloads\n• Defines endpoints:\n  ◦ '/api/hello': returns a JSON greeting message\n  ◦ '/api/stock/:symbol':\n    ◦ Extracts and uppercases the stock symbol from the URL\n    ◦ Fetches daily stock data from Yahoo Finance starting 2024-01-01\n    ◦ Extracts company name (if available) and daily quotes (date, close, volume)\n    ◦ Responds with a JSON object containing ticker, name, and an array of daily data\n    ◦ Handles errors by logging and sending a 500 response\n• Logs server startup and stock data responses to the console"
            }
        },
        "source": "backend",
        "event": "summarize_selected_code",
        "timestamp": "2025-08-23 16:16:04.000",
        "id": "O3pR5wqcSW8Z8e48XrHk"
    },
    {
        "data": {
            "mapping": [
                {
                    "summaryComponent": "Sets up an Express server",
                    "codeSegments": [
                        {
                            "line": 1,
                            "code": "const express = require(\"express\");"
                        },
                        {
                            "line": 5,
                            "code": "const app = express();"
                        },
                        {
                            "line": 44,
                            "code": "app.listen(PORT, \"0.0.0.0\", () => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "Provides endpoints for hello and stock data",
                    "codeSegments": [
                        {
                            "line": 11,
                            "code": "app.get(\"/api/hello\", (req, res) => {"
                        },
                        {
                            "line": 15,
                            "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "Uses Yahoo Finance API for stock info",
                    "codeSegments": [
                        {
                            "line": 3,
                            "code": "const yahooFinance = require(\"yahoo-finance2\").default;"
                        },
                        {
                            "line": 18,
                            "code": "const data = await yahooFinance.chart(symbol, {"
                        }
                    ]
                }
            ],
            "code": "1: const express = require(\"express\");\n2: const cors = require(\"cors\");\n3: const yahooFinance = require(\"yahoo-finance2\").default;\n4: \n5: const app = express();\n6: const PORT = 3000;\n7: \n8: app.use(cors());\n9: app.use(express.json());\n10: \n11: app.get(\"/api/hello\", (req, res) => {\n12:   res.json({ message: \"Hello from the backend!\" });\n13: });\n14: \n15: app.get(\"/api/stock/:symbol\", async (req, res) => {\n16:   try {\n17:     const symbol = req.params.symbol.toUpperCase();\n18:     const data = await yahooFinance.chart(symbol, {\n19:       period1: \"2024-01-01\",\n20:       interval: \"1d\",\n21:     });\n22:     const quotes = data.quotes;\n23: \n24:     const companyName = data.meta?.shortName || symbol;\n25: \n26:     const response = {\n27:       ticker: symbol,\n28:       name: companyName,\n29:       data: quotes.map((q) => ({\n30:         date: q.date,\n31:         close: q.close,\n32:         volume: q.volume,\n33:       })),\n34:     };\n35: \n36:     console.log(response);\n37:     res.json(response);\n38:   } catch (err) {\n39:     console.error(err);\n40:     res.status(500).send(\"Error fetching stock data\");\n41:   }\n42: });\n43: \n44: app.listen(PORT, \"0.0.0.0\", () => {\n45:   console.log(`Server running on http://localhost:${PORT}`);\n46: });\n47: ",
            "summary": "• Sets up an Express server\n• Provides endpoints for hello and stock data\n• Uses Yahoo Finance API for stock info"
        },
        "source": "backend",
        "event": "map_summary_code",
        "timestamp": "2025-08-23 16:16:05.000",
        "id": "I4ZtWeMufxtZ5Sdo7tco"
    },
    {
        "data": {
            "mapping": [
                {
                    "summaryComponent": "sets up an Express server",
                    "codeSegments": [
                        {
                            "line": 1,
                            "code": "const express = require(\"express\");"
                        },
                        {
                            "line": 5,
                            "code": "const app = express();"
                        },
                        {
                            "line": 44,
                            "code": "app.listen(PORT, \"0.0.0.0\", () => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "endpoints for a hello message",
                    "codeSegments": [
                        {
                            "line": 11,
                            "code": "app.get(\"/api/hello\", (req, res) => {"
                        },
                        {
                            "line": 12,
                            "code": "res.json({ message: \"Hello from the backend!\" });"
                        }
                    ]
                },
                {
                    "summaryComponent": "fetching stock data",
                    "codeSegments": [
                        {
                            "line": 15,
                            "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                        },
                        {
                            "line": 18,
                            "code": "const data = await yahooFinance.chart(symbol, {"
                        },
                        {
                            "line": 37,
                            "code": "res.json(response);"
                        }
                    ]
                }
            ],
            "code": "1: const express = require(\"express\");\n2: const cors = require(\"cors\");\n3: const yahooFinance = require(\"yahoo-finance2\").default;\n4: \n5: const app = express();\n6: const PORT = 3000;\n7: \n8: app.use(cors());\n9: app.use(express.json());\n10: \n11: app.get(\"/api/hello\", (req, res) => {\n12:   res.json({ message: \"Hello from the backend!\" });\n13: });\n14: \n15: app.get(\"/api/stock/:symbol\", async (req, res) => {\n16:   try {\n17:     const symbol = req.params.symbol.toUpperCase();\n18:     const data = await yahooFinance.chart(symbol, {\n19:       period1: \"2024-01-01\",\n20:       interval: \"1d\",\n21:     });\n22:     const quotes = data.quotes;\n23: \n24:     const companyName = data.meta?.shortName || symbol;\n25: \n26:     const response = {\n27:       ticker: symbol,\n28:       name: companyName,\n29:       data: quotes.map((q) => ({\n30:         date: q.date,\n31:         close: q.close,\n32:         volume: q.volume,\n33:       })),\n34:     };\n35: \n36:     console.log(response);\n37:     res.json(response);\n38:   } catch (err) {\n39:     console.error(err);\n40:     res.status(500).send(\"Error fetching stock data\");\n41:   }\n42: });\n43: \n44: app.listen(PORT, \"0.0.0.0\", () => {\n45:   console.log(`Server running on http://localhost:${PORT}`);\n46: });\n47: ",
            "summary": "This code sets up an Express server with endpoints for a hello message and fetching stock data."
        },
        "source": "backend",
        "event": "map_summary_code",
        "timestamp": "2025-08-23 16:16:06.000",
        "id": "Ccq5D64Za1EcNevgm0NU"
    },
    {
        "data": {
            "mapping": [
                {
                    "summaryComponent": "initializes an Express server",
                    "codeSegments": [
                        {
                            "line": 1,
                            "code": "const express = require(\"express\");"
                        },
                        {
                            "line": 5,
                            "code": "const app = express();"
                        }
                    ]
                },
                {
                    "summaryComponent": "listens on port 3000",
                    "codeSegments": [
                        {
                            "line": 6,
                            "code": "const PORT = 3000;"
                        },
                        {
                            "line": 44,
                            "code": "app.listen(PORT, \"0.0.0.0\", () => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "supports CORS and JSON requests",
                    "codeSegments": [
                        {
                            "line": 8,
                            "code": "app.use(cors());"
                        },
                        {
                            "line": 9,
                            "code": "app.use(express.json());"
                        }
                    ]
                },
                {
                    "summaryComponent": "provides a '/api/hello' endpoint returning a greeting",
                    "codeSegments": [
                        {
                            "line": 11,
                            "code": "app.get(\"/api/hello\", (req, res) => {"
                        },
                        {
                            "line": 12,
                            "code": "res.json({ message: \"Hello from the backend!\" });"
                        }
                    ]
                },
                {
                    "summaryComponent": "a '/api/stock/:symbol' endpoint that fetches daily stock data from Yahoo Finance starting from January 1, 2024",
                    "codeSegments": [
                        {
                            "line": 15,
                            "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                        },
                        {
                            "line": 18,
                            "code": "const data = await yahooFinance.chart(symbol, {"
                        },
                        {
                            "line": 19,
                            "code": "period1: \"2024-01-01\","
                        },
                        {
                            "line": 20,
                            "code": "interval: \"1d\","
                        }
                    ]
                },
                {
                    "summaryComponent": "returns the ticker",
                    "codeSegments": [
                        {
                            "line": 27,
                            "code": "ticker: symbol,"
                        }
                    ]
                },
                {
                    "summaryComponent": "company name",
                    "codeSegments": [
                        {
                            "line": 28,
                            "code": "name: companyName,"
                        }
                    ]
                },
                {
                    "summaryComponent": "an array of daily date, close price, and volume",
                    "codeSegments": [
                        {
                            "line": 29,
                            "code": "data: quotes.map((q) => ({"
                        },
                        {
                            "line": 30,
                            "code": "date: q.date,"
                        },
                        {
                            "line": 31,
                            "code": "close: q.close,"
                        },
                        {
                            "line": 32,
                            "code": "volume: q.volume,"
                        }
                    ]
                }
            ],
            "code": "1: const express = require(\"express\");\n2: const cors = require(\"cors\");\n3: const yahooFinance = require(\"yahoo-finance2\").default;\n4: \n5: const app = express();\n6: const PORT = 3000;\n7: \n8: app.use(cors());\n9: app.use(express.json());\n10: \n11: app.get(\"/api/hello\", (req, res) => {\n12:   res.json({ message: \"Hello from the backend!\" });\n13: });\n14: \n15: app.get(\"/api/stock/:symbol\", async (req, res) => {\n16:   try {\n17:     const symbol = req.params.symbol.toUpperCase();\n18:     const data = await yahooFinance.chart(symbol, {\n19:       period1: \"2024-01-01\",\n20:       interval: \"1d\",\n21:     });\n22:     const quotes = data.quotes;\n23: \n24:     const companyName = data.meta?.shortName || symbol;\n25: \n26:     const response = {\n27:       ticker: symbol,\n28:       name: companyName,\n29:       data: quotes.map((q) => ({\n30:         date: q.date,\n31:         close: q.close,\n32:         volume: q.volume,\n33:       })),\n34:     };\n35: \n36:     console.log(response);\n37:     res.json(response);\n38:   } catch (err) {\n39:     console.error(err);\n40:     res.status(500).send(\"Error fetching stock data\");\n41:   }\n42: });\n43: \n44: app.listen(PORT, \"0.0.0.0\", () => {\n45:   console.log(`Server running on http://localhost:${PORT}`);\n46: });\n47: ",
            "summary": "The code initializes an Express server that listens on port 3000 and supports CORS and JSON requests. It provides a '/api/hello' endpoint returning a greeting and a '/api/stock/:symbol' endpoint that fetches daily stock data from Yahoo Finance starting from January 1, 2024. The stock endpoint returns the ticker, company name, and an array of daily date, close price, and volume."
        },
        "source": "backend",
        "event": "map_summary_code",
        "timestamp": "2025-08-23 16:16:07.000",
        "id": "7S4auVpAW4fgeNAKwfQS"
    },
    {
        "data": {
            "mapping": [
                {
                    "summaryComponent": "Initializes an Express server on port 3000",
                    "codeSegments": [
                        {
                            "line": 5,
                            "code": "const app = express();"
                        },
                        {
                            "line": 6,
                            "code": "const PORT = 3000;"
                        },
                        {
                            "line": 44,
                            "code": "app.listen(PORT, \"0.0.0.0\", () => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "Enables CORS and JSON body parsing",
                    "codeSegments": [
                        {
                            "line": 8,
                            "code": "app.use(cors());"
                        },
                        {
                            "line": 9,
                            "code": "app.use(express.json());"
                        }
                    ]
                },
                {
                    "summaryComponent": "Provides two endpoints:",
                    "codeSegments": [
                        {
                            "line": 11,
                            "code": "app.get(\"/api/hello\", (req, res) => {"
                        },
                        {
                            "line": 15,
                            "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "'/api/hello' returns a greeting message",
                    "codeSegments": [
                        {
                            "line": 11,
                            "code": "app.get(\"/api/hello\", (req, res) => {"
                        },
                        {
                            "line": 12,
                            "code": "res.json({ message: \"Hello from the backend!\" });"
                        }
                    ]
                },
                {
                    "summaryComponent": "'/api/stock/:symbol' fetches stock chart data from Yahoo Finance",
                    "codeSegments": [
                        {
                            "line": 15,
                            "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                        },
                        {
                            "line": 18,
                            "code": "const data = await yahooFinance.chart(symbol, {"
                        }
                    ]
                },
                {
                    "summaryComponent": "Stock endpoint responds with ticker, company name, and daily close/volume data",
                    "codeSegments": [
                        {
                            "line": 26,
                            "code": "const response = {"
                        },
                        {
                            "line": 27,
                            "code": "ticker: symbol,"
                        },
                        {
                            "line": 28,
                            "code": "name: companyName,"
                        },
                        {
                            "line": 29,
                            "code": "data: quotes.map((q) => ({"
                        },
                        {
                            "line": 30,
                            "code": "date: q.date,"
                        },
                        {
                            "line": 31,
                            "code": "close: q.close,"
                        },
                        {
                            "line": 32,
                            "code": "volume: q.volume,"
                        }
                    ]
                }
            ],
            "code": "1: const express = require(\"express\");\n2: const cors = require(\"cors\");\n3: const yahooFinance = require(\"yahoo-finance2\").default;\n4: \n5: const app = express();\n6: const PORT = 3000;\n7: \n8: app.use(cors());\n9: app.use(express.json());\n10: \n11: app.get(\"/api/hello\", (req, res) => {\n12:   res.json({ message: \"Hello from the backend!\" });\n13: });\n14: \n15: app.get(\"/api/stock/:symbol\", async (req, res) => {\n16:   try {\n17:     const symbol = req.params.symbol.toUpperCase();\n18:     const data = await yahooFinance.chart(symbol, {\n19:       period1: \"2024-01-01\",\n20:       interval: \"1d\",\n21:     });\n22:     const quotes = data.quotes;\n23: \n24:     const companyName = data.meta?.shortName || symbol;\n25: \n26:     const response = {\n27:       ticker: symbol,\n28:       name: companyName,\n29:       data: quotes.map((q) => ({\n30:         date: q.date,\n31:         close: q.close,\n32:         volume: q.volume,\n33:       })),\n34:     };\n35: \n36:     console.log(response);\n37:     res.json(response);\n38:   } catch (err) {\n39:     console.error(err);\n40:     res.status(500).send(\"Error fetching stock data\");\n41:   }\n42: });\n43: \n44: app.listen(PORT, \"0.0.0.0\", () => {\n45:   console.log(`Server running on http://localhost:${PORT}`);\n46: });\n47: ",
            "summary": "• Initializes an Express server on port 3000\n• Enables CORS and JSON body parsing\n• Provides two endpoints:\n  ◦ '/api/hello' returns a greeting message\n  ◦ '/api/stock/:symbol' fetches stock chart data from Yahoo Finance\n• Stock endpoint responds with ticker, company name, and daily close/volume data"
        },
        "source": "backend",
        "event": "map_summary_code",
        "timestamp": "2025-08-23 16:16:07.000",
        "id": "wYDxC4XV7XbHuqatcGWa"
    },
    {
        "data": {
            "after_section_id": "8bf52ed5-f13f-4418-8f60-de178155ab06",
            "before_section_id": "061c5cb7-f057-4621-8e78-f2c188f1ee12"
        },
        "source": "frontend",
        "event": "autotransit_section",
        "timestamp": "2025-08-23 16:16:09.000",
        "id": "Gq1Ihog9xbQRO8Ci1wJF"
    },
    {
        "data": {
            "mapping": [
                {
                    "summaryComponent": "Sets up an Express server listening on port 3000",
                    "codeSegments": [
                        {
                            "line": 5,
                            "code": "const app = express();"
                        },
                        {
                            "line": 6,
                            "code": "const PORT = 3000;"
                        },
                        {
                            "line": 44,
                            "code": "app.listen(PORT, \"0.0.0.0\", () => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "Enables CORS for cross-origin requests",
                    "codeSegments": [
                        {
                            "line": 8,
                            "code": "app.use(cors());"
                        }
                    ]
                },
                {
                    "summaryComponent": "Parses incoming JSON payloads",
                    "codeSegments": [
                        {
                            "line": 9,
                            "code": "app.use(express.json());"
                        }
                    ]
                },
                {
                    "summaryComponent": "'/api/hello': returns a JSON greeting message",
                    "codeSegments": [
                        {
                            "line": 11,
                            "code": "app.get(\"/api/hello\", (req, res) => {"
                        },
                        {
                            "line": 12,
                            "code": "res.json({ message: \"Hello from the backend!\" });"
                        }
                    ]
                },
                {
                    "summaryComponent": "'/api/stock/:symbol':",
                    "codeSegments": [
                        {
                            "line": 15,
                            "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "Extracts and uppercases the stock symbol from the URL",
                    "codeSegments": [
                        {
                            "line": 17,
                            "code": "const symbol = req.params.symbol.toUpperCase();"
                        }
                    ]
                },
                {
                    "summaryComponent": "Fetches daily stock data from Yahoo Finance starting 2024-01-01",
                    "codeSegments": [
                        {
                            "line": 18,
                            "code": "const data = await yahooFinance.chart(symbol, {"
                        },
                        {
                            "line": 19,
                            "code": "period1: \"2024-01-01\","
                        },
                        {
                            "line": 20,
                            "code": "interval: \"1d\","
                        }
                    ]
                },
                {
                    "summaryComponent": "Extracts company name (if available) and daily quotes (date, close, volume)",
                    "codeSegments": [
                        {
                            "line": 24,
                            "code": "const companyName = data.meta?.shortName || symbol;"
                        },
                        {
                            "line": 22,
                            "code": "const quotes = data.quotes;"
                        },
                        {
                            "line": 29,
                            "code": "data: quotes.map((q) => ({"
                        },
                        {
                            "line": 30,
                            "code": "date: q.date,"
                        },
                        {
                            "line": 31,
                            "code": "close: q.close,"
                        },
                        {
                            "line": 32,
                            "code": "volume: q.volume,"
                        }
                    ]
                },
                {
                    "summaryComponent": "Responds with a JSON object containing ticker, name, and an array of daily data",
                    "codeSegments": [
                        {
                            "line": 26,
                            "code": "const response = {"
                        },
                        {
                            "line": 27,
                            "code": "ticker: symbol,"
                        },
                        {
                            "line": 28,
                            "code": "name: companyName,"
                        },
                        {
                            "line": 29,
                            "code": "data: quotes.map((q) => ({"
                        },
                        {
                            "line": 37,
                            "code": "res.json(response);"
                        }
                    ]
                },
                {
                    "summaryComponent": "Handles errors by logging and sending a 500 response",
                    "codeSegments": [
                        {
                            "line": 38,
                            "code": "catch (err) {"
                        },
                        {
                            "line": 39,
                            "code": "console.error(err);"
                        },
                        {
                            "line": 40,
                            "code": "res.status(500).send(\"Error fetching stock data\");"
                        }
                    ]
                },
                {
                    "summaryComponent": "Logs server startup and stock data responses to the console",
                    "codeSegments": [
                        {
                            "line": 36,
                            "code": "console.log(response);"
                        },
                        {
                            "line": 45,
                            "code": "console.log(`Server running on http://localhost:${PORT}`);"
                        }
                    ]
                }
            ],
            "code": "1: const express = require(\"express\");\n2: const cors = require(\"cors\");\n3: const yahooFinance = require(\"yahoo-finance2\").default;\n4: \n5: const app = express();\n6: const PORT = 3000;\n7: \n8: app.use(cors());\n9: app.use(express.json());\n10: \n11: app.get(\"/api/hello\", (req, res) => {\n12:   res.json({ message: \"Hello from the backend!\" });\n13: });\n14: \n15: app.get(\"/api/stock/:symbol\", async (req, res) => {\n16:   try {\n17:     const symbol = req.params.symbol.toUpperCase();\n18:     const data = await yahooFinance.chart(symbol, {\n19:       period1: \"2024-01-01\",\n20:       interval: \"1d\",\n21:     });\n22:     const quotes = data.quotes;\n23: \n24:     const companyName = data.meta?.shortName || symbol;\n25: \n26:     const response = {\n27:       ticker: symbol,\n28:       name: companyName,\n29:       data: quotes.map((q) => ({\n30:         date: q.date,\n31:         close: q.close,\n32:         volume: q.volume,\n33:       })),\n34:     };\n35: \n36:     console.log(response);\n37:     res.json(response);\n38:   } catch (err) {\n39:     console.error(err);\n40:     res.status(500).send(\"Error fetching stock data\");\n41:   }\n42: });\n43: \n44: app.listen(PORT, \"0.0.0.0\", () => {\n45:   console.log(`Server running on http://localhost:${PORT}`);\n46: });\n47: ",
            "summary": "• Sets up an Express server listening on port 3000\n• Middleware:\n  ◦ Enables CORS for cross-origin requests\n  ◦ Parses incoming JSON payloads\n• Defines endpoints:\n  ◦ '/api/hello': returns a JSON greeting message\n  ◦ '/api/stock/:symbol':\n    ◦ Extracts and uppercases the stock symbol from the URL\n    ◦ Fetches daily stock data from Yahoo Finance starting 2024-01-01\n    ◦ Extracts company name (if available) and daily quotes (date, close, volume)\n    ◦ Responds with a JSON object containing ticker, name, and an array of daily data\n    ◦ Handles errors by logging and sending a 500 response\n• Logs server startup and stock data responses to the console"
        },
        "source": "backend",
        "event": "map_summary_code",
        "timestamp": "2025-08-23 16:16:09.000",
        "id": "PPcAjRboa8AEdFWrx5fZ"
    },
    {
        "data": {
            "section_data": {
                "lines": [
                    1,
                    47
                ],
                "title": "Express Server Providing Stock Data and Hello Endpoint",
                "summaryData": {
                    "medium_unstructured": "The code initializes an Express server that listens on port 3000 and supports CORS and JSON requests. It provides a '/api/hello' endpoint returning a greeting and a '/api/stock/:symbol' endpoint that fetches daily stock data from Yahoo Finance starting from January 1, 2024. The stock endpoint returns the ticker, company name, and an array of daily date, close price, and volume.",
                    "title": "Express Server Providing Stock Data and Hello Endpoint",
                    "medium_structured": "• Initializes an Express server on port 3000\n• Enables CORS and JSON body parsing\n• Provides two endpoints:\n  ◦ '/api/hello' returns a greeting message\n  ◦ '/api/stock/:symbol' fetches stock chart data from Yahoo Finance\n• Stock endpoint responds with ticker, company name, and daily close/volume data",
                    "low_structured": "• Sets up an Express server\n• Provides endpoints for hello and stock data\n• Uses Yahoo Finance API for stock info",
                    "low_unstructured": "This code sets up an Express server with endpoints for a hello message and fetching stock data.",
                    "high_unstructured": "This code defines an Express server that listens on port 3000 and is configured to handle CORS and JSON payloads. It exposes two endpoints: '/api/hello', which returns a static greeting message, and '/api/stock/:symbol', which retrieves daily stock chart data for a given symbol from Yahoo Finance starting from January 1, 2024. The stock endpoint processes the symbol, fetches the data, extracts the company name and daily quotes (date, close, volume), and returns this information as a structured JSON response. Errors during data retrieval are logged and result in a 500 error response.",
                    "high_structured": "• Sets up an Express server listening on port 3000\n• Middleware:\n  ◦ Enables CORS for cross-origin requests\n  ◦ Parses incoming JSON payloads\n• Defines endpoints:\n  ◦ '/api/hello': returns a JSON greeting message\n  ◦ '/api/stock/:symbol':\n    ◦ Extracts and uppercases the stock symbol from the URL\n    ◦ Fetches daily stock data from Yahoo Finance starting 2024-01-01\n    ◦ Extracts company name (if available) and daily quotes (date, close, volume)\n    ◦ Responds with a JSON object containing ticker, name, and an array of daily data\n    ◦ Handles errors by logging and sending a 500 response\n• Logs server startup and stock data responses to the console"
                },
                "editPromptDetailLevel": null,
                "summaryMappings": {
                    "medium_unstructured": [
                        {
                            "summaryComponent": "initializes an Express server",
                            "codeSegments": [
                                {
                                    "line": 1,
                                    "code": "const express = require(\"express\");"
                                },
                                {
                                    "line": 5,
                                    "code": "const app = express();"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "listens on port 3000",
                            "codeSegments": [
                                {
                                    "line": 6,
                                    "code": "const PORT = 3000;"
                                },
                                {
                                    "line": 44,
                                    "code": "app.listen(PORT, \"0.0.0.0\", () => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "supports CORS and JSON requests",
                            "codeSegments": [
                                {
                                    "line": 8,
                                    "code": "app.use(cors());"
                                },
                                {
                                    "line": 9,
                                    "code": "app.use(express.json());"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "provides a '/api/hello' endpoint returning a greeting",
                            "codeSegments": [
                                {
                                    "line": 11,
                                    "code": "app.get(\"/api/hello\", (req, res) => {"
                                },
                                {
                                    "line": 12,
                                    "code": "res.json({ message: \"Hello from the backend!\" });"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "a '/api/stock/:symbol' endpoint that fetches daily stock data from Yahoo Finance starting from January 1, 2024",
                            "codeSegments": [
                                {
                                    "line": 15,
                                    "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                                },
                                {
                                    "line": 18,
                                    "code": "const data = await yahooFinance.chart(symbol, {"
                                },
                                {
                                    "line": 19,
                                    "code": "period1: \"2024-01-01\","
                                },
                                {
                                    "line": 20,
                                    "code": "interval: \"1d\","
                                }
                            ]
                        },
                        {
                            "summaryComponent": "returns the ticker",
                            "codeSegments": [
                                {
                                    "line": 27,
                                    "code": "ticker: symbol,"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "company name",
                            "codeSegments": [
                                {
                                    "line": 28,
                                    "code": "name: companyName,"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "an array of daily date, close price, and volume",
                            "codeSegments": [
                                {
                                    "line": 29,
                                    "code": "data: quotes.map((q) => ({"
                                },
                                {
                                    "line": 30,
                                    "code": "date: q.date,"
                                },
                                {
                                    "line": 31,
                                    "code": "close: q.close,"
                                },
                                {
                                    "line": 32,
                                    "code": "volume: q.volume,"
                                }
                            ]
                        }
                    ],
                    "medium_structured": [
                        {
                            "summaryComponent": "Initializes an Express server on port 3000",
                            "codeSegments": [
                                {
                                    "line": 5,
                                    "code": "const app = express();"
                                },
                                {
                                    "line": 6,
                                    "code": "const PORT = 3000;"
                                },
                                {
                                    "line": 44,
                                    "code": "app.listen(PORT, \"0.0.0.0\", () => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Enables CORS and JSON body parsing",
                            "codeSegments": [
                                {
                                    "line": 8,
                                    "code": "app.use(cors());"
                                },
                                {
                                    "line": 9,
                                    "code": "app.use(express.json());"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Provides two endpoints:",
                            "codeSegments": [
                                {
                                    "line": 11,
                                    "code": "app.get(\"/api/hello\", (req, res) => {"
                                },
                                {
                                    "line": 15,
                                    "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "'/api/hello' returns a greeting message",
                            "codeSegments": [
                                {
                                    "line": 11,
                                    "code": "app.get(\"/api/hello\", (req, res) => {"
                                },
                                {
                                    "line": 12,
                                    "code": "res.json({ message: \"Hello from the backend!\" });"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "'/api/stock/:symbol' fetches stock chart data from Yahoo Finance",
                            "codeSegments": [
                                {
                                    "line": 15,
                                    "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                                },
                                {
                                    "line": 18,
                                    "code": "const data = await yahooFinance.chart(symbol, {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Stock endpoint responds with ticker, company name, and daily close/volume data",
                            "codeSegments": [
                                {
                                    "line": 26,
                                    "code": "const response = {"
                                },
                                {
                                    "line": 27,
                                    "code": "ticker: symbol,"
                                },
                                {
                                    "line": 28,
                                    "code": "name: companyName,"
                                },
                                {
                                    "line": 29,
                                    "code": "data: quotes.map((q) => ({"
                                },
                                {
                                    "line": 30,
                                    "code": "date: q.date,"
                                },
                                {
                                    "line": 31,
                                    "code": "close: q.close,"
                                },
                                {
                                    "line": 32,
                                    "code": "volume: q.volume,"
                                }
                            ]
                        }
                    ],
                    "low_structured": [
                        {
                            "summaryComponent": "Sets up an Express server",
                            "codeSegments": [
                                {
                                    "line": 1,
                                    "code": "const express = require(\"express\");"
                                },
                                {
                                    "line": 5,
                                    "code": "const app = express();"
                                },
                                {
                                    "line": 44,
                                    "code": "app.listen(PORT, \"0.0.0.0\", () => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Provides endpoints for hello and stock data",
                            "codeSegments": [
                                {
                                    "line": 11,
                                    "code": "app.get(\"/api/hello\", (req, res) => {"
                                },
                                {
                                    "line": 15,
                                    "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Uses Yahoo Finance API for stock info",
                            "codeSegments": [
                                {
                                    "line": 3,
                                    "code": "const yahooFinance = require(\"yahoo-finance2\").default;"
                                },
                                {
                                    "line": 18,
                                    "code": "const data = await yahooFinance.chart(symbol, {"
                                }
                            ]
                        }
                    ],
                    "low_unstructured": [
                        {
                            "summaryComponent": "sets up an Express server",
                            "codeSegments": [
                                {
                                    "line": 1,
                                    "code": "const express = require(\"express\");"
                                },
                                {
                                    "line": 5,
                                    "code": "const app = express();"
                                },
                                {
                                    "line": 44,
                                    "code": "app.listen(PORT, \"0.0.0.0\", () => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "endpoints for a hello message",
                            "codeSegments": [
                                {
                                    "line": 11,
                                    "code": "app.get(\"/api/hello\", (req, res) => {"
                                },
                                {
                                    "line": 12,
                                    "code": "res.json({ message: \"Hello from the backend!\" });"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "fetching stock data",
                            "codeSegments": [
                                {
                                    "line": 15,
                                    "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                                },
                                {
                                    "line": 18,
                                    "code": "const data = await yahooFinance.chart(symbol, {"
                                },
                                {
                                    "line": 37,
                                    "code": "res.json(response);"
                                }
                            ]
                        }
                    ],
                    "high_unstructured": [
                        {
                            "summaryComponent": "an Express server",
                            "codeSegments": [
                                {
                                    "line": 1,
                                    "code": "const express = require(\"express\");"
                                },
                                {
                                    "line": 5,
                                    "code": "const app = express();"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "listens on port 3000",
                            "codeSegments": [
                                {
                                    "line": 6,
                                    "code": "const PORT = 3000;"
                                },
                                {
                                    "line": 44,
                                    "code": "app.listen(PORT, \"0.0.0.0\", () => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "configured to handle CORS and JSON payloads",
                            "codeSegments": [
                                {
                                    "line": 8,
                                    "code": "app.use(cors());"
                                },
                                {
                                    "line": 9,
                                    "code": "app.use(express.json());"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "It exposes two endpoints: '/api/hello', which returns a static greeting message, and '/api/stock/:symbol', which retrieves daily stock chart data for a given symbol from Yahoo Finance starting from January 1, 2024.",
                            "codeSegments": [
                                {
                                    "line": 11,
                                    "code": "app.get(\"/api/hello\", (req, res) => {"
                                },
                                {
                                    "line": 12,
                                    "code": "res.json({ message: \"Hello from the backend!\" });"
                                },
                                {
                                    "line": 15,
                                    "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                                },
                                {
                                    "line": 18,
                                    "code": "const data = await yahooFinance.chart(symbol, {"
                                },
                                {
                                    "line": 19,
                                    "code": "period1: \"2024-01-01\","
                                },
                                {
                                    "line": 20,
                                    "code": "interval: \"1d\","
                                }
                            ]
                        },
                        {
                            "summaryComponent": "The stock endpoint processes the symbol",
                            "codeSegments": [
                                {
                                    "line": 17,
                                    "code": "const symbol = req.params.symbol.toUpperCase();"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "fetches the data",
                            "codeSegments": [
                                {
                                    "line": 18,
                                    "code": "const data = await yahooFinance.chart(symbol, {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "extracts the company name and daily quotes (date, close, volume)",
                            "codeSegments": [
                                {
                                    "line": 24,
                                    "code": "const companyName = data.meta?.shortName || symbol;"
                                },
                                {
                                    "line": 22,
                                    "code": "const quotes = data.quotes;"
                                },
                                {
                                    "line": 29,
                                    "code": "data: quotes.map((q) => ({"
                                },
                                {
                                    "line": 30,
                                    "code": "date: q.date,"
                                },
                                {
                                    "line": 31,
                                    "code": "close: q.close,"
                                },
                                {
                                    "line": 32,
                                    "code": "volume: q.volume,"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "returns this information as a structured JSON response",
                            "codeSegments": [
                                {
                                    "line": 37,
                                    "code": "res.json(response);"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Errors during data retrieval are logged",
                            "codeSegments": [
                                {
                                    "line": 39,
                                    "code": "console.error(err);"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "result in a 500 error response",
                            "codeSegments": [
                                {
                                    "line": 40,
                                    "code": "res.status(500).send(\"Error fetching stock data\");"
                                }
                            ]
                        }
                    ],
                    "high_structured": [
                        {
                            "summaryComponent": "Sets up an Express server listening on port 3000",
                            "codeSegments": [
                                {
                                    "line": 5,
                                    "code": "const app = express();"
                                },
                                {
                                    "line": 6,
                                    "code": "const PORT = 3000;"
                                },
                                {
                                    "line": 44,
                                    "code": "app.listen(PORT, \"0.0.0.0\", () => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Enables CORS for cross-origin requests",
                            "codeSegments": [
                                {
                                    "line": 8,
                                    "code": "app.use(cors());"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Parses incoming JSON payloads",
                            "codeSegments": [
                                {
                                    "line": 9,
                                    "code": "app.use(express.json());"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "'/api/hello': returns a JSON greeting message",
                            "codeSegments": [
                                {
                                    "line": 11,
                                    "code": "app.get(\"/api/hello\", (req, res) => {"
                                },
                                {
                                    "line": 12,
                                    "code": "res.json({ message: \"Hello from the backend!\" });"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "'/api/stock/:symbol':",
                            "codeSegments": [
                                {
                                    "line": 15,
                                    "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Extracts and uppercases the stock symbol from the URL",
                            "codeSegments": [
                                {
                                    "line": 17,
                                    "code": "const symbol = req.params.symbol.toUpperCase();"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Fetches daily stock data from Yahoo Finance starting 2024-01-01",
                            "codeSegments": [
                                {
                                    "line": 18,
                                    "code": "const data = await yahooFinance.chart(symbol, {"
                                },
                                {
                                    "line": 19,
                                    "code": "period1: \"2024-01-01\","
                                },
                                {
                                    "line": 20,
                                    "code": "interval: \"1d\","
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Extracts company name (if available) and daily quotes (date, close, volume)",
                            "codeSegments": [
                                {
                                    "line": 24,
                                    "code": "const companyName = data.meta?.shortName || symbol;"
                                },
                                {
                                    "line": 22,
                                    "code": "const quotes = data.quotes;"
                                },
                                {
                                    "line": 29,
                                    "code": "data: quotes.map((q) => ({"
                                },
                                {
                                    "line": 30,
                                    "code": "date: q.date,"
                                },
                                {
                                    "line": 31,
                                    "code": "close: q.close,"
                                },
                                {
                                    "line": 32,
                                    "code": "volume: q.volume,"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Responds with a JSON object containing ticker, name, and an array of daily data",
                            "codeSegments": [
                                {
                                    "line": 26,
                                    "code": "const response = {"
                                },
                                {
                                    "line": 27,
                                    "code": "ticker: symbol,"
                                },
                                {
                                    "line": 28,
                                    "code": "name: companyName,"
                                },
                                {
                                    "line": 29,
                                    "code": "data: quotes.map((q) => ({"
                                },
                                {
                                    "line": 37,
                                    "code": "res.json(response);"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Handles errors by logging and sending a 500 response",
                            "codeSegments": [
                                {
                                    "line": 38,
                                    "code": "catch (err) {"
                                },
                                {
                                    "line": 39,
                                    "code": "console.error(err);"
                                },
                                {
                                    "line": 40,
                                    "code": "res.status(500).send(\"Error fetching stock data\");"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Logs server startup and stock data responses to the console",
                            "codeSegments": [
                                {
                                    "line": 36,
                                    "code": "console.log(response);"
                                },
                                {
                                    "line": 45,
                                    "code": "console.log(`Server running on http://localhost:${PORT}`);"
                                }
                            ]
                        }
                    ]
                },
                "metadata": {
                    "fullPath": "/project/workspace/server/index.js",
                    "id": "8bf52ed5-f13f-4418-8f60-de178155ab06",
                    "filename": "index.js",
                    "offset": 0,
                    "originalCode": "const express = require(\"express\");\nconst cors = require(\"cors\");\nconst yahooFinance = require(\"yahoo-finance2\").default;\n\nconst app = express();\nconst PORT = 3000;\n\napp.use(cors());\napp.use(express.json());\n\napp.get(\"/api/hello\", (req, res) => {\n  res.json({ message: \"Hello from the backend!\" });\n});\n\napp.get(\"/api/stock/:symbol\", async (req, res) => {\n  try {\n    const symbol = req.params.symbol.toUpperCase();\n    const data = await yahooFinance.chart(symbol, {\n      period1: \"2024-01-01\",\n      interval: \"1d\",\n    });\n    const quotes = data.quotes;\n\n    const companyName = data.meta?.shortName || symbol;\n\n    const response = {\n      ticker: symbol,\n      name: companyName,\n      data: quotes.map((q) => ({\n        date: q.date,\n        close: q.close,\n        volume: q.volume,\n      })),\n    };\n\n    console.log(response);\n    res.json(response);\n  } catch (err) {\n    console.error(err);\n    res.status(500).send(\"Error fetching stock data\");\n  }\n});\n\napp.listen(PORT, \"0.0.0.0\", () => {\n  console.log(`Server running on http://localhost:${PORT}`);\n});\n"
                },
                "editPromptStructured": null,
                "selectedStructured": "unstructured",
                "createdAt": 1755994569000,
                "editPromptValue": "",
                "selectedDetailLevel": "medium"
            },
            "section_id": "8bf52ed5-f13f-4418-8f60-de178155ab06"
        },
        "source": "frontend",
        "event": "create_new_section",
        "timestamp": "2025-08-23 16:16:09.000",
        "id": "rMdY3xTknKzRZNlj00un"
    },
    {
        "data": {
            "mapping": [
                {
                    "summaryComponent": "an Express server",
                    "codeSegments": [
                        {
                            "line": 1,
                            "code": "const express = require(\"express\");"
                        },
                        {
                            "line": 5,
                            "code": "const app = express();"
                        }
                    ]
                },
                {
                    "summaryComponent": "listens on port 3000",
                    "codeSegments": [
                        {
                            "line": 6,
                            "code": "const PORT = 3000;"
                        },
                        {
                            "line": 44,
                            "code": "app.listen(PORT, \"0.0.0.0\", () => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "configured to handle CORS and JSON payloads",
                    "codeSegments": [
                        {
                            "line": 8,
                            "code": "app.use(cors());"
                        },
                        {
                            "line": 9,
                            "code": "app.use(express.json());"
                        }
                    ]
                },
                {
                    "summaryComponent": "It exposes two endpoints: '/api/hello', which returns a static greeting message, and '/api/stock/:symbol', which retrieves daily stock chart data for a given symbol from Yahoo Finance starting from January 1, 2024.",
                    "codeSegments": [
                        {
                            "line": 11,
                            "code": "app.get(\"/api/hello\", (req, res) => {"
                        },
                        {
                            "line": 12,
                            "code": "res.json({ message: \"Hello from the backend!\" });"
                        },
                        {
                            "line": 15,
                            "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                        },
                        {
                            "line": 18,
                            "code": "const data = await yahooFinance.chart(symbol, {"
                        },
                        {
                            "line": 19,
                            "code": "period1: \"2024-01-01\","
                        },
                        {
                            "line": 20,
                            "code": "interval: \"1d\","
                        }
                    ]
                },
                {
                    "summaryComponent": "The stock endpoint processes the symbol",
                    "codeSegments": [
                        {
                            "line": 17,
                            "code": "const symbol = req.params.symbol.toUpperCase();"
                        }
                    ]
                },
                {
                    "summaryComponent": "fetches the data",
                    "codeSegments": [
                        {
                            "line": 18,
                            "code": "const data = await yahooFinance.chart(symbol, {"
                        }
                    ]
                },
                {
                    "summaryComponent": "extracts the company name and daily quotes (date, close, volume)",
                    "codeSegments": [
                        {
                            "line": 24,
                            "code": "const companyName = data.meta?.shortName || symbol;"
                        },
                        {
                            "line": 22,
                            "code": "const quotes = data.quotes;"
                        },
                        {
                            "line": 29,
                            "code": "data: quotes.map((q) => ({"
                        },
                        {
                            "line": 30,
                            "code": "date: q.date,"
                        },
                        {
                            "line": 31,
                            "code": "close: q.close,"
                        },
                        {
                            "line": 32,
                            "code": "volume: q.volume,"
                        }
                    ]
                },
                {
                    "summaryComponent": "returns this information as a structured JSON response",
                    "codeSegments": [
                        {
                            "line": 37,
                            "code": "res.json(response);"
                        }
                    ]
                },
                {
                    "summaryComponent": "Errors during data retrieval are logged",
                    "codeSegments": [
                        {
                            "line": 39,
                            "code": "console.error(err);"
                        }
                    ]
                },
                {
                    "summaryComponent": "result in a 500 error response",
                    "codeSegments": [
                        {
                            "line": 40,
                            "code": "res.status(500).send(\"Error fetching stock data\");"
                        }
                    ]
                }
            ],
            "code": "1: const express = require(\"express\");\n2: const cors = require(\"cors\");\n3: const yahooFinance = require(\"yahoo-finance2\").default;\n4: \n5: const app = express();\n6: const PORT = 3000;\n7: \n8: app.use(cors());\n9: app.use(express.json());\n10: \n11: app.get(\"/api/hello\", (req, res) => {\n12:   res.json({ message: \"Hello from the backend!\" });\n13: });\n14: \n15: app.get(\"/api/stock/:symbol\", async (req, res) => {\n16:   try {\n17:     const symbol = req.params.symbol.toUpperCase();\n18:     const data = await yahooFinance.chart(symbol, {\n19:       period1: \"2024-01-01\",\n20:       interval: \"1d\",\n21:     });\n22:     const quotes = data.quotes;\n23: \n24:     const companyName = data.meta?.shortName || symbol;\n25: \n26:     const response = {\n27:       ticker: symbol,\n28:       name: companyName,\n29:       data: quotes.map((q) => ({\n30:         date: q.date,\n31:         close: q.close,\n32:         volume: q.volume,\n33:       })),\n34:     };\n35: \n36:     console.log(response);\n37:     res.json(response);\n38:   } catch (err) {\n39:     console.error(err);\n40:     res.status(500).send(\"Error fetching stock data\");\n41:   }\n42: });\n43: \n44: app.listen(PORT, \"0.0.0.0\", () => {\n45:   console.log(`Server running on http://localhost:${PORT}`);\n46: });\n47: ",
            "summary": "This code defines an Express server that listens on port 3000 and is configured to handle CORS and JSON payloads. It exposes two endpoints: '/api/hello', which returns a static greeting message, and '/api/stock/:symbol', which retrieves daily stock chart data for a given symbol from Yahoo Finance starting from January 1, 2024. The stock endpoint processes the symbol, fetches the data, extracts the company name and daily quotes (date, close, volume), and returns this information as a structured JSON response. Errors during data retrieval are logged and result in a 500 error response."
        },
        "source": "backend",
        "event": "map_summary_code",
        "timestamp": "2025-08-23 16:16:09.000",
        "id": "teyIJ9pqv610TDfbFfYw"
    },
    {
        "data": {
            "before_structured": "unstructured",
            "after_detail_level": "medium",
            "after_structured": "structured",
            "section_id": "8bf52ed5-f13f-4418-8f60-de178155ab06",
            "before_detail_level": "medium"
        },
        "source": "frontend",
        "event": "change_summary_level",
        "timestamp": "2025-08-23 16:16:13.000",
        "id": "3obnAKZEyuV8F3KiXTV4"
    },
    {
        "data": {
            "before_structured": "structured",
            "after_detail_level": "low",
            "after_structured": "structured",
            "section_id": "8bf52ed5-f13f-4418-8f60-de178155ab06",
            "before_detail_level": "medium"
        },
        "source": "frontend",
        "event": "change_summary_level",
        "timestamp": "2025-08-23 16:16:15.000",
        "id": "NbEnbI0w8uC9azyLk0LW"
    },
    {
        "data": {
            "before_structured": "structured",
            "after_detail_level": "medium",
            "after_structured": "structured",
            "section_id": "8bf52ed5-f13f-4418-8f60-de178155ab06",
            "before_detail_level": "low"
        },
        "source": "frontend",
        "event": "change_summary_level",
        "timestamp": "2025-08-23 16:16:16.000",
        "id": "cwVdLlHuKjG6Ei8VczeB"
    },
    {
        "data": {
            "before_structured": "structured",
            "after_detail_level": "high",
            "after_structured": "structured",
            "section_id": "8bf52ed5-f13f-4418-8f60-de178155ab06",
            "before_detail_level": "medium"
        },
        "source": "frontend",
        "event": "change_summary_level",
        "timestamp": "2025-08-23 16:16:16.000",
        "id": "x615QEzUwPwap3R0caRs"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "8bf52ed5-f13f-4418-8f60-de178155ab06",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:16:17.000",
        "id": "0wNiiWWz6jWAFNrdCLoA"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 8,
            "section_id": "8bf52ed5-f13f-4418-8f60-de178155ab06",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:16:17.000",
        "id": "3no96Yqx673CKNSUaQnZ"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 5,
            "section_id": "8bf52ed5-f13f-4418-8f60-de178155ab06",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:16:17.000",
        "id": "7iOiVk7olwvic7b030Yv"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "8bf52ed5-f13f-4418-8f60-de178155ab06",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:16:17.000",
        "id": "KwNVDmmEoVcDonkAnfyE"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 6,
            "section_id": "8bf52ed5-f13f-4418-8f60-de178155ab06",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:16:17.000",
        "id": "MGBFwO1bUe9GFmPFtr1A"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "8bf52ed5-f13f-4418-8f60-de178155ab06",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:16:17.000",
        "id": "MeWJNpwkpzlUNj9BkiE4"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "8bf52ed5-f13f-4418-8f60-de178155ab06",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:16:17.000",
        "id": "SKZGpy0Q6iKPp1mkKtQB"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 7,
            "section_id": "8bf52ed5-f13f-4418-8f60-de178155ab06",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:16:17.000",
        "id": "URdlF2vsTNYM2qtQwqEw"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 9,
            "section_id": "8bf52ed5-f13f-4418-8f60-de178155ab06",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:16:17.000",
        "id": "X4kPCEoDogWtzxyRyBZ4"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 7,
            "section_id": "8bf52ed5-f13f-4418-8f60-de178155ab06",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:16:17.000",
        "id": "agdp0YMLcW99RNCv1uHD"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "8bf52ed5-f13f-4418-8f60-de178155ab06",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:16:17.000",
        "id": "f8OOtdaU5EjB5ktSw1ds"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 6,
            "section_id": "8bf52ed5-f13f-4418-8f60-de178155ab06",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:16:17.000",
        "id": "gCCqZhQPejmIx7nnGMIE"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 8,
            "section_id": "8bf52ed5-f13f-4418-8f60-de178155ab06",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:16:17.000",
        "id": "isvnTHeZB04KJdvOAuiY"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "8bf52ed5-f13f-4418-8f60-de178155ab06",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:16:17.000",
        "id": "jguLScyOg6dG4uIyaKbG"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "8bf52ed5-f13f-4418-8f60-de178155ab06",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:16:17.000",
        "id": "lW2z7P04z471RCD9Uood"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "8bf52ed5-f13f-4418-8f60-de178155ab06",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:16:17.000",
        "id": "qlDl7Zl1BimbdVusVKJq"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "8bf52ed5-f13f-4418-8f60-de178155ab06",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:16:17.000",
        "id": "sgXY4Gj3fWLRNgBp2ZqS"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 9,
            "section_id": "8bf52ed5-f13f-4418-8f60-de178155ab06",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:16:17.000",
        "id": "vdvwiqbNpCSHfCfBWqUJ"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "8bf52ed5-f13f-4418-8f60-de178155ab06",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:16:36.000",
        "id": "Ime5ov6mSOY4qatxjbIj"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 5,
            "section_id": "8bf52ed5-f13f-4418-8f60-de178155ab06",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:16:36.000",
        "id": "mDNnx1fP943Uq5yMMnix"
    },
    {
        "data": {
            "summary": "• Sets up an Express server listening on port 3000\n• Middleware:\n  ◦ Enables CORS for cross-origin requests\n  ◦ Parses incoming JSON payloads\n• Defines endpoints:\n  ◦ '/api/hello': returns a JSON greeting message\n  ◦ '/api/stock/:symbol':\n    ◦ Extracts and uppercases the stock symbol from the URL\n    ◦ Fetches daily stock data from Yahoo Finance starting 2024-01-01\n    ◦ Extracts company name (if available) and daily quotes (date, close, volume)\n    ◦ Responds with a JSON object containing ticker, name, and an array of daily data\n    ◦ Handles errors by logging and sending a 500 response\n• Logs server startup and stock data responses to the console",
            "structured": "structured",
            "section_id": "8bf52ed5-f13f-4418-8f60-de178155ab06",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "click_edit_in_prompt",
        "timestamp": "2025-08-23 16:16:37.000",
        "id": "1YgNj9IfZl8OkhuA4H3z"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 9,
            "section_id": "8bf52ed5-f13f-4418-8f60-de178155ab06",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:16:37.000",
        "id": "ABFvrUsPMqt9sODksXL2"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "8bf52ed5-f13f-4418-8f60-de178155ab06",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:16:37.000",
        "id": "ILKGtbOxJlecr3wBbLzk"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 10,
            "section_id": "8bf52ed5-f13f-4418-8f60-de178155ab06",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:16:37.000",
        "id": "ZPwK4GDFtPiQtxPX1Vys"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "8bf52ed5-f13f-4418-8f60-de178155ab06",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:16:37.000",
        "id": "qDzVKt3034vd5hlAyNE4"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 7,
            "section_id": "8bf52ed5-f13f-4418-8f60-de178155ab06",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:16:37.000",
        "id": "sWcsnTVCDuhuIrRkCtSp"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "8bf52ed5-f13f-4418-8f60-de178155ab06",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:16:37.000",
        "id": "zRJP6iNrxLOIzGaWJQPK"
    },
    {
        "data": {
            "original_summary": "• Sets up an Express server listening on port 3000\n• Middleware:\n  ◦ Enables CORS for cross-origin requests\n  ◦ Parses incoming JSON payloads\n• Defines endpoints:\n  ◦ '/api/hello': returns a JSON greeting message\n  ◦ '/api/stock/:symbol':\n    ◦ Extracts and uppercases the stock symbol from the URL\n    ◦ Fetches daily stock data from Yahoo Finance starting 2024-01-01\n    ◦ Extracts company name (if available) and daily quotes (date, close, volume)\n    ◦ Responds with a JSON object containing ticker, name, and an array of daily data\n    ◦ Handles errors by logging and sending a 500 response\n• Logs server startup and stock data responses to the console",
            "instruction": "returns the current stock price to frontend",
            "structured": "structured",
            "section_id": "8bf52ed5-f13f-4418-8f60-de178155ab06",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "apply_instruction_summary",
        "timestamp": "2025-08-23 16:16:38.000",
        "id": "KekK4WN1vvqoerXLTmWe"
    },
    {
        "data": {
            "instruction": "returns the current stock price to frontend",
            "updated_summary": "• Sets up an Express server listening on port 3000  \n• Middleware:  \n  ◦ Enables CORS for cross-origin requests  \n  ◦ Parses incoming JSON payloads  \n• Defines endpoints:  \n  ◦ '/api/hello': returns a JSON greeting message  \n  ◦ '/api/stock/:symbol':  \n    ◦ Extracts and uppercases the stock symbol from the URL  \n    ◦ Fetches daily stock data from Yahoo Finance starting 2024-01-01  \n    ◦ Extracts company name (if available) and daily quotes (date, close, volume)  \n    ◦ Responds with a JSON object containing ticker, name, and an array of daily data  \n    ◦ Returns the current stock price to the frontend as part of the response  \n    ◦ Handles errors by logging and sending a 500 response  \n• Logs server startup and stock data responses to the console",
            "original_code": "const express = require(\"express\");\nconst cors = require(\"cors\");\nconst yahooFinance = require(\"yahoo-finance2\").default;\n\nconst app = express();\nconst PORT = 3000;\n\napp.use(cors());\napp.use(express.json());\n\napp.get(\"/api/hello\", (req, res) => {\n  res.json({ message: \"Hello from the backend!\" });\n});\n\napp.get(\"/api/stock/:symbol\", async (req, res) => {\n  try {\n    const symbol = req.params.symbol.toUpperCase();\n    const data = await yahooFinance.chart(symbol, {\n      period1: \"2024-01-01\",\n      interval: \"1d\",\n    });\n    const quotes = data.quotes;\n\n    const companyName = data.meta?.shortName || symbol;\n\n    const response = {\n      ticker: symbol,\n      name: companyName,\n      data: quotes.map((q) => ({\n        date: q.date,\n        close: q.close,\n        volume: q.volume,\n      })),\n    };\n\n    console.log(response);\n    res.json(response);\n  } catch (err) {\n    console.error(err);\n    res.status(500).send(\"Error fetching stock data\");\n  }\n});\n\napp.listen(PORT, \"0.0.0.0\", () => {\n  console.log(`Server running on http://localhost:${PORT}`);\n});\n",
            "original_summary": "• Sets up an Express server listening on port 3000\n• Middleware:\n  ◦ Enables CORS for cross-origin requests\n  ◦ Parses incoming JSON payloads\n• Defines endpoints:\n  ◦ '/api/hello': returns a JSON greeting message\n  ◦ '/api/stock/:symbol':\n    ◦ Extracts and uppercases the stock symbol from the URL\n    ◦ Fetches daily stock data from Yahoo Finance starting 2024-01-01\n    ◦ Extracts company name (if available) and daily quotes (date, close, volume)\n    ◦ Responds with a JSON object containing ticker, name, and an array of daily data\n    ◦ Handles errors by logging and sending a 500 response\n• Logs server startup and stock data responses to the console"
        },
        "source": "backend",
        "event": "apply_instruction_summary",
        "timestamp": "2025-08-23 16:16:39.000",
        "id": "bWanZXTL6g87E0vn7paO"
    },
    {
        "data": {
            "edited_summary": "• Sets up an Express server listening on port 3000  \n• Middleware:  \n  ◦ Enables CORS for cross-origin requests  \n  ◦ Parses incoming JSON payloads  \n• Defines endpoints:  \n  ◦ '/api/hello': returns a JSON greeting message  \n  ◦ '/api/stock/:symbol':  \n    ◦ Extracts and uppercases the stock symbol from the URL  \n    ◦ Fetches daily stock data from Yahoo Finance starting 2024-01-01  \n    ◦ Extracts company name (if available) and daily quotes (date, close, volume)  \n    ◦ Responds with a JSON object containing ticker, name, and an array of daily data  \n    ◦ Returns the current stock price to the frontend as part of the response  \n    ◦ Handles errors by logging and sending a 500 response  \n• Logs server startup and stock data responses to the console",
            "original_summary": "• Sets up an Express server listening on port 3000\n• Middleware:\n  ◦ Enables CORS for cross-origin requests\n  ◦ Parses incoming JSON payloads\n• Defines endpoints:\n  ◦ '/api/hello': returns a JSON greeting message\n  ◦ '/api/stock/:symbol':\n    ◦ Extracts and uppercases the stock symbol from the URL\n    ◦ Fetches daily stock data from Yahoo Finance starting 2024-01-01\n    ◦ Extracts company name (if available) and daily quotes (date, close, volume)\n    ◦ Responds with a JSON object containing ticker, name, and an array of daily data\n    ◦ Handles errors by logging and sending a 500 response\n• Logs server startup and stock data responses to the console",
            "structured": "structured",
            "section_id": "8bf52ed5-f13f-4418-8f60-de178155ab06",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "commit_modified_summary",
        "timestamp": "2025-08-23 16:16:46.000",
        "id": "Pw7uBII6odW88LciFtri"
    },
    {
        "data": {
            "original_summary": "• Sets up an Express server listening on port 3000\n• Middleware:\n  ◦ Enables CORS for cross-origin requests\n  ◦ Parses incoming JSON payloads\n• Defines endpoints:\n  ◦ '/api/hello': returns a JSON greeting message\n  ◦ '/api/stock/:symbol':\n    ◦ Extracts and uppercases the stock symbol from the URL\n    ◦ Fetches daily stock data from Yahoo Finance starting 2024-01-01\n    ◦ Extracts company name (if available) and daily quotes (date, close, volume)\n    ◦ Responds with a JSON object containing ticker, name, and an array of daily data\n    ◦ Handles errors by logging and sending a 500 response\n• Logs server startup and stock data responses to the console",
            "structured_type": "structured",
            "updated_code": "const express = require(\"express\");\nconst cors = require(\"cors\");\nconst yahooFinance = require(\"yahoo-finance2\").default;\n\nconst app = express();\nconst PORT = 3000;\n\napp.use(cors());\napp.use(express.json());\n\napp.get(\"/api/hello\", (req, res) => {\n  res.json({ message: \"Hello from the backend!\" });\n});\n\napp.get(\"/api/stock/:symbol\", async (req, res) => {\n  try {\n    const symbol = req.params.symbol.toUpperCase();\n    const data = await yahooFinance.chart(symbol, {\n      period1: \"2024-01-01\",\n      interval: \"1d\",\n    });\n    const quotes = data.quotes;\n\n    const companyName = data.meta?.shortName || symbol;\n\n    // Determine current price (last close in quotes array)\n    const currentPrice = quotes.length > 0 ? quotes[quotes.length - 1].close : null;\n\n    const response = {\n      ticker: symbol,\n      name: companyName,\n      currentPrice: currentPrice,\n      data: quotes.map((q) => ({\n        date: q.date,\n        close: q.close,\n        volume: q.volume,\n      })),\n    };\n\n    console.log(response);\n    res.json(response);\n  } catch (err) {\n    console.error(err);\n    res.status(500).send(\"Error fetching stock data\");\n  }\n});\n\napp.listen(PORT, \"0.0.0.0\", () => {\n  console.log(`Server running on http://localhost:${PORT}`);\n});",
            "original_code": "const express = require(\"express\");\nconst cors = require(\"cors\");\nconst yahooFinance = require(\"yahoo-finance2\").default;\n\nconst app = express();\nconst PORT = 3000;\n\napp.use(cors());\napp.use(express.json());\n\napp.get(\"/api/hello\", (req, res) => {\n  res.json({ message: \"Hello from the backend!\" });\n});\n\napp.get(\"/api/stock/:symbol\", async (req, res) => {\n  try {\n    const symbol = req.params.symbol.toUpperCase();\n    const data = await yahooFinance.chart(symbol, {\n      period1: \"2024-01-01\",\n      interval: \"1d\",\n    });\n    const quotes = data.quotes;\n\n    const companyName = data.meta?.shortName || symbol;\n\n    const response = {\n      ticker: symbol,\n      name: companyName,\n      data: quotes.map((q) => ({\n        date: q.date,\n        close: q.close,\n        volume: q.volume,\n      })),\n    };\n\n    console.log(response);\n    res.json(response);\n  } catch (err) {\n    console.error(err);\n    res.status(500).send(\"Error fetching stock data\");\n  }\n});\n\napp.listen(PORT, \"0.0.0.0\", () => {\n  console.log(`Server running on http://localhost:${PORT}`);\n});\n",
            "edited_summary": "• Sets up an Express server listening on port 3000  \n• Middleware:  \n  ◦ Enables CORS for cross-origin requests  \n  ◦ Parses incoming JSON payloads  \n• Defines endpoints:  \n  ◦ '/api/hello': returns a JSON greeting message  \n  ◦ '/api/stock/:symbol':  \n    ◦ Extracts and uppercases the stock symbol from the URL  \n    ◦ Fetches daily stock data from Yahoo Finance starting 2024-01-01  \n    ◦ Extracts company name (if available) and daily quotes (date, close, volume)  \n    ◦ Responds with a JSON object containing ticker, name, and an array of daily data  \n    ◦ Returns the current stock price to the frontend as part of the response  \n    ◦ Handles errors by logging and sending a 500 response  \n• Logs server startup and stock data responses to the console",
            "detail_level": "high"
        },
        "source": "backend",
        "event": "modify_summary_mediation",
        "timestamp": "2025-08-23 16:16:48.000",
        "id": "twQxgLeUqQAvOBhgfKT3"
    },
    {
        "data": {
            "new_summary": {
                "medium_unstructured": "The code initializes an Express server that listens on port 3000 and supports CORS and JSON requests. It provides a '/api/hello' endpoint returning a greeting and a '/api/stock/:symbol' endpoint that fetches daily stock data from Yahoo Finance starting from January 1, 2024. The stock endpoint now returns the ticker, company name, the current price (last close), and an array of daily date, close price, and volume.",
                "title": "Express Server Providing Stock Data with Current Price and Hello Endpoint",
                "medium_structured": "• Initializes an Express server on port 3000\n• Enables CORS and JSON body parsing\n• Provides two endpoints:\n  ◦ '/api/hello' returns a greeting message\n  ◦ '/api/stock/:symbol' fetches stock chart data from Yahoo Finance\n• Stock endpoint responds with ticker, company name, current price, and daily close/volume data",
                "low_structured": "• Sets up an Express server\n• Provides endpoints for hello and stock data\n• Uses Yahoo Finance API for stock info\n• Stock data response now includes the current price",
                "low_unstructured": "This code sets up an Express server with endpoints for a hello message and fetching stock data, now including the current price in the stock data response.",
                "high_unstructured": "This code defines an Express server that listens on port 3000 and is configured to handle CORS and JSON payloads. It exposes two endpoints: '/api/hello', which returns a static greeting message, and '/api/stock/:symbol', which retrieves daily stock chart data for a given symbol from Yahoo Finance starting from January 1, 2024. The stock endpoint processes the symbol, fetches the data, extracts the company name and daily quotes (date, close, volume), and now also includes the current price (last close) in the structured JSON response. Errors during data retrieval are logged and result in a 500 error response.",
                "high_structured": "• Sets up an Express server listening on port 3000\n• Middleware:\n  ◦ Enables CORS for cross-origin requests\n  ◦ Parses incoming JSON payloads\n• Defines endpoints:\n  ◦ '/api/hello': returns a JSON greeting message\n  ◦ '/api/stock/:symbol':\n    ◦ Extracts and uppercases the stock symbol from the URL\n    ◦ Fetches daily stock data from Yahoo Finance starting 2024-01-01\n    ◦ Extracts company name (if available), current price (last close), and daily quotes (date, close, volume)\n    ◦ Responds with a JSON object containing ticker, name, current price, and an array of daily data\n    ◦ Handles errors by logging and sending a 500 response\n• Logs server startup and stock data responses to the console"
            },
            "old_summary": {
                "medium_unstructured": "The code initializes an Express server that listens on port 3000 and supports CORS and JSON requests. It provides a '/api/hello' endpoint returning a greeting and a '/api/stock/:symbol' endpoint that fetches daily stock data from Yahoo Finance starting from January 1, 2024. The stock endpoint returns the ticker, company name, and an array of daily date, close price, and volume.",
                "title": "Express Server Providing Stock Data and Hello Endpoint",
                "medium_structured": "• Initializes an Express server on port 3000\n• Enables CORS and JSON body parsing\n• Provides two endpoints:\n  ◦ '/api/hello' returns a greeting message\n  ◦ '/api/stock/:symbol' fetches stock chart data from Yahoo Finance\n• Stock endpoint responds with ticker, company name, and daily close/volume data",
                "low_structured": "• Sets up an Express server\n• Provides endpoints for hello and stock data\n• Uses Yahoo Finance API for stock info",
                "low_unstructured": "This code sets up an Express server with endpoints for a hello message and fetching stock data.",
                "high_unstructured": "This code defines an Express server that listens on port 3000 and is configured to handle CORS and JSON payloads. It exposes two endpoints: '/api/hello', which returns a static greeting message, and '/api/stock/:symbol', which retrieves daily stock chart data for a given symbol from Yahoo Finance starting from January 1, 2024. The stock endpoint processes the symbol, fetches the data, extracts the company name and daily quotes (date, close, volume), and returns this information as a structured JSON response. Errors during data retrieval are logged and result in a 500 error response.",
                "high_structured": "• Sets up an Express server listening on port 3000\n• Middleware:\n  ◦ Enables CORS for cross-origin requests\n  ◦ Parses incoming JSON payloads\n• Defines endpoints:\n  ◦ '/api/hello': returns a JSON greeting message\n  ◦ '/api/stock/:symbol':\n    ◦ Extracts and uppercases the stock symbol from the URL\n    ◦ Fetches daily stock data from Yahoo Finance starting 2024-01-01\n    ◦ Extracts company name (if available) and daily quotes (date, close, volume)\n    ◦ Responds with a JSON object containing ticker, name, and an array of daily data\n    ◦ Handles errors by logging and sending a 500 response\n• Logs server startup and stock data responses to the console"
            },
            "new_code": "const express = require(\"express\");\nconst cors = require(\"cors\");\nconst yahooFinance = require(\"yahoo-finance2\").default;\n\nconst app = express();\nconst PORT = 3000;\n\napp.use(cors());\napp.use(express.json());\n\napp.get(\"/api/hello\", (req, res) => {\n  res.json({ message: \"Hello from the backend!\" });\n});\n\napp.get(\"/api/stock/:symbol\", async (req, res) => {\n  try {\n    const symbol = req.params.symbol.toUpperCase();\n    const data = await yahooFinance.chart(symbol, {\n      period1: \"2024-01-01\",\n      interval: \"1d\",\n    });\n    const quotes = data.quotes;\n\n    const companyName = data.meta?.shortName || symbol;\n\n    // Determine current price (last close in quotes array)\n    const currentPrice = quotes.length > 0 ? quotes[quotes.length - 1].close : null;\n\n    const response = {\n      ticker: symbol,\n      name: companyName,\n      currentPrice: currentPrice,\n      data: quotes.map((q) => ({\n        date: q.date,\n        close: q.close,\n        volume: q.volume,\n      })),\n    };\n\n    console.log(response);\n    res.json(response);\n  } catch (err) {\n    console.error(err);\n    res.status(500).send(\"Error fetching stock data\");\n  }\n});\n\napp.listen(PORT, \"0.0.0.0\", () => {\n  console.log(`Server running on http://localhost:${PORT}`);\n});",
            "original_code": "const express = require(\"express\");\nconst cors = require(\"cors\");\nconst yahooFinance = require(\"yahoo-finance2\").default;\n\nconst app = express();\nconst PORT = 3000;\n\napp.use(cors());\napp.use(express.json());\n\napp.get(\"/api/hello\", (req, res) => {\n  res.json({ message: \"Hello from the backend!\" });\n});\n\napp.get(\"/api/stock/:symbol\", async (req, res) => {\n  try {\n    const symbol = req.params.symbol.toUpperCase();\n    const data = await yahooFinance.chart(symbol, {\n      period1: \"2024-01-01\",\n      interval: \"1d\",\n    });\n    const quotes = data.quotes;\n\n    const companyName = data.meta?.shortName || symbol;\n\n    // Determine current price (last close in quotes array)\n    const currentPrice = quotes.length > 0 ? quotes[quotes.length - 1].close : null;\n\n    const response = {\n      ticker: symbol,\n      name: companyName,\n      currentPrice: currentPrice,\n      data: quotes.map((q) => ({\n        date: q.date,\n        close: q.close,\n        volume: q.volume,\n      })),\n    };\n\n    console.log(response);\n    res.json(response);\n  } catch (err) {\n    console.error(err);\n    res.status(500).send(\"Error fetching stock data\");\n  }\n});\n\napp.listen(PORT, \"0.0.0.0\", () => {\n  console.log(`Server running on http://localhost:${PORT}`);\n});"
        },
        "source": "backend",
        "event": "summarize_modified_code",
        "timestamp": "2025-08-23 16:16:53.000",
        "id": "b4Wr5KcJks8NtVmVx4hE"
    },
    {
        "data": {
            "mapping": [
                {
                    "summaryComponent": "Sets up an Express server",
                    "codeSegments": [
                        {
                            "line": 1,
                            "code": "const express = require(\"express\");"
                        },
                        {
                            "line": 5,
                            "code": "const app = express();"
                        },
                        {
                            "line": 48,
                            "code": "app.listen(PORT, \"0.0.0.0\", () => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "Provides endpoints for hello and stock data",
                    "codeSegments": [
                        {
                            "line": 11,
                            "code": "app.get(\"/api/hello\", (req, res) => {"
                        },
                        {
                            "line": 15,
                            "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "Uses Yahoo Finance API for stock info",
                    "codeSegments": [
                        {
                            "line": 3,
                            "code": "const yahooFinance = require(\"yahoo-finance2\").default;"
                        },
                        {
                            "line": 18,
                            "code": "const data = await yahooFinance.chart(symbol, {"
                        }
                    ]
                },
                {
                    "summaryComponent": "Stock data response now includes the current price",
                    "codeSegments": [
                        {
                            "line": 27,
                            "code": "const currentPrice = quotes.length > 0 ? quotes[quotes.length - 1].close : null;"
                        },
                        {
                            "line": 32,
                            "code": "currentPrice: currentPrice,"
                        }
                    ]
                }
            ],
            "code": "1: const express = require(\"express\");\n2: const cors = require(\"cors\");\n3: const yahooFinance = require(\"yahoo-finance2\").default;\n4: \n5: const app = express();\n6: const PORT = 3000;\n7: \n8: app.use(cors());\n9: app.use(express.json());\n10: \n11: app.get(\"/api/hello\", (req, res) => {\n12:   res.json({ message: \"Hello from the backend!\" });\n13: });\n14: \n15: app.get(\"/api/stock/:symbol\", async (req, res) => {\n16:   try {\n17:     const symbol = req.params.symbol.toUpperCase();\n18:     const data = await yahooFinance.chart(symbol, {\n19:       period1: \"2024-01-01\",\n20:       interval: \"1d\",\n21:     });\n22:     const quotes = data.quotes;\n23: \n24:     const companyName = data.meta?.shortName || symbol;\n25: \n26:     // Determine current price (last close in quotes array)\n27:     const currentPrice = quotes.length > 0 ? quotes[quotes.length - 1].close : null;\n28: \n29:     const response = {\n30:       ticker: symbol,\n31:       name: companyName,\n32:       currentPrice: currentPrice,\n33:       data: quotes.map((q) => ({\n34:         date: q.date,\n35:         close: q.close,\n36:         volume: q.volume,\n37:       })),\n38:     };\n39: \n40:     console.log(response);\n41:     res.json(response);\n42:   } catch (err) {\n43:     console.error(err);\n44:     res.status(500).send(\"Error fetching stock data\");\n45:   }\n46: });\n47: \n48: app.listen(PORT, \"0.0.0.0\", () => {\n49:   console.log(`Server running on http://localhost:${PORT}`);\n50: });",
            "summary": "• Sets up an Express server\n• Provides endpoints for hello and stock data\n• Uses Yahoo Finance API for stock info\n• Stock data response now includes the current price"
        },
        "source": "backend",
        "event": "map_summary_code",
        "timestamp": "2025-08-23 16:16:55.000",
        "id": "DeabfKbUryeHrDsaZErd"
    },
    {
        "data": {
            "mapping": [
                {
                    "summaryComponent": "sets up an Express server",
                    "codeSegments": [
                        {
                            "line": 1,
                            "code": "const express = require(\"express\");"
                        },
                        {
                            "line": 5,
                            "code": "const app = express();"
                        },
                        {
                            "line": 48,
                            "code": "app.listen(PORT, \"0.0.0.0\", () => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "with endpoints for a hello message",
                    "codeSegments": [
                        {
                            "line": 11,
                            "code": "app.get(\"/api/hello\", (req, res) => {"
                        },
                        {
                            "line": 12,
                            "code": "res.json({ message: \"Hello from the backend!\" });"
                        }
                    ]
                },
                {
                    "summaryComponent": "and fetching stock data",
                    "codeSegments": [
                        {
                            "line": 15,
                            "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "now including the current price in the stock data response",
                    "codeSegments": [
                        {
                            "line": 27,
                            "code": "const currentPrice = quotes.length > 0 ? quotes[quotes.length - 1].close : null;"
                        },
                        {
                            "line": 32,
                            "code": "currentPrice: currentPrice,"
                        }
                    ]
                }
            ],
            "code": "1: const express = require(\"express\");\n2: const cors = require(\"cors\");\n3: const yahooFinance = require(\"yahoo-finance2\").default;\n4: \n5: const app = express();\n6: const PORT = 3000;\n7: \n8: app.use(cors());\n9: app.use(express.json());\n10: \n11: app.get(\"/api/hello\", (req, res) => {\n12:   res.json({ message: \"Hello from the backend!\" });\n13: });\n14: \n15: app.get(\"/api/stock/:symbol\", async (req, res) => {\n16:   try {\n17:     const symbol = req.params.symbol.toUpperCase();\n18:     const data = await yahooFinance.chart(symbol, {\n19:       period1: \"2024-01-01\",\n20:       interval: \"1d\",\n21:     });\n22:     const quotes = data.quotes;\n23: \n24:     const companyName = data.meta?.shortName || symbol;\n25: \n26:     // Determine current price (last close in quotes array)\n27:     const currentPrice = quotes.length > 0 ? quotes[quotes.length - 1].close : null;\n28: \n29:     const response = {\n30:       ticker: symbol,\n31:       name: companyName,\n32:       currentPrice: currentPrice,\n33:       data: quotes.map((q) => ({\n34:         date: q.date,\n35:         close: q.close,\n36:         volume: q.volume,\n37:       })),\n38:     };\n39: \n40:     console.log(response);\n41:     res.json(response);\n42:   } catch (err) {\n43:     console.error(err);\n44:     res.status(500).send(\"Error fetching stock data\");\n45:   }\n46: });\n47: \n48: app.listen(PORT, \"0.0.0.0\", () => {\n49:   console.log(`Server running on http://localhost:${PORT}`);\n50: });",
            "summary": "This code sets up an Express server with endpoints for a hello message and fetching stock data, now including the current price in the stock data response."
        },
        "source": "backend",
        "event": "map_summary_code",
        "timestamp": "2025-08-23 16:16:55.000",
        "id": "t4YvUyHuocQYbd05HLwU"
    },
    {
        "data": {
            "mapping": [
                {
                    "summaryComponent": "Initializes an Express server on port 3000",
                    "codeSegments": [
                        {
                            "line": 5,
                            "code": "const app = express();"
                        },
                        {
                            "line": 6,
                            "code": "const PORT = 3000;"
                        },
                        {
                            "line": 48,
                            "code": "app.listen(PORT, \"0.0.0.0\", () => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "Enables CORS and JSON body parsing",
                    "codeSegments": [
                        {
                            "line": 8,
                            "code": "app.use(cors());"
                        },
                        {
                            "line": 9,
                            "code": "app.use(express.json());"
                        }
                    ]
                },
                {
                    "summaryComponent": "Provides two endpoints:",
                    "codeSegments": [
                        {
                            "line": 11,
                            "code": "app.get(\"/api/hello\", (req, res) => {"
                        },
                        {
                            "line": 15,
                            "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "'/api/hello' returns a greeting message",
                    "codeSegments": [
                        {
                            "line": 11,
                            "code": "app.get(\"/api/hello\", (req, res) => {"
                        },
                        {
                            "line": 12,
                            "code": "res.json({ message: \"Hello from the backend!\" });"
                        }
                    ]
                },
                {
                    "summaryComponent": "'/api/stock/:symbol' fetches stock chart data from Yahoo Finance",
                    "codeSegments": [
                        {
                            "line": 15,
                            "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                        },
                        {
                            "line": 18,
                            "code": "const data = await yahooFinance.chart(symbol, {"
                        }
                    ]
                },
                {
                    "summaryComponent": "Stock endpoint responds with ticker, company name, current price, and daily close/volume data",
                    "codeSegments": [
                        {
                            "line": 29,
                            "code": "const response = {"
                        },
                        {
                            "line": 30,
                            "code": "ticker: symbol,"
                        },
                        {
                            "line": 31,
                            "code": "name: companyName,"
                        },
                        {
                            "line": 32,
                            "code": "currentPrice: currentPrice,"
                        },
                        {
                            "line": 33,
                            "code": "data: quotes.map((q) => ({"
                        },
                        {
                            "line": 34,
                            "code": "date: q.date,"
                        },
                        {
                            "line": 35,
                            "code": "close: q.close,"
                        },
                        {
                            "line": 36,
                            "code": "volume: q.volume,"
                        }
                    ]
                }
            ],
            "code": "1: const express = require(\"express\");\n2: const cors = require(\"cors\");\n3: const yahooFinance = require(\"yahoo-finance2\").default;\n4: \n5: const app = express();\n6: const PORT = 3000;\n7: \n8: app.use(cors());\n9: app.use(express.json());\n10: \n11: app.get(\"/api/hello\", (req, res) => {\n12:   res.json({ message: \"Hello from the backend!\" });\n13: });\n14: \n15: app.get(\"/api/stock/:symbol\", async (req, res) => {\n16:   try {\n17:     const symbol = req.params.symbol.toUpperCase();\n18:     const data = await yahooFinance.chart(symbol, {\n19:       period1: \"2024-01-01\",\n20:       interval: \"1d\",\n21:     });\n22:     const quotes = data.quotes;\n23: \n24:     const companyName = data.meta?.shortName || symbol;\n25: \n26:     // Determine current price (last close in quotes array)\n27:     const currentPrice = quotes.length > 0 ? quotes[quotes.length - 1].close : null;\n28: \n29:     const response = {\n30:       ticker: symbol,\n31:       name: companyName,\n32:       currentPrice: currentPrice,\n33:       data: quotes.map((q) => ({\n34:         date: q.date,\n35:         close: q.close,\n36:         volume: q.volume,\n37:       })),\n38:     };\n39: \n40:     console.log(response);\n41:     res.json(response);\n42:   } catch (err) {\n43:     console.error(err);\n44:     res.status(500).send(\"Error fetching stock data\");\n45:   }\n46: });\n47: \n48: app.listen(PORT, \"0.0.0.0\", () => {\n49:   console.log(`Server running on http://localhost:${PORT}`);\n50: });",
            "summary": "• Initializes an Express server on port 3000\n• Enables CORS and JSON body parsing\n• Provides two endpoints:\n  ◦ '/api/hello' returns a greeting message\n  ◦ '/api/stock/:symbol' fetches stock chart data from Yahoo Finance\n• Stock endpoint responds with ticker, company name, current price, and daily close/volume data"
        },
        "source": "backend",
        "event": "map_summary_code",
        "timestamp": "2025-08-23 16:16:57.000",
        "id": "0B24UqBN2Q0UPNqw6VGQ"
    },
    {
        "data": {
            "mapping": [
                {
                    "summaryComponent": "initializes an Express server",
                    "codeSegments": [
                        {
                            "line": 5,
                            "code": "const app = express();"
                        }
                    ]
                },
                {
                    "summaryComponent": "listens on port 3000",
                    "codeSegments": [
                        {
                            "line": 6,
                            "code": "const PORT = 3000;"
                        },
                        {
                            "line": 48,
                            "code": "app.listen(PORT, \"0.0.0.0\", () => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "supports CORS and JSON requests",
                    "codeSegments": [
                        {
                            "line": 8,
                            "code": "app.use(cors());"
                        },
                        {
                            "line": 9,
                            "code": "app.use(express.json());"
                        }
                    ]
                },
                {
                    "summaryComponent": "provides a '/api/hello' endpoint returning a greeting",
                    "codeSegments": [
                        {
                            "line": 11,
                            "code": "app.get(\"/api/hello\", (req, res) => {"
                        },
                        {
                            "line": 12,
                            "code": "res.json({ message: \"Hello from the backend!\" });"
                        }
                    ]
                },
                {
                    "summaryComponent": "a '/api/stock/:symbol' endpoint that fetches daily stock data from Yahoo Finance starting from January 1, 2024",
                    "codeSegments": [
                        {
                            "line": 15,
                            "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                        },
                        {
                            "line": 18,
                            "code": "const data = await yahooFinance.chart(symbol, {"
                        },
                        {
                            "line": 19,
                            "code": "period1: \"2024-01-01\","
                        },
                        {
                            "line": 20,
                            "code": "interval: \"1d\","
                        }
                    ]
                },
                {
                    "summaryComponent": "returns the ticker",
                    "codeSegments": [
                        {
                            "line": 30,
                            "code": "ticker: symbol,"
                        }
                    ]
                },
                {
                    "summaryComponent": "company name",
                    "codeSegments": [
                        {
                            "line": 24,
                            "code": "const companyName = data.meta?.shortName || symbol;"
                        },
                        {
                            "line": 31,
                            "code": "name: companyName,"
                        }
                    ]
                },
                {
                    "summaryComponent": "the current price (last close)",
                    "codeSegments": [
                        {
                            "line": 27,
                            "code": "const currentPrice = quotes.length > 0 ? quotes[quotes.length - 1].close : null;"
                        },
                        {
                            "line": 32,
                            "code": "currentPrice: currentPrice,"
                        }
                    ]
                },
                {
                    "summaryComponent": "an array of daily date, close price, and volume",
                    "codeSegments": [
                        {
                            "line": 33,
                            "code": "data: quotes.map((q) => ({"
                        },
                        {
                            "line": 34,
                            "code": "date: q.date,"
                        },
                        {
                            "line": 35,
                            "code": "close: q.close,"
                        },
                        {
                            "line": 36,
                            "code": "volume: q.volume,"
                        }
                    ]
                }
            ],
            "code": "1: const express = require(\"express\");\n2: const cors = require(\"cors\");\n3: const yahooFinance = require(\"yahoo-finance2\").default;\n4: \n5: const app = express();\n6: const PORT = 3000;\n7: \n8: app.use(cors());\n9: app.use(express.json());\n10: \n11: app.get(\"/api/hello\", (req, res) => {\n12:   res.json({ message: \"Hello from the backend!\" });\n13: });\n14: \n15: app.get(\"/api/stock/:symbol\", async (req, res) => {\n16:   try {\n17:     const symbol = req.params.symbol.toUpperCase();\n18:     const data = await yahooFinance.chart(symbol, {\n19:       period1: \"2024-01-01\",\n20:       interval: \"1d\",\n21:     });\n22:     const quotes = data.quotes;\n23: \n24:     const companyName = data.meta?.shortName || symbol;\n25: \n26:     // Determine current price (last close in quotes array)\n27:     const currentPrice = quotes.length > 0 ? quotes[quotes.length - 1].close : null;\n28: \n29:     const response = {\n30:       ticker: symbol,\n31:       name: companyName,\n32:       currentPrice: currentPrice,\n33:       data: quotes.map((q) => ({\n34:         date: q.date,\n35:         close: q.close,\n36:         volume: q.volume,\n37:       })),\n38:     };\n39: \n40:     console.log(response);\n41:     res.json(response);\n42:   } catch (err) {\n43:     console.error(err);\n44:     res.status(500).send(\"Error fetching stock data\");\n45:   }\n46: });\n47: \n48: app.listen(PORT, \"0.0.0.0\", () => {\n49:   console.log(`Server running on http://localhost:${PORT}`);\n50: });",
            "summary": "The code initializes an Express server that listens on port 3000 and supports CORS and JSON requests. It provides a '/api/hello' endpoint returning a greeting and a '/api/stock/:symbol' endpoint that fetches daily stock data from Yahoo Finance starting from January 1, 2024. The stock endpoint now returns the ticker, company name, the current price (last close), and an array of daily date, close price, and volume."
        },
        "source": "backend",
        "event": "map_summary_code",
        "timestamp": "2025-08-23 16:16:58.000",
        "id": "de4MYrdHbNSNynmZ5SwT"
    },
    {
        "data": {
            "mapping": [
                {
                    "summaryComponent": "Sets up an Express server listening on port 3000",
                    "codeSegments": [
                        {
                            "line": 5,
                            "code": "const app = express();"
                        },
                        {
                            "line": 6,
                            "code": "const PORT = 3000;"
                        },
                        {
                            "line": 48,
                            "code": "app.listen(PORT, \"0.0.0.0\", () => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "Enables CORS for cross-origin requests",
                    "codeSegments": [
                        {
                            "line": 8,
                            "code": "app.use(cors());"
                        }
                    ]
                },
                {
                    "summaryComponent": "Parses incoming JSON payloads",
                    "codeSegments": [
                        {
                            "line": 9,
                            "code": "app.use(express.json());"
                        }
                    ]
                },
                {
                    "summaryComponent": "'/api/hello': returns a JSON greeting message",
                    "codeSegments": [
                        {
                            "line": 11,
                            "code": "app.get(\"/api/hello\", (req, res) => {"
                        },
                        {
                            "line": 12,
                            "code": "res.json({ message: \"Hello from the backend!\" });"
                        }
                    ]
                },
                {
                    "summaryComponent": "Extracts and uppercases the stock symbol from the URL",
                    "codeSegments": [
                        {
                            "line": 17,
                            "code": "const symbol = req.params.symbol.toUpperCase();"
                        }
                    ]
                },
                {
                    "summaryComponent": "Fetches daily stock data from Yahoo Finance starting 2024-01-01",
                    "codeSegments": [
                        {
                            "line": 18,
                            "code": "const data = await yahooFinance.chart(symbol, {"
                        },
                        {
                            "line": 19,
                            "code": "period1: \"2024-01-01\","
                        },
                        {
                            "line": 20,
                            "code": "interval: \"1d\","
                        }
                    ]
                },
                {
                    "summaryComponent": "Extracts company name (if available), current price (last close), and daily quotes (date, close, volume)",
                    "codeSegments": [
                        {
                            "line": 24,
                            "code": "const companyName = data.meta?.shortName || symbol;"
                        },
                        {
                            "line": 27,
                            "code": "const currentPrice = quotes.length > 0 ? quotes[quotes.length - 1].close : null;"
                        },
                        {
                            "line": 33,
                            "code": "data: quotes.map((q) => ({"
                        },
                        {
                            "line": 34,
                            "code": "date: q.date,"
                        },
                        {
                            "line": 35,
                            "code": "close: q.close,"
                        },
                        {
                            "line": 36,
                            "code": "volume: q.volume,"
                        }
                    ]
                },
                {
                    "summaryComponent": "Responds with a JSON object containing ticker, name, current price, and an array of daily data",
                    "codeSegments": [
                        {
                            "line": 29,
                            "code": "const response = {"
                        },
                        {
                            "line": 41,
                            "code": "res.json(response);"
                        }
                    ]
                },
                {
                    "summaryComponent": "Handles errors by logging and sending a 500 response",
                    "codeSegments": [
                        {
                            "line": 43,
                            "code": "console.error(err);"
                        },
                        {
                            "line": 44,
                            "code": "res.status(500).send(\"Error fetching stock data\");"
                        }
                    ]
                },
                {
                    "summaryComponent": "Logs server startup and stock data responses to the console",
                    "codeSegments": [
                        {
                            "line": 40,
                            "code": "console.log(response);"
                        },
                        {
                            "line": 49,
                            "code": "console.log(`Server running on http://localhost:${PORT}`);"
                        }
                    ]
                }
            ],
            "code": "1: const express = require(\"express\");\n2: const cors = require(\"cors\");\n3: const yahooFinance = require(\"yahoo-finance2\").default;\n4: \n5: const app = express();\n6: const PORT = 3000;\n7: \n8: app.use(cors());\n9: app.use(express.json());\n10: \n11: app.get(\"/api/hello\", (req, res) => {\n12:   res.json({ message: \"Hello from the backend!\" });\n13: });\n14: \n15: app.get(\"/api/stock/:symbol\", async (req, res) => {\n16:   try {\n17:     const symbol = req.params.symbol.toUpperCase();\n18:     const data = await yahooFinance.chart(symbol, {\n19:       period1: \"2024-01-01\",\n20:       interval: \"1d\",\n21:     });\n22:     const quotes = data.quotes;\n23: \n24:     const companyName = data.meta?.shortName || symbol;\n25: \n26:     // Determine current price (last close in quotes array)\n27:     const currentPrice = quotes.length > 0 ? quotes[quotes.length - 1].close : null;\n28: \n29:     const response = {\n30:       ticker: symbol,\n31:       name: companyName,\n32:       currentPrice: currentPrice,\n33:       data: quotes.map((q) => ({\n34:         date: q.date,\n35:         close: q.close,\n36:         volume: q.volume,\n37:       })),\n38:     };\n39: \n40:     console.log(response);\n41:     res.json(response);\n42:   } catch (err) {\n43:     console.error(err);\n44:     res.status(500).send(\"Error fetching stock data\");\n45:   }\n46: });\n47: \n48: app.listen(PORT, \"0.0.0.0\", () => {\n49:   console.log(`Server running on http://localhost:${PORT}`);\n50: });",
            "summary": "• Sets up an Express server listening on port 3000\n• Middleware:\n  ◦ Enables CORS for cross-origin requests\n  ◦ Parses incoming JSON payloads\n• Defines endpoints:\n  ◦ '/api/hello': returns a JSON greeting message\n  ◦ '/api/stock/:symbol':\n    ◦ Extracts and uppercases the stock symbol from the URL\n    ◦ Fetches daily stock data from Yahoo Finance starting 2024-01-01\n    ◦ Extracts company name (if available), current price (last close), and daily quotes (date, close, volume)\n    ◦ Responds with a JSON object containing ticker, name, current price, and an array of daily data\n    ◦ Handles errors by logging and sending a 500 response\n• Logs server startup and stock data responses to the console"
        },
        "source": "backend",
        "event": "map_summary_code",
        "timestamp": "2025-08-23 16:16:58.000",
        "id": "ffX1AX3PUUV5esSoCuTF"
    },
    {
        "data": {
            "mapping": [
                {
                    "summaryComponent": "an Express server",
                    "codeSegments": [
                        {
                            "line": 1,
                            "code": "const express = require(\"express\");"
                        },
                        {
                            "line": 5,
                            "code": "const app = express();"
                        }
                    ]
                },
                {
                    "summaryComponent": "listens on port 3000",
                    "codeSegments": [
                        {
                            "line": 6,
                            "code": "const PORT = 3000;"
                        },
                        {
                            "line": 48,
                            "code": "app.listen(PORT, \"0.0.0.0\", () => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "configured to handle CORS and JSON payloads",
                    "codeSegments": [
                        {
                            "line": 8,
                            "code": "app.use(cors());"
                        },
                        {
                            "line": 9,
                            "code": "app.use(express.json());"
                        }
                    ]
                },
                {
                    "summaryComponent": "exposes two endpoints: '/api/hello', which returns a static greeting message, and '/api/stock/:symbol', which retrieves daily stock chart data for a given symbol from Yahoo Finance starting from January 1, 2024.",
                    "codeSegments": [
                        {
                            "line": 11,
                            "code": "app.get(\"/api/hello\", (req, res) => {"
                        },
                        {
                            "line": 12,
                            "code": "res.json({ message: \"Hello from the backend!\" });"
                        },
                        {
                            "line": 15,
                            "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                        },
                        {
                            "line": 18,
                            "code": "const data = await yahooFinance.chart(symbol, {"
                        },
                        {
                            "line": 19,
                            "code": "period1: \"2024-01-01\","
                        },
                        {
                            "line": 20,
                            "code": "interval: \"1d\","
                        }
                    ]
                },
                {
                    "summaryComponent": "The stock endpoint processes the symbol",
                    "codeSegments": [
                        {
                            "line": 17,
                            "code": "const symbol = req.params.symbol.toUpperCase();"
                        }
                    ]
                },
                {
                    "summaryComponent": "fetches the data",
                    "codeSegments": [
                        {
                            "line": 18,
                            "code": "const data = await yahooFinance.chart(symbol, {"
                        }
                    ]
                },
                {
                    "summaryComponent": "extracts the company name and daily quotes (date, close, volume)",
                    "codeSegments": [
                        {
                            "line": 24,
                            "code": "const companyName = data.meta?.shortName || symbol;"
                        },
                        {
                            "line": 22,
                            "code": "const quotes = data.quotes;"
                        },
                        {
                            "line": 33,
                            "code": "data: quotes.map((q) => ({"
                        },
                        {
                            "line": 34,
                            "code": "date: q.date,"
                        },
                        {
                            "line": 35,
                            "code": "close: q.close,"
                        },
                        {
                            "line": 36,
                            "code": "volume: q.volume,"
                        }
                    ]
                },
                {
                    "summaryComponent": "now also includes the current price (last close) in the structured JSON response",
                    "codeSegments": [
                        {
                            "line": 27,
                            "code": "const currentPrice = quotes.length > 0 ? quotes[quotes.length - 1].close : null;"
                        },
                        {
                            "line": 32,
                            "code": "currentPrice: currentPrice,"
                        }
                    ]
                },
                {
                    "summaryComponent": "Errors during data retrieval are logged",
                    "codeSegments": [
                        {
                            "line": 43,
                            "code": "console.error(err);"
                        }
                    ]
                },
                {
                    "summaryComponent": "result in a 500 error response",
                    "codeSegments": [
                        {
                            "line": 44,
                            "code": "res.status(500).send(\"Error fetching stock data\");"
                        }
                    ]
                }
            ],
            "code": "1: const express = require(\"express\");\n2: const cors = require(\"cors\");\n3: const yahooFinance = require(\"yahoo-finance2\").default;\n4: \n5: const app = express();\n6: const PORT = 3000;\n7: \n8: app.use(cors());\n9: app.use(express.json());\n10: \n11: app.get(\"/api/hello\", (req, res) => {\n12:   res.json({ message: \"Hello from the backend!\" });\n13: });\n14: \n15: app.get(\"/api/stock/:symbol\", async (req, res) => {\n16:   try {\n17:     const symbol = req.params.symbol.toUpperCase();\n18:     const data = await yahooFinance.chart(symbol, {\n19:       period1: \"2024-01-01\",\n20:       interval: \"1d\",\n21:     });\n22:     const quotes = data.quotes;\n23: \n24:     const companyName = data.meta?.shortName || symbol;\n25: \n26:     // Determine current price (last close in quotes array)\n27:     const currentPrice = quotes.length > 0 ? quotes[quotes.length - 1].close : null;\n28: \n29:     const response = {\n30:       ticker: symbol,\n31:       name: companyName,\n32:       currentPrice: currentPrice,\n33:       data: quotes.map((q) => ({\n34:         date: q.date,\n35:         close: q.close,\n36:         volume: q.volume,\n37:       })),\n38:     };\n39: \n40:     console.log(response);\n41:     res.json(response);\n42:   } catch (err) {\n43:     console.error(err);\n44:     res.status(500).send(\"Error fetching stock data\");\n45:   }\n46: });\n47: \n48: app.listen(PORT, \"0.0.0.0\", () => {\n49:   console.log(`Server running on http://localhost:${PORT}`);\n50: });",
            "summary": "This code defines an Express server that listens on port 3000 and is configured to handle CORS and JSON payloads. It exposes two endpoints: '/api/hello', which returns a static greeting message, and '/api/stock/:symbol', which retrieves daily stock chart data for a given symbol from Yahoo Finance starting from January 1, 2024. The stock endpoint processes the symbol, fetches the data, extracts the company name and daily quotes (date, close, volume), and now also includes the current price (last close) in the structured JSON response. Errors during data retrieval are logged and result in a 500 error response."
        },
        "source": "backend",
        "event": "map_summary_code",
        "timestamp": "2025-08-23 16:17:00.000",
        "id": "DbMZF1XgaKgsYpvAGRGD"
    },
    {
        "data": {
            "section_data": {
                "lines": [
                    1,
                    50
                ],
                "title": "Express Server Providing Stock Data with Current Price and Hello Endpoint",
                "summaryData": {
                    "medium_unstructured": "The code initializes an Express server that listens on port 3000 and supports CORS and JSON requests. It provides a '/api/hello' endpoint returning a greeting and a '/api/stock/:symbol' endpoint that fetches daily stock data from Yahoo Finance starting from January 1, 2024. The stock endpoint now returns the ticker, company name, the current price (last close), and an array of daily date, close price, and volume.",
                    "title": "Express Server Providing Stock Data with Current Price and Hello Endpoint",
                    "medium_structured": "• Initializes an Express server on port 3000\n• Enables CORS and JSON body parsing\n• Provides two endpoints:\n  ◦ '/api/hello' returns a greeting message\n  ◦ '/api/stock/:symbol' fetches stock chart data from Yahoo Finance\n• Stock endpoint responds with ticker, company name, current price, and daily close/volume data",
                    "low_structured": "• Sets up an Express server\n• Provides endpoints for hello and stock data\n• Uses Yahoo Finance API for stock info\n• Stock data response now includes the current price",
                    "low_unstructured": "This code sets up an Express server with endpoints for a hello message and fetching stock data, now including the current price in the stock data response.",
                    "high_unstructured": "This code defines an Express server that listens on port 3000 and is configured to handle CORS and JSON payloads. It exposes two endpoints: '/api/hello', which returns a static greeting message, and '/api/stock/:symbol', which retrieves daily stock chart data for a given symbol from Yahoo Finance starting from January 1, 2024. The stock endpoint processes the symbol, fetches the data, extracts the company name and daily quotes (date, close, volume), and now also includes the current price (last close) in the structured JSON response. Errors during data retrieval are logged and result in a 500 error response.",
                    "high_structured": "• Sets up an Express server listening on port 3000\n• Middleware:\n  ◦ Enables CORS for cross-origin requests\n  ◦ Parses incoming JSON payloads\n• Defines endpoints:\n  ◦ '/api/hello': returns a JSON greeting message\n  ◦ '/api/stock/:symbol':\n    ◦ Extracts and uppercases the stock symbol from the URL\n    ◦ Fetches daily stock data from Yahoo Finance starting 2024-01-01\n    ◦ Extracts company name (if available), current price (last close), and daily quotes (date, close, volume)\n    ◦ Responds with a JSON object containing ticker, name, current price, and an array of daily data\n    ◦ Handles errors by logging and sending a 500 response\n• Logs server startup and stock data responses to the console"
                },
                "oldSummaryData": {
                    "medium_unstructured": "The code initializes an Express server that listens on port 3000 and supports CORS and JSON requests. It provides a '/api/hello' endpoint returning a greeting and a '/api/stock/:symbol' endpoint that fetches daily stock data from Yahoo Finance starting from January 1, 2024. The stock endpoint returns the ticker, company name, and an array of daily date, close price, and volume.",
                    "title": "Express Server Providing Stock Data and Hello Endpoint",
                    "medium_structured": "• Initializes an Express server on port 3000\n• Enables CORS and JSON body parsing\n• Provides two endpoints:\n  ◦ '/api/hello' returns a greeting message\n  ◦ '/api/stock/:symbol' fetches stock chart data from Yahoo Finance\n• Stock endpoint responds with ticker, company name, and daily close/volume data",
                    "low_structured": "• Sets up an Express server\n• Provides endpoints for hello and stock data\n• Uses Yahoo Finance API for stock info",
                    "low_unstructured": "This code sets up an Express server with endpoints for a hello message and fetching stock data.",
                    "high_unstructured": "This code defines an Express server that listens on port 3000 and is configured to handle CORS and JSON payloads. It exposes two endpoints: '/api/hello', which returns a static greeting message, and '/api/stock/:symbol', which retrieves daily stock chart data for a given symbol from Yahoo Finance starting from January 1, 2024. The stock endpoint processes the symbol, fetches the data, extracts the company name and daily quotes (date, close, volume), and returns this information as a structured JSON response. Errors during data retrieval are logged and result in a 500 error response.",
                    "high_structured": "• Sets up an Express server listening on port 3000\n• Middleware:\n  ◦ Enables CORS for cross-origin requests\n  ◦ Parses incoming JSON payloads\n• Defines endpoints:\n  ◦ '/api/hello': returns a JSON greeting message\n  ◦ '/api/stock/:symbol':\n    ◦ Extracts and uppercases the stock symbol from the URL\n    ◦ Fetches daily stock data from Yahoo Finance starting 2024-01-01\n    ◦ Extracts company name (if available) and daily quotes (date, close, volume)\n    ◦ Responds with a JSON object containing ticker, name, and an array of daily data\n    ◦ Handles errors by logging and sending a 500 response\n• Logs server startup and stock data responses to the console"
                },
                "editPromptDetailLevel": null,
                "metadata": {
                    "fullPath": "/project/workspace/server/index.js",
                    "id": "68a67bb9-9e4d-4b3c-bad6-fd1ef6ce480c",
                    "filename": "index.js",
                    "offset": 0,
                    "originalCode": "const express = require(\"express\");\nconst cors = require(\"cors\");\nconst yahooFinance = require(\"yahoo-finance2\").default;\n\nconst app = express();\nconst PORT = 3000;\n\napp.use(cors());\napp.use(express.json());\n\napp.get(\"/api/hello\", (req, res) => {\n  res.json({ message: \"Hello from the backend!\" });\n});\n\napp.get(\"/api/stock/:symbol\", async (req, res) => {\n  try {\n    const symbol = req.params.symbol.toUpperCase();\n    const data = await yahooFinance.chart(symbol, {\n      period1: \"2024-01-01\",\n      interval: \"1d\",\n    });\n    const quotes = data.quotes;\n\n    const companyName = data.meta?.shortName || symbol;\n\n    // Determine current price (last close in quotes array)\n    const currentPrice = quotes.length > 0 ? quotes[quotes.length - 1].close : null;\n\n    const response = {\n      ticker: symbol,\n      name: companyName,\n      currentPrice: currentPrice,\n      data: quotes.map((q) => ({\n        date: q.date,\n        close: q.close,\n        volume: q.volume,\n      })),\n    };\n\n    console.log(response);\n    res.json(response);\n  } catch (err) {\n    console.error(err);\n    res.status(500).send(\"Error fetching stock data\");\n  }\n});\n\napp.listen(PORT, \"0.0.0.0\", () => {\n  console.log(`Server running on http://localhost:${PORT}`);\n});"
                },
                "editPromptStructured": null,
                "summaryMappings": {
                    "medium_unstructured": [
                        {
                            "summaryComponent": "initializes an Express server",
                            "codeSegments": [
                                {
                                    "line": 5,
                                    "code": "const app = express();"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "listens on port 3000",
                            "codeSegments": [
                                {
                                    "line": 6,
                                    "code": "const PORT = 3000;"
                                },
                                {
                                    "line": 48,
                                    "code": "app.listen(PORT, \"0.0.0.0\", () => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "supports CORS and JSON requests",
                            "codeSegments": [
                                {
                                    "line": 8,
                                    "code": "app.use(cors());"
                                },
                                {
                                    "line": 9,
                                    "code": "app.use(express.json());"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "provides a '/api/hello' endpoint returning a greeting",
                            "codeSegments": [
                                {
                                    "line": 11,
                                    "code": "app.get(\"/api/hello\", (req, res) => {"
                                },
                                {
                                    "line": 12,
                                    "code": "res.json({ message: \"Hello from the backend!\" });"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "a '/api/stock/:symbol' endpoint that fetches daily stock data from Yahoo Finance starting from January 1, 2024",
                            "codeSegments": [
                                {
                                    "line": 15,
                                    "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                                },
                                {
                                    "line": 18,
                                    "code": "const data = await yahooFinance.chart(symbol, {"
                                },
                                {
                                    "line": 19,
                                    "code": "period1: \"2024-01-01\","
                                },
                                {
                                    "line": 20,
                                    "code": "interval: \"1d\","
                                }
                            ]
                        },
                        {
                            "summaryComponent": "returns the ticker",
                            "codeSegments": [
                                {
                                    "line": 30,
                                    "code": "ticker: symbol,"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "company name",
                            "codeSegments": [
                                {
                                    "line": 24,
                                    "code": "const companyName = data.meta?.shortName || symbol;"
                                },
                                {
                                    "line": 31,
                                    "code": "name: companyName,"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "the current price (last close)",
                            "codeSegments": [
                                {
                                    "line": 27,
                                    "code": "const currentPrice = quotes.length > 0 ? quotes[quotes.length - 1].close : null;"
                                },
                                {
                                    "line": 32,
                                    "code": "currentPrice: currentPrice,"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "an array of daily date, close price, and volume",
                            "codeSegments": [
                                {
                                    "line": 33,
                                    "code": "data: quotes.map((q) => ({"
                                },
                                {
                                    "line": 34,
                                    "code": "date: q.date,"
                                },
                                {
                                    "line": 35,
                                    "code": "close: q.close,"
                                },
                                {
                                    "line": 36,
                                    "code": "volume: q.volume,"
                                }
                            ]
                        }
                    ],
                    "medium_structured": [
                        {
                            "summaryComponent": "Initializes an Express server on port 3000",
                            "codeSegments": [
                                {
                                    "line": 5,
                                    "code": "const app = express();"
                                },
                                {
                                    "line": 6,
                                    "code": "const PORT = 3000;"
                                },
                                {
                                    "line": 48,
                                    "code": "app.listen(PORT, \"0.0.0.0\", () => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Enables CORS and JSON body parsing",
                            "codeSegments": [
                                {
                                    "line": 8,
                                    "code": "app.use(cors());"
                                },
                                {
                                    "line": 9,
                                    "code": "app.use(express.json());"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Provides two endpoints:",
                            "codeSegments": [
                                {
                                    "line": 11,
                                    "code": "app.get(\"/api/hello\", (req, res) => {"
                                },
                                {
                                    "line": 15,
                                    "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "'/api/hello' returns a greeting message",
                            "codeSegments": [
                                {
                                    "line": 11,
                                    "code": "app.get(\"/api/hello\", (req, res) => {"
                                },
                                {
                                    "line": 12,
                                    "code": "res.json({ message: \"Hello from the backend!\" });"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "'/api/stock/:symbol' fetches stock chart data from Yahoo Finance",
                            "codeSegments": [
                                {
                                    "line": 15,
                                    "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                                },
                                {
                                    "line": 18,
                                    "code": "const data = await yahooFinance.chart(symbol, {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Stock endpoint responds with ticker, company name, current price, and daily close/volume data",
                            "codeSegments": [
                                {
                                    "line": 29,
                                    "code": "const response = {"
                                },
                                {
                                    "line": 30,
                                    "code": "ticker: symbol,"
                                },
                                {
                                    "line": 31,
                                    "code": "name: companyName,"
                                },
                                {
                                    "line": 32,
                                    "code": "currentPrice: currentPrice,"
                                },
                                {
                                    "line": 33,
                                    "code": "data: quotes.map((q) => ({"
                                },
                                {
                                    "line": 34,
                                    "code": "date: q.date,"
                                },
                                {
                                    "line": 35,
                                    "code": "close: q.close,"
                                },
                                {
                                    "line": 36,
                                    "code": "volume: q.volume,"
                                }
                            ]
                        }
                    ],
                    "low_structured": [
                        {
                            "summaryComponent": "Sets up an Express server",
                            "codeSegments": [
                                {
                                    "line": 1,
                                    "code": "const express = require(\"express\");"
                                },
                                {
                                    "line": 5,
                                    "code": "const app = express();"
                                },
                                {
                                    "line": 48,
                                    "code": "app.listen(PORT, \"0.0.0.0\", () => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Provides endpoints for hello and stock data",
                            "codeSegments": [
                                {
                                    "line": 11,
                                    "code": "app.get(\"/api/hello\", (req, res) => {"
                                },
                                {
                                    "line": 15,
                                    "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Uses Yahoo Finance API for stock info",
                            "codeSegments": [
                                {
                                    "line": 3,
                                    "code": "const yahooFinance = require(\"yahoo-finance2\").default;"
                                },
                                {
                                    "line": 18,
                                    "code": "const data = await yahooFinance.chart(symbol, {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Stock data response now includes the current price",
                            "codeSegments": [
                                {
                                    "line": 27,
                                    "code": "const currentPrice = quotes.length > 0 ? quotes[quotes.length - 1].close : null;"
                                },
                                {
                                    "line": 32,
                                    "code": "currentPrice: currentPrice,"
                                }
                            ]
                        }
                    ],
                    "low_unstructured": [
                        {
                            "summaryComponent": "sets up an Express server",
                            "codeSegments": [
                                {
                                    "line": 1,
                                    "code": "const express = require(\"express\");"
                                },
                                {
                                    "line": 5,
                                    "code": "const app = express();"
                                },
                                {
                                    "line": 48,
                                    "code": "app.listen(PORT, \"0.0.0.0\", () => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "with endpoints for a hello message",
                            "codeSegments": [
                                {
                                    "line": 11,
                                    "code": "app.get(\"/api/hello\", (req, res) => {"
                                },
                                {
                                    "line": 12,
                                    "code": "res.json({ message: \"Hello from the backend!\" });"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "and fetching stock data",
                            "codeSegments": [
                                {
                                    "line": 15,
                                    "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "now including the current price in the stock data response",
                            "codeSegments": [
                                {
                                    "line": 27,
                                    "code": "const currentPrice = quotes.length > 0 ? quotes[quotes.length - 1].close : null;"
                                },
                                {
                                    "line": 32,
                                    "code": "currentPrice: currentPrice,"
                                }
                            ]
                        }
                    ],
                    "high_unstructured": [
                        {
                            "summaryComponent": "an Express server",
                            "codeSegments": [
                                {
                                    "line": 1,
                                    "code": "const express = require(\"express\");"
                                },
                                {
                                    "line": 5,
                                    "code": "const app = express();"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "listens on port 3000",
                            "codeSegments": [
                                {
                                    "line": 6,
                                    "code": "const PORT = 3000;"
                                },
                                {
                                    "line": 48,
                                    "code": "app.listen(PORT, \"0.0.0.0\", () => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "configured to handle CORS and JSON payloads",
                            "codeSegments": [
                                {
                                    "line": 8,
                                    "code": "app.use(cors());"
                                },
                                {
                                    "line": 9,
                                    "code": "app.use(express.json());"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "exposes two endpoints: '/api/hello', which returns a static greeting message, and '/api/stock/:symbol', which retrieves daily stock chart data for a given symbol from Yahoo Finance starting from January 1, 2024.",
                            "codeSegments": [
                                {
                                    "line": 11,
                                    "code": "app.get(\"/api/hello\", (req, res) => {"
                                },
                                {
                                    "line": 12,
                                    "code": "res.json({ message: \"Hello from the backend!\" });"
                                },
                                {
                                    "line": 15,
                                    "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                                },
                                {
                                    "line": 18,
                                    "code": "const data = await yahooFinance.chart(symbol, {"
                                },
                                {
                                    "line": 19,
                                    "code": "period1: \"2024-01-01\","
                                },
                                {
                                    "line": 20,
                                    "code": "interval: \"1d\","
                                }
                            ]
                        },
                        {
                            "summaryComponent": "The stock endpoint processes the symbol",
                            "codeSegments": [
                                {
                                    "line": 17,
                                    "code": "const symbol = req.params.symbol.toUpperCase();"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "fetches the data",
                            "codeSegments": [
                                {
                                    "line": 18,
                                    "code": "const data = await yahooFinance.chart(symbol, {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "extracts the company name and daily quotes (date, close, volume)",
                            "codeSegments": [
                                {
                                    "line": 24,
                                    "code": "const companyName = data.meta?.shortName || symbol;"
                                },
                                {
                                    "line": 22,
                                    "code": "const quotes = data.quotes;"
                                },
                                {
                                    "line": 33,
                                    "code": "data: quotes.map((q) => ({"
                                },
                                {
                                    "line": 34,
                                    "code": "date: q.date,"
                                },
                                {
                                    "line": 35,
                                    "code": "close: q.close,"
                                },
                                {
                                    "line": 36,
                                    "code": "volume: q.volume,"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "now also includes the current price (last close) in the structured JSON response",
                            "codeSegments": [
                                {
                                    "line": 27,
                                    "code": "const currentPrice = quotes.length > 0 ? quotes[quotes.length - 1].close : null;"
                                },
                                {
                                    "line": 32,
                                    "code": "currentPrice: currentPrice,"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Errors during data retrieval are logged",
                            "codeSegments": [
                                {
                                    "line": 43,
                                    "code": "console.error(err);"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "result in a 500 error response",
                            "codeSegments": [
                                {
                                    "line": 44,
                                    "code": "res.status(500).send(\"Error fetching stock data\");"
                                }
                            ]
                        }
                    ],
                    "high_structured": [
                        {
                            "summaryComponent": "Sets up an Express server listening on port 3000",
                            "codeSegments": [
                                {
                                    "line": 5,
                                    "code": "const app = express();"
                                },
                                {
                                    "line": 6,
                                    "code": "const PORT = 3000;"
                                },
                                {
                                    "line": 48,
                                    "code": "app.listen(PORT, \"0.0.0.0\", () => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Enables CORS for cross-origin requests",
                            "codeSegments": [
                                {
                                    "line": 8,
                                    "code": "app.use(cors());"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Parses incoming JSON payloads",
                            "codeSegments": [
                                {
                                    "line": 9,
                                    "code": "app.use(express.json());"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "'/api/hello': returns a JSON greeting message",
                            "codeSegments": [
                                {
                                    "line": 11,
                                    "code": "app.get(\"/api/hello\", (req, res) => {"
                                },
                                {
                                    "line": 12,
                                    "code": "res.json({ message: \"Hello from the backend!\" });"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Extracts and uppercases the stock symbol from the URL",
                            "codeSegments": [
                                {
                                    "line": 17,
                                    "code": "const symbol = req.params.symbol.toUpperCase();"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Fetches daily stock data from Yahoo Finance starting 2024-01-01",
                            "codeSegments": [
                                {
                                    "line": 18,
                                    "code": "const data = await yahooFinance.chart(symbol, {"
                                },
                                {
                                    "line": 19,
                                    "code": "period1: \"2024-01-01\","
                                },
                                {
                                    "line": 20,
                                    "code": "interval: \"1d\","
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Extracts company name (if available), current price (last close), and daily quotes (date, close, volume)",
                            "codeSegments": [
                                {
                                    "line": 24,
                                    "code": "const companyName = data.meta?.shortName || symbol;"
                                },
                                {
                                    "line": 27,
                                    "code": "const currentPrice = quotes.length > 0 ? quotes[quotes.length - 1].close : null;"
                                },
                                {
                                    "line": 33,
                                    "code": "data: quotes.map((q) => ({"
                                },
                                {
                                    "line": 34,
                                    "code": "date: q.date,"
                                },
                                {
                                    "line": 35,
                                    "code": "close: q.close,"
                                },
                                {
                                    "line": 36,
                                    "code": "volume: q.volume,"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Responds with a JSON object containing ticker, name, current price, and an array of daily data",
                            "codeSegments": [
                                {
                                    "line": 29,
                                    "code": "const response = {"
                                },
                                {
                                    "line": 41,
                                    "code": "res.json(response);"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Handles errors by logging and sending a 500 response",
                            "codeSegments": [
                                {
                                    "line": 43,
                                    "code": "console.error(err);"
                                },
                                {
                                    "line": 44,
                                    "code": "res.status(500).send(\"Error fetching stock data\");"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Logs server startup and stock data responses to the console",
                            "codeSegments": [
                                {
                                    "line": 40,
                                    "code": "console.log(response);"
                                },
                                {
                                    "line": 49,
                                    "code": "console.log(`Server running on http://localhost:${PORT}`);"
                                }
                            ]
                        }
                    ]
                },
                "selectedStructured": "unstructured",
                "createdAt": 1755994620000,
                "editPromptValue": "",
                "selectedDetailLevel": "medium"
            },
            "section_id": "68a67bb9-9e4d-4b3c-bad6-fd1ef6ce480c"
        },
        "source": "frontend",
        "event": "create_new_section",
        "timestamp": "2025-08-23 16:17:00.000",
        "id": "b0MXWeNXquOW7lYyjHsV"
    },
    {
        "data": {
            "after_section_id": "68a67bb9-9e4d-4b3c-bad6-fd1ef6ce480c",
            "before_section_id": "8bf52ed5-f13f-4418-8f60-de178155ab06"
        },
        "source": "frontend",
        "event": "autotransit_section",
        "timestamp": "2025-08-23 16:17:00.000",
        "id": "bM2Kv19fBjSX0R3bfui6"
    },
    {
        "data": {},
        "source": "frontend",
        "event": "click_summarize_code",
        "timestamp": "2025-08-23 16:17:28.000",
        "id": "vtStssKGq02Gej5J1xTG"
    },
    {
        "data": {
            "after_section_id": null,
            "before_section_id": "68a67bb9-9e4d-4b3c-bad6-fd1ef6ce480c"
        },
        "source": "frontend",
        "event": "toggle_section",
        "timestamp": "2025-08-23 16:17:29.000",
        "id": "YNZdlTvCFfEONil2ZwXD"
    },
    {
        "data": {
            "selected_code": "import React from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  ReferenceLine,\n} from \"recharts\";\n\nconst StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    const d = new Date(date);\n    return d.toLocaleString(\"default\", { month: \"short\", day: \"numeric\" });\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  // Get unique months for ticks\n  const monthTicks = Array.from(\n    new Set(\n      chartData.map((item) => {\n        const d = new Date(item.date);\n        return `${d.getFullYear()}-${d.getMonth()}`;\n      })\n    )\n  )\n    .map((key) => {\n      // Find the first date in chartData matching this month\n      const match = chartData.find((item) => {\n        const d = new Date(item.date);\n        return `${d.getFullYear()}-${d.getMonth()}` === key;\n      });\n      return match ? match.date : null;\n    })\n    .filter(Boolean);\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis\n            dataKey=\"date\"\n            ticks={monthTicks}\n            tickFormatter={(date) => {\n              const d = new Date(date);\n              return d.toLocaleString(\"default\", { month: \"short\" });\n            }}\n          />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;\n",
            "summary": {
                "medium_unstructured": "The code implements a React component called StockChart that visualizes stock price data as a line chart. It processes input data, formats it for display, and uses Recharts components to render the chart. The component also displays the company name and ticker above the chart.",
                "title": "StockChart React Component for Rendering Stock Price Line Charts",
                "medium_structured": "• Defines a StockChart React component to display stock prices\n• Processes input data to extract dates and closing prices\n• Uses Recharts components (LineChart, XAxis, YAxis, etc.) for visualization\n• Displays company name and ticker above the chart",
                "low_structured": "• React component renders a stock price line chart\n• Uses Recharts for chart visualization\n• Displays company name and ticker",
                "low_unstructured": "This code defines a React component that displays a line chart of stock prices using the Recharts library.",
                "high_unstructured": "This code defines a StockChart React component that visualizes stock price data as a line chart using the Recharts library. It first checks for valid input data, then extracts and formats the company name, ticker, and relevant price data. The component processes the data to generate chart points and unique monthly ticks for the X-axis, and formats date labels for better readability. The rendered chart includes axes, tooltips, a legend, and a stylized line, all wrapped in a responsive container with the company name and ticker displayed above.",
                "high_structured": "• Defines a StockChart React component for visualizing stock price data\n• Validates input data to ensure required fields are present\n• Extracts company name and ticker from input\n• Processes data for charting:\n  ◦ Maps raw data to objects with date and closing price\n  ◦ Generates unique month-based ticks for the X-axis\n  ◦ Formats date strings for axis labels\n• Utilizes Recharts components:\n  ◦ ResponsiveContainer for adaptive sizing\n  ◦ LineChart, XAxis, YAxis, Tooltip, Legend, and Line for chart rendering\n• Renders the company name and ticker above the chart\n• Styles the chart container with a top margin"
            }
        },
        "source": "backend",
        "event": "summarize_selected_code",
        "timestamp": "2025-08-23 16:17:33.000",
        "id": "6H0GscWbUudCnnQN4djS"
    },
    {
        "data": {
            "mapping": [
                {
                    "summaryComponent": "React component renders a stock price line chart",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        },
                        {
                            "line": 55,
                            "code": "<LineChart"
                        },
                        {
                            "line": 70,
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                        }
                    ]
                },
                {
                    "summaryComponent": "Uses Recharts for chart visualization",
                    "codeSegments": [
                        {
                            "line": 2,
                            "code": "import {"
                        },
                        {
                            "line": 3,
                            "code": "LineChart,"
                        },
                        {
                            "line": 4,
                            "code": "Line,"
                        },
                        {
                            "line": 5,
                            "code": "XAxis,"
                        },
                        {
                            "line": 6,
                            "code": "YAxis,"
                        },
                        {
                            "line": 7,
                            "code": "Tooltip,"
                        },
                        {
                            "line": 8,
                            "code": "Legend,"
                        },
                        {
                            "line": 9,
                            "code": "ResponsiveContainer,"
                        },
                        {
                            "line": 10,
                            "code": "ReferenceLine,"
                        },
                        {
                            "line": 11,
                            "code": "} from \"recharts\";"
                        }
                    ]
                },
                {
                    "summaryComponent": "Displays company name and ticker",
                    "codeSegments": [
                        {
                            "line": 51,
                            "code": "<h3>"
                        },
                        {
                            "line": 52,
                            "code": "{company} ({ticker})"
                        }
                    ]
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     const d = new Date(date);\n21:     return d.toLocaleString(\"default\", { month: \"short\", day: \"numeric\" });\n22:   };\n23: \n24:   // Combine labels and values into an array of objects for Recharts\n25:   const chartData = data.data.map((item) => ({\n26:     date: item.date,\n27:     price: item.close,\n28:   }));\n29: \n30:   // Get unique months for ticks\n31:   const monthTicks = Array.from(\n32:     new Set(\n33:       chartData.map((item) => {\n34:         const d = new Date(item.date);\n35:         return `${d.getFullYear()}-${d.getMonth()}`;\n36:       })\n37:     )\n38:   )\n39:     .map((key) => {\n40:       // Find the first date in chartData matching this month\n41:       const match = chartData.find((item) => {\n42:         const d = new Date(item.date);\n43:         return `${d.getFullYear()}-${d.getMonth()}` === key;\n44:       });\n45:       return match ? match.date : null;\n46:     })\n47:     .filter(Boolean);\n48: \n49:   return (\n50:     <div style={{ marginTop: \"2rem\" }}>\n51:       <h3>\n52:         {company} ({ticker})\n53:       </h3>\n54:       <ResponsiveContainer width=\"100%\" height={300}>\n55:         <LineChart\n56:           data={chartData}\n57:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n58:         >\n59:           <XAxis\n60:             dataKey=\"date\"\n61:             ticks={monthTicks}\n62:             tickFormatter={(date) => {\n63:               const d = new Date(date);\n64:               return d.toLocaleString(\"default\", { month: \"short\" });\n65:             }}\n66:           />\n67:           <YAxis domain={[\"auto\", \"auto\"]} />\n68:           <Tooltip />\n69:           <Legend />\n70:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n71:         </LineChart>\n72:       </ResponsiveContainer>\n73:     </div>\n74:   );\n75: };\n76: \n77: export default StockChart;\n78: ",
            "summary": "• React component renders a stock price line chart\n• Uses Recharts for chart visualization\n• Displays company name and ticker"
        },
        "source": "backend",
        "event": "map_summary_code",
        "timestamp": "2025-08-23 16:17:35.000",
        "id": "Pu47kcat4CZ9jOVVuEp3"
    },
    {
        "data": {
            "mapping": [
                {
                    "summaryComponent": "defines a React component",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "displays a line chart",
                    "codeSegments": [
                        {
                            "line": 55,
                            "code": "<LineChart"
                        },
                        {
                            "line": 70,
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                        }
                    ]
                },
                {
                    "summaryComponent": "of stock prices",
                    "codeSegments": [
                        {
                            "line": 27,
                            "code": "price: item.close,"
                        },
                        {
                            "line": 70,
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                        }
                    ]
                },
                {
                    "summaryComponent": "using the Recharts library",
                    "codeSegments": [
                        {
                            "line": 2,
                            "code": "import {"
                        },
                        {
                            "line": 3,
                            "code": "LineChart,"
                        },
                        {
                            "line": 4,
                            "code": "Line,"
                        },
                        {
                            "line": 5,
                            "code": "XAxis,"
                        },
                        {
                            "line": 6,
                            "code": "YAxis,"
                        },
                        {
                            "line": 7,
                            "code": "Tooltip,"
                        },
                        {
                            "line": 8,
                            "code": "Legend,"
                        },
                        {
                            "line": 9,
                            "code": "ResponsiveContainer,"
                        },
                        {
                            "line": 10,
                            "code": "ReferenceLine,"
                        },
                        {
                            "line": 11,
                            "code": "} from \"recharts\";"
                        }
                    ]
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     const d = new Date(date);\n21:     return d.toLocaleString(\"default\", { month: \"short\", day: \"numeric\" });\n22:   };\n23: \n24:   // Combine labels and values into an array of objects for Recharts\n25:   const chartData = data.data.map((item) => ({\n26:     date: item.date,\n27:     price: item.close,\n28:   }));\n29: \n30:   // Get unique months for ticks\n31:   const monthTicks = Array.from(\n32:     new Set(\n33:       chartData.map((item) => {\n34:         const d = new Date(item.date);\n35:         return `${d.getFullYear()}-${d.getMonth()}`;\n36:       })\n37:     )\n38:   )\n39:     .map((key) => {\n40:       // Find the first date in chartData matching this month\n41:       const match = chartData.find((item) => {\n42:         const d = new Date(item.date);\n43:         return `${d.getFullYear()}-${d.getMonth()}` === key;\n44:       });\n45:       return match ? match.date : null;\n46:     })\n47:     .filter(Boolean);\n48: \n49:   return (\n50:     <div style={{ marginTop: \"2rem\" }}>\n51:       <h3>\n52:         {company} ({ticker})\n53:       </h3>\n54:       <ResponsiveContainer width=\"100%\" height={300}>\n55:         <LineChart\n56:           data={chartData}\n57:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n58:         >\n59:           <XAxis\n60:             dataKey=\"date\"\n61:             ticks={monthTicks}\n62:             tickFormatter={(date) => {\n63:               const d = new Date(date);\n64:               return d.toLocaleString(\"default\", { month: \"short\" });\n65:             }}\n66:           />\n67:           <YAxis domain={[\"auto\", \"auto\"]} />\n68:           <Tooltip />\n69:           <Legend />\n70:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n71:         </LineChart>\n72:       </ResponsiveContainer>\n73:     </div>\n74:   );\n75: };\n76: \n77: export default StockChart;\n78: ",
            "summary": "This code defines a React component that displays a line chart of stock prices using the Recharts library."
        },
        "source": "backend",
        "event": "map_summary_code",
        "timestamp": "2025-08-23 16:17:35.000",
        "id": "WNdTsqKYg3GMcnXa1TRV"
    },
    {
        "data": {
            "mapping": [
                {
                    "summaryComponent": "a React component called StockChart",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "visualizes stock price data as a line chart",
                    "codeSegments": [
                        {
                            "line": 55,
                            "code": "<LineChart"
                        },
                        {
                            "line": 70,
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                        }
                    ]
                },
                {
                    "summaryComponent": "processes input data",
                    "codeSegments": [
                        {
                            "line": 25,
                            "code": "const chartData = data.data.map((item) => ({"
                        },
                        {
                            "line": 26,
                            "code": "date: item.date,"
                        },
                        {
                            "line": 27,
                            "code": "price: item.close,"
                        }
                    ]
                },
                {
                    "summaryComponent": "formats it for display",
                    "codeSegments": [
                        {
                            "line": 19,
                            "code": "const formatDateString = (date) => {"
                        },
                        {
                            "line": 21,
                            "code": "return d.toLocaleString(\"default\", { month: \"short\", day: \"numeric\" });"
                        }
                    ]
                },
                {
                    "summaryComponent": "uses Recharts components to render the chart",
                    "codeSegments": [
                        {
                            "line": 2,
                            "code": "import {"
                        },
                        {
                            "line": 3,
                            "code": "LineChart,"
                        },
                        {
                            "line": 4,
                            "code": "Line,"
                        },
                        {
                            "line": 5,
                            "code": "XAxis,"
                        },
                        {
                            "line": 6,
                            "code": "YAxis,"
                        },
                        {
                            "line": 7,
                            "code": "Tooltip,"
                        },
                        {
                            "line": 8,
                            "code": "Legend,"
                        },
                        {
                            "line": 9,
                            "code": "ResponsiveContainer,"
                        },
                        {
                            "line": 10,
                            "code": "ReferenceLine,"
                        }
                    ]
                },
                {
                    "summaryComponent": "displays the company name and ticker above the chart",
                    "codeSegments": [
                        {
                            "line": 51,
                            "code": "<h3>"
                        },
                        {
                            "line": 52,
                            "code": "{company} ({ticker})"
                        }
                    ]
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     const d = new Date(date);\n21:     return d.toLocaleString(\"default\", { month: \"short\", day: \"numeric\" });\n22:   };\n23: \n24:   // Combine labels and values into an array of objects for Recharts\n25:   const chartData = data.data.map((item) => ({\n26:     date: item.date,\n27:     price: item.close,\n28:   }));\n29: \n30:   // Get unique months for ticks\n31:   const monthTicks = Array.from(\n32:     new Set(\n33:       chartData.map((item) => {\n34:         const d = new Date(item.date);\n35:         return `${d.getFullYear()}-${d.getMonth()}`;\n36:       })\n37:     )\n38:   )\n39:     .map((key) => {\n40:       // Find the first date in chartData matching this month\n41:       const match = chartData.find((item) => {\n42:         const d = new Date(item.date);\n43:         return `${d.getFullYear()}-${d.getMonth()}` === key;\n44:       });\n45:       return match ? match.date : null;\n46:     })\n47:     .filter(Boolean);\n48: \n49:   return (\n50:     <div style={{ marginTop: \"2rem\" }}>\n51:       <h3>\n52:         {company} ({ticker})\n53:       </h3>\n54:       <ResponsiveContainer width=\"100%\" height={300}>\n55:         <LineChart\n56:           data={chartData}\n57:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n58:         >\n59:           <XAxis\n60:             dataKey=\"date\"\n61:             ticks={monthTicks}\n62:             tickFormatter={(date) => {\n63:               const d = new Date(date);\n64:               return d.toLocaleString(\"default\", { month: \"short\" });\n65:             }}\n66:           />\n67:           <YAxis domain={[\"auto\", \"auto\"]} />\n68:           <Tooltip />\n69:           <Legend />\n70:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n71:         </LineChart>\n72:       </ResponsiveContainer>\n73:     </div>\n74:   );\n75: };\n76: \n77: export default StockChart;\n78: ",
            "summary": "The code implements a React component called StockChart that visualizes stock price data as a line chart. It processes input data, formats it for display, and uses Recharts components to render the chart. The component also displays the company name and ticker above the chart."
        },
        "source": "backend",
        "event": "map_summary_code",
        "timestamp": "2025-08-23 16:17:36.000",
        "id": "6lqEqfDG82wB8Y9ZJU6O"
    },
    {
        "data": {
            "mapping": [
                {
                    "summaryComponent": "Defines a StockChart React component for visualizing stock price data",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "Validates input data to ensure required fields are present",
                    "codeSegments": [
                        {
                            "line": 14,
                            "code": "if (!data || !data.data || !data.data.length) return null;"
                        }
                    ]
                },
                {
                    "summaryComponent": "Extracts company name and ticker from input",
                    "codeSegments": [
                        {
                            "line": 16,
                            "code": "const company = data.name;"
                        },
                        {
                            "line": 17,
                            "code": "const ticker = data.ticker;"
                        }
                    ]
                },
                {
                    "summaryComponent": "Maps raw data to objects with date and closing price",
                    "codeSegments": [
                        {
                            "line": 25,
                            "code": "const chartData = data.data.map((item) => ({"
                        },
                        {
                            "line": 26,
                            "code": "date: item.date,"
                        },
                        {
                            "line": 27,
                            "code": "price: item.close,"
                        }
                    ]
                },
                {
                    "summaryComponent": "Generates unique month-based ticks for the X-axis",
                    "codeSegments": [
                        {
                            "line": 31,
                            "code": "const monthTicks = Array.from("
                        }
                    ]
                },
                {
                    "summaryComponent": "Formats date strings for axis labels",
                    "codeSegments": [
                        {
                            "line": 19,
                            "code": "const formatDateString = (date) => {"
                        },
                        {
                            "line": 21,
                            "code": "return d.toLocaleString(\"default\", { month: \"short\", day: \"numeric\" });"
                        }
                    ]
                },
                {
                    "summaryComponent": "ResponsiveContainer for adaptive sizing",
                    "codeSegments": [
                        {
                            "line": 54,
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                        }
                    ]
                },
                {
                    "summaryComponent": "LineChart, XAxis, YAxis, Tooltip, Legend, and Line for chart rendering",
                    "codeSegments": [
                        {
                            "line": 55,
                            "code": "<LineChart"
                        },
                        {
                            "line": 59,
                            "code": "<XAxis"
                        },
                        {
                            "line": 67,
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                        },
                        {
                            "line": 68,
                            "code": "<Tooltip />"
                        },
                        {
                            "line": 69,
                            "code": "<Legend />"
                        },
                        {
                            "line": 70,
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                        }
                    ]
                },
                {
                    "summaryComponent": "Renders the company name and ticker above the chart",
                    "codeSegments": [
                        {
                            "line": 51,
                            "code": "<h3>"
                        },
                        {
                            "line": 52,
                            "code": "{company} ({ticker})"
                        }
                    ]
                },
                {
                    "summaryComponent": "Styles the chart container with a top margin",
                    "codeSegments": [
                        {
                            "line": 50,
                            "code": "<div style={{ marginTop: \"2rem\" }}>"
                        }
                    ]
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     const d = new Date(date);\n21:     return d.toLocaleString(\"default\", { month: \"short\", day: \"numeric\" });\n22:   };\n23: \n24:   // Combine labels and values into an array of objects for Recharts\n25:   const chartData = data.data.map((item) => ({\n26:     date: item.date,\n27:     price: item.close,\n28:   }));\n29: \n30:   // Get unique months for ticks\n31:   const monthTicks = Array.from(\n32:     new Set(\n33:       chartData.map((item) => {\n34:         const d = new Date(item.date);\n35:         return `${d.getFullYear()}-${d.getMonth()}`;\n36:       })\n37:     )\n38:   )\n39:     .map((key) => {\n40:       // Find the first date in chartData matching this month\n41:       const match = chartData.find((item) => {\n42:         const d = new Date(item.date);\n43:         return `${d.getFullYear()}-${d.getMonth()}` === key;\n44:       });\n45:       return match ? match.date : null;\n46:     })\n47:     .filter(Boolean);\n48: \n49:   return (\n50:     <div style={{ marginTop: \"2rem\" }}>\n51:       <h3>\n52:         {company} ({ticker})\n53:       </h3>\n54:       <ResponsiveContainer width=\"100%\" height={300}>\n55:         <LineChart\n56:           data={chartData}\n57:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n58:         >\n59:           <XAxis\n60:             dataKey=\"date\"\n61:             ticks={monthTicks}\n62:             tickFormatter={(date) => {\n63:               const d = new Date(date);\n64:               return d.toLocaleString(\"default\", { month: \"short\" });\n65:             }}\n66:           />\n67:           <YAxis domain={[\"auto\", \"auto\"]} />\n68:           <Tooltip />\n69:           <Legend />\n70:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n71:         </LineChart>\n72:       </ResponsiveContainer>\n73:     </div>\n74:   );\n75: };\n76: \n77: export default StockChart;\n78: ",
            "summary": "• Defines a StockChart React component for visualizing stock price data\n• Validates input data to ensure required fields are present\n• Extracts company name and ticker from input\n• Processes data for charting:\n  ◦ Maps raw data to objects with date and closing price\n  ◦ Generates unique month-based ticks for the X-axis\n  ◦ Formats date strings for axis labels\n• Utilizes Recharts components:\n  ◦ ResponsiveContainer for adaptive sizing\n  ◦ LineChart, XAxis, YAxis, Tooltip, Legend, and Line for chart rendering\n• Renders the company name and ticker above the chart\n• Styles the chart container with a top margin"
        },
        "source": "backend",
        "event": "map_summary_code",
        "timestamp": "2025-08-23 16:17:36.000",
        "id": "RFpERbm8BAwPqbetyQ0g"
    },
    {
        "data": {
            "mapping": [
                {
                    "summaryComponent": "Defines a StockChart React component to display stock prices",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "Processes input data to extract dates and closing prices",
                    "codeSegments": [
                        {
                            "line": 25,
                            "code": "const chartData = data.data.map((item) => ({"
                        },
                        {
                            "line": 26,
                            "code": "date: item.date,"
                        },
                        {
                            "line": 27,
                            "code": "price: item.close,"
                        }
                    ]
                },
                {
                    "summaryComponent": "Uses Recharts components (LineChart, XAxis, YAxis, etc.) for visualization",
                    "codeSegments": [
                        {
                            "line": 2,
                            "code": "import {"
                        },
                        {
                            "line": 3,
                            "code": "LineChart,"
                        },
                        {
                            "line": 4,
                            "code": "Line,"
                        },
                        {
                            "line": 5,
                            "code": "XAxis,"
                        },
                        {
                            "line": 6,
                            "code": "YAxis,"
                        },
                        {
                            "line": 7,
                            "code": "Tooltip,"
                        },
                        {
                            "line": 8,
                            "code": "Legend,"
                        },
                        {
                            "line": 9,
                            "code": "ResponsiveContainer,"
                        },
                        {
                            "line": 54,
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                        },
                        {
                            "line": 55,
                            "code": "<LineChart"
                        },
                        {
                            "line": 59,
                            "code": "<XAxis"
                        },
                        {
                            "line": 67,
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                        },
                        {
                            "line": 68,
                            "code": "<Tooltip />"
                        },
                        {
                            "line": 69,
                            "code": "<Legend />"
                        },
                        {
                            "line": 70,
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                        }
                    ]
                },
                {
                    "summaryComponent": "Displays company name and ticker above the chart",
                    "codeSegments": [
                        {
                            "line": 51,
                            "code": "<h3>"
                        },
                        {
                            "line": 52,
                            "code": "{company} ({ticker})"
                        }
                    ]
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     const d = new Date(date);\n21:     return d.toLocaleString(\"default\", { month: \"short\", day: \"numeric\" });\n22:   };\n23: \n24:   // Combine labels and values into an array of objects for Recharts\n25:   const chartData = data.data.map((item) => ({\n26:     date: item.date,\n27:     price: item.close,\n28:   }));\n29: \n30:   // Get unique months for ticks\n31:   const monthTicks = Array.from(\n32:     new Set(\n33:       chartData.map((item) => {\n34:         const d = new Date(item.date);\n35:         return `${d.getFullYear()}-${d.getMonth()}`;\n36:       })\n37:     )\n38:   )\n39:     .map((key) => {\n40:       // Find the first date in chartData matching this month\n41:       const match = chartData.find((item) => {\n42:         const d = new Date(item.date);\n43:         return `${d.getFullYear()}-${d.getMonth()}` === key;\n44:       });\n45:       return match ? match.date : null;\n46:     })\n47:     .filter(Boolean);\n48: \n49:   return (\n50:     <div style={{ marginTop: \"2rem\" }}>\n51:       <h3>\n52:         {company} ({ticker})\n53:       </h3>\n54:       <ResponsiveContainer width=\"100%\" height={300}>\n55:         <LineChart\n56:           data={chartData}\n57:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n58:         >\n59:           <XAxis\n60:             dataKey=\"date\"\n61:             ticks={monthTicks}\n62:             tickFormatter={(date) => {\n63:               const d = new Date(date);\n64:               return d.toLocaleString(\"default\", { month: \"short\" });\n65:             }}\n66:           />\n67:           <YAxis domain={[\"auto\", \"auto\"]} />\n68:           <Tooltip />\n69:           <Legend />\n70:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n71:         </LineChart>\n72:       </ResponsiveContainer>\n73:     </div>\n74:   );\n75: };\n76: \n77: export default StockChart;\n78: ",
            "summary": "• Defines a StockChart React component to display stock prices\n• Processes input data to extract dates and closing prices\n• Uses Recharts components (LineChart, XAxis, YAxis, etc.) for visualization\n• Displays company name and ticker above the chart"
        },
        "source": "backend",
        "event": "map_summary_code",
        "timestamp": "2025-08-23 16:17:36.000",
        "id": "Wh5Sex2o9mqDVGrPgGeG"
    },
    {
        "data": {
            "after_section_id": "90c74804-3995-435f-8f4b-a50c5501ae26",
            "before_section_id": null
        },
        "source": "frontend",
        "event": "autotransit_section",
        "timestamp": "2025-08-23 16:17:39.000",
        "id": "dmZ6w9tqiSJwhcEGKs3z"
    },
    {
        "data": {
            "mapping": [
                {
                    "summaryComponent": "defines a StockChart React component",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "visualizes stock price data as a line chart using the Recharts library",
                    "codeSegments": [
                        {
                            "line": 2,
                            "code": "import {"
                        },
                        {
                            "line": 3,
                            "code": "LineChart,"
                        },
                        {
                            "line": 4,
                            "code": "Line,"
                        },
                        {
                            "line": 5,
                            "code": "XAxis,"
                        },
                        {
                            "line": 6,
                            "code": "YAxis,"
                        },
                        {
                            "line": 7,
                            "code": "Tooltip,"
                        },
                        {
                            "line": 8,
                            "code": "Legend,"
                        },
                        {
                            "line": 9,
                            "code": "ResponsiveContainer,"
                        },
                        {
                            "line": 10,
                            "code": "ReferenceLine,"
                        },
                        {
                            "line": 11,
                            "code": "} from \"recharts\";"
                        },
                        {
                            "line": 54,
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                        },
                        {
                            "line": 55,
                            "code": "<LineChart"
                        },
                        {
                            "line": 70,
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                        }
                    ]
                },
                {
                    "summaryComponent": "checks for valid input data",
                    "codeSegments": [
                        {
                            "line": 14,
                            "code": "if (!data || !data.data || !data.data.length) return null;"
                        }
                    ]
                },
                {
                    "summaryComponent": "extracts and formats the company name, ticker, and relevant price data",
                    "codeSegments": [
                        {
                            "line": 16,
                            "code": "const company = data.name;"
                        },
                        {
                            "line": 17,
                            "code": "const ticker = data.ticker;"
                        },
                        {
                            "line": 25,
                            "code": "const chartData = data.data.map((item) => ({"
                        },
                        {
                            "line": 26,
                            "code": "date: item.date,"
                        },
                        {
                            "line": 27,
                            "code": "price: item.close,"
                        }
                    ]
                },
                {
                    "summaryComponent": "processes the data to generate chart points and unique monthly ticks for the X-axis",
                    "codeSegments": [
                        {
                            "line": 25,
                            "code": "const chartData = data.data.map((item) => ({"
                        },
                        {
                            "line": 31,
                            "code": "const monthTicks = Array.from("
                        }
                    ]
                },
                {
                    "summaryComponent": "formats date labels for better readability",
                    "codeSegments": [
                        {
                            "line": 19,
                            "code": "const formatDateString = (date) => {"
                        },
                        {
                            "line": 21,
                            "code": "return d.toLocaleString(\"default\", { month: \"short\", day: \"numeric\" });"
                        },
                        {
                            "line": 62,
                            "code": "tickFormatter={(date) => {"
                        },
                        {
                            "line": 64,
                            "code": "return d.toLocaleString(\"default\", { month: \"short\" });"
                        }
                    ]
                },
                {
                    "summaryComponent": "rendered chart includes axes, tooltips, a legend, and a stylized line",
                    "codeSegments": [
                        {
                            "line": 59,
                            "code": "<XAxis"
                        },
                        {
                            "line": 67,
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                        },
                        {
                            "line": 68,
                            "code": "<Tooltip />"
                        },
                        {
                            "line": 69,
                            "code": "<Legend />"
                        },
                        {
                            "line": 70,
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                        }
                    ]
                },
                {
                    "summaryComponent": "all wrapped in a responsive container",
                    "codeSegments": [
                        {
                            "line": 54,
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                        }
                    ]
                },
                {
                    "summaryComponent": "with the company name and ticker displayed above",
                    "codeSegments": [
                        {
                            "line": 51,
                            "code": "<h3>"
                        },
                        {
                            "line": 52,
                            "code": "{company} ({ticker})"
                        }
                    ]
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     const d = new Date(date);\n21:     return d.toLocaleString(\"default\", { month: \"short\", day: \"numeric\" });\n22:   };\n23: \n24:   // Combine labels and values into an array of objects for Recharts\n25:   const chartData = data.data.map((item) => ({\n26:     date: item.date,\n27:     price: item.close,\n28:   }));\n29: \n30:   // Get unique months for ticks\n31:   const monthTicks = Array.from(\n32:     new Set(\n33:       chartData.map((item) => {\n34:         const d = new Date(item.date);\n35:         return `${d.getFullYear()}-${d.getMonth()}`;\n36:       })\n37:     )\n38:   )\n39:     .map((key) => {\n40:       // Find the first date in chartData matching this month\n41:       const match = chartData.find((item) => {\n42:         const d = new Date(item.date);\n43:         return `${d.getFullYear()}-${d.getMonth()}` === key;\n44:       });\n45:       return match ? match.date : null;\n46:     })\n47:     .filter(Boolean);\n48: \n49:   return (\n50:     <div style={{ marginTop: \"2rem\" }}>\n51:       <h3>\n52:         {company} ({ticker})\n53:       </h3>\n54:       <ResponsiveContainer width=\"100%\" height={300}>\n55:         <LineChart\n56:           data={chartData}\n57:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n58:         >\n59:           <XAxis\n60:             dataKey=\"date\"\n61:             ticks={monthTicks}\n62:             tickFormatter={(date) => {\n63:               const d = new Date(date);\n64:               return d.toLocaleString(\"default\", { month: \"short\" });\n65:             }}\n66:           />\n67:           <YAxis domain={[\"auto\", \"auto\"]} />\n68:           <Tooltip />\n69:           <Legend />\n70:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n71:         </LineChart>\n72:       </ResponsiveContainer>\n73:     </div>\n74:   );\n75: };\n76: \n77: export default StockChart;\n78: ",
            "summary": "This code defines a StockChart React component that visualizes stock price data as a line chart using the Recharts library. It first checks for valid input data, then extracts and formats the company name, ticker, and relevant price data. The component processes the data to generate chart points and unique monthly ticks for the X-axis, and formats date labels for better readability. The rendered chart includes axes, tooltips, a legend, and a stylized line, all wrapped in a responsive container with the company name and ticker displayed above."
        },
        "source": "backend",
        "event": "map_summary_code",
        "timestamp": "2025-08-23 16:17:39.000",
        "id": "huUuJnSzClVzrdjWCSXd"
    },
    {
        "data": {
            "section_data": {
                "lines": [
                    1,
                    78
                ],
                "title": "StockChart React Component for Rendering Stock Price Line Charts",
                "summaryData": {
                    "medium_unstructured": "The code implements a React component called StockChart that visualizes stock price data as a line chart. It processes input data, formats it for display, and uses Recharts components to render the chart. The component also displays the company name and ticker above the chart.",
                    "title": "StockChart React Component for Rendering Stock Price Line Charts",
                    "medium_structured": "• Defines a StockChart React component to display stock prices\n• Processes input data to extract dates and closing prices\n• Uses Recharts components (LineChart, XAxis, YAxis, etc.) for visualization\n• Displays company name and ticker above the chart",
                    "low_structured": "• React component renders a stock price line chart\n• Uses Recharts for chart visualization\n• Displays company name and ticker",
                    "low_unstructured": "This code defines a React component that displays a line chart of stock prices using the Recharts library.",
                    "high_unstructured": "This code defines a StockChart React component that visualizes stock price data as a line chart using the Recharts library. It first checks for valid input data, then extracts and formats the company name, ticker, and relevant price data. The component processes the data to generate chart points and unique monthly ticks for the X-axis, and formats date labels for better readability. The rendered chart includes axes, tooltips, a legend, and a stylized line, all wrapped in a responsive container with the company name and ticker displayed above.",
                    "high_structured": "• Defines a StockChart React component for visualizing stock price data\n• Validates input data to ensure required fields are present\n• Extracts company name and ticker from input\n• Processes data for charting:\n  ◦ Maps raw data to objects with date and closing price\n  ◦ Generates unique month-based ticks for the X-axis\n  ◦ Formats date strings for axis labels\n• Utilizes Recharts components:\n  ◦ ResponsiveContainer for adaptive sizing\n  ◦ LineChart, XAxis, YAxis, Tooltip, Legend, and Line for chart rendering\n• Renders the company name and ticker above the chart\n• Styles the chart container with a top margin"
                },
                "editPromptDetailLevel": null,
                "summaryMappings": {
                    "medium_unstructured": [
                        {
                            "summaryComponent": "a React component called StockChart",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "visualizes stock price data as a line chart",
                            "codeSegments": [
                                {
                                    "line": 55,
                                    "code": "<LineChart"
                                },
                                {
                                    "line": 70,
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "processes input data",
                            "codeSegments": [
                                {
                                    "line": 25,
                                    "code": "const chartData = data.data.map((item) => ({"
                                },
                                {
                                    "line": 26,
                                    "code": "date: item.date,"
                                },
                                {
                                    "line": 27,
                                    "code": "price: item.close,"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "formats it for display",
                            "codeSegments": [
                                {
                                    "line": 19,
                                    "code": "const formatDateString = (date) => {"
                                },
                                {
                                    "line": 21,
                                    "code": "return d.toLocaleString(\"default\", { month: \"short\", day: \"numeric\" });"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "uses Recharts components to render the chart",
                            "codeSegments": [
                                {
                                    "line": 2,
                                    "code": "import {"
                                },
                                {
                                    "line": 3,
                                    "code": "LineChart,"
                                },
                                {
                                    "line": 4,
                                    "code": "Line,"
                                },
                                {
                                    "line": 5,
                                    "code": "XAxis,"
                                },
                                {
                                    "line": 6,
                                    "code": "YAxis,"
                                },
                                {
                                    "line": 7,
                                    "code": "Tooltip,"
                                },
                                {
                                    "line": 8,
                                    "code": "Legend,"
                                },
                                {
                                    "line": 9,
                                    "code": "ResponsiveContainer,"
                                },
                                {
                                    "line": 10,
                                    "code": "ReferenceLine,"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "displays the company name and ticker above the chart",
                            "codeSegments": [
                                {
                                    "line": 51,
                                    "code": "<h3>"
                                },
                                {
                                    "line": 52,
                                    "code": "{company} ({ticker})"
                                }
                            ]
                        }
                    ],
                    "medium_structured": [
                        {
                            "summaryComponent": "Defines a StockChart React component to display stock prices",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Processes input data to extract dates and closing prices",
                            "codeSegments": [
                                {
                                    "line": 25,
                                    "code": "const chartData = data.data.map((item) => ({"
                                },
                                {
                                    "line": 26,
                                    "code": "date: item.date,"
                                },
                                {
                                    "line": 27,
                                    "code": "price: item.close,"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Uses Recharts components (LineChart, XAxis, YAxis, etc.) for visualization",
                            "codeSegments": [
                                {
                                    "line": 2,
                                    "code": "import {"
                                },
                                {
                                    "line": 3,
                                    "code": "LineChart,"
                                },
                                {
                                    "line": 4,
                                    "code": "Line,"
                                },
                                {
                                    "line": 5,
                                    "code": "XAxis,"
                                },
                                {
                                    "line": 6,
                                    "code": "YAxis,"
                                },
                                {
                                    "line": 7,
                                    "code": "Tooltip,"
                                },
                                {
                                    "line": 8,
                                    "code": "Legend,"
                                },
                                {
                                    "line": 9,
                                    "code": "ResponsiveContainer,"
                                },
                                {
                                    "line": 54,
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                                },
                                {
                                    "line": 55,
                                    "code": "<LineChart"
                                },
                                {
                                    "line": 59,
                                    "code": "<XAxis"
                                },
                                {
                                    "line": 67,
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                                },
                                {
                                    "line": 68,
                                    "code": "<Tooltip />"
                                },
                                {
                                    "line": 69,
                                    "code": "<Legend />"
                                },
                                {
                                    "line": 70,
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Displays company name and ticker above the chart",
                            "codeSegments": [
                                {
                                    "line": 51,
                                    "code": "<h3>"
                                },
                                {
                                    "line": 52,
                                    "code": "{company} ({ticker})"
                                }
                            ]
                        }
                    ],
                    "low_structured": [
                        {
                            "summaryComponent": "React component renders a stock price line chart",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                },
                                {
                                    "line": 55,
                                    "code": "<LineChart"
                                },
                                {
                                    "line": 70,
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Uses Recharts for chart visualization",
                            "codeSegments": [
                                {
                                    "line": 2,
                                    "code": "import {"
                                },
                                {
                                    "line": 3,
                                    "code": "LineChart,"
                                },
                                {
                                    "line": 4,
                                    "code": "Line,"
                                },
                                {
                                    "line": 5,
                                    "code": "XAxis,"
                                },
                                {
                                    "line": 6,
                                    "code": "YAxis,"
                                },
                                {
                                    "line": 7,
                                    "code": "Tooltip,"
                                },
                                {
                                    "line": 8,
                                    "code": "Legend,"
                                },
                                {
                                    "line": 9,
                                    "code": "ResponsiveContainer,"
                                },
                                {
                                    "line": 10,
                                    "code": "ReferenceLine,"
                                },
                                {
                                    "line": 11,
                                    "code": "} from \"recharts\";"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Displays company name and ticker",
                            "codeSegments": [
                                {
                                    "line": 51,
                                    "code": "<h3>"
                                },
                                {
                                    "line": 52,
                                    "code": "{company} ({ticker})"
                                }
                            ]
                        }
                    ],
                    "low_unstructured": [
                        {
                            "summaryComponent": "defines a React component",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "displays a line chart",
                            "codeSegments": [
                                {
                                    "line": 55,
                                    "code": "<LineChart"
                                },
                                {
                                    "line": 70,
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "of stock prices",
                            "codeSegments": [
                                {
                                    "line": 27,
                                    "code": "price: item.close,"
                                },
                                {
                                    "line": 70,
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "using the Recharts library",
                            "codeSegments": [
                                {
                                    "line": 2,
                                    "code": "import {"
                                },
                                {
                                    "line": 3,
                                    "code": "LineChart,"
                                },
                                {
                                    "line": 4,
                                    "code": "Line,"
                                },
                                {
                                    "line": 5,
                                    "code": "XAxis,"
                                },
                                {
                                    "line": 6,
                                    "code": "YAxis,"
                                },
                                {
                                    "line": 7,
                                    "code": "Tooltip,"
                                },
                                {
                                    "line": 8,
                                    "code": "Legend,"
                                },
                                {
                                    "line": 9,
                                    "code": "ResponsiveContainer,"
                                },
                                {
                                    "line": 10,
                                    "code": "ReferenceLine,"
                                },
                                {
                                    "line": 11,
                                    "code": "} from \"recharts\";"
                                }
                            ]
                        }
                    ],
                    "high_unstructured": [
                        {
                            "summaryComponent": "defines a StockChart React component",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "visualizes stock price data as a line chart using the Recharts library",
                            "codeSegments": [
                                {
                                    "line": 2,
                                    "code": "import {"
                                },
                                {
                                    "line": 3,
                                    "code": "LineChart,"
                                },
                                {
                                    "line": 4,
                                    "code": "Line,"
                                },
                                {
                                    "line": 5,
                                    "code": "XAxis,"
                                },
                                {
                                    "line": 6,
                                    "code": "YAxis,"
                                },
                                {
                                    "line": 7,
                                    "code": "Tooltip,"
                                },
                                {
                                    "line": 8,
                                    "code": "Legend,"
                                },
                                {
                                    "line": 9,
                                    "code": "ResponsiveContainer,"
                                },
                                {
                                    "line": 10,
                                    "code": "ReferenceLine,"
                                },
                                {
                                    "line": 11,
                                    "code": "} from \"recharts\";"
                                },
                                {
                                    "line": 54,
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                                },
                                {
                                    "line": 55,
                                    "code": "<LineChart"
                                },
                                {
                                    "line": 70,
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "checks for valid input data",
                            "codeSegments": [
                                {
                                    "line": 14,
                                    "code": "if (!data || !data.data || !data.data.length) return null;"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "extracts and formats the company name, ticker, and relevant price data",
                            "codeSegments": [
                                {
                                    "line": 16,
                                    "code": "const company = data.name;"
                                },
                                {
                                    "line": 17,
                                    "code": "const ticker = data.ticker;"
                                },
                                {
                                    "line": 25,
                                    "code": "const chartData = data.data.map((item) => ({"
                                },
                                {
                                    "line": 26,
                                    "code": "date: item.date,"
                                },
                                {
                                    "line": 27,
                                    "code": "price: item.close,"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "processes the data to generate chart points and unique monthly ticks for the X-axis",
                            "codeSegments": [
                                {
                                    "line": 25,
                                    "code": "const chartData = data.data.map((item) => ({"
                                },
                                {
                                    "line": 31,
                                    "code": "const monthTicks = Array.from("
                                }
                            ]
                        },
                        {
                            "summaryComponent": "formats date labels for better readability",
                            "codeSegments": [
                                {
                                    "line": 19,
                                    "code": "const formatDateString = (date) => {"
                                },
                                {
                                    "line": 21,
                                    "code": "return d.toLocaleString(\"default\", { month: \"short\", day: \"numeric\" });"
                                },
                                {
                                    "line": 62,
                                    "code": "tickFormatter={(date) => {"
                                },
                                {
                                    "line": 64,
                                    "code": "return d.toLocaleString(\"default\", { month: \"short\" });"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "rendered chart includes axes, tooltips, a legend, and a stylized line",
                            "codeSegments": [
                                {
                                    "line": 59,
                                    "code": "<XAxis"
                                },
                                {
                                    "line": 67,
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                                },
                                {
                                    "line": 68,
                                    "code": "<Tooltip />"
                                },
                                {
                                    "line": 69,
                                    "code": "<Legend />"
                                },
                                {
                                    "line": 70,
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "all wrapped in a responsive container",
                            "codeSegments": [
                                {
                                    "line": 54,
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "with the company name and ticker displayed above",
                            "codeSegments": [
                                {
                                    "line": 51,
                                    "code": "<h3>"
                                },
                                {
                                    "line": 52,
                                    "code": "{company} ({ticker})"
                                }
                            ]
                        }
                    ],
                    "high_structured": [
                        {
                            "summaryComponent": "Defines a StockChart React component for visualizing stock price data",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Validates input data to ensure required fields are present",
                            "codeSegments": [
                                {
                                    "line": 14,
                                    "code": "if (!data || !data.data || !data.data.length) return null;"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Extracts company name and ticker from input",
                            "codeSegments": [
                                {
                                    "line": 16,
                                    "code": "const company = data.name;"
                                },
                                {
                                    "line": 17,
                                    "code": "const ticker = data.ticker;"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Maps raw data to objects with date and closing price",
                            "codeSegments": [
                                {
                                    "line": 25,
                                    "code": "const chartData = data.data.map((item) => ({"
                                },
                                {
                                    "line": 26,
                                    "code": "date: item.date,"
                                },
                                {
                                    "line": 27,
                                    "code": "price: item.close,"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Generates unique month-based ticks for the X-axis",
                            "codeSegments": [
                                {
                                    "line": 31,
                                    "code": "const monthTicks = Array.from("
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Formats date strings for axis labels",
                            "codeSegments": [
                                {
                                    "line": 19,
                                    "code": "const formatDateString = (date) => {"
                                },
                                {
                                    "line": 21,
                                    "code": "return d.toLocaleString(\"default\", { month: \"short\", day: \"numeric\" });"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "ResponsiveContainer for adaptive sizing",
                            "codeSegments": [
                                {
                                    "line": 54,
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "LineChart, XAxis, YAxis, Tooltip, Legend, and Line for chart rendering",
                            "codeSegments": [
                                {
                                    "line": 55,
                                    "code": "<LineChart"
                                },
                                {
                                    "line": 59,
                                    "code": "<XAxis"
                                },
                                {
                                    "line": 67,
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                                },
                                {
                                    "line": 68,
                                    "code": "<Tooltip />"
                                },
                                {
                                    "line": 69,
                                    "code": "<Legend />"
                                },
                                {
                                    "line": 70,
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Renders the company name and ticker above the chart",
                            "codeSegments": [
                                {
                                    "line": 51,
                                    "code": "<h3>"
                                },
                                {
                                    "line": 52,
                                    "code": "{company} ({ticker})"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Styles the chart container with a top margin",
                            "codeSegments": [
                                {
                                    "line": 50,
                                    "code": "<div style={{ marginTop: \"2rem\" }}>"
                                }
                            ]
                        }
                    ]
                },
                "metadata": {
                    "fullPath": "/project/workspace/frontend/src/StockChart.jsx",
                    "id": "90c74804-3995-435f-8f4b-a50c5501ae26",
                    "filename": "StockChart.jsx",
                    "offset": 0,
                    "originalCode": "import React from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  ReferenceLine,\n} from \"recharts\";\n\nconst StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    const d = new Date(date);\n    return d.toLocaleString(\"default\", { month: \"short\", day: \"numeric\" });\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  // Get unique months for ticks\n  const monthTicks = Array.from(\n    new Set(\n      chartData.map((item) => {\n        const d = new Date(item.date);\n        return `${d.getFullYear()}-${d.getMonth()}`;\n      })\n    )\n  )\n    .map((key) => {\n      // Find the first date in chartData matching this month\n      const match = chartData.find((item) => {\n        const d = new Date(item.date);\n        return `${d.getFullYear()}-${d.getMonth()}` === key;\n      });\n      return match ? match.date : null;\n    })\n    .filter(Boolean);\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis\n            dataKey=\"date\"\n            ticks={monthTicks}\n            tickFormatter={(date) => {\n              const d = new Date(date);\n              return d.toLocaleString(\"default\", { month: \"short\" });\n            }}\n          />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;\n"
                },
                "editPromptStructured": null,
                "selectedStructured": "unstructured",
                "createdAt": 1755994659000,
                "editPromptValue": "",
                "selectedDetailLevel": "medium"
            },
            "section_id": "90c74804-3995-435f-8f4b-a50c5501ae26"
        },
        "source": "frontend",
        "event": "create_new_section",
        "timestamp": "2025-08-23 16:17:39.000",
        "id": "yDF3yy1x7qxgpPH3imiy"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "90c74804-3995-435f-8f4b-a50c5501ae26",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:17:41.000",
        "id": "P2RBVH7nEdD8lnFHc5R7"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "90c74804-3995-435f-8f4b-a50c5501ae26",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:17:41.000",
        "id": "QB02pwJKvzmPEWDFCdWK"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "90c74804-3995-435f-8f4b-a50c5501ae26",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:17:41.000",
        "id": "RLt7mNIr1mIAgg5UnIQr"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "90c74804-3995-435f-8f4b-a50c5501ae26",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:17:41.000",
        "id": "XS96QCbrm45bhHu3xlHn"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 1,
            "section_id": "90c74804-3995-435f-8f4b-a50c5501ae26",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:17:41.000",
        "id": "XXmMvjrD1i2XK8sW6niM"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "90c74804-3995-435f-8f4b-a50c5501ae26",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:17:41.000",
        "id": "Z7FGSnf3LQsv4ViSqWJp"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 4,
            "section_id": "90c74804-3995-435f-8f4b-a50c5501ae26",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:17:41.000",
        "id": "eANYEoa9sxOG62VjTBZG"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 5,
            "section_id": "90c74804-3995-435f-8f4b-a50c5501ae26",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:17:41.000",
        "id": "h5JXJtpM6iRaZxdFj75s"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 2,
            "section_id": "90c74804-3995-435f-8f4b-a50c5501ae26",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:17:41.000",
        "id": "jASiERjyoMVgFQ6pMQkR"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 5,
            "section_id": "90c74804-3995-435f-8f4b-a50c5501ae26",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:17:41.000",
        "id": "sSARbROKaSGYWIv8thPY"
    },
    {
        "data": {
            "before_structured": "unstructured",
            "after_detail_level": "medium",
            "after_structured": "structured",
            "section_id": "90c74804-3995-435f-8f4b-a50c5501ae26",
            "before_detail_level": "medium"
        },
        "source": "frontend",
        "event": "change_summary_level",
        "timestamp": "2025-08-23 16:17:43.000",
        "id": "1ZkLsZPucvf9MswBu9sG"
    },
    {
        "data": {
            "before_structured": "structured",
            "after_detail_level": "high",
            "after_structured": "structured",
            "section_id": "90c74804-3995-435f-8f4b-a50c5501ae26",
            "before_detail_level": "medium"
        },
        "source": "frontend",
        "event": "change_summary_level",
        "timestamp": "2025-08-23 16:17:44.000",
        "id": "lAVmJ6cWjMiJNngYV3S0"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 0,
            "section_id": "90c74804-3995-435f-8f4b-a50c5501ae26",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:17:45.000",
        "id": "6FAzWYU98lATj3oHzKIu"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "90c74804-3995-435f-8f4b-a50c5501ae26",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:17:45.000",
        "id": "7EYLOLPbwYcRVcTP0F7t"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "90c74804-3995-435f-8f4b-a50c5501ae26",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:17:45.000",
        "id": "7XsbD6Jh2CufBbUHR43t"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 5,
            "section_id": "90c74804-3995-435f-8f4b-a50c5501ae26",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:17:45.000",
        "id": "8lL3V2Xd35Xk542zQW0y"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 6,
            "section_id": "90c74804-3995-435f-8f4b-a50c5501ae26",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:17:45.000",
        "id": "9VXtqo5ZD3UDKHYBsCJA"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 4,
            "section_id": "90c74804-3995-435f-8f4b-a50c5501ae26",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:17:45.000",
        "id": "ALLfvzBi4UrC6DruXf4R"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "90c74804-3995-435f-8f4b-a50c5501ae26",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:17:45.000",
        "id": "EaG2u81krEKzDKNv9yF1"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 7,
            "section_id": "90c74804-3995-435f-8f4b-a50c5501ae26",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:17:45.000",
        "id": "EjxOETxm3o7RwYCEtA2a"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 1,
            "section_id": "90c74804-3995-435f-8f4b-a50c5501ae26",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:17:45.000",
        "id": "NcR9EEFxSARXAkEs9Ncx"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "90c74804-3995-435f-8f4b-a50c5501ae26",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:17:45.000",
        "id": "gSHtutyDeuqlIM92nWSX"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 2,
            "section_id": "90c74804-3995-435f-8f4b-a50c5501ae26",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:17:45.000",
        "id": "hehSCkKRYzdEwZevFXq8"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "90c74804-3995-435f-8f4b-a50c5501ae26",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:17:45.000",
        "id": "lkVbpyZhww3lGU6Hd2mX"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 8,
            "section_id": "90c74804-3995-435f-8f4b-a50c5501ae26",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:17:45.000",
        "id": "n2uhCuj1TcLNcvKHUN92"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "90c74804-3995-435f-8f4b-a50c5501ae26",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:17:45.000",
        "id": "vRPgufbYC9sLXPPGUiO4"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "90c74804-3995-435f-8f4b-a50c5501ae26",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:17:45.000",
        "id": "wPuIt1cc8NDEDkBPp0AO"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 7,
            "section_id": "90c74804-3995-435f-8f4b-a50c5501ae26",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:17:46.000",
        "id": "DxgdHcpBrRtf7OpuvF6i"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "90c74804-3995-435f-8f4b-a50c5501ae26",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:17:46.000",
        "id": "o0QafszLc8QczlVcpVCC"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "90c74804-3995-435f-8f4b-a50c5501ae26",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:17:47.000",
        "id": "JdqQ5JAw3YUfvAbhOnHr"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "90c74804-3995-435f-8f4b-a50c5501ae26",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:17:47.000",
        "id": "V89GWtKL1KUkiXeV0wSc"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 5,
            "section_id": "90c74804-3995-435f-8f4b-a50c5501ae26",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:17:47.000",
        "id": "YWnroUHdeOrOVDuuHH0w"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 6,
            "section_id": "90c74804-3995-435f-8f4b-a50c5501ae26",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:17:47.000",
        "id": "xQJEMpp6TLf2tChFzsP5"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 0,
            "section_id": "90c74804-3995-435f-8f4b-a50c5501ae26",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:17:48.000",
        "id": "10H5Yu95MWuNDKXAsRin"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "90c74804-3995-435f-8f4b-a50c5501ae26",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:17:48.000",
        "id": "5IBSvv2DwrjNpQhsMsN9"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "90c74804-3995-435f-8f4b-a50c5501ae26",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:17:48.000",
        "id": "BrXVnXsuAq44VSKKPqtN"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 4,
            "section_id": "90c74804-3995-435f-8f4b-a50c5501ae26",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:17:48.000",
        "id": "FOXw8KBHefgCblu3CDpc"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 1,
            "section_id": "90c74804-3995-435f-8f4b-a50c5501ae26",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:17:48.000",
        "id": "HqBzAwAlgYejrtilaoFK"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "90c74804-3995-435f-8f4b-a50c5501ae26",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:17:48.000",
        "id": "MXhdJZjKzwYb4d9zs1XN"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 3,
            "section_id": "90c74804-3995-435f-8f4b-a50c5501ae26",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:17:48.000",
        "id": "Ubj0uc1ktYwFzEhcSuFg"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "90c74804-3995-435f-8f4b-a50c5501ae26",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:17:48.000",
        "id": "f9ZDovdxqm5x0W4GA4WI"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 2,
            "section_id": "90c74804-3995-435f-8f4b-a50c5501ae26",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:17:48.000",
        "id": "mNqP5WVT4VgF0JgTv7Gn"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "90c74804-3995-435f-8f4b-a50c5501ae26",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:17:48.000",
        "id": "tx0TUkSpNan5AF1LRE9Y"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 2,
            "section_id": "90c74804-3995-435f-8f4b-a50c5501ae26",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:17:49.000",
        "id": "5bS8vDjDwJqp9R90OXe3"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 1,
            "section_id": "90c74804-3995-435f-8f4b-a50c5501ae26",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:17:49.000",
        "id": "KDck9dBXdhvmakWLR0Zw"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "90c74804-3995-435f-8f4b-a50c5501ae26",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:17:49.000",
        "id": "WPlEAzdr1tHWqPvxQv0v"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "90c74804-3995-435f-8f4b-a50c5501ae26",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:17:49.000",
        "id": "YLu1JI3KFMv168ZjV1rs"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "90c74804-3995-435f-8f4b-a50c5501ae26",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:17:49.000",
        "id": "qpFQa7NdHskKFqIXKWpc"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 2,
            "section_id": "90c74804-3995-435f-8f4b-a50c5501ae26",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:17:50.000",
        "id": "SicFnTfI1Jiom2KbRRqb"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "90c74804-3995-435f-8f4b-a50c5501ae26",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:17:53.000",
        "id": "VdXv6GaImWLwulQdlBht"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 3,
            "section_id": "90c74804-3995-435f-8f4b-a50c5501ae26",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:17:53.000",
        "id": "jaEAfy9Jsz53GQi7nFPw"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 4,
            "section_id": "90c74804-3995-435f-8f4b-a50c5501ae26",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:17:55.000",
        "id": "4sXFeIRPGgG1kZm4w69z"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "90c74804-3995-435f-8f4b-a50c5501ae26",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:17:55.000",
        "id": "T94vIzurAqL6oYAGZVHY"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 5,
            "section_id": "90c74804-3995-435f-8f4b-a50c5501ae26",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:17:55.000",
        "id": "Vvcna5hwg17D2qiz5fOD"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "90c74804-3995-435f-8f4b-a50c5501ae26",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:17:55.000",
        "id": "srfnQHQ698u2zoNC32r1"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 7,
            "section_id": "90c74804-3995-435f-8f4b-a50c5501ae26",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:17:56.000",
        "id": "17Lv2DWZRwS5v9sWwvKa"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "90c74804-3995-435f-8f4b-a50c5501ae26",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:17:56.000",
        "id": "CAzju28o7gBQDlhazFNl"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "90c74804-3995-435f-8f4b-a50c5501ae26",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:17:56.000",
        "id": "ECOCt8DyRsxhVglAm6vV"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 6,
            "section_id": "90c74804-3995-435f-8f4b-a50c5501ae26",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:17:56.000",
        "id": "K3OJS5uoYulqqes7dex1"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 9,
            "section_id": "90c74804-3995-435f-8f4b-a50c5501ae26",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:17:56.000",
        "id": "MxmwzEufTkVARPxgyX6i"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "90c74804-3995-435f-8f4b-a50c5501ae26",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:17:56.000",
        "id": "O91LTb1s7lXdxeUwlWJu"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "90c74804-3995-435f-8f4b-a50c5501ae26",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:17:56.000",
        "id": "WVuWjUFSl15RtE8IYqgB"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "90c74804-3995-435f-8f4b-a50c5501ae26",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:17:56.000",
        "id": "q5PFXDfsK4ynKgpKQ7cZ"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 8,
            "section_id": "90c74804-3995-435f-8f4b-a50c5501ae26",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:17:56.000",
        "id": "t147fGHUMenWrQR4Nl1p"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "90c74804-3995-435f-8f4b-a50c5501ae26",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:18:39.000",
        "id": "3N8VJ7F7xnM3IfFnXp8Q"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "90c74804-3995-435f-8f4b-a50c5501ae26",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:18:39.000",
        "id": "5dn8drxdSQEqRGl9N7NN"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "90c74804-3995-435f-8f4b-a50c5501ae26",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:18:39.000",
        "id": "AJdxUNHN8w4ntOiMyzOA"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "90c74804-3995-435f-8f4b-a50c5501ae26",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:18:39.000",
        "id": "KpEzopdwM0XAENWPwYA0"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 9,
            "section_id": "90c74804-3995-435f-8f4b-a50c5501ae26",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:18:39.000",
        "id": "KyyFrZJYSty6qhYiUy0q"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "90c74804-3995-435f-8f4b-a50c5501ae26",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:18:39.000",
        "id": "QP2EByvi06t5esgK0qxG"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 7,
            "section_id": "90c74804-3995-435f-8f4b-a50c5501ae26",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:18:39.000",
        "id": "R7vxfHgHZuz2hFiWPGOg"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 8,
            "section_id": "90c74804-3995-435f-8f4b-a50c5501ae26",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:18:39.000",
        "id": "dc73iiNK6Q1rWD31CBe2"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "90c74804-3995-435f-8f4b-a50c5501ae26",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:18:39.000",
        "id": "fIZW377Bvzg8bnIJtRdk"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "90c74804-3995-435f-8f4b-a50c5501ae26",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:18:39.000",
        "id": "ithyAuFLTdBsR4mvY2ww"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 1,
            "section_id": "90c74804-3995-435f-8f4b-a50c5501ae26",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:18:39.000",
        "id": "r31Dlyn4chL9973tmf5D"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 5,
            "section_id": "90c74804-3995-435f-8f4b-a50c5501ae26",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:18:39.000",
        "id": "tN63XKnculbpVuVJll76"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 4,
            "section_id": "90c74804-3995-435f-8f4b-a50c5501ae26",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:18:39.000",
        "id": "yObL5hYGRbHzymQw5WfD"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 6,
            "section_id": "90c74804-3995-435f-8f4b-a50c5501ae26",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:18:39.000",
        "id": "zeNIIUIXfkxiuuzJQyP1"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 7,
            "section_id": "90c74804-3995-435f-8f4b-a50c5501ae26",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:18:45.000",
        "id": "K61UOhJTexxp6zqRuX5W"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "90c74804-3995-435f-8f4b-a50c5501ae26",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:18:45.000",
        "id": "WM65qvns8CWZXTwODMWf"
    },
    {
        "data": {
            "summary": "• Defines a StockChart React component for visualizing stock price data\n• Validates input data to ensure required fields are present\n• Extracts company name and ticker from input\n• Processes data for charting:\n  ◦ Maps raw data to objects with date and closing price\n  ◦ Generates unique month-based ticks for the X-axis\n  ◦ Formats date strings for axis labels\n• Utilizes Recharts components:\n  ◦ ResponsiveContainer for adaptive sizing\n  ◦ LineChart, XAxis, YAxis, Tooltip, Legend, and Line for chart rendering\n• Renders the company name and ticker above the chart\n• Styles the chart container with a top margin",
            "structured": "structured",
            "section_id": "90c74804-3995-435f-8f4b-a50c5501ae26",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "click_edit_in_prompt",
        "timestamp": "2025-08-23 16:18:45.000",
        "id": "lBP7Yz8gohOtBhgTx9Xp"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "90c74804-3995-435f-8f4b-a50c5501ae26",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:18:46.000",
        "id": "1zTWRwMk2slcYQBjdLFE"
    },
    {
        "data": {
            "original_summary": "• Defines a StockChart React component for visualizing stock price data\n• Validates input data to ensure required fields are present\n• Extracts company name and ticker from input\n• Processes data for charting:\n  ◦ Maps raw data to objects with date and closing price\n  ◦ Generates unique month-based ticks for the X-axis\n  ◦ Formats date strings for axis labels\n• Utilizes Recharts components:\n  ◦ ResponsiveContainer for adaptive sizing\n  ◦ LineChart, XAxis, YAxis, Tooltip, Legend, and Line for chart rendering\n• Renders the company name and ticker above the chart\n• Styles the chart container with a top margin",
            "instruction": "extract current stock price from the response of backend, show the current price as the reference line, displaying in red dashed line",
            "structured": "structured",
            "section_id": "90c74804-3995-435f-8f4b-a50c5501ae26",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "apply_instruction_summary",
        "timestamp": "2025-08-23 16:18:46.000",
        "id": "AUklpdw72FzwYYnM4Lba"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 1,
            "section_id": "90c74804-3995-435f-8f4b-a50c5501ae26",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:18:46.000",
        "id": "Aemy5Pj8dz0WA0L0Or0a"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 8,
            "section_id": "90c74804-3995-435f-8f4b-a50c5501ae26",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:18:46.000",
        "id": "PgAHnq3w2xCsqxnPEwWe"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "90c74804-3995-435f-8f4b-a50c5501ae26",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:18:46.000",
        "id": "TWb6ffRdApD2EelzylAk"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 4,
            "section_id": "90c74804-3995-435f-8f4b-a50c5501ae26",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:18:46.000",
        "id": "rrAfrnznauj74hZrjE4w"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "90c74804-3995-435f-8f4b-a50c5501ae26",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:18:46.000",
        "id": "xisaUh7ZB039yU2qqOSP"
    },
    {
        "data": {
            "instruction": "extract current stock price from the response of backend, show the current price as the reference line, displaying in red dashed line",
            "updated_summary": "• Defines a StockChart React component for visualizing stock price data  \n• Validates input data to ensure required fields are present  \n• Extracts company name, ticker, and the current stock price from input  \n• Processes data for charting:  \n  ◦ Maps raw data to objects with date and closing price  \n  ◦ Generates unique month-based ticks for the X-axis  \n  ◦ Formats date strings for axis labels  \n• Utilizes Recharts components:  \n  ◦ ResponsiveContainer for adaptive sizing  \n  ◦ LineChart, XAxis, YAxis, Tooltip, Legend, and Line for chart rendering  \n  ◦ Adds a ReferenceLine at the current stock price, displayed as a red dashed line  \n• Renders the company name and ticker above the chart  \n• Styles the chart container with a top margin",
            "original_code": "import React from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  ReferenceLine,\n} from \"recharts\";\n\nconst StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    const d = new Date(date);\n    return d.toLocaleString(\"default\", { month: \"short\", day: \"numeric\" });\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  // Get unique months for ticks\n  const monthTicks = Array.from(\n    new Set(\n      chartData.map((item) => {\n        const d = new Date(item.date);\n        return `${d.getFullYear()}-${d.getMonth()}`;\n      })\n    )\n  )\n    .map((key) => {\n      // Find the first date in chartData matching this month\n      const match = chartData.find((item) => {\n        const d = new Date(item.date);\n        return `${d.getFullYear()}-${d.getMonth()}` === key;\n      });\n      return match ? match.date : null;\n    })\n    .filter(Boolean);\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis\n            dataKey=\"date\"\n            ticks={monthTicks}\n            tickFormatter={(date) => {\n              const d = new Date(date);\n              return d.toLocaleString(\"default\", { month: \"short\" });\n            }}\n          />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;\n",
            "original_summary": "• Defines a StockChart React component for visualizing stock price data\n• Validates input data to ensure required fields are present\n• Extracts company name and ticker from input\n• Processes data for charting:\n  ◦ Maps raw data to objects with date and closing price\n  ◦ Generates unique month-based ticks for the X-axis\n  ◦ Formats date strings for axis labels\n• Utilizes Recharts components:\n  ◦ ResponsiveContainer for adaptive sizing\n  ◦ LineChart, XAxis, YAxis, Tooltip, Legend, and Line for chart rendering\n• Renders the company name and ticker above the chart\n• Styles the chart container with a top margin"
        },
        "source": "backend",
        "event": "apply_instruction_summary",
        "timestamp": "2025-08-23 16:18:48.000",
        "id": "fyxWEWvXoNdQvjkjQprx"
    },
    {
        "data": {
            "edited_summary": "• Defines a StockChart React component for visualizing stock price data  \n• Validates input data to ensure required fields are present  \n• Extracts company name, ticker, and the current stock price from input  \n• Processes data for charting:  \n  ◦ Maps raw data to objects with date and closing price  \n  ◦ Generates unique month-based ticks for the X-axis  \n  ◦ Formats date strings for axis labels  \n• Utilizes Recharts components:  \n  ◦ ResponsiveContainer for adaptive sizing  \n  ◦ LineChart, XAxis, YAxis, Tooltip, Legend, and Line for chart rendering  \n  ◦ Adds a ReferenceLine at the current stock price, displayed as a red dashed line  \n• Renders the company name and ticker above the chart  \n• Styles the chart container with a top margin",
            "original_summary": "• Defines a StockChart React component for visualizing stock price data\n• Validates input data to ensure required fields are present\n• Extracts company name and ticker from input\n• Processes data for charting:\n  ◦ Maps raw data to objects with date and closing price\n  ◦ Generates unique month-based ticks for the X-axis\n  ◦ Formats date strings for axis labels\n• Utilizes Recharts components:\n  ◦ ResponsiveContainer for adaptive sizing\n  ◦ LineChart, XAxis, YAxis, Tooltip, Legend, and Line for chart rendering\n• Renders the company name and ticker above the chart\n• Styles the chart container with a top margin",
            "structured": "structured",
            "section_id": "90c74804-3995-435f-8f4b-a50c5501ae26",
            "detail_level": "high"
        },
        "source": "frontend",
        "event": "commit_modified_summary",
        "timestamp": "2025-08-23 16:18:59.000",
        "id": "m3yxHvF4l051eAKSfEIw"
    },
    {
        "data": {
            "original_summary": "• Defines a StockChart React component for visualizing stock price data\n• Validates input data to ensure required fields are present\n• Extracts company name and ticker from input\n• Processes data for charting:\n  ◦ Maps raw data to objects with date and closing price\n  ◦ Generates unique month-based ticks for the X-axis\n  ◦ Formats date strings for axis labels\n• Utilizes Recharts components:\n  ◦ ResponsiveContainer for adaptive sizing\n  ◦ LineChart, XAxis, YAxis, Tooltip, Legend, and Line for chart rendering\n• Renders the company name and ticker above the chart\n• Styles the chart container with a top margin",
            "structured_type": "structured",
            "updated_code": "import React from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  ReferenceLine,\n} from \"recharts\";\n\nconst StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n  const currentPrice = data.currentPrice;\n\n  const formatDateString = (date) => {\n    const d = new Date(date);\n    return d.toLocaleString(\"default\", { month: \"short\", day: \"numeric\" });\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  // Get unique months for ticks\n  const monthTicks = Array.from(\n    new Set(\n      chartData.map((item) => {\n        const d = new Date(item.date);\n        return `${d.getFullYear()}-${d.getMonth()}`;\n      })\n    )\n  )\n    .map((key) => {\n      // Find the first date in chartData matching this month\n      const match = chartData.find((item) => {\n        const d = new Date(item.date);\n        return `${d.getFullYear()}-${d.getMonth()}` === key;\n      });\n      return match ? match.date : null;\n    })\n    .filter(Boolean);\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis\n            dataKey=\"date\"\n            ticks={monthTicks}\n            tickFormatter={(date) => {\n              const d = new Date(date);\n              return d.toLocaleString(\"default\", { month: \"short\" });\n            }}\n          />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n          {typeof currentPrice === \"number\" && (\n            <ReferenceLine\n              y={currentPrice}\n              stroke=\"red\"\n              strokeDasharray=\"5 5\"\n              label={{\n                value: \"Current Price\",\n                position: \"right\",\n                fill: \"red\",\n                fontSize: 12,\n              }}\n            />\n          )}\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;",
            "original_code": "import React from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  ReferenceLine,\n} from \"recharts\";\n\nconst StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    const d = new Date(date);\n    return d.toLocaleString(\"default\", { month: \"short\", day: \"numeric\" });\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  // Get unique months for ticks\n  const monthTicks = Array.from(\n    new Set(\n      chartData.map((item) => {\n        const d = new Date(item.date);\n        return `${d.getFullYear()}-${d.getMonth()}`;\n      })\n    )\n  )\n    .map((key) => {\n      // Find the first date in chartData matching this month\n      const match = chartData.find((item) => {\n        const d = new Date(item.date);\n        return `${d.getFullYear()}-${d.getMonth()}` === key;\n      });\n      return match ? match.date : null;\n    })\n    .filter(Boolean);\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis\n            dataKey=\"date\"\n            ticks={monthTicks}\n            tickFormatter={(date) => {\n              const d = new Date(date);\n              return d.toLocaleString(\"default\", { month: \"short\" });\n            }}\n          />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;\n",
            "edited_summary": "• Defines a StockChart React component for visualizing stock price data  \n• Validates input data to ensure required fields are present  \n• Extracts company name, ticker, and the current stock price from input  \n• Processes data for charting:  \n  ◦ Maps raw data to objects with date and closing price  \n  ◦ Generates unique month-based ticks for the X-axis  \n  ◦ Formats date strings for axis labels  \n• Utilizes Recharts components:  \n  ◦ ResponsiveContainer for adaptive sizing  \n  ◦ LineChart, XAxis, YAxis, Tooltip, Legend, and Line for chart rendering  \n  ◦ Adds a ReferenceLine at the current stock price, displayed as a red dashed line  \n• Renders the company name and ticker above the chart  \n• Styles the chart container with a top margin",
            "detail_level": "high"
        },
        "source": "backend",
        "event": "modify_summary_mediation",
        "timestamp": "2025-08-23 16:19:04.000",
        "id": "eIX3whgZcShcOUlnTLnJ"
    },
    {
        "data": {
            "new_summary": {
                "medium_unstructured": "The code implements a React component called StockChart that visualizes stock price data as a line chart. It processes input data, formats it for display, and uses Recharts components to render the chart. The component also displays the company name and ticker above the chart, and now includes a red dashed reference line labeled 'Current Price' when a current price value is present.",
                "title": "StockChart React Component with Current Price Reference Line",
                "medium_structured": "• Defines a StockChart React component to display stock prices\n• Processes input data to extract dates and closing prices\n• Uses Recharts components (LineChart, XAxis, YAxis, etc.) for visualization\n• Displays company name and ticker above the chart\n• Renders a red dashed ReferenceLine labeled 'Current Price' if a current price value exists",
                "low_structured": "• React component renders a stock price line chart\n• Uses Recharts for chart visualization\n• Displays company name and ticker\n• Adds a red dashed reference line labeled 'Current Price' if a current price is provided",
                "low_unstructured": "This code defines a React component that displays a line chart of stock prices using the Recharts library, and now also adds a red dashed reference line for the current price if provided.",
                "high_unstructured": "This code defines a StockChart React component that visualizes stock price data as a line chart using the Recharts library. It first checks for valid input data, then extracts and formats the company name, ticker, and relevant price data. The component processes the data to generate chart points and unique monthly ticks for the X-axis, and formats date labels for better readability. The rendered chart includes axes, tooltips, a legend, and a stylized line, all wrapped in a responsive container with the company name and ticker displayed above. Additionally, if a current price value is provided, a red dashed reference line labeled 'Current Price' is drawn across the chart at that value.",
                "high_structured": "• Defines a StockChart React component for visualizing stock price data\n• Validates input data to ensure required fields are present\n• Extracts company name, ticker, and current price from input\n• Processes data for charting:\n  ◦ Maps raw data to objects with date and closing price\n  ◦ Generates unique month-based ticks for the X-axis\n  ◦ Formats date strings for axis labels\n• Utilizes Recharts components:\n  ◦ ResponsiveContainer for adaptive sizing\n  ◦ LineChart, XAxis, YAxis, Tooltip, Legend, and Line for chart rendering\n  ◦ Adds a red dashed ReferenceLine labeled 'Current Price' if a current price is provided\n• Renders the company name and ticker above the chart\n• Styles the chart container with a top margin"
            },
            "old_summary": {
                "medium_unstructured": "The code implements a React component called StockChart that visualizes stock price data as a line chart. It processes input data, formats it for display, and uses Recharts components to render the chart. The component also displays the company name and ticker above the chart.",
                "title": "StockChart React Component for Rendering Stock Price Line Charts",
                "medium_structured": "• Defines a StockChart React component to display stock prices\n• Processes input data to extract dates and closing prices\n• Uses Recharts components (LineChart, XAxis, YAxis, etc.) for visualization\n• Displays company name and ticker above the chart",
                "low_structured": "• React component renders a stock price line chart\n• Uses Recharts for chart visualization\n• Displays company name and ticker",
                "low_unstructured": "This code defines a React component that displays a line chart of stock prices using the Recharts library.",
                "high_unstructured": "This code defines a StockChart React component that visualizes stock price data as a line chart using the Recharts library. It first checks for valid input data, then extracts and formats the company name, ticker, and relevant price data. The component processes the data to generate chart points and unique monthly ticks for the X-axis, and formats date labels for better readability. The rendered chart includes axes, tooltips, a legend, and a stylized line, all wrapped in a responsive container with the company name and ticker displayed above.",
                "high_structured": "• Defines a StockChart React component for visualizing stock price data\n• Validates input data to ensure required fields are present\n• Extracts company name and ticker from input\n• Processes data for charting:\n  ◦ Maps raw data to objects with date and closing price\n  ◦ Generates unique month-based ticks for the X-axis\n  ◦ Formats date strings for axis labels\n• Utilizes Recharts components:\n  ◦ ResponsiveContainer for adaptive sizing\n  ◦ LineChart, XAxis, YAxis, Tooltip, Legend, and Line for chart rendering\n• Renders the company name and ticker above the chart\n• Styles the chart container with a top margin"
            },
            "new_code": "import React from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  ReferenceLine,\n} from \"recharts\";\n\nconst StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n  const currentPrice = data.currentPrice;\n\n  const formatDateString = (date) => {\n    const d = new Date(date);\n    return d.toLocaleString(\"default\", { month: \"short\", day: \"numeric\" });\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  // Get unique months for ticks\n  const monthTicks = Array.from(\n    new Set(\n      chartData.map((item) => {\n        const d = new Date(item.date);\n        return `${d.getFullYear()}-${d.getMonth()}`;\n      })\n    )\n  )\n    .map((key) => {\n      // Find the first date in chartData matching this month\n      const match = chartData.find((item) => {\n        const d = new Date(item.date);\n        return `${d.getFullYear()}-${d.getMonth()}` === key;\n      });\n      return match ? match.date : null;\n    })\n    .filter(Boolean);\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis\n            dataKey=\"date\"\n            ticks={monthTicks}\n            tickFormatter={(date) => {\n              const d = new Date(date);\n              return d.toLocaleString(\"default\", { month: \"short\" });\n            }}\n          />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n          {typeof currentPrice === \"number\" && (\n            <ReferenceLine\n              y={currentPrice}\n              stroke=\"red\"\n              strokeDasharray=\"5 5\"\n              label={{\n                value: \"Current Price\",\n                position: \"right\",\n                fill: \"red\",\n                fontSize: 12,\n              }}\n            />\n          )}\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;",
            "original_code": "import React from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  ReferenceLine,\n} from \"recharts\";\n\nconst StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n  const currentPrice = data.currentPrice;\n\n  const formatDateString = (date) => {\n    const d = new Date(date);\n    return d.toLocaleString(\"default\", { month: \"short\", day: \"numeric\" });\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  // Get unique months for ticks\n  const monthTicks = Array.from(\n    new Set(\n      chartData.map((item) => {\n        const d = new Date(item.date);\n        return `${d.getFullYear()}-${d.getMonth()}`;\n      })\n    )\n  )\n    .map((key) => {\n      // Find the first date in chartData matching this month\n      const match = chartData.find((item) => {\n        const d = new Date(item.date);\n        return `${d.getFullYear()}-${d.getMonth()}` === key;\n      });\n      return match ? match.date : null;\n    })\n    .filter(Boolean);\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis\n            dataKey=\"date\"\n            ticks={monthTicks}\n            tickFormatter={(date) => {\n              const d = new Date(date);\n              return d.toLocaleString(\"default\", { month: \"short\" });\n            }}\n          />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n          {typeof currentPrice === \"number\" && (\n            <ReferenceLine\n              y={currentPrice}\n              stroke=\"red\"\n              strokeDasharray=\"5 5\"\n              label={{\n                value: \"Current Price\",\n                position: \"right\",\n                fill: \"red\",\n                fontSize: 12,\n              }}\n            />\n          )}\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;"
        },
        "source": "backend",
        "event": "summarize_modified_code",
        "timestamp": "2025-08-23 16:19:15.000",
        "id": "VldbVVGAkOFbgctjC0eG"
    },
    {
        "data": {
            "mapping": [
                {
                    "summaryComponent": "React component renders a stock price line chart",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        },
                        {
                            "line": 56,
                            "code": "<LineChart"
                        },
                        {
                            "line": 71,
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                        }
                    ]
                },
                {
                    "summaryComponent": "Uses Recharts for chart visualization",
                    "codeSegments": [
                        {
                            "line": 2,
                            "code": "import {"
                        },
                        {
                            "line": 3,
                            "code": "LineChart,"
                        },
                        {
                            "line": 4,
                            "code": "Line,"
                        },
                        {
                            "line": 5,
                            "code": "XAxis,"
                        },
                        {
                            "line": 6,
                            "code": "YAxis,"
                        },
                        {
                            "line": 7,
                            "code": "Tooltip,"
                        },
                        {
                            "line": 8,
                            "code": "Legend,"
                        },
                        {
                            "line": 9,
                            "code": "ResponsiveContainer,"
                        },
                        {
                            "line": 10,
                            "code": "ReferenceLine,"
                        },
                        {
                            "line": 11,
                            "code": "} from \"recharts\";"
                        }
                    ]
                },
                {
                    "summaryComponent": "Displays company name and ticker",
                    "codeSegments": [
                        {
                            "line": 52,
                            "code": "<h3>"
                        },
                        {
                            "line": 53,
                            "code": "{company} ({ticker})"
                        }
                    ]
                },
                {
                    "summaryComponent": "Adds a red dashed reference line labeled 'Current Price' if a current price is provided",
                    "codeSegments": [
                        {
                            "line": 72,
                            "code": "{typeof currentPrice === \"number\" && ("
                        },
                        {
                            "line": 73,
                            "code": "<ReferenceLine"
                        },
                        {
                            "line": 74,
                            "code": "y={currentPrice}"
                        },
                        {
                            "line": 75,
                            "code": "stroke=\"red\""
                        },
                        {
                            "line": 76,
                            "code": "strokeDasharray=\"5 5\""
                        },
                        {
                            "line": 77,
                            "code": "label={{"
                        },
                        {
                            "line": 78,
                            "code": "value: \"Current Price\","
                        }
                    ]
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18:   const currentPrice = data.currentPrice;\n19: \n20:   const formatDateString = (date) => {\n21:     const d = new Date(date);\n22:     return d.toLocaleString(\"default\", { month: \"short\", day: \"numeric\" });\n23:   };\n24: \n25:   // Combine labels and values into an array of objects for Recharts\n26:   const chartData = data.data.map((item) => ({\n27:     date: item.date,\n28:     price: item.close,\n29:   }));\n30: \n31:   // Get unique months for ticks\n32:   const monthTicks = Array.from(\n33:     new Set(\n34:       chartData.map((item) => {\n35:         const d = new Date(item.date);\n36:         return `${d.getFullYear()}-${d.getMonth()}`;\n37:       })\n38:     )\n39:   )\n40:     .map((key) => {\n41:       // Find the first date in chartData matching this month\n42:       const match = chartData.find((item) => {\n43:         const d = new Date(item.date);\n44:         return `${d.getFullYear()}-${d.getMonth()}` === key;\n45:       });\n46:       return match ? match.date : null;\n47:     })\n48:     .filter(Boolean);\n49: \n50:   return (\n51:     <div style={{ marginTop: \"2rem\" }}>\n52:       <h3>\n53:         {company} ({ticker})\n54:       </h3>\n55:       <ResponsiveContainer width=\"100%\" height={300}>\n56:         <LineChart\n57:           data={chartData}\n58:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n59:         >\n60:           <XAxis\n61:             dataKey=\"date\"\n62:             ticks={monthTicks}\n63:             tickFormatter={(date) => {\n64:               const d = new Date(date);\n65:               return d.toLocaleString(\"default\", { month: \"short\" });\n66:             }}\n67:           />\n68:           <YAxis domain={[\"auto\", \"auto\"]} />\n69:           <Tooltip />\n70:           <Legend />\n71:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n72:           {typeof currentPrice === \"number\" && (\n73:             <ReferenceLine\n74:               y={currentPrice}\n75:               stroke=\"red\"\n76:               strokeDasharray=\"5 5\"\n77:               label={{\n78:                 value: \"Current Price\",\n79:                 position: \"right\",\n80:                 fill: \"red\",\n81:                 fontSize: 12,\n82:               }}\n83:             />\n84:           )}\n85:         </LineChart>\n86:       </ResponsiveContainer>\n87:     </div>\n88:   );\n89: };\n90: \n91: export default StockChart;",
            "summary": "• React component renders a stock price line chart\n• Uses Recharts for chart visualization\n• Displays company name and ticker\n• Adds a red dashed reference line labeled 'Current Price' if a current price is provided"
        },
        "source": "backend",
        "event": "map_summary_code",
        "timestamp": "2025-08-23 16:19:18.000",
        "id": "etySUoKjalhjO2JyHKCF"
    },
    {
        "data": {
            "mapping": [
                {
                    "summaryComponent": "defines a React component",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "displays a line chart of stock prices",
                    "codeSegments": [
                        {
                            "line": 56,
                            "code": "<LineChart"
                        },
                        {
                            "line": 71,
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                        }
                    ]
                },
                {
                    "summaryComponent": "using the Recharts library",
                    "codeSegments": [
                        {
                            "line": 2,
                            "code": "import {"
                        },
                        {
                            "line": 3,
                            "code": "LineChart,"
                        },
                        {
                            "line": 4,
                            "code": "Line,"
                        },
                        {
                            "line": 5,
                            "code": "XAxis,"
                        },
                        {
                            "line": 6,
                            "code": "YAxis,"
                        },
                        {
                            "line": 7,
                            "code": "Tooltip,"
                        },
                        {
                            "line": 8,
                            "code": "Legend,"
                        },
                        {
                            "line": 9,
                            "code": "ResponsiveContainer,"
                        },
                        {
                            "line": 10,
                            "code": "ReferenceLine,"
                        },
                        {
                            "line": 11,
                            "code": "} from \"recharts\";"
                        }
                    ]
                },
                {
                    "summaryComponent": "adds a red dashed reference line for the current price if provided",
                    "codeSegments": [
                        {
                            "line": 72,
                            "code": "{typeof currentPrice === \"number\" && ("
                        },
                        {
                            "line": 73,
                            "code": "<ReferenceLine"
                        },
                        {
                            "line": 74,
                            "code": "y={currentPrice}"
                        },
                        {
                            "line": 75,
                            "code": "stroke=\"red\""
                        },
                        {
                            "line": 76,
                            "code": "strokeDasharray=\"5 5\""
                        },
                        {
                            "line": 77,
                            "code": "label={{"
                        },
                        {
                            "line": 78,
                            "code": "value: \"Current Price\","
                        },
                        {
                            "line": 79,
                            "code": "position: \"right\","
                        },
                        {
                            "line": 80,
                            "code": "fill: \"red\","
                        },
                        {
                            "line": 81,
                            "code": "fontSize: 12,"
                        },
                        {
                            "line": 82,
                            "code": "}}"
                        },
                        {
                            "line": 83,
                            "code": "/>"
                        }
                    ]
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18:   const currentPrice = data.currentPrice;\n19: \n20:   const formatDateString = (date) => {\n21:     const d = new Date(date);\n22:     return d.toLocaleString(\"default\", { month: \"short\", day: \"numeric\" });\n23:   };\n24: \n25:   // Combine labels and values into an array of objects for Recharts\n26:   const chartData = data.data.map((item) => ({\n27:     date: item.date,\n28:     price: item.close,\n29:   }));\n30: \n31:   // Get unique months for ticks\n32:   const monthTicks = Array.from(\n33:     new Set(\n34:       chartData.map((item) => {\n35:         const d = new Date(item.date);\n36:         return `${d.getFullYear()}-${d.getMonth()}`;\n37:       })\n38:     )\n39:   )\n40:     .map((key) => {\n41:       // Find the first date in chartData matching this month\n42:       const match = chartData.find((item) => {\n43:         const d = new Date(item.date);\n44:         return `${d.getFullYear()}-${d.getMonth()}` === key;\n45:       });\n46:       return match ? match.date : null;\n47:     })\n48:     .filter(Boolean);\n49: \n50:   return (\n51:     <div style={{ marginTop: \"2rem\" }}>\n52:       <h3>\n53:         {company} ({ticker})\n54:       </h3>\n55:       <ResponsiveContainer width=\"100%\" height={300}>\n56:         <LineChart\n57:           data={chartData}\n58:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n59:         >\n60:           <XAxis\n61:             dataKey=\"date\"\n62:             ticks={monthTicks}\n63:             tickFormatter={(date) => {\n64:               const d = new Date(date);\n65:               return d.toLocaleString(\"default\", { month: \"short\" });\n66:             }}\n67:           />\n68:           <YAxis domain={[\"auto\", \"auto\"]} />\n69:           <Tooltip />\n70:           <Legend />\n71:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n72:           {typeof currentPrice === \"number\" && (\n73:             <ReferenceLine\n74:               y={currentPrice}\n75:               stroke=\"red\"\n76:               strokeDasharray=\"5 5\"\n77:               label={{\n78:                 value: \"Current Price\",\n79:                 position: \"right\",\n80:                 fill: \"red\",\n81:                 fontSize: 12,\n82:               }}\n83:             />\n84:           )}\n85:         </LineChart>\n86:       </ResponsiveContainer>\n87:     </div>\n88:   );\n89: };\n90: \n91: export default StockChart;",
            "summary": "This code defines a React component that displays a line chart of stock prices using the Recharts library, and now also adds a red dashed reference line for the current price if provided."
        },
        "source": "backend",
        "event": "map_summary_code",
        "timestamp": "2025-08-23 16:19:18.000",
        "id": "vo1s06GKNSgcWdNCQZU6"
    },
    {
        "data": {
            "mapping": [
                {
                    "summaryComponent": "a React component called StockChart",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "visualizes stock price data as a line chart",
                    "codeSegments": [
                        {
                            "line": 56,
                            "code": "<LineChart"
                        },
                        {
                            "line": 71,
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                        }
                    ]
                },
                {
                    "summaryComponent": "processes input data",
                    "codeSegments": [
                        {
                            "line": 14,
                            "code": "if (!data || !data.data || !data.data.length) return null;"
                        },
                        {
                            "line": 26,
                            "code": "const chartData = data.data.map((item) => ({"
                        }
                    ]
                },
                {
                    "summaryComponent": "formats it for display",
                    "codeSegments": [
                        {
                            "line": 20,
                            "code": "const formatDateString = (date) => {"
                        },
                        {
                            "line": 22,
                            "code": "return d.toLocaleString(\"default\", { month: \"short\", day: \"numeric\" });"
                        }
                    ]
                },
                {
                    "summaryComponent": "uses Recharts components to render the chart",
                    "codeSegments": [
                        {
                            "line": 2,
                            "code": "import {"
                        },
                        {
                            "line": 3,
                            "code": "LineChart,"
                        },
                        {
                            "line": 4,
                            "code": "Line,"
                        },
                        {
                            "line": 5,
                            "code": "XAxis,"
                        },
                        {
                            "line": 6,
                            "code": "YAxis,"
                        },
                        {
                            "line": 7,
                            "code": "Tooltip,"
                        },
                        {
                            "line": 8,
                            "code": "Legend,"
                        },
                        {
                            "line": 9,
                            "code": "ResponsiveContainer,"
                        },
                        {
                            "line": 10,
                            "code": "ReferenceLine,"
                        }
                    ]
                },
                {
                    "summaryComponent": "displays the company name and ticker above the chart",
                    "codeSegments": [
                        {
                            "line": 52,
                            "code": "<h3>"
                        },
                        {
                            "line": 53,
                            "code": "{company} ({ticker})"
                        }
                    ]
                },
                {
                    "summaryComponent": "now includes a red dashed reference line labeled 'Current Price' when a current price value is present",
                    "codeSegments": [
                        {
                            "line": 72,
                            "code": "{typeof currentPrice === \"number\" && ("
                        },
                        {
                            "line": 73,
                            "code": "<ReferenceLine"
                        },
                        {
                            "line": 74,
                            "code": "y={currentPrice}"
                        },
                        {
                            "line": 75,
                            "code": "stroke=\"red\""
                        },
                        {
                            "line": 76,
                            "code": "strokeDasharray=\"5 5\""
                        },
                        {
                            "line": 77,
                            "code": "label={{"
                        },
                        {
                            "line": 78,
                            "code": "value: \"Current Price\","
                        }
                    ]
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18:   const currentPrice = data.currentPrice;\n19: \n20:   const formatDateString = (date) => {\n21:     const d = new Date(date);\n22:     return d.toLocaleString(\"default\", { month: \"short\", day: \"numeric\" });\n23:   };\n24: \n25:   // Combine labels and values into an array of objects for Recharts\n26:   const chartData = data.data.map((item) => ({\n27:     date: item.date,\n28:     price: item.close,\n29:   }));\n30: \n31:   // Get unique months for ticks\n32:   const monthTicks = Array.from(\n33:     new Set(\n34:       chartData.map((item) => {\n35:         const d = new Date(item.date);\n36:         return `${d.getFullYear()}-${d.getMonth()}`;\n37:       })\n38:     )\n39:   )\n40:     .map((key) => {\n41:       // Find the first date in chartData matching this month\n42:       const match = chartData.find((item) => {\n43:         const d = new Date(item.date);\n44:         return `${d.getFullYear()}-${d.getMonth()}` === key;\n45:       });\n46:       return match ? match.date : null;\n47:     })\n48:     .filter(Boolean);\n49: \n50:   return (\n51:     <div style={{ marginTop: \"2rem\" }}>\n52:       <h3>\n53:         {company} ({ticker})\n54:       </h3>\n55:       <ResponsiveContainer width=\"100%\" height={300}>\n56:         <LineChart\n57:           data={chartData}\n58:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n59:         >\n60:           <XAxis\n61:             dataKey=\"date\"\n62:             ticks={monthTicks}\n63:             tickFormatter={(date) => {\n64:               const d = new Date(date);\n65:               return d.toLocaleString(\"default\", { month: \"short\" });\n66:             }}\n67:           />\n68:           <YAxis domain={[\"auto\", \"auto\"]} />\n69:           <Tooltip />\n70:           <Legend />\n71:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n72:           {typeof currentPrice === \"number\" && (\n73:             <ReferenceLine\n74:               y={currentPrice}\n75:               stroke=\"red\"\n76:               strokeDasharray=\"5 5\"\n77:               label={{\n78:                 value: \"Current Price\",\n79:                 position: \"right\",\n80:                 fill: \"red\",\n81:                 fontSize: 12,\n82:               }}\n83:             />\n84:           )}\n85:         </LineChart>\n86:       </ResponsiveContainer>\n87:     </div>\n88:   );\n89: };\n90: \n91: export default StockChart;",
            "summary": "The code implements a React component called StockChart that visualizes stock price data as a line chart. It processes input data, formats it for display, and uses Recharts components to render the chart. The component also displays the company name and ticker above the chart, and now includes a red dashed reference line labeled 'Current Price' when a current price value is present."
        },
        "source": "backend",
        "event": "map_summary_code",
        "timestamp": "2025-08-23 16:19:19.000",
        "id": "IPE9ahPiGUWGmEzIhJS9"
    },
    {
        "data": {
            "mapping": [
                {
                    "summaryComponent": "Defines a StockChart React component to display stock prices",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "Processes input data to extract dates and closing prices",
                    "codeSegments": [
                        {
                            "line": 26,
                            "code": "const chartData = data.data.map((item) => ({"
                        },
                        {
                            "line": 27,
                            "code": "date: item.date,"
                        },
                        {
                            "line": 28,
                            "code": "price: item.close,"
                        }
                    ]
                },
                {
                    "summaryComponent": "Uses Recharts components (LineChart, XAxis, YAxis, etc.) for visualization",
                    "codeSegments": [
                        {
                            "line": 2,
                            "code": "import {"
                        },
                        {
                            "line": 3,
                            "code": "LineChart,"
                        },
                        {
                            "line": 4,
                            "code": "Line,"
                        },
                        {
                            "line": 5,
                            "code": "XAxis,"
                        },
                        {
                            "line": 6,
                            "code": "YAxis,"
                        },
                        {
                            "line": 7,
                            "code": "Tooltip,"
                        },
                        {
                            "line": 8,
                            "code": "Legend,"
                        },
                        {
                            "line": 9,
                            "code": "ResponsiveContainer,"
                        },
                        {
                            "line": 10,
                            "code": "ReferenceLine,"
                        },
                        {
                            "line": 55,
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                        },
                        {
                            "line": 56,
                            "code": "<LineChart"
                        },
                        {
                            "line": 60,
                            "code": "<XAxis"
                        },
                        {
                            "line": 68,
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                        },
                        {
                            "line": 69,
                            "code": "<Tooltip />"
                        },
                        {
                            "line": 70,
                            "code": "<Legend />"
                        },
                        {
                            "line": 71,
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                        }
                    ]
                },
                {
                    "summaryComponent": "Displays company name and ticker above the chart",
                    "codeSegments": [
                        {
                            "line": 52,
                            "code": "<h3>"
                        },
                        {
                            "line": 53,
                            "code": "{company} ({ticker})"
                        }
                    ]
                },
                {
                    "summaryComponent": "Renders a red dashed ReferenceLine labeled 'Current Price' if a current price value exists",
                    "codeSegments": [
                        {
                            "line": 72,
                            "code": "{typeof currentPrice === \"number\" && ("
                        },
                        {
                            "line": 73,
                            "code": "<ReferenceLine"
                        },
                        {
                            "line": 74,
                            "code": "y={currentPrice}"
                        },
                        {
                            "line": 75,
                            "code": "stroke=\"red\""
                        },
                        {
                            "line": 76,
                            "code": "strokeDasharray=\"5 5\""
                        },
                        {
                            "line": 77,
                            "code": "label={{"
                        },
                        {
                            "line": 78,
                            "code": "value: \"Current Price\","
                        }
                    ]
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18:   const currentPrice = data.currentPrice;\n19: \n20:   const formatDateString = (date) => {\n21:     const d = new Date(date);\n22:     return d.toLocaleString(\"default\", { month: \"short\", day: \"numeric\" });\n23:   };\n24: \n25:   // Combine labels and values into an array of objects for Recharts\n26:   const chartData = data.data.map((item) => ({\n27:     date: item.date,\n28:     price: item.close,\n29:   }));\n30: \n31:   // Get unique months for ticks\n32:   const monthTicks = Array.from(\n33:     new Set(\n34:       chartData.map((item) => {\n35:         const d = new Date(item.date);\n36:         return `${d.getFullYear()}-${d.getMonth()}`;\n37:       })\n38:     )\n39:   )\n40:     .map((key) => {\n41:       // Find the first date in chartData matching this month\n42:       const match = chartData.find((item) => {\n43:         const d = new Date(item.date);\n44:         return `${d.getFullYear()}-${d.getMonth()}` === key;\n45:       });\n46:       return match ? match.date : null;\n47:     })\n48:     .filter(Boolean);\n49: \n50:   return (\n51:     <div style={{ marginTop: \"2rem\" }}>\n52:       <h3>\n53:         {company} ({ticker})\n54:       </h3>\n55:       <ResponsiveContainer width=\"100%\" height={300}>\n56:         <LineChart\n57:           data={chartData}\n58:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n59:         >\n60:           <XAxis\n61:             dataKey=\"date\"\n62:             ticks={monthTicks}\n63:             tickFormatter={(date) => {\n64:               const d = new Date(date);\n65:               return d.toLocaleString(\"default\", { month: \"short\" });\n66:             }}\n67:           />\n68:           <YAxis domain={[\"auto\", \"auto\"]} />\n69:           <Tooltip />\n70:           <Legend />\n71:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n72:           {typeof currentPrice === \"number\" && (\n73:             <ReferenceLine\n74:               y={currentPrice}\n75:               stroke=\"red\"\n76:               strokeDasharray=\"5 5\"\n77:               label={{\n78:                 value: \"Current Price\",\n79:                 position: \"right\",\n80:                 fill: \"red\",\n81:                 fontSize: 12,\n82:               }}\n83:             />\n84:           )}\n85:         </LineChart>\n86:       </ResponsiveContainer>\n87:     </div>\n88:   );\n89: };\n90: \n91: export default StockChart;",
            "summary": "• Defines a StockChart React component to display stock prices\n• Processes input data to extract dates and closing prices\n• Uses Recharts components (LineChart, XAxis, YAxis, etc.) for visualization\n• Displays company name and ticker above the chart\n• Renders a red dashed ReferenceLine labeled 'Current Price' if a current price value exists"
        },
        "source": "backend",
        "event": "map_summary_code",
        "timestamp": "2025-08-23 16:19:19.000",
        "id": "aFsT5Cu9PA14P6dWoAy6"
    },
    {
        "data": {
            "mapping": [
                {
                    "summaryComponent": "defines a StockChart React component",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "visualizes stock price data as a line chart using the Recharts library",
                    "codeSegments": [
                        {
                            "line": 2,
                            "code": "import {"
                        },
                        {
                            "line": 3,
                            "code": "LineChart,"
                        },
                        {
                            "line": 56,
                            "code": "<LineChart"
                        }
                    ]
                },
                {
                    "summaryComponent": "checks for valid input data",
                    "codeSegments": [
                        {
                            "line": 14,
                            "code": "if (!data || !data.data || !data.data.length) return null;"
                        }
                    ]
                },
                {
                    "summaryComponent": "extracts and formats the company name, ticker, and relevant price data",
                    "codeSegments": [
                        {
                            "line": 16,
                            "code": "const company = data.name;"
                        },
                        {
                            "line": 17,
                            "code": "const ticker = data.ticker;"
                        },
                        {
                            "line": 18,
                            "code": "const currentPrice = data.currentPrice;"
                        }
                    ]
                },
                {
                    "summaryComponent": "processes the data to generate chart points and unique monthly ticks for the X-axis",
                    "codeSegments": [
                        {
                            "line": 26,
                            "code": "const chartData = data.data.map((item) => ({"
                        },
                        {
                            "line": 32,
                            "code": "const monthTicks = Array.from("
                        }
                    ]
                },
                {
                    "summaryComponent": "formats date labels for better readability",
                    "codeSegments": [
                        {
                            "line": 20,
                            "code": "const formatDateString = (date) => {"
                        },
                        {
                            "line": 63,
                            "code": "tickFormatter={(date) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "rendered chart includes axes, tooltips, a legend, and a stylized line",
                    "codeSegments": [
                        {
                            "line": 60,
                            "code": "<XAxis"
                        },
                        {
                            "line": 68,
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                        },
                        {
                            "line": 69,
                            "code": "<Tooltip />"
                        },
                        {
                            "line": 70,
                            "code": "<Legend />"
                        },
                        {
                            "line": 71,
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                        }
                    ]
                },
                {
                    "summaryComponent": "wrapped in a responsive container",
                    "codeSegments": [
                        {
                            "line": 55,
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                        }
                    ]
                },
                {
                    "summaryComponent": "company name and ticker displayed above",
                    "codeSegments": [
                        {
                            "line": 52,
                            "code": "<h3>"
                        },
                        {
                            "line": 53,
                            "code": "{company} ({ticker})"
                        }
                    ]
                },
                {
                    "summaryComponent": "if a current price value is provided, a red dashed reference line labeled 'Current Price' is drawn across the chart at that value",
                    "codeSegments": [
                        {
                            "line": 72,
                            "code": "{typeof currentPrice === \"number\" && ("
                        },
                        {
                            "line": 73,
                            "code": "<ReferenceLine"
                        },
                        {
                            "line": 74,
                            "code": "y={currentPrice}"
                        },
                        {
                            "line": 75,
                            "code": "stroke=\"red\""
                        },
                        {
                            "line": 76,
                            "code": "strokeDasharray=\"5 5\""
                        },
                        {
                            "line": 77,
                            "code": "label={{"
                        },
                        {
                            "line": 78,
                            "code": "value: \"Current Price\","
                        }
                    ]
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18:   const currentPrice = data.currentPrice;\n19: \n20:   const formatDateString = (date) => {\n21:     const d = new Date(date);\n22:     return d.toLocaleString(\"default\", { month: \"short\", day: \"numeric\" });\n23:   };\n24: \n25:   // Combine labels and values into an array of objects for Recharts\n26:   const chartData = data.data.map((item) => ({\n27:     date: item.date,\n28:     price: item.close,\n29:   }));\n30: \n31:   // Get unique months for ticks\n32:   const monthTicks = Array.from(\n33:     new Set(\n34:       chartData.map((item) => {\n35:         const d = new Date(item.date);\n36:         return `${d.getFullYear()}-${d.getMonth()}`;\n37:       })\n38:     )\n39:   )\n40:     .map((key) => {\n41:       // Find the first date in chartData matching this month\n42:       const match = chartData.find((item) => {\n43:         const d = new Date(item.date);\n44:         return `${d.getFullYear()}-${d.getMonth()}` === key;\n45:       });\n46:       return match ? match.date : null;\n47:     })\n48:     .filter(Boolean);\n49: \n50:   return (\n51:     <div style={{ marginTop: \"2rem\" }}>\n52:       <h3>\n53:         {company} ({ticker})\n54:       </h3>\n55:       <ResponsiveContainer width=\"100%\" height={300}>\n56:         <LineChart\n57:           data={chartData}\n58:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n59:         >\n60:           <XAxis\n61:             dataKey=\"date\"\n62:             ticks={monthTicks}\n63:             tickFormatter={(date) => {\n64:               const d = new Date(date);\n65:               return d.toLocaleString(\"default\", { month: \"short\" });\n66:             }}\n67:           />\n68:           <YAxis domain={[\"auto\", \"auto\"]} />\n69:           <Tooltip />\n70:           <Legend />\n71:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n72:           {typeof currentPrice === \"number\" && (\n73:             <ReferenceLine\n74:               y={currentPrice}\n75:               stroke=\"red\"\n76:               strokeDasharray=\"5 5\"\n77:               label={{\n78:                 value: \"Current Price\",\n79:                 position: \"right\",\n80:                 fill: \"red\",\n81:                 fontSize: 12,\n82:               }}\n83:             />\n84:           )}\n85:         </LineChart>\n86:       </ResponsiveContainer>\n87:     </div>\n88:   );\n89: };\n90: \n91: export default StockChart;",
            "summary": "This code defines a StockChart React component that visualizes stock price data as a line chart using the Recharts library. It first checks for valid input data, then extracts and formats the company name, ticker, and relevant price data. The component processes the data to generate chart points and unique monthly ticks for the X-axis, and formats date labels for better readability. The rendered chart includes axes, tooltips, a legend, and a stylized line, all wrapped in a responsive container with the company name and ticker displayed above. Additionally, if a current price value is provided, a red dashed reference line labeled 'Current Price' is drawn across the chart at that value."
        },
        "source": "backend",
        "event": "map_summary_code",
        "timestamp": "2025-08-23 16:19:20.000",
        "id": "cNQqBlqcmGS7p2scXiGO"
    },
    {
        "data": {
            "mapping": [
                {
                    "summaryComponent": "Defines a StockChart React component for visualizing stock price data",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "Validates input data to ensure required fields are present",
                    "codeSegments": [
                        {
                            "line": 14,
                            "code": "if (!data || !data.data || !data.data.length) return null;"
                        }
                    ]
                },
                {
                    "summaryComponent": "Extracts company name, ticker, and current price from input",
                    "codeSegments": [
                        {
                            "line": 16,
                            "code": "const company = data.name;"
                        },
                        {
                            "line": 17,
                            "code": "const ticker = data.ticker;"
                        },
                        {
                            "line": 18,
                            "code": "const currentPrice = data.currentPrice;"
                        }
                    ]
                },
                {
                    "summaryComponent": "Maps raw data to objects with date and closing price",
                    "codeSegments": [
                        {
                            "line": 26,
                            "code": "const chartData = data.data.map((item) => ({"
                        },
                        {
                            "line": 27,
                            "code": "date: item.date,"
                        },
                        {
                            "line": 28,
                            "code": "price: item.close,"
                        }
                    ]
                },
                {
                    "summaryComponent": "Generates unique month-based ticks for the X-axis",
                    "codeSegments": [
                        {
                            "line": 32,
                            "code": "const monthTicks = Array.from("
                        }
                    ]
                },
                {
                    "summaryComponent": "Formats date strings for axis labels",
                    "codeSegments": [
                        {
                            "line": 20,
                            "code": "const formatDateString = (date) => {"
                        },
                        {
                            "line": 22,
                            "code": "return d.toLocaleString(\"default\", { month: \"short\", day: \"numeric\" });"
                        }
                    ]
                },
                {
                    "summaryComponent": "ResponsiveContainer for adaptive sizing",
                    "codeSegments": [
                        {
                            "line": 55,
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                        }
                    ]
                },
                {
                    "summaryComponent": "LineChart, XAxis, YAxis, Tooltip, Legend, and Line for chart rendering",
                    "codeSegments": [
                        {
                            "line": 56,
                            "code": "<LineChart"
                        },
                        {
                            "line": 60,
                            "code": "<XAxis"
                        },
                        {
                            "line": 68,
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                        },
                        {
                            "line": 69,
                            "code": "<Tooltip />"
                        },
                        {
                            "line": 70,
                            "code": "<Legend />"
                        },
                        {
                            "line": 71,
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                        }
                    ]
                },
                {
                    "summaryComponent": "Adds a red dashed ReferenceLine labeled 'Current Price' if a current price is provided",
                    "codeSegments": [
                        {
                            "line": 72,
                            "code": "{typeof currentPrice === \"number\" && ("
                        },
                        {
                            "line": 73,
                            "code": "<ReferenceLine"
                        },
                        {
                            "line": 74,
                            "code": "y={currentPrice}"
                        },
                        {
                            "line": 75,
                            "code": "stroke=\"red\""
                        },
                        {
                            "line": 76,
                            "code": "strokeDasharray=\"5 5\""
                        },
                        {
                            "line": 77,
                            "code": "label={{"
                        },
                        {
                            "line": 78,
                            "code": "value: \"Current Price\","
                        }
                    ]
                },
                {
                    "summaryComponent": "Renders the company name and ticker above the chart",
                    "codeSegments": [
                        {
                            "line": 52,
                            "code": "<h3>"
                        },
                        {
                            "line": 53,
                            "code": "{company} ({ticker})"
                        }
                    ]
                },
                {
                    "summaryComponent": "Styles the chart container with a top margin",
                    "codeSegments": [
                        {
                            "line": 51,
                            "code": "<div style={{ marginTop: \"2rem\" }}>"
                        }
                    ]
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18:   const currentPrice = data.currentPrice;\n19: \n20:   const formatDateString = (date) => {\n21:     const d = new Date(date);\n22:     return d.toLocaleString(\"default\", { month: \"short\", day: \"numeric\" });\n23:   };\n24: \n25:   // Combine labels and values into an array of objects for Recharts\n26:   const chartData = data.data.map((item) => ({\n27:     date: item.date,\n28:     price: item.close,\n29:   }));\n30: \n31:   // Get unique months for ticks\n32:   const monthTicks = Array.from(\n33:     new Set(\n34:       chartData.map((item) => {\n35:         const d = new Date(item.date);\n36:         return `${d.getFullYear()}-${d.getMonth()}`;\n37:       })\n38:     )\n39:   )\n40:     .map((key) => {\n41:       // Find the first date in chartData matching this month\n42:       const match = chartData.find((item) => {\n43:         const d = new Date(item.date);\n44:         return `${d.getFullYear()}-${d.getMonth()}` === key;\n45:       });\n46:       return match ? match.date : null;\n47:     })\n48:     .filter(Boolean);\n49: \n50:   return (\n51:     <div style={{ marginTop: \"2rem\" }}>\n52:       <h3>\n53:         {company} ({ticker})\n54:       </h3>\n55:       <ResponsiveContainer width=\"100%\" height={300}>\n56:         <LineChart\n57:           data={chartData}\n58:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n59:         >\n60:           <XAxis\n61:             dataKey=\"date\"\n62:             ticks={monthTicks}\n63:             tickFormatter={(date) => {\n64:               const d = new Date(date);\n65:               return d.toLocaleString(\"default\", { month: \"short\" });\n66:             }}\n67:           />\n68:           <YAxis domain={[\"auto\", \"auto\"]} />\n69:           <Tooltip />\n70:           <Legend />\n71:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n72:           {typeof currentPrice === \"number\" && (\n73:             <ReferenceLine\n74:               y={currentPrice}\n75:               stroke=\"red\"\n76:               strokeDasharray=\"5 5\"\n77:               label={{\n78:                 value: \"Current Price\",\n79:                 position: \"right\",\n80:                 fill: \"red\",\n81:                 fontSize: 12,\n82:               }}\n83:             />\n84:           )}\n85:         </LineChart>\n86:       </ResponsiveContainer>\n87:     </div>\n88:   );\n89: };\n90: \n91: export default StockChart;",
            "summary": "• Defines a StockChart React component for visualizing stock price data\n• Validates input data to ensure required fields are present\n• Extracts company name, ticker, and current price from input\n• Processes data for charting:\n  ◦ Maps raw data to objects with date and closing price\n  ◦ Generates unique month-based ticks for the X-axis\n  ◦ Formats date strings for axis labels\n• Utilizes Recharts components:\n  ◦ ResponsiveContainer for adaptive sizing\n  ◦ LineChart, XAxis, YAxis, Tooltip, Legend, and Line for chart rendering\n  ◦ Adds a red dashed ReferenceLine labeled 'Current Price' if a current price is provided\n• Renders the company name and ticker above the chart\n• Styles the chart container with a top margin"
        },
        "source": "backend",
        "event": "map_summary_code",
        "timestamp": "2025-08-23 16:19:21.000",
        "id": "D9vqBusSyp5tB5CsIGZ0"
    },
    {
        "data": {
            "section_data": {
                "lines": [
                    1,
                    91
                ],
                "title": "StockChart React Component with Current Price Reference Line",
                "summaryData": {
                    "medium_unstructured": "The code implements a React component called StockChart that visualizes stock price data as a line chart. It processes input data, formats it for display, and uses Recharts components to render the chart. The component also displays the company name and ticker above the chart, and now includes a red dashed reference line labeled 'Current Price' when a current price value is present.",
                    "title": "StockChart React Component with Current Price Reference Line",
                    "medium_structured": "• Defines a StockChart React component to display stock prices\n• Processes input data to extract dates and closing prices\n• Uses Recharts components (LineChart, XAxis, YAxis, etc.) for visualization\n• Displays company name and ticker above the chart\n• Renders a red dashed ReferenceLine labeled 'Current Price' if a current price value exists",
                    "low_structured": "• React component renders a stock price line chart\n• Uses Recharts for chart visualization\n• Displays company name and ticker\n• Adds a red dashed reference line labeled 'Current Price' if a current price is provided",
                    "low_unstructured": "This code defines a React component that displays a line chart of stock prices using the Recharts library, and now also adds a red dashed reference line for the current price if provided.",
                    "high_unstructured": "This code defines a StockChart React component that visualizes stock price data as a line chart using the Recharts library. It first checks for valid input data, then extracts and formats the company name, ticker, and relevant price data. The component processes the data to generate chart points and unique monthly ticks for the X-axis, and formats date labels for better readability. The rendered chart includes axes, tooltips, a legend, and a stylized line, all wrapped in a responsive container with the company name and ticker displayed above. Additionally, if a current price value is provided, a red dashed reference line labeled 'Current Price' is drawn across the chart at that value.",
                    "high_structured": "• Defines a StockChart React component for visualizing stock price data\n• Validates input data to ensure required fields are present\n• Extracts company name, ticker, and current price from input\n• Processes data for charting:\n  ◦ Maps raw data to objects with date and closing price\n  ◦ Generates unique month-based ticks for the X-axis\n  ◦ Formats date strings for axis labels\n• Utilizes Recharts components:\n  ◦ ResponsiveContainer for adaptive sizing\n  ◦ LineChart, XAxis, YAxis, Tooltip, Legend, and Line for chart rendering\n  ◦ Adds a red dashed ReferenceLine labeled 'Current Price' if a current price is provided\n• Renders the company name and ticker above the chart\n• Styles the chart container with a top margin"
                },
                "oldSummaryData": {
                    "medium_unstructured": "The code implements a React component called StockChart that visualizes stock price data as a line chart. It processes input data, formats it for display, and uses Recharts components to render the chart. The component also displays the company name and ticker above the chart.",
                    "title": "StockChart React Component for Rendering Stock Price Line Charts",
                    "medium_structured": "• Defines a StockChart React component to display stock prices\n• Processes input data to extract dates and closing prices\n• Uses Recharts components (LineChart, XAxis, YAxis, etc.) for visualization\n• Displays company name and ticker above the chart",
                    "low_structured": "• React component renders a stock price line chart\n• Uses Recharts for chart visualization\n• Displays company name and ticker",
                    "low_unstructured": "This code defines a React component that displays a line chart of stock prices using the Recharts library.",
                    "high_unstructured": "This code defines a StockChart React component that visualizes stock price data as a line chart using the Recharts library. It first checks for valid input data, then extracts and formats the company name, ticker, and relevant price data. The component processes the data to generate chart points and unique monthly ticks for the X-axis, and formats date labels for better readability. The rendered chart includes axes, tooltips, a legend, and a stylized line, all wrapped in a responsive container with the company name and ticker displayed above.",
                    "high_structured": "• Defines a StockChart React component for visualizing stock price data\n• Validates input data to ensure required fields are present\n• Extracts company name and ticker from input\n• Processes data for charting:\n  ◦ Maps raw data to objects with date and closing price\n  ◦ Generates unique month-based ticks for the X-axis\n  ◦ Formats date strings for axis labels\n• Utilizes Recharts components:\n  ◦ ResponsiveContainer for adaptive sizing\n  ◦ LineChart, XAxis, YAxis, Tooltip, Legend, and Line for chart rendering\n• Renders the company name and ticker above the chart\n• Styles the chart container with a top margin"
                },
                "editPromptDetailLevel": null,
                "metadata": {
                    "fullPath": "/project/workspace/frontend/src/StockChart.jsx",
                    "id": "3528c9be-7d24-4aad-94e7-1aee6ed8a405",
                    "filename": "StockChart.jsx",
                    "offset": 0,
                    "originalCode": "import React from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  ReferenceLine,\n} from \"recharts\";\n\nconst StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n  const currentPrice = data.currentPrice;\n\n  const formatDateString = (date) => {\n    const d = new Date(date);\n    return d.toLocaleString(\"default\", { month: \"short\", day: \"numeric\" });\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  // Get unique months for ticks\n  const monthTicks = Array.from(\n    new Set(\n      chartData.map((item) => {\n        const d = new Date(item.date);\n        return `${d.getFullYear()}-${d.getMonth()}`;\n      })\n    )\n  )\n    .map((key) => {\n      // Find the first date in chartData matching this month\n      const match = chartData.find((item) => {\n        const d = new Date(item.date);\n        return `${d.getFullYear()}-${d.getMonth()}` === key;\n      });\n      return match ? match.date : null;\n    })\n    .filter(Boolean);\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis\n            dataKey=\"date\"\n            ticks={monthTicks}\n            tickFormatter={(date) => {\n              const d = new Date(date);\n              return d.toLocaleString(\"default\", { month: \"short\" });\n            }}\n          />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n          {typeof currentPrice === \"number\" && (\n            <ReferenceLine\n              y={currentPrice}\n              stroke=\"red\"\n              strokeDasharray=\"5 5\"\n              label={{\n                value: \"Current Price\",\n                position: \"right\",\n                fill: \"red\",\n                fontSize: 12,\n              }}\n            />\n          )}\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;"
                },
                "editPromptStructured": null,
                "summaryMappings": {
                    "medium_unstructured": [
                        {
                            "summaryComponent": "a React component called StockChart",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "visualizes stock price data as a line chart",
                            "codeSegments": [
                                {
                                    "line": 56,
                                    "code": "<LineChart"
                                },
                                {
                                    "line": 71,
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "processes input data",
                            "codeSegments": [
                                {
                                    "line": 14,
                                    "code": "if (!data || !data.data || !data.data.length) return null;"
                                },
                                {
                                    "line": 26,
                                    "code": "const chartData = data.data.map((item) => ({"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "formats it for display",
                            "codeSegments": [
                                {
                                    "line": 20,
                                    "code": "const formatDateString = (date) => {"
                                },
                                {
                                    "line": 22,
                                    "code": "return d.toLocaleString(\"default\", { month: \"short\", day: \"numeric\" });"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "uses Recharts components to render the chart",
                            "codeSegments": [
                                {
                                    "line": 2,
                                    "code": "import {"
                                },
                                {
                                    "line": 3,
                                    "code": "LineChart,"
                                },
                                {
                                    "line": 4,
                                    "code": "Line,"
                                },
                                {
                                    "line": 5,
                                    "code": "XAxis,"
                                },
                                {
                                    "line": 6,
                                    "code": "YAxis,"
                                },
                                {
                                    "line": 7,
                                    "code": "Tooltip,"
                                },
                                {
                                    "line": 8,
                                    "code": "Legend,"
                                },
                                {
                                    "line": 9,
                                    "code": "ResponsiveContainer,"
                                },
                                {
                                    "line": 10,
                                    "code": "ReferenceLine,"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "displays the company name and ticker above the chart",
                            "codeSegments": [
                                {
                                    "line": 52,
                                    "code": "<h3>"
                                },
                                {
                                    "line": 53,
                                    "code": "{company} ({ticker})"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "now includes a red dashed reference line labeled 'Current Price' when a current price value is present",
                            "codeSegments": [
                                {
                                    "line": 72,
                                    "code": "{typeof currentPrice === \"number\" && ("
                                },
                                {
                                    "line": 73,
                                    "code": "<ReferenceLine"
                                },
                                {
                                    "line": 74,
                                    "code": "y={currentPrice}"
                                },
                                {
                                    "line": 75,
                                    "code": "stroke=\"red\""
                                },
                                {
                                    "line": 76,
                                    "code": "strokeDasharray=\"5 5\""
                                },
                                {
                                    "line": 77,
                                    "code": "label={{"
                                },
                                {
                                    "line": 78,
                                    "code": "value: \"Current Price\","
                                }
                            ]
                        }
                    ],
                    "medium_structured": [
                        {
                            "summaryComponent": "Defines a StockChart React component to display stock prices",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Processes input data to extract dates and closing prices",
                            "codeSegments": [
                                {
                                    "line": 26,
                                    "code": "const chartData = data.data.map((item) => ({"
                                },
                                {
                                    "line": 27,
                                    "code": "date: item.date,"
                                },
                                {
                                    "line": 28,
                                    "code": "price: item.close,"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Uses Recharts components (LineChart, XAxis, YAxis, etc.) for visualization",
                            "codeSegments": [
                                {
                                    "line": 2,
                                    "code": "import {"
                                },
                                {
                                    "line": 3,
                                    "code": "LineChart,"
                                },
                                {
                                    "line": 4,
                                    "code": "Line,"
                                },
                                {
                                    "line": 5,
                                    "code": "XAxis,"
                                },
                                {
                                    "line": 6,
                                    "code": "YAxis,"
                                },
                                {
                                    "line": 7,
                                    "code": "Tooltip,"
                                },
                                {
                                    "line": 8,
                                    "code": "Legend,"
                                },
                                {
                                    "line": 9,
                                    "code": "ResponsiveContainer,"
                                },
                                {
                                    "line": 10,
                                    "code": "ReferenceLine,"
                                },
                                {
                                    "line": 55,
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                                },
                                {
                                    "line": 56,
                                    "code": "<LineChart"
                                },
                                {
                                    "line": 60,
                                    "code": "<XAxis"
                                },
                                {
                                    "line": 68,
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                                },
                                {
                                    "line": 69,
                                    "code": "<Tooltip />"
                                },
                                {
                                    "line": 70,
                                    "code": "<Legend />"
                                },
                                {
                                    "line": 71,
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Displays company name and ticker above the chart",
                            "codeSegments": [
                                {
                                    "line": 52,
                                    "code": "<h3>"
                                },
                                {
                                    "line": 53,
                                    "code": "{company} ({ticker})"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Renders a red dashed ReferenceLine labeled 'Current Price' if a current price value exists",
                            "codeSegments": [
                                {
                                    "line": 72,
                                    "code": "{typeof currentPrice === \"number\" && ("
                                },
                                {
                                    "line": 73,
                                    "code": "<ReferenceLine"
                                },
                                {
                                    "line": 74,
                                    "code": "y={currentPrice}"
                                },
                                {
                                    "line": 75,
                                    "code": "stroke=\"red\""
                                },
                                {
                                    "line": 76,
                                    "code": "strokeDasharray=\"5 5\""
                                },
                                {
                                    "line": 77,
                                    "code": "label={{"
                                },
                                {
                                    "line": 78,
                                    "code": "value: \"Current Price\","
                                }
                            ]
                        }
                    ],
                    "low_structured": [
                        {
                            "summaryComponent": "React component renders a stock price line chart",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                },
                                {
                                    "line": 56,
                                    "code": "<LineChart"
                                },
                                {
                                    "line": 71,
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Uses Recharts for chart visualization",
                            "codeSegments": [
                                {
                                    "line": 2,
                                    "code": "import {"
                                },
                                {
                                    "line": 3,
                                    "code": "LineChart,"
                                },
                                {
                                    "line": 4,
                                    "code": "Line,"
                                },
                                {
                                    "line": 5,
                                    "code": "XAxis,"
                                },
                                {
                                    "line": 6,
                                    "code": "YAxis,"
                                },
                                {
                                    "line": 7,
                                    "code": "Tooltip,"
                                },
                                {
                                    "line": 8,
                                    "code": "Legend,"
                                },
                                {
                                    "line": 9,
                                    "code": "ResponsiveContainer,"
                                },
                                {
                                    "line": 10,
                                    "code": "ReferenceLine,"
                                },
                                {
                                    "line": 11,
                                    "code": "} from \"recharts\";"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Displays company name and ticker",
                            "codeSegments": [
                                {
                                    "line": 52,
                                    "code": "<h3>"
                                },
                                {
                                    "line": 53,
                                    "code": "{company} ({ticker})"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Adds a red dashed reference line labeled 'Current Price' if a current price is provided",
                            "codeSegments": [
                                {
                                    "line": 72,
                                    "code": "{typeof currentPrice === \"number\" && ("
                                },
                                {
                                    "line": 73,
                                    "code": "<ReferenceLine"
                                },
                                {
                                    "line": 74,
                                    "code": "y={currentPrice}"
                                },
                                {
                                    "line": 75,
                                    "code": "stroke=\"red\""
                                },
                                {
                                    "line": 76,
                                    "code": "strokeDasharray=\"5 5\""
                                },
                                {
                                    "line": 77,
                                    "code": "label={{"
                                },
                                {
                                    "line": 78,
                                    "code": "value: \"Current Price\","
                                }
                            ]
                        }
                    ],
                    "low_unstructured": [
                        {
                            "summaryComponent": "defines a React component",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "displays a line chart of stock prices",
                            "codeSegments": [
                                {
                                    "line": 56,
                                    "code": "<LineChart"
                                },
                                {
                                    "line": 71,
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "using the Recharts library",
                            "codeSegments": [
                                {
                                    "line": 2,
                                    "code": "import {"
                                },
                                {
                                    "line": 3,
                                    "code": "LineChart,"
                                },
                                {
                                    "line": 4,
                                    "code": "Line,"
                                },
                                {
                                    "line": 5,
                                    "code": "XAxis,"
                                },
                                {
                                    "line": 6,
                                    "code": "YAxis,"
                                },
                                {
                                    "line": 7,
                                    "code": "Tooltip,"
                                },
                                {
                                    "line": 8,
                                    "code": "Legend,"
                                },
                                {
                                    "line": 9,
                                    "code": "ResponsiveContainer,"
                                },
                                {
                                    "line": 10,
                                    "code": "ReferenceLine,"
                                },
                                {
                                    "line": 11,
                                    "code": "} from \"recharts\";"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "adds a red dashed reference line for the current price if provided",
                            "codeSegments": [
                                {
                                    "line": 72,
                                    "code": "{typeof currentPrice === \"number\" && ("
                                },
                                {
                                    "line": 73,
                                    "code": "<ReferenceLine"
                                },
                                {
                                    "line": 74,
                                    "code": "y={currentPrice}"
                                },
                                {
                                    "line": 75,
                                    "code": "stroke=\"red\""
                                },
                                {
                                    "line": 76,
                                    "code": "strokeDasharray=\"5 5\""
                                },
                                {
                                    "line": 77,
                                    "code": "label={{"
                                },
                                {
                                    "line": 78,
                                    "code": "value: \"Current Price\","
                                },
                                {
                                    "line": 79,
                                    "code": "position: \"right\","
                                },
                                {
                                    "line": 80,
                                    "code": "fill: \"red\","
                                },
                                {
                                    "line": 81,
                                    "code": "fontSize: 12,"
                                },
                                {
                                    "line": 82,
                                    "code": "}}"
                                },
                                {
                                    "line": 83,
                                    "code": "/>"
                                }
                            ]
                        }
                    ],
                    "high_unstructured": [
                        {
                            "summaryComponent": "defines a StockChart React component",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "visualizes stock price data as a line chart using the Recharts library",
                            "codeSegments": [
                                {
                                    "line": 2,
                                    "code": "import {"
                                },
                                {
                                    "line": 3,
                                    "code": "LineChart,"
                                },
                                {
                                    "line": 56,
                                    "code": "<LineChart"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "checks for valid input data",
                            "codeSegments": [
                                {
                                    "line": 14,
                                    "code": "if (!data || !data.data || !data.data.length) return null;"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "extracts and formats the company name, ticker, and relevant price data",
                            "codeSegments": [
                                {
                                    "line": 16,
                                    "code": "const company = data.name;"
                                },
                                {
                                    "line": 17,
                                    "code": "const ticker = data.ticker;"
                                },
                                {
                                    "line": 18,
                                    "code": "const currentPrice = data.currentPrice;"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "processes the data to generate chart points and unique monthly ticks for the X-axis",
                            "codeSegments": [
                                {
                                    "line": 26,
                                    "code": "const chartData = data.data.map((item) => ({"
                                },
                                {
                                    "line": 32,
                                    "code": "const monthTicks = Array.from("
                                }
                            ]
                        },
                        {
                            "summaryComponent": "formats date labels for better readability",
                            "codeSegments": [
                                {
                                    "line": 20,
                                    "code": "const formatDateString = (date) => {"
                                },
                                {
                                    "line": 63,
                                    "code": "tickFormatter={(date) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "rendered chart includes axes, tooltips, a legend, and a stylized line",
                            "codeSegments": [
                                {
                                    "line": 60,
                                    "code": "<XAxis"
                                },
                                {
                                    "line": 68,
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                                },
                                {
                                    "line": 69,
                                    "code": "<Tooltip />"
                                },
                                {
                                    "line": 70,
                                    "code": "<Legend />"
                                },
                                {
                                    "line": 71,
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "wrapped in a responsive container",
                            "codeSegments": [
                                {
                                    "line": 55,
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "company name and ticker displayed above",
                            "codeSegments": [
                                {
                                    "line": 52,
                                    "code": "<h3>"
                                },
                                {
                                    "line": 53,
                                    "code": "{company} ({ticker})"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "if a current price value is provided, a red dashed reference line labeled 'Current Price' is drawn across the chart at that value",
                            "codeSegments": [
                                {
                                    "line": 72,
                                    "code": "{typeof currentPrice === \"number\" && ("
                                },
                                {
                                    "line": 73,
                                    "code": "<ReferenceLine"
                                },
                                {
                                    "line": 74,
                                    "code": "y={currentPrice}"
                                },
                                {
                                    "line": 75,
                                    "code": "stroke=\"red\""
                                },
                                {
                                    "line": 76,
                                    "code": "strokeDasharray=\"5 5\""
                                },
                                {
                                    "line": 77,
                                    "code": "label={{"
                                },
                                {
                                    "line": 78,
                                    "code": "value: \"Current Price\","
                                }
                            ]
                        }
                    ],
                    "high_structured": [
                        {
                            "summaryComponent": "Defines a StockChart React component for visualizing stock price data",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Validates input data to ensure required fields are present",
                            "codeSegments": [
                                {
                                    "line": 14,
                                    "code": "if (!data || !data.data || !data.data.length) return null;"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Extracts company name, ticker, and current price from input",
                            "codeSegments": [
                                {
                                    "line": 16,
                                    "code": "const company = data.name;"
                                },
                                {
                                    "line": 17,
                                    "code": "const ticker = data.ticker;"
                                },
                                {
                                    "line": 18,
                                    "code": "const currentPrice = data.currentPrice;"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Maps raw data to objects with date and closing price",
                            "codeSegments": [
                                {
                                    "line": 26,
                                    "code": "const chartData = data.data.map((item) => ({"
                                },
                                {
                                    "line": 27,
                                    "code": "date: item.date,"
                                },
                                {
                                    "line": 28,
                                    "code": "price: item.close,"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Generates unique month-based ticks for the X-axis",
                            "codeSegments": [
                                {
                                    "line": 32,
                                    "code": "const monthTicks = Array.from("
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Formats date strings for axis labels",
                            "codeSegments": [
                                {
                                    "line": 20,
                                    "code": "const formatDateString = (date) => {"
                                },
                                {
                                    "line": 22,
                                    "code": "return d.toLocaleString(\"default\", { month: \"short\", day: \"numeric\" });"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "ResponsiveContainer for adaptive sizing",
                            "codeSegments": [
                                {
                                    "line": 55,
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "LineChart, XAxis, YAxis, Tooltip, Legend, and Line for chart rendering",
                            "codeSegments": [
                                {
                                    "line": 56,
                                    "code": "<LineChart"
                                },
                                {
                                    "line": 60,
                                    "code": "<XAxis"
                                },
                                {
                                    "line": 68,
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                                },
                                {
                                    "line": 69,
                                    "code": "<Tooltip />"
                                },
                                {
                                    "line": 70,
                                    "code": "<Legend />"
                                },
                                {
                                    "line": 71,
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Adds a red dashed ReferenceLine labeled 'Current Price' if a current price is provided",
                            "codeSegments": [
                                {
                                    "line": 72,
                                    "code": "{typeof currentPrice === \"number\" && ("
                                },
                                {
                                    "line": 73,
                                    "code": "<ReferenceLine"
                                },
                                {
                                    "line": 74,
                                    "code": "y={currentPrice}"
                                },
                                {
                                    "line": 75,
                                    "code": "stroke=\"red\""
                                },
                                {
                                    "line": 76,
                                    "code": "strokeDasharray=\"5 5\""
                                },
                                {
                                    "line": 77,
                                    "code": "label={{"
                                },
                                {
                                    "line": 78,
                                    "code": "value: \"Current Price\","
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Renders the company name and ticker above the chart",
                            "codeSegments": [
                                {
                                    "line": 52,
                                    "code": "<h3>"
                                },
                                {
                                    "line": 53,
                                    "code": "{company} ({ticker})"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Styles the chart container with a top margin",
                            "codeSegments": [
                                {
                                    "line": 51,
                                    "code": "<div style={{ marginTop: \"2rem\" }}>"
                                }
                            ]
                        }
                    ]
                },
                "selectedStructured": "unstructured",
                "createdAt": 1755994761000,
                "editPromptValue": "",
                "selectedDetailLevel": "medium"
            },
            "section_id": "3528c9be-7d24-4aad-94e7-1aee6ed8a405"
        },
        "source": "frontend",
        "event": "create_new_section",
        "timestamp": "2025-08-23 16:19:21.000",
        "id": "gOPgugFwawMHCmc72NUj"
    },
    {
        "data": {
            "after_section_id": "3528c9be-7d24-4aad-94e7-1aee6ed8a405",
            "before_section_id": "90c74804-3995-435f-8f4b-a50c5501ae26"
        },
        "source": "frontend",
        "event": "autotransit_section",
        "timestamp": "2025-08-23 16:19:21.000",
        "id": "pz96rlG7DatZzfzy0INI"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "3528c9be-7d24-4aad-94e7-1aee6ed8a405",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:19:23.000",
        "id": "7d5KGXoM8OZVbzoZpJqy"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 2,
            "section_id": "3528c9be-7d24-4aad-94e7-1aee6ed8a405",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:19:23.000",
        "id": "FsNXDK3NVzuvPMJOBEOC"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "3528c9be-7d24-4aad-94e7-1aee6ed8a405",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:19:23.000",
        "id": "UCVnSuWC8Vy9dZLRdYhN"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 4,
            "section_id": "3528c9be-7d24-4aad-94e7-1aee6ed8a405",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:19:23.000",
        "id": "XBGS4CW6UsmhjPE1MKkW"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "3528c9be-7d24-4aad-94e7-1aee6ed8a405",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:19:23.000",
        "id": "gQYFEgFwfURaB5VlMb6L"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 6,
            "section_id": "3528c9be-7d24-4aad-94e7-1aee6ed8a405",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:19:23.000",
        "id": "wONZ9pnEYXVXYzm6emfW"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "3528c9be-7d24-4aad-94e7-1aee6ed8a405",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:19:25.000",
        "id": "2OJnrX1Ho7F1x7GOiapC"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 4,
            "section_id": "3528c9be-7d24-4aad-94e7-1aee6ed8a405",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:19:25.000",
        "id": "4Cqz1S8MyR0IV0eub0cG"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "3528c9be-7d24-4aad-94e7-1aee6ed8a405",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:19:25.000",
        "id": "60RX3lbfdnVlS0nbqgGQ"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "3528c9be-7d24-4aad-94e7-1aee6ed8a405",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:19:25.000",
        "id": "85eo6zXGvjGMvggXiUau"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 1,
            "section_id": "3528c9be-7d24-4aad-94e7-1aee6ed8a405",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:19:25.000",
        "id": "bp3c9Zqzl0UGIdQVafC0"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 1,
            "section_id": "3528c9be-7d24-4aad-94e7-1aee6ed8a405",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:19:25.000",
        "id": "lAITcq25qjlXr8D1q43A"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 2,
            "section_id": "3528c9be-7d24-4aad-94e7-1aee6ed8a405",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:19:25.000",
        "id": "qfbSLKXzj7v4zIr9crpj"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "3528c9be-7d24-4aad-94e7-1aee6ed8a405",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:19:25.000",
        "id": "rpcQETekZXz4l7vFhHIv"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 6,
            "section_id": "3528c9be-7d24-4aad-94e7-1aee6ed8a405",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:19:28.000",
        "id": "j4Txiv9CaDmbW1tZnEBt"
    },
    {
        "data": {
            "before_structured": "unstructured",
            "after_detail_level": "medium",
            "after_structured": "structured",
            "section_id": "3528c9be-7d24-4aad-94e7-1aee6ed8a405",
            "before_detail_level": "medium"
        },
        "source": "frontend",
        "event": "change_summary_level",
        "timestamp": "2025-08-23 16:19:29.000",
        "id": "AGMAy06JRZEwXKCuOJVQ"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "3528c9be-7d24-4aad-94e7-1aee6ed8a405",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:19:29.000",
        "id": "E6W6iYaEitXkGPLuSZXJ"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 0,
            "section_id": "3528c9be-7d24-4aad-94e7-1aee6ed8a405",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:19:29.000",
        "id": "KeEzEaPGzA3kfbSljWz7"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 5,
            "section_id": "3528c9be-7d24-4aad-94e7-1aee6ed8a405",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:19:29.000",
        "id": "LNqOdc6ZbdnPPr1L32n9"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "3528c9be-7d24-4aad-94e7-1aee6ed8a405",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:19:29.000",
        "id": "Ubv30PxjUcnax5FkhAST"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "3528c9be-7d24-4aad-94e7-1aee6ed8a405",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:19:29.000",
        "id": "V2YLEu1tAzfz3QubvlYW"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "3528c9be-7d24-4aad-94e7-1aee6ed8a405",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:19:29.000",
        "id": "aVVcKW37ZdW4EuPELmsj"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "3528c9be-7d24-4aad-94e7-1aee6ed8a405",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:19:29.000",
        "id": "dCplyxiwS0u6LndZqLRt"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 3,
            "section_id": "3528c9be-7d24-4aad-94e7-1aee6ed8a405",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:19:29.000",
        "id": "hhJjmkwpW28T7bHtDHY3"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "section_id": "3528c9be-7d24-4aad-94e7-1aee6ed8a405",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:19:29.000",
        "id": "op7UFPzL2a7wcozkvspD"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 4,
            "section_id": "3528c9be-7d24-4aad-94e7-1aee6ed8a405",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:19:29.000",
        "id": "upNnYHT9UGWb9NC9QXAn"
    },
    {
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 1,
            "section_id": "3528c9be-7d24-4aad-94e7-1aee6ed8a405",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:19:29.000",
        "id": "wsd8JEN1ORaOrZxeTu9b"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 0,
            "section_id": "3528c9be-7d24-4aad-94e7-1aee6ed8a405",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:19:30.000",
        "id": "QrR0iCy8675RTIiqgnqU"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "3528c9be-7d24-4aad-94e7-1aee6ed8a405",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:19:30.000",
        "id": "ygy5CvjxVychIOelnbLB"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "3528c9be-7d24-4aad-94e7-1aee6ed8a405",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:19:31.000",
        "id": "0AArrwgSlmhEMLprA9vP"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 3,
            "section_id": "3528c9be-7d24-4aad-94e7-1aee6ed8a405",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:19:31.000",
        "id": "52AlNSmWHNZyHJPnHT1c"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 4,
            "section_id": "3528c9be-7d24-4aad-94e7-1aee6ed8a405",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:19:31.000",
        "id": "5iMMc7SEEAulbxYAmVdK"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 0,
            "section_id": "3528c9be-7d24-4aad-94e7-1aee6ed8a405",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:19:31.000",
        "id": "8cghDj2EvfioMa5WcHix"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "3528c9be-7d24-4aad-94e7-1aee6ed8a405",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:19:31.000",
        "id": "GGxXePzozGt2oJSwnGXH"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 2,
            "section_id": "3528c9be-7d24-4aad-94e7-1aee6ed8a405",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:19:31.000",
        "id": "GTvRqGxImSrW9WmsAQum"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 1,
            "section_id": "3528c9be-7d24-4aad-94e7-1aee6ed8a405",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:19:31.000",
        "id": "OvG9eqvoiw1M1h9oqj4V"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "3528c9be-7d24-4aad-94e7-1aee6ed8a405",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:19:31.000",
        "id": "P7NNOcWYftqYXpIrZsGT"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 3,
            "section_id": "3528c9be-7d24-4aad-94e7-1aee6ed8a405",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:19:31.000",
        "id": "RqJSHVv64y8KA7n64GDq"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "3528c9be-7d24-4aad-94e7-1aee6ed8a405",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:19:31.000",
        "id": "UtGSopjKtBLQioHxsW49"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "3528c9be-7d24-4aad-94e7-1aee6ed8a405",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:19:31.000",
        "id": "mcn7NPeSFCbmsQ6b62w2"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "3528c9be-7d24-4aad-94e7-1aee6ed8a405",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:19:31.000",
        "id": "pQBAlzVF6NSbpsA0VU25"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "3528c9be-7d24-4aad-94e7-1aee6ed8a405",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:19:31.000",
        "id": "qJKFcymgWHffOMBD3BEm"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 2,
            "section_id": "3528c9be-7d24-4aad-94e7-1aee6ed8a405",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:19:31.000",
        "id": "qNspwJu33OrazVSHC5Pc"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "3528c9be-7d24-4aad-94e7-1aee6ed8a405",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:19:32.000",
        "id": "UmVY8CvD9pFFgP3zGw2H"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 1,
            "section_id": "3528c9be-7d24-4aad-94e7-1aee6ed8a405",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:19:32.000",
        "id": "c9NffBN8X9MFzdOnKicY"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 0,
            "section_id": "3528c9be-7d24-4aad-94e7-1aee6ed8a405",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:19:32.000",
        "id": "zIpuIl6D2TGDTYQeA92B"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 4,
            "section_id": "3528c9be-7d24-4aad-94e7-1aee6ed8a405",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:19:33.000",
        "id": "5pknHuopZaa1H2JwJiri"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "3528c9be-7d24-4aad-94e7-1aee6ed8a405",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:19:33.000",
        "id": "CPPXA2zrpNor6eavkgCF"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "3528c9be-7d24-4aad-94e7-1aee6ed8a405",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:19:33.000",
        "id": "Mj0cNgxurKrJt8PGycGo"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "3528c9be-7d24-4aad-94e7-1aee6ed8a405",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:19:33.000",
        "id": "cf9XJnmaL09lf3deH1zu"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 2,
            "section_id": "3528c9be-7d24-4aad-94e7-1aee6ed8a405",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:19:33.000",
        "id": "htyldXZszHwMZZtXKZP2"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 3,
            "section_id": "3528c9be-7d24-4aad-94e7-1aee6ed8a405",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:19:33.000",
        "id": "m4ouSIgvSVKfCUHugihG"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "3528c9be-7d24-4aad-94e7-1aee6ed8a405",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:19:34.000",
        "id": "ozxLUhbHBULWE09tnqNV"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 0,
            "section_id": "3528c9be-7d24-4aad-94e7-1aee6ed8a405",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:19:36.000",
        "id": "3PC8Oim4sZ94GHiWWJ0G"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "3528c9be-7d24-4aad-94e7-1aee6ed8a405",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:19:36.000",
        "id": "79de0KkpUqFEodaohEff"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "3528c9be-7d24-4aad-94e7-1aee6ed8a405",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:19:36.000",
        "id": "7BmcMJxg4wY1gYXbZB1E"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "3528c9be-7d24-4aad-94e7-1aee6ed8a405",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:19:36.000",
        "id": "ZZyoGkbjT1qBdkFq1C2U"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 1,
            "section_id": "3528c9be-7d24-4aad-94e7-1aee6ed8a405",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:19:36.000",
        "id": "djzbVqam6DlTsEd4lsbC"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 2,
            "section_id": "3528c9be-7d24-4aad-94e7-1aee6ed8a405",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:19:36.000",
        "id": "f0rZDW1fFzlu5g5dc1A9"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 4,
            "section_id": "3528c9be-7d24-4aad-94e7-1aee6ed8a405",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:19:38.000",
        "id": "JO23mgc6S6PCLrRBb1rL"
    },
    {
        "data": {
            "structured_type": "structured",
            "mapping_index": 0,
            "section_id": "3528c9be-7d24-4aad-94e7-1aee6ed8a405",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_hover",
        "timestamp": "2025-08-23 16:19:38.000",
        "id": "W0w5W7EXS0vBh4quCUvj"
    },
    {
        "data": {
            "summary": "• Defines a StockChart React component to display stock prices\n• Processes input data to extract dates and closing prices\n• Uses Recharts components (LineChart, XAxis, YAxis, etc.) for visualization\n• Displays company name and ticker above the chart\n• Renders a red dashed ReferenceLine labeled 'Current Price' if a current price value exists",
            "structured": "structured",
            "section_id": "3528c9be-7d24-4aad-94e7-1aee6ed8a405",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "click_edit_in_prompt",
        "timestamp": "2025-08-23 16:19:38.000",
        "id": "cWB32CRRGiJQs3no7vKe"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "3528c9be-7d24-4aad-94e7-1aee6ed8a405",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:19:38.000",
        "id": "rYQxOrJqY4b8TehP2DJw"
    },
    {
        "data": {
            "structured_type": "structured",
            "section_id": "3528c9be-7d24-4aad-94e7-1aee6ed8a405",
            "detail_level": "medium"
        },
        "source": "frontend",
        "event": "mapping_unhover",
        "timestamp": "2025-08-23 16:19:38.000",
        "id": "uLUNuyCptorj143ce7EE"
    }
]