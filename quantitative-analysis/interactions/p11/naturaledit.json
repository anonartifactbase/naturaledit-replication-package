[
    {
        "timestamp": "2025-08-23 20:21:08.000",
        "source": "backend",
        "data": {
            "summary": {
                "low_unstructured": "This code defines a React component that displays a stock price line chart using Recharts.",
                "low_structured": "• React component for stock price chart\n• Uses Recharts library\n• Displays company and ticker info",
                "medium_unstructured": "This code implements a React component called StockChart that visualizes stock price data as a line chart using the Recharts library. It displays the company name, ticker symbol, and a line chart of closing prices over time. The component only renders if valid data is provided.",
                "high_structured": "• Defines a functional React component named StockChart\n• Handles input:\n  ◦ Expects a 'data' prop containing stock information\n  ◦ Checks for valid data before rendering\n• Extracts and displays company name and ticker symbol\n• Processes stock data:\n  ◦ Maps each data entry to an object with 'date' and 'price' (close value)\n  ◦ Includes a helper function to format date strings (though not used in rendering)\n• Renders a responsive line chart using Recharts:\n  ◦ Includes X and Y axes, tooltip, and legend\n  ◦ Plots a monotone line for closing prices, styled with a specific color and no dots\n  ◦ Sets chart margins and container height\n• Wraps the chart in a styled div with a top margin",
                "medium_structured": "• Defines a StockChart React component\n• Renders a line chart of stock closing prices using Recharts\n• Displays company name and ticker symbol\n• Only renders if valid data is present\n• Formats data for chart display",
                "title": "StockChart Component for Rendering Stock Price Line Charts",
                "high_unstructured": "The provided code defines a StockChart React component that visualizes stock price data using the Recharts library. It first checks for valid input data, extracting the company name and ticker symbol for display. The component processes the input data to format it for the chart, mapping each entry to an object with date and closing price. It then renders a responsive line chart with axes, tooltip, legend, and a styled line representing the stock's closing prices over time, all within a styled container."
            },
            "selected_code": "import React from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  ReferenceLine,\n} from \"recharts\";\n\nconst StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;\n"
        },
        "event": "summarize_selected_code",
        "id": "KNcxlGGGzzu9gQ0z20vS"
    },
    {
        "timestamp": "2025-08-23 20:21:09.000",
        "source": "backend",
        "data": {
            "summary": "This code defines a React component that displays a stock price line chart using Recharts.",
            "mapping": [
                {
                    "summaryComponent": "defines a React component",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "displays a stock price line chart",
                    "codeSegments": [
                        {
                            "line": 35,
                            "code": "<LineChart"
                        },
                        {
                            "line": 43,
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                        }
                    ]
                },
                {
                    "summaryComponent": "using Recharts",
                    "codeSegments": [
                        {
                            "line": 2,
                            "code": "import {"
                        },
                        {
                            "line": 11,
                            "code": "} from \"recharts\";"
                        }
                    ]
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));\n28: \n29:   return (\n30:     <div style={{ marginTop: \"2rem\" }}>\n31:       <h3>\n32:         {company} ({ticker})\n33:       </h3>\n34:       <ResponsiveContainer width=\"100%\" height={300}>\n35:         <LineChart\n36:           data={chartData}\n37:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n38:         >\n39:           <XAxis dataKey=\"date\" />\n40:           <YAxis domain={[\"auto\", \"auto\"]} />\n41:           <Tooltip />\n42:           <Legend />\n43:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n44:         </LineChart>\n45:       </ResponsiveContainer>\n46:     </div>\n47:   );\n48: };\n49: \n50: export default StockChart;\n51: "
        },
        "event": "map_summary_code",
        "id": "hWqxDXwzJdUHNwy22VJ3"
    },
    {
        "timestamp": "2025-08-23 20:21:09.000",
        "source": "backend",
        "data": {
            "summary": "• React component for stock price chart\n• Uses Recharts library\n• Displays company and ticker info",
            "mapping": [
                {
                    "summaryComponent": "React component for stock price chart",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "Uses Recharts library",
                    "codeSegments": [
                        {
                            "line": 2,
                            "code": "import {"
                        },
                        {
                            "line": 3,
                            "code": "LineChart,"
                        },
                        {
                            "line": 4,
                            "code": "Line,"
                        },
                        {
                            "line": 5,
                            "code": "XAxis,"
                        },
                        {
                            "line": 6,
                            "code": "YAxis,"
                        },
                        {
                            "line": 7,
                            "code": "Tooltip,"
                        },
                        {
                            "line": 8,
                            "code": "Legend,"
                        },
                        {
                            "line": 9,
                            "code": "ResponsiveContainer,"
                        },
                        {
                            "line": 10,
                            "code": "ReferenceLine,"
                        },
                        {
                            "line": 11,
                            "code": "} from \"recharts\";"
                        }
                    ]
                },
                {
                    "summaryComponent": "Displays company and ticker info",
                    "codeSegments": [
                        {
                            "line": 16,
                            "code": "const company = data.name;"
                        },
                        {
                            "line": 17,
                            "code": "const ticker = data.ticker;"
                        },
                        {
                            "line": 31,
                            "code": "<h3>"
                        },
                        {
                            "line": 32,
                            "code": "{company} ({ticker})"
                        }
                    ]
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));\n28: \n29:   return (\n30:     <div style={{ marginTop: \"2rem\" }}>\n31:       <h3>\n32:         {company} ({ticker})\n33:       </h3>\n34:       <ResponsiveContainer width=\"100%\" height={300}>\n35:         <LineChart\n36:           data={chartData}\n37:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n38:         >\n39:           <XAxis dataKey=\"date\" />\n40:           <YAxis domain={[\"auto\", \"auto\"]} />\n41:           <Tooltip />\n42:           <Legend />\n43:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n44:         </LineChart>\n45:       </ResponsiveContainer>\n46:     </div>\n47:   );\n48: };\n49: \n50: export default StockChart;\n51: "
        },
        "event": "map_summary_code",
        "id": "nN0loHUhznECICqObeUv"
    },
    {
        "timestamp": "2025-08-23 20:21:10.000",
        "source": "frontend",
        "data": {},
        "event": "click_summarize_code",
        "id": "ClTS8VLpNFuPCEfBawm2"
    },
    {
        "timestamp": "2025-08-23 20:21:10.000",
        "source": "backend",
        "data": {
            "summary": "This code implements a React component called StockChart that visualizes stock price data as a line chart using the Recharts library. It displays the company name, ticker symbol, and a line chart of closing prices over time. The component only renders if valid data is provided.",
            "mapping": [
                {
                    "summaryComponent": "a React component called StockChart",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        },
                        {
                            "line": 50,
                            "code": "export default StockChart;"
                        }
                    ]
                },
                {
                    "summaryComponent": "visualizes stock price data as a line chart",
                    "codeSegments": [
                        {
                            "line": 35,
                            "code": "<LineChart"
                        },
                        {
                            "line": 43,
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                        }
                    ]
                },
                {
                    "summaryComponent": "using the Recharts library",
                    "codeSegments": [
                        {
                            "line": 2,
                            "code": "import {"
                        },
                        {
                            "line": 11,
                            "code": "} from \"recharts\";"
                        }
                    ]
                },
                {
                    "summaryComponent": "displays the company name",
                    "codeSegments": [
                        {
                            "line": 16,
                            "code": "const company = data.name;"
                        },
                        {
                            "line": 32,
                            "code": "{company}"
                        }
                    ]
                },
                {
                    "summaryComponent": "ticker symbol",
                    "codeSegments": [
                        {
                            "line": 17,
                            "code": "const ticker = data.ticker;"
                        },
                        {
                            "line": 32,
                            "code": "{ticker}"
                        }
                    ]
                },
                {
                    "summaryComponent": "a line chart of closing prices over time",
                    "codeSegments": [
                        {
                            "line": 24,
                            "code": "const chartData = data.data.map((item) => ({"
                        },
                        {
                            "line": 26,
                            "code": "price: item.close,"
                        },
                        {
                            "line": 43,
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                        }
                    ]
                },
                {
                    "summaryComponent": "only renders if valid data is provided",
                    "codeSegments": [
                        {
                            "line": 14,
                            "code": "if (!data || !data.data || !data.data.length) return null;"
                        }
                    ]
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));\n28: \n29:   return (\n30:     <div style={{ marginTop: \"2rem\" }}>\n31:       <h3>\n32:         {company} ({ticker})\n33:       </h3>\n34:       <ResponsiveContainer width=\"100%\" height={300}>\n35:         <LineChart\n36:           data={chartData}\n37:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n38:         >\n39:           <XAxis dataKey=\"date\" />\n40:           <YAxis domain={[\"auto\", \"auto\"]} />\n41:           <Tooltip />\n42:           <Legend />\n43:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n44:         </LineChart>\n45:       </ResponsiveContainer>\n46:     </div>\n47:   );\n48: };\n49: \n50: export default StockChart;\n51: "
        },
        "event": "map_summary_code",
        "id": "O1oq6l9unawfxRECD3j2"
    },
    {
        "timestamp": "2025-08-23 20:21:10.000",
        "source": "backend",
        "data": {
            "summary": "• Defines a StockChart React component\n• Renders a line chart of stock closing prices using Recharts\n• Displays company name and ticker symbol\n• Only renders if valid data is present\n• Formats data for chart display",
            "mapping": [
                {
                    "summaryComponent": "Defines a StockChart React component",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "Renders a line chart of stock closing prices using Recharts",
                    "codeSegments": [
                        {
                            "line": 35,
                            "code": "<LineChart"
                        },
                        {
                            "line": 43,
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                        }
                    ]
                },
                {
                    "summaryComponent": "Displays company name and ticker symbol",
                    "codeSegments": [
                        {
                            "line": 31,
                            "code": "<h3>"
                        },
                        {
                            "line": 32,
                            "code": "{company} ({ticker})"
                        }
                    ]
                },
                {
                    "summaryComponent": "Only renders if valid data is present",
                    "codeSegments": [
                        {
                            "line": 14,
                            "code": "if (!data || !data.data || !data.data.length) return null;"
                        }
                    ]
                },
                {
                    "summaryComponent": "Formats data for chart display",
                    "codeSegments": [
                        {
                            "line": 24,
                            "code": "const chartData = data.data.map((item) => ({"
                        },
                        {
                            "line": 25,
                            "code": "date: item.date,"
                        },
                        {
                            "line": 26,
                            "code": "price: item.close,"
                        }
                    ]
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));\n28: \n29:   return (\n30:     <div style={{ marginTop: \"2rem\" }}>\n31:       <h3>\n32:         {company} ({ticker})\n33:       </h3>\n34:       <ResponsiveContainer width=\"100%\" height={300}>\n35:         <LineChart\n36:           data={chartData}\n37:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n38:         >\n39:           <XAxis dataKey=\"date\" />\n40:           <YAxis domain={[\"auto\", \"auto\"]} />\n41:           <Tooltip />\n42:           <Legend />\n43:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n44:         </LineChart>\n45:       </ResponsiveContainer>\n46:     </div>\n47:   );\n48: };\n49: \n50: export default StockChart;\n51: "
        },
        "event": "map_summary_code",
        "id": "n3RYFJqBLVOV6iltpeF5"
    },
    {
        "timestamp": "2025-08-23 20:21:11.000",
        "source": "backend",
        "data": {
            "summary": "• Defines a functional React component named StockChart\n• Handles input:\n  ◦ Expects a 'data' prop containing stock information\n  ◦ Checks for valid data before rendering\n• Extracts and displays company name and ticker symbol\n• Processes stock data:\n  ◦ Maps each data entry to an object with 'date' and 'price' (close value)\n  ◦ Includes a helper function to format date strings (though not used in rendering)\n• Renders a responsive line chart using Recharts:\n  ◦ Includes X and Y axes, tooltip, and legend\n  ◦ Plots a monotone line for closing prices, styled with a specific color and no dots\n  ◦ Sets chart margins and container height\n• Wraps the chart in a styled div with a top margin",
            "mapping": [
                {
                    "summaryComponent": "Defines a functional React component named StockChart",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "Expects a 'data' prop containing stock information",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "Checks for valid data before rendering",
                    "codeSegments": [
                        {
                            "line": 14,
                            "code": "if (!data || !data.data || !data.data.length) return null;"
                        }
                    ]
                },
                {
                    "summaryComponent": "Extracts and displays company name and ticker symbol",
                    "codeSegments": [
                        {
                            "line": 16,
                            "code": "const company = data.name;"
                        },
                        {
                            "line": 17,
                            "code": "const ticker = data.ticker;"
                        },
                        {
                            "line": 32,
                            "code": "{company} ({ticker})"
                        }
                    ]
                },
                {
                    "summaryComponent": "Maps each data entry to an object with 'date' and 'price' (close value)",
                    "codeSegments": [
                        {
                            "line": 24,
                            "code": "const chartData = data.data.map((item) => ({"
                        },
                        {
                            "line": 25,
                            "code": "date: item.date,"
                        },
                        {
                            "line": 26,
                            "code": "price: item.close,"
                        }
                    ]
                },
                {
                    "summaryComponent": "Includes a helper function to format date strings (though not used in rendering)",
                    "codeSegments": [
                        {
                            "line": 19,
                            "code": "const formatDateString = (date) => {"
                        },
                        {
                            "line": 20,
                            "code": "return date.split(\"T\")[0];"
                        }
                    ]
                },
                {
                    "summaryComponent": "Renders a responsive line chart using Recharts",
                    "codeSegments": [
                        {
                            "line": 34,
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                        },
                        {
                            "line": 35,
                            "code": "<LineChart"
                        }
                    ]
                },
                {
                    "summaryComponent": "Includes X and Y axes, tooltip, and legend",
                    "codeSegments": [
                        {
                            "line": 39,
                            "code": "<XAxis dataKey=\"date\" />"
                        },
                        {
                            "line": 40,
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                        },
                        {
                            "line": 41,
                            "code": "<Tooltip />"
                        },
                        {
                            "line": 42,
                            "code": "<Legend />"
                        }
                    ]
                },
                {
                    "summaryComponent": "Plots a monotone line for closing prices, styled with a specific color and no dots",
                    "codeSegments": [
                        {
                            "line": 43,
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                        }
                    ]
                },
                {
                    "summaryComponent": "Wraps the chart in a styled div with a top margin",
                    "codeSegments": [
                        {
                            "line": 30,
                            "code": "<div style={{ marginTop: \"2rem\" }}>"
                        }
                    ]
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));\n28: \n29:   return (\n30:     <div style={{ marginTop: \"2rem\" }}>\n31:       <h3>\n32:         {company} ({ticker})\n33:       </h3>\n34:       <ResponsiveContainer width=\"100%\" height={300}>\n35:         <LineChart\n36:           data={chartData}\n37:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n38:         >\n39:           <XAxis dataKey=\"date\" />\n40:           <YAxis domain={[\"auto\", \"auto\"]} />\n41:           <Tooltip />\n42:           <Legend />\n43:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n44:         </LineChart>\n45:       </ResponsiveContainer>\n46:     </div>\n47:   );\n48: };\n49: \n50: export default StockChart;\n51: "
        },
        "event": "map_summary_code",
        "id": "uFO1KwpV3B4pvHChNrIM"
    },
    {
        "timestamp": "2025-08-23 20:21:12.000",
        "source": "backend",
        "data": {
            "summary": "The provided code defines a StockChart React component that visualizes stock price data using the Recharts library. It first checks for valid input data, extracting the company name and ticker symbol for display. The component processes the input data to format it for the chart, mapping each entry to an object with date and closing price. It then renders a responsive line chart with axes, tooltip, legend, and a styled line representing the stock's closing prices over time, all within a styled container.",
            "mapping": [
                {
                    "summaryComponent": "StockChart React component",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "visualizes stock price data using the Recharts library",
                    "codeSegments": [
                        {
                            "line": 2,
                            "code": "import {"
                        },
                        {
                            "line": 3,
                            "code": "LineChart,"
                        },
                        {
                            "line": 4,
                            "code": "Line,"
                        },
                        {
                            "line": 5,
                            "code": "XAxis,"
                        },
                        {
                            "line": 6,
                            "code": "YAxis,"
                        },
                        {
                            "line": 7,
                            "code": "Tooltip,"
                        },
                        {
                            "line": 8,
                            "code": "Legend,"
                        },
                        {
                            "line": 9,
                            "code": "ResponsiveContainer,"
                        },
                        {
                            "line": 10,
                            "code": "ReferenceLine,"
                        },
                        {
                            "line": 11,
                            "code": "} from \"recharts\";"
                        }
                    ]
                },
                {
                    "summaryComponent": "checks for valid input data",
                    "codeSegments": [
                        {
                            "line": 14,
                            "code": "if (!data || !data.data || !data.data.length) return null;"
                        }
                    ]
                },
                {
                    "summaryComponent": "extracting the company name and ticker symbol for display",
                    "codeSegments": [
                        {
                            "line": 16,
                            "code": "const company = data.name;"
                        },
                        {
                            "line": 17,
                            "code": "const ticker = data.ticker;"
                        },
                        {
                            "line": 32,
                            "code": "{company} ({ticker})"
                        }
                    ]
                },
                {
                    "summaryComponent": "processes the input data to format it for the chart",
                    "codeSegments": [
                        {
                            "line": 24,
                            "code": "const chartData = data.data.map((item) => ({"
                        }
                    ]
                },
                {
                    "summaryComponent": "mapping each entry to an object with date and closing price",
                    "codeSegments": [
                        {
                            "line": 25,
                            "code": "date: item.date,"
                        },
                        {
                            "line": 26,
                            "code": "price: item.close,"
                        }
                    ]
                },
                {
                    "summaryComponent": "renders a responsive line chart",
                    "codeSegments": [
                        {
                            "line": 34,
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                        },
                        {
                            "line": 35,
                            "code": "<LineChart"
                        }
                    ]
                },
                {
                    "summaryComponent": "with axes, tooltip, legend",
                    "codeSegments": [
                        {
                            "line": 39,
                            "code": "<XAxis dataKey=\"date\" />"
                        },
                        {
                            "line": 40,
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                        },
                        {
                            "line": 41,
                            "code": "<Tooltip />"
                        },
                        {
                            "line": 42,
                            "code": "<Legend />"
                        }
                    ]
                },
                {
                    "summaryComponent": "a styled line representing the stock's closing prices over time",
                    "codeSegments": [
                        {
                            "line": 43,
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                        }
                    ]
                },
                {
                    "summaryComponent": "all within a styled container",
                    "codeSegments": [
                        {
                            "line": 30,
                            "code": "<div style={{ marginTop: \"2rem\" }}>"
                        }
                    ]
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));\n28: \n29:   return (\n30:     <div style={{ marginTop: \"2rem\" }}>\n31:       <h3>\n32:         {company} ({ticker})\n33:       </h3>\n34:       <ResponsiveContainer width=\"100%\" height={300}>\n35:         <LineChart\n36:           data={chartData}\n37:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n38:         >\n39:           <XAxis dataKey=\"date\" />\n40:           <YAxis domain={[\"auto\", \"auto\"]} />\n41:           <Tooltip />\n42:           <Legend />\n43:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n44:         </LineChart>\n45:       </ResponsiveContainer>\n46:     </div>\n47:   );\n48: };\n49: \n50: export default StockChart;\n51: "
        },
        "event": "map_summary_code",
        "id": "bxuFybNIdJQvXYVJ9Fn5"
    },
    {
        "timestamp": "2025-08-23 20:21:20.000",
        "source": "frontend",
        "data": {
            "mapping_index": 1,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "HJS53hN5a4JBmItGZ5fM"
    },
    {
        "timestamp": "2025-08-23 20:21:20.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "section_data": {
                "summaryData": {
                    "low_unstructured": "This code defines a React component that displays a stock price line chart using Recharts.",
                    "low_structured": "• React component for stock price chart\n• Uses Recharts library\n• Displays company and ticker info",
                    "medium_unstructured": "This code implements a React component called StockChart that visualizes stock price data as a line chart using the Recharts library. It displays the company name, ticker symbol, and a line chart of closing prices over time. The component only renders if valid data is provided.",
                    "high_structured": "• Defines a functional React component named StockChart\n• Handles input:\n  ◦ Expects a 'data' prop containing stock information\n  ◦ Checks for valid data before rendering\n• Extracts and displays company name and ticker symbol\n• Processes stock data:\n  ◦ Maps each data entry to an object with 'date' and 'price' (close value)\n  ◦ Includes a helper function to format date strings (though not used in rendering)\n• Renders a responsive line chart using Recharts:\n  ◦ Includes X and Y axes, tooltip, and legend\n  ◦ Plots a monotone line for closing prices, styled with a specific color and no dots\n  ◦ Sets chart margins and container height\n• Wraps the chart in a styled div with a top margin",
                    "medium_structured": "• Defines a StockChart React component\n• Renders a line chart of stock closing prices using Recharts\n• Displays company name and ticker symbol\n• Only renders if valid data is present\n• Formats data for chart display",
                    "title": "StockChart Component for Rendering Stock Price Line Charts",
                    "high_unstructured": "The provided code defines a StockChart React component that visualizes stock price data using the Recharts library. It first checks for valid input data, extracting the company name and ticker symbol for display. The component processes the input data to format it for the chart, mapping each entry to an object with date and closing price. It then renders a responsive line chart with axes, tooltip, legend, and a styled line representing the stock's closing prices over time, all within a styled container."
                },
                "metadata": {
                    "offset": 0,
                    "fullPath": "/project/workspace/frontend/src/StockChart.jsx",
                    "id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
                    "filename": "StockChart.jsx",
                    "originalCode": "import React from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  ReferenceLine,\n} from \"recharts\";\n\nconst StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;\n"
                },
                "editPromptValue": "",
                "selectedStructured": "unstructured",
                "editPromptDetailLevel": null,
                "editPromptStructured": null,
                "lines": [
                    1,
                    51
                ],
                "summaryMappings": {
                    "low_unstructured": [
                        {
                            "summaryComponent": "defines a React component",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "displays a stock price line chart",
                            "codeSegments": [
                                {
                                    "line": 35,
                                    "code": "<LineChart"
                                },
                                {
                                    "line": 43,
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "using Recharts",
                            "codeSegments": [
                                {
                                    "line": 2,
                                    "code": "import {"
                                },
                                {
                                    "line": 11,
                                    "code": "} from \"recharts\";"
                                }
                            ]
                        }
                    ],
                    "low_structured": [
                        {
                            "summaryComponent": "React component for stock price chart",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Uses Recharts library",
                            "codeSegments": [
                                {
                                    "line": 2,
                                    "code": "import {"
                                },
                                {
                                    "line": 3,
                                    "code": "LineChart,"
                                },
                                {
                                    "line": 4,
                                    "code": "Line,"
                                },
                                {
                                    "line": 5,
                                    "code": "XAxis,"
                                },
                                {
                                    "line": 6,
                                    "code": "YAxis,"
                                },
                                {
                                    "line": 7,
                                    "code": "Tooltip,"
                                },
                                {
                                    "line": 8,
                                    "code": "Legend,"
                                },
                                {
                                    "line": 9,
                                    "code": "ResponsiveContainer,"
                                },
                                {
                                    "line": 10,
                                    "code": "ReferenceLine,"
                                },
                                {
                                    "line": 11,
                                    "code": "} from \"recharts\";"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Displays company and ticker info",
                            "codeSegments": [
                                {
                                    "line": 16,
                                    "code": "const company = data.name;"
                                },
                                {
                                    "line": 17,
                                    "code": "const ticker = data.ticker;"
                                },
                                {
                                    "line": 31,
                                    "code": "<h3>"
                                },
                                {
                                    "line": 32,
                                    "code": "{company} ({ticker})"
                                }
                            ]
                        }
                    ],
                    "medium_unstructured": [
                        {
                            "summaryComponent": "a React component called StockChart",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                },
                                {
                                    "line": 50,
                                    "code": "export default StockChart;"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "visualizes stock price data as a line chart",
                            "codeSegments": [
                                {
                                    "line": 35,
                                    "code": "<LineChart"
                                },
                                {
                                    "line": 43,
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "using the Recharts library",
                            "codeSegments": [
                                {
                                    "line": 2,
                                    "code": "import {"
                                },
                                {
                                    "line": 11,
                                    "code": "} from \"recharts\";"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "displays the company name",
                            "codeSegments": [
                                {
                                    "line": 16,
                                    "code": "const company = data.name;"
                                },
                                {
                                    "line": 32,
                                    "code": "{company}"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "ticker symbol",
                            "codeSegments": [
                                {
                                    "line": 17,
                                    "code": "const ticker = data.ticker;"
                                },
                                {
                                    "line": 32,
                                    "code": "{ticker}"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "a line chart of closing prices over time",
                            "codeSegments": [
                                {
                                    "line": 24,
                                    "code": "const chartData = data.data.map((item) => ({"
                                },
                                {
                                    "line": 26,
                                    "code": "price: item.close,"
                                },
                                {
                                    "line": 43,
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "only renders if valid data is provided",
                            "codeSegments": [
                                {
                                    "line": 14,
                                    "code": "if (!data || !data.data || !data.data.length) return null;"
                                }
                            ]
                        }
                    ],
                    "high_structured": [
                        {
                            "summaryComponent": "Defines a functional React component named StockChart",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Expects a 'data' prop containing stock information",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Checks for valid data before rendering",
                            "codeSegments": [
                                {
                                    "line": 14,
                                    "code": "if (!data || !data.data || !data.data.length) return null;"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Extracts and displays company name and ticker symbol",
                            "codeSegments": [
                                {
                                    "line": 16,
                                    "code": "const company = data.name;"
                                },
                                {
                                    "line": 17,
                                    "code": "const ticker = data.ticker;"
                                },
                                {
                                    "line": 32,
                                    "code": "{company} ({ticker})"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Maps each data entry to an object with 'date' and 'price' (close value)",
                            "codeSegments": [
                                {
                                    "line": 24,
                                    "code": "const chartData = data.data.map((item) => ({"
                                },
                                {
                                    "line": 25,
                                    "code": "date: item.date,"
                                },
                                {
                                    "line": 26,
                                    "code": "price: item.close,"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Includes a helper function to format date strings (though not used in rendering)",
                            "codeSegments": [
                                {
                                    "line": 19,
                                    "code": "const formatDateString = (date) => {"
                                },
                                {
                                    "line": 20,
                                    "code": "return date.split(\"T\")[0];"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Renders a responsive line chart using Recharts",
                            "codeSegments": [
                                {
                                    "line": 34,
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                                },
                                {
                                    "line": 35,
                                    "code": "<LineChart"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Includes X and Y axes, tooltip, and legend",
                            "codeSegments": [
                                {
                                    "line": 39,
                                    "code": "<XAxis dataKey=\"date\" />"
                                },
                                {
                                    "line": 40,
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                                },
                                {
                                    "line": 41,
                                    "code": "<Tooltip />"
                                },
                                {
                                    "line": 42,
                                    "code": "<Legend />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Plots a monotone line for closing prices, styled with a specific color and no dots",
                            "codeSegments": [
                                {
                                    "line": 43,
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Wraps the chart in a styled div with a top margin",
                            "codeSegments": [
                                {
                                    "line": 30,
                                    "code": "<div style={{ marginTop: \"2rem\" }}>"
                                }
                            ]
                        }
                    ],
                    "medium_structured": [
                        {
                            "summaryComponent": "Defines a StockChart React component",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Renders a line chart of stock closing prices using Recharts",
                            "codeSegments": [
                                {
                                    "line": 35,
                                    "code": "<LineChart"
                                },
                                {
                                    "line": 43,
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Displays company name and ticker symbol",
                            "codeSegments": [
                                {
                                    "line": 31,
                                    "code": "<h3>"
                                },
                                {
                                    "line": 32,
                                    "code": "{company} ({ticker})"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Only renders if valid data is present",
                            "codeSegments": [
                                {
                                    "line": 14,
                                    "code": "if (!data || !data.data || !data.data.length) return null;"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Formats data for chart display",
                            "codeSegments": [
                                {
                                    "line": 24,
                                    "code": "const chartData = data.data.map((item) => ({"
                                },
                                {
                                    "line": 25,
                                    "code": "date: item.date,"
                                },
                                {
                                    "line": 26,
                                    "code": "price: item.close,"
                                }
                            ]
                        }
                    ],
                    "high_unstructured": [
                        {
                            "summaryComponent": "StockChart React component",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "visualizes stock price data using the Recharts library",
                            "codeSegments": [
                                {
                                    "line": 2,
                                    "code": "import {"
                                },
                                {
                                    "line": 3,
                                    "code": "LineChart,"
                                },
                                {
                                    "line": 4,
                                    "code": "Line,"
                                },
                                {
                                    "line": 5,
                                    "code": "XAxis,"
                                },
                                {
                                    "line": 6,
                                    "code": "YAxis,"
                                },
                                {
                                    "line": 7,
                                    "code": "Tooltip,"
                                },
                                {
                                    "line": 8,
                                    "code": "Legend,"
                                },
                                {
                                    "line": 9,
                                    "code": "ResponsiveContainer,"
                                },
                                {
                                    "line": 10,
                                    "code": "ReferenceLine,"
                                },
                                {
                                    "line": 11,
                                    "code": "} from \"recharts\";"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "checks for valid input data",
                            "codeSegments": [
                                {
                                    "line": 14,
                                    "code": "if (!data || !data.data || !data.data.length) return null;"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "extracting the company name and ticker symbol for display",
                            "codeSegments": [
                                {
                                    "line": 16,
                                    "code": "const company = data.name;"
                                },
                                {
                                    "line": 17,
                                    "code": "const ticker = data.ticker;"
                                },
                                {
                                    "line": 32,
                                    "code": "{company} ({ticker})"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "processes the input data to format it for the chart",
                            "codeSegments": [
                                {
                                    "line": 24,
                                    "code": "const chartData = data.data.map((item) => ({"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "mapping each entry to an object with date and closing price",
                            "codeSegments": [
                                {
                                    "line": 25,
                                    "code": "date: item.date,"
                                },
                                {
                                    "line": 26,
                                    "code": "price: item.close,"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "renders a responsive line chart",
                            "codeSegments": [
                                {
                                    "line": 34,
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                                },
                                {
                                    "line": 35,
                                    "code": "<LineChart"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "with axes, tooltip, legend",
                            "codeSegments": [
                                {
                                    "line": 39,
                                    "code": "<XAxis dataKey=\"date\" />"
                                },
                                {
                                    "line": 40,
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                                },
                                {
                                    "line": 41,
                                    "code": "<Tooltip />"
                                },
                                {
                                    "line": 42,
                                    "code": "<Legend />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "a styled line representing the stock's closing prices over time",
                            "codeSegments": [
                                {
                                    "line": 43,
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "all within a styled container",
                            "codeSegments": [
                                {
                                    "line": 30,
                                    "code": "<div style={{ marginTop: \"2rem\" }}>"
                                }
                            ]
                        }
                    ]
                },
                "selectedDetailLevel": "medium",
                "title": "StockChart Component for Rendering Stock Price Line Charts",
                "createdAt": 1755966072000
            }
        },
        "event": "create_new_section",
        "id": "p81B6NWfD7ZGJ484Z9Fs"
    },
    {
        "timestamp": "2025-08-23 20:21:20.000",
        "source": "frontend",
        "data": {
            "before_section_id": null,
            "after_section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143"
        },
        "event": "autotransit_section",
        "id": "vshpj4CP0agCPpY8miUH"
    },
    {
        "timestamp": "2025-08-23 20:21:22.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "ryy8kn0tyOA2DohELnJO"
    },
    {
        "timestamp": "2025-08-23 20:21:30.000",
        "source": "frontend",
        "data": {
            "mapping_index": 3,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "1gUSvCyzEmbBUZFoId65"
    },
    {
        "timestamp": "2025-08-23 20:21:30.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "DNgI7BmBxU4JWxydE5Mp"
    },
    {
        "timestamp": "2025-08-23 20:21:30.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "JYMYM0bVr7CT49LM3Zwz"
    },
    {
        "timestamp": "2025-08-23 20:21:30.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "hl9cw1bFXN50bZDPvKXt"
    },
    {
        "timestamp": "2025-08-23 20:21:30.000",
        "source": "frontend",
        "data": {
            "mapping_index": 4,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "juFKHeId1gtcvQ9qh7SW"
    },
    {
        "timestamp": "2025-08-23 20:21:30.000",
        "source": "frontend",
        "data": {
            "mapping_index": 6,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "sQtsVs54OZyqidEtLesp"
    },
    {
        "timestamp": "2025-08-23 20:21:33.000",
        "source": "frontend",
        "data": {
            "mapping_index": 0,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "8lRUzzztDItRTri02gWd"
    },
    {
        "timestamp": "2025-08-23 20:21:33.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "K8RCS1mSCLQGqvL5ffbV"
    },
    {
        "timestamp": "2025-08-23 20:21:33.000",
        "source": "frontend",
        "data": {
            "mapping_index": 6,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "TpSy3YTSnhqkgc2dIUOZ"
    },
    {
        "timestamp": "2025-08-23 20:21:33.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "ylxuCno2dDJvFuO4HLA6"
    },
    {
        "timestamp": "2025-08-23 20:21:34.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "MVeeX6cYBtIQLNmbu4ab"
    },
    {
        "timestamp": "2025-08-23 20:21:34.000",
        "source": "frontend",
        "data": {
            "mapping_index": 6,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "fRNW2QoJZ338CDyY3U27"
    },
    {
        "timestamp": "2025-08-23 20:21:35.000",
        "source": "frontend",
        "data": {
            "mapping_index": 1,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "0lcitYszJvOAHe5abYyc"
    },
    {
        "timestamp": "2025-08-23 20:21:35.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "1J13x5Tl1rP5Zxe11zjE"
    },
    {
        "timestamp": "2025-08-23 20:21:35.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "40lodx1uALeM9G7L0mmf"
    },
    {
        "timestamp": "2025-08-23 20:21:35.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "9hKR6FZ7EyjEtgii9uZg"
    },
    {
        "timestamp": "2025-08-23 20:21:35.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "B4bjFCPjeseUKflnKfl5"
    },
    {
        "timestamp": "2025-08-23 20:21:35.000",
        "source": "frontend",
        "data": {
            "mapping_index": 5,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "EUSkIUccNBXHQwgIrcFH"
    },
    {
        "timestamp": "2025-08-23 20:21:35.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "I59c5i2hkmKd2DOSAYaQ"
    },
    {
        "timestamp": "2025-08-23 20:21:35.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "R0zzqAVMqlpu6wZHQlw0"
    },
    {
        "timestamp": "2025-08-23 20:21:35.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "Zn43qEKQvpl9DThzLT01"
    },
    {
        "timestamp": "2025-08-23 20:21:35.000",
        "source": "frontend",
        "data": {
            "mapping_index": 6,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "fKwztcKCHHPVhfzIWXSI"
    },
    {
        "timestamp": "2025-08-23 20:21:35.000",
        "source": "frontend",
        "data": {
            "mapping_index": 2,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "flr2kQO2k1Sm6LfoIFeJ"
    },
    {
        "timestamp": "2025-08-23 20:21:35.000",
        "source": "frontend",
        "data": {
            "mapping_index": 3,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "l2xq93ks5tWsJ1Xcr0di"
    },
    {
        "timestamp": "2025-08-23 20:21:35.000",
        "source": "frontend",
        "data": {
            "mapping_index": 0,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "xDiNUSQJVOHpOGdpwFcv"
    },
    {
        "timestamp": "2025-08-23 20:21:35.000",
        "source": "frontend",
        "data": {
            "mapping_index": 1,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "yskhDLe0F8AogGFLBf7v"
    },
    {
        "timestamp": "2025-08-23 20:21:41.000",
        "source": "frontend",
        "data": {
            "mapping_index": 5,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "CXG9OmFDmI53tJjfEMRe"
    },
    {
        "timestamp": "2025-08-23 20:21:41.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "hUEKudB5DqBdiAQdtvLZ"
    },
    {
        "timestamp": "2025-08-23 20:21:46.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "1wTlkKSl1QGT9w2FgZad"
    },
    {
        "timestamp": "2025-08-23 20:21:46.000",
        "source": "frontend",
        "data": {
            "mapping_index": 4,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "87lux9KS04bFw8ZshXt2"
    },
    {
        "timestamp": "2025-08-23 20:21:46.000",
        "source": "frontend",
        "data": {
            "mapping_index": 0,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "M5AXgeph0SAoR1c8EHsv"
    },
    {
        "timestamp": "2025-08-23 20:21:46.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "XutemTAtB6OAS7DAcYzm"
    },
    {
        "timestamp": "2025-08-23 20:21:46.000",
        "source": "frontend",
        "data": {
            "mapping_index": 2,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "cckY732OifuWTF7X8u6M"
    },
    {
        "timestamp": "2025-08-23 20:21:46.000",
        "source": "frontend",
        "data": {
            "mapping_index": 6,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "oYYu2uhdmsZV7swwSYuH"
    },
    {
        "timestamp": "2025-08-23 20:21:46.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "xkib5uQw5wtkcMUXaw3O"
    },
    {
        "timestamp": "2025-08-23 20:21:47.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "4UjdUDFkmIz0j4WTnYEC"
    },
    {
        "timestamp": "2025-08-23 20:21:47.000",
        "source": "frontend",
        "data": {
            "mapping_index": 2,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "KkPh3wwEBhnyQL871C3Q"
    },
    {
        "timestamp": "2025-08-23 20:21:48.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "FE2myZ6n7QzcntujiPKN"
    },
    {
        "timestamp": "2025-08-23 20:21:48.000",
        "source": "frontend",
        "data": {
            "mapping_index": 0,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "dMteUJYBBiXgKKuZoYPC"
    },
    {
        "timestamp": "2025-08-23 20:21:49.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "6EK95Ogd7fDFOQTY6WxN"
    },
    {
        "timestamp": "2025-08-23 20:21:49.000",
        "source": "frontend",
        "data": {
            "mapping_index": 5,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "PZODc9YGfmKhTl5TrDft"
    },
    {
        "timestamp": "2025-08-23 20:21:49.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "PlaehNWYwD1joQOJAuOK"
    },
    {
        "timestamp": "2025-08-23 20:21:49.000",
        "source": "frontend",
        "data": {
            "mapping_index": 2,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "daCjULtDvEA4XdX1mXOX"
    },
    {
        "timestamp": "2025-08-23 20:21:49.000",
        "source": "frontend",
        "data": {
            "mapping_index": 6,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "nd1JOfPhk0jUxj5ImEly"
    },
    {
        "timestamp": "2025-08-23 20:21:49.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "rpOVX0XL6x8hcExqlDxf"
    },
    {
        "timestamp": "2025-08-23 20:21:49.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "xcFS6IIAL6PYz0GUUqY7"
    },
    {
        "timestamp": "2025-08-23 20:21:51.000",
        "source": "frontend",
        "data": {
            "mapping_index": 2,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "7chRee02Jqwq6c1koeRL"
    },
    {
        "timestamp": "2025-08-23 20:21:51.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "8IuTzsYQTmXfQoAZQu8W"
    },
    {
        "timestamp": "2025-08-23 20:21:51.000",
        "source": "frontend",
        "data": {
            "mapping_index": 3,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "D7CW2cQzGoAyh6lo5Jct"
    },
    {
        "timestamp": "2025-08-23 20:21:51.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "Js9rK2af6srv29vgp79D"
    },
    {
        "timestamp": "2025-08-23 20:21:51.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "L5rw4Bkj5TpVmT0NgXmx"
    },
    {
        "timestamp": "2025-08-23 20:21:51.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "MTyZGH8yDaoJIKYhUEM5"
    },
    {
        "timestamp": "2025-08-23 20:21:51.000",
        "source": "frontend",
        "data": {
            "mapping_index": 5,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "OVXQg06gyeK7Rw530JHU"
    },
    {
        "timestamp": "2025-08-23 20:21:51.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "Pt4mbr9RLuORb1AmHm7y"
    },
    {
        "timestamp": "2025-08-23 20:21:51.000",
        "source": "frontend",
        "data": {
            "mapping_index": 6,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "Qb0cmZp2BgWoUuPw2nPs"
    },
    {
        "timestamp": "2025-08-23 20:21:51.000",
        "source": "frontend",
        "data": {
            "mapping_index": 0,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "YFVLbhKtvXEjntzi58Gj"
    },
    {
        "timestamp": "2025-08-23 20:21:51.000",
        "source": "frontend",
        "data": {
            "mapping_index": 1,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "cFnLAcc16PLYSI1eCyg7"
    },
    {
        "timestamp": "2025-08-23 20:21:51.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "iwJQYHq5TEkNfxS6sOpr"
    },
    {
        "timestamp": "2025-08-23 20:21:51.000",
        "source": "frontend",
        "data": {
            "mapping_index": 6,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "jj7PTiN9jX6qCjOaMNxx"
    },
    {
        "timestamp": "2025-08-23 20:21:51.000",
        "source": "frontend",
        "data": {
            "mapping_index": 5,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "mnqu1sIKj74hKOWG6j08"
    },
    {
        "timestamp": "2025-08-23 20:21:51.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "pqJNCzB7ZnSrOtf3z9cm"
    },
    {
        "timestamp": "2025-08-23 20:21:51.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "tvaJ4YDfNMlvYBA3Q0IS"
    },
    {
        "timestamp": "2025-08-23 20:21:52.000",
        "source": "frontend",
        "data": {
            "mapping_index": 3,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "0hIsOJjDt6ZjKbQUhVfq"
    },
    {
        "timestamp": "2025-08-23 20:21:52.000",
        "source": "frontend",
        "data": {
            "mapping_index": 1,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "DJ6QoIPvwaF43gCDqKPw"
    },
    {
        "timestamp": "2025-08-23 20:21:52.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "k8sR0vcMkNhyclu9KBC1"
    },
    {
        "timestamp": "2025-08-23 20:21:53.000",
        "source": "frontend",
        "data": {
            "mapping_index": 0,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "1JXoeF32B5nj90zGwleH"
    },
    {
        "timestamp": "2025-08-23 20:21:53.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "H92PhE4K48zUjxBmy59i"
    },
    {
        "timestamp": "2025-08-23 20:21:53.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "Ht2QQovC5SZqsUlqrSXW"
    },
    {
        "timestamp": "2025-08-23 20:21:53.000",
        "source": "frontend",
        "data": {
            "mapping_index": 2,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "XbuOUx70q7gcBhh38YpI"
    },
    {
        "timestamp": "2025-08-23 20:21:53.000",
        "source": "frontend",
        "data": {
            "mapping_index": 2,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "kKL9nFUOxvwbX49XnbNF"
    },
    {
        "timestamp": "2025-08-23 20:21:53.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "zUcmWuCjdj1UwRLNEXDO"
    },
    {
        "timestamp": "2025-08-23 20:21:54.000",
        "source": "frontend",
        "data": {
            "mapping_index": 6,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "SjJRQpUDDWPdduhAiKWx"
    },
    {
        "timestamp": "2025-08-23 20:21:54.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "ZrDVCrziM8k7qcrfIV4D"
    },
    {
        "timestamp": "2025-08-23 20:21:54.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "fBFeLCuKbuXyv3dAcHxx"
    },
    {
        "timestamp": "2025-08-23 20:21:54.000",
        "source": "frontend",
        "data": {
            "mapping_index": 5,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "fGzozfGaDxVtK8qwG8dJ"
    },
    {
        "timestamp": "2025-08-23 20:21:54.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "wHIgcUqCqCCEokTJI1ZP"
    },
    {
        "timestamp": "2025-08-23 20:21:55.000",
        "source": "frontend",
        "data": {
            "mapping_index": 5,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "318wLnqMYhbe2qr7IyAN"
    },
    {
        "timestamp": "2025-08-23 20:21:55.000",
        "source": "frontend",
        "data": {
            "mapping_index": 3,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "6ubWnmdb6cKKiI8jFTGg"
    },
    {
        "timestamp": "2025-08-23 20:21:55.000",
        "source": "frontend",
        "data": {
            "mapping_index": 2,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "7yMisWN8LCwbnKVFqbm7"
    },
    {
        "timestamp": "2025-08-23 20:21:55.000",
        "source": "frontend",
        "data": {
            "mapping_index": 6,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "C7rcRuupi6HCDHCRynl7"
    },
    {
        "timestamp": "2025-08-23 20:21:55.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "Dq2UGO4QHYoIVw4ymlen"
    },
    {
        "timestamp": "2025-08-23 20:21:55.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "EiuCaOPrlk8eBWf4yuvJ"
    },
    {
        "timestamp": "2025-08-23 20:21:55.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "LgK9QQlfkwSWg2uws1Ai"
    },
    {
        "timestamp": "2025-08-23 20:21:55.000",
        "source": "frontend",
        "data": {
            "mapping_index": 6,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "LuTEeLOjeN7nyJuBJeGo"
    },
    {
        "timestamp": "2025-08-23 20:21:55.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "SEbswIBUX89GZSTqekXT"
    },
    {
        "timestamp": "2025-08-23 20:21:55.000",
        "source": "frontend",
        "data": {
            "mapping_index": 5,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "UDWpPE4UrrsMpvKQAi0t"
    },
    {
        "timestamp": "2025-08-23 20:21:55.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "e7oxUwBEbxud7HpjaHH4"
    },
    {
        "timestamp": "2025-08-23 20:21:55.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "xdv3bMUXcApLtebI4pR1"
    },
    {
        "timestamp": "2025-08-23 20:21:56.000",
        "source": "frontend",
        "data": {
            "mapping_index": 4,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "XJSN4JtpiCnCDhljttNp"
    },
    {
        "timestamp": "2025-08-23 20:21:56.000",
        "source": "frontend",
        "data": {
            "mapping_index": 5,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "aooGsAfklCTkF80jaUXu"
    },
    {
        "timestamp": "2025-08-23 20:21:56.000",
        "source": "frontend",
        "data": {
            "mapping_index": 3,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "lnmO6y5vtXkCCmC5yDkK"
    },
    {
        "timestamp": "2025-08-23 20:21:56.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "qOa28kQvAxKQvoszZBZW"
    },
    {
        "timestamp": "2025-08-23 20:21:56.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "rxBsVzsosHZ9qqaglnE3"
    },
    {
        "timestamp": "2025-08-23 20:21:57.000",
        "source": "frontend",
        "data": {
            "mapping_index": 6,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "Ys1TOsTLiDvdlyiD550g"
    },
    {
        "timestamp": "2025-08-23 20:21:57.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "qTP4QLeavZN6bX9TuDn3"
    },
    {
        "timestamp": "2025-08-23 20:21:57.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "zT6MHNZ3coXx9QBccIMk"
    },
    {
        "timestamp": "2025-08-23 20:22:00.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "14Q4wLzN9nO1W3uFLSTD"
    },
    {
        "timestamp": "2025-08-23 20:22:00.000",
        "source": "frontend",
        "data": {
            "mapping_index": 3,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "Mv3Xnd1K74yvXmGlzdEz"
    },
    {
        "timestamp": "2025-08-23 20:22:20.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "FHd7p7luio8J8LM3UTGk"
    },
    {
        "timestamp": "2025-08-23 20:22:20.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "FLEs94Cdsjgu73MDt20p"
    },
    {
        "timestamp": "2025-08-23 20:22:20.000",
        "source": "frontend",
        "data": {
            "mapping_index": 4,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "LnlvcbXpcReg4S3S0FpU"
    },
    {
        "timestamp": "2025-08-23 20:22:20.000",
        "source": "frontend",
        "data": {
            "mapping_index": 1,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "QER67FlKAk84rlXrVNsn"
    },
    {
        "timestamp": "2025-08-23 20:22:20.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "USXZp6mU0kgEBA0ZekMo"
    },
    {
        "timestamp": "2025-08-23 20:22:20.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "bzdColn7fhHJTlFlhvLt"
    },
    {
        "timestamp": "2025-08-23 20:22:20.000",
        "source": "frontend",
        "data": {
            "mapping_index": 6,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "esY10YJAP8cArphQNqXq"
    },
    {
        "timestamp": "2025-08-23 20:22:20.000",
        "source": "frontend",
        "data": {
            "mapping_index": 0,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "wAKCqaDdHtCDjsY24nVm"
    },
    {
        "timestamp": "2025-08-23 20:22:22.000",
        "source": "frontend",
        "data": {
            "mapping_index": 0,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "1VzTxh3v5he1uPhtyaU5"
    },
    {
        "timestamp": "2025-08-23 20:22:22.000",
        "source": "frontend",
        "data": {
            "mapping_index": 0,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "7FGF3W4ICWEYn0qNC8q6"
    },
    {
        "timestamp": "2025-08-23 20:22:22.000",
        "source": "frontend",
        "data": {
            "mapping_index": 2,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "9eIb4pkdpgtxOoEoUmlQ"
    },
    {
        "timestamp": "2025-08-23 20:22:22.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "BVzNwJz71s3OVuN58Pzj"
    },
    {
        "timestamp": "2025-08-23 20:22:22.000",
        "source": "frontend",
        "data": {
            "mapping_index": 5,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "GJlaQKwklYLxeaxPUz0z"
    },
    {
        "timestamp": "2025-08-23 20:22:22.000",
        "source": "frontend",
        "data": {
            "mapping_index": 5,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "GlaoibX6VBhfBQQXNFXf"
    },
    {
        "timestamp": "2025-08-23 20:22:22.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "JGVszqcKlGClAS1j5A7G"
    },
    {
        "timestamp": "2025-08-23 20:22:22.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "LAYfgf3G4ZlWuc8sOy5U"
    },
    {
        "timestamp": "2025-08-23 20:22:22.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "MyIbnPpc4d6WSVzDDLj7"
    },
    {
        "timestamp": "2025-08-23 20:22:22.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "OKJLjH3kbVYSsl5F3b3i"
    },
    {
        "timestamp": "2025-08-23 20:22:22.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "U1WRvGygLxUjH4aTBd33"
    },
    {
        "timestamp": "2025-08-23 20:22:22.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "Vnnd8WYClZ48PtckVITb"
    },
    {
        "timestamp": "2025-08-23 20:22:22.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "YomK3hwhlBeCmddH7ccB"
    },
    {
        "timestamp": "2025-08-23 20:22:22.000",
        "source": "frontend",
        "data": {
            "mapping_index": 6,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "Z2imLlNNXqDsyWHP8uLb"
    },
    {
        "timestamp": "2025-08-23 20:22:22.000",
        "source": "frontend",
        "data": {
            "mapping_index": 6,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "ZSrza6hKUSGQZ95JxIB1"
    },
    {
        "timestamp": "2025-08-23 20:22:22.000",
        "source": "frontend",
        "data": {
            "mapping_index": 5,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "aVLBHFnJBerN5HvvmErD"
    },
    {
        "timestamp": "2025-08-23 20:22:22.000",
        "source": "frontend",
        "data": {
            "mapping_index": 6,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "b1g9Ce9MpA1reO46UxND"
    },
    {
        "timestamp": "2025-08-23 20:22:22.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "dHgHiKcBJM57fZVXC8sF"
    },
    {
        "timestamp": "2025-08-23 20:22:22.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "h7QIWUvFcjWrA5K7Ecg1"
    },
    {
        "timestamp": "2025-08-23 20:22:22.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "kdUoEkHqElgJNKgig3HP"
    },
    {
        "timestamp": "2025-08-23 20:22:22.000",
        "source": "frontend",
        "data": {
            "mapping_index": 2,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "mQFgPicGhAxxsQpdhv2q"
    },
    {
        "timestamp": "2025-08-23 20:22:22.000",
        "source": "frontend",
        "data": {
            "mapping_index": 5,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "ooNmow7HXMpiKnEzrUQ9"
    },
    {
        "timestamp": "2025-08-23 20:22:22.000",
        "source": "frontend",
        "data": {
            "mapping_index": 2,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "r5VKVrxsq6UtR3TMrRFr"
    },
    {
        "timestamp": "2025-08-23 20:22:22.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "sCVSrkN0IZxCB1D2e7Ia"
    },
    {
        "timestamp": "2025-08-23 20:22:22.000",
        "source": "frontend",
        "data": {
            "mapping_index": 6,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "y37sIZ1MExa0GjiSCkDd"
    },
    {
        "timestamp": "2025-08-23 20:22:23.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "8m4YVoYq1uP1bLpXxNXp"
    },
    {
        "timestamp": "2025-08-23 20:22:23.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "GSQ2eSfxE3nLxmXMOTm4"
    },
    {
        "timestamp": "2025-08-23 20:22:23.000",
        "source": "frontend",
        "data": {
            "mapping_index": 0,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "H0miqGxmjLah446KzTDh"
    },
    {
        "timestamp": "2025-08-23 20:22:23.000",
        "source": "frontend",
        "data": {
            "mapping_index": 5,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "VvzJ90Bgc1HbGYT3vwqt"
    },
    {
        "timestamp": "2025-08-23 20:22:23.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "bASmxSlXhi6aAG1jYnkT"
    },
    {
        "timestamp": "2025-08-23 20:22:23.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "cH2mG1uwYYTiLtBq0lPC"
    },
    {
        "timestamp": "2025-08-23 20:22:23.000",
        "source": "frontend",
        "data": {
            "mapping_index": 6,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "jk34wLZsBf6ytAuIwP6l"
    },
    {
        "timestamp": "2025-08-23 20:22:23.000",
        "source": "frontend",
        "data": {
            "mapping_index": 2,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "lbf78Nfs63KFWb1KKntp"
    },
    {
        "timestamp": "2025-08-23 20:22:24.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "6fndiwseh6wnu8UtyKJ5"
    },
    {
        "timestamp": "2025-08-23 20:22:24.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "Q8RyOjdHjVQBmp2TeM9U"
    },
    {
        "timestamp": "2025-08-23 20:22:24.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "QGp36UEekE0oLKIqe3ny"
    },
    {
        "timestamp": "2025-08-23 20:22:24.000",
        "source": "frontend",
        "data": {
            "mapping_index": 5,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "Yi9jjOPc6StZ9DDZp13Z"
    },
    {
        "timestamp": "2025-08-23 20:22:24.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "Z8L1lhLd1GcpHHarzUz6"
    },
    {
        "timestamp": "2025-08-23 20:22:24.000",
        "source": "frontend",
        "data": {
            "mapping_index": 2,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "cVvcLT5kmd8Fy6QuAk7C"
    },
    {
        "timestamp": "2025-08-23 20:22:24.000",
        "source": "frontend",
        "data": {
            "mapping_index": 6,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "eQDS2cxmXJrC1sqfgpoX"
    },
    {
        "timestamp": "2025-08-23 20:22:24.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "fOXevmOD55FccT8cnTYK"
    },
    {
        "timestamp": "2025-08-23 20:22:24.000",
        "source": "frontend",
        "data": {
            "mapping_index": 0,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "wszvicXL5SllJgX4PmAK"
    },
    {
        "timestamp": "2025-08-23 20:22:25.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "5AlsoX4N80U8TLGKaixd"
    },
    {
        "timestamp": "2025-08-23 20:22:25.000",
        "source": "frontend",
        "data": {
            "mapping_index": 3,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "7b85CiKuL0RDShv4K4RD"
    },
    {
        "timestamp": "2025-08-23 20:22:25.000",
        "source": "frontend",
        "data": {
            "mapping_index": 0,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "8jmcu5yHXaBC6EzUUsPb"
    },
    {
        "timestamp": "2025-08-23 20:22:25.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "DfxIVWHfvqbVGNHfZZLb"
    },
    {
        "timestamp": "2025-08-23 20:22:25.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "PTnwy7LntZ18wCu6fgG0"
    },
    {
        "timestamp": "2025-08-23 20:22:25.000",
        "source": "frontend",
        "data": {
            "mapping_index": 1,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "PXDZRzeMHf9sNEfnUVQd"
    },
    {
        "timestamp": "2025-08-23 20:22:25.000",
        "source": "frontend",
        "data": {
            "mapping_index": 2,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "QMXdMcqECWdhObsonBci"
    },
    {
        "timestamp": "2025-08-23 20:22:25.000",
        "source": "frontend",
        "data": {
            "mapping_index": 1,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "S1gjjIriYK2iTFvzTEsT"
    },
    {
        "timestamp": "2025-08-23 20:22:25.000",
        "source": "frontend",
        "data": {
            "mapping_index": 0,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "TSzhPeeprxtAdiPTFaU2"
    },
    {
        "timestamp": "2025-08-23 20:22:25.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "d0VZs0ArhC6BVbQk0kq7"
    },
    {
        "timestamp": "2025-08-23 20:22:25.000",
        "source": "frontend",
        "data": {
            "mapping_index": 5,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "hqLljkYUge9Lo1VtfIFf"
    },
    {
        "timestamp": "2025-08-23 20:22:25.000",
        "source": "frontend",
        "data": {
            "mapping_index": 1,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "hse0cdF26RwYgaoUFOff"
    },
    {
        "timestamp": "2025-08-23 20:22:25.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "lCus43BooqTmZWH1lkIs"
    },
    {
        "timestamp": "2025-08-23 20:22:25.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "oMtxiazoQuDMJEBgfIec"
    },
    {
        "timestamp": "2025-08-23 20:22:25.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "ol5CVchRHTCNXCTq599y"
    },
    {
        "timestamp": "2025-08-23 20:22:25.000",
        "source": "frontend",
        "data": {
            "mapping_index": 3,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "r6acj0L5c2qjG3bf1OCL"
    },
    {
        "timestamp": "2025-08-23 20:22:25.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "rDn1GHkra9C4BK6PSPgb"
    },
    {
        "timestamp": "2025-08-23 20:22:25.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "vo09uiNiTMglNIWGcNXM"
    },
    {
        "timestamp": "2025-08-23 20:22:26.000",
        "source": "frontend",
        "data": {
            "mapping_index": 6,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "1ALBlLhKLmcH72HEM23n"
    },
    {
        "timestamp": "2025-08-23 20:22:26.000",
        "source": "frontend",
        "data": {
            "mapping_index": 5,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "5YlZ1J2iDJvirfKpMM3H"
    },
    {
        "timestamp": "2025-08-23 20:22:26.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "AGui2gUI3QOZoX9t4NFD"
    },
    {
        "timestamp": "2025-08-23 20:22:26.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "AJPTlxpy6iYl2mzHuIQR"
    },
    {
        "timestamp": "2025-08-23 20:22:26.000",
        "source": "frontend",
        "data": {
            "mapping_index": 2,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "CSXjhrUj86qbmFZaa7zT"
    },
    {
        "timestamp": "2025-08-23 20:22:26.000",
        "source": "frontend",
        "data": {
            "mapping_index": 4,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "DM4TmzdEnAebPrcNF3oY"
    },
    {
        "timestamp": "2025-08-23 20:22:26.000",
        "source": "frontend",
        "data": {
            "mapping_index": 1,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "G27PHkoDVl0wOAy3iCNL"
    },
    {
        "timestamp": "2025-08-23 20:22:26.000",
        "source": "frontend",
        "data": {
            "mapping_index": 6,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "J6sj91MUZ5EmEMAw1nSU"
    },
    {
        "timestamp": "2025-08-23 20:22:26.000",
        "source": "frontend",
        "data": {
            "mapping_index": 0,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "NJTx6e6zdlFdKNfyC3Yc"
    },
    {
        "timestamp": "2025-08-23 20:22:26.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "TJhDWU8TxU8C1K8NpEqk"
    },
    {
        "timestamp": "2025-08-23 20:22:26.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "W3zjfSy3YPJW2CPFsFP3"
    },
    {
        "timestamp": "2025-08-23 20:22:26.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "XgnDM9OpjgEBlQ95oyV4"
    },
    {
        "timestamp": "2025-08-23 20:22:26.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "ZpocSsnAqZiRTReNutWt"
    },
    {
        "timestamp": "2025-08-23 20:22:26.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "zlv7bD68kVGNpc41Jm1T"
    },
    {
        "timestamp": "2025-08-23 20:22:35.000",
        "source": "frontend",
        "data": {
            "mapping_index": 4,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "3hmGqA6pyfGJSHkdzdBb"
    },
    {
        "timestamp": "2025-08-23 20:22:35.000",
        "source": "frontend",
        "data": {
            "mapping_index": 1,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "F9Rn1F3fHbqAFeuxGVkh"
    },
    {
        "timestamp": "2025-08-23 20:22:35.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "KlYcz7qQJkxZVFjopQKK"
    },
    {
        "timestamp": "2025-08-23 20:22:35.000",
        "source": "frontend",
        "data": {
            "mapping_index": 6,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "OBlxlPU35cAPDZpnEJZ1"
    },
    {
        "timestamp": "2025-08-23 20:22:35.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "YDBSIVOle12zj0z3Q0Nh"
    },
    {
        "timestamp": "2025-08-23 20:22:35.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "qZ4c2RfrSSQqtc9E9drO"
    },
    {
        "timestamp": "2025-08-23 20:22:36.000",
        "source": "frontend",
        "data": {
            "mapping_index": 0,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "5EH83wwd0q21a4C8GYnm"
    },
    {
        "timestamp": "2025-08-23 20:22:37.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "6zKQ3f9j8nFO73qGjrPs"
    },
    {
        "timestamp": "2025-08-23 20:22:47.000",
        "source": "frontend",
        "data": {
            "mapping_index": 1,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "2xJeDjwkpWTK3GhdctzI"
    },
    {
        "timestamp": "2025-08-23 20:22:47.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "JENIe9wHzHApC7Yy4ylW"
    },
    {
        "timestamp": "2025-08-23 20:22:47.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "vFxyVnE6rEaXSASAzgZa"
    },
    {
        "timestamp": "2025-08-23 20:22:47.000",
        "source": "frontend",
        "data": {
            "mapping_index": 3,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "zUF51y0OECaFgr8tTG3Y"
    },
    {
        "timestamp": "2025-08-23 20:23:33.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "5Q0F4Ic6yCvmaSWNeXQX"
    },
    {
        "timestamp": "2025-08-23 20:23:33.000",
        "source": "frontend",
        "data": {
            "mapping_index": 6,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "blqyyvDaDyhoK60lcwuC"
    },
    {
        "timestamp": "2025-08-23 20:23:33.000",
        "source": "frontend",
        "data": {
            "mapping_index": 4,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "dLQIW7igvzGkpSNedDsC"
    },
    {
        "timestamp": "2025-08-23 20:23:33.000",
        "source": "frontend",
        "data": {
            "mapping_index": 1,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "pfuXpCmz6X7iG7HiColM"
    },
    {
        "timestamp": "2025-08-23 20:23:33.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "xbLIoWBjh8ABqaN70JTw"
    },
    {
        "timestamp": "2025-08-23 20:23:33.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "zSerxONp3FlOJ4nt4wRT"
    },
    {
        "timestamp": "2025-08-23 20:24:19.000",
        "source": "backend",
        "data": {
            "updated_code": "import React from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  ReferenceLine,\n} from \"recharts\";\n\nconst StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  // Function to format date as month (e.g., \"Jan\", \"Feb\")\n  const formatMonth = (dateString) => {\n    const date = new Date(dateString);\n    return date.toLocaleString('default', { month: 'short' });\n  };\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatMonth} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;",
            "instruction": "I want to change my X label to month instead of current timestamp",
            "original_code": "import React from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  ReferenceLine,\n} from \"recharts\";\n\nconst StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;\n"
        },
        "event": "modify_direct_instruction",
        "id": "1mc14JFmhbezr4PNr4w1"
    },
    {
        "timestamp": "2025-08-23 20:24:23.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "instruction": "I want to change my X label to month instead of current timestamp"
        },
        "event": "commit_direct_instruction",
        "id": "q5uPCQjbdx9uxugjXcAv"
    },
    {
        "timestamp": "2025-08-23 20:24:24.000",
        "source": "backend",
        "data": {
            "new_summary": {
                "low_unstructured": "This code defines a React component that displays a stock price line chart using Recharts, now formatting the X-axis labels to show month abbreviations.",
                "low_structured": "• React component for stock price chart\n• Uses Recharts library\n• Displays company and ticker info\n• X-axis labels are now formatted as month abbreviations",
                "medium_unstructured": "This code implements a React component called StockChart that visualizes stock price data as a line chart using the Recharts library. It displays the company name, ticker symbol, and a line chart of closing prices over time. The component only renders if valid data is provided, and now formats the X-axis labels to show month abbreviations instead of raw date strings.",
                "high_structured": "• Defines a functional React component named StockChart\n• Handles input:\n  ◦ Expects a 'data' prop containing stock information\n  ◦ Checks for valid data before rendering\n• Extracts and displays company name and ticker symbol\n• Processes stock data:\n  ◦ Maps each data entry to an object with 'date' and 'price' (close value)\n  ◦ Includes a helper function to format date strings (though not used in rendering)\n  ◦ Adds a new helper function to format dates as month abbreviations for the X-axis\n• Renders a responsive line chart using Recharts:\n  ◦ Includes X and Y axes, tooltip, and legend\n  ◦ X-axis labels are now formatted as month abbreviations using the new formatter\n  ◦ Plots a monotone line for closing prices, styled with a specific color and no dots\n  ◦ Sets chart margins and container height\n• Wraps the chart in a styled div with a top margin",
                "medium_structured": "• Defines a StockChart React component\n• Renders a line chart of stock closing prices using Recharts\n• Displays company name and ticker symbol\n• Only renders if valid data is present\n• Formats data for chart display\n• X-axis labels are formatted as month abbreviations using a custom formatter",
                "title": "StockChart Component with Month-Formatted X-Axis Labels",
                "high_unstructured": "The provided code defines a StockChart React component that visualizes stock price data using the Recharts library. It first checks for valid input data, extracting the company name and ticker symbol for display. The component processes the input data to format it for the chart, mapping each entry to an object with date and closing price. It then renders a responsive line chart with axes, tooltip, legend, and a styled line representing the stock's closing prices over time, all within a styled container. The X-axis labels are now formatted to display month abbreviations (e.g., 'Jan', 'Feb') instead of the raw date strings."
            },
            "original_code": "import React from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  ReferenceLine,\n} from \"recharts\";\n\nconst StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  // Function to format date as month (e.g., \"Jan\", \"Feb\")\n  const formatMonth = (dateString) => {\n    const date = new Date(dateString);\n    return date.toLocaleString('default', { month: 'short' });\n  };\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatMonth} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;",
            "new_code": "import React from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  ReferenceLine,\n} from \"recharts\";\n\nconst StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  // Function to format date as month (e.g., \"Jan\", \"Feb\")\n  const formatMonth = (dateString) => {\n    const date = new Date(dateString);\n    return date.toLocaleString('default', { month: 'short' });\n  };\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatMonth} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;",
            "old_summary": {
                "low_unstructured": "This code defines a React component that displays a stock price line chart using Recharts.",
                "low_structured": "• React component for stock price chart\n• Uses Recharts library\n• Displays company and ticker info",
                "medium_unstructured": "This code implements a React component called StockChart that visualizes stock price data as a line chart using the Recharts library. It displays the company name, ticker symbol, and a line chart of closing prices over time. The component only renders if valid data is provided.",
                "high_structured": "• Defines a functional React component named StockChart\n• Handles input:\n  ◦ Expects a 'data' prop containing stock information\n  ◦ Checks for valid data before rendering\n• Extracts and displays company name and ticker symbol\n• Processes stock data:\n  ◦ Maps each data entry to an object with 'date' and 'price' (close value)\n  ◦ Includes a helper function to format date strings (though not used in rendering)\n• Renders a responsive line chart using Recharts:\n  ◦ Includes X and Y axes, tooltip, and legend\n  ◦ Plots a monotone line for closing prices, styled with a specific color and no dots\n  ◦ Sets chart margins and container height\n• Wraps the chart in a styled div with a top margin",
                "medium_structured": "• Defines a StockChart React component\n• Renders a line chart of stock closing prices using Recharts\n• Displays company name and ticker symbol\n• Only renders if valid data is present\n• Formats data for chart display",
                "title": "StockChart Component for Rendering Stock Price Line Charts",
                "high_unstructured": "The provided code defines a StockChart React component that visualizes stock price data using the Recharts library. It first checks for valid input data, extracting the company name and ticker symbol for display. The component processes the input data to format it for the chart, mapping each entry to an object with date and closing price. It then renders a responsive line chart with axes, tooltip, legend, and a styled line representing the stock's closing prices over time, all within a styled container."
            }
        },
        "event": "summarize_modified_code",
        "id": "hAGNrIOARUXIVnu9ZJa2"
    },
    {
        "timestamp": "2025-08-23 20:24:27.000",
        "source": "backend",
        "data": {
            "summary": "This code defines a React component that displays a stock price line chart using Recharts, now formatting the X-axis labels to show month abbreviations.",
            "mapping": [
                {
                    "summaryComponent": "This code defines a React component",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        },
                        {
                            "line": 56,
                            "code": "export default StockChart;"
                        }
                    ]
                },
                {
                    "summaryComponent": "that displays a stock price line chart",
                    "codeSegments": [
                        {
                            "line": 41,
                            "code": "<LineChart"
                        },
                        {
                            "line": 49,
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                        }
                    ]
                },
                {
                    "summaryComponent": "using Recharts",
                    "codeSegments": [
                        {
                            "line": 2,
                            "code": "import {"
                        },
                        {
                            "line": 11,
                            "code": "} from \"recharts\";"
                        }
                    ]
                },
                {
                    "summaryComponent": "now formatting the X-axis labels",
                    "codeSegments": [
                        {
                            "line": 45,
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatMonth} />"
                        }
                    ]
                },
                {
                    "summaryComponent": "to show month abbreviations",
                    "codeSegments": [
                        {
                            "line": 30,
                            "code": "const formatMonth = (dateString) => {"
                        },
                        {
                            "line": 32,
                            "code": "return date.toLocaleString('default', { month: 'short' });"
                        }
                    ]
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));\n28: \n29:   // Function to format date as month (e.g., \"Jan\", \"Feb\")\n30:   const formatMonth = (dateString) => {\n31:     const date = new Date(dateString);\n32:     return date.toLocaleString('default', { month: 'short' });\n33:   };\n34: \n35:   return (\n36:     <div style={{ marginTop: \"2rem\" }}>\n37:       <h3>\n38:         {company} ({ticker})\n39:       </h3>\n40:       <ResponsiveContainer width=\"100%\" height={300}>\n41:         <LineChart\n42:           data={chartData}\n43:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n44:         >\n45:           <XAxis dataKey=\"date\" tickFormatter={formatMonth} />\n46:           <YAxis domain={[\"auto\", \"auto\"]} />\n47:           <Tooltip />\n48:           <Legend />\n49:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n50:         </LineChart>\n51:       </ResponsiveContainer>\n52:     </div>\n53:   );\n54: };\n55: \n56: export default StockChart;"
        },
        "event": "map_summary_code",
        "id": "EXyt4M4e5DCoD0xXFYup"
    },
    {
        "timestamp": "2025-08-23 20:24:27.000",
        "source": "frontend",
        "data": {
            "mapping_index": 3,
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "bKIMjKabKtZVQ3i3dZY0"
    },
    {
        "timestamp": "2025-08-23 20:24:27.000",
        "source": "backend",
        "data": {
            "summary": "• Defines a StockChart React component\n• Renders a line chart of stock closing prices using Recharts\n• Displays company name and ticker symbol\n• Only renders if valid data is present\n• Formats data for chart display\n• X-axis labels are formatted as month abbreviations using a custom formatter",
            "mapping": [
                {
                    "summaryComponent": "Defines a StockChart React component",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        },
                        {
                            "line": 56,
                            "code": "export default StockChart;"
                        }
                    ]
                },
                {
                    "summaryComponent": "Renders a line chart of stock closing prices using Recharts",
                    "codeSegments": [
                        {
                            "line": 40,
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                        },
                        {
                            "line": 41,
                            "code": "<LineChart"
                        },
                        {
                            "line": 49,
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                        }
                    ]
                },
                {
                    "summaryComponent": "Displays company name and ticker symbol",
                    "codeSegments": [
                        {
                            "line": 37,
                            "code": "<h3>"
                        },
                        {
                            "line": 38,
                            "code": "{company} ({ticker})"
                        }
                    ]
                },
                {
                    "summaryComponent": "Only renders if valid data is present",
                    "codeSegments": [
                        {
                            "line": 14,
                            "code": "if (!data || !data.data || !data.data.length) return null;"
                        }
                    ]
                },
                {
                    "summaryComponent": "Formats data for chart display",
                    "codeSegments": [
                        {
                            "line": 24,
                            "code": "const chartData = data.data.map((item) => ({"
                        },
                        {
                            "line": 25,
                            "code": "date: item.date,"
                        },
                        {
                            "line": 26,
                            "code": "price: item.close,"
                        }
                    ]
                },
                {
                    "summaryComponent": "X-axis labels are formatted as month abbreviations using a custom formatter",
                    "codeSegments": [
                        {
                            "line": 30,
                            "code": "const formatMonth = (dateString) => {"
                        },
                        {
                            "line": 45,
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatMonth} />"
                        }
                    ]
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));\n28: \n29:   // Function to format date as month (e.g., \"Jan\", \"Feb\")\n30:   const formatMonth = (dateString) => {\n31:     const date = new Date(dateString);\n32:     return date.toLocaleString('default', { month: 'short' });\n33:   };\n34: \n35:   return (\n36:     <div style={{ marginTop: \"2rem\" }}>\n37:       <h3>\n38:         {company} ({ticker})\n39:       </h3>\n40:       <ResponsiveContainer width=\"100%\" height={300}>\n41:         <LineChart\n42:           data={chartData}\n43:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n44:         >\n45:           <XAxis dataKey=\"date\" tickFormatter={formatMonth} />\n46:           <YAxis domain={[\"auto\", \"auto\"]} />\n47:           <Tooltip />\n48:           <Legend />\n49:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n50:         </LineChart>\n51:       </ResponsiveContainer>\n52:     </div>\n53:   );\n54: };\n55: \n56: export default StockChart;"
        },
        "event": "map_summary_code",
        "id": "wd3RT1Ea7OllTt5UVWa2"
    },
    {
        "timestamp": "2025-08-23 20:24:27.000",
        "source": "frontend",
        "data": {
            "section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "yFhqYROBxO4pgTcRLhQO"
    },
    {
        "timestamp": "2025-08-23 20:24:28.000",
        "source": "backend",
        "data": {
            "summary": "• React component for stock price chart\n• Uses Recharts library\n• Displays company and ticker info\n• X-axis labels are now formatted as month abbreviations",
            "mapping": [
                {
                    "summaryComponent": "React component for stock price chart",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        },
                        {
                            "line": 56,
                            "code": "export default StockChart;"
                        }
                    ]
                },
                {
                    "summaryComponent": "Uses Recharts library",
                    "codeSegments": [
                        {
                            "line": 2,
                            "code": "import {"
                        },
                        {
                            "line": 3,
                            "code": "LineChart,"
                        },
                        {
                            "line": 4,
                            "code": "Line,"
                        },
                        {
                            "line": 5,
                            "code": "XAxis,"
                        },
                        {
                            "line": 6,
                            "code": "YAxis,"
                        },
                        {
                            "line": 7,
                            "code": "Tooltip,"
                        },
                        {
                            "line": 8,
                            "code": "Legend,"
                        },
                        {
                            "line": 9,
                            "code": "ResponsiveContainer,"
                        },
                        {
                            "line": 10,
                            "code": "ReferenceLine,"
                        },
                        {
                            "line": 11,
                            "code": "} from \"recharts\";"
                        }
                    ]
                },
                {
                    "summaryComponent": "Displays company and ticker info",
                    "codeSegments": [
                        {
                            "line": 16,
                            "code": "const company = data.name;"
                        },
                        {
                            "line": 17,
                            "code": "const ticker = data.ticker;"
                        },
                        {
                            "line": 37,
                            "code": "<h3>"
                        },
                        {
                            "line": 38,
                            "code": "{company} ({ticker})"
                        }
                    ]
                },
                {
                    "summaryComponent": "X-axis labels are now formatted as month abbreviations",
                    "codeSegments": [
                        {
                            "line": 30,
                            "code": "const formatMonth = (dateString) => {"
                        },
                        {
                            "line": 32,
                            "code": "return date.toLocaleString('default', { month: 'short' });"
                        },
                        {
                            "line": 45,
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatMonth} />"
                        }
                    ]
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));\n28: \n29:   // Function to format date as month (e.g., \"Jan\", \"Feb\")\n30:   const formatMonth = (dateString) => {\n31:     const date = new Date(dateString);\n32:     return date.toLocaleString('default', { month: 'short' });\n33:   };\n34: \n35:   return (\n36:     <div style={{ marginTop: \"2rem\" }}>\n37:       <h3>\n38:         {company} ({ticker})\n39:       </h3>\n40:       <ResponsiveContainer width=\"100%\" height={300}>\n41:         <LineChart\n42:           data={chartData}\n43:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n44:         >\n45:           <XAxis dataKey=\"date\" tickFormatter={formatMonth} />\n46:           <YAxis domain={[\"auto\", \"auto\"]} />\n47:           <Tooltip />\n48:           <Legend />\n49:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n50:         </LineChart>\n51:       </ResponsiveContainer>\n52:     </div>\n53:   );\n54: };\n55: \n56: export default StockChart;"
        },
        "event": "map_summary_code",
        "id": "F9PwMbmWXHALA1RgFL7P"
    },
    {
        "timestamp": "2025-08-23 20:24:29.000",
        "source": "backend",
        "data": {
            "summary": "This code implements a React component called StockChart that visualizes stock price data as a line chart using the Recharts library. It displays the company name, ticker symbol, and a line chart of closing prices over time. The component only renders if valid data is provided, and now formats the X-axis labels to show month abbreviations instead of raw date strings.",
            "mapping": [
                {
                    "summaryComponent": "a React component called StockChart",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "visualizes stock price data as a line chart",
                    "codeSegments": [
                        {
                            "line": 41,
                            "code": "<LineChart"
                        },
                        {
                            "line": 49,
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                        }
                    ]
                },
                {
                    "summaryComponent": "using the Recharts library",
                    "codeSegments": [
                        {
                            "line": 2,
                            "code": "import {"
                        },
                        {
                            "line": 11,
                            "code": "} from \"recharts\";"
                        }
                    ]
                },
                {
                    "summaryComponent": "It displays the company name",
                    "codeSegments": [
                        {
                            "line": 16,
                            "code": "const company = data.name;"
                        },
                        {
                            "line": 38,
                            "code": "{company}"
                        }
                    ]
                },
                {
                    "summaryComponent": "ticker symbol",
                    "codeSegments": [
                        {
                            "line": 17,
                            "code": "const ticker = data.ticker;"
                        },
                        {
                            "line": 38,
                            "code": "({ticker})"
                        }
                    ]
                },
                {
                    "summaryComponent": "a line chart of closing prices over time",
                    "codeSegments": [
                        {
                            "line": 41,
                            "code": "<LineChart"
                        },
                        {
                            "line": 49,
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                        },
                        {
                            "line": 26,
                            "code": "price: item.close,"
                        }
                    ]
                },
                {
                    "summaryComponent": "The component only renders if valid data is provided",
                    "codeSegments": [
                        {
                            "line": 14,
                            "code": "if (!data || !data.data || !data.data.length) return null;"
                        }
                    ]
                },
                {
                    "summaryComponent": "formats the X-axis labels to show month abbreviations",
                    "codeSegments": [
                        {
                            "line": 30,
                            "code": "const formatMonth = (dateString) => {"
                        },
                        {
                            "line": 32,
                            "code": "return date.toLocaleString('default', { month: 'short' });"
                        },
                        {
                            "line": 45,
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatMonth} />"
                        }
                    ]
                },
                {
                    "summaryComponent": "instead of raw date strings",
                    "codeSegments": [
                        {
                            "line": 45,
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatMonth} />"
                        }
                    ]
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));\n28: \n29:   // Function to format date as month (e.g., \"Jan\", \"Feb\")\n30:   const formatMonth = (dateString) => {\n31:     const date = new Date(dateString);\n32:     return date.toLocaleString('default', { month: 'short' });\n33:   };\n34: \n35:   return (\n36:     <div style={{ marginTop: \"2rem\" }}>\n37:       <h3>\n38:         {company} ({ticker})\n39:       </h3>\n40:       <ResponsiveContainer width=\"100%\" height={300}>\n41:         <LineChart\n42:           data={chartData}\n43:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n44:         >\n45:           <XAxis dataKey=\"date\" tickFormatter={formatMonth} />\n46:           <YAxis domain={[\"auto\", \"auto\"]} />\n47:           <Tooltip />\n48:           <Legend />\n49:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n50:         </LineChart>\n51:       </ResponsiveContainer>\n52:     </div>\n53:   );\n54: };\n55: \n56: export default StockChart;"
        },
        "event": "map_summary_code",
        "id": "SDoYhXKPXYbNXoQ6dvTz"
    },
    {
        "timestamp": "2025-08-23 20:24:31.000",
        "source": "backend",
        "data": {
            "summary": "• Defines a functional React component named StockChart\n• Handles input:\n  ◦ Expects a 'data' prop containing stock information\n  ◦ Checks for valid data before rendering\n• Extracts and displays company name and ticker symbol\n• Processes stock data:\n  ◦ Maps each data entry to an object with 'date' and 'price' (close value)\n  ◦ Includes a helper function to format date strings (though not used in rendering)\n  ◦ Adds a new helper function to format dates as month abbreviations for the X-axis\n• Renders a responsive line chart using Recharts:\n  ◦ Includes X and Y axes, tooltip, and legend\n  ◦ X-axis labels are now formatted as month abbreviations using the new formatter\n  ◦ Plots a monotone line for closing prices, styled with a specific color and no dots\n  ◦ Sets chart margins and container height\n• Wraps the chart in a styled div with a top margin",
            "mapping": [
                {
                    "summaryComponent": "Defines a functional React component named StockChart",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "Expects a 'data' prop containing stock information",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "Checks for valid data before rendering",
                    "codeSegments": [
                        {
                            "line": 14,
                            "code": "if (!data || !data.data || !data.data.length) return null;"
                        }
                    ]
                },
                {
                    "summaryComponent": "Extracts and displays company name and ticker symbol",
                    "codeSegments": [
                        {
                            "line": 16,
                            "code": "const company = data.name;"
                        },
                        {
                            "line": 17,
                            "code": "const ticker = data.ticker;"
                        },
                        {
                            "line": 38,
                            "code": "{company} ({ticker})"
                        }
                    ]
                },
                {
                    "summaryComponent": "Maps each data entry to an object with 'date' and 'price' (close value)",
                    "codeSegments": [
                        {
                            "line": 24,
                            "code": "const chartData = data.data.map((item) => ({"
                        },
                        {
                            "line": 25,
                            "code": "date: item.date,"
                        },
                        {
                            "line": 26,
                            "code": "price: item.close,"
                        }
                    ]
                },
                {
                    "summaryComponent": "Includes a helper function to format date strings (though not used in rendering)",
                    "codeSegments": [
                        {
                            "line": 19,
                            "code": "const formatDateString = (date) => {"
                        },
                        {
                            "line": 20,
                            "code": "return date.split(\"T\")[0];"
                        }
                    ]
                },
                {
                    "summaryComponent": "Adds a new helper function to format dates as month abbreviations for the X-axis",
                    "codeSegments": [
                        {
                            "line": 30,
                            "code": "const formatMonth = (dateString) => {"
                        },
                        {
                            "line": 32,
                            "code": "return date.toLocaleString('default', { month: 'short' });"
                        }
                    ]
                },
                {
                    "summaryComponent": "Renders a responsive line chart using Recharts",
                    "codeSegments": [
                        {
                            "line": 40,
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                        },
                        {
                            "line": 41,
                            "code": "<LineChart"
                        }
                    ]
                },
                {
                    "summaryComponent": "Includes X and Y axes, tooltip, and legend",
                    "codeSegments": [
                        {
                            "line": 45,
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatMonth} />"
                        },
                        {
                            "line": 46,
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                        },
                        {
                            "line": 47,
                            "code": "<Tooltip />"
                        },
                        {
                            "line": 48,
                            "code": "<Legend />"
                        }
                    ]
                },
                {
                    "summaryComponent": "X-axis labels are now formatted as month abbreviations using the new formatter",
                    "codeSegments": [
                        {
                            "line": 45,
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatMonth} />"
                        }
                    ]
                },
                {
                    "summaryComponent": "Plots a monotone line for closing prices, styled with a specific color and no dots",
                    "codeSegments": [
                        {
                            "line": 49,
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                        }
                    ]
                },
                {
                    "summaryComponent": "Sets chart margins and container height",
                    "codeSegments": [
                        {
                            "line": 43,
                            "code": "margin={{ top: 10, right: 30, left: 0, bottom: 0 }}"
                        },
                        {
                            "line": 40,
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                        }
                    ]
                },
                {
                    "summaryComponent": "Wraps the chart in a styled div with a top margin",
                    "codeSegments": [
                        {
                            "line": 36,
                            "code": "<div style={{ marginTop: \"2rem\" }}>"
                        }
                    ]
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));\n28: \n29:   // Function to format date as month (e.g., \"Jan\", \"Feb\")\n30:   const formatMonth = (dateString) => {\n31:     const date = new Date(dateString);\n32:     return date.toLocaleString('default', { month: 'short' });\n33:   };\n34: \n35:   return (\n36:     <div style={{ marginTop: \"2rem\" }}>\n37:       <h3>\n38:         {company} ({ticker})\n39:       </h3>\n40:       <ResponsiveContainer width=\"100%\" height={300}>\n41:         <LineChart\n42:           data={chartData}\n43:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n44:         >\n45:           <XAxis dataKey=\"date\" tickFormatter={formatMonth} />\n46:           <YAxis domain={[\"auto\", \"auto\"]} />\n47:           <Tooltip />\n48:           <Legend />\n49:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n50:         </LineChart>\n51:       </ResponsiveContainer>\n52:     </div>\n53:   );\n54: };\n55: \n56: export default StockChart;"
        },
        "event": "map_summary_code",
        "id": "y0l74kExQnP9NgiGll1N"
    },
    {
        "timestamp": "2025-08-23 20:24:32.000",
        "source": "backend",
        "data": {
            "summary": "The provided code defines a StockChart React component that visualizes stock price data using the Recharts library. It first checks for valid input data, extracting the company name and ticker symbol for display. The component processes the input data to format it for the chart, mapping each entry to an object with date and closing price. It then renders a responsive line chart with axes, tooltip, legend, and a styled line representing the stock's closing prices over time, all within a styled container. The X-axis labels are now formatted to display month abbreviations (e.g., 'Jan', 'Feb') instead of the raw date strings.",
            "mapping": [
                {
                    "summaryComponent": "StockChart React component",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "visualizes stock price data using the Recharts library",
                    "codeSegments": [
                        {
                            "line": 2,
                            "code": "import {"
                        },
                        {
                            "line": 3,
                            "code": "LineChart,"
                        },
                        {
                            "line": 4,
                            "code": "Line,"
                        },
                        {
                            "line": 5,
                            "code": "XAxis,"
                        },
                        {
                            "line": 6,
                            "code": "YAxis,"
                        },
                        {
                            "line": 7,
                            "code": "Tooltip,"
                        },
                        {
                            "line": 8,
                            "code": "Legend,"
                        },
                        {
                            "line": 9,
                            "code": "ResponsiveContainer,"
                        },
                        {
                            "line": 10,
                            "code": "ReferenceLine,"
                        },
                        {
                            "line": 11,
                            "code": "} from \"recharts\";"
                        }
                    ]
                },
                {
                    "summaryComponent": "checks for valid input data",
                    "codeSegments": [
                        {
                            "line": 14,
                            "code": "if (!data || !data.data || !data.data.length) return null;"
                        }
                    ]
                },
                {
                    "summaryComponent": "extracting the company name and ticker symbol for display",
                    "codeSegments": [
                        {
                            "line": 16,
                            "code": "const company = data.name;"
                        },
                        {
                            "line": 17,
                            "code": "const ticker = data.ticker;"
                        },
                        {
                            "line": 38,
                            "code": "{company} ({ticker})"
                        }
                    ]
                },
                {
                    "summaryComponent": "processes the input data to format it for the chart",
                    "codeSegments": [
                        {
                            "line": 24,
                            "code": "const chartData = data.data.map((item) => ({"
                        },
                        {
                            "line": 25,
                            "code": "date: item.date,"
                        },
                        {
                            "line": 26,
                            "code": "price: item.close,"
                        },
                        {
                            "line": 27,
                            "code": "}));"
                        }
                    ]
                },
                {
                    "summaryComponent": "mapping each entry to an object with date and closing price",
                    "codeSegments": [
                        {
                            "line": 25,
                            "code": "date: item.date,"
                        },
                        {
                            "line": 26,
                            "code": "price: item.close,"
                        }
                    ]
                },
                {
                    "summaryComponent": "renders a responsive line chart",
                    "codeSegments": [
                        {
                            "line": 40,
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                        },
                        {
                            "line": 41,
                            "code": "<LineChart"
                        }
                    ]
                },
                {
                    "summaryComponent": "with axes, tooltip, legend, and a styled line representing the stock's closing prices over time",
                    "codeSegments": [
                        {
                            "line": 45,
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatMonth} />"
                        },
                        {
                            "line": 46,
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                        },
                        {
                            "line": 47,
                            "code": "<Tooltip />"
                        },
                        {
                            "line": 48,
                            "code": "<Legend />"
                        },
                        {
                            "line": 49,
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                        }
                    ]
                },
                {
                    "summaryComponent": "all within a styled container",
                    "codeSegments": [
                        {
                            "line": 36,
                            "code": "<div style={{ marginTop: \"2rem\" }}>"
                        }
                    ]
                },
                {
                    "summaryComponent": "X-axis labels are now formatted to display month abbreviations (e.g., 'Jan', 'Feb') instead of the raw date strings",
                    "codeSegments": [
                        {
                            "line": 30,
                            "code": "const formatMonth = (dateString) => {"
                        },
                        {
                            "line": 32,
                            "code": "return date.toLocaleString('default', { month: 'short' });"
                        },
                        {
                            "line": 45,
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatMonth} />"
                        }
                    ]
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));\n28: \n29:   // Function to format date as month (e.g., \"Jan\", \"Feb\")\n30:   const formatMonth = (dateString) => {\n31:     const date = new Date(dateString);\n32:     return date.toLocaleString('default', { month: 'short' });\n33:   };\n34: \n35:   return (\n36:     <div style={{ marginTop: \"2rem\" }}>\n37:       <h3>\n38:         {company} ({ticker})\n39:       </h3>\n40:       <ResponsiveContainer width=\"100%\" height={300}>\n41:         <LineChart\n42:           data={chartData}\n43:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n44:         >\n45:           <XAxis dataKey=\"date\" tickFormatter={formatMonth} />\n46:           <YAxis domain={[\"auto\", \"auto\"]} />\n47:           <Tooltip />\n48:           <Legend />\n49:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n50:         </LineChart>\n51:       </ResponsiveContainer>\n52:     </div>\n53:   );\n54: };\n55: \n56: export default StockChart;"
        },
        "event": "map_summary_code",
        "id": "uwI1gE5KF5eidjj0GfXc"
    },
    {
        "timestamp": "2025-08-23 20:24:40.000",
        "source": "frontend",
        "data": {
            "section_id": "815bf4fe-fb0d-432c-be7f-b108a0c2d14d",
            "section_data": {
                "summaryData": {
                    "low_unstructured": "This code defines a React component that displays a stock price line chart using Recharts, now formatting the X-axis labels to show month abbreviations.",
                    "low_structured": "• React component for stock price chart\n• Uses Recharts library\n• Displays company and ticker info\n• X-axis labels are now formatted as month abbreviations",
                    "medium_unstructured": "This code implements a React component called StockChart that visualizes stock price data as a line chart using the Recharts library. It displays the company name, ticker symbol, and a line chart of closing prices over time. The component only renders if valid data is provided, and now formats the X-axis labels to show month abbreviations instead of raw date strings.",
                    "high_structured": "• Defines a functional React component named StockChart\n• Handles input:\n  ◦ Expects a 'data' prop containing stock information\n  ◦ Checks for valid data before rendering\n• Extracts and displays company name and ticker symbol\n• Processes stock data:\n  ◦ Maps each data entry to an object with 'date' and 'price' (close value)\n  ◦ Includes a helper function to format date strings (though not used in rendering)\n  ◦ Adds a new helper function to format dates as month abbreviations for the X-axis\n• Renders a responsive line chart using Recharts:\n  ◦ Includes X and Y axes, tooltip, and legend\n  ◦ X-axis labels are now formatted as month abbreviations using the new formatter\n  ◦ Plots a monotone line for closing prices, styled with a specific color and no dots\n  ◦ Sets chart margins and container height\n• Wraps the chart in a styled div with a top margin",
                    "medium_structured": "• Defines a StockChart React component\n• Renders a line chart of stock closing prices using Recharts\n• Displays company name and ticker symbol\n• Only renders if valid data is present\n• Formats data for chart display\n• X-axis labels are formatted as month abbreviations using a custom formatter",
                    "title": "StockChart Component with Month-Formatted X-Axis Labels",
                    "high_unstructured": "The provided code defines a StockChart React component that visualizes stock price data using the Recharts library. It first checks for valid input data, extracting the company name and ticker symbol for display. The component processes the input data to format it for the chart, mapping each entry to an object with date and closing price. It then renders a responsive line chart with axes, tooltip, legend, and a styled line representing the stock's closing prices over time, all within a styled container. The X-axis labels are now formatted to display month abbreviations (e.g., 'Jan', 'Feb') instead of the raw date strings."
                },
                "metadata": {
                    "offset": 0,
                    "fullPath": "/project/workspace/frontend/src/StockChart.jsx",
                    "id": "815bf4fe-fb0d-432c-be7f-b108a0c2d14d",
                    "filename": "StockChart.jsx",
                    "originalCode": "import React from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  ReferenceLine,\n} from \"recharts\";\n\nconst StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  // Function to format date as month (e.g., \"Jan\", \"Feb\")\n  const formatMonth = (dateString) => {\n    const date = new Date(dateString);\n    return date.toLocaleString('default', { month: 'short' });\n  };\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatMonth} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;"
                },
                "createdAt": 1755966272000,
                "selectedStructured": "unstructured",
                "editPromptDetailLevel": null,
                "editPromptStructured": null,
                "lines": [
                    1,
                    56
                ],
                "summaryMappings": {
                    "low_unstructured": [
                        {
                            "summaryComponent": "This code defines a React component",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                },
                                {
                                    "line": 56,
                                    "code": "export default StockChart;"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "that displays a stock price line chart",
                            "codeSegments": [
                                {
                                    "line": 41,
                                    "code": "<LineChart"
                                },
                                {
                                    "line": 49,
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "using Recharts",
                            "codeSegments": [
                                {
                                    "line": 2,
                                    "code": "import {"
                                },
                                {
                                    "line": 11,
                                    "code": "} from \"recharts\";"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "now formatting the X-axis labels",
                            "codeSegments": [
                                {
                                    "line": 45,
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatMonth} />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "to show month abbreviations",
                            "codeSegments": [
                                {
                                    "line": 30,
                                    "code": "const formatMonth = (dateString) => {"
                                },
                                {
                                    "line": 32,
                                    "code": "return date.toLocaleString('default', { month: 'short' });"
                                }
                            ]
                        }
                    ],
                    "low_structured": [
                        {
                            "summaryComponent": "React component for stock price chart",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                },
                                {
                                    "line": 56,
                                    "code": "export default StockChart;"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Uses Recharts library",
                            "codeSegments": [
                                {
                                    "line": 2,
                                    "code": "import {"
                                },
                                {
                                    "line": 3,
                                    "code": "LineChart,"
                                },
                                {
                                    "line": 4,
                                    "code": "Line,"
                                },
                                {
                                    "line": 5,
                                    "code": "XAxis,"
                                },
                                {
                                    "line": 6,
                                    "code": "YAxis,"
                                },
                                {
                                    "line": 7,
                                    "code": "Tooltip,"
                                },
                                {
                                    "line": 8,
                                    "code": "Legend,"
                                },
                                {
                                    "line": 9,
                                    "code": "ResponsiveContainer,"
                                },
                                {
                                    "line": 10,
                                    "code": "ReferenceLine,"
                                },
                                {
                                    "line": 11,
                                    "code": "} from \"recharts\";"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Displays company and ticker info",
                            "codeSegments": [
                                {
                                    "line": 16,
                                    "code": "const company = data.name;"
                                },
                                {
                                    "line": 17,
                                    "code": "const ticker = data.ticker;"
                                },
                                {
                                    "line": 37,
                                    "code": "<h3>"
                                },
                                {
                                    "line": 38,
                                    "code": "{company} ({ticker})"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "X-axis labels are now formatted as month abbreviations",
                            "codeSegments": [
                                {
                                    "line": 30,
                                    "code": "const formatMonth = (dateString) => {"
                                },
                                {
                                    "line": 32,
                                    "code": "return date.toLocaleString('default', { month: 'short' });"
                                },
                                {
                                    "line": 45,
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatMonth} />"
                                }
                            ]
                        }
                    ],
                    "medium_unstructured": [
                        {
                            "summaryComponent": "a React component called StockChart",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "visualizes stock price data as a line chart",
                            "codeSegments": [
                                {
                                    "line": 41,
                                    "code": "<LineChart"
                                },
                                {
                                    "line": 49,
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "using the Recharts library",
                            "codeSegments": [
                                {
                                    "line": 2,
                                    "code": "import {"
                                },
                                {
                                    "line": 11,
                                    "code": "} from \"recharts\";"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "It displays the company name",
                            "codeSegments": [
                                {
                                    "line": 16,
                                    "code": "const company = data.name;"
                                },
                                {
                                    "line": 38,
                                    "code": "{company}"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "ticker symbol",
                            "codeSegments": [
                                {
                                    "line": 17,
                                    "code": "const ticker = data.ticker;"
                                },
                                {
                                    "line": 38,
                                    "code": "({ticker})"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "a line chart of closing prices over time",
                            "codeSegments": [
                                {
                                    "line": 41,
                                    "code": "<LineChart"
                                },
                                {
                                    "line": 49,
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                                },
                                {
                                    "line": 26,
                                    "code": "price: item.close,"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "The component only renders if valid data is provided",
                            "codeSegments": [
                                {
                                    "line": 14,
                                    "code": "if (!data || !data.data || !data.data.length) return null;"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "formats the X-axis labels to show month abbreviations",
                            "codeSegments": [
                                {
                                    "line": 30,
                                    "code": "const formatMonth = (dateString) => {"
                                },
                                {
                                    "line": 32,
                                    "code": "return date.toLocaleString('default', { month: 'short' });"
                                },
                                {
                                    "line": 45,
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatMonth} />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "instead of raw date strings",
                            "codeSegments": [
                                {
                                    "line": 45,
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatMonth} />"
                                }
                            ]
                        }
                    ],
                    "high_structured": [
                        {
                            "summaryComponent": "Defines a functional React component named StockChart",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Expects a 'data' prop containing stock information",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Checks for valid data before rendering",
                            "codeSegments": [
                                {
                                    "line": 14,
                                    "code": "if (!data || !data.data || !data.data.length) return null;"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Extracts and displays company name and ticker symbol",
                            "codeSegments": [
                                {
                                    "line": 16,
                                    "code": "const company = data.name;"
                                },
                                {
                                    "line": 17,
                                    "code": "const ticker = data.ticker;"
                                },
                                {
                                    "line": 38,
                                    "code": "{company} ({ticker})"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Maps each data entry to an object with 'date' and 'price' (close value)",
                            "codeSegments": [
                                {
                                    "line": 24,
                                    "code": "const chartData = data.data.map((item) => ({"
                                },
                                {
                                    "line": 25,
                                    "code": "date: item.date,"
                                },
                                {
                                    "line": 26,
                                    "code": "price: item.close,"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Includes a helper function to format date strings (though not used in rendering)",
                            "codeSegments": [
                                {
                                    "line": 19,
                                    "code": "const formatDateString = (date) => {"
                                },
                                {
                                    "line": 20,
                                    "code": "return date.split(\"T\")[0];"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Adds a new helper function to format dates as month abbreviations for the X-axis",
                            "codeSegments": [
                                {
                                    "line": 30,
                                    "code": "const formatMonth = (dateString) => {"
                                },
                                {
                                    "line": 32,
                                    "code": "return date.toLocaleString('default', { month: 'short' });"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Renders a responsive line chart using Recharts",
                            "codeSegments": [
                                {
                                    "line": 40,
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                                },
                                {
                                    "line": 41,
                                    "code": "<LineChart"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Includes X and Y axes, tooltip, and legend",
                            "codeSegments": [
                                {
                                    "line": 45,
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatMonth} />"
                                },
                                {
                                    "line": 46,
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                                },
                                {
                                    "line": 47,
                                    "code": "<Tooltip />"
                                },
                                {
                                    "line": 48,
                                    "code": "<Legend />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "X-axis labels are now formatted as month abbreviations using the new formatter",
                            "codeSegments": [
                                {
                                    "line": 45,
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatMonth} />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Plots a monotone line for closing prices, styled with a specific color and no dots",
                            "codeSegments": [
                                {
                                    "line": 49,
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Sets chart margins and container height",
                            "codeSegments": [
                                {
                                    "line": 43,
                                    "code": "margin={{ top: 10, right: 30, left: 0, bottom: 0 }}"
                                },
                                {
                                    "line": 40,
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Wraps the chart in a styled div with a top margin",
                            "codeSegments": [
                                {
                                    "line": 36,
                                    "code": "<div style={{ marginTop: \"2rem\" }}>"
                                }
                            ]
                        }
                    ],
                    "medium_structured": [
                        {
                            "summaryComponent": "Defines a StockChart React component",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                },
                                {
                                    "line": 56,
                                    "code": "export default StockChart;"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Renders a line chart of stock closing prices using Recharts",
                            "codeSegments": [
                                {
                                    "line": 40,
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                                },
                                {
                                    "line": 41,
                                    "code": "<LineChart"
                                },
                                {
                                    "line": 49,
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Displays company name and ticker symbol",
                            "codeSegments": [
                                {
                                    "line": 37,
                                    "code": "<h3>"
                                },
                                {
                                    "line": 38,
                                    "code": "{company} ({ticker})"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Only renders if valid data is present",
                            "codeSegments": [
                                {
                                    "line": 14,
                                    "code": "if (!data || !data.data || !data.data.length) return null;"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Formats data for chart display",
                            "codeSegments": [
                                {
                                    "line": 24,
                                    "code": "const chartData = data.data.map((item) => ({"
                                },
                                {
                                    "line": 25,
                                    "code": "date: item.date,"
                                },
                                {
                                    "line": 26,
                                    "code": "price: item.close,"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "X-axis labels are formatted as month abbreviations using a custom formatter",
                            "codeSegments": [
                                {
                                    "line": 30,
                                    "code": "const formatMonth = (dateString) => {"
                                },
                                {
                                    "line": 45,
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatMonth} />"
                                }
                            ]
                        }
                    ],
                    "high_unstructured": [
                        {
                            "summaryComponent": "StockChart React component",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "visualizes stock price data using the Recharts library",
                            "codeSegments": [
                                {
                                    "line": 2,
                                    "code": "import {"
                                },
                                {
                                    "line": 3,
                                    "code": "LineChart,"
                                },
                                {
                                    "line": 4,
                                    "code": "Line,"
                                },
                                {
                                    "line": 5,
                                    "code": "XAxis,"
                                },
                                {
                                    "line": 6,
                                    "code": "YAxis,"
                                },
                                {
                                    "line": 7,
                                    "code": "Tooltip,"
                                },
                                {
                                    "line": 8,
                                    "code": "Legend,"
                                },
                                {
                                    "line": 9,
                                    "code": "ResponsiveContainer,"
                                },
                                {
                                    "line": 10,
                                    "code": "ReferenceLine,"
                                },
                                {
                                    "line": 11,
                                    "code": "} from \"recharts\";"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "checks for valid input data",
                            "codeSegments": [
                                {
                                    "line": 14,
                                    "code": "if (!data || !data.data || !data.data.length) return null;"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "extracting the company name and ticker symbol for display",
                            "codeSegments": [
                                {
                                    "line": 16,
                                    "code": "const company = data.name;"
                                },
                                {
                                    "line": 17,
                                    "code": "const ticker = data.ticker;"
                                },
                                {
                                    "line": 38,
                                    "code": "{company} ({ticker})"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "processes the input data to format it for the chart",
                            "codeSegments": [
                                {
                                    "line": 24,
                                    "code": "const chartData = data.data.map((item) => ({"
                                },
                                {
                                    "line": 25,
                                    "code": "date: item.date,"
                                },
                                {
                                    "line": 26,
                                    "code": "price: item.close,"
                                },
                                {
                                    "line": 27,
                                    "code": "}));"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "mapping each entry to an object with date and closing price",
                            "codeSegments": [
                                {
                                    "line": 25,
                                    "code": "date: item.date,"
                                },
                                {
                                    "line": 26,
                                    "code": "price: item.close,"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "renders a responsive line chart",
                            "codeSegments": [
                                {
                                    "line": 40,
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                                },
                                {
                                    "line": 41,
                                    "code": "<LineChart"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "with axes, tooltip, legend, and a styled line representing the stock's closing prices over time",
                            "codeSegments": [
                                {
                                    "line": 45,
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatMonth} />"
                                },
                                {
                                    "line": 46,
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                                },
                                {
                                    "line": 47,
                                    "code": "<Tooltip />"
                                },
                                {
                                    "line": 48,
                                    "code": "<Legend />"
                                },
                                {
                                    "line": 49,
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "all within a styled container",
                            "codeSegments": [
                                {
                                    "line": 36,
                                    "code": "<div style={{ marginTop: \"2rem\" }}>"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "X-axis labels are now formatted to display month abbreviations (e.g., 'Jan', 'Feb') instead of the raw date strings",
                            "codeSegments": [
                                {
                                    "line": 30,
                                    "code": "const formatMonth = (dateString) => {"
                                },
                                {
                                    "line": 32,
                                    "code": "return date.toLocaleString('default', { month: 'short' });"
                                },
                                {
                                    "line": 45,
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatMonth} />"
                                }
                            ]
                        }
                    ]
                },
                "editPromptValue": "",
                "selectedDetailLevel": "medium",
                "oldSummaryData": {
                    "low_unstructured": "This code defines a React component that displays a stock price line chart using Recharts.",
                    "low_structured": "• React component for stock price chart\n• Uses Recharts library\n• Displays company and ticker info",
                    "medium_unstructured": "This code implements a React component called StockChart that visualizes stock price data as a line chart using the Recharts library. It displays the company name, ticker symbol, and a line chart of closing prices over time. The component only renders if valid data is provided.",
                    "high_structured": "• Defines a functional React component named StockChart\n• Handles input:\n  ◦ Expects a 'data' prop containing stock information\n  ◦ Checks for valid data before rendering\n• Extracts and displays company name and ticker symbol\n• Processes stock data:\n  ◦ Maps each data entry to an object with 'date' and 'price' (close value)\n  ◦ Includes a helper function to format date strings (though not used in rendering)\n• Renders a responsive line chart using Recharts:\n  ◦ Includes X and Y axes, tooltip, and legend\n  ◦ Plots a monotone line for closing prices, styled with a specific color and no dots\n  ◦ Sets chart margins and container height\n• Wraps the chart in a styled div with a top margin",
                    "medium_structured": "• Defines a StockChart React component\n• Renders a line chart of stock closing prices using Recharts\n• Displays company name and ticker symbol\n• Only renders if valid data is present\n• Formats data for chart display",
                    "title": "StockChart Component for Rendering Stock Price Line Charts",
                    "high_unstructured": "The provided code defines a StockChart React component that visualizes stock price data using the Recharts library. It first checks for valid input data, extracting the company name and ticker symbol for display. The component processes the input data to format it for the chart, mapping each entry to an object with date and closing price. It then renders a responsive line chart with axes, tooltip, legend, and a styled line representing the stock's closing prices over time, all within a styled container."
                },
                "title": "StockChart Component with Month-Formatted X-Axis Labels"
            }
        },
        "event": "create_new_section",
        "id": "WUodAJPMBA4M7vC54zDo"
    },
    {
        "timestamp": "2025-08-23 20:24:40.000",
        "source": "frontend",
        "data": {
            "before_section_id": "bd76602f-e3a2-4ade-942d-a89636bc6143",
            "after_section_id": "815bf4fe-fb0d-432c-be7f-b108a0c2d14d"
        },
        "event": "autotransit_section",
        "id": "qziGleD54VG1O40PfsQJ"
    },
    {
        "timestamp": "2025-08-23 20:25:00.000",
        "source": "frontend",
        "data": {
            "mapping_index": 1,
            "section_id": "815bf4fe-fb0d-432c-be7f-b108a0c2d14d",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "6wocfUvNnQPhj2ThGX3c"
    },
    {
        "timestamp": "2025-08-23 20:25:00.000",
        "source": "frontend",
        "data": {
            "mapping_index": 3,
            "section_id": "815bf4fe-fb0d-432c-be7f-b108a0c2d14d",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "JNTSexWVKvWdoGc1z3q5"
    },
    {
        "timestamp": "2025-08-23 20:25:00.000",
        "source": "frontend",
        "data": {
            "section_id": "815bf4fe-fb0d-432c-be7f-b108a0c2d14d",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "TDYx538gQJCF3m65cwYi"
    },
    {
        "timestamp": "2025-08-23 20:25:00.000",
        "source": "frontend",
        "data": {
            "section_id": "815bf4fe-fb0d-432c-be7f-b108a0c2d14d",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "X0qJhLy2AO5fU4Z99ojw"
    },
    {
        "timestamp": "2025-08-23 20:25:00.000",
        "source": "frontend",
        "data": {
            "section_id": "815bf4fe-fb0d-432c-be7f-b108a0c2d14d",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "Zxp0eSgOwZyRzgWwpisZ"
    },
    {
        "timestamp": "2025-08-23 20:25:00.000",
        "source": "frontend",
        "data": {
            "mapping_index": 7,
            "section_id": "815bf4fe-fb0d-432c-be7f-b108a0c2d14d",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "nASFSVWdScDG4qCucpvG"
    },
    {
        "timestamp": "2025-08-23 20:25:00.000",
        "source": "backend",
        "data": {
            "summary": {
                "low_unstructured": "This code defines a React component that displays a stock price line chart using the Recharts library.",
                "low_structured": "• React component for stock price chart\n• Uses Recharts for visualization\n• Displays company name and ticker",
                "medium_unstructured": "The code implements a StockChart React component that visualizes stock price data as a line chart using the Recharts library. It formats the input data and displays the company name and ticker above the chart. The chart includes axes, tooltips, and a legend for better readability.",
                "high_structured": "• Implements a StockChart React component to display stock price trends\n• Validates input data and extracts company name and ticker\n• Processes raw stock data:\n  ◦ Maps each data point to an object with date and closing price\n  ◦ Formats date strings for display, including month abbreviation for X-axis\n• Utilizes Recharts components:\n  ◦ ResponsiveContainer for adaptive sizing\n  ◦ LineChart with custom margins\n  ◦ XAxis and YAxis, with X-axis using formatted month labels\n  ◦ Tooltip and Legend for interactivity and clarity\n  ◦ Line component to plot closing prices as a smooth curve without dots\n• Renders the chart inside a styled div, displaying the company name and ticker above the chart",
                "medium_structured": "• Defines a StockChart React component for visualizing stock data\n• Formats and maps incoming data for use with Recharts\n• Renders a responsive line chart with axes, tooltip, and legend\n• Displays the company name and ticker above the chart",
                "title": "StockChart React Component for Rendering Stock Price Line Charts",
                "high_unstructured": "This code defines a StockChart React component that renders a responsive line chart of stock closing prices using the Recharts library. It first checks for valid data, extracts the company name and ticker, and processes the data into a format suitable for charting. The component formats date labels to show months, and displays the chart with axes, tooltips, a legend, and a monotone line representing price. The chart is wrapped in a styled container and includes a heading with the company name and ticker symbol."
            },
            "selected_code": "import React from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  ReferenceLine,\n} from \"recharts\";\n\nconst StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  // Function to format date as month (e.g., \"Jan\", \"Feb\")\n  const formatMonth = (dateString) => {\n    const date = new Date(dateString);\n    return date.toLocaleString(\"default\", { month: \"short\" });\n  };\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatMonth} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;"
        },
        "event": "summarize_selected_code",
        "id": "tKAjtTBvWvrX118i08Uw"
    },
    {
        "timestamp": "2025-08-23 20:25:01.000",
        "source": "backend",
        "data": {
            "summary": "This code defines a React component that displays a stock price line chart using the Recharts library.",
            "mapping": [
                {
                    "summaryComponent": "This code defines a React component",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "that displays a stock price line chart",
                    "codeSegments": [
                        {
                            "line": 41,
                            "code": "<LineChart"
                        },
                        {
                            "line": 49,
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                        }
                    ]
                },
                {
                    "summaryComponent": "using the Recharts library",
                    "codeSegments": [
                        {
                            "line": 2,
                            "code": "import {"
                        },
                        {
                            "line": 11,
                            "code": "} from \"recharts\";"
                        }
                    ]
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));\n28: \n29:   // Function to format date as month (e.g., \"Jan\", \"Feb\")\n30:   const formatMonth = (dateString) => {\n31:     const date = new Date(dateString);\n32:     return date.toLocaleString(\"default\", { month: \"short\" });\n33:   };\n34: \n35:   return (\n36:     <div style={{ marginTop: \"2rem\" }}>\n37:       <h3>\n38:         {company} ({ticker})\n39:       </h3>\n40:       <ResponsiveContainer width=\"100%\" height={300}>\n41:         <LineChart\n42:           data={chartData}\n43:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n44:         >\n45:           <XAxis dataKey=\"date\" tickFormatter={formatMonth} />\n46:           <YAxis domain={[\"auto\", \"auto\"]} />\n47:           <Tooltip />\n48:           <Legend />\n49:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n50:         </LineChart>\n51:       </ResponsiveContainer>\n52:     </div>\n53:   );\n54: };\n55: \n56: export default StockChart;"
        },
        "event": "map_summary_code",
        "id": "i8Aj1aDh1KuUYnGVuGcm"
    },
    {
        "timestamp": "2025-08-23 20:25:02.000",
        "source": "backend",
        "data": {
            "summary": "• React component for stock price chart\n• Uses Recharts for visualization\n• Displays company name and ticker",
            "mapping": [
                {
                    "summaryComponent": "React component for stock price chart",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "Uses Recharts for visualization",
                    "codeSegments": [
                        {
                            "line": 2,
                            "code": "import {"
                        },
                        {
                            "line": 3,
                            "code": "LineChart,"
                        },
                        {
                            "line": 4,
                            "code": "Line,"
                        },
                        {
                            "line": 5,
                            "code": "XAxis,"
                        },
                        {
                            "line": 6,
                            "code": "YAxis,"
                        },
                        {
                            "line": 7,
                            "code": "Tooltip,"
                        },
                        {
                            "line": 8,
                            "code": "Legend,"
                        },
                        {
                            "line": 9,
                            "code": "ResponsiveContainer,"
                        },
                        {
                            "line": 10,
                            "code": "ReferenceLine,"
                        },
                        {
                            "line": 11,
                            "code": "} from \"recharts\";"
                        }
                    ]
                },
                {
                    "summaryComponent": "Displays company name and ticker",
                    "codeSegments": [
                        {
                            "line": 16,
                            "code": "const company = data.name;"
                        },
                        {
                            "line": 17,
                            "code": "const ticker = data.ticker;"
                        },
                        {
                            "line": 37,
                            "code": "<h3>"
                        },
                        {
                            "line": 38,
                            "code": "{company} ({ticker})"
                        }
                    ]
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));\n28: \n29:   // Function to format date as month (e.g., \"Jan\", \"Feb\")\n30:   const formatMonth = (dateString) => {\n31:     const date = new Date(dateString);\n32:     return date.toLocaleString(\"default\", { month: \"short\" });\n33:   };\n34: \n35:   return (\n36:     <div style={{ marginTop: \"2rem\" }}>\n37:       <h3>\n38:         {company} ({ticker})\n39:       </h3>\n40:       <ResponsiveContainer width=\"100%\" height={300}>\n41:         <LineChart\n42:           data={chartData}\n43:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n44:         >\n45:           <XAxis dataKey=\"date\" tickFormatter={formatMonth} />\n46:           <YAxis domain={[\"auto\", \"auto\"]} />\n47:           <Tooltip />\n48:           <Legend />\n49:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n50:         </LineChart>\n51:       </ResponsiveContainer>\n52:     </div>\n53:   );\n54: };\n55: \n56: export default StockChart;"
        },
        "event": "map_summary_code",
        "id": "i71RBtXulbDyKuB4Q3a3"
    },
    {
        "timestamp": "2025-08-23 20:25:02.000",
        "source": "backend",
        "data": {
            "summary": "• Defines a StockChart React component for visualizing stock data\n• Formats and maps incoming data for use with Recharts\n• Renders a responsive line chart with axes, tooltip, and legend\n• Displays the company name and ticker above the chart",
            "mapping": [
                {
                    "summaryComponent": "Defines a StockChart React component for visualizing stock data",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        },
                        {
                            "line": 56,
                            "code": "export default StockChart;"
                        }
                    ]
                },
                {
                    "summaryComponent": "Formats and maps incoming data for use with Recharts",
                    "codeSegments": [
                        {
                            "line": 24,
                            "code": "const chartData = data.data.map((item) => ({"
                        },
                        {
                            "line": 25,
                            "code": "date: item.date,"
                        },
                        {
                            "line": 26,
                            "code": "price: item.close,"
                        },
                        {
                            "line": 27,
                            "code": "}));"
                        }
                    ]
                },
                {
                    "summaryComponent": "Renders a responsive line chart with axes, tooltip, and legend",
                    "codeSegments": [
                        {
                            "line": 40,
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                        },
                        {
                            "line": 41,
                            "code": "<LineChart"
                        },
                        {
                            "line": 45,
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatMonth} />"
                        },
                        {
                            "line": 46,
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                        },
                        {
                            "line": 47,
                            "code": "<Tooltip />"
                        },
                        {
                            "line": 48,
                            "code": "<Legend />"
                        },
                        {
                            "line": 49,
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                        }
                    ]
                },
                {
                    "summaryComponent": "Displays the company name and ticker above the chart",
                    "codeSegments": [
                        {
                            "line": 37,
                            "code": "<h3>"
                        },
                        {
                            "line": 38,
                            "code": "{company} ({ticker})"
                        }
                    ]
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));\n28: \n29:   // Function to format date as month (e.g., \"Jan\", \"Feb\")\n30:   const formatMonth = (dateString) => {\n31:     const date = new Date(dateString);\n32:     return date.toLocaleString(\"default\", { month: \"short\" });\n33:   };\n34: \n35:   return (\n36:     <div style={{ marginTop: \"2rem\" }}>\n37:       <h3>\n38:         {company} ({ticker})\n39:       </h3>\n40:       <ResponsiveContainer width=\"100%\" height={300}>\n41:         <LineChart\n42:           data={chartData}\n43:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n44:         >\n45:           <XAxis dataKey=\"date\" tickFormatter={formatMonth} />\n46:           <YAxis domain={[\"auto\", \"auto\"]} />\n47:           <Tooltip />\n48:           <Legend />\n49:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n50:         </LineChart>\n51:       </ResponsiveContainer>\n52:     </div>\n53:   );\n54: };\n55: \n56: export default StockChart;"
        },
        "event": "map_summary_code",
        "id": "kyQFmdfB7Kgm7NGMcSoj"
    },
    {
        "timestamp": "2025-08-23 20:25:03.000",
        "source": "frontend",
        "data": {},
        "event": "click_summarize_code",
        "id": "c1VFRGESoLQMDrxrdkRn"
    },
    {
        "timestamp": "2025-08-23 20:25:04.000",
        "source": "backend",
        "data": {
            "summary": "The code implements a StockChart React component that visualizes stock price data as a line chart using the Recharts library. It formats the input data and displays the company name and ticker above the chart. The chart includes axes, tooltips, and a legend for better readability.",
            "mapping": [
                {
                    "summaryComponent": "StockChart React component",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "visualizes stock price data as a line chart",
                    "codeSegments": [
                        {
                            "line": 41,
                            "code": "<LineChart"
                        },
                        {
                            "line": 49,
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                        }
                    ]
                },
                {
                    "summaryComponent": "using the Recharts library",
                    "codeSegments": [
                        {
                            "line": 2,
                            "code": "import {"
                        },
                        {
                            "line": 11,
                            "code": "} from \"recharts\";"
                        }
                    ]
                },
                {
                    "summaryComponent": "formats the input data",
                    "codeSegments": [
                        {
                            "line": 24,
                            "code": "const chartData = data.data.map((item) => ({"
                        },
                        {
                            "line": 25,
                            "code": "date: item.date,"
                        },
                        {
                            "line": 26,
                            "code": "price: item.close,"
                        }
                    ]
                },
                {
                    "summaryComponent": "displays the company name and ticker above the chart",
                    "codeSegments": [
                        {
                            "line": 16,
                            "code": "const company = data.name;"
                        },
                        {
                            "line": 17,
                            "code": "const ticker = data.ticker;"
                        },
                        {
                            "line": 37,
                            "code": "<h3>"
                        },
                        {
                            "line": 38,
                            "code": "{company} ({ticker})"
                        }
                    ]
                },
                {
                    "summaryComponent": "The chart includes axes",
                    "codeSegments": [
                        {
                            "line": 45,
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatMonth} />"
                        },
                        {
                            "line": 46,
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                        }
                    ]
                },
                {
                    "summaryComponent": "tooltips",
                    "codeSegments": [
                        {
                            "line": 47,
                            "code": "<Tooltip />"
                        }
                    ]
                },
                {
                    "summaryComponent": "and a legend",
                    "codeSegments": [
                        {
                            "line": 48,
                            "code": "<Legend />"
                        }
                    ]
                },
                {
                    "summaryComponent": "for better readability",
                    "codeSegments": [
                        {
                            "line": 47,
                            "code": "<Tooltip />"
                        },
                        {
                            "line": 48,
                            "code": "<Legend />"
                        }
                    ]
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));\n28: \n29:   // Function to format date as month (e.g., \"Jan\", \"Feb\")\n30:   const formatMonth = (dateString) => {\n31:     const date = new Date(dateString);\n32:     return date.toLocaleString(\"default\", { month: \"short\" });\n33:   };\n34: \n35:   return (\n36:     <div style={{ marginTop: \"2rem\" }}>\n37:       <h3>\n38:         {company} ({ticker})\n39:       </h3>\n40:       <ResponsiveContainer width=\"100%\" height={300}>\n41:         <LineChart\n42:           data={chartData}\n43:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n44:         >\n45:           <XAxis dataKey=\"date\" tickFormatter={formatMonth} />\n46:           <YAxis domain={[\"auto\", \"auto\"]} />\n47:           <Tooltip />\n48:           <Legend />\n49:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n50:         </LineChart>\n51:       </ResponsiveContainer>\n52:     </div>\n53:   );\n54: };\n55: \n56: export default StockChart;"
        },
        "event": "map_summary_code",
        "id": "qvAEu26WVrJ84Dh5bA7g"
    },
    {
        "timestamp": "2025-08-23 20:25:05.000",
        "source": "frontend",
        "data": {
            "mapping_index": 2,
            "section_id": "815bf4fe-fb0d-432c-be7f-b108a0c2d14d",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "8yDKbKxcUL49ox53acOt"
    },
    {
        "timestamp": "2025-08-23 20:25:05.000",
        "source": "frontend",
        "data": {
            "section_id": "815bf4fe-fb0d-432c-be7f-b108a0c2d14d",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "9tG7FoQezGp9CnppRG3X"
    },
    {
        "timestamp": "2025-08-23 20:25:05.000",
        "source": "frontend",
        "data": {
            "mapping_index": 6,
            "section_id": "815bf4fe-fb0d-432c-be7f-b108a0c2d14d",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "GbaiPqIjIBXtfxrYyWj1"
    },
    {
        "timestamp": "2025-08-23 20:25:05.000",
        "source": "frontend",
        "data": {
            "section_id": "815bf4fe-fb0d-432c-be7f-b108a0c2d14d",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "H4C824u9hp6mkT1pn7gQ"
    },
    {
        "timestamp": "2025-08-23 20:25:05.000",
        "source": "frontend",
        "data": {
            "mapping_index": 0,
            "section_id": "815bf4fe-fb0d-432c-be7f-b108a0c2d14d",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "TSetPcviYJDzOEjCMNxf"
    },
    {
        "timestamp": "2025-08-23 20:25:05.000",
        "source": "backend",
        "data": {
            "summary": "• Implements a StockChart React component to display stock price trends\n• Validates input data and extracts company name and ticker\n• Processes raw stock data:\n  ◦ Maps each data point to an object with date and closing price\n  ◦ Formats date strings for display, including month abbreviation for X-axis\n• Utilizes Recharts components:\n  ◦ ResponsiveContainer for adaptive sizing\n  ◦ LineChart with custom margins\n  ◦ XAxis and YAxis, with X-axis using formatted month labels\n  ◦ Tooltip and Legend for interactivity and clarity\n  ◦ Line component to plot closing prices as a smooth curve without dots\n• Renders the chart inside a styled div, displaying the company name and ticker above the chart",
            "mapping": [
                {
                    "summaryComponent": "Implements a StockChart React component to display stock price trends",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "Validates input data and extracts company name and ticker",
                    "codeSegments": [
                        {
                            "line": 14,
                            "code": "if (!data || !data.data || !data.data.length) return null;"
                        },
                        {
                            "line": 16,
                            "code": "const company = data.name;"
                        },
                        {
                            "line": 17,
                            "code": "const ticker = data.ticker;"
                        }
                    ]
                },
                {
                    "summaryComponent": "Processes raw stock data:",
                    "codeSegments": [
                        {
                            "line": 23,
                            "code": "// Combine labels and values into an array of objects for Recharts"
                        }
                    ]
                },
                {
                    "summaryComponent": "Maps each data point to an object with date and closing price",
                    "codeSegments": [
                        {
                            "line": 24,
                            "code": "const chartData = data.data.map((item) => ({"
                        },
                        {
                            "line": 25,
                            "code": "date: item.date,"
                        },
                        {
                            "line": 26,
                            "code": "price: item.close,"
                        }
                    ]
                },
                {
                    "summaryComponent": "Formats date strings for display, including month abbreviation for X-axis",
                    "codeSegments": [
                        {
                            "line": 19,
                            "code": "const formatDateString = (date) => {"
                        },
                        {
                            "line": 20,
                            "code": "return date.split(\"T\")[0];"
                        },
                        {
                            "line": 30,
                            "code": "const formatMonth = (dateString) => {"
                        },
                        {
                            "line": 32,
                            "code": "return date.toLocaleString(\"default\", { month: \"short\" });"
                        },
                        {
                            "line": 45,
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatMonth} />"
                        }
                    ]
                },
                {
                    "summaryComponent": "Utilizes Recharts components:",
                    "codeSegments": [
                        {
                            "line": 2,
                            "code": "import {"
                        },
                        {
                            "line": 3,
                            "code": "LineChart,"
                        },
                        {
                            "line": 4,
                            "code": "Line,"
                        },
                        {
                            "line": 5,
                            "code": "XAxis,"
                        },
                        {
                            "line": 6,
                            "code": "YAxis,"
                        },
                        {
                            "line": 7,
                            "code": "Tooltip,"
                        },
                        {
                            "line": 8,
                            "code": "Legend,"
                        },
                        {
                            "line": 9,
                            "code": "ResponsiveContainer,"
                        }
                    ]
                },
                {
                    "summaryComponent": "ResponsiveContainer for adaptive sizing",
                    "codeSegments": [
                        {
                            "line": 40,
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                        }
                    ]
                },
                {
                    "summaryComponent": "LineChart with custom margins",
                    "codeSegments": [
                        {
                            "line": 41,
                            "code": "<LineChart"
                        },
                        {
                            "line": 43,
                            "code": "margin={{ top: 10, right: 30, left: 0, bottom: 0 }}"
                        }
                    ]
                },
                {
                    "summaryComponent": "XAxis and YAxis, with X-axis using formatted month labels",
                    "codeSegments": [
                        {
                            "line": 45,
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatMonth} />"
                        },
                        {
                            "line": 46,
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                        }
                    ]
                },
                {
                    "summaryComponent": "Tooltip and Legend for interactivity and clarity",
                    "codeSegments": [
                        {
                            "line": 47,
                            "code": "<Tooltip />"
                        },
                        {
                            "line": 48,
                            "code": "<Legend />"
                        }
                    ]
                },
                {
                    "summaryComponent": "Line component to plot closing prices as a smooth curve without dots",
                    "codeSegments": [
                        {
                            "line": 49,
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                        }
                    ]
                },
                {
                    "summaryComponent": "Renders the chart inside a styled div, displaying the company name and ticker above the chart",
                    "codeSegments": [
                        {
                            "line": 36,
                            "code": "<div style={{ marginTop: \"2rem\" }}>"
                        },
                        {
                            "line": 37,
                            "code": "<h3>"
                        },
                        {
                            "line": 38,
                            "code": "{company} ({ticker})"
                        }
                    ]
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));\n28: \n29:   // Function to format date as month (e.g., \"Jan\", \"Feb\")\n30:   const formatMonth = (dateString) => {\n31:     const date = new Date(dateString);\n32:     return date.toLocaleString(\"default\", { month: \"short\" });\n33:   };\n34: \n35:   return (\n36:     <div style={{ marginTop: \"2rem\" }}>\n37:       <h3>\n38:         {company} ({ticker})\n39:       </h3>\n40:       <ResponsiveContainer width=\"100%\" height={300}>\n41:         <LineChart\n42:           data={chartData}\n43:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n44:         >\n45:           <XAxis dataKey=\"date\" tickFormatter={formatMonth} />\n46:           <YAxis domain={[\"auto\", \"auto\"]} />\n47:           <Tooltip />\n48:           <Legend />\n49:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n50:         </LineChart>\n51:       </ResponsiveContainer>\n52:     </div>\n53:   );\n54: };\n55: \n56: export default StockChart;"
        },
        "event": "map_summary_code",
        "id": "hjf3QhTXZnjpVTmd7dbR"
    },
    {
        "timestamp": "2025-08-23 20:25:05.000",
        "source": "frontend",
        "data": {
            "section_id": "815bf4fe-fb0d-432c-be7f-b108a0c2d14d",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "lIT98STQvcAXJZUUp6NB"
    },
    {
        "timestamp": "2025-08-23 20:25:05.000",
        "source": "frontend",
        "data": {
            "section_id": "815bf4fe-fb0d-432c-be7f-b108a0c2d14d",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "pvNPOO0cyT7qbAu486VV"
    },
    {
        "timestamp": "2025-08-23 20:25:05.000",
        "source": "frontend",
        "data": {
            "section_id": "815bf4fe-fb0d-432c-be7f-b108a0c2d14d",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "pzcHZKOPPba0cYX847AF"
    },
    {
        "timestamp": "2025-08-23 20:25:05.000",
        "source": "backend",
        "data": {
            "summary": "This code defines a StockChart React component that renders a responsive line chart of stock closing prices using the Recharts library. It first checks for valid data, extracts the company name and ticker, and processes the data into a format suitable for charting. The component formats date labels to show months, and displays the chart with axes, tooltips, a legend, and a monotone line representing price. The chart is wrapped in a styled container and includes a heading with the company name and ticker symbol.",
            "mapping": [
                {
                    "summaryComponent": "defines a StockChart React component",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "renders a responsive line chart of stock closing prices",
                    "codeSegments": [
                        {
                            "line": 40,
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                        },
                        {
                            "line": 41,
                            "code": "<LineChart"
                        },
                        {
                            "line": 49,
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                        }
                    ]
                },
                {
                    "summaryComponent": "using the Recharts library",
                    "codeSegments": [
                        {
                            "line": 2,
                            "code": "import {"
                        },
                        {
                            "line": 11,
                            "code": "} from \"recharts\";"
                        }
                    ]
                },
                {
                    "summaryComponent": "checks for valid data",
                    "codeSegments": [
                        {
                            "line": 14,
                            "code": "if (!data || !data.data || !data.data.length) return null;"
                        }
                    ]
                },
                {
                    "summaryComponent": "extracts the company name and ticker",
                    "codeSegments": [
                        {
                            "line": 16,
                            "code": "const company = data.name;"
                        },
                        {
                            "line": 17,
                            "code": "const ticker = data.ticker;"
                        }
                    ]
                },
                {
                    "summaryComponent": "processes the data into a format suitable for charting",
                    "codeSegments": [
                        {
                            "line": 24,
                            "code": "const chartData = data.data.map((item) => ({"
                        },
                        {
                            "line": 25,
                            "code": "date: item.date,"
                        },
                        {
                            "line": 26,
                            "code": "price: item.close,"
                        },
                        {
                            "line": 27,
                            "code": "}));"
                        }
                    ]
                },
                {
                    "summaryComponent": "formats date labels to show months",
                    "codeSegments": [
                        {
                            "line": 30,
                            "code": "const formatMonth = (dateString) => {"
                        },
                        {
                            "line": 32,
                            "code": "return date.toLocaleString(\"default\", { month: \"short\" });"
                        },
                        {
                            "line": 45,
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatMonth} />"
                        }
                    ]
                },
                {
                    "summaryComponent": "displays the chart with axes, tooltips, a legend, and a monotone line representing price",
                    "codeSegments": [
                        {
                            "line": 45,
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatMonth} />"
                        },
                        {
                            "line": 46,
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                        },
                        {
                            "line": 47,
                            "code": "<Tooltip />"
                        },
                        {
                            "line": 48,
                            "code": "<Legend />"
                        },
                        {
                            "line": 49,
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                        }
                    ]
                },
                {
                    "summaryComponent": "wrapped in a styled container",
                    "codeSegments": [
                        {
                            "line": 36,
                            "code": "<div style={{ marginTop: \"2rem\" }}>"
                        }
                    ]
                },
                {
                    "summaryComponent": "includes a heading with the company name and ticker symbol",
                    "codeSegments": [
                        {
                            "line": 37,
                            "code": "<h3>"
                        },
                        {
                            "line": 38,
                            "code": "{company} ({ticker})"
                        }
                    ]
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));\n28: \n29:   // Function to format date as month (e.g., \"Jan\", \"Feb\")\n30:   const formatMonth = (dateString) => {\n31:     const date = new Date(dateString);\n32:     return date.toLocaleString(\"default\", { month: \"short\" });\n33:   };\n34: \n35:   return (\n36:     <div style={{ marginTop: \"2rem\" }}>\n37:       <h3>\n38:         {company} ({ticker})\n39:       </h3>\n40:       <ResponsiveContainer width=\"100%\" height={300}>\n41:         <LineChart\n42:           data={chartData}\n43:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n44:         >\n45:           <XAxis dataKey=\"date\" tickFormatter={formatMonth} />\n46:           <YAxis domain={[\"auto\", \"auto\"]} />\n47:           <Tooltip />\n48:           <Legend />\n49:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n50:         </LineChart>\n51:       </ResponsiveContainer>\n52:     </div>\n53:   );\n54: };\n55: \n56: export default StockChart;"
        },
        "event": "map_summary_code",
        "id": "r03gg6ylE2L33JAUVRwn"
    },
    {
        "timestamp": "2025-08-23 20:25:05.000",
        "source": "frontend",
        "data": {
            "mapping_index": 7,
            "section_id": "815bf4fe-fb0d-432c-be7f-b108a0c2d14d",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "thrnBXFKOj0n8a5LaU2U"
    },
    {
        "timestamp": "2025-08-23 20:25:05.000",
        "source": "frontend",
        "data": {
            "mapping_index": 5,
            "section_id": "815bf4fe-fb0d-432c-be7f-b108a0c2d14d",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "zE7pSrgz1mQ1JBlfRrEe"
    },
    {
        "timestamp": "2025-08-23 20:25:07.000",
        "source": "frontend",
        "data": {
            "section_id": "815bf4fe-fb0d-432c-be7f-b108a0c2d14d",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "A20rk4Apk1Snmot8GOi1"
    },
    {
        "timestamp": "2025-08-23 20:25:07.000",
        "source": "frontend",
        "data": {
            "section_id": "815bf4fe-fb0d-432c-be7f-b108a0c2d14d",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "GzBc6a9kzkgKQCDp9zTR"
    },
    {
        "timestamp": "2025-08-23 20:25:07.000",
        "source": "frontend",
        "data": {
            "mapping_index": 1,
            "section_id": "815bf4fe-fb0d-432c-be7f-b108a0c2d14d",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "L2XaV4cCwgt6m2A409HA"
    },
    {
        "timestamp": "2025-08-23 20:25:07.000",
        "source": "frontend",
        "data": {
            "mapping_index": 1,
            "section_id": "815bf4fe-fb0d-432c-be7f-b108a0c2d14d",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "L5SfVkVJ5LKVEZu6n9IP"
    },
    {
        "timestamp": "2025-08-23 20:25:07.000",
        "source": "frontend",
        "data": {
            "mapping_index": 7,
            "section_id": "815bf4fe-fb0d-432c-be7f-b108a0c2d14d",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "NBvhkWVHjN1sJF8C2j4R"
    },
    {
        "timestamp": "2025-08-23 20:25:07.000",
        "source": "frontend",
        "data": {
            "section_id": "815bf4fe-fb0d-432c-be7f-b108a0c2d14d",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "TaG3IiTQmbtJtrOZFx27"
    },
    {
        "timestamp": "2025-08-23 20:25:07.000",
        "source": "frontend",
        "data": {
            "mapping_index": 4,
            "section_id": "815bf4fe-fb0d-432c-be7f-b108a0c2d14d",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "kSgH16TqKGN8JGJuafc3"
    },
    {
        "timestamp": "2025-08-23 20:25:07.000",
        "source": "frontend",
        "data": {
            "section_id": "815bf4fe-fb0d-432c-be7f-b108a0c2d14d",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "oJ94h2hWesDTDSXERc9g"
    },
    {
        "timestamp": "2025-08-23 20:25:07.000",
        "source": "frontend",
        "data": {
            "section_id": "815bf4fe-fb0d-432c-be7f-b108a0c2d14d",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "u8L9z6EmzpFVkoJ1eqVg"
    },
    {
        "timestamp": "2025-08-23 20:25:07.000",
        "source": "frontend",
        "data": {
            "mapping_index": 6,
            "section_id": "815bf4fe-fb0d-432c-be7f-b108a0c2d14d",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "vtQZE5e9M4Ag4F58roX6"
    },
    {
        "timestamp": "2025-08-23 20:25:08.000",
        "source": "frontend",
        "data": {
            "section_id": "815bf4fe-fb0d-432c-be7f-b108a0c2d14d",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "S4PLsTahZpLtWIlSCvBp"
    },
    {
        "timestamp": "2025-08-23 20:25:08.000",
        "source": "frontend",
        "data": {
            "section_id": "815bf4fe-fb0d-432c-be7f-b108a0c2d14d",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "cqT4QoWlgXpQTPVR00Vl"
    },
    {
        "timestamp": "2025-08-23 20:25:08.000",
        "source": "frontend",
        "data": {
            "mapping_index": 7,
            "section_id": "815bf4fe-fb0d-432c-be7f-b108a0c2d14d",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "lVjvuOMKML5aMqvQcTsG"
    },
    {
        "timestamp": "2025-08-23 20:25:08.000",
        "source": "frontend",
        "data": {
            "mapping_index": 6,
            "section_id": "815bf4fe-fb0d-432c-be7f-b108a0c2d14d",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "xv7ufLmUJ3TTbgPQIVSE"
    },
    {
        "timestamp": "2025-08-23 20:25:13.000",
        "source": "frontend",
        "data": {
            "section_id": "03097dbd-3ace-49c6-844a-17430b34f42b",
            "section_data": {
                "summaryData": {
                    "low_unstructured": "This code defines a React component that displays a stock price line chart using the Recharts library.",
                    "low_structured": "• React component for stock price chart\n• Uses Recharts for visualization\n• Displays company name and ticker",
                    "medium_unstructured": "The code implements a StockChart React component that visualizes stock price data as a line chart using the Recharts library. It formats the input data and displays the company name and ticker above the chart. The chart includes axes, tooltips, and a legend for better readability.",
                    "high_structured": "• Implements a StockChart React component to display stock price trends\n• Validates input data and extracts company name and ticker\n• Processes raw stock data:\n  ◦ Maps each data point to an object with date and closing price\n  ◦ Formats date strings for display, including month abbreviation for X-axis\n• Utilizes Recharts components:\n  ◦ ResponsiveContainer for adaptive sizing\n  ◦ LineChart with custom margins\n  ◦ XAxis and YAxis, with X-axis using formatted month labels\n  ◦ Tooltip and Legend for interactivity and clarity\n  ◦ Line component to plot closing prices as a smooth curve without dots\n• Renders the chart inside a styled div, displaying the company name and ticker above the chart",
                    "medium_structured": "• Defines a StockChart React component for visualizing stock data\n• Formats and maps incoming data for use with Recharts\n• Renders a responsive line chart with axes, tooltip, and legend\n• Displays the company name and ticker above the chart",
                    "title": "StockChart React Component for Rendering Stock Price Line Charts",
                    "high_unstructured": "This code defines a StockChart React component that renders a responsive line chart of stock closing prices using the Recharts library. It first checks for valid data, extracts the company name and ticker, and processes the data into a format suitable for charting. The component formats date labels to show months, and displays the chart with axes, tooltips, a legend, and a monotone line representing price. The chart is wrapped in a styled container and includes a heading with the company name and ticker symbol."
                },
                "metadata": {
                    "offset": 0,
                    "fullPath": "/project/workspace/frontend/src/StockChart.jsx",
                    "id": "03097dbd-3ace-49c6-844a-17430b34f42b",
                    "filename": "StockChart.jsx",
                    "originalCode": "import React from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  ReferenceLine,\n} from \"recharts\";\n\nconst StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  // Function to format date as month (e.g., \"Jan\", \"Feb\")\n  const formatMonth = (dateString) => {\n    const date = new Date(dateString);\n    return date.toLocaleString(\"default\", { month: \"short\" });\n  };\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatMonth} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;"
                },
                "editPromptValue": "",
                "selectedStructured": "unstructured",
                "editPromptDetailLevel": null,
                "editPromptStructured": null,
                "lines": [
                    1,
                    56
                ],
                "summaryMappings": {
                    "low_unstructured": [
                        {
                            "summaryComponent": "This code defines a React component",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "that displays a stock price line chart",
                            "codeSegments": [
                                {
                                    "line": 41,
                                    "code": "<LineChart"
                                },
                                {
                                    "line": 49,
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "using the Recharts library",
                            "codeSegments": [
                                {
                                    "line": 2,
                                    "code": "import {"
                                },
                                {
                                    "line": 11,
                                    "code": "} from \"recharts\";"
                                }
                            ]
                        }
                    ],
                    "low_structured": [
                        {
                            "summaryComponent": "React component for stock price chart",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Uses Recharts for visualization",
                            "codeSegments": [
                                {
                                    "line": 2,
                                    "code": "import {"
                                },
                                {
                                    "line": 3,
                                    "code": "LineChart,"
                                },
                                {
                                    "line": 4,
                                    "code": "Line,"
                                },
                                {
                                    "line": 5,
                                    "code": "XAxis,"
                                },
                                {
                                    "line": 6,
                                    "code": "YAxis,"
                                },
                                {
                                    "line": 7,
                                    "code": "Tooltip,"
                                },
                                {
                                    "line": 8,
                                    "code": "Legend,"
                                },
                                {
                                    "line": 9,
                                    "code": "ResponsiveContainer,"
                                },
                                {
                                    "line": 10,
                                    "code": "ReferenceLine,"
                                },
                                {
                                    "line": 11,
                                    "code": "} from \"recharts\";"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Displays company name and ticker",
                            "codeSegments": [
                                {
                                    "line": 16,
                                    "code": "const company = data.name;"
                                },
                                {
                                    "line": 17,
                                    "code": "const ticker = data.ticker;"
                                },
                                {
                                    "line": 37,
                                    "code": "<h3>"
                                },
                                {
                                    "line": 38,
                                    "code": "{company} ({ticker})"
                                }
                            ]
                        }
                    ],
                    "medium_unstructured": [
                        {
                            "summaryComponent": "StockChart React component",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "visualizes stock price data as a line chart",
                            "codeSegments": [
                                {
                                    "line": 41,
                                    "code": "<LineChart"
                                },
                                {
                                    "line": 49,
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "using the Recharts library",
                            "codeSegments": [
                                {
                                    "line": 2,
                                    "code": "import {"
                                },
                                {
                                    "line": 11,
                                    "code": "} from \"recharts\";"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "formats the input data",
                            "codeSegments": [
                                {
                                    "line": 24,
                                    "code": "const chartData = data.data.map((item) => ({"
                                },
                                {
                                    "line": 25,
                                    "code": "date: item.date,"
                                },
                                {
                                    "line": 26,
                                    "code": "price: item.close,"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "displays the company name and ticker above the chart",
                            "codeSegments": [
                                {
                                    "line": 16,
                                    "code": "const company = data.name;"
                                },
                                {
                                    "line": 17,
                                    "code": "const ticker = data.ticker;"
                                },
                                {
                                    "line": 37,
                                    "code": "<h3>"
                                },
                                {
                                    "line": 38,
                                    "code": "{company} ({ticker})"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "The chart includes axes",
                            "codeSegments": [
                                {
                                    "line": 45,
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatMonth} />"
                                },
                                {
                                    "line": 46,
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "tooltips",
                            "codeSegments": [
                                {
                                    "line": 47,
                                    "code": "<Tooltip />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "and a legend",
                            "codeSegments": [
                                {
                                    "line": 48,
                                    "code": "<Legend />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "for better readability",
                            "codeSegments": [
                                {
                                    "line": 47,
                                    "code": "<Tooltip />"
                                },
                                {
                                    "line": 48,
                                    "code": "<Legend />"
                                }
                            ]
                        }
                    ],
                    "high_structured": [
                        {
                            "summaryComponent": "Implements a StockChart React component to display stock price trends",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Validates input data and extracts company name and ticker",
                            "codeSegments": [
                                {
                                    "line": 14,
                                    "code": "if (!data || !data.data || !data.data.length) return null;"
                                },
                                {
                                    "line": 16,
                                    "code": "const company = data.name;"
                                },
                                {
                                    "line": 17,
                                    "code": "const ticker = data.ticker;"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Processes raw stock data:",
                            "codeSegments": [
                                {
                                    "line": 23,
                                    "code": "// Combine labels and values into an array of objects for Recharts"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Maps each data point to an object with date and closing price",
                            "codeSegments": [
                                {
                                    "line": 24,
                                    "code": "const chartData = data.data.map((item) => ({"
                                },
                                {
                                    "line": 25,
                                    "code": "date: item.date,"
                                },
                                {
                                    "line": 26,
                                    "code": "price: item.close,"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Formats date strings for display, including month abbreviation for X-axis",
                            "codeSegments": [
                                {
                                    "line": 19,
                                    "code": "const formatDateString = (date) => {"
                                },
                                {
                                    "line": 20,
                                    "code": "return date.split(\"T\")[0];"
                                },
                                {
                                    "line": 30,
                                    "code": "const formatMonth = (dateString) => {"
                                },
                                {
                                    "line": 32,
                                    "code": "return date.toLocaleString(\"default\", { month: \"short\" });"
                                },
                                {
                                    "line": 45,
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatMonth} />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Utilizes Recharts components:",
                            "codeSegments": [
                                {
                                    "line": 2,
                                    "code": "import {"
                                },
                                {
                                    "line": 3,
                                    "code": "LineChart,"
                                },
                                {
                                    "line": 4,
                                    "code": "Line,"
                                },
                                {
                                    "line": 5,
                                    "code": "XAxis,"
                                },
                                {
                                    "line": 6,
                                    "code": "YAxis,"
                                },
                                {
                                    "line": 7,
                                    "code": "Tooltip,"
                                },
                                {
                                    "line": 8,
                                    "code": "Legend,"
                                },
                                {
                                    "line": 9,
                                    "code": "ResponsiveContainer,"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "ResponsiveContainer for adaptive sizing",
                            "codeSegments": [
                                {
                                    "line": 40,
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "LineChart with custom margins",
                            "codeSegments": [
                                {
                                    "line": 41,
                                    "code": "<LineChart"
                                },
                                {
                                    "line": 43,
                                    "code": "margin={{ top: 10, right: 30, left: 0, bottom: 0 }}"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "XAxis and YAxis, with X-axis using formatted month labels",
                            "codeSegments": [
                                {
                                    "line": 45,
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatMonth} />"
                                },
                                {
                                    "line": 46,
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Tooltip and Legend for interactivity and clarity",
                            "codeSegments": [
                                {
                                    "line": 47,
                                    "code": "<Tooltip />"
                                },
                                {
                                    "line": 48,
                                    "code": "<Legend />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Line component to plot closing prices as a smooth curve without dots",
                            "codeSegments": [
                                {
                                    "line": 49,
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Renders the chart inside a styled div, displaying the company name and ticker above the chart",
                            "codeSegments": [
                                {
                                    "line": 36,
                                    "code": "<div style={{ marginTop: \"2rem\" }}>"
                                },
                                {
                                    "line": 37,
                                    "code": "<h3>"
                                },
                                {
                                    "line": 38,
                                    "code": "{company} ({ticker})"
                                }
                            ]
                        }
                    ],
                    "medium_structured": [
                        {
                            "summaryComponent": "Defines a StockChart React component for visualizing stock data",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                },
                                {
                                    "line": 56,
                                    "code": "export default StockChart;"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Formats and maps incoming data for use with Recharts",
                            "codeSegments": [
                                {
                                    "line": 24,
                                    "code": "const chartData = data.data.map((item) => ({"
                                },
                                {
                                    "line": 25,
                                    "code": "date: item.date,"
                                },
                                {
                                    "line": 26,
                                    "code": "price: item.close,"
                                },
                                {
                                    "line": 27,
                                    "code": "}));"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Renders a responsive line chart with axes, tooltip, and legend",
                            "codeSegments": [
                                {
                                    "line": 40,
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                                },
                                {
                                    "line": 41,
                                    "code": "<LineChart"
                                },
                                {
                                    "line": 45,
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatMonth} />"
                                },
                                {
                                    "line": 46,
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                                },
                                {
                                    "line": 47,
                                    "code": "<Tooltip />"
                                },
                                {
                                    "line": 48,
                                    "code": "<Legend />"
                                },
                                {
                                    "line": 49,
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Displays the company name and ticker above the chart",
                            "codeSegments": [
                                {
                                    "line": 37,
                                    "code": "<h3>"
                                },
                                {
                                    "line": 38,
                                    "code": "{company} ({ticker})"
                                }
                            ]
                        }
                    ],
                    "high_unstructured": [
                        {
                            "summaryComponent": "defines a StockChart React component",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "renders a responsive line chart of stock closing prices",
                            "codeSegments": [
                                {
                                    "line": 40,
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                                },
                                {
                                    "line": 41,
                                    "code": "<LineChart"
                                },
                                {
                                    "line": 49,
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "using the Recharts library",
                            "codeSegments": [
                                {
                                    "line": 2,
                                    "code": "import {"
                                },
                                {
                                    "line": 11,
                                    "code": "} from \"recharts\";"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "checks for valid data",
                            "codeSegments": [
                                {
                                    "line": 14,
                                    "code": "if (!data || !data.data || !data.data.length) return null;"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "extracts the company name and ticker",
                            "codeSegments": [
                                {
                                    "line": 16,
                                    "code": "const company = data.name;"
                                },
                                {
                                    "line": 17,
                                    "code": "const ticker = data.ticker;"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "processes the data into a format suitable for charting",
                            "codeSegments": [
                                {
                                    "line": 24,
                                    "code": "const chartData = data.data.map((item) => ({"
                                },
                                {
                                    "line": 25,
                                    "code": "date: item.date,"
                                },
                                {
                                    "line": 26,
                                    "code": "price: item.close,"
                                },
                                {
                                    "line": 27,
                                    "code": "}));"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "formats date labels to show months",
                            "codeSegments": [
                                {
                                    "line": 30,
                                    "code": "const formatMonth = (dateString) => {"
                                },
                                {
                                    "line": 32,
                                    "code": "return date.toLocaleString(\"default\", { month: \"short\" });"
                                },
                                {
                                    "line": 45,
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatMonth} />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "displays the chart with axes, tooltips, a legend, and a monotone line representing price",
                            "codeSegments": [
                                {
                                    "line": 45,
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatMonth} />"
                                },
                                {
                                    "line": 46,
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                                },
                                {
                                    "line": 47,
                                    "code": "<Tooltip />"
                                },
                                {
                                    "line": 48,
                                    "code": "<Legend />"
                                },
                                {
                                    "line": 49,
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "wrapped in a styled container",
                            "codeSegments": [
                                {
                                    "line": 36,
                                    "code": "<div style={{ marginTop: \"2rem\" }}>"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "includes a heading with the company name and ticker symbol",
                            "codeSegments": [
                                {
                                    "line": 37,
                                    "code": "<h3>"
                                },
                                {
                                    "line": 38,
                                    "code": "{company} ({ticker})"
                                }
                            ]
                        }
                    ]
                },
                "selectedDetailLevel": "medium",
                "title": "StockChart React Component for Rendering Stock Price Line Charts",
                "createdAt": 1755966305000
            }
        },
        "event": "create_new_section",
        "id": "ucTqq7oWN69sijOGcQ60"
    },
    {
        "timestamp": "2025-08-23 20:25:13.000",
        "source": "frontend",
        "data": {
            "before_section_id": "815bf4fe-fb0d-432c-be7f-b108a0c2d14d",
            "after_section_id": "03097dbd-3ace-49c6-844a-17430b34f42b"
        },
        "event": "autotransit_section",
        "id": "ujsPjcGDi37TZ6ILvEKq"
    },
    {
        "timestamp": "2025-08-23 20:25:16.000",
        "source": "frontend",
        "data": {
            "mapping_index": 5,
            "section_id": "03097dbd-3ace-49c6-844a-17430b34f42b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "ekgHL2MgdaZMSxZkpZ1q"
    },
    {
        "timestamp": "2025-08-23 20:25:16.000",
        "source": "frontend",
        "data": {
            "section_id": "03097dbd-3ace-49c6-844a-17430b34f42b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "hdjEWVfKXbRt6a0VPX4U"
    },
    {
        "timestamp": "2025-08-23 20:25:16.000",
        "source": "frontend",
        "data": {
            "mapping_index": 4,
            "section_id": "03097dbd-3ace-49c6-844a-17430b34f42b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "jpWzZQP1PRHiGEPVGdgf"
    },
    {
        "timestamp": "2025-08-23 20:25:16.000",
        "source": "frontend",
        "data": {
            "section_id": "03097dbd-3ace-49c6-844a-17430b34f42b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "m9bCreEbyvE8LDk3yWUu"
    },
    {
        "timestamp": "2025-08-23 20:25:17.000",
        "source": "frontend",
        "data": {
            "mapping_index": 5,
            "section_id": "03097dbd-3ace-49c6-844a-17430b34f42b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "3PThjEbA43b3KrvJ4iaE"
    },
    {
        "timestamp": "2025-08-23 20:25:17.000",
        "source": "frontend",
        "data": {
            "mapping_index": 1,
            "section_id": "03097dbd-3ace-49c6-844a-17430b34f42b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "5RzuQVniHT3eJosOyduq"
    },
    {
        "timestamp": "2025-08-23 20:25:17.000",
        "source": "frontend",
        "data": {
            "section_id": "03097dbd-3ace-49c6-844a-17430b34f42b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "66ehBCt2obAoWFgrWGDz"
    },
    {
        "timestamp": "2025-08-23 20:25:18.000",
        "source": "frontend",
        "data": {
            "mapping_index": 8,
            "section_id": "03097dbd-3ace-49c6-844a-17430b34f42b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "F9PnxWTfTlvKx3RmzqRt"
    },
    {
        "timestamp": "2025-08-23 20:25:18.000",
        "source": "frontend",
        "data": {
            "mapping_index": 8,
            "section_id": "03097dbd-3ace-49c6-844a-17430b34f42b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "IBQ7tkSe8xyG6fY5ycYC"
    },
    {
        "timestamp": "2025-08-23 20:25:18.000",
        "source": "frontend",
        "data": {
            "mapping_index": 1,
            "section_id": "03097dbd-3ace-49c6-844a-17430b34f42b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "ID4BLeJd9Tsz95plTMlT"
    },
    {
        "timestamp": "2025-08-23 20:25:18.000",
        "source": "frontend",
        "data": {
            "section_id": "03097dbd-3ace-49c6-844a-17430b34f42b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "PN7MoB9PWACATXW5WBfA"
    },
    {
        "timestamp": "2025-08-23 20:25:18.000",
        "source": "frontend",
        "data": {
            "section_id": "03097dbd-3ace-49c6-844a-17430b34f42b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "d5yPtE9jhcOqrwQDuWQs"
    },
    {
        "timestamp": "2025-08-23 20:25:18.000",
        "source": "frontend",
        "data": {
            "section_id": "03097dbd-3ace-49c6-844a-17430b34f42b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "dng0H2EGOLcHBLRZoaQn"
    },
    {
        "timestamp": "2025-08-23 20:25:18.000",
        "source": "frontend",
        "data": {
            "mapping_index": 4,
            "section_id": "03097dbd-3ace-49c6-844a-17430b34f42b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "g8GzEvYwG0ZYZ47z9KEb"
    },
    {
        "timestamp": "2025-08-23 20:25:18.000",
        "source": "frontend",
        "data": {
            "section_id": "03097dbd-3ace-49c6-844a-17430b34f42b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "qmYHUbNWIVHZM41HIMnF"
    },
    {
        "timestamp": "2025-08-23 20:25:18.000",
        "source": "frontend",
        "data": {
            "section_id": "03097dbd-3ace-49c6-844a-17430b34f42b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "tKUIqCkT8auywTHcpcde"
    },
    {
        "timestamp": "2025-08-23 20:25:18.000",
        "source": "frontend",
        "data": {
            "mapping_index": 4,
            "section_id": "03097dbd-3ace-49c6-844a-17430b34f42b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "uxF1OED4pLcl2PGRKY6U"
    },
    {
        "timestamp": "2025-08-23 20:25:18.000",
        "source": "frontend",
        "data": {
            "section_id": "03097dbd-3ace-49c6-844a-17430b34f42b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "yoS7bEg1ZqugYXLmniTI"
    },
    {
        "timestamp": "2025-08-23 20:25:18.000",
        "source": "frontend",
        "data": {
            "section_id": "03097dbd-3ace-49c6-844a-17430b34f42b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "zBwTkpk4e78zrCT9LkJj"
    },
    {
        "timestamp": "2025-08-23 20:25:18.000",
        "source": "frontend",
        "data": {
            "mapping_index": 3,
            "section_id": "03097dbd-3ace-49c6-844a-17430b34f42b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "zzSMqT2DqmeSPELJKGNo"
    },
    {
        "timestamp": "2025-08-23 20:25:19.000",
        "source": "frontend",
        "data": {
            "structured": "unstructured",
            "summary": "The code implements a StockChart React component that visualizes stock price data as a line chart using the Recharts library. It formats the input data and displays the company name and ticker above the chart. The chart includes axes, tooltips, and a legend for better readability.",
            "section_id": "03097dbd-3ace-49c6-844a-17430b34f42b",
            "detail_level": "medium"
        },
        "event": "click_edit_in_prompt",
        "id": "3bpQKiY2h4G0F7qJlq8u"
    },
    {
        "timestamp": "2025-08-23 20:25:19.000",
        "source": "frontend",
        "data": {
            "mapping_index": 1,
            "section_id": "03097dbd-3ace-49c6-844a-17430b34f42b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "57NVVFQRWSaixK2U4sIS"
    },
    {
        "timestamp": "2025-08-23 20:25:19.000",
        "source": "frontend",
        "data": {
            "section_id": "03097dbd-3ace-49c6-844a-17430b34f42b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "NRslo76kefg6sZH6XxVG"
    },
    {
        "timestamp": "2025-08-23 20:25:19.000",
        "source": "frontend",
        "data": {
            "mapping_index": 3,
            "section_id": "03097dbd-3ace-49c6-844a-17430b34f42b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "bv1NgYr8GdQAUGWy227v"
    },
    {
        "timestamp": "2025-08-23 20:25:20.000",
        "source": "frontend",
        "data": {
            "mapping_index": 8,
            "section_id": "03097dbd-3ace-49c6-844a-17430b34f42b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "0uxjltb4K1KE5zqER8vx"
    },
    {
        "timestamp": "2025-08-23 20:25:20.000",
        "source": "frontend",
        "data": {
            "section_id": "03097dbd-3ace-49c6-844a-17430b34f42b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "6RtslNYHmApgIzpXF9tc"
    },
    {
        "timestamp": "2025-08-23 20:25:20.000",
        "source": "frontend",
        "data": {
            "section_id": "03097dbd-3ace-49c6-844a-17430b34f42b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "Dqtr74ZSevWT5LQPsMMd"
    },
    {
        "timestamp": "2025-08-23 20:25:20.000",
        "source": "frontend",
        "data": {
            "mapping_index": 4,
            "section_id": "03097dbd-3ace-49c6-844a-17430b34f42b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "Emam4s6JpgxbBtqR2183"
    },
    {
        "timestamp": "2025-08-23 20:25:20.000",
        "source": "frontend",
        "data": {
            "section_id": "03097dbd-3ace-49c6-844a-17430b34f42b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "fpDOnXumKRTBsoam1Ynv"
    },
    {
        "timestamp": "2025-08-23 20:25:22.000",
        "source": "frontend",
        "data": {
            "mapping_index": 1,
            "section_id": "03097dbd-3ace-49c6-844a-17430b34f42b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "0MU0naimvZfSUMgESZTZ"
    },
    {
        "timestamp": "2025-08-23 20:25:22.000",
        "source": "frontend",
        "data": {
            "section_id": "03097dbd-3ace-49c6-844a-17430b34f42b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "5ioLclMg4OKpIOIHc3UH"
    },
    {
        "timestamp": "2025-08-23 20:25:22.000",
        "source": "frontend",
        "data": {
            "mapping_index": 8,
            "section_id": "03097dbd-3ace-49c6-844a-17430b34f42b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "9tfQCCbTSJAC0uXfW7kY"
    },
    {
        "timestamp": "2025-08-23 20:25:22.000",
        "source": "frontend",
        "data": {
            "section_id": "03097dbd-3ace-49c6-844a-17430b34f42b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "EIqVEI1YBxYUkkaaBlKW"
    },
    {
        "timestamp": "2025-08-23 20:25:22.000",
        "source": "frontend",
        "data": {
            "mapping_index": 0,
            "section_id": "03097dbd-3ace-49c6-844a-17430b34f42b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "L3wnDURWnHnSa44yePEl"
    },
    {
        "timestamp": "2025-08-23 20:25:22.000",
        "source": "frontend",
        "data": {
            "section_id": "03097dbd-3ace-49c6-844a-17430b34f42b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "M7S1QEBHh7ib94CNWYo0"
    },
    {
        "timestamp": "2025-08-23 20:25:22.000",
        "source": "frontend",
        "data": {
            "mapping_index": 4,
            "section_id": "03097dbd-3ace-49c6-844a-17430b34f42b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "NiA01LXRc68xSRdTjQLF"
    },
    {
        "timestamp": "2025-08-23 20:25:22.000",
        "source": "frontend",
        "data": {
            "mapping_index": 7,
            "section_id": "03097dbd-3ace-49c6-844a-17430b34f42b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "RBIEkP256uzICogcJkiy"
    },
    {
        "timestamp": "2025-08-23 20:25:22.000",
        "source": "frontend",
        "data": {
            "section_id": "03097dbd-3ace-49c6-844a-17430b34f42b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "ZQ8WGCwfViqYKM1CTTAa"
    },
    {
        "timestamp": "2025-08-23 20:25:22.000",
        "source": "frontend",
        "data": {
            "mapping_index": 8,
            "section_id": "03097dbd-3ace-49c6-844a-17430b34f42b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "fUYpEUY1uGHjnn9cpBra"
    },
    {
        "timestamp": "2025-08-23 20:25:22.000",
        "source": "frontend",
        "data": {
            "mapping_index": 2,
            "section_id": "03097dbd-3ace-49c6-844a-17430b34f42b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "jY930vksyjyTwLB1FEXV"
    },
    {
        "timestamp": "2025-08-23 20:25:22.000",
        "source": "frontend",
        "data": {
            "mapping_index": 4,
            "section_id": "03097dbd-3ace-49c6-844a-17430b34f42b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "nBs6fiSNhX3jhgdKzlK9"
    },
    {
        "timestamp": "2025-08-23 20:25:22.000",
        "source": "frontend",
        "data": {
            "section_id": "03097dbd-3ace-49c6-844a-17430b34f42b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "rui8puzawsoeYG8cXjOq"
    },
    {
        "timestamp": "2025-08-23 20:25:22.000",
        "source": "frontend",
        "data": {
            "section_id": "03097dbd-3ace-49c6-844a-17430b34f42b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "ruj2Vu6OpTBT2ZCI1sIG"
    },
    {
        "timestamp": "2025-08-23 20:25:22.000",
        "source": "frontend",
        "data": {
            "section_id": "03097dbd-3ace-49c6-844a-17430b34f42b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "yktF3RwRR7fRAOutQsPJ"
    },
    {
        "timestamp": "2025-08-23 20:25:23.000",
        "source": "frontend",
        "data": {
            "section_id": "03097dbd-3ace-49c6-844a-17430b34f42b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "0DTl150LivMcwmSIEHN1"
    },
    {
        "timestamp": "2025-08-23 20:25:23.000",
        "source": "frontend",
        "data": {
            "section_id": "03097dbd-3ace-49c6-844a-17430b34f42b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "G4W3lvF3AZcMzZR7JMdO"
    },
    {
        "timestamp": "2025-08-23 20:25:23.000",
        "source": "frontend",
        "data": {
            "mapping_index": 7,
            "section_id": "03097dbd-3ace-49c6-844a-17430b34f42b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "T8teGDUD8AV2Cwc4P50B"
    },
    {
        "timestamp": "2025-08-23 20:25:23.000",
        "source": "frontend",
        "data": {
            "mapping_index": 8,
            "section_id": "03097dbd-3ace-49c6-844a-17430b34f42b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "Tuo6EuWdTE3Z6g6hGIBi"
    },
    {
        "timestamp": "2025-08-23 20:25:23.000",
        "source": "frontend",
        "data": {
            "mapping_index": 4,
            "section_id": "03097dbd-3ace-49c6-844a-17430b34f42b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "dBdikZKvt7fsWdJZ273g"
    },
    {
        "timestamp": "2025-08-23 20:25:23.000",
        "source": "frontend",
        "data": {
            "section_id": "03097dbd-3ace-49c6-844a-17430b34f42b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "dNIyX5ucildbF29r9qEF"
    },
    {
        "timestamp": "2025-08-23 20:25:23.000",
        "source": "frontend",
        "data": {
            "mapping_index": 2,
            "section_id": "03097dbd-3ace-49c6-844a-17430b34f42b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "fEPExSyFXpft9UlyF0DM"
    },
    {
        "timestamp": "2025-08-23 20:25:23.000",
        "source": "frontend",
        "data": {
            "section_id": "03097dbd-3ace-49c6-844a-17430b34f42b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "tsbzkjfKsw14XxY9LqhR"
    },
    {
        "timestamp": "2025-08-23 20:25:23.000",
        "source": "frontend",
        "data": {
            "section_id": "03097dbd-3ace-49c6-844a-17430b34f42b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "yXOodSeIiU9W61MzN9c2"
    },
    {
        "timestamp": "2025-08-23 20:25:42.000",
        "source": "backend",
        "data": {
            "updated_summary": "The code implements a StockChart React component that visualizes stock price data as a line chart using the Recharts library. It formats the input data and displays the company name and ticker above the chart. The chart includes axes, tooltips, and a legend for better readability. All Chinese characters in the component are changed to English characters.",
            "instruction": "change Chinese characters to English characters",
            "original_code": "import React from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  ReferenceLine,\n} from \"recharts\";\n\nconst StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  // Function to format date as month (e.g., \"Jan\", \"Feb\")\n  const formatMonth = (dateString) => {\n    const date = new Date(dateString);\n    return date.toLocaleString(\"default\", { month: \"short\" });\n  };\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatMonth} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;",
            "original_summary": "The code implements a StockChart React component that visualizes stock price data as a line chart using the Recharts library. It formats the input data and displays the company name and ticker above the chart. The chart includes axes, tooltips, and a legend for better readability."
        },
        "event": "apply_instruction_summary",
        "id": "zPOGjSB6IK5wZ9qfzCYt"
    },
    {
        "timestamp": "2025-08-23 20:25:46.000",
        "source": "backend",
        "data": {
            "updated_code": "import React from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  ReferenceLine,\n} from \"recharts\";\n\nconst StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  // Function to format date as month (e.g., \"Jan\", \"Feb\")\n  const formatMonth = (dateString) => {\n    const date = new Date(dateString);\n    return date.toLocaleString(\"default\", { month: \"short\" });\n  };\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatMonth} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;",
            "edited_summary": "The code implements a StockChart React component that visualizes stock price data as a line chart using the Recharts library. It formats the input data and displays the company name and ticker above the chart. The chart includes axes, tooltips, and a legend for better readability. All Chinese characters in the component are changed to English characters.",
            "structured_type": "unstructured",
            "original_code": "import React from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  ReferenceLine,\n} from \"recharts\";\n\nconst StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  // Function to format date as month (e.g., \"Jan\", \"Feb\")\n  const formatMonth = (dateString) => {\n    const date = new Date(dateString);\n    return date.toLocaleString(\"default\", { month: \"short\" });\n  };\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatMonth} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;",
            "original_summary": "The code implements a StockChart React component that visualizes stock price data as a line chart using the Recharts library. It formats the input data and displays the company name and ticker above the chart. The chart includes axes, tooltips, and a legend for better readability.",
            "detail_level": "medium"
        },
        "event": "modify_summary_mediation",
        "id": "5dUpeC3uxlQeeO44SO60"
    },
    {
        "timestamp": "2025-08-23 20:25:48.000",
        "source": "frontend",
        "data": {
            "structured": "unstructured",
            "section_id": "03097dbd-3ace-49c6-844a-17430b34f42b",
            "instruction": "change Chinese characters to English characters",
            "original_summary": "The code implements a StockChart React component that visualizes stock price data as a line chart using the Recharts library. It formats the input data and displays the company name and ticker above the chart. The chart includes axes, tooltips, and a legend for better readability.",
            "detail_level": "medium"
        },
        "event": "apply_instruction_summary",
        "id": "2TvK8BWVwkROR1uG2CZ3"
    },
    {
        "timestamp": "2025-08-23 20:25:51.000",
        "source": "frontend",
        "data": {
            "structured": "unstructured",
            "section_id": "03097dbd-3ace-49c6-844a-17430b34f42b",
            "edited_summary": "The code implements a StockChart React component that visualizes stock price data as a line chart using the Recharts library. It formats the input data and displays the company name and ticker above the chart. The chart includes axes, tooltips, and a legend for better readability. All Chinese characters in the component are changed to English characters.",
            "original_summary": "The code implements a StockChart React component that visualizes stock price data as a line chart using the Recharts library. It formats the input data and displays the company name and ticker above the chart. The chart includes axes, tooltips, and a legend for better readability.",
            "detail_level": "medium"
        },
        "event": "commit_modified_summary",
        "id": "eesTsFdPr2wHcXaDZYAf"
    },
    {
        "timestamp": "2025-08-23 20:25:51.000",
        "source": "backend",
        "data": {
            "new_summary": {
                "low_unstructured": "This code defines a React component that displays a stock price line chart using the Recharts library. There are no changes between the original and modified code.",
                "low_structured": "• React component for stock price chart\n• Uses Recharts for visualization\n• Displays company name and ticker\n• No changes from the original code",
                "medium_unstructured": "The code implements a StockChart React component that visualizes stock price data as a line chart using the Recharts library. It formats the input data and displays the company name and ticker above the chart. The chart includes axes, tooltips, and a legend for better readability. There are no modifications from the original version.",
                "high_structured": "• Implements a StockChart React component to display stock price trends\n• Validates input data and extracts company name and ticker\n• Processes raw stock data:\n  ◦ Maps each data point to an object with date and closing price\n  ◦ Formats date strings for display, including month abbreviation for X-axis\n• Utilizes Recharts components:\n  ◦ ResponsiveContainer for adaptive sizing\n  ◦ LineChart with custom margins\n  ◦ XAxis and YAxis, with X-axis using formatted month labels\n  ◦ Tooltip and Legend for interactivity and clarity\n  ◦ Line component to plot closing prices as a smooth curve without dots\n• Renders the chart inside a styled div, displaying the company name and ticker above the chart\n• No changes from the original code",
                "medium_structured": "• Defines a StockChart React component for visualizing stock data\n• Formats and maps incoming data for use with Recharts\n• Renders a responsive line chart with axes, tooltip, and legend\n• Displays the company name and ticker above the chart\n• No changes compared to the original code",
                "title": "StockChart React Component for Rendering Stock Price Line Charts (No Code Changes)",
                "high_unstructured": "This code defines a StockChart React component that renders a responsive line chart of stock closing prices using the Recharts library. It first checks for valid data, extracts the company name and ticker, and processes the data into a format suitable for charting. The component formats date labels to show months, and displays the chart with axes, tooltips, a legend, and a monotone line representing price. The chart is wrapped in a styled container and includes a heading with the company name and ticker symbol. There are no differences between the original and modified code."
            },
            "original_code": "import React from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  ReferenceLine,\n} from \"recharts\";\n\nconst StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  // Function to format date as month (e.g., \"Jan\", \"Feb\")\n  const formatMonth = (dateString) => {\n    const date = new Date(dateString);\n    return date.toLocaleString(\"default\", { month: \"short\" });\n  };\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatMonth} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;",
            "new_code": "import React from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  ReferenceLine,\n} from \"recharts\";\n\nconst StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  // Function to format date as month (e.g., \"Jan\", \"Feb\")\n  const formatMonth = (dateString) => {\n    const date = new Date(dateString);\n    return date.toLocaleString(\"default\", { month: \"short\" });\n  };\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatMonth} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;",
            "old_summary": {
                "low_unstructured": "This code defines a React component that displays a stock price line chart using the Recharts library.",
                "low_structured": "• React component for stock price chart\n• Uses Recharts for visualization\n• Displays company name and ticker",
                "medium_unstructured": "The code implements a StockChart React component that visualizes stock price data as a line chart using the Recharts library. It formats the input data and displays the company name and ticker above the chart. The chart includes axes, tooltips, and a legend for better readability.",
                "high_structured": "• Implements a StockChart React component to display stock price trends\n• Validates input data and extracts company name and ticker\n• Processes raw stock data:\n  ◦ Maps each data point to an object with date and closing price\n  ◦ Formats date strings for display, including month abbreviation for X-axis\n• Utilizes Recharts components:\n  ◦ ResponsiveContainer for adaptive sizing\n  ◦ LineChart with custom margins\n  ◦ XAxis and YAxis, with X-axis using formatted month labels\n  ◦ Tooltip and Legend for interactivity and clarity\n  ◦ Line component to plot closing prices as a smooth curve without dots\n• Renders the chart inside a styled div, displaying the company name and ticker above the chart",
                "medium_structured": "• Defines a StockChart React component for visualizing stock data\n• Formats and maps incoming data for use with Recharts\n• Renders a responsive line chart with axes, tooltip, and legend\n• Displays the company name and ticker above the chart",
                "title": "StockChart React Component for Rendering Stock Price Line Charts",
                "high_unstructured": "This code defines a StockChart React component that renders a responsive line chart of stock closing prices using the Recharts library. It first checks for valid data, extracts the company name and ticker, and processes the data into a format suitable for charting. The component formats date labels to show months, and displays the chart with axes, tooltips, a legend, and a monotone line representing price. The chart is wrapped in a styled container and includes a heading with the company name and ticker symbol."
            }
        },
        "event": "summarize_modified_code",
        "id": "eismjMJ8n4faos05UpNw"
    },
    {
        "timestamp": "2025-08-23 20:25:52.000",
        "source": "frontend",
        "data": {
            "mapping_index": 8,
            "section_id": "03097dbd-3ace-49c6-844a-17430b34f42b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "8EIpbMLm4TF7WzjtgN0v"
    },
    {
        "timestamp": "2025-08-23 20:25:52.000",
        "source": "frontend",
        "data": {
            "section_id": "03097dbd-3ace-49c6-844a-17430b34f42b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "EVQLyCinFVDCxZ0PPusx"
    },
    {
        "timestamp": "2025-08-23 20:25:52.000",
        "source": "frontend",
        "data": {
            "mapping_index": 8,
            "section_id": "03097dbd-3ace-49c6-844a-17430b34f42b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "LbsQysZvfTULgPp5jlw4"
    },
    {
        "timestamp": "2025-08-23 20:25:52.000",
        "source": "frontend",
        "data": {
            "section_id": "03097dbd-3ace-49c6-844a-17430b34f42b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "S0AostCR4Epw41M7qqzl"
    },
    {
        "timestamp": "2025-08-23 20:25:52.000",
        "source": "backend",
        "data": {
            "summary": "This code defines a React component that displays a stock price line chart using the Recharts library. There are no changes between the original and modified code.",
            "mapping": [
                {
                    "summaryComponent": "This code defines a React component",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "that displays a stock price line chart",
                    "codeSegments": [
                        {
                            "line": 41,
                            "code": "<LineChart"
                        },
                        {
                            "line": 49,
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                        }
                    ]
                },
                {
                    "summaryComponent": "using the Recharts library",
                    "codeSegments": [
                        {
                            "line": 2,
                            "code": "import {"
                        },
                        {
                            "line": 11,
                            "code": "} from \"recharts\";"
                        }
                    ]
                },
                {
                    "summaryComponent": "There are no changes between the original and modified code.",
                    "codeSegments": []
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));\n28: \n29:   // Function to format date as month (e.g., \"Jan\", \"Feb\")\n30:   const formatMonth = (dateString) => {\n31:     const date = new Date(dateString);\n32:     return date.toLocaleString(\"default\", { month: \"short\" });\n33:   };\n34: \n35:   return (\n36:     <div style={{ marginTop: \"2rem\" }}>\n37:       <h3>\n38:         {company} ({ticker})\n39:       </h3>\n40:       <ResponsiveContainer width=\"100%\" height={300}>\n41:         <LineChart\n42:           data={chartData}\n43:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n44:         >\n45:           <XAxis dataKey=\"date\" tickFormatter={formatMonth} />\n46:           <YAxis domain={[\"auto\", \"auto\"]} />\n47:           <Tooltip />\n48:           <Legend />\n49:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n50:         </LineChart>\n51:       </ResponsiveContainer>\n52:     </div>\n53:   );\n54: };\n55: \n56: export default StockChart;"
        },
        "event": "map_summary_code",
        "id": "YWoBlyOGkx1XzSWwMQHy"
    },
    {
        "timestamp": "2025-08-23 20:25:52.000",
        "source": "frontend",
        "data": {
            "section_id": "03097dbd-3ace-49c6-844a-17430b34f42b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "fIzh1Tzqn0eLwYKBtxJk"
    },
    {
        "timestamp": "2025-08-23 20:25:52.000",
        "source": "frontend",
        "data": {
            "section_id": "03097dbd-3ace-49c6-844a-17430b34f42b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "fyQktL7VNvR4GOzv2gPP"
    },
    {
        "timestamp": "2025-08-23 20:25:52.000",
        "source": "frontend",
        "data": {
            "mapping_index": 2,
            "section_id": "03097dbd-3ace-49c6-844a-17430b34f42b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "gvyEnrecgBJ6WmH3VQax"
    },
    {
        "timestamp": "2025-08-23 20:25:52.000",
        "source": "frontend",
        "data": {
            "mapping_index": 2,
            "section_id": "03097dbd-3ace-49c6-844a-17430b34f42b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "hZuWDO0C3A3caTZ9Lw84"
    },
    {
        "timestamp": "2025-08-23 20:25:52.000",
        "source": "frontend",
        "data": {
            "mapping_index": 0,
            "section_id": "03097dbd-3ace-49c6-844a-17430b34f42b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "j9GEA4f9jKHaNzL5BOyz"
    },
    {
        "timestamp": "2025-08-23 20:25:52.000",
        "source": "frontend",
        "data": {
            "section_id": "03097dbd-3ace-49c6-844a-17430b34f42b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "pWOvoWiZeQ34BVuAIpe6"
    },
    {
        "timestamp": "2025-08-23 20:25:52.000",
        "source": "frontend",
        "data": {
            "mapping_index": 4,
            "section_id": "03097dbd-3ace-49c6-844a-17430b34f42b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "rwcgee3RaeAHmjPJK24c"
    },
    {
        "timestamp": "2025-08-23 20:25:52.000",
        "source": "frontend",
        "data": {
            "section_id": "03097dbd-3ace-49c6-844a-17430b34f42b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "sqy7xjl47MbRJEViN5XN"
    },
    {
        "timestamp": "2025-08-23 20:25:52.000",
        "source": "frontend",
        "data": {
            "mapping_index": 4,
            "section_id": "03097dbd-3ace-49c6-844a-17430b34f42b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "uFaRiy0nPZL38Q2K0dcD"
    },
    {
        "timestamp": "2025-08-23 20:25:52.000",
        "source": "frontend",
        "data": {
            "section_id": "03097dbd-3ace-49c6-844a-17430b34f42b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "x4oMFJ1QT0tEG3sFNnY9"
    },
    {
        "timestamp": "2025-08-23 20:25:53.000",
        "source": "backend",
        "data": {
            "summary": "• React component for stock price chart\n• Uses Recharts for visualization\n• Displays company name and ticker\n• No changes from the original code",
            "mapping": [
                {
                    "summaryComponent": "React component for stock price chart",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "Uses Recharts for visualization",
                    "codeSegments": [
                        {
                            "line": 2,
                            "code": "import {"
                        },
                        {
                            "line": 3,
                            "code": "LineChart,"
                        },
                        {
                            "line": 4,
                            "code": "Line,"
                        },
                        {
                            "line": 5,
                            "code": "XAxis,"
                        },
                        {
                            "line": 6,
                            "code": "YAxis,"
                        },
                        {
                            "line": 7,
                            "code": "Tooltip,"
                        },
                        {
                            "line": 8,
                            "code": "Legend,"
                        },
                        {
                            "line": 9,
                            "code": "ResponsiveContainer,"
                        },
                        {
                            "line": 10,
                            "code": "ReferenceLine,"
                        },
                        {
                            "line": 11,
                            "code": "} from \"recharts\";"
                        }
                    ]
                },
                {
                    "summaryComponent": "Displays company name and ticker",
                    "codeSegments": [
                        {
                            "line": 16,
                            "code": "const company = data.name;"
                        },
                        {
                            "line": 17,
                            "code": "const ticker = data.ticker;"
                        },
                        {
                            "line": 37,
                            "code": "<h3>"
                        },
                        {
                            "line": 38,
                            "code": "{company} ({ticker})"
                        }
                    ]
                },
                {
                    "summaryComponent": "No changes from the original code",
                    "codeSegments": [
                        {
                            "line": null,
                            "code": "// No changes from the original code"
                        }
                    ]
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));\n28: \n29:   // Function to format date as month (e.g., \"Jan\", \"Feb\")\n30:   const formatMonth = (dateString) => {\n31:     const date = new Date(dateString);\n32:     return date.toLocaleString(\"default\", { month: \"short\" });\n33:   };\n34: \n35:   return (\n36:     <div style={{ marginTop: \"2rem\" }}>\n37:       <h3>\n38:         {company} ({ticker})\n39:       </h3>\n40:       <ResponsiveContainer width=\"100%\" height={300}>\n41:         <LineChart\n42:           data={chartData}\n43:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n44:         >\n45:           <XAxis dataKey=\"date\" tickFormatter={formatMonth} />\n46:           <YAxis domain={[\"auto\", \"auto\"]} />\n47:           <Tooltip />\n48:           <Legend />\n49:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n50:         </LineChart>\n51:       </ResponsiveContainer>\n52:     </div>\n53:   );\n54: };\n55: \n56: export default StockChart;"
        },
        "event": "map_summary_code",
        "id": "HzEuSziLv6r9fLBpGxBp"
    },
    {
        "timestamp": "2025-08-23 20:25:53.000",
        "source": "backend",
        "data": {
            "summary": "• Defines a StockChart React component for visualizing stock data\n• Formats and maps incoming data for use with Recharts\n• Renders a responsive line chart with axes, tooltip, and legend\n• Displays the company name and ticker above the chart\n• No changes compared to the original code",
            "mapping": [
                {
                    "summaryComponent": "Defines a StockChart React component for visualizing stock data",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        },
                        {
                            "line": 56,
                            "code": "export default StockChart;"
                        }
                    ]
                },
                {
                    "summaryComponent": "Formats and maps incoming data for use with Recharts",
                    "codeSegments": [
                        {
                            "line": 24,
                            "code": "const chartData = data.data.map((item) => ({"
                        },
                        {
                            "line": 25,
                            "code": "date: item.date,"
                        },
                        {
                            "line": 26,
                            "code": "price: item.close,"
                        }
                    ]
                },
                {
                    "summaryComponent": "Renders a responsive line chart with axes, tooltip, and legend",
                    "codeSegments": [
                        {
                            "line": 40,
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                        },
                        {
                            "line": 41,
                            "code": "<LineChart"
                        },
                        {
                            "line": 45,
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatMonth} />"
                        },
                        {
                            "line": 46,
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                        },
                        {
                            "line": 47,
                            "code": "<Tooltip />"
                        },
                        {
                            "line": 48,
                            "code": "<Legend />"
                        },
                        {
                            "line": 49,
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                        }
                    ]
                },
                {
                    "summaryComponent": "Displays the company name and ticker above the chart",
                    "codeSegments": [
                        {
                            "line": 37,
                            "code": "<h3>"
                        },
                        {
                            "line": 38,
                            "code": "{company} ({ticker})"
                        }
                    ]
                },
                {
                    "summaryComponent": "No changes compared to the original code",
                    "codeSegments": []
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));\n28: \n29:   // Function to format date as month (e.g., \"Jan\", \"Feb\")\n30:   const formatMonth = (dateString) => {\n31:     const date = new Date(dateString);\n32:     return date.toLocaleString(\"default\", { month: \"short\" });\n33:   };\n34: \n35:   return (\n36:     <div style={{ marginTop: \"2rem\" }}>\n37:       <h3>\n38:         {company} ({ticker})\n39:       </h3>\n40:       <ResponsiveContainer width=\"100%\" height={300}>\n41:         <LineChart\n42:           data={chartData}\n43:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n44:         >\n45:           <XAxis dataKey=\"date\" tickFormatter={formatMonth} />\n46:           <YAxis domain={[\"auto\", \"auto\"]} />\n47:           <Tooltip />\n48:           <Legend />\n49:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n50:         </LineChart>\n51:       </ResponsiveContainer>\n52:     </div>\n53:   );\n54: };\n55: \n56: export default StockChart;"
        },
        "event": "map_summary_code",
        "id": "QsgH5sUAgjosGlSLzPvH"
    },
    {
        "timestamp": "2025-08-23 20:25:54.000",
        "source": "backend",
        "data": {
            "summary": "The code implements a StockChart React component that visualizes stock price data as a line chart using the Recharts library. It formats the input data and displays the company name and ticker above the chart. The chart includes axes, tooltips, and a legend for better readability. There are no modifications from the original version.",
            "mapping": [
                {
                    "summaryComponent": "StockChart React component",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "visualizes stock price data as a line chart",
                    "codeSegments": [
                        {
                            "line": 41,
                            "code": "<LineChart"
                        },
                        {
                            "line": 49,
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                        }
                    ]
                },
                {
                    "summaryComponent": "using the Recharts library",
                    "codeSegments": [
                        {
                            "line": 2,
                            "code": "import {"
                        },
                        {
                            "line": 11,
                            "code": "} from \"recharts\";"
                        }
                    ]
                },
                {
                    "summaryComponent": "formats the input data",
                    "codeSegments": [
                        {
                            "line": 24,
                            "code": "const chartData = data.data.map((item) => ({"
                        },
                        {
                            "line": 25,
                            "code": "date: item.date,"
                        },
                        {
                            "line": 26,
                            "code": "price: item.close,"
                        }
                    ]
                },
                {
                    "summaryComponent": "displays the company name and ticker above the chart",
                    "codeSegments": [
                        {
                            "line": 37,
                            "code": "<h3>"
                        },
                        {
                            "line": 38,
                            "code": "{company} ({ticker})"
                        }
                    ]
                },
                {
                    "summaryComponent": "The chart includes axes",
                    "codeSegments": [
                        {
                            "line": 45,
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatMonth} />"
                        },
                        {
                            "line": 46,
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                        }
                    ]
                },
                {
                    "summaryComponent": "tooltips",
                    "codeSegments": [
                        {
                            "line": 47,
                            "code": "<Tooltip />"
                        }
                    ]
                },
                {
                    "summaryComponent": "and a legend",
                    "codeSegments": [
                        {
                            "line": 48,
                            "code": "<Legend />"
                        }
                    ]
                },
                {
                    "summaryComponent": "for better readability",
                    "codeSegments": [
                        {
                            "line": 47,
                            "code": "<Tooltip />"
                        },
                        {
                            "line": 48,
                            "code": "<Legend />"
                        }
                    ]
                },
                {
                    "summaryComponent": "There are no modifications from the original version",
                    "codeSegments": [
                        {
                            "line": null,
                            "code": "// There are no modifications from the original version."
                        }
                    ]
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));\n28: \n29:   // Function to format date as month (e.g., \"Jan\", \"Feb\")\n30:   const formatMonth = (dateString) => {\n31:     const date = new Date(dateString);\n32:     return date.toLocaleString(\"default\", { month: \"short\" });\n33:   };\n34: \n35:   return (\n36:     <div style={{ marginTop: \"2rem\" }}>\n37:       <h3>\n38:         {company} ({ticker})\n39:       </h3>\n40:       <ResponsiveContainer width=\"100%\" height={300}>\n41:         <LineChart\n42:           data={chartData}\n43:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n44:         >\n45:           <XAxis dataKey=\"date\" tickFormatter={formatMonth} />\n46:           <YAxis domain={[\"auto\", \"auto\"]} />\n47:           <Tooltip />\n48:           <Legend />\n49:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n50:         </LineChart>\n51:       </ResponsiveContainer>\n52:     </div>\n53:   );\n54: };\n55: \n56: export default StockChart;"
        },
        "event": "map_summary_code",
        "id": "DxeSTbYrkVKG96WStJzM"
    },
    {
        "timestamp": "2025-08-23 20:25:55.000",
        "source": "backend",
        "data": {
            "summary": "This code defines a StockChart React component that renders a responsive line chart of stock closing prices using the Recharts library. It first checks for valid data, extracts the company name and ticker, and processes the data into a format suitable for charting. The component formats date labels to show months, and displays the chart with axes, tooltips, a legend, and a monotone line representing price. The chart is wrapped in a styled container and includes a heading with the company name and ticker symbol. There are no differences between the original and modified code.",
            "mapping": [
                {
                    "summaryComponent": "defines a StockChart React component",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "renders a responsive line chart of stock closing prices",
                    "codeSegments": [
                        {
                            "line": 40,
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                        },
                        {
                            "line": 41,
                            "code": "<LineChart"
                        },
                        {
                            "line": 49,
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                        }
                    ]
                },
                {
                    "summaryComponent": "using the Recharts library",
                    "codeSegments": [
                        {
                            "line": 2,
                            "code": "import {"
                        },
                        {
                            "line": 11,
                            "code": "} from \"recharts\";"
                        }
                    ]
                },
                {
                    "summaryComponent": "checks for valid data",
                    "codeSegments": [
                        {
                            "line": 14,
                            "code": "if (!data || !data.data || !data.data.length) return null;"
                        }
                    ]
                },
                {
                    "summaryComponent": "extracts the company name and ticker",
                    "codeSegments": [
                        {
                            "line": 16,
                            "code": "const company = data.name;"
                        },
                        {
                            "line": 17,
                            "code": "const ticker = data.ticker;"
                        }
                    ]
                },
                {
                    "summaryComponent": "processes the data into a format suitable for charting",
                    "codeSegments": [
                        {
                            "line": 24,
                            "code": "const chartData = data.data.map((item) => ({"
                        },
                        {
                            "line": 25,
                            "code": "date: item.date,"
                        },
                        {
                            "line": 26,
                            "code": "price: item.close,"
                        },
                        {
                            "line": 27,
                            "code": "}));"
                        }
                    ]
                },
                {
                    "summaryComponent": "formats date labels to show months",
                    "codeSegments": [
                        {
                            "line": 30,
                            "code": "const formatMonth = (dateString) => {"
                        },
                        {
                            "line": 32,
                            "code": "return date.toLocaleString(\"default\", { month: \"short\" });"
                        },
                        {
                            "line": 45,
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatMonth} />"
                        }
                    ]
                },
                {
                    "summaryComponent": "displays the chart with axes, tooltips, a legend, and a monotone line representing price",
                    "codeSegments": [
                        {
                            "line": 45,
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatMonth} />"
                        },
                        {
                            "line": 46,
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                        },
                        {
                            "line": 47,
                            "code": "<Tooltip />"
                        },
                        {
                            "line": 48,
                            "code": "<Legend />"
                        },
                        {
                            "line": 49,
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                        }
                    ]
                },
                {
                    "summaryComponent": "wrapped in a styled container",
                    "codeSegments": [
                        {
                            "line": 36,
                            "code": "<div style={{ marginTop: \"2rem\" }}>"
                        }
                    ]
                },
                {
                    "summaryComponent": "includes a heading with the company name and ticker symbol",
                    "codeSegments": [
                        {
                            "line": 37,
                            "code": "<h3>"
                        },
                        {
                            "line": 38,
                            "code": "{company} ({ticker})"
                        }
                    ]
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));\n28: \n29:   // Function to format date as month (e.g., \"Jan\", \"Feb\")\n30:   const formatMonth = (dateString) => {\n31:     const date = new Date(dateString);\n32:     return date.toLocaleString(\"default\", { month: \"short\" });\n33:   };\n34: \n35:   return (\n36:     <div style={{ marginTop: \"2rem\" }}>\n37:       <h3>\n38:         {company} ({ticker})\n39:       </h3>\n40:       <ResponsiveContainer width=\"100%\" height={300}>\n41:         <LineChart\n42:           data={chartData}\n43:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n44:         >\n45:           <XAxis dataKey=\"date\" tickFormatter={formatMonth} />\n46:           <YAxis domain={[\"auto\", \"auto\"]} />\n47:           <Tooltip />\n48:           <Legend />\n49:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n50:         </LineChart>\n51:       </ResponsiveContainer>\n52:     </div>\n53:   );\n54: };\n55: \n56: export default StockChart;"
        },
        "event": "map_summary_code",
        "id": "XFwCoOE0RCeJt245yF0o"
    },
    {
        "timestamp": "2025-08-23 20:25:56.000",
        "source": "backend",
        "data": {
            "summary": "• Implements a StockChart React component to display stock price trends\n• Validates input data and extracts company name and ticker\n• Processes raw stock data:\n  ◦ Maps each data point to an object with date and closing price\n  ◦ Formats date strings for display, including month abbreviation for X-axis\n• Utilizes Recharts components:\n  ◦ ResponsiveContainer for adaptive sizing\n  ◦ LineChart with custom margins\n  ◦ XAxis and YAxis, with X-axis using formatted month labels\n  ◦ Tooltip and Legend for interactivity and clarity\n  ◦ Line component to plot closing prices as a smooth curve without dots\n• Renders the chart inside a styled div, displaying the company name and ticker above the chart\n• No changes from the original code",
            "mapping": [
                {
                    "summaryComponent": "Implements a StockChart React component to display stock price trends",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "Validates input data and extracts company name and ticker",
                    "codeSegments": [
                        {
                            "line": 14,
                            "code": "if (!data || !data.data || !data.data.length) return null;"
                        },
                        {
                            "line": 16,
                            "code": "const company = data.name;"
                        },
                        {
                            "line": 17,
                            "code": "const ticker = data.ticker;"
                        }
                    ]
                },
                {
                    "summaryComponent": "Processes raw stock data:",
                    "codeSegments": [
                        {
                            "line": 23,
                            "code": "// Combine labels and values into an array of objects for Recharts"
                        }
                    ]
                },
                {
                    "summaryComponent": "Maps each data point to an object with date and closing price",
                    "codeSegments": [
                        {
                            "line": 24,
                            "code": "const chartData = data.data.map((item) => ({"
                        },
                        {
                            "line": 25,
                            "code": "date: item.date,"
                        },
                        {
                            "line": 26,
                            "code": "price: item.close,"
                        }
                    ]
                },
                {
                    "summaryComponent": "Formats date strings for display, including month abbreviation for X-axis",
                    "codeSegments": [
                        {
                            "line": 19,
                            "code": "const formatDateString = (date) => {"
                        },
                        {
                            "line": 20,
                            "code": "return date.split(\"T\")[0];"
                        },
                        {
                            "line": 30,
                            "code": "const formatMonth = (dateString) => {"
                        },
                        {
                            "line": 32,
                            "code": "return date.toLocaleString(\"default\", { month: \"short\" });"
                        },
                        {
                            "line": 45,
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatMonth} />"
                        }
                    ]
                },
                {
                    "summaryComponent": "Utilizes Recharts components:",
                    "codeSegments": [
                        {
                            "line": 2,
                            "code": "import {"
                        },
                        {
                            "line": 3,
                            "code": "LineChart,"
                        },
                        {
                            "line": 4,
                            "code": "Line,"
                        },
                        {
                            "line": 5,
                            "code": "XAxis,"
                        },
                        {
                            "line": 6,
                            "code": "YAxis,"
                        },
                        {
                            "line": 7,
                            "code": "Tooltip,"
                        },
                        {
                            "line": 8,
                            "code": "Legend,"
                        },
                        {
                            "line": 9,
                            "code": "ResponsiveContainer,"
                        }
                    ]
                },
                {
                    "summaryComponent": "ResponsiveContainer for adaptive sizing",
                    "codeSegments": [
                        {
                            "line": 40,
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                        }
                    ]
                },
                {
                    "summaryComponent": "LineChart with custom margins",
                    "codeSegments": [
                        {
                            "line": 41,
                            "code": "<LineChart"
                        },
                        {
                            "line": 43,
                            "code": "margin={{ top: 10, right: 30, left: 0, bottom: 0 }}"
                        }
                    ]
                },
                {
                    "summaryComponent": "XAxis and YAxis, with X-axis using formatted month labels",
                    "codeSegments": [
                        {
                            "line": 45,
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatMonth} />"
                        },
                        {
                            "line": 46,
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                        }
                    ]
                },
                {
                    "summaryComponent": "Tooltip and Legend for interactivity and clarity",
                    "codeSegments": [
                        {
                            "line": 47,
                            "code": "<Tooltip />"
                        },
                        {
                            "line": 48,
                            "code": "<Legend />"
                        }
                    ]
                },
                {
                    "summaryComponent": "Line component to plot closing prices as a smooth curve without dots",
                    "codeSegments": [
                        {
                            "line": 49,
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                        }
                    ]
                },
                {
                    "summaryComponent": "Renders the chart inside a styled div, displaying the company name and ticker above the chart",
                    "codeSegments": [
                        {
                            "line": 36,
                            "code": "<div style={{ marginTop: \"2rem\" }}>"
                        },
                        {
                            "line": 37,
                            "code": "<h3>"
                        },
                        {
                            "line": 38,
                            "code": "{company} ({ticker})"
                        }
                    ]
                },
                {
                    "summaryComponent": "No changes from the original code",
                    "codeSegments": [
                        {
                            "line": 0,
                            "code": "// No code changes present"
                        }
                    ]
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));\n28: \n29:   // Function to format date as month (e.g., \"Jan\", \"Feb\")\n30:   const formatMonth = (dateString) => {\n31:     const date = new Date(dateString);\n32:     return date.toLocaleString(\"default\", { month: \"short\" });\n33:   };\n34: \n35:   return (\n36:     <div style={{ marginTop: \"2rem\" }}>\n37:       <h3>\n38:         {company} ({ticker})\n39:       </h3>\n40:       <ResponsiveContainer width=\"100%\" height={300}>\n41:         <LineChart\n42:           data={chartData}\n43:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n44:         >\n45:           <XAxis dataKey=\"date\" tickFormatter={formatMonth} />\n46:           <YAxis domain={[\"auto\", \"auto\"]} />\n47:           <Tooltip />\n48:           <Legend />\n49:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n50:         </LineChart>\n51:       </ResponsiveContainer>\n52:     </div>\n53:   );\n54: };\n55: \n56: export default StockChart;"
        },
        "event": "map_summary_code",
        "id": "GTSmo9VnVSNL3ecnIo97"
    },
    {
        "timestamp": "2025-08-23 20:26:04.000",
        "source": "frontend",
        "data": {
            "section_id": "b83368c6-dcc1-4236-8486-8627d8eadd38",
            "section_data": {
                "summaryData": {
                    "low_unstructured": "This code defines a React component that displays a stock price line chart using the Recharts library. There are no changes between the original and modified code.",
                    "low_structured": "• React component for stock price chart\n• Uses Recharts for visualization\n• Displays company name and ticker\n• No changes from the original code",
                    "medium_unstructured": "The code implements a StockChart React component that visualizes stock price data as a line chart using the Recharts library. It formats the input data and displays the company name and ticker above the chart. The chart includes axes, tooltips, and a legend for better readability. There are no modifications from the original version.",
                    "high_structured": "• Implements a StockChart React component to display stock price trends\n• Validates input data and extracts company name and ticker\n• Processes raw stock data:\n  ◦ Maps each data point to an object with date and closing price\n  ◦ Formats date strings for display, including month abbreviation for X-axis\n• Utilizes Recharts components:\n  ◦ ResponsiveContainer for adaptive sizing\n  ◦ LineChart with custom margins\n  ◦ XAxis and YAxis, with X-axis using formatted month labels\n  ◦ Tooltip and Legend for interactivity and clarity\n  ◦ Line component to plot closing prices as a smooth curve without dots\n• Renders the chart inside a styled div, displaying the company name and ticker above the chart\n• No changes from the original code",
                    "medium_structured": "• Defines a StockChart React component for visualizing stock data\n• Formats and maps incoming data for use with Recharts\n• Renders a responsive line chart with axes, tooltip, and legend\n• Displays the company name and ticker above the chart\n• No changes compared to the original code",
                    "title": "StockChart React Component for Rendering Stock Price Line Charts (No Code Changes)",
                    "high_unstructured": "This code defines a StockChart React component that renders a responsive line chart of stock closing prices using the Recharts library. It first checks for valid data, extracts the company name and ticker, and processes the data into a format suitable for charting. The component formats date labels to show months, and displays the chart with axes, tooltips, a legend, and a monotone line representing price. The chart is wrapped in a styled container and includes a heading with the company name and ticker symbol. There are no differences between the original and modified code."
                },
                "metadata": {
                    "offset": 0,
                    "fullPath": "/project/workspace/frontend/src/StockChart.jsx",
                    "id": "b83368c6-dcc1-4236-8486-8627d8eadd38",
                    "filename": "StockChart.jsx",
                    "originalCode": "import React from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  ReferenceLine,\n} from \"recharts\";\n\nconst StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  // Function to format date as month (e.g., \"Jan\", \"Feb\")\n  const formatMonth = (dateString) => {\n    const date = new Date(dateString);\n    return date.toLocaleString(\"default\", { month: \"short\" });\n  };\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatMonth} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;"
                },
                "createdAt": 1755966356000,
                "selectedStructured": "unstructured",
                "editPromptDetailLevel": null,
                "editPromptStructured": null,
                "lines": [
                    1,
                    56
                ],
                "summaryMappings": {
                    "low_unstructured": [
                        {
                            "summaryComponent": "This code defines a React component",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "that displays a stock price line chart",
                            "codeSegments": [
                                {
                                    "line": 41,
                                    "code": "<LineChart"
                                },
                                {
                                    "line": 49,
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "using the Recharts library",
                            "codeSegments": [
                                {
                                    "line": 2,
                                    "code": "import {"
                                },
                                {
                                    "line": 11,
                                    "code": "} from \"recharts\";"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "There are no changes between the original and modified code.",
                            "codeSegments": []
                        }
                    ],
                    "low_structured": [
                        {
                            "summaryComponent": "React component for stock price chart",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Uses Recharts for visualization",
                            "codeSegments": [
                                {
                                    "line": 2,
                                    "code": "import {"
                                },
                                {
                                    "line": 3,
                                    "code": "LineChart,"
                                },
                                {
                                    "line": 4,
                                    "code": "Line,"
                                },
                                {
                                    "line": 5,
                                    "code": "XAxis,"
                                },
                                {
                                    "line": 6,
                                    "code": "YAxis,"
                                },
                                {
                                    "line": 7,
                                    "code": "Tooltip,"
                                },
                                {
                                    "line": 8,
                                    "code": "Legend,"
                                },
                                {
                                    "line": 9,
                                    "code": "ResponsiveContainer,"
                                },
                                {
                                    "line": 10,
                                    "code": "ReferenceLine,"
                                },
                                {
                                    "line": 11,
                                    "code": "} from \"recharts\";"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Displays company name and ticker",
                            "codeSegments": [
                                {
                                    "line": 16,
                                    "code": "const company = data.name;"
                                },
                                {
                                    "line": 17,
                                    "code": "const ticker = data.ticker;"
                                },
                                {
                                    "line": 37,
                                    "code": "<h3>"
                                },
                                {
                                    "line": 38,
                                    "code": "{company} ({ticker})"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "No changes from the original code",
                            "codeSegments": [
                                {
                                    "line": null,
                                    "code": "// No changes from the original code"
                                }
                            ]
                        }
                    ],
                    "medium_unstructured": [
                        {
                            "summaryComponent": "StockChart React component",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "visualizes stock price data as a line chart",
                            "codeSegments": [
                                {
                                    "line": 41,
                                    "code": "<LineChart"
                                },
                                {
                                    "line": 49,
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "using the Recharts library",
                            "codeSegments": [
                                {
                                    "line": 2,
                                    "code": "import {"
                                },
                                {
                                    "line": 11,
                                    "code": "} from \"recharts\";"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "formats the input data",
                            "codeSegments": [
                                {
                                    "line": 24,
                                    "code": "const chartData = data.data.map((item) => ({"
                                },
                                {
                                    "line": 25,
                                    "code": "date: item.date,"
                                },
                                {
                                    "line": 26,
                                    "code": "price: item.close,"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "displays the company name and ticker above the chart",
                            "codeSegments": [
                                {
                                    "line": 37,
                                    "code": "<h3>"
                                },
                                {
                                    "line": 38,
                                    "code": "{company} ({ticker})"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "The chart includes axes",
                            "codeSegments": [
                                {
                                    "line": 45,
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatMonth} />"
                                },
                                {
                                    "line": 46,
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "tooltips",
                            "codeSegments": [
                                {
                                    "line": 47,
                                    "code": "<Tooltip />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "and a legend",
                            "codeSegments": [
                                {
                                    "line": 48,
                                    "code": "<Legend />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "for better readability",
                            "codeSegments": [
                                {
                                    "line": 47,
                                    "code": "<Tooltip />"
                                },
                                {
                                    "line": 48,
                                    "code": "<Legend />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "There are no modifications from the original version",
                            "codeSegments": [
                                {
                                    "line": null,
                                    "code": "// There are no modifications from the original version."
                                }
                            ]
                        }
                    ],
                    "high_structured": [
                        {
                            "summaryComponent": "Implements a StockChart React component to display stock price trends",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Validates input data and extracts company name and ticker",
                            "codeSegments": [
                                {
                                    "line": 14,
                                    "code": "if (!data || !data.data || !data.data.length) return null;"
                                },
                                {
                                    "line": 16,
                                    "code": "const company = data.name;"
                                },
                                {
                                    "line": 17,
                                    "code": "const ticker = data.ticker;"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Processes raw stock data:",
                            "codeSegments": [
                                {
                                    "line": 23,
                                    "code": "// Combine labels and values into an array of objects for Recharts"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Maps each data point to an object with date and closing price",
                            "codeSegments": [
                                {
                                    "line": 24,
                                    "code": "const chartData = data.data.map((item) => ({"
                                },
                                {
                                    "line": 25,
                                    "code": "date: item.date,"
                                },
                                {
                                    "line": 26,
                                    "code": "price: item.close,"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Formats date strings for display, including month abbreviation for X-axis",
                            "codeSegments": [
                                {
                                    "line": 19,
                                    "code": "const formatDateString = (date) => {"
                                },
                                {
                                    "line": 20,
                                    "code": "return date.split(\"T\")[0];"
                                },
                                {
                                    "line": 30,
                                    "code": "const formatMonth = (dateString) => {"
                                },
                                {
                                    "line": 32,
                                    "code": "return date.toLocaleString(\"default\", { month: \"short\" });"
                                },
                                {
                                    "line": 45,
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatMonth} />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Utilizes Recharts components:",
                            "codeSegments": [
                                {
                                    "line": 2,
                                    "code": "import {"
                                },
                                {
                                    "line": 3,
                                    "code": "LineChart,"
                                },
                                {
                                    "line": 4,
                                    "code": "Line,"
                                },
                                {
                                    "line": 5,
                                    "code": "XAxis,"
                                },
                                {
                                    "line": 6,
                                    "code": "YAxis,"
                                },
                                {
                                    "line": 7,
                                    "code": "Tooltip,"
                                },
                                {
                                    "line": 8,
                                    "code": "Legend,"
                                },
                                {
                                    "line": 9,
                                    "code": "ResponsiveContainer,"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "ResponsiveContainer for adaptive sizing",
                            "codeSegments": [
                                {
                                    "line": 40,
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "LineChart with custom margins",
                            "codeSegments": [
                                {
                                    "line": 41,
                                    "code": "<LineChart"
                                },
                                {
                                    "line": 43,
                                    "code": "margin={{ top: 10, right: 30, left: 0, bottom: 0 }}"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "XAxis and YAxis, with X-axis using formatted month labels",
                            "codeSegments": [
                                {
                                    "line": 45,
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatMonth} />"
                                },
                                {
                                    "line": 46,
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Tooltip and Legend for interactivity and clarity",
                            "codeSegments": [
                                {
                                    "line": 47,
                                    "code": "<Tooltip />"
                                },
                                {
                                    "line": 48,
                                    "code": "<Legend />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Line component to plot closing prices as a smooth curve without dots",
                            "codeSegments": [
                                {
                                    "line": 49,
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Renders the chart inside a styled div, displaying the company name and ticker above the chart",
                            "codeSegments": [
                                {
                                    "line": 36,
                                    "code": "<div style={{ marginTop: \"2rem\" }}>"
                                },
                                {
                                    "line": 37,
                                    "code": "<h3>"
                                },
                                {
                                    "line": 38,
                                    "code": "{company} ({ticker})"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "No changes from the original code",
                            "codeSegments": [
                                {
                                    "line": 0,
                                    "code": "// No code changes present"
                                }
                            ]
                        }
                    ],
                    "medium_structured": [
                        {
                            "summaryComponent": "Defines a StockChart React component for visualizing stock data",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                },
                                {
                                    "line": 56,
                                    "code": "export default StockChart;"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Formats and maps incoming data for use with Recharts",
                            "codeSegments": [
                                {
                                    "line": 24,
                                    "code": "const chartData = data.data.map((item) => ({"
                                },
                                {
                                    "line": 25,
                                    "code": "date: item.date,"
                                },
                                {
                                    "line": 26,
                                    "code": "price: item.close,"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Renders a responsive line chart with axes, tooltip, and legend",
                            "codeSegments": [
                                {
                                    "line": 40,
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                                },
                                {
                                    "line": 41,
                                    "code": "<LineChart"
                                },
                                {
                                    "line": 45,
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatMonth} />"
                                },
                                {
                                    "line": 46,
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                                },
                                {
                                    "line": 47,
                                    "code": "<Tooltip />"
                                },
                                {
                                    "line": 48,
                                    "code": "<Legend />"
                                },
                                {
                                    "line": 49,
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Displays the company name and ticker above the chart",
                            "codeSegments": [
                                {
                                    "line": 37,
                                    "code": "<h3>"
                                },
                                {
                                    "line": 38,
                                    "code": "{company} ({ticker})"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "No changes compared to the original code",
                            "codeSegments": []
                        }
                    ],
                    "high_unstructured": [
                        {
                            "summaryComponent": "defines a StockChart React component",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "renders a responsive line chart of stock closing prices",
                            "codeSegments": [
                                {
                                    "line": 40,
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                                },
                                {
                                    "line": 41,
                                    "code": "<LineChart"
                                },
                                {
                                    "line": 49,
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "using the Recharts library",
                            "codeSegments": [
                                {
                                    "line": 2,
                                    "code": "import {"
                                },
                                {
                                    "line": 11,
                                    "code": "} from \"recharts\";"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "checks for valid data",
                            "codeSegments": [
                                {
                                    "line": 14,
                                    "code": "if (!data || !data.data || !data.data.length) return null;"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "extracts the company name and ticker",
                            "codeSegments": [
                                {
                                    "line": 16,
                                    "code": "const company = data.name;"
                                },
                                {
                                    "line": 17,
                                    "code": "const ticker = data.ticker;"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "processes the data into a format suitable for charting",
                            "codeSegments": [
                                {
                                    "line": 24,
                                    "code": "const chartData = data.data.map((item) => ({"
                                },
                                {
                                    "line": 25,
                                    "code": "date: item.date,"
                                },
                                {
                                    "line": 26,
                                    "code": "price: item.close,"
                                },
                                {
                                    "line": 27,
                                    "code": "}));"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "formats date labels to show months",
                            "codeSegments": [
                                {
                                    "line": 30,
                                    "code": "const formatMonth = (dateString) => {"
                                },
                                {
                                    "line": 32,
                                    "code": "return date.toLocaleString(\"default\", { month: \"short\" });"
                                },
                                {
                                    "line": 45,
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatMonth} />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "displays the chart with axes, tooltips, a legend, and a monotone line representing price",
                            "codeSegments": [
                                {
                                    "line": 45,
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatMonth} />"
                                },
                                {
                                    "line": 46,
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                                },
                                {
                                    "line": 47,
                                    "code": "<Tooltip />"
                                },
                                {
                                    "line": 48,
                                    "code": "<Legend />"
                                },
                                {
                                    "line": 49,
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "wrapped in a styled container",
                            "codeSegments": [
                                {
                                    "line": 36,
                                    "code": "<div style={{ marginTop: \"2rem\" }}>"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "includes a heading with the company name and ticker symbol",
                            "codeSegments": [
                                {
                                    "line": 37,
                                    "code": "<h3>"
                                },
                                {
                                    "line": 38,
                                    "code": "{company} ({ticker})"
                                }
                            ]
                        }
                    ]
                },
                "editPromptValue": "",
                "selectedDetailLevel": "medium",
                "oldSummaryData": {
                    "low_unstructured": "This code defines a React component that displays a stock price line chart using the Recharts library.",
                    "low_structured": "• React component for stock price chart\n• Uses Recharts for visualization\n• Displays company name and ticker",
                    "medium_unstructured": "The code implements a StockChart React component that visualizes stock price data as a line chart using the Recharts library. It formats the input data and displays the company name and ticker above the chart. The chart includes axes, tooltips, and a legend for better readability.",
                    "high_structured": "• Implements a StockChart React component to display stock price trends\n• Validates input data and extracts company name and ticker\n• Processes raw stock data:\n  ◦ Maps each data point to an object with date and closing price\n  ◦ Formats date strings for display, including month abbreviation for X-axis\n• Utilizes Recharts components:\n  ◦ ResponsiveContainer for adaptive sizing\n  ◦ LineChart with custom margins\n  ◦ XAxis and YAxis, with X-axis using formatted month labels\n  ◦ Tooltip and Legend for interactivity and clarity\n  ◦ Line component to plot closing prices as a smooth curve without dots\n• Renders the chart inside a styled div, displaying the company name and ticker above the chart",
                    "medium_structured": "• Defines a StockChart React component for visualizing stock data\n• Formats and maps incoming data for use with Recharts\n• Renders a responsive line chart with axes, tooltip, and legend\n• Displays the company name and ticker above the chart",
                    "title": "StockChart React Component for Rendering Stock Price Line Charts",
                    "high_unstructured": "This code defines a StockChart React component that renders a responsive line chart of stock closing prices using the Recharts library. It first checks for valid data, extracts the company name and ticker, and processes the data into a format suitable for charting. The component formats date labels to show months, and displays the chart with axes, tooltips, a legend, and a monotone line representing price. The chart is wrapped in a styled container and includes a heading with the company name and ticker symbol."
                },
                "title": "StockChart React Component for Rendering Stock Price Line Charts (No Code Changes)"
            }
        },
        "event": "create_new_section",
        "id": "Deag6vc34sAxnLkmeDkd"
    },
    {
        "timestamp": "2025-08-23 20:26:04.000",
        "source": "frontend",
        "data": {
            "before_section_id": "03097dbd-3ace-49c6-844a-17430b34f42b",
            "after_section_id": "b83368c6-dcc1-4236-8486-8627d8eadd38"
        },
        "event": "autotransit_section",
        "id": "Jnb4bRMY6PHEfCxK5JEi"
    },
    {
        "timestamp": "2025-08-23 20:26:20.000",
        "source": "frontend",
        "data": {
            "mapping_index": 5,
            "section_id": "b83368c6-dcc1-4236-8486-8627d8eadd38",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "2o7FZPfWjA07MvP6qIjx"
    },
    {
        "timestamp": "2025-08-23 20:26:20.000",
        "source": "frontend",
        "data": {
            "mapping_index": 3,
            "section_id": "b83368c6-dcc1-4236-8486-8627d8eadd38",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "P9r7Ixb80ZAfwjTF6GUV"
    },
    {
        "timestamp": "2025-08-23 20:26:20.000",
        "source": "frontend",
        "data": {
            "section_id": "b83368c6-dcc1-4236-8486-8627d8eadd38",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "cljueHKCXKoEfPOZkl6G"
    },
    {
        "timestamp": "2025-08-23 20:26:20.000",
        "source": "frontend",
        "data": {
            "section_id": "b83368c6-dcc1-4236-8486-8627d8eadd38",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "pDkWfer7yWrg8i6mg6yU"
    },
    {
        "timestamp": "2025-08-23 20:26:20.000",
        "source": "frontend",
        "data": {
            "mapping_index": 9,
            "section_id": "b83368c6-dcc1-4236-8486-8627d8eadd38",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "tz8fw43YhHnQGaO3ghHg"
    },
    {
        "timestamp": "2025-08-23 20:26:20.000",
        "source": "frontend",
        "data": {
            "section_id": "b83368c6-dcc1-4236-8486-8627d8eadd38",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "xcdWyJVnEScEfICF4JAb"
    },
    {
        "timestamp": "2025-08-23 20:26:21.000",
        "source": "frontend",
        "data": {
            "section_id": "b83368c6-dcc1-4236-8486-8627d8eadd38",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "EHCtiUyQOpFkzOOQabSo"
    },
    {
        "timestamp": "2025-08-23 20:26:21.000",
        "source": "frontend",
        "data": {
            "mapping_index": 9,
            "section_id": "b83368c6-dcc1-4236-8486-8627d8eadd38",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "U0ONrkPxBHYWH2seP1k6"
    },
    {
        "timestamp": "2025-08-23 20:26:21.000",
        "source": "frontend",
        "data": {
            "mapping_index": 8,
            "section_id": "b83368c6-dcc1-4236-8486-8627d8eadd38",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "YpNDKrjumqNpuu5zdREI"
    },
    {
        "timestamp": "2025-08-23 20:26:21.000",
        "source": "frontend",
        "data": {
            "section_id": "b83368c6-dcc1-4236-8486-8627d8eadd38",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "dDfittEYgG8L4zouhTDv"
    },
    {
        "timestamp": "2025-08-23 20:26:21.000",
        "source": "frontend",
        "data": {
            "mapping_index": 9,
            "section_id": "b83368c6-dcc1-4236-8486-8627d8eadd38",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "qfldOcCaReXme89j2v0f"
    },
    {
        "timestamp": "2025-08-23 20:26:22.000",
        "source": "frontend",
        "data": {
            "section_id": "b83368c6-dcc1-4236-8486-8627d8eadd38",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "QKnu2TYlIA4g15e6iUS0"
    },
    {
        "timestamp": "2025-08-23 20:26:22.000",
        "source": "frontend",
        "data": {
            "section_id": "b83368c6-dcc1-4236-8486-8627d8eadd38",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "TqLJhvHh4cJbGeEAdD0K"
    },
    {
        "timestamp": "2025-08-23 20:26:22.000",
        "source": "frontend",
        "data": {
            "mapping_index": 5,
            "section_id": "b83368c6-dcc1-4236-8486-8627d8eadd38",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "VTH3HGDSpRYtesndcQjr"
    },
    {
        "timestamp": "2025-08-23 20:26:22.000",
        "source": "frontend",
        "data": {
            "section_id": "b83368c6-dcc1-4236-8486-8627d8eadd38",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "YXAkvkCbzl5hoyJ1NVfx"
    },
    {
        "timestamp": "2025-08-23 20:26:22.000",
        "source": "frontend",
        "data": {
            "mapping_index": 9,
            "section_id": "b83368c6-dcc1-4236-8486-8627d8eadd38",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "csanGYIgdgau60bZXxRU"
    },
    {
        "timestamp": "2025-08-23 20:26:23.000",
        "source": "frontend",
        "data": {
            "mapping_index": 4,
            "section_id": "b83368c6-dcc1-4236-8486-8627d8eadd38",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "5cIgwKuGxb4rcfApvH2l"
    },
    {
        "timestamp": "2025-08-23 20:26:23.000",
        "source": "frontend",
        "data": {
            "mapping_index": 8,
            "section_id": "b83368c6-dcc1-4236-8486-8627d8eadd38",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "6ZnB7fKSJcKw8R6Le6P6"
    },
    {
        "timestamp": "2025-08-23 20:26:23.000",
        "source": "frontend",
        "data": {
            "section_id": "b83368c6-dcc1-4236-8486-8627d8eadd38",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "7cwAdzFl07EUBrUnVDtw"
    },
    {
        "timestamp": "2025-08-23 20:26:23.000",
        "source": "frontend",
        "data": {
            "mapping_index": 9,
            "section_id": "b83368c6-dcc1-4236-8486-8627d8eadd38",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "9iuyXLitoYne34OsmqnK"
    },
    {
        "timestamp": "2025-08-23 20:26:23.000",
        "source": "frontend",
        "data": {
            "mapping_index": 5,
            "section_id": "b83368c6-dcc1-4236-8486-8627d8eadd38",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "FnrPY8PtuEpe601chxdp"
    },
    {
        "timestamp": "2025-08-23 20:26:23.000",
        "source": "frontend",
        "data": {
            "mapping_index": 1,
            "section_id": "b83368c6-dcc1-4236-8486-8627d8eadd38",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "IA4csDW6XiBuR7bdXkD9"
    },
    {
        "timestamp": "2025-08-23 20:26:23.000",
        "source": "frontend",
        "data": {
            "section_id": "b83368c6-dcc1-4236-8486-8627d8eadd38",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "Riu87nJ5Obt7pZd68ZXK"
    },
    {
        "timestamp": "2025-08-23 20:26:23.000",
        "source": "frontend",
        "data": {
            "section_id": "b83368c6-dcc1-4236-8486-8627d8eadd38",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "ZgxJDBctbvhz94AGGzFc"
    },
    {
        "timestamp": "2025-08-23 20:26:23.000",
        "source": "frontend",
        "data": {
            "section_id": "b83368c6-dcc1-4236-8486-8627d8eadd38",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "gFBP5IMvrxa65NOgj7qp"
    },
    {
        "timestamp": "2025-08-23 20:26:23.000",
        "source": "frontend",
        "data": {
            "section_id": "b83368c6-dcc1-4236-8486-8627d8eadd38",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "ixoojRLuiowcFaU4PTZC"
    },
    {
        "timestamp": "2025-08-23 20:26:23.000",
        "source": "frontend",
        "data": {
            "structured": "unstructured",
            "summary": "The code implements a StockChart React component that visualizes stock price data as a line chart using the Recharts library. It formats the input data and displays the company name and ticker above the chart. The chart includes axes, tooltips, and a legend for better readability. There are no modifications from the original version.",
            "section_id": "b83368c6-dcc1-4236-8486-8627d8eadd38",
            "detail_level": "medium"
        },
        "event": "click_edit_in_prompt",
        "id": "kAVbKiXktVcmpexhWqcQ"
    },
    {
        "timestamp": "2025-08-23 20:26:23.000",
        "source": "frontend",
        "data": {
            "mapping_index": 3,
            "section_id": "b83368c6-dcc1-4236-8486-8627d8eadd38",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "nsj1Sv2Flb3hpZMt1dgZ"
    },
    {
        "timestamp": "2025-08-23 20:26:23.000",
        "source": "frontend",
        "data": {
            "section_id": "b83368c6-dcc1-4236-8486-8627d8eadd38",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "xzRR4xqMIxZH6pY4HRbO"
    },
    {
        "timestamp": "2025-08-23 20:26:53.000",
        "source": "backend",
        "data": {
            "updated_summary": "The code implements a StockChart React component that visualizes stock price data as a line chart using the Recharts library. It formats the input data and displays the company name and ticker above the chart. The chart includes axes, tooltips, and a legend for better readability. The x-axis labels, which were previously displayed in Chinese characters, are now shown using English characters. There are no modifications from the original version except for the change to x-axis label language.",
            "instruction": "Now, all x labels are in Chinese characters. I want them using English characters.",
            "original_code": "import React from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  ReferenceLine,\n} from \"recharts\";\n\nconst StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  // Function to format date as month (e.g., \"Jan\", \"Feb\")\n  const formatMonth = (dateString) => {\n    const date = new Date(dateString);\n    return date.toLocaleString(\"default\", { month: \"short\" });\n  };\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatMonth} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;",
            "original_summary": "The code implements a StockChart React component that visualizes stock price data as a line chart using the Recharts library. It formats the input data and displays the company name and ticker above the chart. The chart includes axes, tooltips, and a legend for better readability. There are no modifications from the original version."
        },
        "event": "apply_instruction_summary",
        "id": "WaACNpjDt0Abzo5I2bnP"
    },
    {
        "timestamp": "2025-08-23 20:26:57.000",
        "source": "backend",
        "data": {
            "updated_code": "import React from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  ReferenceLine,\n} from \"recharts\";\n\nconst StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  // Function to format date as month (e.g., \"Jan\", \"Feb\") in English\n  const formatMonth = (dateString) => {\n    const date = new Date(dateString);\n    return date.toLocaleString(\"en\", { month: \"short\" });\n  };\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatMonth} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;",
            "edited_summary": "The code implements a StockChart React component that visualizes stock price data as a line chart using the Recharts library. It formats the input data and displays the company name and ticker above the chart. The chart includes axes, tooltips, and a legend for better readability. The x-axis labels, which were previously displayed in Chinese characters, are now shown using English characters. There are no modifications from the original version except for the change to x-axis label language.",
            "structured_type": "unstructured",
            "original_code": "import React from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  ReferenceLine,\n} from \"recharts\";\n\nconst StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  // Function to format date as month (e.g., \"Jan\", \"Feb\")\n  const formatMonth = (dateString) => {\n    const date = new Date(dateString);\n    return date.toLocaleString(\"default\", { month: \"short\" });\n  };\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatMonth} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;",
            "original_summary": "The code implements a StockChart React component that visualizes stock price data as a line chart using the Recharts library. It formats the input data and displays the company name and ticker above the chart. The chart includes axes, tooltips, and a legend for better readability. There are no modifications from the original version.",
            "detail_level": "medium"
        },
        "event": "modify_summary_mediation",
        "id": "WLnGqkUoN459oMTrEn2v"
    },
    {
        "timestamp": "2025-08-23 20:26:59.000",
        "source": "frontend",
        "data": {
            "structured": "unstructured",
            "section_id": "b83368c6-dcc1-4236-8486-8627d8eadd38",
            "instruction": "Now, all x labels are in Chinese characters. I want them using English characters.",
            "original_summary": "The code implements a StockChart React component that visualizes stock price data as a line chart using the Recharts library. It formats the input data and displays the company name and ticker above the chart. The chart includes axes, tooltips, and a legend for better readability. There are no modifications from the original version.",
            "detail_level": "medium"
        },
        "event": "apply_instruction_summary",
        "id": "QhzVCAjamHdKoMhyZ8ec"
    },
    {
        "timestamp": "2025-08-23 20:27:02.000",
        "source": "frontend",
        "data": {
            "structured": "unstructured",
            "section_id": "b83368c6-dcc1-4236-8486-8627d8eadd38",
            "edited_summary": "The code implements a StockChart React component that visualizes stock price data as a line chart using the Recharts library. It formats the input data and displays the company name and ticker above the chart. The chart includes axes, tooltips, and a legend for better readability. The x-axis labels, which were previously displayed in Chinese characters, are now shown using English characters. There are no modifications from the original version except for the change to x-axis label language.",
            "original_summary": "The code implements a StockChart React component that visualizes stock price data as a line chart using the Recharts library. It formats the input data and displays the company name and ticker above the chart. The chart includes axes, tooltips, and a legend for better readability. There are no modifications from the original version.",
            "detail_level": "medium"
        },
        "event": "commit_modified_summary",
        "id": "uPtrCL1baIG8byUsX5BO"
    },
    {
        "timestamp": "2025-08-23 20:27:03.000",
        "source": "backend",
        "data": {
            "new_summary": {
                "low_unstructured": "This code defines a React component that displays a stock price line chart using the Recharts library. The only change is that the month abbreviation for the X-axis is now formatted using the default locale instead of explicitly using English ('en').",
                "low_structured": "• React component for stock price chart\n• Uses Recharts for visualization\n• Displays company name and ticker\n• The month abbreviation for the X-axis is now formatted using the default locale instead of 'en'",
                "medium_unstructured": "The code implements a StockChart React component that visualizes stock price data as a line chart using the Recharts library. It formats the input data and displays the company name and ticker above the chart. The chart includes axes, tooltips, and a legend for better readability. The only modification is that the month abbreviation for the X-axis is now formatted using the default locale rather than hardcoding 'en'.",
                "high_structured": "• Implements a StockChart React component to display stock price trends\n• Validates input data and extracts company name and ticker\n• Processes raw stock data:\n  ◦ Maps each data point to an object with date and closing price\n  ◦ Formats date strings for display, including month abbreviation for X-axis\n    ▪ The month abbreviation is now formatted using the default locale, not 'en'\n• Utilizes Recharts components:\n  ◦ ResponsiveContainer for adaptive sizing\n  ◦ LineChart with custom margins\n  ◦ XAxis and YAxis, with X-axis using formatted month labels\n  ◦ Tooltip and Legend for interactivity and clarity\n  ◦ Line component to plot closing prices as a smooth curve without dots\n• Renders the chart inside a styled div, displaying the company name and ticker above the chart",
                "medium_structured": "• Defines a StockChart React component for visualizing stock data\n• Formats and maps incoming data for use with Recharts\n• Renders a responsive line chart with axes, tooltip, and legend\n• Displays the company name and ticker above the chart\n• The month abbreviation for the X-axis is now formatted using the default locale instead of 'en'",
                "title": "StockChart React Component with Locale Update for Month Formatting",
                "high_unstructured": "This code defines a StockChart React component that renders a responsive line chart of stock closing prices using the Recharts library. It first checks for valid data, extracts the company name and ticker, and processes the data into a format suitable for charting. The component formats date labels to show months, and displays the chart with axes, tooltips, a legend, and a monotone line representing price. The chart is wrapped in a styled container and includes a heading with the company name and ticker symbol. The only difference from the original code is that the formatMonth function now uses the default locale for month abbreviations instead of explicitly specifying 'en'."
            },
            "original_code": "import React from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  ReferenceLine,\n} from \"recharts\";\n\nconst StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  // Function to format date as month (e.g., \"Jan\", \"Feb\") in English\n  const formatMonth = (dateString) => {\n    const date = new Date(dateString);\n    return date.toLocaleString(\"en\", { month: \"short\" });\n  };\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatMonth} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;",
            "new_code": "import React from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  ReferenceLine,\n} from \"recharts\";\n\nconst StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  // Function to format date as month (e.g., \"Jan\", \"Feb\") in English\n  const formatMonth = (dateString) => {\n    const date = new Date(dateString);\n    return date.toLocaleString(\"en\", { month: \"short\" });\n  };\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatMonth} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;",
            "old_summary": {
                "low_unstructured": "This code defines a React component that displays a stock price line chart using the Recharts library. There are no changes between the original and modified code.",
                "low_structured": "• React component for stock price chart\n• Uses Recharts for visualization\n• Displays company name and ticker\n• No changes from the original code",
                "medium_unstructured": "The code implements a StockChart React component that visualizes stock price data as a line chart using the Recharts library. It formats the input data and displays the company name and ticker above the chart. The chart includes axes, tooltips, and a legend for better readability. There are no modifications from the original version.",
                "high_structured": "• Implements a StockChart React component to display stock price trends\n• Validates input data and extracts company name and ticker\n• Processes raw stock data:\n  ◦ Maps each data point to an object with date and closing price\n  ◦ Formats date strings for display, including month abbreviation for X-axis\n• Utilizes Recharts components:\n  ◦ ResponsiveContainer for adaptive sizing\n  ◦ LineChart with custom margins\n  ◦ XAxis and YAxis, with X-axis using formatted month labels\n  ◦ Tooltip and Legend for interactivity and clarity\n  ◦ Line component to plot closing prices as a smooth curve without dots\n• Renders the chart inside a styled div, displaying the company name and ticker above the chart\n• No changes from the original code",
                "medium_structured": "• Defines a StockChart React component for visualizing stock data\n• Formats and maps incoming data for use with Recharts\n• Renders a responsive line chart with axes, tooltip, and legend\n• Displays the company name and ticker above the chart\n• No changes compared to the original code",
                "title": "StockChart React Component for Rendering Stock Price Line Charts (No Code Changes)",
                "high_unstructured": "This code defines a StockChart React component that renders a responsive line chart of stock closing prices using the Recharts library. It first checks for valid data, extracts the company name and ticker, and processes the data into a format suitable for charting. The component formats date labels to show months, and displays the chart with axes, tooltips, a legend, and a monotone line representing price. The chart is wrapped in a styled container and includes a heading with the company name and ticker symbol. There are no differences between the original and modified code."
            }
        },
        "event": "summarize_modified_code",
        "id": "L1KlQMAPyrDWDZ4HIMLU"
    },
    {
        "timestamp": "2025-08-23 20:27:05.000",
        "source": "backend",
        "data": {
            "summary": "This code defines a React component that displays a stock price line chart using the Recharts library. The only change is that the month abbreviation for the X-axis is now formatted using the default locale instead of explicitly using English ('en').",
            "mapping": [
                {
                    "summaryComponent": "defines a React component",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "displays a stock price line chart",
                    "codeSegments": [
                        {
                            "line": 41,
                            "code": "<LineChart"
                        },
                        {
                            "line": 49,
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                        }
                    ]
                },
                {
                    "summaryComponent": "using the Recharts library",
                    "codeSegments": [
                        {
                            "line": 2,
                            "code": "import {"
                        },
                        {
                            "line": 11,
                            "code": "} from \"recharts\";"
                        }
                    ]
                },
                {
                    "summaryComponent": "The only change is that the month abbreviation for the X-axis is now formatted using the default locale instead of explicitly using English ('en').",
                    "codeSegments": [
                        {
                            "line": 30,
                            "code": "const formatMonth = (dateString) => {"
                        },
                        {
                            "line": 32,
                            "code": "return date.toLocaleString(\"en\", { month: \"short\" });"
                        },
                        {
                            "line": 45,
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatMonth} />"
                        }
                    ]
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));\n28: \n29:   // Function to format date as month (e.g., \"Jan\", \"Feb\") in English\n30:   const formatMonth = (dateString) => {\n31:     const date = new Date(dateString);\n32:     return date.toLocaleString(\"en\", { month: \"short\" });\n33:   };\n34: \n35:   return (\n36:     <div style={{ marginTop: \"2rem\" }}>\n37:       <h3>\n38:         {company} ({ticker})\n39:       </h3>\n40:       <ResponsiveContainer width=\"100%\" height={300}>\n41:         <LineChart\n42:           data={chartData}\n43:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n44:         >\n45:           <XAxis dataKey=\"date\" tickFormatter={formatMonth} />\n46:           <YAxis domain={[\"auto\", \"auto\"]} />\n47:           <Tooltip />\n48:           <Legend />\n49:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n50:         </LineChart>\n51:       </ResponsiveContainer>\n52:     </div>\n53:   );\n54: };\n55: \n56: export default StockChart;"
        },
        "event": "map_summary_code",
        "id": "geUw7JeoMQfudqUOznIP"
    },
    {
        "timestamp": "2025-08-23 20:27:06.000",
        "source": "backend",
        "data": {
            "summary": "• React component for stock price chart\n• Uses Recharts for visualization\n• Displays company name and ticker\n• The month abbreviation for the X-axis is now formatted using the default locale instead of 'en'",
            "mapping": [
                {
                    "summaryComponent": "React component for stock price chart",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "Uses Recharts for visualization",
                    "codeSegments": [
                        {
                            "line": 2,
                            "code": "import {"
                        },
                        {
                            "line": 3,
                            "code": "LineChart,"
                        },
                        {
                            "line": 4,
                            "code": "Line,"
                        },
                        {
                            "line": 5,
                            "code": "XAxis,"
                        },
                        {
                            "line": 6,
                            "code": "YAxis,"
                        },
                        {
                            "line": 7,
                            "code": "Tooltip,"
                        },
                        {
                            "line": 8,
                            "code": "Legend,"
                        },
                        {
                            "line": 9,
                            "code": "ResponsiveContainer,"
                        },
                        {
                            "line": 10,
                            "code": "ReferenceLine,"
                        },
                        {
                            "line": 11,
                            "code": "} from \"recharts\";"
                        }
                    ]
                },
                {
                    "summaryComponent": "Displays company name and ticker",
                    "codeSegments": [
                        {
                            "line": 16,
                            "code": "const company = data.name;"
                        },
                        {
                            "line": 17,
                            "code": "const ticker = data.ticker;"
                        },
                        {
                            "line": 37,
                            "code": "<h3>"
                        },
                        {
                            "line": 38,
                            "code": "{company} ({ticker})"
                        }
                    ]
                },
                {
                    "summaryComponent": "The month abbreviation for the X-axis is now formatted using the default locale instead of 'en'",
                    "codeSegments": [
                        {
                            "line": 30,
                            "code": "const formatMonth = (dateString) => {"
                        },
                        {
                            "line": 31,
                            "code": "const date = new Date(dateString);"
                        },
                        {
                            "line": 32,
                            "code": "return date.toLocaleString(\"en\", { month: \"short\" });"
                        },
                        {
                            "line": 45,
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatMonth} />"
                        }
                    ]
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));\n28: \n29:   // Function to format date as month (e.g., \"Jan\", \"Feb\") in English\n30:   const formatMonth = (dateString) => {\n31:     const date = new Date(dateString);\n32:     return date.toLocaleString(\"en\", { month: \"short\" });\n33:   };\n34: \n35:   return (\n36:     <div style={{ marginTop: \"2rem\" }}>\n37:       <h3>\n38:         {company} ({ticker})\n39:       </h3>\n40:       <ResponsiveContainer width=\"100%\" height={300}>\n41:         <LineChart\n42:           data={chartData}\n43:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n44:         >\n45:           <XAxis dataKey=\"date\" tickFormatter={formatMonth} />\n46:           <YAxis domain={[\"auto\", \"auto\"]} />\n47:           <Tooltip />\n48:           <Legend />\n49:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n50:         </LineChart>\n51:       </ResponsiveContainer>\n52:     </div>\n53:   );\n54: };\n55: \n56: export default StockChart;"
        },
        "event": "map_summary_code",
        "id": "7lItHqntvzBehqlm7gD3"
    },
    {
        "timestamp": "2025-08-23 20:27:06.000",
        "source": "backend",
        "data": {
            "summary": "• Defines a StockChart React component for visualizing stock data\n• Formats and maps incoming data for use with Recharts\n• Renders a responsive line chart with axes, tooltip, and legend\n• Displays the company name and ticker above the chart\n• The month abbreviation for the X-axis is now formatted using the default locale instead of 'en'",
            "mapping": [
                {
                    "summaryComponent": "Defines a StockChart React component for visualizing stock data",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        },
                        {
                            "line": 56,
                            "code": "export default StockChart;"
                        }
                    ]
                },
                {
                    "summaryComponent": "Formats and maps incoming data for use with Recharts",
                    "codeSegments": [
                        {
                            "line": 24,
                            "code": "const chartData = data.data.map((item) => ({"
                        },
                        {
                            "line": 25,
                            "code": "date: item.date,"
                        },
                        {
                            "line": 26,
                            "code": "price: item.close,"
                        },
                        {
                            "line": 27,
                            "code": "}));"
                        }
                    ]
                },
                {
                    "summaryComponent": "Renders a responsive line chart with axes, tooltip, and legend",
                    "codeSegments": [
                        {
                            "line": 40,
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                        },
                        {
                            "line": 41,
                            "code": "<LineChart"
                        },
                        {
                            "line": 45,
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatMonth} />"
                        },
                        {
                            "line": 46,
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                        },
                        {
                            "line": 47,
                            "code": "<Tooltip />"
                        },
                        {
                            "line": 48,
                            "code": "<Legend />"
                        },
                        {
                            "line": 49,
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                        }
                    ]
                },
                {
                    "summaryComponent": "Displays the company name and ticker above the chart",
                    "codeSegments": [
                        {
                            "line": 37,
                            "code": "<h3>"
                        },
                        {
                            "line": 38,
                            "code": "{company} ({ticker})"
                        }
                    ]
                },
                {
                    "summaryComponent": "The month abbreviation for the X-axis is now formatted using the default locale instead of 'en'",
                    "codeSegments": [
                        {
                            "line": 30,
                            "code": "const formatMonth = (dateString) => {"
                        },
                        {
                            "line": 32,
                            "code": "return date.toLocaleString(\"en\", { month: \"short\" });"
                        },
                        {
                            "line": 45,
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatMonth} />"
                        }
                    ]
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));\n28: \n29:   // Function to format date as month (e.g., \"Jan\", \"Feb\") in English\n30:   const formatMonth = (dateString) => {\n31:     const date = new Date(dateString);\n32:     return date.toLocaleString(\"en\", { month: \"short\" });\n33:   };\n34: \n35:   return (\n36:     <div style={{ marginTop: \"2rem\" }}>\n37:       <h3>\n38:         {company} ({ticker})\n39:       </h3>\n40:       <ResponsiveContainer width=\"100%\" height={300}>\n41:         <LineChart\n42:           data={chartData}\n43:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n44:         >\n45:           <XAxis dataKey=\"date\" tickFormatter={formatMonth} />\n46:           <YAxis domain={[\"auto\", \"auto\"]} />\n47:           <Tooltip />\n48:           <Legend />\n49:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n50:         </LineChart>\n51:       </ResponsiveContainer>\n52:     </div>\n53:   );\n54: };\n55: \n56: export default StockChart;"
        },
        "event": "map_summary_code",
        "id": "OBccisI0gfA2pqbU3BLM"
    },
    {
        "timestamp": "2025-08-23 20:27:07.000",
        "source": "backend",
        "data": {
            "summary": "The code implements a StockChart React component that visualizes stock price data as a line chart using the Recharts library. It formats the input data and displays the company name and ticker above the chart. The chart includes axes, tooltips, and a legend for better readability. The only modification is that the month abbreviation for the X-axis is now formatted using the default locale rather than hardcoding 'en'.",
            "mapping": [
                {
                    "summaryComponent": "StockChart React component",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "visualizes stock price data as a line chart",
                    "codeSegments": [
                        {
                            "line": 41,
                            "code": "<LineChart"
                        },
                        {
                            "line": 49,
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                        }
                    ]
                },
                {
                    "summaryComponent": "using the Recharts library",
                    "codeSegments": [
                        {
                            "line": 2,
                            "code": "import {"
                        },
                        {
                            "line": 11,
                            "code": "} from \"recharts\";"
                        }
                    ]
                },
                {
                    "summaryComponent": "formats the input data",
                    "codeSegments": [
                        {
                            "line": 24,
                            "code": "const chartData = data.data.map((item) => ({"
                        },
                        {
                            "line": 25,
                            "code": "date: item.date,"
                        },
                        {
                            "line": 26,
                            "code": "price: item.close,"
                        }
                    ]
                },
                {
                    "summaryComponent": "displays the company name and ticker above the chart",
                    "codeSegments": [
                        {
                            "line": 37,
                            "code": "<h3>"
                        },
                        {
                            "line": 38,
                            "code": "{company} ({ticker})"
                        }
                    ]
                },
                {
                    "summaryComponent": "The chart includes axes",
                    "codeSegments": [
                        {
                            "line": 45,
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatMonth} />"
                        },
                        {
                            "line": 46,
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                        }
                    ]
                },
                {
                    "summaryComponent": "tooltips",
                    "codeSegments": [
                        {
                            "line": 47,
                            "code": "<Tooltip />"
                        }
                    ]
                },
                {
                    "summaryComponent": "and a legend",
                    "codeSegments": [
                        {
                            "line": 48,
                            "code": "<Legend />"
                        }
                    ]
                },
                {
                    "summaryComponent": "for better readability",
                    "codeSegments": [
                        {
                            "line": 47,
                            "code": "<Tooltip />"
                        },
                        {
                            "line": 48,
                            "code": "<Legend />"
                        }
                    ]
                },
                {
                    "summaryComponent": "the month abbreviation for the X-axis is now formatted using the default locale rather than hardcoding 'en'",
                    "codeSegments": [
                        {
                            "line": 30,
                            "code": "const formatMonth = (dateString) => {"
                        },
                        {
                            "line": 32,
                            "code": "return date.toLocaleString(\"en\", { month: \"short\" });"
                        }
                    ]
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));\n28: \n29:   // Function to format date as month (e.g., \"Jan\", \"Feb\") in English\n30:   const formatMonth = (dateString) => {\n31:     const date = new Date(dateString);\n32:     return date.toLocaleString(\"en\", { month: \"short\" });\n33:   };\n34: \n35:   return (\n36:     <div style={{ marginTop: \"2rem\" }}>\n37:       <h3>\n38:         {company} ({ticker})\n39:       </h3>\n40:       <ResponsiveContainer width=\"100%\" height={300}>\n41:         <LineChart\n42:           data={chartData}\n43:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n44:         >\n45:           <XAxis dataKey=\"date\" tickFormatter={formatMonth} />\n46:           <YAxis domain={[\"auto\", \"auto\"]} />\n47:           <Tooltip />\n48:           <Legend />\n49:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n50:         </LineChart>\n51:       </ResponsiveContainer>\n52:     </div>\n53:   );\n54: };\n55: \n56: export default StockChart;"
        },
        "event": "map_summary_code",
        "id": "Ns7bA8MeVz3UZHkMLPBL"
    },
    {
        "timestamp": "2025-08-23 20:27:08.000",
        "source": "backend",
        "data": {
            "summary": "This code defines a StockChart React component that renders a responsive line chart of stock closing prices using the Recharts library. It first checks for valid data, extracts the company name and ticker, and processes the data into a format suitable for charting. The component formats date labels to show months, and displays the chart with axes, tooltips, a legend, and a monotone line representing price. The chart is wrapped in a styled container and includes a heading with the company name and ticker symbol. The only difference from the original code is that the formatMonth function now uses the default locale for month abbreviations instead of explicitly specifying 'en'.",
            "mapping": [
                {
                    "summaryComponent": "defines a StockChart React component",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "renders a responsive line chart of stock closing prices",
                    "codeSegments": [
                        {
                            "line": 40,
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                        },
                        {
                            "line": 41,
                            "code": "<LineChart"
                        },
                        {
                            "line": 49,
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                        }
                    ]
                },
                {
                    "summaryComponent": "using the Recharts library",
                    "codeSegments": [
                        {
                            "line": 2,
                            "code": "import {"
                        },
                        {
                            "line": 11,
                            "code": "} from \"recharts\";"
                        }
                    ]
                },
                {
                    "summaryComponent": "checks for valid data",
                    "codeSegments": [
                        {
                            "line": 14,
                            "code": "if (!data || !data.data || !data.data.length) return null;"
                        }
                    ]
                },
                {
                    "summaryComponent": "extracts the company name and ticker",
                    "codeSegments": [
                        {
                            "line": 16,
                            "code": "const company = data.name;"
                        },
                        {
                            "line": 17,
                            "code": "const ticker = data.ticker;"
                        }
                    ]
                },
                {
                    "summaryComponent": "processes the data into a format suitable for charting",
                    "codeSegments": [
                        {
                            "line": 24,
                            "code": "const chartData = data.data.map((item) => ({"
                        },
                        {
                            "line": 25,
                            "code": "date: item.date,"
                        },
                        {
                            "line": 26,
                            "code": "price: item.close,"
                        },
                        {
                            "line": 27,
                            "code": "}));"
                        }
                    ]
                },
                {
                    "summaryComponent": "formats date labels to show months",
                    "codeSegments": [
                        {
                            "line": 30,
                            "code": "const formatMonth = (dateString) => {"
                        },
                        {
                            "line": 45,
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatMonth} />"
                        }
                    ]
                },
                {
                    "summaryComponent": "displays the chart with axes, tooltips, a legend, and a monotone line representing price",
                    "codeSegments": [
                        {
                            "line": 45,
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatMonth} />"
                        },
                        {
                            "line": 46,
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                        },
                        {
                            "line": 47,
                            "code": "<Tooltip />"
                        },
                        {
                            "line": 48,
                            "code": "<Legend />"
                        },
                        {
                            "line": 49,
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                        }
                    ]
                },
                {
                    "summaryComponent": "wrapped in a styled container",
                    "codeSegments": [
                        {
                            "line": 36,
                            "code": "<div style={{ marginTop: \"2rem\" }}>"
                        }
                    ]
                },
                {
                    "summaryComponent": "includes a heading with the company name and ticker symbol",
                    "codeSegments": [
                        {
                            "line": 37,
                            "code": "<h3>"
                        },
                        {
                            "line": 38,
                            "code": "{company} ({ticker})"
                        }
                    ]
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));\n28: \n29:   // Function to format date as month (e.g., \"Jan\", \"Feb\") in English\n30:   const formatMonth = (dateString) => {\n31:     const date = new Date(dateString);\n32:     return date.toLocaleString(\"en\", { month: \"short\" });\n33:   };\n34: \n35:   return (\n36:     <div style={{ marginTop: \"2rem\" }}>\n37:       <h3>\n38:         {company} ({ticker})\n39:       </h3>\n40:       <ResponsiveContainer width=\"100%\" height={300}>\n41:         <LineChart\n42:           data={chartData}\n43:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n44:         >\n45:           <XAxis dataKey=\"date\" tickFormatter={formatMonth} />\n46:           <YAxis domain={[\"auto\", \"auto\"]} />\n47:           <Tooltip />\n48:           <Legend />\n49:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n50:         </LineChart>\n51:       </ResponsiveContainer>\n52:     </div>\n53:   );\n54: };\n55: \n56: export default StockChart;"
        },
        "event": "map_summary_code",
        "id": "YozVTQtZobyB3AttVahg"
    },
    {
        "timestamp": "2025-08-23 20:27:09.000",
        "source": "backend",
        "data": {
            "summary": "• Implements a StockChart React component to display stock price trends\n• Validates input data and extracts company name and ticker\n• Processes raw stock data:\n  ◦ Maps each data point to an object with date and closing price\n  ◦ Formats date strings for display, including month abbreviation for X-axis\n    ▪ The month abbreviation is now formatted using the default locale, not 'en'\n• Utilizes Recharts components:\n  ◦ ResponsiveContainer for adaptive sizing\n  ◦ LineChart with custom margins\n  ◦ XAxis and YAxis, with X-axis using formatted month labels\n  ◦ Tooltip and Legend for interactivity and clarity\n  ◦ Line component to plot closing prices as a smooth curve without dots\n• Renders the chart inside a styled div, displaying the company name and ticker above the chart",
            "mapping": [
                {
                    "summaryComponent": "Implements a StockChart React component to display stock price trends",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "Validates input data and extracts company name and ticker",
                    "codeSegments": [
                        {
                            "line": 14,
                            "code": "if (!data || !data.data || !data.data.length) return null;"
                        },
                        {
                            "line": 16,
                            "code": "const company = data.name;"
                        },
                        {
                            "line": 17,
                            "code": "const ticker = data.ticker;"
                        }
                    ]
                },
                {
                    "summaryComponent": "Processes raw stock data:",
                    "codeSegments": [
                        {
                            "line": 23,
                            "code": "// Combine labels and values into an array of objects for Recharts"
                        }
                    ]
                },
                {
                    "summaryComponent": "Maps each data point to an object with date and closing price",
                    "codeSegments": [
                        {
                            "line": 24,
                            "code": "const chartData = data.data.map((item) => ({"
                        },
                        {
                            "line": 25,
                            "code": "date: item.date,"
                        },
                        {
                            "line": 26,
                            "code": "price: item.close,"
                        },
                        {
                            "line": 27,
                            "code": "}));"
                        }
                    ]
                },
                {
                    "summaryComponent": "Formats date strings for display, including month abbreviation for X-axis",
                    "codeSegments": [
                        {
                            "line": 19,
                            "code": "const formatDateString = (date) => {"
                        },
                        {
                            "line": 20,
                            "code": "return date.split(\"T\")[0];"
                        },
                        {
                            "line": 30,
                            "code": "const formatMonth = (dateString) => {"
                        },
                        {
                            "line": 32,
                            "code": "return date.toLocaleString(\"en\", { month: \"short\" });"
                        }
                    ]
                },
                {
                    "summaryComponent": "The month abbreviation is now formatted using the default locale, not 'en'",
                    "codeSegments": [
                        {
                            "line": 32,
                            "code": "return date.toLocaleString(\"en\", { month: \"short\" });"
                        }
                    ]
                },
                {
                    "summaryComponent": "Utilizes Recharts components:",
                    "codeSegments": [
                        {
                            "line": 2,
                            "code": "import {"
                        },
                        {
                            "line": 3,
                            "code": "LineChart,"
                        },
                        {
                            "line": 4,
                            "code": "Line,"
                        },
                        {
                            "line": 5,
                            "code": "XAxis,"
                        },
                        {
                            "line": 6,
                            "code": "YAxis,"
                        },
                        {
                            "line": 7,
                            "code": "Tooltip,"
                        },
                        {
                            "line": 8,
                            "code": "Legend,"
                        },
                        {
                            "line": 9,
                            "code": "ResponsiveContainer,"
                        }
                    ]
                },
                {
                    "summaryComponent": "ResponsiveContainer for adaptive sizing",
                    "codeSegments": [
                        {
                            "line": 40,
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                        }
                    ]
                },
                {
                    "summaryComponent": "LineChart with custom margins",
                    "codeSegments": [
                        {
                            "line": 41,
                            "code": "<LineChart"
                        },
                        {
                            "line": 43,
                            "code": "margin={{ top: 10, right: 30, left: 0, bottom: 0 }}"
                        }
                    ]
                },
                {
                    "summaryComponent": "XAxis and YAxis, with X-axis using formatted month labels",
                    "codeSegments": [
                        {
                            "line": 45,
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatMonth} />"
                        },
                        {
                            "line": 46,
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                        }
                    ]
                },
                {
                    "summaryComponent": "Tooltip and Legend for interactivity and clarity",
                    "codeSegments": [
                        {
                            "line": 47,
                            "code": "<Tooltip />"
                        },
                        {
                            "line": 48,
                            "code": "<Legend />"
                        }
                    ]
                },
                {
                    "summaryComponent": "Line component to plot closing prices as a smooth curve without dots",
                    "codeSegments": [
                        {
                            "line": 49,
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                        }
                    ]
                },
                {
                    "summaryComponent": "Renders the chart inside a styled div, displaying the company name and ticker above the chart",
                    "codeSegments": [
                        {
                            "line": 36,
                            "code": "<div style={{ marginTop: \"2rem\" }}>"
                        },
                        {
                            "line": 37,
                            "code": "<h3>"
                        },
                        {
                            "line": 38,
                            "code": "{company} ({ticker})"
                        }
                    ]
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));\n28: \n29:   // Function to format date as month (e.g., \"Jan\", \"Feb\") in English\n30:   const formatMonth = (dateString) => {\n31:     const date = new Date(dateString);\n32:     return date.toLocaleString(\"en\", { month: \"short\" });\n33:   };\n34: \n35:   return (\n36:     <div style={{ marginTop: \"2rem\" }}>\n37:       <h3>\n38:         {company} ({ticker})\n39:       </h3>\n40:       <ResponsiveContainer width=\"100%\" height={300}>\n41:         <LineChart\n42:           data={chartData}\n43:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n44:         >\n45:           <XAxis dataKey=\"date\" tickFormatter={formatMonth} />\n46:           <YAxis domain={[\"auto\", \"auto\"]} />\n47:           <Tooltip />\n48:           <Legend />\n49:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n50:         </LineChart>\n51:       </ResponsiveContainer>\n52:     </div>\n53:   );\n54: };\n55: \n56: export default StockChart;"
        },
        "event": "map_summary_code",
        "id": "sBjm7gof7EIWMZ2RfIT0"
    },
    {
        "timestamp": "2025-08-23 20:27:17.000",
        "source": "frontend",
        "data": {
            "section_id": "5213b114-b68c-49f0-80a2-dc97bfae14d1",
            "section_data": {
                "summaryData": {
                    "low_unstructured": "This code defines a React component that displays a stock price line chart using the Recharts library. The only change is that the month abbreviation for the X-axis is now formatted using the default locale instead of explicitly using English ('en').",
                    "low_structured": "• React component for stock price chart\n• Uses Recharts for visualization\n• Displays company name and ticker\n• The month abbreviation for the X-axis is now formatted using the default locale instead of 'en'",
                    "medium_unstructured": "The code implements a StockChart React component that visualizes stock price data as a line chart using the Recharts library. It formats the input data and displays the company name and ticker above the chart. The chart includes axes, tooltips, and a legend for better readability. The only modification is that the month abbreviation for the X-axis is now formatted using the default locale rather than hardcoding 'en'.",
                    "high_structured": "• Implements a StockChart React component to display stock price trends\n• Validates input data and extracts company name and ticker\n• Processes raw stock data:\n  ◦ Maps each data point to an object with date and closing price\n  ◦ Formats date strings for display, including month abbreviation for X-axis\n    ▪ The month abbreviation is now formatted using the default locale, not 'en'\n• Utilizes Recharts components:\n  ◦ ResponsiveContainer for adaptive sizing\n  ◦ LineChart with custom margins\n  ◦ XAxis and YAxis, with X-axis using formatted month labels\n  ◦ Tooltip and Legend for interactivity and clarity\n  ◦ Line component to plot closing prices as a smooth curve without dots\n• Renders the chart inside a styled div, displaying the company name and ticker above the chart",
                    "medium_structured": "• Defines a StockChart React component for visualizing stock data\n• Formats and maps incoming data for use with Recharts\n• Renders a responsive line chart with axes, tooltip, and legend\n• Displays the company name and ticker above the chart\n• The month abbreviation for the X-axis is now formatted using the default locale instead of 'en'",
                    "title": "StockChart React Component with Locale Update for Month Formatting",
                    "high_unstructured": "This code defines a StockChart React component that renders a responsive line chart of stock closing prices using the Recharts library. It first checks for valid data, extracts the company name and ticker, and processes the data into a format suitable for charting. The component formats date labels to show months, and displays the chart with axes, tooltips, a legend, and a monotone line representing price. The chart is wrapped in a styled container and includes a heading with the company name and ticker symbol. The only difference from the original code is that the formatMonth function now uses the default locale for month abbreviations instead of explicitly specifying 'en'."
                },
                "metadata": {
                    "offset": 0,
                    "fullPath": "/project/workspace/frontend/src/StockChart.jsx",
                    "id": "5213b114-b68c-49f0-80a2-dc97bfae14d1",
                    "filename": "StockChart.jsx",
                    "originalCode": "import React from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  ReferenceLine,\n} from \"recharts\";\n\nconst StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  // Function to format date as month (e.g., \"Jan\", \"Feb\") in English\n  const formatMonth = (dateString) => {\n    const date = new Date(dateString);\n    return date.toLocaleString(\"en\", { month: \"short\" });\n  };\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatMonth} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;"
                },
                "createdAt": 1755966429000,
                "selectedStructured": "unstructured",
                "editPromptDetailLevel": null,
                "editPromptStructured": null,
                "lines": [
                    1,
                    56
                ],
                "summaryMappings": {
                    "low_unstructured": [
                        {
                            "summaryComponent": "defines a React component",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "displays a stock price line chart",
                            "codeSegments": [
                                {
                                    "line": 41,
                                    "code": "<LineChart"
                                },
                                {
                                    "line": 49,
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "using the Recharts library",
                            "codeSegments": [
                                {
                                    "line": 2,
                                    "code": "import {"
                                },
                                {
                                    "line": 11,
                                    "code": "} from \"recharts\";"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "The only change is that the month abbreviation for the X-axis is now formatted using the default locale instead of explicitly using English ('en').",
                            "codeSegments": [
                                {
                                    "line": 30,
                                    "code": "const formatMonth = (dateString) => {"
                                },
                                {
                                    "line": 32,
                                    "code": "return date.toLocaleString(\"en\", { month: \"short\" });"
                                },
                                {
                                    "line": 45,
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatMonth} />"
                                }
                            ]
                        }
                    ],
                    "low_structured": [
                        {
                            "summaryComponent": "React component for stock price chart",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Uses Recharts for visualization",
                            "codeSegments": [
                                {
                                    "line": 2,
                                    "code": "import {"
                                },
                                {
                                    "line": 3,
                                    "code": "LineChart,"
                                },
                                {
                                    "line": 4,
                                    "code": "Line,"
                                },
                                {
                                    "line": 5,
                                    "code": "XAxis,"
                                },
                                {
                                    "line": 6,
                                    "code": "YAxis,"
                                },
                                {
                                    "line": 7,
                                    "code": "Tooltip,"
                                },
                                {
                                    "line": 8,
                                    "code": "Legend,"
                                },
                                {
                                    "line": 9,
                                    "code": "ResponsiveContainer,"
                                },
                                {
                                    "line": 10,
                                    "code": "ReferenceLine,"
                                },
                                {
                                    "line": 11,
                                    "code": "} from \"recharts\";"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Displays company name and ticker",
                            "codeSegments": [
                                {
                                    "line": 16,
                                    "code": "const company = data.name;"
                                },
                                {
                                    "line": 17,
                                    "code": "const ticker = data.ticker;"
                                },
                                {
                                    "line": 37,
                                    "code": "<h3>"
                                },
                                {
                                    "line": 38,
                                    "code": "{company} ({ticker})"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "The month abbreviation for the X-axis is now formatted using the default locale instead of 'en'",
                            "codeSegments": [
                                {
                                    "line": 30,
                                    "code": "const formatMonth = (dateString) => {"
                                },
                                {
                                    "line": 31,
                                    "code": "const date = new Date(dateString);"
                                },
                                {
                                    "line": 32,
                                    "code": "return date.toLocaleString(\"en\", { month: \"short\" });"
                                },
                                {
                                    "line": 45,
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatMonth} />"
                                }
                            ]
                        }
                    ],
                    "medium_unstructured": [
                        {
                            "summaryComponent": "StockChart React component",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "visualizes stock price data as a line chart",
                            "codeSegments": [
                                {
                                    "line": 41,
                                    "code": "<LineChart"
                                },
                                {
                                    "line": 49,
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "using the Recharts library",
                            "codeSegments": [
                                {
                                    "line": 2,
                                    "code": "import {"
                                },
                                {
                                    "line": 11,
                                    "code": "} from \"recharts\";"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "formats the input data",
                            "codeSegments": [
                                {
                                    "line": 24,
                                    "code": "const chartData = data.data.map((item) => ({"
                                },
                                {
                                    "line": 25,
                                    "code": "date: item.date,"
                                },
                                {
                                    "line": 26,
                                    "code": "price: item.close,"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "displays the company name and ticker above the chart",
                            "codeSegments": [
                                {
                                    "line": 37,
                                    "code": "<h3>"
                                },
                                {
                                    "line": 38,
                                    "code": "{company} ({ticker})"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "The chart includes axes",
                            "codeSegments": [
                                {
                                    "line": 45,
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatMonth} />"
                                },
                                {
                                    "line": 46,
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "tooltips",
                            "codeSegments": [
                                {
                                    "line": 47,
                                    "code": "<Tooltip />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "and a legend",
                            "codeSegments": [
                                {
                                    "line": 48,
                                    "code": "<Legend />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "for better readability",
                            "codeSegments": [
                                {
                                    "line": 47,
                                    "code": "<Tooltip />"
                                },
                                {
                                    "line": 48,
                                    "code": "<Legend />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "the month abbreviation for the X-axis is now formatted using the default locale rather than hardcoding 'en'",
                            "codeSegments": [
                                {
                                    "line": 30,
                                    "code": "const formatMonth = (dateString) => {"
                                },
                                {
                                    "line": 32,
                                    "code": "return date.toLocaleString(\"en\", { month: \"short\" });"
                                }
                            ]
                        }
                    ],
                    "high_structured": [
                        {
                            "summaryComponent": "Implements a StockChart React component to display stock price trends",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Validates input data and extracts company name and ticker",
                            "codeSegments": [
                                {
                                    "line": 14,
                                    "code": "if (!data || !data.data || !data.data.length) return null;"
                                },
                                {
                                    "line": 16,
                                    "code": "const company = data.name;"
                                },
                                {
                                    "line": 17,
                                    "code": "const ticker = data.ticker;"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Processes raw stock data:",
                            "codeSegments": [
                                {
                                    "line": 23,
                                    "code": "// Combine labels and values into an array of objects for Recharts"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Maps each data point to an object with date and closing price",
                            "codeSegments": [
                                {
                                    "line": 24,
                                    "code": "const chartData = data.data.map((item) => ({"
                                },
                                {
                                    "line": 25,
                                    "code": "date: item.date,"
                                },
                                {
                                    "line": 26,
                                    "code": "price: item.close,"
                                },
                                {
                                    "line": 27,
                                    "code": "}));"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Formats date strings for display, including month abbreviation for X-axis",
                            "codeSegments": [
                                {
                                    "line": 19,
                                    "code": "const formatDateString = (date) => {"
                                },
                                {
                                    "line": 20,
                                    "code": "return date.split(\"T\")[0];"
                                },
                                {
                                    "line": 30,
                                    "code": "const formatMonth = (dateString) => {"
                                },
                                {
                                    "line": 32,
                                    "code": "return date.toLocaleString(\"en\", { month: \"short\" });"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "The month abbreviation is now formatted using the default locale, not 'en'",
                            "codeSegments": [
                                {
                                    "line": 32,
                                    "code": "return date.toLocaleString(\"en\", { month: \"short\" });"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Utilizes Recharts components:",
                            "codeSegments": [
                                {
                                    "line": 2,
                                    "code": "import {"
                                },
                                {
                                    "line": 3,
                                    "code": "LineChart,"
                                },
                                {
                                    "line": 4,
                                    "code": "Line,"
                                },
                                {
                                    "line": 5,
                                    "code": "XAxis,"
                                },
                                {
                                    "line": 6,
                                    "code": "YAxis,"
                                },
                                {
                                    "line": 7,
                                    "code": "Tooltip,"
                                },
                                {
                                    "line": 8,
                                    "code": "Legend,"
                                },
                                {
                                    "line": 9,
                                    "code": "ResponsiveContainer,"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "ResponsiveContainer for adaptive sizing",
                            "codeSegments": [
                                {
                                    "line": 40,
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "LineChart with custom margins",
                            "codeSegments": [
                                {
                                    "line": 41,
                                    "code": "<LineChart"
                                },
                                {
                                    "line": 43,
                                    "code": "margin={{ top: 10, right: 30, left: 0, bottom: 0 }}"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "XAxis and YAxis, with X-axis using formatted month labels",
                            "codeSegments": [
                                {
                                    "line": 45,
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatMonth} />"
                                },
                                {
                                    "line": 46,
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Tooltip and Legend for interactivity and clarity",
                            "codeSegments": [
                                {
                                    "line": 47,
                                    "code": "<Tooltip />"
                                },
                                {
                                    "line": 48,
                                    "code": "<Legend />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Line component to plot closing prices as a smooth curve without dots",
                            "codeSegments": [
                                {
                                    "line": 49,
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Renders the chart inside a styled div, displaying the company name and ticker above the chart",
                            "codeSegments": [
                                {
                                    "line": 36,
                                    "code": "<div style={{ marginTop: \"2rem\" }}>"
                                },
                                {
                                    "line": 37,
                                    "code": "<h3>"
                                },
                                {
                                    "line": 38,
                                    "code": "{company} ({ticker})"
                                }
                            ]
                        }
                    ],
                    "medium_structured": [
                        {
                            "summaryComponent": "Defines a StockChart React component for visualizing stock data",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                },
                                {
                                    "line": 56,
                                    "code": "export default StockChart;"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Formats and maps incoming data for use with Recharts",
                            "codeSegments": [
                                {
                                    "line": 24,
                                    "code": "const chartData = data.data.map((item) => ({"
                                },
                                {
                                    "line": 25,
                                    "code": "date: item.date,"
                                },
                                {
                                    "line": 26,
                                    "code": "price: item.close,"
                                },
                                {
                                    "line": 27,
                                    "code": "}));"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Renders a responsive line chart with axes, tooltip, and legend",
                            "codeSegments": [
                                {
                                    "line": 40,
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                                },
                                {
                                    "line": 41,
                                    "code": "<LineChart"
                                },
                                {
                                    "line": 45,
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatMonth} />"
                                },
                                {
                                    "line": 46,
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                                },
                                {
                                    "line": 47,
                                    "code": "<Tooltip />"
                                },
                                {
                                    "line": 48,
                                    "code": "<Legend />"
                                },
                                {
                                    "line": 49,
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Displays the company name and ticker above the chart",
                            "codeSegments": [
                                {
                                    "line": 37,
                                    "code": "<h3>"
                                },
                                {
                                    "line": 38,
                                    "code": "{company} ({ticker})"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "The month abbreviation for the X-axis is now formatted using the default locale instead of 'en'",
                            "codeSegments": [
                                {
                                    "line": 30,
                                    "code": "const formatMonth = (dateString) => {"
                                },
                                {
                                    "line": 32,
                                    "code": "return date.toLocaleString(\"en\", { month: \"short\" });"
                                },
                                {
                                    "line": 45,
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatMonth} />"
                                }
                            ]
                        }
                    ],
                    "high_unstructured": [
                        {
                            "summaryComponent": "defines a StockChart React component",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "renders a responsive line chart of stock closing prices",
                            "codeSegments": [
                                {
                                    "line": 40,
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                                },
                                {
                                    "line": 41,
                                    "code": "<LineChart"
                                },
                                {
                                    "line": 49,
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "using the Recharts library",
                            "codeSegments": [
                                {
                                    "line": 2,
                                    "code": "import {"
                                },
                                {
                                    "line": 11,
                                    "code": "} from \"recharts\";"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "checks for valid data",
                            "codeSegments": [
                                {
                                    "line": 14,
                                    "code": "if (!data || !data.data || !data.data.length) return null;"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "extracts the company name and ticker",
                            "codeSegments": [
                                {
                                    "line": 16,
                                    "code": "const company = data.name;"
                                },
                                {
                                    "line": 17,
                                    "code": "const ticker = data.ticker;"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "processes the data into a format suitable for charting",
                            "codeSegments": [
                                {
                                    "line": 24,
                                    "code": "const chartData = data.data.map((item) => ({"
                                },
                                {
                                    "line": 25,
                                    "code": "date: item.date,"
                                },
                                {
                                    "line": 26,
                                    "code": "price: item.close,"
                                },
                                {
                                    "line": 27,
                                    "code": "}));"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "formats date labels to show months",
                            "codeSegments": [
                                {
                                    "line": 30,
                                    "code": "const formatMonth = (dateString) => {"
                                },
                                {
                                    "line": 45,
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatMonth} />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "displays the chart with axes, tooltips, a legend, and a monotone line representing price",
                            "codeSegments": [
                                {
                                    "line": 45,
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatMonth} />"
                                },
                                {
                                    "line": 46,
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                                },
                                {
                                    "line": 47,
                                    "code": "<Tooltip />"
                                },
                                {
                                    "line": 48,
                                    "code": "<Legend />"
                                },
                                {
                                    "line": 49,
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "wrapped in a styled container",
                            "codeSegments": [
                                {
                                    "line": 36,
                                    "code": "<div style={{ marginTop: \"2rem\" }}>"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "includes a heading with the company name and ticker symbol",
                            "codeSegments": [
                                {
                                    "line": 37,
                                    "code": "<h3>"
                                },
                                {
                                    "line": 38,
                                    "code": "{company} ({ticker})"
                                }
                            ]
                        }
                    ]
                },
                "editPromptValue": "",
                "selectedDetailLevel": "medium",
                "oldSummaryData": {
                    "low_unstructured": "This code defines a React component that displays a stock price line chart using the Recharts library. There are no changes between the original and modified code.",
                    "low_structured": "• React component for stock price chart\n• Uses Recharts for visualization\n• Displays company name and ticker\n• No changes from the original code",
                    "medium_unstructured": "The code implements a StockChart React component that visualizes stock price data as a line chart using the Recharts library. It formats the input data and displays the company name and ticker above the chart. The chart includes axes, tooltips, and a legend for better readability. There are no modifications from the original version.",
                    "high_structured": "• Implements a StockChart React component to display stock price trends\n• Validates input data and extracts company name and ticker\n• Processes raw stock data:\n  ◦ Maps each data point to an object with date and closing price\n  ◦ Formats date strings for display, including month abbreviation for X-axis\n• Utilizes Recharts components:\n  ◦ ResponsiveContainer for adaptive sizing\n  ◦ LineChart with custom margins\n  ◦ XAxis and YAxis, with X-axis using formatted month labels\n  ◦ Tooltip and Legend for interactivity and clarity\n  ◦ Line component to plot closing prices as a smooth curve without dots\n• Renders the chart inside a styled div, displaying the company name and ticker above the chart\n• No changes from the original code",
                    "medium_structured": "• Defines a StockChart React component for visualizing stock data\n• Formats and maps incoming data for use with Recharts\n• Renders a responsive line chart with axes, tooltip, and legend\n• Displays the company name and ticker above the chart\n• No changes compared to the original code",
                    "title": "StockChart React Component for Rendering Stock Price Line Charts (No Code Changes)",
                    "high_unstructured": "This code defines a StockChart React component that renders a responsive line chart of stock closing prices using the Recharts library. It first checks for valid data, extracts the company name and ticker, and processes the data into a format suitable for charting. The component formats date labels to show months, and displays the chart with axes, tooltips, a legend, and a monotone line representing price. The chart is wrapped in a styled container and includes a heading with the company name and ticker symbol. There are no differences between the original and modified code."
                },
                "title": "StockChart React Component with Locale Update for Month Formatting"
            }
        },
        "event": "create_new_section",
        "id": "OCLeIFRZ9sgocyxDa5ut"
    },
    {
        "timestamp": "2025-08-23 20:27:17.000",
        "source": "frontend",
        "data": {
            "before_section_id": "b83368c6-dcc1-4236-8486-8627d8eadd38",
            "after_section_id": "5213b114-b68c-49f0-80a2-dc97bfae14d1"
        },
        "event": "autotransit_section",
        "id": "uDFRAjEfA1FAZVLSFOSw"
    },
    {
        "timestamp": "2025-08-23 20:28:43.000",
        "source": "backend",
        "data": {
            "summary": {
                "low_unstructured": "This code sets up an Express server with CORS and JSON support, offering endpoints for a hello message and stock data retrieval.",
                "low_structured": "• Sets up an Express server with CORS and JSON parsing\n• Provides endpoints for a hello message and stock data",
                "medium_unstructured": "The code initializes an Express server running on port 3000, enabling CORS and JSON parsing. It defines two endpoints: one returns a simple hello message, and the other fetches stock data for a given symbol using the yahoo-finance2 library. The stock endpoint returns the ticker, company name, and a list of daily closing prices and volumes since 2024-01-01.",
                "high_structured": "• Sets up an Express server listening on port 3000\n• Middleware configuration:\n  ◦ Enables CORS for cross-origin requests\n  ◦ Parses incoming JSON requests\n• Defines two main endpoints:\n  ◦ /api/hello\n    ▪ Responds with a JSON hello message\n  ◦ /api/stock/:symbol\n    ▪ Extracts and uppercases the stock symbol from the URL\n    ▪ Fetches daily stock chart data from Yahoo Finance starting 2024-01-01\n    ▪ Extracts company name (if available) and maps quotes to include date, close, and volume\n    ▪ Returns a structured JSON object with ticker, name, and data array\n    ▪ Handles errors by logging and returning a 500 error\n• Logs server startup and stock responses to the console",
                "medium_structured": "• Initializes an Express server on port 3000\n• Enables CORS and JSON body parsing\n• Defines endpoints:\n  ◦ /api/hello returns a hello message\n  ◦ /api/stock/:symbol fetches and returns daily stock data (date, close, volume) and company name for the given symbol since 2024-01-01",
                "title": "Express Server Providing Stock Data and a Hello Endpoint",
                "high_unstructured": "This code creates an Express server that listens on port 3000 and uses CORS and JSON middleware. It exposes two endpoints: '/api/hello', which responds with a simple JSON greeting, and '/api/stock/:symbol', which retrieves daily stock data for a specified symbol from Yahoo Finance starting from January 1, 2024. The stock endpoint processes the symbol, fetches chart data, extracts the company name and relevant quote information (date, close, volume), and returns a structured JSON response. Errors during data retrieval are logged and result in a 500 error response."
            },
            "selected_code": "const express = require(\"express\");\nconst cors = require(\"cors\");\nconst yahooFinance = require(\"yahoo-finance2\").default;\n\nconst app = express();\nconst PORT = 3000;\n\napp.use(cors());\napp.use(express.json());\n\napp.get(\"/api/hello\", (req, res) => {\n  res.json({ message: \"Hello from the backend!\" });\n});\n\napp.get(\"/api/stock/:symbol\", async (req, res) => {\n  try {\n    const symbol = req.params.symbol.toUpperCase();\n    const data = await yahooFinance.chart(symbol, {\n      period1: \"2024-01-01\",\n      interval: \"1d\",\n    });\n    const quotes = data.quotes;\n\n    const companyName = data.meta?.shortName || symbol;\n\n    const response = {\n      ticker: symbol,\n      name: companyName,\n      data: quotes.map((q) => ({\n        date: q.date,\n        close: q.close,\n        volume: q.volume,\n      })),\n    };\n\n    console.log(response);\n    res.json(response);\n  } catch (err) {\n    console.error(err);\n    res.status(500).send(\"Error fetching stock data\");\n  }\n});\n\napp.listen(PORT, \"0.0.0.0\", () => {\n  console.log(`Server running on http://localhost:${PORT}`);\n});\n"
        },
        "event": "summarize_selected_code",
        "id": "XUeqJksncWs6Qf1DOng0"
    },
    {
        "timestamp": "2025-08-23 20:28:44.000",
        "source": "frontend",
        "data": {
            "mapping_index": 0,
            "section_id": "5213b114-b68c-49f0-80a2-dc97bfae14d1",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "C8EB20OuN89v3lu6AUXE"
    },
    {
        "timestamp": "2025-08-23 20:28:44.000",
        "source": "frontend",
        "data": {
            "section_id": "5213b114-b68c-49f0-80a2-dc97bfae14d1",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "yWhZLQNo1paBPL5tw6Eb"
    },
    {
        "timestamp": "2025-08-23 20:28:45.000",
        "source": "backend",
        "data": {
            "summary": "This code sets up an Express server with CORS and JSON support, offering endpoints for a hello message and stock data retrieval.",
            "mapping": [
                {
                    "summaryComponent": "sets up an Express server",
                    "codeSegments": [
                        {
                            "line": 1,
                            "code": "const express = require(\"express\");"
                        },
                        {
                            "line": 5,
                            "code": "const app = express();"
                        },
                        {
                            "line": 44,
                            "code": "app.listen(PORT, \"0.0.0.0\", () => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "with CORS",
                    "codeSegments": [
                        {
                            "line": 2,
                            "code": "const cors = require(\"cors\");"
                        },
                        {
                            "line": 8,
                            "code": "app.use(cors());"
                        }
                    ]
                },
                {
                    "summaryComponent": "and JSON support",
                    "codeSegments": [
                        {
                            "line": 9,
                            "code": "app.use(express.json());"
                        }
                    ]
                },
                {
                    "summaryComponent": "offering endpoints",
                    "codeSegments": [
                        {
                            "line": 11,
                            "code": "app.get(\"/api/hello\", (req, res) => {"
                        },
                        {
                            "line": 15,
                            "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "for a hello message",
                    "codeSegments": [
                        {
                            "line": 11,
                            "code": "app.get(\"/api/hello\", (req, res) => {"
                        },
                        {
                            "line": 12,
                            "code": "res.json({ message: \"Hello from the backend!\" });"
                        }
                    ]
                },
                {
                    "summaryComponent": "and stock data retrieval",
                    "codeSegments": [
                        {
                            "line": 15,
                            "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                        },
                        {
                            "line": 18,
                            "code": "const data = await yahooFinance.chart(symbol, {"
                        },
                        {
                            "line": 37,
                            "code": "res.json(response);"
                        }
                    ]
                }
            ],
            "code": "1: const express = require(\"express\");\n2: const cors = require(\"cors\");\n3: const yahooFinance = require(\"yahoo-finance2\").default;\n4: \n5: const app = express();\n6: const PORT = 3000;\n7: \n8: app.use(cors());\n9: app.use(express.json());\n10: \n11: app.get(\"/api/hello\", (req, res) => {\n12:   res.json({ message: \"Hello from the backend!\" });\n13: });\n14: \n15: app.get(\"/api/stock/:symbol\", async (req, res) => {\n16:   try {\n17:     const symbol = req.params.symbol.toUpperCase();\n18:     const data = await yahooFinance.chart(symbol, {\n19:       period1: \"2024-01-01\",\n20:       interval: \"1d\",\n21:     });\n22:     const quotes = data.quotes;\n23: \n24:     const companyName = data.meta?.shortName || symbol;\n25: \n26:     const response = {\n27:       ticker: symbol,\n28:       name: companyName,\n29:       data: quotes.map((q) => ({\n30:         date: q.date,\n31:         close: q.close,\n32:         volume: q.volume,\n33:       })),\n34:     };\n35: \n36:     console.log(response);\n37:     res.json(response);\n38:   } catch (err) {\n39:     console.error(err);\n40:     res.status(500).send(\"Error fetching stock data\");\n41:   }\n42: });\n43: \n44: app.listen(PORT, \"0.0.0.0\", () => {\n45:   console.log(`Server running on http://localhost:${PORT}`);\n46: });\n47: "
        },
        "event": "map_summary_code",
        "id": "5DLOZybI0eSIprO0lzgB"
    },
    {
        "timestamp": "2025-08-23 20:28:45.000",
        "source": "frontend",
        "data": {},
        "event": "click_summarize_code",
        "id": "LEk8O40kfqxsTM0763Es"
    },
    {
        "timestamp": "2025-08-23 20:28:46.000",
        "source": "backend",
        "data": {
            "summary": "• Initializes an Express server on port 3000\n• Enables CORS and JSON body parsing\n• Defines endpoints:\n  ◦ /api/hello returns a hello message\n  ◦ /api/stock/:symbol fetches and returns daily stock data (date, close, volume) and company name for the given symbol since 2024-01-01",
            "mapping": [
                {
                    "summaryComponent": "Initializes an Express server on port 3000",
                    "codeSegments": [
                        {
                            "line": 5,
                            "code": "const app = express();"
                        },
                        {
                            "line": 6,
                            "code": "const PORT = 3000;"
                        },
                        {
                            "line": 44,
                            "code": "app.listen(PORT, \"0.0.0.0\", () => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "Enables CORS and JSON body parsing",
                    "codeSegments": [
                        {
                            "line": 8,
                            "code": "app.use(cors());"
                        },
                        {
                            "line": 9,
                            "code": "app.use(express.json());"
                        }
                    ]
                },
                {
                    "summaryComponent": "Defines endpoints:",
                    "codeSegments": [
                        {
                            "line": 11,
                            "code": "app.get(\"/api/hello\", (req, res) => {"
                        },
                        {
                            "line": 15,
                            "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "/api/hello returns a hello message",
                    "codeSegments": [
                        {
                            "line": 11,
                            "code": "app.get(\"/api/hello\", (req, res) => {"
                        },
                        {
                            "line": 12,
                            "code": "res.json({ message: \"Hello from the backend!\" });"
                        }
                    ]
                },
                {
                    "summaryComponent": "/api/stock/:symbol fetches and returns daily stock data (date, close, volume) and company name for the given symbol since 2024-01-01",
                    "codeSegments": [
                        {
                            "line": 15,
                            "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                        },
                        {
                            "line": 17,
                            "code": "const symbol = req.params.symbol.toUpperCase();"
                        },
                        {
                            "line": 18,
                            "code": "const data = await yahooFinance.chart(symbol, {"
                        },
                        {
                            "line": 19,
                            "code": "period1: \"2024-01-01\","
                        },
                        {
                            "line": 20,
                            "code": "interval: \"1d\","
                        },
                        {
                            "line": 24,
                            "code": "const companyName = data.meta?.shortName || symbol;"
                        },
                        {
                            "line": 29,
                            "code": "data: quotes.map((q) => ({"
                        },
                        {
                            "line": 30,
                            "code": "date: q.date,"
                        },
                        {
                            "line": 31,
                            "code": "close: q.close,"
                        },
                        {
                            "line": 32,
                            "code": "volume: q.volume,"
                        }
                    ]
                }
            ],
            "code": "1: const express = require(\"express\");\n2: const cors = require(\"cors\");\n3: const yahooFinance = require(\"yahoo-finance2\").default;\n4: \n5: const app = express();\n6: const PORT = 3000;\n7: \n8: app.use(cors());\n9: app.use(express.json());\n10: \n11: app.get(\"/api/hello\", (req, res) => {\n12:   res.json({ message: \"Hello from the backend!\" });\n13: });\n14: \n15: app.get(\"/api/stock/:symbol\", async (req, res) => {\n16:   try {\n17:     const symbol = req.params.symbol.toUpperCase();\n18:     const data = await yahooFinance.chart(symbol, {\n19:       period1: \"2024-01-01\",\n20:       interval: \"1d\",\n21:     });\n22:     const quotes = data.quotes;\n23: \n24:     const companyName = data.meta?.shortName || symbol;\n25: \n26:     const response = {\n27:       ticker: symbol,\n28:       name: companyName,\n29:       data: quotes.map((q) => ({\n30:         date: q.date,\n31:         close: q.close,\n32:         volume: q.volume,\n33:       })),\n34:     };\n35: \n36:     console.log(response);\n37:     res.json(response);\n38:   } catch (err) {\n39:     console.error(err);\n40:     res.status(500).send(\"Error fetching stock data\");\n41:   }\n42: });\n43: \n44: app.listen(PORT, \"0.0.0.0\", () => {\n45:   console.log(`Server running on http://localhost:${PORT}`);\n46: });\n47: "
        },
        "event": "map_summary_code",
        "id": "R2osFpd45p6k0ogGRUqr"
    },
    {
        "timestamp": "2025-08-23 20:28:46.000",
        "source": "backend",
        "data": {
            "summary": "• Sets up an Express server with CORS and JSON parsing\n• Provides endpoints for a hello message and stock data",
            "mapping": [
                {
                    "summaryComponent": "Sets up an Express server",
                    "codeSegments": [
                        {
                            "line": 1,
                            "code": "const express = require(\"express\");"
                        },
                        {
                            "line": 5,
                            "code": "const app = express();"
                        },
                        {
                            "line": 44,
                            "code": "app.listen(PORT, \"0.0.0.0\", () => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "with CORS",
                    "codeSegments": [
                        {
                            "line": 2,
                            "code": "const cors = require(\"cors\");"
                        },
                        {
                            "line": 8,
                            "code": "app.use(cors());"
                        }
                    ]
                },
                {
                    "summaryComponent": "and JSON parsing",
                    "codeSegments": [
                        {
                            "line": 9,
                            "code": "app.use(express.json());"
                        }
                    ]
                },
                {
                    "summaryComponent": "Provides endpoints",
                    "codeSegments": [
                        {
                            "line": 11,
                            "code": "app.get(\"/api/hello\", (req, res) => {"
                        },
                        {
                            "line": 15,
                            "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "for a hello message",
                    "codeSegments": [
                        {
                            "line": 11,
                            "code": "app.get(\"/api/hello\", (req, res) => {"
                        },
                        {
                            "line": 12,
                            "code": "res.json({ message: \"Hello from the backend!\" });"
                        }
                    ]
                },
                {
                    "summaryComponent": "and stock data",
                    "codeSegments": [
                        {
                            "line": 15,
                            "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                        },
                        {
                            "line": 18,
                            "code": "const data = await yahooFinance.chart(symbol, {"
                        }
                    ]
                }
            ],
            "code": "1: const express = require(\"express\");\n2: const cors = require(\"cors\");\n3: const yahooFinance = require(\"yahoo-finance2\").default;\n4: \n5: const app = express();\n6: const PORT = 3000;\n7: \n8: app.use(cors());\n9: app.use(express.json());\n10: \n11: app.get(\"/api/hello\", (req, res) => {\n12:   res.json({ message: \"Hello from the backend!\" });\n13: });\n14: \n15: app.get(\"/api/stock/:symbol\", async (req, res) => {\n16:   try {\n17:     const symbol = req.params.symbol.toUpperCase();\n18:     const data = await yahooFinance.chart(symbol, {\n19:       period1: \"2024-01-01\",\n20:       interval: \"1d\",\n21:     });\n22:     const quotes = data.quotes;\n23: \n24:     const companyName = data.meta?.shortName || symbol;\n25: \n26:     const response = {\n27:       ticker: symbol,\n28:       name: companyName,\n29:       data: quotes.map((q) => ({\n30:         date: q.date,\n31:         close: q.close,\n32:         volume: q.volume,\n33:       })),\n34:     };\n35: \n36:     console.log(response);\n37:     res.json(response);\n38:   } catch (err) {\n39:     console.error(err);\n40:     res.status(500).send(\"Error fetching stock data\");\n41:   }\n42: });\n43: \n44: app.listen(PORT, \"0.0.0.0\", () => {\n45:   console.log(`Server running on http://localhost:${PORT}`);\n46: });\n47: "
        },
        "event": "map_summary_code",
        "id": "yOu2nYxBgYtnURMrFcue"
    },
    {
        "timestamp": "2025-08-23 20:28:47.000",
        "source": "backend",
        "data": {
            "summary": "The code initializes an Express server running on port 3000, enabling CORS and JSON parsing. It defines two endpoints: one returns a simple hello message, and the other fetches stock data for a given symbol using the yahoo-finance2 library. The stock endpoint returns the ticker, company name, and a list of daily closing prices and volumes since 2024-01-01.",
            "mapping": [
                {
                    "summaryComponent": "initializes an Express server running on port 3000",
                    "codeSegments": [
                        {
                            "line": 5,
                            "code": "const app = express();"
                        },
                        {
                            "line": 6,
                            "code": "const PORT = 3000;"
                        },
                        {
                            "line": 44,
                            "code": "app.listen(PORT, \"0.0.0.0\", () => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "enabling CORS",
                    "codeSegments": [
                        {
                            "line": 8,
                            "code": "app.use(cors());"
                        }
                    ]
                },
                {
                    "summaryComponent": "JSON parsing",
                    "codeSegments": [
                        {
                            "line": 9,
                            "code": "app.use(express.json());"
                        }
                    ]
                },
                {
                    "summaryComponent": "defines two endpoints",
                    "codeSegments": [
                        {
                            "line": 11,
                            "code": "app.get(\"/api/hello\", (req, res) => {"
                        },
                        {
                            "line": 15,
                            "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "one returns a simple hello message",
                    "codeSegments": [
                        {
                            "line": 12,
                            "code": "res.json({ message: \"Hello from the backend!\" });"
                        }
                    ]
                },
                {
                    "summaryComponent": "the other fetches stock data for a given symbol using the yahoo-finance2 library",
                    "codeSegments": [
                        {
                            "line": 18,
                            "code": "const data = await yahooFinance.chart(symbol, {"
                        }
                    ]
                },
                {
                    "summaryComponent": "The stock endpoint returns the ticker",
                    "codeSegments": [
                        {
                            "line": 27,
                            "code": "ticker: symbol,"
                        }
                    ]
                },
                {
                    "summaryComponent": "company name",
                    "codeSegments": [
                        {
                            "line": 28,
                            "code": "name: companyName,"
                        }
                    ]
                },
                {
                    "summaryComponent": "a list of daily closing prices and volumes since 2024-01-01",
                    "codeSegments": [
                        {
                            "line": 29,
                            "code": "data: quotes.map((q) => ({"
                        },
                        {
                            "line": 30,
                            "code": "date: q.date,"
                        },
                        {
                            "line": 31,
                            "code": "close: q.close,"
                        },
                        {
                            "line": 32,
                            "code": "volume: q.volume,"
                        },
                        {
                            "line": 19,
                            "code": "period1: \"2024-01-01\","
                        },
                        {
                            "line": 20,
                            "code": "interval: \"1d\","
                        }
                    ]
                }
            ],
            "code": "1: const express = require(\"express\");\n2: const cors = require(\"cors\");\n3: const yahooFinance = require(\"yahoo-finance2\").default;\n4: \n5: const app = express();\n6: const PORT = 3000;\n7: \n8: app.use(cors());\n9: app.use(express.json());\n10: \n11: app.get(\"/api/hello\", (req, res) => {\n12:   res.json({ message: \"Hello from the backend!\" });\n13: });\n14: \n15: app.get(\"/api/stock/:symbol\", async (req, res) => {\n16:   try {\n17:     const symbol = req.params.symbol.toUpperCase();\n18:     const data = await yahooFinance.chart(symbol, {\n19:       period1: \"2024-01-01\",\n20:       interval: \"1d\",\n21:     });\n22:     const quotes = data.quotes;\n23: \n24:     const companyName = data.meta?.shortName || symbol;\n25: \n26:     const response = {\n27:       ticker: symbol,\n28:       name: companyName,\n29:       data: quotes.map((q) => ({\n30:         date: q.date,\n31:         close: q.close,\n32:         volume: q.volume,\n33:       })),\n34:     };\n35: \n36:     console.log(response);\n37:     res.json(response);\n38:   } catch (err) {\n39:     console.error(err);\n40:     res.status(500).send(\"Error fetching stock data\");\n41:   }\n42: });\n43: \n44: app.listen(PORT, \"0.0.0.0\", () => {\n45:   console.log(`Server running on http://localhost:${PORT}`);\n46: });\n47: "
        },
        "event": "map_summary_code",
        "id": "2dDD5EeYGtVnJQ5b8rQn"
    },
    {
        "timestamp": "2025-08-23 20:28:47.000",
        "source": "backend",
        "data": {
            "summary": "This code creates an Express server that listens on port 3000 and uses CORS and JSON middleware. It exposes two endpoints: '/api/hello', which responds with a simple JSON greeting, and '/api/stock/:symbol', which retrieves daily stock data for a specified symbol from Yahoo Finance starting from January 1, 2024. The stock endpoint processes the symbol, fetches chart data, extracts the company name and relevant quote information (date, close, volume), and returns a structured JSON response. Errors during data retrieval are logged and result in a 500 error response.",
            "mapping": [
                {
                    "summaryComponent": "creates an Express server",
                    "codeSegments": [
                        {
                            "line": 1,
                            "code": "const express = require(\"express\");"
                        },
                        {
                            "line": 5,
                            "code": "const app = express();"
                        }
                    ]
                },
                {
                    "summaryComponent": "listens on port 3000",
                    "codeSegments": [
                        {
                            "line": 6,
                            "code": "const PORT = 3000;"
                        },
                        {
                            "line": 44,
                            "code": "app.listen(PORT, \"0.0.0.0\", () => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "uses CORS and JSON middleware",
                    "codeSegments": [
                        {
                            "line": 8,
                            "code": "app.use(cors());"
                        },
                        {
                            "line": 9,
                            "code": "app.use(express.json());"
                        }
                    ]
                },
                {
                    "summaryComponent": "exposes two endpoints: '/api/hello', which responds with a simple JSON greeting",
                    "codeSegments": [
                        {
                            "line": 11,
                            "code": "app.get(\"/api/hello\", (req, res) => {"
                        },
                        {
                            "line": 12,
                            "code": "res.json({ message: \"Hello from the backend!\" });"
                        }
                    ]
                },
                {
                    "summaryComponent": "'/api/stock/:symbol', which retrieves daily stock data for a specified symbol from Yahoo Finance starting from January 1, 2024",
                    "codeSegments": [
                        {
                            "line": 15,
                            "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                        },
                        {
                            "line": 17,
                            "code": "const symbol = req.params.symbol.toUpperCase();"
                        },
                        {
                            "line": 18,
                            "code": "const data = await yahooFinance.chart(symbol, {"
                        },
                        {
                            "line": 19,
                            "code": "period1: \"2024-01-01\","
                        },
                        {
                            "line": 20,
                            "code": "interval: \"1d\","
                        }
                    ]
                },
                {
                    "summaryComponent": "The stock endpoint processes the symbol",
                    "codeSegments": [
                        {
                            "line": 17,
                            "code": "const symbol = req.params.symbol.toUpperCase();"
                        }
                    ]
                },
                {
                    "summaryComponent": "fetches chart data",
                    "codeSegments": [
                        {
                            "line": 18,
                            "code": "const data = await yahooFinance.chart(symbol, {"
                        }
                    ]
                },
                {
                    "summaryComponent": "extracts the company name and relevant quote information (date, close, volume)",
                    "codeSegments": [
                        {
                            "line": 24,
                            "code": "const companyName = data.meta?.shortName || symbol;"
                        },
                        {
                            "line": 26,
                            "code": "const response = {"
                        },
                        {
                            "line": 28,
                            "code": "name: companyName,"
                        },
                        {
                            "line": 29,
                            "code": "data: quotes.map((q) => ({"
                        },
                        {
                            "line": 30,
                            "code": "date: q.date,"
                        },
                        {
                            "line": 31,
                            "code": "close: q.close,"
                        },
                        {
                            "line": 32,
                            "code": "volume: q.volume,"
                        }
                    ]
                },
                {
                    "summaryComponent": "returns a structured JSON response",
                    "codeSegments": [
                        {
                            "line": 37,
                            "code": "res.json(response);"
                        }
                    ]
                },
                {
                    "summaryComponent": "Errors during data retrieval are logged and result in a 500 error response",
                    "codeSegments": [
                        {
                            "line": 39,
                            "code": "console.error(err);"
                        },
                        {
                            "line": 40,
                            "code": "res.status(500).send(\"Error fetching stock data\");"
                        }
                    ]
                }
            ],
            "code": "1: const express = require(\"express\");\n2: const cors = require(\"cors\");\n3: const yahooFinance = require(\"yahoo-finance2\").default;\n4: \n5: const app = express();\n6: const PORT = 3000;\n7: \n8: app.use(cors());\n9: app.use(express.json());\n10: \n11: app.get(\"/api/hello\", (req, res) => {\n12:   res.json({ message: \"Hello from the backend!\" });\n13: });\n14: \n15: app.get(\"/api/stock/:symbol\", async (req, res) => {\n16:   try {\n17:     const symbol = req.params.symbol.toUpperCase();\n18:     const data = await yahooFinance.chart(symbol, {\n19:       period1: \"2024-01-01\",\n20:       interval: \"1d\",\n21:     });\n22:     const quotes = data.quotes;\n23: \n24:     const companyName = data.meta?.shortName || symbol;\n25: \n26:     const response = {\n27:       ticker: symbol,\n28:       name: companyName,\n29:       data: quotes.map((q) => ({\n30:         date: q.date,\n31:         close: q.close,\n32:         volume: q.volume,\n33:       })),\n34:     };\n35: \n36:     console.log(response);\n37:     res.json(response);\n38:   } catch (err) {\n39:     console.error(err);\n40:     res.status(500).send(\"Error fetching stock data\");\n41:   }\n42: });\n43: \n44: app.listen(PORT, \"0.0.0.0\", () => {\n45:   console.log(`Server running on http://localhost:${PORT}`);\n46: });\n47: "
        },
        "event": "map_summary_code",
        "id": "ofrgnqIOY9jbpGfN6ce9"
    },
    {
        "timestamp": "2025-08-23 20:28:48.000",
        "source": "backend",
        "data": {
            "summary": "• Sets up an Express server listening on port 3000\n• Middleware configuration:\n  ◦ Enables CORS for cross-origin requests\n  ◦ Parses incoming JSON requests\n• Defines two main endpoints:\n  ◦ /api/hello\n    ▪ Responds with a JSON hello message\n  ◦ /api/stock/:symbol\n    ▪ Extracts and uppercases the stock symbol from the URL\n    ▪ Fetches daily stock chart data from Yahoo Finance starting 2024-01-01\n    ▪ Extracts company name (if available) and maps quotes to include date, close, and volume\n    ▪ Returns a structured JSON object with ticker, name, and data array\n    ▪ Handles errors by logging and returning a 500 error\n• Logs server startup and stock responses to the console",
            "mapping": [
                {
                    "summaryComponent": "Sets up an Express server listening on port 3000",
                    "codeSegments": [
                        {
                            "line": 5,
                            "code": "const app = express();"
                        },
                        {
                            "line": 6,
                            "code": "const PORT = 3000;"
                        },
                        {
                            "line": 44,
                            "code": "app.listen(PORT, \"0.0.0.0\", () => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "Enables CORS for cross-origin requests",
                    "codeSegments": [
                        {
                            "line": 8,
                            "code": "app.use(cors());"
                        }
                    ]
                },
                {
                    "summaryComponent": "Parses incoming JSON requests",
                    "codeSegments": [
                        {
                            "line": 9,
                            "code": "app.use(express.json());"
                        }
                    ]
                },
                {
                    "summaryComponent": "/api/hello",
                    "codeSegments": [
                        {
                            "line": 11,
                            "code": "app.get(\"/api/hello\", (req, res) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "Responds with a JSON hello message",
                    "codeSegments": [
                        {
                            "line": 12,
                            "code": "res.json({ message: \"Hello from the backend!\" });"
                        }
                    ]
                },
                {
                    "summaryComponent": "/api/stock/:symbol",
                    "codeSegments": [
                        {
                            "line": 15,
                            "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "Extracts and uppercases the stock symbol from the URL",
                    "codeSegments": [
                        {
                            "line": 17,
                            "code": "const symbol = req.params.symbol.toUpperCase();"
                        }
                    ]
                },
                {
                    "summaryComponent": "Fetches daily stock chart data from Yahoo Finance starting 2024-01-01",
                    "codeSegments": [
                        {
                            "line": 18,
                            "code": "const data = await yahooFinance.chart(symbol, {"
                        },
                        {
                            "line": 19,
                            "code": "period1: \"2024-01-01\","
                        },
                        {
                            "line": 20,
                            "code": "interval: \"1d\","
                        }
                    ]
                },
                {
                    "summaryComponent": "Extracts company name (if available) and maps quotes to include date, close, and volume",
                    "codeSegments": [
                        {
                            "line": 24,
                            "code": "const companyName = data.meta?.shortName || symbol;"
                        },
                        {
                            "line": 29,
                            "code": "data: quotes.map((q) => ({"
                        },
                        {
                            "line": 30,
                            "code": "date: q.date,"
                        },
                        {
                            "line": 31,
                            "code": "close: q.close,"
                        },
                        {
                            "line": 32,
                            "code": "volume: q.volume,"
                        }
                    ]
                },
                {
                    "summaryComponent": "Returns a structured JSON object with ticker, name, and data array",
                    "codeSegments": [
                        {
                            "line": 26,
                            "code": "const response = {"
                        },
                        {
                            "line": 37,
                            "code": "res.json(response);"
                        }
                    ]
                },
                {
                    "summaryComponent": "Handles errors by logging and returning a 500 error",
                    "codeSegments": [
                        {
                            "line": 39,
                            "code": "console.error(err);"
                        },
                        {
                            "line": 40,
                            "code": "res.status(500).send(\"Error fetching stock data\");"
                        }
                    ]
                },
                {
                    "summaryComponent": "Logs server startup and stock responses to the console",
                    "codeSegments": [
                        {
                            "line": 36,
                            "code": "console.log(response);"
                        },
                        {
                            "line": 45,
                            "code": "console.log(`Server running on http://localhost:${PORT}`);"
                        }
                    ]
                }
            ],
            "code": "1: const express = require(\"express\");\n2: const cors = require(\"cors\");\n3: const yahooFinance = require(\"yahoo-finance2\").default;\n4: \n5: const app = express();\n6: const PORT = 3000;\n7: \n8: app.use(cors());\n9: app.use(express.json());\n10: \n11: app.get(\"/api/hello\", (req, res) => {\n12:   res.json({ message: \"Hello from the backend!\" });\n13: });\n14: \n15: app.get(\"/api/stock/:symbol\", async (req, res) => {\n16:   try {\n17:     const symbol = req.params.symbol.toUpperCase();\n18:     const data = await yahooFinance.chart(symbol, {\n19:       period1: \"2024-01-01\",\n20:       interval: \"1d\",\n21:     });\n22:     const quotes = data.quotes;\n23: \n24:     const companyName = data.meta?.shortName || symbol;\n25: \n26:     const response = {\n27:       ticker: symbol,\n28:       name: companyName,\n29:       data: quotes.map((q) => ({\n30:         date: q.date,\n31:         close: q.close,\n32:         volume: q.volume,\n33:       })),\n34:     };\n35: \n36:     console.log(response);\n37:     res.json(response);\n38:   } catch (err) {\n39:     console.error(err);\n40:     res.status(500).send(\"Error fetching stock data\");\n41:   }\n42: });\n43: \n44: app.listen(PORT, \"0.0.0.0\", () => {\n45:   console.log(`Server running on http://localhost:${PORT}`);\n46: });\n47: "
        },
        "event": "map_summary_code",
        "id": "nqnDaKsEig7fVpVBD0BN"
    },
    {
        "timestamp": "2025-08-23 20:28:52.000",
        "source": "frontend",
        "data": {
            "mapping_index": 2,
            "section_id": "5213b114-b68c-49f0-80a2-dc97bfae14d1",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "5JhxeC4jDRzTKToB1bPu"
    },
    {
        "timestamp": "2025-08-23 20:28:52.000",
        "source": "frontend",
        "data": {
            "section_id": "5213b114-b68c-49f0-80a2-dc97bfae14d1",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "72sWFim3pvV8wS4X3KlJ"
    },
    {
        "timestamp": "2025-08-23 20:28:52.000",
        "source": "frontend",
        "data": {
            "section_id": "5213b114-b68c-49f0-80a2-dc97bfae14d1",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "BtZuXpLz7PeUD8jPShlH"
    },
    {
        "timestamp": "2025-08-23 20:28:52.000",
        "source": "frontend",
        "data": {
            "mapping_index": 8,
            "section_id": "5213b114-b68c-49f0-80a2-dc97bfae14d1",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "D3yqkjffxPnktvT4qIp9"
    },
    {
        "timestamp": "2025-08-23 20:28:52.000",
        "source": "frontend",
        "data": {
            "section_id": "5213b114-b68c-49f0-80a2-dc97bfae14d1",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "KDb5lTECgS7hISdCCZn6"
    },
    {
        "timestamp": "2025-08-23 20:28:52.000",
        "source": "frontend",
        "data": {
            "mapping_index": 9,
            "section_id": "5213b114-b68c-49f0-80a2-dc97bfae14d1",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "T9ZXPK3wOULM47QzFI1N"
    },
    {
        "timestamp": "2025-08-23 20:28:52.000",
        "source": "frontend",
        "data": {
            "section_id": "5213b114-b68c-49f0-80a2-dc97bfae14d1",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "UPAaYUGPcGWJTfTryshP"
    },
    {
        "timestamp": "2025-08-23 20:28:52.000",
        "source": "frontend",
        "data": {
            "mapping_index": 0,
            "section_id": "5213b114-b68c-49f0-80a2-dc97bfae14d1",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "bK4k4DuwAZpECJS6B54v"
    },
    {
        "timestamp": "2025-08-23 20:28:52.000",
        "source": "frontend",
        "data": {
            "mapping_index": 4,
            "section_id": "5213b114-b68c-49f0-80a2-dc97bfae14d1",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "bZRTIO8sA9DP9LMMbwvr"
    },
    {
        "timestamp": "2025-08-23 20:28:52.000",
        "source": "frontend",
        "data": {
            "mapping_index": 9,
            "section_id": "5213b114-b68c-49f0-80a2-dc97bfae14d1",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "qlQTHWtIzy8SfUXffpvy"
    },
    {
        "timestamp": "2025-08-23 20:28:52.000",
        "source": "frontend",
        "data": {
            "section_id": "5213b114-b68c-49f0-80a2-dc97bfae14d1",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "qpIW6wmEYr3bbF6MbBxX"
    },
    {
        "timestamp": "2025-08-23 20:28:52.000",
        "source": "frontend",
        "data": {
            "section_id": "5213b114-b68c-49f0-80a2-dc97bfae14d1",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "rBZNJ9os7DniYDHblIzF"
    },
    {
        "timestamp": "2025-08-23 20:28:53.000",
        "source": "frontend",
        "data": {
            "mapping_index": 1,
            "section_id": "5213b114-b68c-49f0-80a2-dc97bfae14d1",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "bLSMpzpxeSYm5eB4Xk1z"
    },
    {
        "timestamp": "2025-08-23 20:28:53.000",
        "source": "frontend",
        "data": {
            "section_id": "5213b114-b68c-49f0-80a2-dc97bfae14d1",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "mC5e08va7Gmt7sEQkyXj"
    },
    {
        "timestamp": "2025-08-23 20:28:56.000",
        "source": "frontend",
        "data": {
            "before_section_id": "5213b114-b68c-49f0-80a2-dc97bfae14d1",
            "after_section_id": "0b5f0ac0-2e17-46a7-9f52-d4be626ff421"
        },
        "event": "autotransit_section",
        "id": "CgDJUKXf5Bv9MYn8KzY0"
    },
    {
        "timestamp": "2025-08-23 20:28:56.000",
        "source": "frontend",
        "data": {
            "section_id": "5213b114-b68c-49f0-80a2-dc97bfae14d1",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "FfEHRyUkAp8u97D6dihE"
    },
    {
        "timestamp": "2025-08-23 20:28:56.000",
        "source": "frontend",
        "data": {
            "section_id": "0b5f0ac0-2e17-46a7-9f52-d4be626ff421",
            "section_data": {
                "summaryData": {
                    "low_unstructured": "This code sets up an Express server with CORS and JSON support, offering endpoints for a hello message and stock data retrieval.",
                    "low_structured": "• Sets up an Express server with CORS and JSON parsing\n• Provides endpoints for a hello message and stock data",
                    "medium_unstructured": "The code initializes an Express server running on port 3000, enabling CORS and JSON parsing. It defines two endpoints: one returns a simple hello message, and the other fetches stock data for a given symbol using the yahoo-finance2 library. The stock endpoint returns the ticker, company name, and a list of daily closing prices and volumes since 2024-01-01.",
                    "high_structured": "• Sets up an Express server listening on port 3000\n• Middleware configuration:\n  ◦ Enables CORS for cross-origin requests\n  ◦ Parses incoming JSON requests\n• Defines two main endpoints:\n  ◦ /api/hello\n    ▪ Responds with a JSON hello message\n  ◦ /api/stock/:symbol\n    ▪ Extracts and uppercases the stock symbol from the URL\n    ▪ Fetches daily stock chart data from Yahoo Finance starting 2024-01-01\n    ▪ Extracts company name (if available) and maps quotes to include date, close, and volume\n    ▪ Returns a structured JSON object with ticker, name, and data array\n    ▪ Handles errors by logging and returning a 500 error\n• Logs server startup and stock responses to the console",
                    "medium_structured": "• Initializes an Express server on port 3000\n• Enables CORS and JSON body parsing\n• Defines endpoints:\n  ◦ /api/hello returns a hello message\n  ◦ /api/stock/:symbol fetches and returns daily stock data (date, close, volume) and company name for the given symbol since 2024-01-01",
                    "title": "Express Server Providing Stock Data and a Hello Endpoint",
                    "high_unstructured": "This code creates an Express server that listens on port 3000 and uses CORS and JSON middleware. It exposes two endpoints: '/api/hello', which responds with a simple JSON greeting, and '/api/stock/:symbol', which retrieves daily stock data for a specified symbol from Yahoo Finance starting from January 1, 2024. The stock endpoint processes the symbol, fetches chart data, extracts the company name and relevant quote information (date, close, volume), and returns a structured JSON response. Errors during data retrieval are logged and result in a 500 error response."
                },
                "metadata": {
                    "offset": 0,
                    "fullPath": "/project/workspace/server/index.js",
                    "id": "0b5f0ac0-2e17-46a7-9f52-d4be626ff421",
                    "filename": "index.js",
                    "originalCode": "const express = require(\"express\");\nconst cors = require(\"cors\");\nconst yahooFinance = require(\"yahoo-finance2\").default;\n\nconst app = express();\nconst PORT = 3000;\n\napp.use(cors());\napp.use(express.json());\n\napp.get(\"/api/hello\", (req, res) => {\n  res.json({ message: \"Hello from the backend!\" });\n});\n\napp.get(\"/api/stock/:symbol\", async (req, res) => {\n  try {\n    const symbol = req.params.symbol.toUpperCase();\n    const data = await yahooFinance.chart(symbol, {\n      period1: \"2024-01-01\",\n      interval: \"1d\",\n    });\n    const quotes = data.quotes;\n\n    const companyName = data.meta?.shortName || symbol;\n\n    const response = {\n      ticker: symbol,\n      name: companyName,\n      data: quotes.map((q) => ({\n        date: q.date,\n        close: q.close,\n        volume: q.volume,\n      })),\n    };\n\n    console.log(response);\n    res.json(response);\n  } catch (err) {\n    console.error(err);\n    res.status(500).send(\"Error fetching stock data\");\n  }\n});\n\napp.listen(PORT, \"0.0.0.0\", () => {\n  console.log(`Server running on http://localhost:${PORT}`);\n});\n"
                },
                "editPromptValue": "",
                "selectedStructured": "unstructured",
                "editPromptDetailLevel": null,
                "editPromptStructured": null,
                "lines": [
                    1,
                    47
                ],
                "summaryMappings": {
                    "low_unstructured": [
                        {
                            "summaryComponent": "sets up an Express server",
                            "codeSegments": [
                                {
                                    "line": 1,
                                    "code": "const express = require(\"express\");"
                                },
                                {
                                    "line": 5,
                                    "code": "const app = express();"
                                },
                                {
                                    "line": 44,
                                    "code": "app.listen(PORT, \"0.0.0.0\", () => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "with CORS",
                            "codeSegments": [
                                {
                                    "line": 2,
                                    "code": "const cors = require(\"cors\");"
                                },
                                {
                                    "line": 8,
                                    "code": "app.use(cors());"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "and JSON support",
                            "codeSegments": [
                                {
                                    "line": 9,
                                    "code": "app.use(express.json());"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "offering endpoints",
                            "codeSegments": [
                                {
                                    "line": 11,
                                    "code": "app.get(\"/api/hello\", (req, res) => {"
                                },
                                {
                                    "line": 15,
                                    "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "for a hello message",
                            "codeSegments": [
                                {
                                    "line": 11,
                                    "code": "app.get(\"/api/hello\", (req, res) => {"
                                },
                                {
                                    "line": 12,
                                    "code": "res.json({ message: \"Hello from the backend!\" });"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "and stock data retrieval",
                            "codeSegments": [
                                {
                                    "line": 15,
                                    "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                                },
                                {
                                    "line": 18,
                                    "code": "const data = await yahooFinance.chart(symbol, {"
                                },
                                {
                                    "line": 37,
                                    "code": "res.json(response);"
                                }
                            ]
                        }
                    ],
                    "low_structured": [
                        {
                            "summaryComponent": "Sets up an Express server",
                            "codeSegments": [
                                {
                                    "line": 1,
                                    "code": "const express = require(\"express\");"
                                },
                                {
                                    "line": 5,
                                    "code": "const app = express();"
                                },
                                {
                                    "line": 44,
                                    "code": "app.listen(PORT, \"0.0.0.0\", () => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "with CORS",
                            "codeSegments": [
                                {
                                    "line": 2,
                                    "code": "const cors = require(\"cors\");"
                                },
                                {
                                    "line": 8,
                                    "code": "app.use(cors());"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "and JSON parsing",
                            "codeSegments": [
                                {
                                    "line": 9,
                                    "code": "app.use(express.json());"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Provides endpoints",
                            "codeSegments": [
                                {
                                    "line": 11,
                                    "code": "app.get(\"/api/hello\", (req, res) => {"
                                },
                                {
                                    "line": 15,
                                    "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "for a hello message",
                            "codeSegments": [
                                {
                                    "line": 11,
                                    "code": "app.get(\"/api/hello\", (req, res) => {"
                                },
                                {
                                    "line": 12,
                                    "code": "res.json({ message: \"Hello from the backend!\" });"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "and stock data",
                            "codeSegments": [
                                {
                                    "line": 15,
                                    "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                                },
                                {
                                    "line": 18,
                                    "code": "const data = await yahooFinance.chart(symbol, {"
                                }
                            ]
                        }
                    ],
                    "medium_unstructured": [
                        {
                            "summaryComponent": "initializes an Express server running on port 3000",
                            "codeSegments": [
                                {
                                    "line": 5,
                                    "code": "const app = express();"
                                },
                                {
                                    "line": 6,
                                    "code": "const PORT = 3000;"
                                },
                                {
                                    "line": 44,
                                    "code": "app.listen(PORT, \"0.0.0.0\", () => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "enabling CORS",
                            "codeSegments": [
                                {
                                    "line": 8,
                                    "code": "app.use(cors());"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "JSON parsing",
                            "codeSegments": [
                                {
                                    "line": 9,
                                    "code": "app.use(express.json());"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "defines two endpoints",
                            "codeSegments": [
                                {
                                    "line": 11,
                                    "code": "app.get(\"/api/hello\", (req, res) => {"
                                },
                                {
                                    "line": 15,
                                    "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "one returns a simple hello message",
                            "codeSegments": [
                                {
                                    "line": 12,
                                    "code": "res.json({ message: \"Hello from the backend!\" });"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "the other fetches stock data for a given symbol using the yahoo-finance2 library",
                            "codeSegments": [
                                {
                                    "line": 18,
                                    "code": "const data = await yahooFinance.chart(symbol, {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "The stock endpoint returns the ticker",
                            "codeSegments": [
                                {
                                    "line": 27,
                                    "code": "ticker: symbol,"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "company name",
                            "codeSegments": [
                                {
                                    "line": 28,
                                    "code": "name: companyName,"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "a list of daily closing prices and volumes since 2024-01-01",
                            "codeSegments": [
                                {
                                    "line": 29,
                                    "code": "data: quotes.map((q) => ({"
                                },
                                {
                                    "line": 30,
                                    "code": "date: q.date,"
                                },
                                {
                                    "line": 31,
                                    "code": "close: q.close,"
                                },
                                {
                                    "line": 32,
                                    "code": "volume: q.volume,"
                                },
                                {
                                    "line": 19,
                                    "code": "period1: \"2024-01-01\","
                                },
                                {
                                    "line": 20,
                                    "code": "interval: \"1d\","
                                }
                            ]
                        }
                    ],
                    "high_structured": [
                        {
                            "summaryComponent": "Sets up an Express server listening on port 3000",
                            "codeSegments": [
                                {
                                    "line": 5,
                                    "code": "const app = express();"
                                },
                                {
                                    "line": 6,
                                    "code": "const PORT = 3000;"
                                },
                                {
                                    "line": 44,
                                    "code": "app.listen(PORT, \"0.0.0.0\", () => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Enables CORS for cross-origin requests",
                            "codeSegments": [
                                {
                                    "line": 8,
                                    "code": "app.use(cors());"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Parses incoming JSON requests",
                            "codeSegments": [
                                {
                                    "line": 9,
                                    "code": "app.use(express.json());"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "/api/hello",
                            "codeSegments": [
                                {
                                    "line": 11,
                                    "code": "app.get(\"/api/hello\", (req, res) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Responds with a JSON hello message",
                            "codeSegments": [
                                {
                                    "line": 12,
                                    "code": "res.json({ message: \"Hello from the backend!\" });"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "/api/stock/:symbol",
                            "codeSegments": [
                                {
                                    "line": 15,
                                    "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Extracts and uppercases the stock symbol from the URL",
                            "codeSegments": [
                                {
                                    "line": 17,
                                    "code": "const symbol = req.params.symbol.toUpperCase();"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Fetches daily stock chart data from Yahoo Finance starting 2024-01-01",
                            "codeSegments": [
                                {
                                    "line": 18,
                                    "code": "const data = await yahooFinance.chart(symbol, {"
                                },
                                {
                                    "line": 19,
                                    "code": "period1: \"2024-01-01\","
                                },
                                {
                                    "line": 20,
                                    "code": "interval: \"1d\","
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Extracts company name (if available) and maps quotes to include date, close, and volume",
                            "codeSegments": [
                                {
                                    "line": 24,
                                    "code": "const companyName = data.meta?.shortName || symbol;"
                                },
                                {
                                    "line": 29,
                                    "code": "data: quotes.map((q) => ({"
                                },
                                {
                                    "line": 30,
                                    "code": "date: q.date,"
                                },
                                {
                                    "line": 31,
                                    "code": "close: q.close,"
                                },
                                {
                                    "line": 32,
                                    "code": "volume: q.volume,"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Returns a structured JSON object with ticker, name, and data array",
                            "codeSegments": [
                                {
                                    "line": 26,
                                    "code": "const response = {"
                                },
                                {
                                    "line": 37,
                                    "code": "res.json(response);"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Handles errors by logging and returning a 500 error",
                            "codeSegments": [
                                {
                                    "line": 39,
                                    "code": "console.error(err);"
                                },
                                {
                                    "line": 40,
                                    "code": "res.status(500).send(\"Error fetching stock data\");"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Logs server startup and stock responses to the console",
                            "codeSegments": [
                                {
                                    "line": 36,
                                    "code": "console.log(response);"
                                },
                                {
                                    "line": 45,
                                    "code": "console.log(`Server running on http://localhost:${PORT}`);"
                                }
                            ]
                        }
                    ],
                    "medium_structured": [
                        {
                            "summaryComponent": "Initializes an Express server on port 3000",
                            "codeSegments": [
                                {
                                    "line": 5,
                                    "code": "const app = express();"
                                },
                                {
                                    "line": 6,
                                    "code": "const PORT = 3000;"
                                },
                                {
                                    "line": 44,
                                    "code": "app.listen(PORT, \"0.0.0.0\", () => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Enables CORS and JSON body parsing",
                            "codeSegments": [
                                {
                                    "line": 8,
                                    "code": "app.use(cors());"
                                },
                                {
                                    "line": 9,
                                    "code": "app.use(express.json());"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Defines endpoints:",
                            "codeSegments": [
                                {
                                    "line": 11,
                                    "code": "app.get(\"/api/hello\", (req, res) => {"
                                },
                                {
                                    "line": 15,
                                    "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "/api/hello returns a hello message",
                            "codeSegments": [
                                {
                                    "line": 11,
                                    "code": "app.get(\"/api/hello\", (req, res) => {"
                                },
                                {
                                    "line": 12,
                                    "code": "res.json({ message: \"Hello from the backend!\" });"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "/api/stock/:symbol fetches and returns daily stock data (date, close, volume) and company name for the given symbol since 2024-01-01",
                            "codeSegments": [
                                {
                                    "line": 15,
                                    "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                                },
                                {
                                    "line": 17,
                                    "code": "const symbol = req.params.symbol.toUpperCase();"
                                },
                                {
                                    "line": 18,
                                    "code": "const data = await yahooFinance.chart(symbol, {"
                                },
                                {
                                    "line": 19,
                                    "code": "period1: \"2024-01-01\","
                                },
                                {
                                    "line": 20,
                                    "code": "interval: \"1d\","
                                },
                                {
                                    "line": 24,
                                    "code": "const companyName = data.meta?.shortName || symbol;"
                                },
                                {
                                    "line": 29,
                                    "code": "data: quotes.map((q) => ({"
                                },
                                {
                                    "line": 30,
                                    "code": "date: q.date,"
                                },
                                {
                                    "line": 31,
                                    "code": "close: q.close,"
                                },
                                {
                                    "line": 32,
                                    "code": "volume: q.volume,"
                                }
                            ]
                        }
                    ],
                    "high_unstructured": [
                        {
                            "summaryComponent": "creates an Express server",
                            "codeSegments": [
                                {
                                    "line": 1,
                                    "code": "const express = require(\"express\");"
                                },
                                {
                                    "line": 5,
                                    "code": "const app = express();"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "listens on port 3000",
                            "codeSegments": [
                                {
                                    "line": 6,
                                    "code": "const PORT = 3000;"
                                },
                                {
                                    "line": 44,
                                    "code": "app.listen(PORT, \"0.0.0.0\", () => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "uses CORS and JSON middleware",
                            "codeSegments": [
                                {
                                    "line": 8,
                                    "code": "app.use(cors());"
                                },
                                {
                                    "line": 9,
                                    "code": "app.use(express.json());"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "exposes two endpoints: '/api/hello', which responds with a simple JSON greeting",
                            "codeSegments": [
                                {
                                    "line": 11,
                                    "code": "app.get(\"/api/hello\", (req, res) => {"
                                },
                                {
                                    "line": 12,
                                    "code": "res.json({ message: \"Hello from the backend!\" });"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "'/api/stock/:symbol', which retrieves daily stock data for a specified symbol from Yahoo Finance starting from January 1, 2024",
                            "codeSegments": [
                                {
                                    "line": 15,
                                    "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                                },
                                {
                                    "line": 17,
                                    "code": "const symbol = req.params.symbol.toUpperCase();"
                                },
                                {
                                    "line": 18,
                                    "code": "const data = await yahooFinance.chart(symbol, {"
                                },
                                {
                                    "line": 19,
                                    "code": "period1: \"2024-01-01\","
                                },
                                {
                                    "line": 20,
                                    "code": "interval: \"1d\","
                                }
                            ]
                        },
                        {
                            "summaryComponent": "The stock endpoint processes the symbol",
                            "codeSegments": [
                                {
                                    "line": 17,
                                    "code": "const symbol = req.params.symbol.toUpperCase();"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "fetches chart data",
                            "codeSegments": [
                                {
                                    "line": 18,
                                    "code": "const data = await yahooFinance.chart(symbol, {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "extracts the company name and relevant quote information (date, close, volume)",
                            "codeSegments": [
                                {
                                    "line": 24,
                                    "code": "const companyName = data.meta?.shortName || symbol;"
                                },
                                {
                                    "line": 26,
                                    "code": "const response = {"
                                },
                                {
                                    "line": 28,
                                    "code": "name: companyName,"
                                },
                                {
                                    "line": 29,
                                    "code": "data: quotes.map((q) => ({"
                                },
                                {
                                    "line": 30,
                                    "code": "date: q.date,"
                                },
                                {
                                    "line": 31,
                                    "code": "close: q.close,"
                                },
                                {
                                    "line": 32,
                                    "code": "volume: q.volume,"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "returns a structured JSON response",
                            "codeSegments": [
                                {
                                    "line": 37,
                                    "code": "res.json(response);"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Errors during data retrieval are logged and result in a 500 error response",
                            "codeSegments": [
                                {
                                    "line": 39,
                                    "code": "console.error(err);"
                                },
                                {
                                    "line": 40,
                                    "code": "res.status(500).send(\"Error fetching stock data\");"
                                }
                            ]
                        }
                    ]
                },
                "selectedDetailLevel": "medium",
                "title": "Express Server Providing Stock Data and a Hello Endpoint",
                "createdAt": 1755966528000
            }
        },
        "event": "create_new_section",
        "id": "RkMH9sFJPofajmYfLInH"
    },
    {
        "timestamp": "2025-08-23 20:28:56.000",
        "source": "frontend",
        "data": {
            "mapping_index": 6,
            "section_id": "5213b114-b68c-49f0-80a2-dc97bfae14d1",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "UrFCNCIMA6CQJuthawsl"
    },
    {
        "timestamp": "2025-08-23 20:28:56.000",
        "source": "frontend",
        "data": {
            "section_id": "5213b114-b68c-49f0-80a2-dc97bfae14d1",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "WpLPMOQ99bjZIY8Rk91N"
    },
    {
        "timestamp": "2025-08-23 20:28:56.000",
        "source": "frontend",
        "data": {
            "section_id": "5213b114-b68c-49f0-80a2-dc97bfae14d1",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "ZnqYATn5FY8Kp4efTIup"
    },
    {
        "timestamp": "2025-08-23 20:28:56.000",
        "source": "frontend",
        "data": {
            "mapping_index": 4,
            "section_id": "5213b114-b68c-49f0-80a2-dc97bfae14d1",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "njuJtPTxufH3wMktQQcT"
    },
    {
        "timestamp": "2025-08-23 20:28:56.000",
        "source": "frontend",
        "data": {
            "mapping_index": 1,
            "section_id": "5213b114-b68c-49f0-80a2-dc97bfae14d1",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "oLhjIHImxqal40NBVkbX"
    },
    {
        "timestamp": "2025-08-23 20:28:56.000",
        "source": "frontend",
        "data": {
            "mapping_index": 9,
            "section_id": "5213b114-b68c-49f0-80a2-dc97bfae14d1",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "xdPccmk7l3RiZmtnxFqS"
    },
    {
        "timestamp": "2025-08-23 20:28:56.000",
        "source": "frontend",
        "data": {
            "section_id": "5213b114-b68c-49f0-80a2-dc97bfae14d1",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "zbUWyzysCBelgfkGg1ES"
    },
    {
        "timestamp": "2025-08-23 20:28:57.000",
        "source": "frontend",
        "data": {
            "mapping_index": 8,
            "section_id": "0b5f0ac0-2e17-46a7-9f52-d4be626ff421",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "IZF3Kg0Xig4Bw3dsrKNX"
    },
    {
        "timestamp": "2025-08-23 20:28:57.000",
        "source": "frontend",
        "data": {
            "section_id": "0b5f0ac0-2e17-46a7-9f52-d4be626ff421",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "icnNN5zfEBM4nqDhmSLu"
    },
    {
        "timestamp": "2025-08-23 20:28:58.000",
        "source": "frontend",
        "data": {
            "section_id": "0b5f0ac0-2e17-46a7-9f52-d4be626ff421",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "n5MzZeasYvXXFijxhr07"
    },
    {
        "timestamp": "2025-08-23 20:28:58.000",
        "source": "frontend",
        "data": {
            "mapping_index": 1,
            "section_id": "0b5f0ac0-2e17-46a7-9f52-d4be626ff421",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "spFLn486e6NEEIuotbah"
    },
    {
        "timestamp": "2025-08-23 20:28:59.000",
        "source": "frontend",
        "data": {
            "section_id": "0b5f0ac0-2e17-46a7-9f52-d4be626ff421",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "5Q3GGEcBMcRqHo8KO2up"
    },
    {
        "timestamp": "2025-08-23 20:28:59.000",
        "source": "frontend",
        "data": {
            "section_id": "0b5f0ac0-2e17-46a7-9f52-d4be626ff421",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "5VHP5h3VAkjk6OQ7KGRM"
    },
    {
        "timestamp": "2025-08-23 20:28:59.000",
        "source": "frontend",
        "data": {
            "section_id": "0b5f0ac0-2e17-46a7-9f52-d4be626ff421",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "6KzETUeHjZgTt5HpUdjM"
    },
    {
        "timestamp": "2025-08-23 20:28:59.000",
        "source": "frontend",
        "data": {
            "mapping_index": 8,
            "section_id": "0b5f0ac0-2e17-46a7-9f52-d4be626ff421",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "JEjiX0pXQr69QgqqeP6C"
    },
    {
        "timestamp": "2025-08-23 20:28:59.000",
        "source": "frontend",
        "data": {
            "mapping_index": 6,
            "section_id": "0b5f0ac0-2e17-46a7-9f52-d4be626ff421",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "PTUOKyHYQNxn8kCif4kp"
    },
    {
        "timestamp": "2025-08-23 20:28:59.000",
        "source": "frontend",
        "data": {
            "mapping_index": 5,
            "section_id": "0b5f0ac0-2e17-46a7-9f52-d4be626ff421",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "RZ3VDihrsz52ubXVNrws"
    },
    {
        "timestamp": "2025-08-23 20:28:59.000",
        "source": "frontend",
        "data": {
            "structured": "unstructured",
            "summary": "The code initializes an Express server running on port 3000, enabling CORS and JSON parsing. It defines two endpoints: one returns a simple hello message, and the other fetches stock data for a given symbol using the yahoo-finance2 library. The stock endpoint returns the ticker, company name, and a list of daily closing prices and volumes since 2024-01-01.",
            "section_id": "0b5f0ac0-2e17-46a7-9f52-d4be626ff421",
            "detail_level": "medium"
        },
        "event": "click_edit_in_prompt",
        "id": "WdwiZa8hZDJ0wobNqi04"
    },
    {
        "timestamp": "2025-08-23 20:28:59.000",
        "source": "frontend",
        "data": {
            "mapping_index": 4,
            "section_id": "0b5f0ac0-2e17-46a7-9f52-d4be626ff421",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "XrmpzPmKvihNc29YknPd"
    },
    {
        "timestamp": "2025-08-23 20:28:59.000",
        "source": "frontend",
        "data": {
            "section_id": "0b5f0ac0-2e17-46a7-9f52-d4be626ff421",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "aproH4Lg8uTSf6UJJn6x"
    },
    {
        "timestamp": "2025-08-23 20:28:59.000",
        "source": "frontend",
        "data": {
            "section_id": "0b5f0ac0-2e17-46a7-9f52-d4be626ff421",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "cIJ5Au9kk5W4KjJp5vJk"
    },
    {
        "timestamp": "2025-08-23 20:28:59.000",
        "source": "frontend",
        "data": {
            "mapping_index": 1,
            "section_id": "0b5f0ac0-2e17-46a7-9f52-d4be626ff421",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "x9cFQulBwzBa8ZCJI0OV"
    },
    {
        "timestamp": "2025-08-23 20:29:41.000",
        "source": "backend",
        "data": {
            "updated_summary": "The code initializes an Express server running on port 3000, enabling CORS and JSON parsing. It defines two endpoints: one returns a simple hello message, and the other fetches stock data for a given symbol using the yahoo-finance2 library. The stock endpoint returns the ticker, company name, and a list of daily closing prices and volumes since 2024-01-01. Additionally, the stock endpoint now includes the current price of the stock in its response, making it available for display in the upper right of the graph.",
            "instruction": "I want to add current price to up right in my graph",
            "original_code": "const express = require(\"express\");\nconst cors = require(\"cors\");\nconst yahooFinance = require(\"yahoo-finance2\").default;\n\nconst app = express();\nconst PORT = 3000;\n\napp.use(cors());\napp.use(express.json());\n\napp.get(\"/api/hello\", (req, res) => {\n  res.json({ message: \"Hello from the backend!\" });\n});\n\napp.get(\"/api/stock/:symbol\", async (req, res) => {\n  try {\n    const symbol = req.params.symbol.toUpperCase();\n    const data = await yahooFinance.chart(symbol, {\n      period1: \"2024-01-01\",\n      interval: \"1d\",\n    });\n    const quotes = data.quotes;\n\n    const companyName = data.meta?.shortName || symbol;\n\n    const response = {\n      ticker: symbol,\n      name: companyName,\n      data: quotes.map((q) => ({\n        date: q.date,\n        close: q.close,\n        volume: q.volume,\n      })),\n    };\n\n    console.log(response);\n    res.json(response);\n  } catch (err) {\n    console.error(err);\n    res.status(500).send(\"Error fetching stock data\");\n  }\n});\n\napp.listen(PORT, \"0.0.0.0\", () => {\n  console.log(`Server running on http://localhost:${PORT}`);\n});\n",
            "original_summary": "The code initializes an Express server running on port 3000, enabling CORS and JSON parsing. It defines two endpoints: one returns a simple hello message, and the other fetches stock data for a given symbol using the yahoo-finance2 library. The stock endpoint returns the ticker, company name, and a list of daily closing prices and volumes since 2024-01-01."
        },
        "event": "apply_instruction_summary",
        "id": "gkCzClw7OFTgEj9w42RR"
    },
    {
        "timestamp": "2025-08-23 20:29:42.000",
        "source": "frontend",
        "data": {
            "mapping_index": 5,
            "section_id": "0b5f0ac0-2e17-46a7-9f52-d4be626ff421",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "0AAJdfb9dfbgMnQIMRJa"
    },
    {
        "timestamp": "2025-08-23 20:29:42.000",
        "source": "frontend",
        "data": {
            "section_id": "0b5f0ac0-2e17-46a7-9f52-d4be626ff421",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "1GsaoEGHvqXfAziPY9EY"
    },
    {
        "timestamp": "2025-08-23 20:29:42.000",
        "source": "frontend",
        "data": {
            "section_id": "0b5f0ac0-2e17-46a7-9f52-d4be626ff421",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "CQrgQVojF4I9lx5Mpquf"
    },
    {
        "timestamp": "2025-08-23 20:29:42.000",
        "source": "frontend",
        "data": {
            "mapping_index": 6,
            "section_id": "0b5f0ac0-2e17-46a7-9f52-d4be626ff421",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "oGBhARLOKosGhVwu0FvW"
    },
    {
        "timestamp": "2025-08-23 20:29:42.000",
        "source": "frontend",
        "data": {
            "mapping_index": 8,
            "section_id": "0b5f0ac0-2e17-46a7-9f52-d4be626ff421",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "tuHz7RorKBgwCZMbQJfJ"
    },
    {
        "timestamp": "2025-08-23 20:29:42.000",
        "source": "frontend",
        "data": {
            "section_id": "0b5f0ac0-2e17-46a7-9f52-d4be626ff421",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "ziCF5mGCaw0YHVo84heX"
    },
    {
        "timestamp": "2025-08-23 20:29:47.000",
        "source": "backend",
        "data": {
            "updated_code": "const express = require(\"express\");\nconst cors = require(\"cors\");\nconst yahooFinance = require(\"yahoo-finance2\").default;\n\nconst app = express();\nconst PORT = 3000;\n\napp.use(cors());\napp.use(express.json());\n\napp.get(\"/api/hello\", (req, res) => {\n  res.json({ message: \"Hello from the backend!\" });\n});\n\napp.get(\"/api/stock/:symbol\", async (req, res) => {\n  try {\n    const symbol = req.params.symbol.toUpperCase();\n    const data = await yahooFinance.chart(symbol, {\n      period1: \"2024-01-01\",\n      interval: \"1d\",\n    });\n    const quotes = data.quotes;\n\n    const companyName = data.meta?.shortName || symbol;\n\n    // Get the most recent closing price as the current price\n    const currentPrice = quotes.length > 0 ? quotes[quotes.length - 1].close : null;\n\n    const response = {\n      ticker: symbol,\n      name: companyName,\n      currentPrice: currentPrice,\n      data: quotes.map((q) => ({\n        date: q.date,\n        close: q.close,\n        volume: q.volume,\n      })),\n    };\n\n    console.log(response);\n    res.json(response);\n  } catch (err) {\n    console.error(err);\n    res.status(500).send(\"Error fetching stock data\");\n  }\n});\n\napp.listen(PORT, \"0.0.0.0\", () => {\n  console.log(`Server running on http://localhost:${PORT}`);\n});",
            "edited_summary": "The code initializes an Express server running on port 3000, enabling CORS and JSON parsing. It defines two endpoints: one returns a simple hello message, and the other fetches stock data for a given symbol using the yahoo-finance2 library. The stock endpoint returns the ticker, company name, and a list of daily closing prices and volumes since 2024-01-01. Additionally, the stock endpoint now includes the current price of the stock in its response, making it available for display in the upper right of the graph.",
            "structured_type": "unstructured",
            "original_code": "const express = require(\"express\");\nconst cors = require(\"cors\");\nconst yahooFinance = require(\"yahoo-finance2\").default;\n\nconst app = express();\nconst PORT = 3000;\n\napp.use(cors());\napp.use(express.json());\n\napp.get(\"/api/hello\", (req, res) => {\n  res.json({ message: \"Hello from the backend!\" });\n});\n\napp.get(\"/api/stock/:symbol\", async (req, res) => {\n  try {\n    const symbol = req.params.symbol.toUpperCase();\n    const data = await yahooFinance.chart(symbol, {\n      period1: \"2024-01-01\",\n      interval: \"1d\",\n    });\n    const quotes = data.quotes;\n\n    const companyName = data.meta?.shortName || symbol;\n\n    const response = {\n      ticker: symbol,\n      name: companyName,\n      data: quotes.map((q) => ({\n        date: q.date,\n        close: q.close,\n        volume: q.volume,\n      })),\n    };\n\n    console.log(response);\n    res.json(response);\n  } catch (err) {\n    console.error(err);\n    res.status(500).send(\"Error fetching stock data\");\n  }\n});\n\napp.listen(PORT, \"0.0.0.0\", () => {\n  console.log(`Server running on http://localhost:${PORT}`);\n});\n",
            "original_summary": "The code initializes an Express server running on port 3000, enabling CORS and JSON parsing. It defines two endpoints: one returns a simple hello message, and the other fetches stock data for a given symbol using the yahoo-finance2 library. The stock endpoint returns the ticker, company name, and a list of daily closing prices and volumes since 2024-01-01.",
            "detail_level": "medium"
        },
        "event": "modify_summary_mediation",
        "id": "DxgP8MwRxlEY88DMoSut"
    },
    {
        "timestamp": "2025-08-23 20:29:47.000",
        "source": "frontend",
        "data": {
            "structured": "unstructured",
            "section_id": "0b5f0ac0-2e17-46a7-9f52-d4be626ff421",
            "instruction": "I want to add current price to up right in my graph",
            "original_summary": "The code initializes an Express server running on port 3000, enabling CORS and JSON parsing. It defines two endpoints: one returns a simple hello message, and the other fetches stock data for a given symbol using the yahoo-finance2 library. The stock endpoint returns the ticker, company name, and a list of daily closing prices and volumes since 2024-01-01.",
            "detail_level": "medium"
        },
        "event": "apply_instruction_summary",
        "id": "YkeB6TBaTIY2PDRENlTV"
    },
    {
        "timestamp": "2025-08-23 20:29:49.000",
        "source": "frontend",
        "data": {
            "section_id": "0b5f0ac0-2e17-46a7-9f52-d4be626ff421",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "1n1CkiMfNoffoWzpZuVs"
    },
    {
        "timestamp": "2025-08-23 20:29:49.000",
        "source": "frontend",
        "data": {
            "section_id": "0b5f0ac0-2e17-46a7-9f52-d4be626ff421",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "39jhBEJbnurjcP3MYhEr"
    },
    {
        "timestamp": "2025-08-23 20:29:49.000",
        "source": "frontend",
        "data": {
            "mapping_index": 8,
            "section_id": "0b5f0ac0-2e17-46a7-9f52-d4be626ff421",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "5T9insb7vxDa09kZYFzS"
    },
    {
        "timestamp": "2025-08-23 20:29:49.000",
        "source": "frontend",
        "data": {
            "mapping_index": 7,
            "section_id": "0b5f0ac0-2e17-46a7-9f52-d4be626ff421",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "8uhd449wQFxXSQI46kth"
    },
    {
        "timestamp": "2025-08-23 20:29:49.000",
        "source": "frontend",
        "data": {
            "section_id": "0b5f0ac0-2e17-46a7-9f52-d4be626ff421",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "FP4IzPuoRGRfpk7hPTT8"
    },
    {
        "timestamp": "2025-08-23 20:29:49.000",
        "source": "frontend",
        "data": {
            "section_id": "0b5f0ac0-2e17-46a7-9f52-d4be626ff421",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "Jubn2jSkua9QcnwW8vgE"
    },
    {
        "timestamp": "2025-08-23 20:29:49.000",
        "source": "frontend",
        "data": {
            "section_id": "0b5f0ac0-2e17-46a7-9f52-d4be626ff421",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "OqOanB2xE6Z8Vb1IE5w6"
    },
    {
        "timestamp": "2025-08-23 20:29:49.000",
        "source": "frontend",
        "data": {
            "mapping_index": 5,
            "section_id": "0b5f0ac0-2e17-46a7-9f52-d4be626ff421",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "aqWcMKWkpqO0j9qmAQLZ"
    },
    {
        "timestamp": "2025-08-23 20:29:49.000",
        "source": "frontend",
        "data": {
            "section_id": "0b5f0ac0-2e17-46a7-9f52-d4be626ff421",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "cMJhY1BlF9UcLEaE38mR"
    },
    {
        "timestamp": "2025-08-23 20:29:49.000",
        "source": "frontend",
        "data": {
            "section_id": "0b5f0ac0-2e17-46a7-9f52-d4be626ff421",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "eM7h2QgsiAC9jCVFcVTv"
    },
    {
        "timestamp": "2025-08-23 20:29:49.000",
        "source": "frontend",
        "data": {
            "mapping_index": 4,
            "section_id": "0b5f0ac0-2e17-46a7-9f52-d4be626ff421",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "iq0Gs0gOteB9sBdGZ02G"
    },
    {
        "timestamp": "2025-08-23 20:29:49.000",
        "source": "frontend",
        "data": {
            "mapping_index": 8,
            "section_id": "0b5f0ac0-2e17-46a7-9f52-d4be626ff421",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "lknkAtJLAodFFfgFzPFV"
    },
    {
        "timestamp": "2025-08-23 20:29:49.000",
        "source": "frontend",
        "data": {
            "mapping_index": 4,
            "section_id": "0b5f0ac0-2e17-46a7-9f52-d4be626ff421",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "nejfvr4hDeHWHQvd8Zpn"
    },
    {
        "timestamp": "2025-08-23 20:29:49.000",
        "source": "frontend",
        "data": {
            "mapping_index": 6,
            "section_id": "0b5f0ac0-2e17-46a7-9f52-d4be626ff421",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "smfk2XaZhhonsoPoWhiI"
    },
    {
        "timestamp": "2025-08-23 20:29:49.000",
        "source": "frontend",
        "data": {
            "section_id": "0b5f0ac0-2e17-46a7-9f52-d4be626ff421",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "vZs5c9KWkw8G84M0saAq"
    },
    {
        "timestamp": "2025-08-23 20:29:49.000",
        "source": "frontend",
        "data": {
            "mapping_index": 5,
            "section_id": "0b5f0ac0-2e17-46a7-9f52-d4be626ff421",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "wEuJZri7r1O6pSGQvQjm"
    },
    {
        "timestamp": "2025-08-23 20:29:51.000",
        "source": "frontend",
        "data": {
            "structured": "unstructured",
            "section_id": "0b5f0ac0-2e17-46a7-9f52-d4be626ff421",
            "edited_summary": "The code initializes an Express server running on port 3000, enabling CORS and JSON parsing. It defines two endpoints: one returns a simple hello message, and the other fetches stock data for a given symbol using the yahoo-finance2 library. The stock endpoint returns the ticker, company name, and a list of daily closing prices and volumes since 2024-01-01. Additionally, the stock endpoint now includes the current price of the stock in its response, making it available for display in the upper right of the graph.",
            "original_summary": "The code initializes an Express server running on port 3000, enabling CORS and JSON parsing. It defines two endpoints: one returns a simple hello message, and the other fetches stock data for a given symbol using the yahoo-finance2 library. The stock endpoint returns the ticker, company name, and a list of daily closing prices and volumes since 2024-01-01.",
            "detail_level": "medium"
        },
        "event": "commit_modified_summary",
        "id": "JReLFtEdtVodTTvrhXLw"
    },
    {
        "timestamp": "2025-08-23 20:29:53.000",
        "source": "backend",
        "data": {
            "new_summary": {
                "low_unstructured": "This code sets up an Express server with CORS and JSON support, offering endpoints for a hello message and stock data retrieval, now including the most recent closing price as the current price in the stock data response.",
                "low_structured": "• Sets up an Express server with CORS and JSON parsing\n• Provides endpoints for a hello message and stock data, with the stock data now including the most recent closing price as currentPrice",
                "medium_unstructured": "The code initializes an Express server running on port 3000, enabling CORS and JSON parsing. It defines two endpoints: one returns a simple hello message, and the other fetches stock data for a given symbol using the yahoo-finance2 library. The stock endpoint now returns the ticker, company name, the most recent closing price as currentPrice, and a list of daily closing prices and volumes since 2024-01-01.",
                "high_structured": "• Sets up an Express server listening on port 3000\n• Middleware configuration:\n  ◦ Enables CORS for cross-origin requests\n  ◦ Parses incoming JSON requests\n• Defines two main endpoints:\n  ◦ /api/hello\n    ▪ Responds with a JSON hello message\n  ◦ /api/stock/:symbol\n    ▪ Extracts and uppercases the stock symbol from the URL\n    ▪ Fetches daily stock chart data from Yahoo Finance starting 2024-01-01\n    ▪ Extracts company name (if available) and maps quotes to include date, close, and volume\n    ▪ Determines the most recent closing price as currentPrice and includes it in the response\n    ▪ Returns a structured JSON object with ticker, name, currentPrice, and data array\n    ▪ Handles errors by logging and returning a 500 error\n• Logs server startup and stock responses to the console",
                "medium_structured": "• Initializes an Express server on port 3000\n• Enables CORS and JSON body parsing\n• Defines endpoints:\n  ◦ /api/hello returns a hello message\n  ◦ /api/stock/:symbol fetches and returns daily stock data (date, close, volume), company name, and now also includes the most recent closing price as currentPrice for the given symbol since 2024-01-01",
                "title": "Express Server Providing Stock Data with Current Price and a Hello Endpoint",
                "high_unstructured": "This code creates an Express server that listens on port 3000 and uses CORS and JSON middleware. It exposes two endpoints: '/api/hello', which responds with a simple JSON greeting, and '/api/stock/:symbol', which retrieves daily stock data for a specified symbol from Yahoo Finance starting from January 1, 2024. The stock endpoint processes the symbol, fetches chart data, extracts the company name and relevant quote information (date, close, volume), and now also determines the most recent closing price as currentPrice, returning it in a structured JSON response. Errors during data retrieval are logged and result in a 500 error response."
            },
            "original_code": "const express = require(\"express\");\nconst cors = require(\"cors\");\nconst yahooFinance = require(\"yahoo-finance2\").default;\n\nconst app = express();\nconst PORT = 3000;\n\napp.use(cors());\napp.use(express.json());\n\napp.get(\"/api/hello\", (req, res) => {\n  res.json({ message: \"Hello from the backend!\" });\n});\n\napp.get(\"/api/stock/:symbol\", async (req, res) => {\n  try {\n    const symbol = req.params.symbol.toUpperCase();\n    const data = await yahooFinance.chart(symbol, {\n      period1: \"2024-01-01\",\n      interval: \"1d\",\n    });\n    const quotes = data.quotes;\n\n    const companyName = data.meta?.shortName || symbol;\n\n    // Get the most recent closing price as the current price\n    const currentPrice = quotes.length > 0 ? quotes[quotes.length - 1].close : null;\n\n    const response = {\n      ticker: symbol,\n      name: companyName,\n      currentPrice: currentPrice,\n      data: quotes.map((q) => ({\n        date: q.date,\n        close: q.close,\n        volume: q.volume,\n      })),\n    };\n\n    console.log(response);\n    res.json(response);\n  } catch (err) {\n    console.error(err);\n    res.status(500).send(\"Error fetching stock data\");\n  }\n});\n\napp.listen(PORT, \"0.0.0.0\", () => {\n  console.log(`Server running on http://localhost:${PORT}`);\n});",
            "new_code": "const express = require(\"express\");\nconst cors = require(\"cors\");\nconst yahooFinance = require(\"yahoo-finance2\").default;\n\nconst app = express();\nconst PORT = 3000;\n\napp.use(cors());\napp.use(express.json());\n\napp.get(\"/api/hello\", (req, res) => {\n  res.json({ message: \"Hello from the backend!\" });\n});\n\napp.get(\"/api/stock/:symbol\", async (req, res) => {\n  try {\n    const symbol = req.params.symbol.toUpperCase();\n    const data = await yahooFinance.chart(symbol, {\n      period1: \"2024-01-01\",\n      interval: \"1d\",\n    });\n    const quotes = data.quotes;\n\n    const companyName = data.meta?.shortName || symbol;\n\n    // Get the most recent closing price as the current price\n    const currentPrice = quotes.length > 0 ? quotes[quotes.length - 1].close : null;\n\n    const response = {\n      ticker: symbol,\n      name: companyName,\n      currentPrice: currentPrice,\n      data: quotes.map((q) => ({\n        date: q.date,\n        close: q.close,\n        volume: q.volume,\n      })),\n    };\n\n    console.log(response);\n    res.json(response);\n  } catch (err) {\n    console.error(err);\n    res.status(500).send(\"Error fetching stock data\");\n  }\n});\n\napp.listen(PORT, \"0.0.0.0\", () => {\n  console.log(`Server running on http://localhost:${PORT}`);\n});",
            "old_summary": {
                "low_unstructured": "This code sets up an Express server with CORS and JSON support, offering endpoints for a hello message and stock data retrieval.",
                "low_structured": "• Sets up an Express server with CORS and JSON parsing\n• Provides endpoints for a hello message and stock data",
                "medium_unstructured": "The code initializes an Express server running on port 3000, enabling CORS and JSON parsing. It defines two endpoints: one returns a simple hello message, and the other fetches stock data for a given symbol using the yahoo-finance2 library. The stock endpoint returns the ticker, company name, and a list of daily closing prices and volumes since 2024-01-01.",
                "high_structured": "• Sets up an Express server listening on port 3000\n• Middleware configuration:\n  ◦ Enables CORS for cross-origin requests\n  ◦ Parses incoming JSON requests\n• Defines two main endpoints:\n  ◦ /api/hello\n    ▪ Responds with a JSON hello message\n  ◦ /api/stock/:symbol\n    ▪ Extracts and uppercases the stock symbol from the URL\n    ▪ Fetches daily stock chart data from Yahoo Finance starting 2024-01-01\n    ▪ Extracts company name (if available) and maps quotes to include date, close, and volume\n    ▪ Returns a structured JSON object with ticker, name, and data array\n    ▪ Handles errors by logging and returning a 500 error\n• Logs server startup and stock responses to the console",
                "medium_structured": "• Initializes an Express server on port 3000\n• Enables CORS and JSON body parsing\n• Defines endpoints:\n  ◦ /api/hello returns a hello message\n  ◦ /api/stock/:symbol fetches and returns daily stock data (date, close, volume) and company name for the given symbol since 2024-01-01",
                "title": "Express Server Providing Stock Data and a Hello Endpoint",
                "high_unstructured": "This code creates an Express server that listens on port 3000 and uses CORS and JSON middleware. It exposes two endpoints: '/api/hello', which responds with a simple JSON greeting, and '/api/stock/:symbol', which retrieves daily stock data for a specified symbol from Yahoo Finance starting from January 1, 2024. The stock endpoint processes the symbol, fetches chart data, extracts the company name and relevant quote information (date, close, volume), and returns a structured JSON response. Errors during data retrieval are logged and result in a 500 error response."
            }
        },
        "event": "summarize_modified_code",
        "id": "j8HGyY96srzndqPzInJ7"
    },
    {
        "timestamp": "2025-08-23 20:29:55.000",
        "source": "backend",
        "data": {
            "summary": "• Sets up an Express server with CORS and JSON parsing\n• Provides endpoints for a hello message and stock data, with the stock data now including the most recent closing price as currentPrice",
            "mapping": [
                {
                    "summaryComponent": "Sets up an Express server with CORS and JSON parsing",
                    "codeSegments": [
                        {
                            "line": 1,
                            "code": "const express = require(\"express\");"
                        },
                        {
                            "line": 2,
                            "code": "const cors = require(\"cors\");"
                        },
                        {
                            "line": 5,
                            "code": "const app = express();"
                        },
                        {
                            "line": 8,
                            "code": "app.use(cors());"
                        },
                        {
                            "line": 9,
                            "code": "app.use(express.json());"
                        },
                        {
                            "line": 48,
                            "code": "app.listen(PORT, \"0.0.0.0\", () => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "Provides endpoints for a hello message and stock data",
                    "codeSegments": [
                        {
                            "line": 11,
                            "code": "app.get(\"/api/hello\", (req, res) => {"
                        },
                        {
                            "line": 15,
                            "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "with the stock data now including the most recent closing price as currentPrice",
                    "codeSegments": [
                        {
                            "line": 26,
                            "code": "// Get the most recent closing price as the current price"
                        },
                        {
                            "line": 27,
                            "code": "const currentPrice = quotes.length > 0 ? quotes[quotes.length - 1].close : null;"
                        },
                        {
                            "line": 32,
                            "code": "currentPrice: currentPrice,"
                        }
                    ]
                }
            ],
            "code": "1: const express = require(\"express\");\n2: const cors = require(\"cors\");\n3: const yahooFinance = require(\"yahoo-finance2\").default;\n4: \n5: const app = express();\n6: const PORT = 3000;\n7: \n8: app.use(cors());\n9: app.use(express.json());\n10: \n11: app.get(\"/api/hello\", (req, res) => {\n12:   res.json({ message: \"Hello from the backend!\" });\n13: });\n14: \n15: app.get(\"/api/stock/:symbol\", async (req, res) => {\n16:   try {\n17:     const symbol = req.params.symbol.toUpperCase();\n18:     const data = await yahooFinance.chart(symbol, {\n19:       period1: \"2024-01-01\",\n20:       interval: \"1d\",\n21:     });\n22:     const quotes = data.quotes;\n23: \n24:     const companyName = data.meta?.shortName || symbol;\n25: \n26:     // Get the most recent closing price as the current price\n27:     const currentPrice = quotes.length > 0 ? quotes[quotes.length - 1].close : null;\n28: \n29:     const response = {\n30:       ticker: symbol,\n31:       name: companyName,\n32:       currentPrice: currentPrice,\n33:       data: quotes.map((q) => ({\n34:         date: q.date,\n35:         close: q.close,\n36:         volume: q.volume,\n37:       })),\n38:     };\n39: \n40:     console.log(response);\n41:     res.json(response);\n42:   } catch (err) {\n43:     console.error(err);\n44:     res.status(500).send(\"Error fetching stock data\");\n45:   }\n46: });\n47: \n48: app.listen(PORT, \"0.0.0.0\", () => {\n49:   console.log(`Server running on http://localhost:${PORT}`);\n50: });"
        },
        "event": "map_summary_code",
        "id": "jA2EOylCUiLyjAry7sC5"
    },
    {
        "timestamp": "2025-08-23 20:29:56.000",
        "source": "backend",
        "data": {
            "summary": "• Initializes an Express server on port 3000\n• Enables CORS and JSON body parsing\n• Defines endpoints:\n  ◦ /api/hello returns a hello message\n  ◦ /api/stock/:symbol fetches and returns daily stock data (date, close, volume), company name, and now also includes the most recent closing price as currentPrice for the given symbol since 2024-01-01",
            "mapping": [
                {
                    "summaryComponent": "Initializes an Express server on port 3000",
                    "codeSegments": [
                        {
                            "line": 5,
                            "code": "const app = express();"
                        },
                        {
                            "line": 6,
                            "code": "const PORT = 3000;"
                        },
                        {
                            "line": 48,
                            "code": "app.listen(PORT, \"0.0.0.0\", () => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "Enables CORS and JSON body parsing",
                    "codeSegments": [
                        {
                            "line": 8,
                            "code": "app.use(cors());"
                        },
                        {
                            "line": 9,
                            "code": "app.use(express.json());"
                        }
                    ]
                },
                {
                    "summaryComponent": "Defines endpoints:",
                    "codeSegments": [
                        {
                            "line": 11,
                            "code": "app.get(\"/api/hello\", (req, res) => {"
                        },
                        {
                            "line": 15,
                            "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "/api/hello returns a hello message",
                    "codeSegments": [
                        {
                            "line": 11,
                            "code": "app.get(\"/api/hello\", (req, res) => {"
                        },
                        {
                            "line": 12,
                            "code": "res.json({ message: \"Hello from the backend!\" });"
                        }
                    ]
                },
                {
                    "summaryComponent": "/api/stock/:symbol fetches and returns daily stock data (date, close, volume), company name, and now also includes the most recent closing price as currentPrice for the given symbol since 2024-01-01",
                    "codeSegments": [
                        {
                            "line": 15,
                            "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                        },
                        {
                            "line": 17,
                            "code": "const symbol = req.params.symbol.toUpperCase();"
                        },
                        {
                            "line": 18,
                            "code": "const data = await yahooFinance.chart(symbol, {"
                        },
                        {
                            "line": 19,
                            "code": "period1: \"2024-01-01\","
                        },
                        {
                            "line": 24,
                            "code": "const companyName = data.meta?.shortName || symbol;"
                        },
                        {
                            "line": 27,
                            "code": "const currentPrice = quotes.length > 0 ? quotes[quotes.length - 1].close : null;"
                        },
                        {
                            "line": 33,
                            "code": "data: quotes.map((q) => ({"
                        },
                        {
                            "line": 34,
                            "code": "date: q.date,"
                        },
                        {
                            "line": 35,
                            "code": "close: q.close,"
                        },
                        {
                            "line": 36,
                            "code": "volume: q.volume,"
                        }
                    ]
                }
            ],
            "code": "1: const express = require(\"express\");\n2: const cors = require(\"cors\");\n3: const yahooFinance = require(\"yahoo-finance2\").default;\n4: \n5: const app = express();\n6: const PORT = 3000;\n7: \n8: app.use(cors());\n9: app.use(express.json());\n10: \n11: app.get(\"/api/hello\", (req, res) => {\n12:   res.json({ message: \"Hello from the backend!\" });\n13: });\n14: \n15: app.get(\"/api/stock/:symbol\", async (req, res) => {\n16:   try {\n17:     const symbol = req.params.symbol.toUpperCase();\n18:     const data = await yahooFinance.chart(symbol, {\n19:       period1: \"2024-01-01\",\n20:       interval: \"1d\",\n21:     });\n22:     const quotes = data.quotes;\n23: \n24:     const companyName = data.meta?.shortName || symbol;\n25: \n26:     // Get the most recent closing price as the current price\n27:     const currentPrice = quotes.length > 0 ? quotes[quotes.length - 1].close : null;\n28: \n29:     const response = {\n30:       ticker: symbol,\n31:       name: companyName,\n32:       currentPrice: currentPrice,\n33:       data: quotes.map((q) => ({\n34:         date: q.date,\n35:         close: q.close,\n36:         volume: q.volume,\n37:       })),\n38:     };\n39: \n40:     console.log(response);\n41:     res.json(response);\n42:   } catch (err) {\n43:     console.error(err);\n44:     res.status(500).send(\"Error fetching stock data\");\n45:   }\n46: });\n47: \n48: app.listen(PORT, \"0.0.0.0\", () => {\n49:   console.log(`Server running on http://localhost:${PORT}`);\n50: });"
        },
        "event": "map_summary_code",
        "id": "6ywO7FrUVztqiaUnrETr"
    },
    {
        "timestamp": "2025-08-23 20:29:56.000",
        "source": "backend",
        "data": {
            "summary": "This code sets up an Express server with CORS and JSON support, offering endpoints for a hello message and stock data retrieval, now including the most recent closing price as the current price in the stock data response.",
            "mapping": [
                {
                    "summaryComponent": "sets up an Express server",
                    "codeSegments": [
                        {
                            "line": 1,
                            "code": "const express = require(\"express\");"
                        },
                        {
                            "line": 5,
                            "code": "const app = express();"
                        },
                        {
                            "line": 48,
                            "code": "app.listen(PORT, \"0.0.0.0\", () => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "with CORS and JSON support",
                    "codeSegments": [
                        {
                            "line": 8,
                            "code": "app.use(cors());"
                        },
                        {
                            "line": 9,
                            "code": "app.use(express.json());"
                        }
                    ]
                },
                {
                    "summaryComponent": "offering endpoints for a hello message",
                    "codeSegments": [
                        {
                            "line": 11,
                            "code": "app.get(\"/api/hello\", (req, res) => {"
                        },
                        {
                            "line": 12,
                            "code": "res.json({ message: \"Hello from the backend!\" });"
                        }
                    ]
                },
                {
                    "summaryComponent": "and stock data retrieval",
                    "codeSegments": [
                        {
                            "line": 15,
                            "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "now including the most recent closing price as the current price",
                    "codeSegments": [
                        {
                            "line": 27,
                            "code": "const currentPrice = quotes.length > 0 ? quotes[quotes.length - 1].close : null;"
                        }
                    ]
                },
                {
                    "summaryComponent": "in the stock data response",
                    "codeSegments": [
                        {
                            "line": 29,
                            "code": "const response = {"
                        },
                        {
                            "line": 32,
                            "code": "currentPrice: currentPrice,"
                        },
                        {
                            "line": 41,
                            "code": "res.json(response);"
                        }
                    ]
                }
            ],
            "code": "1: const express = require(\"express\");\n2: const cors = require(\"cors\");\n3: const yahooFinance = require(\"yahoo-finance2\").default;\n4: \n5: const app = express();\n6: const PORT = 3000;\n7: \n8: app.use(cors());\n9: app.use(express.json());\n10: \n11: app.get(\"/api/hello\", (req, res) => {\n12:   res.json({ message: \"Hello from the backend!\" });\n13: });\n14: \n15: app.get(\"/api/stock/:symbol\", async (req, res) => {\n16:   try {\n17:     const symbol = req.params.symbol.toUpperCase();\n18:     const data = await yahooFinance.chart(symbol, {\n19:       period1: \"2024-01-01\",\n20:       interval: \"1d\",\n21:     });\n22:     const quotes = data.quotes;\n23: \n24:     const companyName = data.meta?.shortName || symbol;\n25: \n26:     // Get the most recent closing price as the current price\n27:     const currentPrice = quotes.length > 0 ? quotes[quotes.length - 1].close : null;\n28: \n29:     const response = {\n30:       ticker: symbol,\n31:       name: companyName,\n32:       currentPrice: currentPrice,\n33:       data: quotes.map((q) => ({\n34:         date: q.date,\n35:         close: q.close,\n36:         volume: q.volume,\n37:       })),\n38:     };\n39: \n40:     console.log(response);\n41:     res.json(response);\n42:   } catch (err) {\n43:     console.error(err);\n44:     res.status(500).send(\"Error fetching stock data\");\n45:   }\n46: });\n47: \n48: app.listen(PORT, \"0.0.0.0\", () => {\n49:   console.log(`Server running on http://localhost:${PORT}`);\n50: });"
        },
        "event": "map_summary_code",
        "id": "EsZA6HNVd9GXEgXzQPHY"
    },
    {
        "timestamp": "2025-08-23 20:29:57.000",
        "source": "backend",
        "data": {
            "summary": "The code initializes an Express server running on port 3000, enabling CORS and JSON parsing. It defines two endpoints: one returns a simple hello message, and the other fetches stock data for a given symbol using the yahoo-finance2 library. The stock endpoint now returns the ticker, company name, the most recent closing price as currentPrice, and a list of daily closing prices and volumes since 2024-01-01.",
            "mapping": [
                {
                    "summaryComponent": "initializes an Express server running on port 3000",
                    "codeSegments": [
                        {
                            "line": 5,
                            "code": "const app = express();"
                        },
                        {
                            "line": 6,
                            "code": "const PORT = 3000;"
                        },
                        {
                            "line": 48,
                            "code": "app.listen(PORT, \"0.0.0.0\", () => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "enabling CORS",
                    "codeSegments": [
                        {
                            "line": 8,
                            "code": "app.use(cors());"
                        }
                    ]
                },
                {
                    "summaryComponent": "JSON parsing",
                    "codeSegments": [
                        {
                            "line": 9,
                            "code": "app.use(express.json());"
                        }
                    ]
                },
                {
                    "summaryComponent": "defines two endpoints",
                    "codeSegments": [
                        {
                            "line": 11,
                            "code": "app.get(\"/api/hello\", (req, res) => {"
                        },
                        {
                            "line": 15,
                            "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "one returns a simple hello message",
                    "codeSegments": [
                        {
                            "line": 12,
                            "code": "res.json({ message: \"Hello from the backend!\" });"
                        }
                    ]
                },
                {
                    "summaryComponent": "the other fetches stock data for a given symbol using the yahoo-finance2 library",
                    "codeSegments": [
                        {
                            "line": 3,
                            "code": "const yahooFinance = require(\"yahoo-finance2\").default;"
                        },
                        {
                            "line": 18,
                            "code": "const data = await yahooFinance.chart(symbol, {"
                        }
                    ]
                },
                {
                    "summaryComponent": "returns the ticker",
                    "codeSegments": [
                        {
                            "line": 30,
                            "code": "ticker: symbol,"
                        }
                    ]
                },
                {
                    "summaryComponent": "company name",
                    "codeSegments": [
                        {
                            "line": 31,
                            "code": "name: companyName,"
                        }
                    ]
                },
                {
                    "summaryComponent": "the most recent closing price as currentPrice",
                    "codeSegments": [
                        {
                            "line": 27,
                            "code": "const currentPrice = quotes.length > 0 ? quotes[quotes.length - 1].close : null;"
                        },
                        {
                            "line": 32,
                            "code": "currentPrice: currentPrice,"
                        }
                    ]
                },
                {
                    "summaryComponent": "a list of daily closing prices and volumes since 2024-01-01",
                    "codeSegments": [
                        {
                            "line": 33,
                            "code": "data: quotes.map((q) => ({"
                        },
                        {
                            "line": 34,
                            "code": "date: q.date,"
                        },
                        {
                            "line": 35,
                            "code": "close: q.close,"
                        },
                        {
                            "line": 36,
                            "code": "volume: q.volume,"
                        },
                        {
                            "line": 19,
                            "code": "period1: \"2024-01-01\","
                        }
                    ]
                }
            ],
            "code": "1: const express = require(\"express\");\n2: const cors = require(\"cors\");\n3: const yahooFinance = require(\"yahoo-finance2\").default;\n4: \n5: const app = express();\n6: const PORT = 3000;\n7: \n8: app.use(cors());\n9: app.use(express.json());\n10: \n11: app.get(\"/api/hello\", (req, res) => {\n12:   res.json({ message: \"Hello from the backend!\" });\n13: });\n14: \n15: app.get(\"/api/stock/:symbol\", async (req, res) => {\n16:   try {\n17:     const symbol = req.params.symbol.toUpperCase();\n18:     const data = await yahooFinance.chart(symbol, {\n19:       period1: \"2024-01-01\",\n20:       interval: \"1d\",\n21:     });\n22:     const quotes = data.quotes;\n23: \n24:     const companyName = data.meta?.shortName || symbol;\n25: \n26:     // Get the most recent closing price as the current price\n27:     const currentPrice = quotes.length > 0 ? quotes[quotes.length - 1].close : null;\n28: \n29:     const response = {\n30:       ticker: symbol,\n31:       name: companyName,\n32:       currentPrice: currentPrice,\n33:       data: quotes.map((q) => ({\n34:         date: q.date,\n35:         close: q.close,\n36:         volume: q.volume,\n37:       })),\n38:     };\n39: \n40:     console.log(response);\n41:     res.json(response);\n42:   } catch (err) {\n43:     console.error(err);\n44:     res.status(500).send(\"Error fetching stock data\");\n45:   }\n46: });\n47: \n48: app.listen(PORT, \"0.0.0.0\", () => {\n49:   console.log(`Server running on http://localhost:${PORT}`);\n50: });"
        },
        "event": "map_summary_code",
        "id": "qGnDh1bRMsT4fRlhljzL"
    },
    {
        "timestamp": "2025-08-23 20:29:59.000",
        "source": "backend",
        "data": {
            "summary": "This code creates an Express server that listens on port 3000 and uses CORS and JSON middleware. It exposes two endpoints: '/api/hello', which responds with a simple JSON greeting, and '/api/stock/:symbol', which retrieves daily stock data for a specified symbol from Yahoo Finance starting from January 1, 2024. The stock endpoint processes the symbol, fetches chart data, extracts the company name and relevant quote information (date, close, volume), and now also determines the most recent closing price as currentPrice, returning it in a structured JSON response. Errors during data retrieval are logged and result in a 500 error response.",
            "mapping": [
                {
                    "summaryComponent": "creates an Express server",
                    "codeSegments": [
                        {
                            "line": 1,
                            "code": "const express = require(\"express\");"
                        },
                        {
                            "line": 5,
                            "code": "const app = express();"
                        }
                    ]
                },
                {
                    "summaryComponent": "listens on port 3000",
                    "codeSegments": [
                        {
                            "line": 6,
                            "code": "const PORT = 3000;"
                        },
                        {
                            "line": 48,
                            "code": "app.listen(PORT, \"0.0.0.0\", () => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "uses CORS and JSON middleware",
                    "codeSegments": [
                        {
                            "line": 8,
                            "code": "app.use(cors());"
                        },
                        {
                            "line": 9,
                            "code": "app.use(express.json());"
                        }
                    ]
                },
                {
                    "summaryComponent": "exposes two endpoints",
                    "codeSegments": [
                        {
                            "line": 11,
                            "code": "app.get(\"/api/hello\", (req, res) => {"
                        },
                        {
                            "line": 15,
                            "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "'/api/hello', which responds with a simple JSON greeting",
                    "codeSegments": [
                        {
                            "line": 11,
                            "code": "app.get(\"/api/hello\", (req, res) => {"
                        },
                        {
                            "line": 12,
                            "code": "res.json({ message: \"Hello from the backend!\" });"
                        }
                    ]
                },
                {
                    "summaryComponent": "'/api/stock/:symbol', which retrieves daily stock data for a specified symbol from Yahoo Finance starting from January 1, 2024",
                    "codeSegments": [
                        {
                            "line": 15,
                            "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                        },
                        {
                            "line": 17,
                            "code": "const symbol = req.params.symbol.toUpperCase();"
                        },
                        {
                            "line": 18,
                            "code": "const data = await yahooFinance.chart(symbol, {"
                        },
                        {
                            "line": 19,
                            "code": "period1: \"2024-01-01\","
                        },
                        {
                            "line": 20,
                            "code": "interval: \"1d\","
                        }
                    ]
                },
                {
                    "summaryComponent": "processes the symbol",
                    "codeSegments": [
                        {
                            "line": 17,
                            "code": "const symbol = req.params.symbol.toUpperCase();"
                        }
                    ]
                },
                {
                    "summaryComponent": "fetches chart data",
                    "codeSegments": [
                        {
                            "line": 18,
                            "code": "const data = await yahooFinance.chart(symbol, {"
                        }
                    ]
                },
                {
                    "summaryComponent": "extracts the company name and relevant quote information (date, close, volume)",
                    "codeSegments": [
                        {
                            "line": 24,
                            "code": "const companyName = data.meta?.shortName || symbol;"
                        },
                        {
                            "line": 22,
                            "code": "const quotes = data.quotes;"
                        },
                        {
                            "line": 33,
                            "code": "data: quotes.map((q) => ({"
                        },
                        {
                            "line": 34,
                            "code": "date: q.date,"
                        },
                        {
                            "line": 35,
                            "code": "close: q.close,"
                        },
                        {
                            "line": 36,
                            "code": "volume: q.volume,"
                        }
                    ]
                },
                {
                    "summaryComponent": "determines the most recent closing price as currentPrice, returning it in a structured JSON response",
                    "codeSegments": [
                        {
                            "line": 27,
                            "code": "const currentPrice = quotes.length > 0 ? quotes[quotes.length - 1].close : null;"
                        },
                        {
                            "line": 29,
                            "code": "const response = {"
                        },
                        {
                            "line": 32,
                            "code": "currentPrice: currentPrice,"
                        },
                        {
                            "line": 41,
                            "code": "res.json(response);"
                        }
                    ]
                },
                {
                    "summaryComponent": "Errors during data retrieval are logged and result in a 500 error response",
                    "codeSegments": [
                        {
                            "line": 43,
                            "code": "console.error(err);"
                        },
                        {
                            "line": 44,
                            "code": "res.status(500).send(\"Error fetching stock data\");"
                        }
                    ]
                }
            ],
            "code": "1: const express = require(\"express\");\n2: const cors = require(\"cors\");\n3: const yahooFinance = require(\"yahoo-finance2\").default;\n4: \n5: const app = express();\n6: const PORT = 3000;\n7: \n8: app.use(cors());\n9: app.use(express.json());\n10: \n11: app.get(\"/api/hello\", (req, res) => {\n12:   res.json({ message: \"Hello from the backend!\" });\n13: });\n14: \n15: app.get(\"/api/stock/:symbol\", async (req, res) => {\n16:   try {\n17:     const symbol = req.params.symbol.toUpperCase();\n18:     const data = await yahooFinance.chart(symbol, {\n19:       period1: \"2024-01-01\",\n20:       interval: \"1d\",\n21:     });\n22:     const quotes = data.quotes;\n23: \n24:     const companyName = data.meta?.shortName || symbol;\n25: \n26:     // Get the most recent closing price as the current price\n27:     const currentPrice = quotes.length > 0 ? quotes[quotes.length - 1].close : null;\n28: \n29:     const response = {\n30:       ticker: symbol,\n31:       name: companyName,\n32:       currentPrice: currentPrice,\n33:       data: quotes.map((q) => ({\n34:         date: q.date,\n35:         close: q.close,\n36:         volume: q.volume,\n37:       })),\n38:     };\n39: \n40:     console.log(response);\n41:     res.json(response);\n42:   } catch (err) {\n43:     console.error(err);\n44:     res.status(500).send(\"Error fetching stock data\");\n45:   }\n46: });\n47: \n48: app.listen(PORT, \"0.0.0.0\", () => {\n49:   console.log(`Server running on http://localhost:${PORT}`);\n50: });"
        },
        "event": "map_summary_code",
        "id": "0BEDQPWzG9P8LQ6lWjR4"
    },
    {
        "timestamp": "2025-08-23 20:29:59.000",
        "source": "backend",
        "data": {
            "summary": "• Sets up an Express server listening on port 3000\n• Middleware configuration:\n  ◦ Enables CORS for cross-origin requests\n  ◦ Parses incoming JSON requests\n• Defines two main endpoints:\n  ◦ /api/hello\n    ▪ Responds with a JSON hello message\n  ◦ /api/stock/:symbol\n    ▪ Extracts and uppercases the stock symbol from the URL\n    ▪ Fetches daily stock chart data from Yahoo Finance starting 2024-01-01\n    ▪ Extracts company name (if available) and maps quotes to include date, close, and volume\n    ▪ Determines the most recent closing price as currentPrice and includes it in the response\n    ▪ Returns a structured JSON object with ticker, name, currentPrice, and data array\n    ▪ Handles errors by logging and returning a 500 error\n• Logs server startup and stock responses to the console",
            "mapping": [
                {
                    "summaryComponent": "Sets up an Express server listening on port 3000",
                    "codeSegments": [
                        {
                            "line": 5,
                            "code": "const app = express();"
                        },
                        {
                            "line": 6,
                            "code": "const PORT = 3000;"
                        },
                        {
                            "line": 48,
                            "code": "app.listen(PORT, \"0.0.0.0\", () => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "Enables CORS for cross-origin requests",
                    "codeSegments": [
                        {
                            "line": 8,
                            "code": "app.use(cors());"
                        }
                    ]
                },
                {
                    "summaryComponent": "Parses incoming JSON requests",
                    "codeSegments": [
                        {
                            "line": 9,
                            "code": "app.use(express.json());"
                        }
                    ]
                },
                {
                    "summaryComponent": "/api/hello",
                    "codeSegments": [
                        {
                            "line": 11,
                            "code": "app.get(\"/api/hello\", (req, res) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "Responds with a JSON hello message",
                    "codeSegments": [
                        {
                            "line": 12,
                            "code": "res.json({ message: \"Hello from the backend!\" });"
                        }
                    ]
                },
                {
                    "summaryComponent": "/api/stock/:symbol",
                    "codeSegments": [
                        {
                            "line": 15,
                            "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "Extracts and uppercases the stock symbol from the URL",
                    "codeSegments": [
                        {
                            "line": 17,
                            "code": "const symbol = req.params.symbol.toUpperCase();"
                        }
                    ]
                },
                {
                    "summaryComponent": "Fetches daily stock chart data from Yahoo Finance starting 2024-01-01",
                    "codeSegments": [
                        {
                            "line": 18,
                            "code": "const data = await yahooFinance.chart(symbol, {"
                        },
                        {
                            "line": 19,
                            "code": "period1: \"2024-01-01\","
                        },
                        {
                            "line": 20,
                            "code": "interval: \"1d\","
                        }
                    ]
                },
                {
                    "summaryComponent": "Extracts company name (if available) and maps quotes to include date, close, and volume",
                    "codeSegments": [
                        {
                            "line": 24,
                            "code": "const companyName = data.meta?.shortName || symbol;"
                        },
                        {
                            "line": 33,
                            "code": "data: quotes.map((q) => ({"
                        },
                        {
                            "line": 34,
                            "code": "date: q.date,"
                        },
                        {
                            "line": 35,
                            "code": "close: q.close,"
                        },
                        {
                            "line": 36,
                            "code": "volume: q.volume,"
                        }
                    ]
                },
                {
                    "summaryComponent": "Determines the most recent closing price as currentPrice and includes it in the response",
                    "codeSegments": [
                        {
                            "line": 27,
                            "code": "const currentPrice = quotes.length > 0 ? quotes[quotes.length - 1].close : null;"
                        },
                        {
                            "line": 32,
                            "code": "currentPrice: currentPrice,"
                        }
                    ]
                },
                {
                    "summaryComponent": "Returns a structured JSON object with ticker, name, currentPrice, and data array",
                    "codeSegments": [
                        {
                            "line": 29,
                            "code": "const response = {"
                        },
                        {
                            "line": 30,
                            "code": "ticker: symbol,"
                        },
                        {
                            "line": 31,
                            "code": "name: companyName,"
                        },
                        {
                            "line": 32,
                            "code": "currentPrice: currentPrice,"
                        },
                        {
                            "line": 33,
                            "code": "data: quotes.map((q) => ({"
                        },
                        {
                            "line": 41,
                            "code": "res.json(response);"
                        }
                    ]
                },
                {
                    "summaryComponent": "Handles errors by logging and returning a 500 error",
                    "codeSegments": [
                        {
                            "line": 43,
                            "code": "console.error(err);"
                        },
                        {
                            "line": 44,
                            "code": "res.status(500).send(\"Error fetching stock data\");"
                        }
                    ]
                },
                {
                    "summaryComponent": "Logs server startup and stock responses to the console",
                    "codeSegments": [
                        {
                            "line": 40,
                            "code": "console.log(response);"
                        },
                        {
                            "line": 49,
                            "code": "console.log(`Server running on http://localhost:${PORT}`);"
                        }
                    ]
                }
            ],
            "code": "1: const express = require(\"express\");\n2: const cors = require(\"cors\");\n3: const yahooFinance = require(\"yahoo-finance2\").default;\n4: \n5: const app = express();\n6: const PORT = 3000;\n7: \n8: app.use(cors());\n9: app.use(express.json());\n10: \n11: app.get(\"/api/hello\", (req, res) => {\n12:   res.json({ message: \"Hello from the backend!\" });\n13: });\n14: \n15: app.get(\"/api/stock/:symbol\", async (req, res) => {\n16:   try {\n17:     const symbol = req.params.symbol.toUpperCase();\n18:     const data = await yahooFinance.chart(symbol, {\n19:       period1: \"2024-01-01\",\n20:       interval: \"1d\",\n21:     });\n22:     const quotes = data.quotes;\n23: \n24:     const companyName = data.meta?.shortName || symbol;\n25: \n26:     // Get the most recent closing price as the current price\n27:     const currentPrice = quotes.length > 0 ? quotes[quotes.length - 1].close : null;\n28: \n29:     const response = {\n30:       ticker: symbol,\n31:       name: companyName,\n32:       currentPrice: currentPrice,\n33:       data: quotes.map((q) => ({\n34:         date: q.date,\n35:         close: q.close,\n36:         volume: q.volume,\n37:       })),\n38:     };\n39: \n40:     console.log(response);\n41:     res.json(response);\n42:   } catch (err) {\n43:     console.error(err);\n44:     res.status(500).send(\"Error fetching stock data\");\n45:   }\n46: });\n47: \n48: app.listen(PORT, \"0.0.0.0\", () => {\n49:   console.log(`Server running on http://localhost:${PORT}`);\n50: });"
        },
        "event": "map_summary_code",
        "id": "Q90usyqA030IZXGtFdL5"
    },
    {
        "timestamp": "2025-08-23 20:30:07.000",
        "source": "frontend",
        "data": {
            "before_section_id": "0b5f0ac0-2e17-46a7-9f52-d4be626ff421",
            "after_section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b"
        },
        "event": "autotransit_section",
        "id": "jIUGPKhuev9nR3iQk6BX"
    },
    {
        "timestamp": "2025-08-23 20:30:07.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "section_data": {
                "summaryData": {
                    "low_unstructured": "This code sets up an Express server with CORS and JSON support, offering endpoints for a hello message and stock data retrieval, now including the most recent closing price as the current price in the stock data response.",
                    "low_structured": "• Sets up an Express server with CORS and JSON parsing\n• Provides endpoints for a hello message and stock data, with the stock data now including the most recent closing price as currentPrice",
                    "medium_unstructured": "The code initializes an Express server running on port 3000, enabling CORS and JSON parsing. It defines two endpoints: one returns a simple hello message, and the other fetches stock data for a given symbol using the yahoo-finance2 library. The stock endpoint now returns the ticker, company name, the most recent closing price as currentPrice, and a list of daily closing prices and volumes since 2024-01-01.",
                    "high_structured": "• Sets up an Express server listening on port 3000\n• Middleware configuration:\n  ◦ Enables CORS for cross-origin requests\n  ◦ Parses incoming JSON requests\n• Defines two main endpoints:\n  ◦ /api/hello\n    ▪ Responds with a JSON hello message\n  ◦ /api/stock/:symbol\n    ▪ Extracts and uppercases the stock symbol from the URL\n    ▪ Fetches daily stock chart data from Yahoo Finance starting 2024-01-01\n    ▪ Extracts company name (if available) and maps quotes to include date, close, and volume\n    ▪ Determines the most recent closing price as currentPrice and includes it in the response\n    ▪ Returns a structured JSON object with ticker, name, currentPrice, and data array\n    ▪ Handles errors by logging and returning a 500 error\n• Logs server startup and stock responses to the console",
                    "medium_structured": "• Initializes an Express server on port 3000\n• Enables CORS and JSON body parsing\n• Defines endpoints:\n  ◦ /api/hello returns a hello message\n  ◦ /api/stock/:symbol fetches and returns daily stock data (date, close, volume), company name, and now also includes the most recent closing price as currentPrice for the given symbol since 2024-01-01",
                    "title": "Express Server Providing Stock Data with Current Price and a Hello Endpoint",
                    "high_unstructured": "This code creates an Express server that listens on port 3000 and uses CORS and JSON middleware. It exposes two endpoints: '/api/hello', which responds with a simple JSON greeting, and '/api/stock/:symbol', which retrieves daily stock data for a specified symbol from Yahoo Finance starting from January 1, 2024. The stock endpoint processes the symbol, fetches chart data, extracts the company name and relevant quote information (date, close, volume), and now also determines the most recent closing price as currentPrice, returning it in a structured JSON response. Errors during data retrieval are logged and result in a 500 error response."
                },
                "metadata": {
                    "offset": 0,
                    "fullPath": "/project/workspace/server/index.js",
                    "id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
                    "filename": "index.js",
                    "originalCode": "const express = require(\"express\");\nconst cors = require(\"cors\");\nconst yahooFinance = require(\"yahoo-finance2\").default;\n\nconst app = express();\nconst PORT = 3000;\n\napp.use(cors());\napp.use(express.json());\n\napp.get(\"/api/hello\", (req, res) => {\n  res.json({ message: \"Hello from the backend!\" });\n});\n\napp.get(\"/api/stock/:symbol\", async (req, res) => {\n  try {\n    const symbol = req.params.symbol.toUpperCase();\n    const data = await yahooFinance.chart(symbol, {\n      period1: \"2024-01-01\",\n      interval: \"1d\",\n    });\n    const quotes = data.quotes;\n\n    const companyName = data.meta?.shortName || symbol;\n\n    // Get the most recent closing price as the current price\n    const currentPrice = quotes.length > 0 ? quotes[quotes.length - 1].close : null;\n\n    const response = {\n      ticker: symbol,\n      name: companyName,\n      currentPrice: currentPrice,\n      data: quotes.map((q) => ({\n        date: q.date,\n        close: q.close,\n        volume: q.volume,\n      })),\n    };\n\n    console.log(response);\n    res.json(response);\n  } catch (err) {\n    console.error(err);\n    res.status(500).send(\"Error fetching stock data\");\n  }\n});\n\napp.listen(PORT, \"0.0.0.0\", () => {\n  console.log(`Server running on http://localhost:${PORT}`);\n});"
                },
                "createdAt": 1755966599000,
                "selectedStructured": "unstructured",
                "editPromptDetailLevel": null,
                "editPromptStructured": null,
                "lines": [
                    1,
                    50
                ],
                "summaryMappings": {
                    "low_unstructured": [
                        {
                            "summaryComponent": "sets up an Express server",
                            "codeSegments": [
                                {
                                    "line": 1,
                                    "code": "const express = require(\"express\");"
                                },
                                {
                                    "line": 5,
                                    "code": "const app = express();"
                                },
                                {
                                    "line": 48,
                                    "code": "app.listen(PORT, \"0.0.0.0\", () => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "with CORS and JSON support",
                            "codeSegments": [
                                {
                                    "line": 8,
                                    "code": "app.use(cors());"
                                },
                                {
                                    "line": 9,
                                    "code": "app.use(express.json());"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "offering endpoints for a hello message",
                            "codeSegments": [
                                {
                                    "line": 11,
                                    "code": "app.get(\"/api/hello\", (req, res) => {"
                                },
                                {
                                    "line": 12,
                                    "code": "res.json({ message: \"Hello from the backend!\" });"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "and stock data retrieval",
                            "codeSegments": [
                                {
                                    "line": 15,
                                    "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "now including the most recent closing price as the current price",
                            "codeSegments": [
                                {
                                    "line": 27,
                                    "code": "const currentPrice = quotes.length > 0 ? quotes[quotes.length - 1].close : null;"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "in the stock data response",
                            "codeSegments": [
                                {
                                    "line": 29,
                                    "code": "const response = {"
                                },
                                {
                                    "line": 32,
                                    "code": "currentPrice: currentPrice,"
                                },
                                {
                                    "line": 41,
                                    "code": "res.json(response);"
                                }
                            ]
                        }
                    ],
                    "low_structured": [
                        {
                            "summaryComponent": "Sets up an Express server with CORS and JSON parsing",
                            "codeSegments": [
                                {
                                    "line": 1,
                                    "code": "const express = require(\"express\");"
                                },
                                {
                                    "line": 2,
                                    "code": "const cors = require(\"cors\");"
                                },
                                {
                                    "line": 5,
                                    "code": "const app = express();"
                                },
                                {
                                    "line": 8,
                                    "code": "app.use(cors());"
                                },
                                {
                                    "line": 9,
                                    "code": "app.use(express.json());"
                                },
                                {
                                    "line": 48,
                                    "code": "app.listen(PORT, \"0.0.0.0\", () => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Provides endpoints for a hello message and stock data",
                            "codeSegments": [
                                {
                                    "line": 11,
                                    "code": "app.get(\"/api/hello\", (req, res) => {"
                                },
                                {
                                    "line": 15,
                                    "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "with the stock data now including the most recent closing price as currentPrice",
                            "codeSegments": [
                                {
                                    "line": 26,
                                    "code": "// Get the most recent closing price as the current price"
                                },
                                {
                                    "line": 27,
                                    "code": "const currentPrice = quotes.length > 0 ? quotes[quotes.length - 1].close : null;"
                                },
                                {
                                    "line": 32,
                                    "code": "currentPrice: currentPrice,"
                                }
                            ]
                        }
                    ],
                    "medium_unstructured": [
                        {
                            "summaryComponent": "initializes an Express server running on port 3000",
                            "codeSegments": [
                                {
                                    "line": 5,
                                    "code": "const app = express();"
                                },
                                {
                                    "line": 6,
                                    "code": "const PORT = 3000;"
                                },
                                {
                                    "line": 48,
                                    "code": "app.listen(PORT, \"0.0.0.0\", () => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "enabling CORS",
                            "codeSegments": [
                                {
                                    "line": 8,
                                    "code": "app.use(cors());"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "JSON parsing",
                            "codeSegments": [
                                {
                                    "line": 9,
                                    "code": "app.use(express.json());"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "defines two endpoints",
                            "codeSegments": [
                                {
                                    "line": 11,
                                    "code": "app.get(\"/api/hello\", (req, res) => {"
                                },
                                {
                                    "line": 15,
                                    "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "one returns a simple hello message",
                            "codeSegments": [
                                {
                                    "line": 12,
                                    "code": "res.json({ message: \"Hello from the backend!\" });"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "the other fetches stock data for a given symbol using the yahoo-finance2 library",
                            "codeSegments": [
                                {
                                    "line": 3,
                                    "code": "const yahooFinance = require(\"yahoo-finance2\").default;"
                                },
                                {
                                    "line": 18,
                                    "code": "const data = await yahooFinance.chart(symbol, {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "returns the ticker",
                            "codeSegments": [
                                {
                                    "line": 30,
                                    "code": "ticker: symbol,"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "company name",
                            "codeSegments": [
                                {
                                    "line": 31,
                                    "code": "name: companyName,"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "the most recent closing price as currentPrice",
                            "codeSegments": [
                                {
                                    "line": 27,
                                    "code": "const currentPrice = quotes.length > 0 ? quotes[quotes.length - 1].close : null;"
                                },
                                {
                                    "line": 32,
                                    "code": "currentPrice: currentPrice,"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "a list of daily closing prices and volumes since 2024-01-01",
                            "codeSegments": [
                                {
                                    "line": 33,
                                    "code": "data: quotes.map((q) => ({"
                                },
                                {
                                    "line": 34,
                                    "code": "date: q.date,"
                                },
                                {
                                    "line": 35,
                                    "code": "close: q.close,"
                                },
                                {
                                    "line": 36,
                                    "code": "volume: q.volume,"
                                },
                                {
                                    "line": 19,
                                    "code": "period1: \"2024-01-01\","
                                }
                            ]
                        }
                    ],
                    "high_structured": [
                        {
                            "summaryComponent": "Sets up an Express server listening on port 3000",
                            "codeSegments": [
                                {
                                    "line": 5,
                                    "code": "const app = express();"
                                },
                                {
                                    "line": 6,
                                    "code": "const PORT = 3000;"
                                },
                                {
                                    "line": 48,
                                    "code": "app.listen(PORT, \"0.0.0.0\", () => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Enables CORS for cross-origin requests",
                            "codeSegments": [
                                {
                                    "line": 8,
                                    "code": "app.use(cors());"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Parses incoming JSON requests",
                            "codeSegments": [
                                {
                                    "line": 9,
                                    "code": "app.use(express.json());"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "/api/hello",
                            "codeSegments": [
                                {
                                    "line": 11,
                                    "code": "app.get(\"/api/hello\", (req, res) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Responds with a JSON hello message",
                            "codeSegments": [
                                {
                                    "line": 12,
                                    "code": "res.json({ message: \"Hello from the backend!\" });"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "/api/stock/:symbol",
                            "codeSegments": [
                                {
                                    "line": 15,
                                    "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Extracts and uppercases the stock symbol from the URL",
                            "codeSegments": [
                                {
                                    "line": 17,
                                    "code": "const symbol = req.params.symbol.toUpperCase();"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Fetches daily stock chart data from Yahoo Finance starting 2024-01-01",
                            "codeSegments": [
                                {
                                    "line": 18,
                                    "code": "const data = await yahooFinance.chart(symbol, {"
                                },
                                {
                                    "line": 19,
                                    "code": "period1: \"2024-01-01\","
                                },
                                {
                                    "line": 20,
                                    "code": "interval: \"1d\","
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Extracts company name (if available) and maps quotes to include date, close, and volume",
                            "codeSegments": [
                                {
                                    "line": 24,
                                    "code": "const companyName = data.meta?.shortName || symbol;"
                                },
                                {
                                    "line": 33,
                                    "code": "data: quotes.map((q) => ({"
                                },
                                {
                                    "line": 34,
                                    "code": "date: q.date,"
                                },
                                {
                                    "line": 35,
                                    "code": "close: q.close,"
                                },
                                {
                                    "line": 36,
                                    "code": "volume: q.volume,"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Determines the most recent closing price as currentPrice and includes it in the response",
                            "codeSegments": [
                                {
                                    "line": 27,
                                    "code": "const currentPrice = quotes.length > 0 ? quotes[quotes.length - 1].close : null;"
                                },
                                {
                                    "line": 32,
                                    "code": "currentPrice: currentPrice,"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Returns a structured JSON object with ticker, name, currentPrice, and data array",
                            "codeSegments": [
                                {
                                    "line": 29,
                                    "code": "const response = {"
                                },
                                {
                                    "line": 30,
                                    "code": "ticker: symbol,"
                                },
                                {
                                    "line": 31,
                                    "code": "name: companyName,"
                                },
                                {
                                    "line": 32,
                                    "code": "currentPrice: currentPrice,"
                                },
                                {
                                    "line": 33,
                                    "code": "data: quotes.map((q) => ({"
                                },
                                {
                                    "line": 41,
                                    "code": "res.json(response);"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Handles errors by logging and returning a 500 error",
                            "codeSegments": [
                                {
                                    "line": 43,
                                    "code": "console.error(err);"
                                },
                                {
                                    "line": 44,
                                    "code": "res.status(500).send(\"Error fetching stock data\");"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Logs server startup and stock responses to the console",
                            "codeSegments": [
                                {
                                    "line": 40,
                                    "code": "console.log(response);"
                                },
                                {
                                    "line": 49,
                                    "code": "console.log(`Server running on http://localhost:${PORT}`);"
                                }
                            ]
                        }
                    ],
                    "medium_structured": [
                        {
                            "summaryComponent": "Initializes an Express server on port 3000",
                            "codeSegments": [
                                {
                                    "line": 5,
                                    "code": "const app = express();"
                                },
                                {
                                    "line": 6,
                                    "code": "const PORT = 3000;"
                                },
                                {
                                    "line": 48,
                                    "code": "app.listen(PORT, \"0.0.0.0\", () => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Enables CORS and JSON body parsing",
                            "codeSegments": [
                                {
                                    "line": 8,
                                    "code": "app.use(cors());"
                                },
                                {
                                    "line": 9,
                                    "code": "app.use(express.json());"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Defines endpoints:",
                            "codeSegments": [
                                {
                                    "line": 11,
                                    "code": "app.get(\"/api/hello\", (req, res) => {"
                                },
                                {
                                    "line": 15,
                                    "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "/api/hello returns a hello message",
                            "codeSegments": [
                                {
                                    "line": 11,
                                    "code": "app.get(\"/api/hello\", (req, res) => {"
                                },
                                {
                                    "line": 12,
                                    "code": "res.json({ message: \"Hello from the backend!\" });"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "/api/stock/:symbol fetches and returns daily stock data (date, close, volume), company name, and now also includes the most recent closing price as currentPrice for the given symbol since 2024-01-01",
                            "codeSegments": [
                                {
                                    "line": 15,
                                    "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                                },
                                {
                                    "line": 17,
                                    "code": "const symbol = req.params.symbol.toUpperCase();"
                                },
                                {
                                    "line": 18,
                                    "code": "const data = await yahooFinance.chart(symbol, {"
                                },
                                {
                                    "line": 19,
                                    "code": "period1: \"2024-01-01\","
                                },
                                {
                                    "line": 24,
                                    "code": "const companyName = data.meta?.shortName || symbol;"
                                },
                                {
                                    "line": 27,
                                    "code": "const currentPrice = quotes.length > 0 ? quotes[quotes.length - 1].close : null;"
                                },
                                {
                                    "line": 33,
                                    "code": "data: quotes.map((q) => ({"
                                },
                                {
                                    "line": 34,
                                    "code": "date: q.date,"
                                },
                                {
                                    "line": 35,
                                    "code": "close: q.close,"
                                },
                                {
                                    "line": 36,
                                    "code": "volume: q.volume,"
                                }
                            ]
                        }
                    ],
                    "high_unstructured": [
                        {
                            "summaryComponent": "creates an Express server",
                            "codeSegments": [
                                {
                                    "line": 1,
                                    "code": "const express = require(\"express\");"
                                },
                                {
                                    "line": 5,
                                    "code": "const app = express();"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "listens on port 3000",
                            "codeSegments": [
                                {
                                    "line": 6,
                                    "code": "const PORT = 3000;"
                                },
                                {
                                    "line": 48,
                                    "code": "app.listen(PORT, \"0.0.0.0\", () => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "uses CORS and JSON middleware",
                            "codeSegments": [
                                {
                                    "line": 8,
                                    "code": "app.use(cors());"
                                },
                                {
                                    "line": 9,
                                    "code": "app.use(express.json());"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "exposes two endpoints",
                            "codeSegments": [
                                {
                                    "line": 11,
                                    "code": "app.get(\"/api/hello\", (req, res) => {"
                                },
                                {
                                    "line": 15,
                                    "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "'/api/hello', which responds with a simple JSON greeting",
                            "codeSegments": [
                                {
                                    "line": 11,
                                    "code": "app.get(\"/api/hello\", (req, res) => {"
                                },
                                {
                                    "line": 12,
                                    "code": "res.json({ message: \"Hello from the backend!\" });"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "'/api/stock/:symbol', which retrieves daily stock data for a specified symbol from Yahoo Finance starting from January 1, 2024",
                            "codeSegments": [
                                {
                                    "line": 15,
                                    "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                                },
                                {
                                    "line": 17,
                                    "code": "const symbol = req.params.symbol.toUpperCase();"
                                },
                                {
                                    "line": 18,
                                    "code": "const data = await yahooFinance.chart(symbol, {"
                                },
                                {
                                    "line": 19,
                                    "code": "period1: \"2024-01-01\","
                                },
                                {
                                    "line": 20,
                                    "code": "interval: \"1d\","
                                }
                            ]
                        },
                        {
                            "summaryComponent": "processes the symbol",
                            "codeSegments": [
                                {
                                    "line": 17,
                                    "code": "const symbol = req.params.symbol.toUpperCase();"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "fetches chart data",
                            "codeSegments": [
                                {
                                    "line": 18,
                                    "code": "const data = await yahooFinance.chart(symbol, {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "extracts the company name and relevant quote information (date, close, volume)",
                            "codeSegments": [
                                {
                                    "line": 24,
                                    "code": "const companyName = data.meta?.shortName || symbol;"
                                },
                                {
                                    "line": 22,
                                    "code": "const quotes = data.quotes;"
                                },
                                {
                                    "line": 33,
                                    "code": "data: quotes.map((q) => ({"
                                },
                                {
                                    "line": 34,
                                    "code": "date: q.date,"
                                },
                                {
                                    "line": 35,
                                    "code": "close: q.close,"
                                },
                                {
                                    "line": 36,
                                    "code": "volume: q.volume,"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "determines the most recent closing price as currentPrice, returning it in a structured JSON response",
                            "codeSegments": [
                                {
                                    "line": 27,
                                    "code": "const currentPrice = quotes.length > 0 ? quotes[quotes.length - 1].close : null;"
                                },
                                {
                                    "line": 29,
                                    "code": "const response = {"
                                },
                                {
                                    "line": 32,
                                    "code": "currentPrice: currentPrice,"
                                },
                                {
                                    "line": 41,
                                    "code": "res.json(response);"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Errors during data retrieval are logged and result in a 500 error response",
                            "codeSegments": [
                                {
                                    "line": 43,
                                    "code": "console.error(err);"
                                },
                                {
                                    "line": 44,
                                    "code": "res.status(500).send(\"Error fetching stock data\");"
                                }
                            ]
                        }
                    ]
                },
                "editPromptValue": "",
                "selectedDetailLevel": "medium",
                "oldSummaryData": {
                    "low_unstructured": "This code sets up an Express server with CORS and JSON support, offering endpoints for a hello message and stock data retrieval.",
                    "low_structured": "• Sets up an Express server with CORS and JSON parsing\n• Provides endpoints for a hello message and stock data",
                    "medium_unstructured": "The code initializes an Express server running on port 3000, enabling CORS and JSON parsing. It defines two endpoints: one returns a simple hello message, and the other fetches stock data for a given symbol using the yahoo-finance2 library. The stock endpoint returns the ticker, company name, and a list of daily closing prices and volumes since 2024-01-01.",
                    "high_structured": "• Sets up an Express server listening on port 3000\n• Middleware configuration:\n  ◦ Enables CORS for cross-origin requests\n  ◦ Parses incoming JSON requests\n• Defines two main endpoints:\n  ◦ /api/hello\n    ▪ Responds with a JSON hello message\n  ◦ /api/stock/:symbol\n    ▪ Extracts and uppercases the stock symbol from the URL\n    ▪ Fetches daily stock chart data from Yahoo Finance starting 2024-01-01\n    ▪ Extracts company name (if available) and maps quotes to include date, close, and volume\n    ▪ Returns a structured JSON object with ticker, name, and data array\n    ▪ Handles errors by logging and returning a 500 error\n• Logs server startup and stock responses to the console",
                    "medium_structured": "• Initializes an Express server on port 3000\n• Enables CORS and JSON body parsing\n• Defines endpoints:\n  ◦ /api/hello returns a hello message\n  ◦ /api/stock/:symbol fetches and returns daily stock data (date, close, volume) and company name for the given symbol since 2024-01-01",
                    "title": "Express Server Providing Stock Data and a Hello Endpoint",
                    "high_unstructured": "This code creates an Express server that listens on port 3000 and uses CORS and JSON middleware. It exposes two endpoints: '/api/hello', which responds with a simple JSON greeting, and '/api/stock/:symbol', which retrieves daily stock data for a specified symbol from Yahoo Finance starting from January 1, 2024. The stock endpoint processes the symbol, fetches chart data, extracts the company name and relevant quote information (date, close, volume), and returns a structured JSON response. Errors during data retrieval are logged and result in a 500 error response."
                },
                "title": "Express Server Providing Stock Data with Current Price and a Hello Endpoint"
            }
        },
        "event": "create_new_section",
        "id": "jxz5eECNE3MEZBLhd2ad"
    },
    {
        "timestamp": "2025-08-23 20:30:24.000",
        "source": "frontend",
        "data": {
            "mapping_index": 0,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "9qN1t83BtRYpdLeCgQSx"
    },
    {
        "timestamp": "2025-08-23 20:30:24.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "A1noWIAoHYCwZVxUIhcU"
    },
    {
        "timestamp": "2025-08-23 20:30:24.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "EkE4MC2JFFpCmAsVk0PV"
    },
    {
        "timestamp": "2025-08-23 20:30:24.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "aLQw5HC6yG0xB8K3ioIo"
    },
    {
        "timestamp": "2025-08-23 20:30:24.000",
        "source": "frontend",
        "data": {
            "mapping_index": 9,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "cOwITECXOPRqzTm8VC16"
    },
    {
        "timestamp": "2025-08-23 20:30:24.000",
        "source": "frontend",
        "data": {
            "mapping_index": 5,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "yxiEaNKm1ExEjzogCmZ9"
    },
    {
        "timestamp": "2025-08-23 20:30:25.000",
        "source": "frontend",
        "data": {
            "mapping_index": 9,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "9sh98LrpRUQEX5kF6iq8"
    },
    {
        "timestamp": "2025-08-23 20:30:25.000",
        "source": "frontend",
        "data": {
            "mapping_index": 6,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "9t9htoGy47skQAHpREDm"
    },
    {
        "timestamp": "2025-08-23 20:30:25.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "EnEvkKSU2gW5cZGfulxD"
    },
    {
        "timestamp": "2025-08-23 20:30:25.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "GKouu89DAdVD0vYAAyQh"
    },
    {
        "timestamp": "2025-08-23 20:30:25.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "MPyt1wMEDJBBtFjPOUvV"
    },
    {
        "timestamp": "2025-08-23 20:30:25.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "Pmv88fVm2YQdvm3fqhpT"
    },
    {
        "timestamp": "2025-08-23 20:30:25.000",
        "source": "frontend",
        "data": {
            "mapping_index": 8,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "QqGQWT3WblSEkE0Wwmch"
    },
    {
        "timestamp": "2025-08-23 20:30:25.000",
        "source": "frontend",
        "data": {
            "mapping_index": 5,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "WG3qzk28rhzdAWd3x3T8"
    },
    {
        "timestamp": "2025-08-23 20:30:25.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "ePwc1Ue4lYiS1DniZ8eH"
    },
    {
        "timestamp": "2025-08-23 20:30:25.000",
        "source": "frontend",
        "data": {
            "mapping_index": 9,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "pJWm9XKQ48MCkfkYVnZR"
    },
    {
        "timestamp": "2025-08-23 20:30:25.000",
        "source": "frontend",
        "data": {
            "mapping_index": 4,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "q4VjvLIHYvHCKQQWmQjJ"
    },
    {
        "timestamp": "2025-08-23 20:30:25.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "qDgLBN39Ubsyp7XdRde3"
    },
    {
        "timestamp": "2025-08-23 20:30:25.000",
        "source": "frontend",
        "data": {
            "mapping_index": 5,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "sn7EkMhuGtsx3ANaZEuN"
    },
    {
        "timestamp": "2025-08-23 20:30:25.000",
        "source": "frontend",
        "data": {
            "mapping_index": 6,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "tQWMG1DxdptDtgcR8bu3"
    },
    {
        "timestamp": "2025-08-23 20:30:25.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "tcyYI1EPcxT09QoerCdD"
    },
    {
        "timestamp": "2025-08-23 20:30:25.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "w9rJUOGc3OchBWSjww5U"
    },
    {
        "timestamp": "2025-08-23 20:30:35.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "2pUbTY4WOBb01e4jgwPM"
    },
    {
        "timestamp": "2025-08-23 20:30:35.000",
        "source": "frontend",
        "data": {
            "mapping_index": 9,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "5WwWnC8J0dElXkBk8BrW"
    },
    {
        "timestamp": "2025-08-23 20:30:35.000",
        "source": "frontend",
        "data": {
            "mapping_index": 0,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "AEsHX6yThgefOkRm4qve"
    },
    {
        "timestamp": "2025-08-23 20:30:35.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "D6y6aQv10JYFXkbhZ7YZ"
    },
    {
        "timestamp": "2025-08-23 20:30:35.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "HKcKEAEbcWnEXQyaJWOR"
    },
    {
        "timestamp": "2025-08-23 20:30:35.000",
        "source": "frontend",
        "data": {
            "mapping_index": 5,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "U3CQdfY9wtYnL4dglf30"
    },
    {
        "timestamp": "2025-08-23 20:30:35.000",
        "source": "frontend",
        "data": {
            "mapping_index": 2,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "VdWuNtMV3XoUoSuXCr5n"
    },
    {
        "timestamp": "2025-08-23 20:30:35.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "oyTwnlJLWtiElHIJX0ym"
    },
    {
        "timestamp": "2025-08-23 20:30:36.000",
        "source": "frontend",
        "data": {
            "mapping_index": 0,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "aTUy8qrYrfYwDVKOdAkt"
    },
    {
        "timestamp": "2025-08-23 20:30:37.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "7Vo3K4dTDWck8OVWfYKy"
    },
    {
        "timestamp": "2025-08-23 20:30:37.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "DI5PAGxVDogMTfDnwjul"
    },
    {
        "timestamp": "2025-08-23 20:30:37.000",
        "source": "frontend",
        "data": {
            "mapping_index": 4,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "PjpBw2srhb08KuojW7K4"
    },
    {
        "timestamp": "2025-08-23 20:30:37.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "qAflPQHQQRQdk8ZYm9Wn"
    },
    {
        "timestamp": "2025-08-23 20:30:37.000",
        "source": "frontend",
        "data": {
            "mapping_index": 0,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "tNdRf9gutNnbMFgoppRH"
    },
    {
        "timestamp": "2025-08-23 20:30:37.000",
        "source": "frontend",
        "data": {
            "mapping_index": 3,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "xci06D4XXgg6pRC0Ml7m"
    },
    {
        "timestamp": "2025-08-23 20:30:37.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "z69XDx2UjkUrijXPhYTI"
    },
    {
        "timestamp": "2025-08-23 20:30:37.000",
        "source": "frontend",
        "data": {
            "mapping_index": 1,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "zPQhctUdQjwXZfrommw7"
    },
    {
        "timestamp": "2025-08-23 20:30:38.000",
        "source": "frontend",
        "data": {
            "mapping_index": 2,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "AgiZL5cDgalSfklfOSOC"
    },
    {
        "timestamp": "2025-08-23 20:30:38.000",
        "source": "frontend",
        "data": {
            "mapping_index": 4,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "GOH1mYvLbmmxJ8ee4KCH"
    },
    {
        "timestamp": "2025-08-23 20:30:38.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "MP5vQz4A2UXbSMq3nf1N"
    },
    {
        "timestamp": "2025-08-23 20:30:38.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "RviE2XwML8VsQ17xnA8U"
    },
    {
        "timestamp": "2025-08-23 20:30:38.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "S4xVjNm8PO9Md1yVxlWC"
    },
    {
        "timestamp": "2025-08-23 20:30:38.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "UVzIJjmpzSY7TGRYaxTr"
    },
    {
        "timestamp": "2025-08-23 20:30:38.000",
        "source": "frontend",
        "data": {
            "mapping_index": 5,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "i2CRORRGDHF0hthVLQ8i"
    },
    {
        "timestamp": "2025-08-23 20:30:38.000",
        "source": "frontend",
        "data": {
            "mapping_index": 5,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "mm9nMXdTsDWHr5Eo9fA5"
    },
    {
        "timestamp": "2025-08-23 20:30:39.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "8RY7NjFNMepR23Uc9FNB"
    },
    {
        "timestamp": "2025-08-23 20:30:39.000",
        "source": "frontend",
        "data": {
            "mapping_index": 5,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "Aa9EbKobG0EUlcwgWcpR"
    },
    {
        "timestamp": "2025-08-23 20:30:39.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "xQu7ewJe298Rdij4dAfS"
    },
    {
        "timestamp": "2025-08-23 20:30:40.000",
        "source": "frontend",
        "data": {
            "mapping_index": 5,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "PMEgasPQmyln8TVK0pLT"
    },
    {
        "timestamp": "2025-08-23 20:30:40.000",
        "source": "frontend",
        "data": {
            "mapping_index": 9,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "QUUAbhdSuGY48UlMhaY8"
    },
    {
        "timestamp": "2025-08-23 20:30:40.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "SbHMYdpBjOi5JqKr07io"
    },
    {
        "timestamp": "2025-08-23 20:30:40.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "VOVZOFMJIrnx8dICWR2m"
    },
    {
        "timestamp": "2025-08-23 20:30:40.000",
        "source": "frontend",
        "data": {
            "mapping_index": 8,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "WvUCrjwdSjtxjbkzKNFC"
    },
    {
        "timestamp": "2025-08-23 20:30:41.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "8qMduGGC4hwSAC03eRIe"
    },
    {
        "timestamp": "2025-08-23 20:30:41.000",
        "source": "frontend",
        "data": {
            "mapping_index": 8,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "tdh1lc8njrgRkTrNxZp0"
    },
    {
        "timestamp": "2025-08-23 20:30:42.000",
        "source": "frontend",
        "data": {
            "mapping_index": 9,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "0KcqG0Q8ModAxuYuwegi"
    },
    {
        "timestamp": "2025-08-23 20:30:42.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "6oxcUYTrSnorlp0VjQpE"
    },
    {
        "timestamp": "2025-08-23 20:30:42.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "C7T0z0vKwrFvgW4HkSlC"
    },
    {
        "timestamp": "2025-08-23 20:30:42.000",
        "source": "frontend",
        "data": {
            "mapping_index": 8,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "ZFqqXkIUBtCc3C60EAP0"
    },
    {
        "timestamp": "2025-08-23 20:30:42.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "mwP5AUUDUoVxt5rNkN1N"
    },
    {
        "timestamp": "2025-08-23 20:30:45.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "25VkEXihgSUyYjTOxRyW"
    },
    {
        "timestamp": "2025-08-23 20:30:45.000",
        "source": "frontend",
        "data": {
            "mapping_index": 2,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "3SSpw3obTHiVXvLsgOyO"
    },
    {
        "timestamp": "2025-08-23 20:30:45.000",
        "source": "frontend",
        "data": {
            "mapping_index": 3,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "FnCinEzjqf7kbwOe2pFr"
    },
    {
        "timestamp": "2025-08-23 20:30:45.000",
        "source": "frontend",
        "data": {
            "mapping_index": 1,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "PqOdxCgGXsQTmG9dhnGi"
    },
    {
        "timestamp": "2025-08-23 20:30:45.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "UuCViQbjgnOx4PBorWtc"
    },
    {
        "timestamp": "2025-08-23 20:30:45.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "VadKBoMktN3Wm1QxTMfj"
    },
    {
        "timestamp": "2025-08-23 20:30:45.000",
        "source": "frontend",
        "data": {
            "mapping_index": 0,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "lzor2WYWFomOWBKUwIms"
    },
    {
        "timestamp": "2025-08-23 20:30:45.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "rHvrdXK7Ec8IqHwOeCw1"
    },
    {
        "timestamp": "2025-08-23 20:30:45.000",
        "source": "frontend",
        "data": {
            "after_detail_level": "medium",
            "after_structured": "structured",
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "before_structured": "unstructured",
            "before_detail_level": "medium"
        },
        "event": "change_summary_level",
        "id": "txrzVlOz84QlcpGQWegC"
    },
    {
        "timestamp": "2025-08-23 20:30:46.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "0fajk6uiWjf2PnlY3Wpu"
    },
    {
        "timestamp": "2025-08-23 20:30:46.000",
        "source": "frontend",
        "data": {
            "mapping_index": 4,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "2ff69PKfLRanrurITzR0"
    },
    {
        "timestamp": "2025-08-23 20:30:46.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "lh5w0gEF7Djvr4h2metX"
    },
    {
        "timestamp": "2025-08-23 20:30:46.000",
        "source": "frontend",
        "data": {
            "mapping_index": 3,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "nuEYRldbOU6zT8jn4ynK"
    },
    {
        "timestamp": "2025-08-23 20:30:47.000",
        "source": "frontend",
        "data": {
            "mapping_index": 3,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "44rdLaaxjLbqcu7DnMd4"
    },
    {
        "timestamp": "2025-08-23 20:30:47.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "MKkZJf796ncNZiaxlj4s"
    },
    {
        "timestamp": "2025-08-23 20:30:47.000",
        "source": "frontend",
        "data": {
            "mapping_index": 4,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "R7mScQ42Mn6hIpGaeedq"
    },
    {
        "timestamp": "2025-08-23 20:30:52.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "SQYUjrw7Xot6V5UFtuGS"
    },
    {
        "timestamp": "2025-08-23 20:31:00.000",
        "source": "frontend",
        "data": {
            "mapping_index": 4,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "UuhfN0H3Od6dVFsurPqW"
    },
    {
        "timestamp": "2025-08-23 20:31:02.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "Q79ZaZ8dnc9CAUo4vbEk"
    },
    {
        "timestamp": "2025-08-23 20:31:42.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "1GNhp8eCNoCC7UUlBPnV"
    },
    {
        "timestamp": "2025-08-23 20:31:42.000",
        "source": "frontend",
        "data": {
            "mapping_index": 0,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "3oMZ5R5LthLioDDR5XjI"
    },
    {
        "timestamp": "2025-08-23 20:31:42.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "P8YIoGnRm1oStHhXyHOy"
    },
    {
        "timestamp": "2025-08-23 20:31:42.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "Rky9F1uWDuqfXIarpS2A"
    },
    {
        "timestamp": "2025-08-23 20:31:42.000",
        "source": "frontend",
        "data": {
            "mapping_index": 1,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "fX6Tc7u03ZcbtHgoOIvT"
    },
    {
        "timestamp": "2025-08-23 20:31:42.000",
        "source": "frontend",
        "data": {
            "mapping_index": 3,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "fcCKKFCUFaHnf3cdDxpN"
    },
    {
        "timestamp": "2025-08-23 20:31:42.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "nvwTvuwDyUb8zw2QHnJp"
    },
    {
        "timestamp": "2025-08-23 20:31:42.000",
        "source": "frontend",
        "data": {
            "mapping_index": 2,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "q3NO5VD9sRCQgsay0gTt"
    },
    {
        "timestamp": "2025-08-23 20:31:42.000",
        "source": "frontend",
        "data": {
            "mapping_index": 4,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "wT85l7P5ZkjLGJddJICY"
    },
    {
        "timestamp": "2025-08-23 20:31:43.000",
        "source": "frontend",
        "data": {
            "mapping_index": 3,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "4L3sHZuQgI99hZJksnUc"
    },
    {
        "timestamp": "2025-08-23 20:31:43.000",
        "source": "frontend",
        "data": {
            "mapping_index": 1,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "LaZCUjJ0fkjTR07LHjDc"
    },
    {
        "timestamp": "2025-08-23 20:31:43.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "QfjKjzxg9H43sjWf0PzX"
    },
    {
        "timestamp": "2025-08-23 20:31:43.000",
        "source": "frontend",
        "data": {
            "mapping_index": 2,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "aGcmFB03mwTpmwtWmVRc"
    },
    {
        "timestamp": "2025-08-23 20:31:43.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "ibNuj6mHg2E2onbYs4a7"
    },
    {
        "timestamp": "2025-08-23 20:31:43.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "zUNapBpOPOZzcYzm6cU3"
    },
    {
        "timestamp": "2025-08-23 20:31:44.000",
        "source": "frontend",
        "data": {
            "mapping_index": 1,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "bFHeWhweSWE0KhRBF784"
    },
    {
        "timestamp": "2025-08-23 20:31:44.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "cj5xBPe4pWZgiIlFtvYg"
    },
    {
        "timestamp": "2025-08-23 20:31:44.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "rnkvEUoHD0ISK7g3Ll8d"
    },
    {
        "timestamp": "2025-08-23 20:31:44.000",
        "source": "frontend",
        "data": {
            "mapping_index": 0,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "xONemFnCczzg9OGgcCpu"
    },
    {
        "timestamp": "2025-08-23 20:31:45.000",
        "source": "frontend",
        "data": {
            "mapping_index": 1,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "9ifogn8ijoOHjw4XE3Da"
    },
    {
        "timestamp": "2025-08-23 20:31:45.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "Ad9jMNf7ro1Pr6jjUOnI"
    },
    {
        "timestamp": "2025-08-23 20:31:45.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "akYdciHGTVDtt31Iad27"
    },
    {
        "timestamp": "2025-08-23 20:31:45.000",
        "source": "frontend",
        "data": {
            "mapping_index": 2,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "xKaYCGxyw4pWxeX4DS19"
    },
    {
        "timestamp": "2025-08-23 20:31:46.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "FXrzPzKo2RkJ068VzFMg"
    },
    {
        "timestamp": "2025-08-23 20:31:46.000",
        "source": "frontend",
        "data": {
            "mapping_index": 0,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "OWPp1hvZ8MH63Xe9Os24"
    },
    {
        "timestamp": "2025-08-23 20:31:46.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "d8TK2K2NhKePs5Z7ot7f"
    },
    {
        "timestamp": "2025-08-23 20:31:46.000",
        "source": "frontend",
        "data": {
            "mapping_index": 4,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "qhgzK31Q7Z9fAXWrhT3D"
    },
    {
        "timestamp": "2025-08-23 20:31:47.000",
        "source": "frontend",
        "data": {
            "mapping_index": 3,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "XfRbXWG0ICBNl9T4L5Uy"
    },
    {
        "timestamp": "2025-08-23 20:31:47.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "i2urpDLBbHoaRLdl5Kll"
    },
    {
        "timestamp": "2025-08-23 20:31:49.000",
        "source": "frontend",
        "data": {
            "mapping_index": 4,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "Vpb9YWfUj2Zwsw9YJbtH"
    },
    {
        "timestamp": "2025-08-23 20:31:49.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "hRDAfw2GyrQ0EHtDsi66"
    },
    {
        "timestamp": "2025-08-23 20:31:55.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "Dz86fziR2MkyIw2Yex1U"
    },
    {
        "timestamp": "2025-08-23 20:32:01.000",
        "source": "frontend",
        "data": {
            "mapping_index": 4,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "RPA01gGRJHAw7PRGdOKN"
    },
    {
        "timestamp": "2025-08-23 20:32:01.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "td0LbejzUDlZiOgxkQI9"
    },
    {
        "timestamp": "2025-08-23 20:32:08.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "65Eg9SvN7mIb2bkB7pr6"
    },
    {
        "timestamp": "2025-08-23 20:32:08.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "AycziPJYtpP1SLqtB5bx"
    },
    {
        "timestamp": "2025-08-23 20:32:08.000",
        "source": "frontend",
        "data": {
            "mapping_index": 1,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "JSFVU6EVHMHn4w4KW8GB"
    },
    {
        "timestamp": "2025-08-23 20:32:08.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "RWMYeqIXCvntXUI6yMgb"
    },
    {
        "timestamp": "2025-08-23 20:32:08.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "THENqAx4k49A5hDp7VXb"
    },
    {
        "timestamp": "2025-08-23 20:32:08.000",
        "source": "frontend",
        "data": {
            "mapping_index": 2,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "dWzA3CsOqnHvFFQbPq73"
    },
    {
        "timestamp": "2025-08-23 20:32:08.000",
        "source": "frontend",
        "data": {
            "mapping_index": 0,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "eWnkDMOMPvwFqnzXFsda"
    },
    {
        "timestamp": "2025-08-23 20:32:08.000",
        "source": "frontend",
        "data": {
            "mapping_index": 3,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "rAhiAxruR8s7acfLva66"
    },
    {
        "timestamp": "2025-08-23 20:32:09.000",
        "source": "frontend",
        "data": {
            "after_detail_level": "high",
            "after_structured": "structured",
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "before_structured": "structured",
            "before_detail_level": "medium"
        },
        "event": "change_summary_level",
        "id": "An2xa6oU0TjxPgZvc36e"
    },
    {
        "timestamp": "2025-08-23 20:32:10.000",
        "source": "frontend",
        "data": {
            "mapping_index": 0,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_hover",
        "id": "UEvXpyCLSFlItrx9dXBE"
    },
    {
        "timestamp": "2025-08-23 20:32:10.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_unhover",
        "id": "WYwyosAVKUmhyFbeRv4o"
    },
    {
        "timestamp": "2025-08-23 20:32:12.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_unhover",
        "id": "1NmrHh7Fzhf08HRE9Pch"
    },
    {
        "timestamp": "2025-08-23 20:32:12.000",
        "source": "frontend",
        "data": {
            "mapping_index": 3,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_hover",
        "id": "QFXB8m0z8jbg1u5HzZCr"
    },
    {
        "timestamp": "2025-08-23 20:32:13.000",
        "source": "frontend",
        "data": {
            "mapping_index": 9,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_hover",
        "id": "68w9rc7zIMHbdw9ndWxL"
    },
    {
        "timestamp": "2025-08-23 20:32:13.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_unhover",
        "id": "B5A7pLIvbu9UYYhhq1G1"
    },
    {
        "timestamp": "2025-08-23 20:32:13.000",
        "source": "frontend",
        "data": {
            "mapping_index": 6,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_hover",
        "id": "D73xurpbLYi14lgge2h9"
    },
    {
        "timestamp": "2025-08-23 20:32:13.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_unhover",
        "id": "FXjblzkCVdbEkNXCDKLS"
    },
    {
        "timestamp": "2025-08-23 20:32:13.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_unhover",
        "id": "KJoxO5f9wWkjkOnu3zTo"
    },
    {
        "timestamp": "2025-08-23 20:32:13.000",
        "source": "frontend",
        "data": {
            "mapping_index": 12,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_hover",
        "id": "V1v4HG90SRzba9H3h3YF"
    },
    {
        "timestamp": "2025-08-23 20:32:13.000",
        "source": "frontend",
        "data": {
            "mapping_index": 7,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_hover",
        "id": "XDrmSelCIbctenORdsA8"
    },
    {
        "timestamp": "2025-08-23 20:32:13.000",
        "source": "frontend",
        "data": {
            "mapping_index": 10,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_hover",
        "id": "aIZaOdyKhBJ806A9t3Fk"
    },
    {
        "timestamp": "2025-08-23 20:32:13.000",
        "source": "frontend",
        "data": {
            "mapping_index": 9,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_hover",
        "id": "aNK3al55djtfJJ4wtuyy"
    },
    {
        "timestamp": "2025-08-23 20:32:13.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_unhover",
        "id": "aa82uxooNsyuAkv2QkDh"
    },
    {
        "timestamp": "2025-08-23 20:32:13.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_unhover",
        "id": "hPkI34PGAIBiWX8CO8O3"
    },
    {
        "timestamp": "2025-08-23 20:32:13.000",
        "source": "frontend",
        "data": {
            "mapping_index": 8,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_hover",
        "id": "swiQXD4mRoi9j5SVDT9i"
    },
    {
        "timestamp": "2025-08-23 20:32:13.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_unhover",
        "id": "wgqvtPiyZRjlAp3xUh5B"
    },
    {
        "timestamp": "2025-08-23 20:32:14.000",
        "source": "frontend",
        "data": {
            "mapping_index": 4,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_hover",
        "id": "7vuz2qFusx5mDKhxITtU"
    },
    {
        "timestamp": "2025-08-23 20:32:14.000",
        "source": "frontend",
        "data": {
            "mapping_index": 5,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_hover",
        "id": "TmAvHnV1gVpTIJaTS9yI"
    },
    {
        "timestamp": "2025-08-23 20:32:14.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_unhover",
        "id": "bl9sn9g1AGrLNZHCpurO"
    },
    {
        "timestamp": "2025-08-23 20:32:14.000",
        "source": "frontend",
        "data": {
            "mapping_index": 5,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_hover",
        "id": "ihMSz7xIauxr2CgX2b2I"
    },
    {
        "timestamp": "2025-08-23 20:32:14.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_unhover",
        "id": "od3fbFY949oaJO2ZlnHc"
    },
    {
        "timestamp": "2025-08-23 20:32:14.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_unhover",
        "id": "wiclT0bSoYhOmUTPtZKj"
    },
    {
        "timestamp": "2025-08-23 20:32:15.000",
        "source": "frontend",
        "data": {
            "mapping_index": 8,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_hover",
        "id": "1pTexZvsWqd0LDsuGWE9"
    },
    {
        "timestamp": "2025-08-23 20:32:15.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_unhover",
        "id": "3CHyR7of9vaRVuT2fTue"
    },
    {
        "timestamp": "2025-08-23 20:32:15.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_unhover",
        "id": "D3HyhnJVpxqCCgOrMtrf"
    },
    {
        "timestamp": "2025-08-23 20:32:15.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_unhover",
        "id": "Xsn0KLk3xiLkjide5wun"
    },
    {
        "timestamp": "2025-08-23 20:32:15.000",
        "source": "frontend",
        "data": {
            "mapping_index": 7,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_hover",
        "id": "fo7HsRUsm0y0VDx0CLwH"
    },
    {
        "timestamp": "2025-08-23 20:32:15.000",
        "source": "frontend",
        "data": {
            "mapping_index": 6,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_hover",
        "id": "yWnxPRAr7gMpMuL5eVL9"
    },
    {
        "timestamp": "2025-08-23 20:32:16.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_unhover",
        "id": "7j1ohIAFlUKZAroDU9Lt"
    },
    {
        "timestamp": "2025-08-23 20:32:16.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_unhover",
        "id": "AX5SPwomlogIh11deXk5"
    },
    {
        "timestamp": "2025-08-23 20:32:16.000",
        "source": "frontend",
        "data": {
            "mapping_index": 5,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_hover",
        "id": "F5bq0U5K07TcomLDQBSl"
    },
    {
        "timestamp": "2025-08-23 20:32:16.000",
        "source": "frontend",
        "data": {
            "mapping_index": 3,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_hover",
        "id": "KYvukBX1sPj0AiBnjLKK"
    },
    {
        "timestamp": "2025-08-23 20:32:16.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_unhover",
        "id": "KbnS04hnbnvpE6ExZOMV"
    },
    {
        "timestamp": "2025-08-23 20:32:16.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_unhover",
        "id": "KyTqYaU7LCTAJxiE5HTM"
    },
    {
        "timestamp": "2025-08-23 20:32:16.000",
        "source": "frontend",
        "data": {
            "mapping_index": 5,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_hover",
        "id": "Lpr78VKFDaLb0u9uiuX9"
    },
    {
        "timestamp": "2025-08-23 20:32:16.000",
        "source": "frontend",
        "data": {
            "mapping_index": 6,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_hover",
        "id": "O9zr6YTypMQUdC0FVEbx"
    },
    {
        "timestamp": "2025-08-23 20:32:16.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_unhover",
        "id": "QnwWiXKk1sbtmZiaDCqO"
    },
    {
        "timestamp": "2025-08-23 20:32:16.000",
        "source": "frontend",
        "data": {
            "mapping_index": 4,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_hover",
        "id": "QwwXVF1bZ2hlEuaQNX5i"
    },
    {
        "timestamp": "2025-08-23 20:32:16.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_unhover",
        "id": "a0HSdXWqK0L9PMX7dTMV"
    },
    {
        "timestamp": "2025-08-23 20:32:16.000",
        "source": "frontend",
        "data": {
            "mapping_index": 2,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_hover",
        "id": "id1ho2b77kAlbH8aKhTD"
    },
    {
        "timestamp": "2025-08-23 20:32:16.000",
        "source": "frontend",
        "data": {
            "mapping_index": 4,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_hover",
        "id": "qeztmPEEYZPUrvwRh93K"
    },
    {
        "timestamp": "2025-08-23 20:32:16.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_unhover",
        "id": "r3dEd0ELG5JZiMN4eIKF"
    },
    {
        "timestamp": "2025-08-23 20:32:16.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_unhover",
        "id": "sEW46AwCaOFUh3j8auzw"
    },
    {
        "timestamp": "2025-08-23 20:32:16.000",
        "source": "frontend",
        "data": {
            "mapping_index": 7,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_hover",
        "id": "z4i6xKfoUPZIYD5c8oKK"
    },
    {
        "timestamp": "2025-08-23 20:32:17.000",
        "source": "frontend",
        "data": {
            "mapping_index": 6,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_hover",
        "id": "IigxiAuNJzLd04MgvqRh"
    },
    {
        "timestamp": "2025-08-23 20:32:17.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_unhover",
        "id": "MQ6mMdUS6QNZbCNg6W5a"
    },
    {
        "timestamp": "2025-08-23 20:32:17.000",
        "source": "frontend",
        "data": {
            "mapping_index": 5,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_hover",
        "id": "QJZHpsx2bgJzuYqBVmZb"
    },
    {
        "timestamp": "2025-08-23 20:32:17.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_unhover",
        "id": "ZKdKSGfttHK1SHTbZjHu"
    },
    {
        "timestamp": "2025-08-23 20:32:17.000",
        "source": "frontend",
        "data": {
            "mapping_index": 6,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_hover",
        "id": "hLfv3tRAAuPOhKCOyFDx"
    },
    {
        "timestamp": "2025-08-23 20:32:17.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_unhover",
        "id": "hsBytyDlLBUKR5EQTJzQ"
    },
    {
        "timestamp": "2025-08-23 20:32:19.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_unhover",
        "id": "4RUsB22ba2miWw1YfIEH"
    },
    {
        "timestamp": "2025-08-23 20:32:19.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_unhover",
        "id": "DbgHjrYdkii9YMXdm0x8"
    },
    {
        "timestamp": "2025-08-23 20:32:19.000",
        "source": "frontend",
        "data": {
            "mapping_index": 8,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_hover",
        "id": "Tj2zUJ0tOLVGTlIYxUcU"
    },
    {
        "timestamp": "2025-08-23 20:32:19.000",
        "source": "frontend",
        "data": {
            "mapping_index": 7,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_hover",
        "id": "Yn3Telx1Bj1uf2X7QVDP"
    },
    {
        "timestamp": "2025-08-23 20:32:20.000",
        "source": "frontend",
        "data": {
            "mapping_index": 7,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_hover",
        "id": "1YmFwiqaOQsfulDAzjya"
    },
    {
        "timestamp": "2025-08-23 20:32:20.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_unhover",
        "id": "Ty3I4caTVWiY7ofQs22A"
    },
    {
        "timestamp": "2025-08-23 20:32:20.000",
        "source": "frontend",
        "data": {
            "mapping_index": 8,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_hover",
        "id": "dN4ularU8gIVEkoO0Oeo"
    },
    {
        "timestamp": "2025-08-23 20:32:20.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_unhover",
        "id": "oKOr6Tplan9irFdzBbMv"
    },
    {
        "timestamp": "2025-08-23 20:32:21.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_unhover",
        "id": "4aSrqDNpljYnJWG3CwXH"
    },
    {
        "timestamp": "2025-08-23 20:32:21.000",
        "source": "frontend",
        "data": {
            "mapping_index": 9,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_hover",
        "id": "7pMEXOcdMZhPNWOAycGV"
    },
    {
        "timestamp": "2025-08-23 20:32:22.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_unhover",
        "id": "LNv8G57fU36uO5C5193H"
    },
    {
        "timestamp": "2025-08-23 20:32:23.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_unhover",
        "id": "1sm6IqVOMLSWlNJetUM4"
    },
    {
        "timestamp": "2025-08-23 20:32:23.000",
        "source": "frontend",
        "data": {
            "mapping_index": 12,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_hover",
        "id": "G2xOfQb0Zfom8GVWHtq7"
    },
    {
        "timestamp": "2025-08-23 20:32:23.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_unhover",
        "id": "IKHhpTXFSwmfph5nEwp4"
    },
    {
        "timestamp": "2025-08-23 20:32:23.000",
        "source": "frontend",
        "data": {
            "mapping_index": 10,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_hover",
        "id": "fbAL1Y8cLtIrLkfVxD8i"
    },
    {
        "timestamp": "2025-08-23 20:32:23.000",
        "source": "frontend",
        "data": {
            "mapping_index": 11,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_hover",
        "id": "jnWLqJ2UEUCsRPRGdIJP"
    },
    {
        "timestamp": "2025-08-23 20:32:23.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_unhover",
        "id": "vbADqidixCC2qBf7Sago"
    },
    {
        "timestamp": "2025-08-23 20:32:24.000",
        "source": "frontend",
        "data": {
            "mapping_index": 9,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_hover",
        "id": "hsyaFPhudcaa33lYxWTv"
    },
    {
        "timestamp": "2025-08-23 20:32:26.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_unhover",
        "id": "2c8HvIiAsW1zFskletGA"
    },
    {
        "timestamp": "2025-08-23 20:32:27.000",
        "source": "frontend",
        "data": {
            "mapping_index": 8,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_hover",
        "id": "bX0gFpgiyc3sJc0Djzt6"
    },
    {
        "timestamp": "2025-08-23 20:32:28.000",
        "source": "frontend",
        "data": {
            "mapping_index": 9,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_hover",
        "id": "UBKUV3onkP7p5y28dJ1L"
    },
    {
        "timestamp": "2025-08-23 20:32:28.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_unhover",
        "id": "hsAwS9gNe8SD43CBKbQF"
    },
    {
        "timestamp": "2025-08-23 20:32:32.000",
        "source": "frontend",
        "data": {
            "mapping_index": 10,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_hover",
        "id": "MB3fzS6mtmLKoTpTwWzY"
    },
    {
        "timestamp": "2025-08-23 20:32:32.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_unhover",
        "id": "m4QmZHyIGWnaDF5WROZy"
    },
    {
        "timestamp": "2025-08-23 20:32:33.000",
        "source": "frontend",
        "data": {
            "mapping_index": 11,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_hover",
        "id": "HxDrh5RRcuB5CgwuA73U"
    },
    {
        "timestamp": "2025-08-23 20:32:33.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_unhover",
        "id": "li634hdrO8jDdyONKEPN"
    },
    {
        "timestamp": "2025-08-23 20:32:34.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_unhover",
        "id": "2PTHYwsLWK9YI58q4KbY"
    },
    {
        "timestamp": "2025-08-23 20:32:34.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_unhover",
        "id": "6crRtm7VSsT8LYFOOTxf"
    },
    {
        "timestamp": "2025-08-23 20:32:34.000",
        "source": "frontend",
        "data": {
            "mapping_index": 11,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_hover",
        "id": "9sqwdwSGnRcm14pOIr6b"
    },
    {
        "timestamp": "2025-08-23 20:32:34.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_unhover",
        "id": "AVepPyWWPhYi3oQ4ScQP"
    },
    {
        "timestamp": "2025-08-23 20:32:34.000",
        "source": "frontend",
        "data": {
            "mapping_index": 12,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_hover",
        "id": "CTa6vG5QgFVUhYNCSEsd"
    },
    {
        "timestamp": "2025-08-23 20:32:34.000",
        "source": "frontend",
        "data": {
            "mapping_index": 11,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_hover",
        "id": "EAsgrQhGxkafNG9NdjtG"
    },
    {
        "timestamp": "2025-08-23 20:32:34.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_unhover",
        "id": "IlYanaEMoHmRJtjSsaja"
    },
    {
        "timestamp": "2025-08-23 20:32:34.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_unhover",
        "id": "dr5wpQ8WovVLUBu9N7s4"
    },
    {
        "timestamp": "2025-08-23 20:32:34.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_unhover",
        "id": "fzVEHEInofFdsu3dHPI8"
    },
    {
        "timestamp": "2025-08-23 20:32:34.000",
        "source": "frontend",
        "data": {
            "mapping_index": 12,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_hover",
        "id": "lHuo838ruO9fS4k1wveY"
    },
    {
        "timestamp": "2025-08-23 20:32:34.000",
        "source": "frontend",
        "data": {
            "mapping_index": 12,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_hover",
        "id": "nXZdItBefs0c3n0AJXYm"
    },
    {
        "timestamp": "2025-08-23 20:32:38.000",
        "source": "frontend",
        "data": {
            "mapping_index": 10,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_hover",
        "id": "0JariqjVjVyjSUADNDmi"
    },
    {
        "timestamp": "2025-08-23 20:32:38.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_unhover",
        "id": "GIFKFFLo9GrKpDzWm7lh"
    },
    {
        "timestamp": "2025-08-23 20:32:38.000",
        "source": "frontend",
        "data": {
            "mapping_index": 7,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_hover",
        "id": "H6FIizcgPchm7wCqy1XO"
    },
    {
        "timestamp": "2025-08-23 20:32:38.000",
        "source": "frontend",
        "data": {
            "mapping_index": 8,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_hover",
        "id": "KyqeWuP8uPn2LOBDThyd"
    },
    {
        "timestamp": "2025-08-23 20:32:38.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_unhover",
        "id": "gcdSFT0FPYus2bCiFPC2"
    },
    {
        "timestamp": "2025-08-23 20:32:38.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_unhover",
        "id": "ld9OGOqjSVZDCMWNe4wM"
    },
    {
        "timestamp": "2025-08-23 20:32:38.000",
        "source": "frontend",
        "data": {
            "mapping_index": 9,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_hover",
        "id": "ucXE2G69N62b6Wq20OqX"
    },
    {
        "timestamp": "2025-08-23 20:32:38.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_unhover",
        "id": "ycfDj3NBhaDmgM3HqoRm"
    },
    {
        "timestamp": "2025-08-23 20:32:39.000",
        "source": "frontend",
        "data": {
            "mapping_index": 7,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_hover",
        "id": "0SThNZDK4tReO6BE3uwn"
    },
    {
        "timestamp": "2025-08-23 20:32:39.000",
        "source": "frontend",
        "data": {
            "mapping_index": 8,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_hover",
        "id": "DA0ZHmRHmDdwHGfw5K30"
    },
    {
        "timestamp": "2025-08-23 20:32:39.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_unhover",
        "id": "DXd1TvlAtaC9U2eh7pTO"
    },
    {
        "timestamp": "2025-08-23 20:32:39.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_unhover",
        "id": "F59UI9K8K9REZizWf2wM"
    },
    {
        "timestamp": "2025-08-23 20:32:39.000",
        "source": "frontend",
        "data": {
            "mapping_index": 6,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_hover",
        "id": "MvAy7UZuYTGbimciCu5A"
    },
    {
        "timestamp": "2025-08-23 20:32:39.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_unhover",
        "id": "b2wLnOxlZ6uHJYFDHQvM"
    },
    {
        "timestamp": "2025-08-23 20:32:39.000",
        "source": "frontend",
        "data": {
            "structured": "structured",
            "summary": "• Sets up an Express server listening on port 3000\n• Middleware configuration:\n  ◦ Enables CORS for cross-origin requests\n  ◦ Parses incoming JSON requests\n• Defines two main endpoints:\n  ◦ /api/hello\n    ▪ Responds with a JSON hello message\n  ◦ /api/stock/:symbol\n    ▪ Extracts and uppercases the stock symbol from the URL\n    ▪ Fetches daily stock chart data from Yahoo Finance starting 2024-01-01\n    ▪ Extracts company name (if available) and maps quotes to include date, close, and volume\n    ▪ Determines the most recent closing price as currentPrice and includes it in the response\n    ▪ Returns a structured JSON object with ticker, name, currentPrice, and data array\n    ▪ Handles errors by logging and returning a 500 error\n• Logs server startup and stock responses to the console",
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "detail_level": "high"
        },
        "event": "click_edit_in_prompt",
        "id": "klk5tr2nt1DQ4aHOd1Qw"
    },
    {
        "timestamp": "2025-08-23 20:33:30.000",
        "source": "frontend",
        "data": {
            "mapping_index": 7,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_hover",
        "id": "0Sa7plgUGCarMZoxpe1D"
    },
    {
        "timestamp": "2025-08-23 20:33:30.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_unhover",
        "id": "0U3zxSiD9yiAMPVUGEdl"
    },
    {
        "timestamp": "2025-08-23 20:33:30.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_unhover",
        "id": "0zprBoS6mG6BX48OZWaR"
    },
    {
        "timestamp": "2025-08-23 20:33:30.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_unhover",
        "id": "422XWjLDCisBNobK95c3"
    },
    {
        "timestamp": "2025-08-23 20:33:30.000",
        "source": "frontend",
        "data": {
            "mapping_index": 8,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_hover",
        "id": "8F4g8tTQ5KSRsUDwwZch"
    },
    {
        "timestamp": "2025-08-23 20:33:30.000",
        "source": "backend",
        "data": {
            "summary": {
                "low_unstructured": "This code defines a React component that displays a stock price line chart using the Recharts library.",
                "low_structured": "• React component for stock price chart\n• Uses Recharts for visualization\n• Displays company and ticker",
                "medium_unstructured": "This code implements a React component called StockChart that visualizes stock price data as a line chart using Recharts. It processes incoming data to extract dates and closing prices, and displays the chart with formatted month labels, a legend, and a tooltip. The component also shows the company name and ticker above the chart.",
                "high_structured": "• Implements the StockChart React component for displaying stock price trends\n• Validates input data to ensure it exists and contains entries\n• Extracts relevant information:\n  ◦ Company name and ticker from the data prop\n  ◦ Maps raw data to an array of objects with 'date' and 'price' fields\n• Provides helper functions:\n  ◦ formatDateString to trim date strings (though not directly used in rendering)\n  ◦ formatMonth to format X-axis labels as short month names\n• Renders the chart using Recharts components:\n  ◦ ResponsiveContainer ensures the chart scales to its parent\n  ◦ LineChart displays the data with a monotone line and no dots\n  ◦ XAxis uses formatted month labels, YAxis auto-scales\n  ◦ Tooltip and Legend enhance interactivity and readability\n• Displays the company name and ticker above the chart",
                "medium_structured": "• Defines a StockChart React component for visualizing stock data\n• Processes input data to extract dates and closing prices\n• Renders a line chart with:\n  ◦ X-axis labels formatted as months\n  ◦ Legend and tooltip for better readability\n• Displays company name and ticker above the chart",
                "title": "StockChart React Component for Displaying Stock Price Line Charts",
                "high_unstructured": "This code defines the StockChart React component, which takes a data prop containing stock information and renders a responsive line chart using the Recharts library. The component first checks for valid data, then extracts the company name, ticker, and formats the data into an array of objects with date and closing price. It includes helper functions to format dates and months for display, and configures the chart with a monotone line, formatted X-axis, auto-scaling Y-axis, tooltip, and legend. The chart is wrapped in a responsive container and is displayed with the company name and ticker above it."
            },
            "selected_code": "import React from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  ReferenceLine,\n} from \"recharts\";\n\nconst StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  // Function to format date as month (e.g., \"Jan\", \"Feb\") in English\n  const formatMonth = (dateString) => {\n    const date = new Date(dateString);\n    return date.toLocaleString(\"en\", { month: \"short\" });\n  };\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatMonth} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;\n"
        },
        "event": "summarize_selected_code",
        "id": "BOAUPciOA2OWFAi8zpOe"
    },
    {
        "timestamp": "2025-08-23 20:33:30.000",
        "source": "frontend",
        "data": {
            "mapping_index": 9,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_hover",
        "id": "Eh11fmAt1Iot312hDNeO"
    },
    {
        "timestamp": "2025-08-23 20:33:30.000",
        "source": "frontend",
        "data": {
            "mapping_index": 7,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_hover",
        "id": "ISKHMULNzJOOJkcCQszr"
    },
    {
        "timestamp": "2025-08-23 20:33:30.000",
        "source": "frontend",
        "data": {
            "mapping_index": 8,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_hover",
        "id": "L3ygiL7yoM7duk8BplKc"
    },
    {
        "timestamp": "2025-08-23 20:33:30.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_unhover",
        "id": "NuijT7mP50eZOIEgz616"
    },
    {
        "timestamp": "2025-08-23 20:33:30.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_unhover",
        "id": "Z5JF1upJDisFQiz7JOV8"
    },
    {
        "timestamp": "2025-08-23 20:33:30.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_unhover",
        "id": "cliBFoXPxFnSCpy3BfUZ"
    },
    {
        "timestamp": "2025-08-23 20:33:30.000",
        "source": "frontend",
        "data": {
            "mapping_index": 9,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_hover",
        "id": "dc17rqjCGVCN7NMs5Prb"
    },
    {
        "timestamp": "2025-08-23 20:33:30.000",
        "source": "frontend",
        "data": {
            "mapping_index": 9,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_hover",
        "id": "jlIqy4li6ZCs0YbDujve"
    },
    {
        "timestamp": "2025-08-23 20:33:30.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_unhover",
        "id": "l2LRXaFjbvYycQvX6cTs"
    },
    {
        "timestamp": "2025-08-23 20:33:30.000",
        "source": "frontend",
        "data": {
            "mapping_index": 6,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_hover",
        "id": "noyPx2QdMcNisWRi1hmj"
    },
    {
        "timestamp": "2025-08-23 20:33:30.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_unhover",
        "id": "yCSk5J5FBvEFKCpLKw36"
    },
    {
        "timestamp": "2025-08-23 20:33:31.000",
        "source": "frontend",
        "data": {},
        "event": "click_summarize_code",
        "id": "U51HmU5qQDX9w0ztvuoC"
    },
    {
        "timestamp": "2025-08-23 20:33:32.000",
        "source": "backend",
        "data": {
            "summary": "• React component for stock price chart\n• Uses Recharts for visualization\n• Displays company and ticker",
            "mapping": [
                {
                    "summaryComponent": "React component for stock price chart",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        },
                        {
                            "line": 56,
                            "code": "export default StockChart;"
                        }
                    ]
                },
                {
                    "summaryComponent": "Uses Recharts for visualization",
                    "codeSegments": [
                        {
                            "line": 2,
                            "code": "import {"
                        },
                        {
                            "line": 3,
                            "code": "LineChart,"
                        },
                        {
                            "line": 4,
                            "code": "Line,"
                        },
                        {
                            "line": 5,
                            "code": "XAxis,"
                        },
                        {
                            "line": 6,
                            "code": "YAxis,"
                        },
                        {
                            "line": 7,
                            "code": "Tooltip,"
                        },
                        {
                            "line": 8,
                            "code": "Legend,"
                        },
                        {
                            "line": 9,
                            "code": "ResponsiveContainer,"
                        },
                        {
                            "line": 10,
                            "code": "ReferenceLine,"
                        },
                        {
                            "line": 11,
                            "code": "} from \"recharts\";"
                        }
                    ]
                },
                {
                    "summaryComponent": "Displays company and ticker",
                    "codeSegments": [
                        {
                            "line": 16,
                            "code": "const company = data.name;"
                        },
                        {
                            "line": 17,
                            "code": "const ticker = data.ticker;"
                        },
                        {
                            "line": 37,
                            "code": "<h3>"
                        },
                        {
                            "line": 38,
                            "code": "{company} ({ticker})"
                        }
                    ]
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));\n28: \n29:   // Function to format date as month (e.g., \"Jan\", \"Feb\") in English\n30:   const formatMonth = (dateString) => {\n31:     const date = new Date(dateString);\n32:     return date.toLocaleString(\"en\", { month: \"short\" });\n33:   };\n34: \n35:   return (\n36:     <div style={{ marginTop: \"2rem\" }}>\n37:       <h3>\n38:         {company} ({ticker})\n39:       </h3>\n40:       <ResponsiveContainer width=\"100%\" height={300}>\n41:         <LineChart\n42:           data={chartData}\n43:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n44:         >\n45:           <XAxis dataKey=\"date\" tickFormatter={formatMonth} />\n46:           <YAxis domain={[\"auto\", \"auto\"]} />\n47:           <Tooltip />\n48:           <Legend />\n49:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n50:         </LineChart>\n51:       </ResponsiveContainer>\n52:     </div>\n53:   );\n54: };\n55: \n56: export default StockChart;\n57: "
        },
        "event": "map_summary_code",
        "id": "3BFmjKRb3xiRteY6y2Ph"
    },
    {
        "timestamp": "2025-08-23 20:33:32.000",
        "source": "frontend",
        "data": {
            "mapping_index": 1,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_hover",
        "id": "BOZqRizmnpE4KDo51VE7"
    },
    {
        "timestamp": "2025-08-23 20:33:32.000",
        "source": "frontend",
        "data": {
            "mapping_index": 0,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_hover",
        "id": "StxB2WOK7kDaaZWtbb6r"
    },
    {
        "timestamp": "2025-08-23 20:33:32.000",
        "source": "backend",
        "data": {
            "summary": "This code defines a React component that displays a stock price line chart using the Recharts library.",
            "mapping": [
                {
                    "summaryComponent": "defines a React component",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "displays a stock price line chart",
                    "codeSegments": [
                        {
                            "line": 41,
                            "code": "<LineChart"
                        },
                        {
                            "line": 49,
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                        }
                    ]
                },
                {
                    "summaryComponent": "using the Recharts library",
                    "codeSegments": [
                        {
                            "line": 2,
                            "code": "import {"
                        },
                        {
                            "line": 11,
                            "code": "} from \"recharts\";"
                        }
                    ]
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));\n28: \n29:   // Function to format date as month (e.g., \"Jan\", \"Feb\") in English\n30:   const formatMonth = (dateString) => {\n31:     const date = new Date(dateString);\n32:     return date.toLocaleString(\"en\", { month: \"short\" });\n33:   };\n34: \n35:   return (\n36:     <div style={{ marginTop: \"2rem\" }}>\n37:       <h3>\n38:         {company} ({ticker})\n39:       </h3>\n40:       <ResponsiveContainer width=\"100%\" height={300}>\n41:         <LineChart\n42:           data={chartData}\n43:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n44:         >\n45:           <XAxis dataKey=\"date\" tickFormatter={formatMonth} />\n46:           <YAxis domain={[\"auto\", \"auto\"]} />\n47:           <Tooltip />\n48:           <Legend />\n49:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n50:         </LineChart>\n51:       </ResponsiveContainer>\n52:     </div>\n53:   );\n54: };\n55: \n56: export default StockChart;\n57: "
        },
        "event": "map_summary_code",
        "id": "VZEFZ6wEtql9qm339Er9"
    },
    {
        "timestamp": "2025-08-23 20:33:32.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_unhover",
        "id": "ymnJGQGHSS4XA8NrGejE"
    },
    {
        "timestamp": "2025-08-23 20:33:33.000",
        "source": "backend",
        "data": {
            "summary": "• Defines a StockChart React component for visualizing stock data\n• Processes input data to extract dates and closing prices\n• Renders a line chart with:\n  ◦ X-axis labels formatted as months\n  ◦ Legend and tooltip for better readability\n• Displays company name and ticker above the chart",
            "mapping": [
                {
                    "summaryComponent": "Defines a StockChart React component for visualizing stock data",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        },
                        {
                            "line": 56,
                            "code": "export default StockChart;"
                        }
                    ]
                },
                {
                    "summaryComponent": "Processes input data to extract dates and closing prices",
                    "codeSegments": [
                        {
                            "line": 24,
                            "code": "const chartData = data.data.map((item) => ({"
                        },
                        {
                            "line": 25,
                            "code": "date: item.date,"
                        },
                        {
                            "line": 26,
                            "code": "price: item.close,"
                        }
                    ]
                },
                {
                    "summaryComponent": "Renders a line chart with:",
                    "codeSegments": [
                        {
                            "line": 41,
                            "code": "<LineChart"
                        }
                    ]
                },
                {
                    "summaryComponent": "X-axis labels formatted as months",
                    "codeSegments": [
                        {
                            "line": 45,
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatMonth} />"
                        },
                        {
                            "line": 30,
                            "code": "const formatMonth = (dateString) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "Legend and tooltip for better readability",
                    "codeSegments": [
                        {
                            "line": 47,
                            "code": "<Tooltip />"
                        },
                        {
                            "line": 48,
                            "code": "<Legend />"
                        }
                    ]
                },
                {
                    "summaryComponent": "Displays company name and ticker above the chart",
                    "codeSegments": [
                        {
                            "line": 37,
                            "code": "<h3>"
                        },
                        {
                            "line": 38,
                            "code": "{company} ({ticker})"
                        }
                    ]
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));\n28: \n29:   // Function to format date as month (e.g., \"Jan\", \"Feb\") in English\n30:   const formatMonth = (dateString) => {\n31:     const date = new Date(dateString);\n32:     return date.toLocaleString(\"en\", { month: \"short\" });\n33:   };\n34: \n35:   return (\n36:     <div style={{ marginTop: \"2rem\" }}>\n37:       <h3>\n38:         {company} ({ticker})\n39:       </h3>\n40:       <ResponsiveContainer width=\"100%\" height={300}>\n41:         <LineChart\n42:           data={chartData}\n43:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n44:         >\n45:           <XAxis dataKey=\"date\" tickFormatter={formatMonth} />\n46:           <YAxis domain={[\"auto\", \"auto\"]} />\n47:           <Tooltip />\n48:           <Legend />\n49:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n50:         </LineChart>\n51:       </ResponsiveContainer>\n52:     </div>\n53:   );\n54: };\n55: \n56: export default StockChart;\n57: "
        },
        "event": "map_summary_code",
        "id": "COpyugxQ2CjrN6ZxXDHL"
    },
    {
        "timestamp": "2025-08-23 20:33:33.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_unhover",
        "id": "MTbHmoMLzAVq9coUtLBQ"
    },
    {
        "timestamp": "2025-08-23 20:33:33.000",
        "source": "frontend",
        "data": {
            "mapping_index": 3,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_hover",
        "id": "fzpg2euKNU3m2GGHxMjr"
    },
    {
        "timestamp": "2025-08-23 20:33:33.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_unhover",
        "id": "g1tpz96dtQxaehKQm90D"
    },
    {
        "timestamp": "2025-08-23 20:33:33.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_unhover",
        "id": "ikRHTDSndxL0NKT5hPck"
    },
    {
        "timestamp": "2025-08-23 20:33:33.000",
        "source": "frontend",
        "data": {
            "mapping_index": 2,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_hover",
        "id": "qUVcpxvyMXtOQwanUfK2"
    },
    {
        "timestamp": "2025-08-23 20:33:33.000",
        "source": "backend",
        "data": {
            "summary": "This code implements a React component called StockChart that visualizes stock price data as a line chart using Recharts. It processes incoming data to extract dates and closing prices, and displays the chart with formatted month labels, a legend, and a tooltip. The component also shows the company name and ticker above the chart.",
            "mapping": [
                {
                    "summaryComponent": "a React component called StockChart",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        },
                        {
                            "line": 56,
                            "code": "export default StockChart;"
                        }
                    ]
                },
                {
                    "summaryComponent": "visualizes stock price data as a line chart using Recharts",
                    "codeSegments": [
                        {
                            "line": 41,
                            "code": "<LineChart"
                        },
                        {
                            "line": 49,
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                        }
                    ]
                },
                {
                    "summaryComponent": "processes incoming data to extract dates and closing prices",
                    "codeSegments": [
                        {
                            "line": 24,
                            "code": "const chartData = data.data.map((item) => ({"
                        },
                        {
                            "line": 25,
                            "code": "date: item.date,"
                        },
                        {
                            "line": 26,
                            "code": "price: item.close,"
                        }
                    ]
                },
                {
                    "summaryComponent": "displays the chart with formatted month labels",
                    "codeSegments": [
                        {
                            "line": 45,
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatMonth} />"
                        },
                        {
                            "line": 30,
                            "code": "const formatMonth = (dateString) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "a legend",
                    "codeSegments": [
                        {
                            "line": 48,
                            "code": "<Legend />"
                        }
                    ]
                },
                {
                    "summaryComponent": "and a tooltip",
                    "codeSegments": [
                        {
                            "line": 47,
                            "code": "<Tooltip />"
                        }
                    ]
                },
                {
                    "summaryComponent": "shows the company name and ticker above the chart",
                    "codeSegments": [
                        {
                            "line": 37,
                            "code": "<h3>"
                        },
                        {
                            "line": 38,
                            "code": "{company} ({ticker})"
                        }
                    ]
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));\n28: \n29:   // Function to format date as month (e.g., \"Jan\", \"Feb\") in English\n30:   const formatMonth = (dateString) => {\n31:     const date = new Date(dateString);\n32:     return date.toLocaleString(\"en\", { month: \"short\" });\n33:   };\n34: \n35:   return (\n36:     <div style={{ marginTop: \"2rem\" }}>\n37:       <h3>\n38:         {company} ({ticker})\n39:       </h3>\n40:       <ResponsiveContainer width=\"100%\" height={300}>\n41:         <LineChart\n42:           data={chartData}\n43:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n44:         >\n45:           <XAxis dataKey=\"date\" tickFormatter={formatMonth} />\n46:           <YAxis domain={[\"auto\", \"auto\"]} />\n47:           <Tooltip />\n48:           <Legend />\n49:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n50:         </LineChart>\n51:       </ResponsiveContainer>\n52:     </div>\n53:   );\n54: };\n55: \n56: export default StockChart;\n57: "
        },
        "event": "map_summary_code",
        "id": "xnF8gtSJxH4R5TrBwVlG"
    },
    {
        "timestamp": "2025-08-23 20:33:34.000",
        "source": "frontend",
        "data": {
            "mapping_index": 7,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_hover",
        "id": "QB3c6cyw4gDE5adYTufD"
    },
    {
        "timestamp": "2025-08-23 20:33:34.000",
        "source": "frontend",
        "data": {
            "mapping_index": 6,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_hover",
        "id": "vd2JoDjLjg4BPXm3EIE4"
    },
    {
        "timestamp": "2025-08-23 20:33:34.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_unhover",
        "id": "wF2IlTC64u4OjqlVWDoF"
    },
    {
        "timestamp": "2025-08-23 20:33:35.000",
        "source": "frontend",
        "data": {
            "mapping_index": 6,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_hover",
        "id": "3L4JINWXeNMmYCMwgYHe"
    },
    {
        "timestamp": "2025-08-23 20:33:35.000",
        "source": "backend",
        "data": {
            "summary": "This code defines the StockChart React component, which takes a data prop containing stock information and renders a responsive line chart using the Recharts library. The component first checks for valid data, then extracts the company name, ticker, and formats the data into an array of objects with date and closing price. It includes helper functions to format dates and months for display, and configures the chart with a monotone line, formatted X-axis, auto-scaling Y-axis, tooltip, and legend. The chart is wrapped in a responsive container and is displayed with the company name and ticker above it.",
            "mapping": [
                {
                    "summaryComponent": "defines the StockChart React component",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "takes a data prop containing stock information",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "renders a responsive line chart using the Recharts library",
                    "codeSegments": [
                        {
                            "line": 2,
                            "code": "import {"
                        },
                        {
                            "line": 3,
                            "code": "LineChart,"
                        },
                        {
                            "line": 4,
                            "code": "Line,"
                        },
                        {
                            "line": 9,
                            "code": "ResponsiveContainer,"
                        },
                        {
                            "line": 11,
                            "code": "} from \"recharts\";"
                        },
                        {
                            "line": 40,
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                        },
                        {
                            "line": 41,
                            "code": "<LineChart"
                        }
                    ]
                },
                {
                    "summaryComponent": "checks for valid data",
                    "codeSegments": [
                        {
                            "line": 14,
                            "code": "if (!data || !data.data || !data.data.length) return null;"
                        }
                    ]
                },
                {
                    "summaryComponent": "extracts the company name, ticker",
                    "codeSegments": [
                        {
                            "line": 16,
                            "code": "const company = data.name;"
                        },
                        {
                            "line": 17,
                            "code": "const ticker = data.ticker;"
                        }
                    ]
                },
                {
                    "summaryComponent": "formats the data into an array of objects with date and closing price",
                    "codeSegments": [
                        {
                            "line": 24,
                            "code": "const chartData = data.data.map((item) => ({"
                        },
                        {
                            "line": 25,
                            "code": "date: item.date,"
                        },
                        {
                            "line": 26,
                            "code": "price: item.close,"
                        },
                        {
                            "line": 27,
                            "code": "}));"
                        }
                    ]
                },
                {
                    "summaryComponent": "includes helper functions to format dates and months for display",
                    "codeSegments": [
                        {
                            "line": 19,
                            "code": "const formatDateString = (date) => {"
                        },
                        {
                            "line": 20,
                            "code": "return date.split(\"T\")[0];"
                        },
                        {
                            "line": 21,
                            "code": "};"
                        },
                        {
                            "line": 30,
                            "code": "const formatMonth = (dateString) => {"
                        },
                        {
                            "line": 31,
                            "code": "const date = new Date(dateString);"
                        },
                        {
                            "line": 32,
                            "code": "return date.toLocaleString(\"en\", { month: \"short\" });"
                        },
                        {
                            "line": 33,
                            "code": "};"
                        }
                    ]
                },
                {
                    "summaryComponent": "configures the chart with a monotone line, formatted X-axis, auto-scaling Y-axis, tooltip, and legend",
                    "codeSegments": [
                        {
                            "line": 45,
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatMonth} />"
                        },
                        {
                            "line": 46,
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                        },
                        {
                            "line": 47,
                            "code": "<Tooltip />"
                        },
                        {
                            "line": 48,
                            "code": "<Legend />"
                        },
                        {
                            "line": 49,
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                        }
                    ]
                },
                {
                    "summaryComponent": "chart is wrapped in a responsive container",
                    "codeSegments": [
                        {
                            "line": 40,
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                        }
                    ]
                },
                {
                    "summaryComponent": "displayed with the company name and ticker above it",
                    "codeSegments": [
                        {
                            "line": 37,
                            "code": "<h3>"
                        },
                        {
                            "line": 38,
                            "code": "{company} ({ticker})"
                        }
                    ]
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));\n28: \n29:   // Function to format date as month (e.g., \"Jan\", \"Feb\") in English\n30:   const formatMonth = (dateString) => {\n31:     const date = new Date(dateString);\n32:     return date.toLocaleString(\"en\", { month: \"short\" });\n33:   };\n34: \n35:   return (\n36:     <div style={{ marginTop: \"2rem\" }}>\n37:       <h3>\n38:         {company} ({ticker})\n39:       </h3>\n40:       <ResponsiveContainer width=\"100%\" height={300}>\n41:         <LineChart\n42:           data={chartData}\n43:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n44:         >\n45:           <XAxis dataKey=\"date\" tickFormatter={formatMonth} />\n46:           <YAxis domain={[\"auto\", \"auto\"]} />\n47:           <Tooltip />\n48:           <Legend />\n49:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n50:         </LineChart>\n51:       </ResponsiveContainer>\n52:     </div>\n53:   );\n54: };\n55: \n56: export default StockChart;\n57: "
        },
        "event": "map_summary_code",
        "id": "3dz3KG5wG15q7lq7Npdi"
    },
    {
        "timestamp": "2025-08-23 20:33:35.000",
        "source": "frontend",
        "data": {
            "mapping_index": 7,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_hover",
        "id": "DFmOiXLCU7Xdf5oSoRr2"
    },
    {
        "timestamp": "2025-08-23 20:33:35.000",
        "source": "backend",
        "data": {
            "summary": "• Implements the StockChart React component for displaying stock price trends\n• Validates input data to ensure it exists and contains entries\n• Extracts relevant information:\n  ◦ Company name and ticker from the data prop\n  ◦ Maps raw data to an array of objects with 'date' and 'price' fields\n• Provides helper functions:\n  ◦ formatDateString to trim date strings (though not directly used in rendering)\n  ◦ formatMonth to format X-axis labels as short month names\n• Renders the chart using Recharts components:\n  ◦ ResponsiveContainer ensures the chart scales to its parent\n  ◦ LineChart displays the data with a monotone line and no dots\n  ◦ XAxis uses formatted month labels, YAxis auto-scales\n  ◦ Tooltip and Legend enhance interactivity and readability\n• Displays the company name and ticker above the chart",
            "mapping": [
                {
                    "summaryComponent": "Implements the StockChart React component for displaying stock price trends",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "Validates input data to ensure it exists and contains entries",
                    "codeSegments": [
                        {
                            "line": 14,
                            "code": "if (!data || !data.data || !data.data.length) return null;"
                        }
                    ]
                },
                {
                    "summaryComponent": "Company name and ticker from the data prop",
                    "codeSegments": [
                        {
                            "line": 16,
                            "code": "const company = data.name;"
                        },
                        {
                            "line": 17,
                            "code": "const ticker = data.ticker;"
                        }
                    ]
                },
                {
                    "summaryComponent": "Maps raw data to an array of objects with 'date' and 'price' fields",
                    "codeSegments": [
                        {
                            "line": 24,
                            "code": "const chartData = data.data.map((item) => ({"
                        },
                        {
                            "line": 25,
                            "code": "date: item.date,"
                        },
                        {
                            "line": 26,
                            "code": "price: item.close,"
                        },
                        {
                            "line": 27,
                            "code": "}));"
                        }
                    ]
                },
                {
                    "summaryComponent": "formatDateString to trim date strings (though not directly used in rendering)",
                    "codeSegments": [
                        {
                            "line": 19,
                            "code": "const formatDateString = (date) => {"
                        },
                        {
                            "line": 20,
                            "code": "return date.split(\"T\")[0];"
                        },
                        {
                            "line": 21,
                            "code": "};"
                        }
                    ]
                },
                {
                    "summaryComponent": "formatMonth to format X-axis labels as short month names",
                    "codeSegments": [
                        {
                            "line": 30,
                            "code": "const formatMonth = (dateString) => {"
                        },
                        {
                            "line": 31,
                            "code": "const date = new Date(dateString);"
                        },
                        {
                            "line": 32,
                            "code": "return date.toLocaleString(\"en\", { month: \"short\" });"
                        },
                        {
                            "line": 33,
                            "code": "};"
                        }
                    ]
                },
                {
                    "summaryComponent": "ResponsiveContainer ensures the chart scales to its parent",
                    "codeSegments": [
                        {
                            "line": 40,
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                        }
                    ]
                },
                {
                    "summaryComponent": "LineChart displays the data with a monotone line and no dots",
                    "codeSegments": [
                        {
                            "line": 41,
                            "code": "<LineChart"
                        },
                        {
                            "line": 49,
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                        }
                    ]
                },
                {
                    "summaryComponent": "XAxis uses formatted month labels, YAxis auto-scales",
                    "codeSegments": [
                        {
                            "line": 45,
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatMonth} />"
                        },
                        {
                            "line": 46,
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                        }
                    ]
                },
                {
                    "summaryComponent": "Tooltip and Legend enhance interactivity and readability",
                    "codeSegments": [
                        {
                            "line": 47,
                            "code": "<Tooltip />"
                        },
                        {
                            "line": 48,
                            "code": "<Legend />"
                        }
                    ]
                },
                {
                    "summaryComponent": "Displays the company name and ticker above the chart",
                    "codeSegments": [
                        {
                            "line": 37,
                            "code": "<h3>"
                        },
                        {
                            "line": 38,
                            "code": "{company} ({ticker})"
                        }
                    ]
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));\n28: \n29:   // Function to format date as month (e.g., \"Jan\", \"Feb\") in English\n30:   const formatMonth = (dateString) => {\n31:     const date = new Date(dateString);\n32:     return date.toLocaleString(\"en\", { month: \"short\" });\n33:   };\n34: \n35:   return (\n36:     <div style={{ marginTop: \"2rem\" }}>\n37:       <h3>\n38:         {company} ({ticker})\n39:       </h3>\n40:       <ResponsiveContainer width=\"100%\" height={300}>\n41:         <LineChart\n42:           data={chartData}\n43:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n44:         >\n45:           <XAxis dataKey=\"date\" tickFormatter={formatMonth} />\n46:           <YAxis domain={[\"auto\", \"auto\"]} />\n47:           <Tooltip />\n48:           <Legend />\n49:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n50:         </LineChart>\n51:       </ResponsiveContainer>\n52:     </div>\n53:   );\n54: };\n55: \n56: export default StockChart;\n57: "
        },
        "event": "map_summary_code",
        "id": "JGA5Dl2WImwbin6XRewT"
    },
    {
        "timestamp": "2025-08-23 20:33:35.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_unhover",
        "id": "NXg56GmcbuuJ1M4NP7d2"
    },
    {
        "timestamp": "2025-08-23 20:33:35.000",
        "source": "frontend",
        "data": {
            "mapping_index": 8,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_hover",
        "id": "QKWWayH9UrLfSPbbkUOR"
    },
    {
        "timestamp": "2025-08-23 20:33:35.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_unhover",
        "id": "jYBDgiznpTkFlCNfiQI7"
    },
    {
        "timestamp": "2025-08-23 20:33:35.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_unhover",
        "id": "nBFGZshzrW23GtJIU6ML"
    },
    {
        "timestamp": "2025-08-23 20:33:35.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_unhover",
        "id": "vqyfTBPJgg7L1td6iMNC"
    },
    {
        "timestamp": "2025-08-23 20:33:35.000",
        "source": "frontend",
        "data": {
            "mapping_index": 5,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_hover",
        "id": "vy3dWGTNT6vMOiNbFwx6"
    },
    {
        "timestamp": "2025-08-23 20:33:36.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_unhover",
        "id": "laOsH9AMWpvPZ5yUlxyA"
    },
    {
        "timestamp": "2025-08-23 20:33:36.000",
        "source": "frontend",
        "data": {
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_unhover",
        "id": "mv0GzAUYsoMGHLlJXlp4"
    },
    {
        "timestamp": "2025-08-23 20:33:36.000",
        "source": "frontend",
        "data": {
            "mapping_index": 4,
            "section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "event": "mapping_hover",
        "id": "tHJRDdm9GoaQBLgA8ChA"
    },
    {
        "timestamp": "2025-08-23 20:33:43.000",
        "source": "frontend",
        "data": {
            "before_section_id": "81cb1ad3-c1fe-4bda-9a8c-9e8113ae119b",
            "after_section_id": "72a7ee70-9055-41fe-be82-0c77267c0fd0"
        },
        "event": "autotransit_section",
        "id": "M1MXt5FGN1GnCort4ARW"
    },
    {
        "timestamp": "2025-08-23 20:33:43.000",
        "source": "frontend",
        "data": {
            "section_id": "72a7ee70-9055-41fe-be82-0c77267c0fd0",
            "section_data": {
                "summaryData": {
                    "low_unstructured": "This code defines a React component that displays a stock price line chart using the Recharts library.",
                    "low_structured": "• React component for stock price chart\n• Uses Recharts for visualization\n• Displays company and ticker",
                    "medium_unstructured": "This code implements a React component called StockChart that visualizes stock price data as a line chart using Recharts. It processes incoming data to extract dates and closing prices, and displays the chart with formatted month labels, a legend, and a tooltip. The component also shows the company name and ticker above the chart.",
                    "high_structured": "• Implements the StockChart React component for displaying stock price trends\n• Validates input data to ensure it exists and contains entries\n• Extracts relevant information:\n  ◦ Company name and ticker from the data prop\n  ◦ Maps raw data to an array of objects with 'date' and 'price' fields\n• Provides helper functions:\n  ◦ formatDateString to trim date strings (though not directly used in rendering)\n  ◦ formatMonth to format X-axis labels as short month names\n• Renders the chart using Recharts components:\n  ◦ ResponsiveContainer ensures the chart scales to its parent\n  ◦ LineChart displays the data with a monotone line and no dots\n  ◦ XAxis uses formatted month labels, YAxis auto-scales\n  ◦ Tooltip and Legend enhance interactivity and readability\n• Displays the company name and ticker above the chart",
                    "medium_structured": "• Defines a StockChart React component for visualizing stock data\n• Processes input data to extract dates and closing prices\n• Renders a line chart with:\n  ◦ X-axis labels formatted as months\n  ◦ Legend and tooltip for better readability\n• Displays company name and ticker above the chart",
                    "title": "StockChart React Component for Displaying Stock Price Line Charts",
                    "high_unstructured": "This code defines the StockChart React component, which takes a data prop containing stock information and renders a responsive line chart using the Recharts library. The component first checks for valid data, then extracts the company name, ticker, and formats the data into an array of objects with date and closing price. It includes helper functions to format dates and months for display, and configures the chart with a monotone line, formatted X-axis, auto-scaling Y-axis, tooltip, and legend. The chart is wrapped in a responsive container and is displayed with the company name and ticker above it."
                },
                "metadata": {
                    "offset": 0,
                    "fullPath": "/project/workspace/frontend/src/StockChart.jsx",
                    "id": "72a7ee70-9055-41fe-be82-0c77267c0fd0",
                    "filename": "StockChart.jsx",
                    "originalCode": "import React from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  ReferenceLine,\n} from \"recharts\";\n\nconst StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  // Function to format date as month (e.g., \"Jan\", \"Feb\") in English\n  const formatMonth = (dateString) => {\n    const date = new Date(dateString);\n    return date.toLocaleString(\"en\", { month: \"short\" });\n  };\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatMonth} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;\n"
                },
                "editPromptValue": "",
                "selectedStructured": "unstructured",
                "editPromptDetailLevel": null,
                "editPromptStructured": null,
                "lines": [
                    1,
                    57
                ],
                "summaryMappings": {
                    "low_unstructured": [
                        {
                            "summaryComponent": "defines a React component",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "displays a stock price line chart",
                            "codeSegments": [
                                {
                                    "line": 41,
                                    "code": "<LineChart"
                                },
                                {
                                    "line": 49,
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "using the Recharts library",
                            "codeSegments": [
                                {
                                    "line": 2,
                                    "code": "import {"
                                },
                                {
                                    "line": 11,
                                    "code": "} from \"recharts\";"
                                }
                            ]
                        }
                    ],
                    "low_structured": [
                        {
                            "summaryComponent": "React component for stock price chart",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                },
                                {
                                    "line": 56,
                                    "code": "export default StockChart;"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Uses Recharts for visualization",
                            "codeSegments": [
                                {
                                    "line": 2,
                                    "code": "import {"
                                },
                                {
                                    "line": 3,
                                    "code": "LineChart,"
                                },
                                {
                                    "line": 4,
                                    "code": "Line,"
                                },
                                {
                                    "line": 5,
                                    "code": "XAxis,"
                                },
                                {
                                    "line": 6,
                                    "code": "YAxis,"
                                },
                                {
                                    "line": 7,
                                    "code": "Tooltip,"
                                },
                                {
                                    "line": 8,
                                    "code": "Legend,"
                                },
                                {
                                    "line": 9,
                                    "code": "ResponsiveContainer,"
                                },
                                {
                                    "line": 10,
                                    "code": "ReferenceLine,"
                                },
                                {
                                    "line": 11,
                                    "code": "} from \"recharts\";"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Displays company and ticker",
                            "codeSegments": [
                                {
                                    "line": 16,
                                    "code": "const company = data.name;"
                                },
                                {
                                    "line": 17,
                                    "code": "const ticker = data.ticker;"
                                },
                                {
                                    "line": 37,
                                    "code": "<h3>"
                                },
                                {
                                    "line": 38,
                                    "code": "{company} ({ticker})"
                                }
                            ]
                        }
                    ],
                    "medium_unstructured": [
                        {
                            "summaryComponent": "a React component called StockChart",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                },
                                {
                                    "line": 56,
                                    "code": "export default StockChart;"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "visualizes stock price data as a line chart using Recharts",
                            "codeSegments": [
                                {
                                    "line": 41,
                                    "code": "<LineChart"
                                },
                                {
                                    "line": 49,
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "processes incoming data to extract dates and closing prices",
                            "codeSegments": [
                                {
                                    "line": 24,
                                    "code": "const chartData = data.data.map((item) => ({"
                                },
                                {
                                    "line": 25,
                                    "code": "date: item.date,"
                                },
                                {
                                    "line": 26,
                                    "code": "price: item.close,"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "displays the chart with formatted month labels",
                            "codeSegments": [
                                {
                                    "line": 45,
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatMonth} />"
                                },
                                {
                                    "line": 30,
                                    "code": "const formatMonth = (dateString) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "a legend",
                            "codeSegments": [
                                {
                                    "line": 48,
                                    "code": "<Legend />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "and a tooltip",
                            "codeSegments": [
                                {
                                    "line": 47,
                                    "code": "<Tooltip />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "shows the company name and ticker above the chart",
                            "codeSegments": [
                                {
                                    "line": 37,
                                    "code": "<h3>"
                                },
                                {
                                    "line": 38,
                                    "code": "{company} ({ticker})"
                                }
                            ]
                        }
                    ],
                    "high_structured": [
                        {
                            "summaryComponent": "Implements the StockChart React component for displaying stock price trends",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Validates input data to ensure it exists and contains entries",
                            "codeSegments": [
                                {
                                    "line": 14,
                                    "code": "if (!data || !data.data || !data.data.length) return null;"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Company name and ticker from the data prop",
                            "codeSegments": [
                                {
                                    "line": 16,
                                    "code": "const company = data.name;"
                                },
                                {
                                    "line": 17,
                                    "code": "const ticker = data.ticker;"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Maps raw data to an array of objects with 'date' and 'price' fields",
                            "codeSegments": [
                                {
                                    "line": 24,
                                    "code": "const chartData = data.data.map((item) => ({"
                                },
                                {
                                    "line": 25,
                                    "code": "date: item.date,"
                                },
                                {
                                    "line": 26,
                                    "code": "price: item.close,"
                                },
                                {
                                    "line": 27,
                                    "code": "}));"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "formatDateString to trim date strings (though not directly used in rendering)",
                            "codeSegments": [
                                {
                                    "line": 19,
                                    "code": "const formatDateString = (date) => {"
                                },
                                {
                                    "line": 20,
                                    "code": "return date.split(\"T\")[0];"
                                },
                                {
                                    "line": 21,
                                    "code": "};"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "formatMonth to format X-axis labels as short month names",
                            "codeSegments": [
                                {
                                    "line": 30,
                                    "code": "const formatMonth = (dateString) => {"
                                },
                                {
                                    "line": 31,
                                    "code": "const date = new Date(dateString);"
                                },
                                {
                                    "line": 32,
                                    "code": "return date.toLocaleString(\"en\", { month: \"short\" });"
                                },
                                {
                                    "line": 33,
                                    "code": "};"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "ResponsiveContainer ensures the chart scales to its parent",
                            "codeSegments": [
                                {
                                    "line": 40,
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "LineChart displays the data with a monotone line and no dots",
                            "codeSegments": [
                                {
                                    "line": 41,
                                    "code": "<LineChart"
                                },
                                {
                                    "line": 49,
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "XAxis uses formatted month labels, YAxis auto-scales",
                            "codeSegments": [
                                {
                                    "line": 45,
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatMonth} />"
                                },
                                {
                                    "line": 46,
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Tooltip and Legend enhance interactivity and readability",
                            "codeSegments": [
                                {
                                    "line": 47,
                                    "code": "<Tooltip />"
                                },
                                {
                                    "line": 48,
                                    "code": "<Legend />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Displays the company name and ticker above the chart",
                            "codeSegments": [
                                {
                                    "line": 37,
                                    "code": "<h3>"
                                },
                                {
                                    "line": 38,
                                    "code": "{company} ({ticker})"
                                }
                            ]
                        }
                    ],
                    "medium_structured": [
                        {
                            "summaryComponent": "Defines a StockChart React component for visualizing stock data",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                },
                                {
                                    "line": 56,
                                    "code": "export default StockChart;"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Processes input data to extract dates and closing prices",
                            "codeSegments": [
                                {
                                    "line": 24,
                                    "code": "const chartData = data.data.map((item) => ({"
                                },
                                {
                                    "line": 25,
                                    "code": "date: item.date,"
                                },
                                {
                                    "line": 26,
                                    "code": "price: item.close,"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Renders a line chart with:",
                            "codeSegments": [
                                {
                                    "line": 41,
                                    "code": "<LineChart"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "X-axis labels formatted as months",
                            "codeSegments": [
                                {
                                    "line": 45,
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatMonth} />"
                                },
                                {
                                    "line": 30,
                                    "code": "const formatMonth = (dateString) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Legend and tooltip for better readability",
                            "codeSegments": [
                                {
                                    "line": 47,
                                    "code": "<Tooltip />"
                                },
                                {
                                    "line": 48,
                                    "code": "<Legend />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Displays company name and ticker above the chart",
                            "codeSegments": [
                                {
                                    "line": 37,
                                    "code": "<h3>"
                                },
                                {
                                    "line": 38,
                                    "code": "{company} ({ticker})"
                                }
                            ]
                        }
                    ],
                    "high_unstructured": [
                        {
                            "summaryComponent": "defines the StockChart React component",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "takes a data prop containing stock information",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "renders a responsive line chart using the Recharts library",
                            "codeSegments": [
                                {
                                    "line": 2,
                                    "code": "import {"
                                },
                                {
                                    "line": 3,
                                    "code": "LineChart,"
                                },
                                {
                                    "line": 4,
                                    "code": "Line,"
                                },
                                {
                                    "line": 9,
                                    "code": "ResponsiveContainer,"
                                },
                                {
                                    "line": 11,
                                    "code": "} from \"recharts\";"
                                },
                                {
                                    "line": 40,
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                                },
                                {
                                    "line": 41,
                                    "code": "<LineChart"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "checks for valid data",
                            "codeSegments": [
                                {
                                    "line": 14,
                                    "code": "if (!data || !data.data || !data.data.length) return null;"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "extracts the company name, ticker",
                            "codeSegments": [
                                {
                                    "line": 16,
                                    "code": "const company = data.name;"
                                },
                                {
                                    "line": 17,
                                    "code": "const ticker = data.ticker;"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "formats the data into an array of objects with date and closing price",
                            "codeSegments": [
                                {
                                    "line": 24,
                                    "code": "const chartData = data.data.map((item) => ({"
                                },
                                {
                                    "line": 25,
                                    "code": "date: item.date,"
                                },
                                {
                                    "line": 26,
                                    "code": "price: item.close,"
                                },
                                {
                                    "line": 27,
                                    "code": "}));"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "includes helper functions to format dates and months for display",
                            "codeSegments": [
                                {
                                    "line": 19,
                                    "code": "const formatDateString = (date) => {"
                                },
                                {
                                    "line": 20,
                                    "code": "return date.split(\"T\")[0];"
                                },
                                {
                                    "line": 21,
                                    "code": "};"
                                },
                                {
                                    "line": 30,
                                    "code": "const formatMonth = (dateString) => {"
                                },
                                {
                                    "line": 31,
                                    "code": "const date = new Date(dateString);"
                                },
                                {
                                    "line": 32,
                                    "code": "return date.toLocaleString(\"en\", { month: \"short\" });"
                                },
                                {
                                    "line": 33,
                                    "code": "};"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "configures the chart with a monotone line, formatted X-axis, auto-scaling Y-axis, tooltip, and legend",
                            "codeSegments": [
                                {
                                    "line": 45,
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatMonth} />"
                                },
                                {
                                    "line": 46,
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                                },
                                {
                                    "line": 47,
                                    "code": "<Tooltip />"
                                },
                                {
                                    "line": 48,
                                    "code": "<Legend />"
                                },
                                {
                                    "line": 49,
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "chart is wrapped in a responsive container",
                            "codeSegments": [
                                {
                                    "line": 40,
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "displayed with the company name and ticker above it",
                            "codeSegments": [
                                {
                                    "line": 37,
                                    "code": "<h3>"
                                },
                                {
                                    "line": 38,
                                    "code": "{company} ({ticker})"
                                }
                            ]
                        }
                    ]
                },
                "selectedDetailLevel": "medium",
                "title": "StockChart React Component for Displaying Stock Price Line Charts",
                "createdAt": 1755966815000
            }
        },
        "event": "create_new_section",
        "id": "W9UdCbyHnFnitmjbjt2e"
    },
    {
        "timestamp": "2025-08-23 20:33:57.000",
        "source": "frontend",
        "data": {
            "mapping_index": 3,
            "section_id": "72a7ee70-9055-41fe-be82-0c77267c0fd0",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "SoxjE1Qx6ZWfoAOcCVXF"
    },
    {
        "timestamp": "2025-08-23 20:33:57.000",
        "source": "frontend",
        "data": {
            "section_id": "72a7ee70-9055-41fe-be82-0c77267c0fd0",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "T4nPVpgvO24hEDo75mrz"
    },
    {
        "timestamp": "2025-08-23 20:33:57.000",
        "source": "frontend",
        "data": {
            "mapping_index": 6,
            "section_id": "72a7ee70-9055-41fe-be82-0c77267c0fd0",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "jNvoahPpazZ7sRzpxrXp"
    },
    {
        "timestamp": "2025-08-23 20:33:58.000",
        "source": "frontend",
        "data": {
            "section_id": "72a7ee70-9055-41fe-be82-0c77267c0fd0",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "318i7LVTb61SrW7T3S67"
    },
    {
        "timestamp": "2025-08-23 20:33:58.000",
        "source": "frontend",
        "data": {
            "section_id": "72a7ee70-9055-41fe-be82-0c77267c0fd0",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "ChU94rVcfzBsONKIBQ0C"
    },
    {
        "timestamp": "2025-08-23 20:33:58.000",
        "source": "frontend",
        "data": {
            "mapping_index": 6,
            "section_id": "72a7ee70-9055-41fe-be82-0c77267c0fd0",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "W5lmseGGxGbL3nSYYgtY"
    },
    {
        "timestamp": "2025-08-23 20:33:58.000",
        "source": "frontend",
        "data": {
            "mapping_index": 5,
            "section_id": "72a7ee70-9055-41fe-be82-0c77267c0fd0",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "Y4CtLEJtsGr7piHzo5qb"
    },
    {
        "timestamp": "2025-08-23 20:33:58.000",
        "source": "frontend",
        "data": {
            "section_id": "72a7ee70-9055-41fe-be82-0c77267c0fd0",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "lMHuepZJCd9q6mUp4sBl"
    },
    {
        "timestamp": "2025-08-23 20:34:00.000",
        "source": "frontend",
        "data": {
            "section_id": "72a7ee70-9055-41fe-be82-0c77267c0fd0",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "IE7wxKtwZ2LVMi29figY"
    },
    {
        "timestamp": "2025-08-23 20:34:00.000",
        "source": "frontend",
        "data": {
            "mapping_index": 3,
            "section_id": "72a7ee70-9055-41fe-be82-0c77267c0fd0",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "X2wEmq6RcOghG06RlXb9"
    },
    {
        "timestamp": "2025-08-23 20:34:00.000",
        "source": "frontend",
        "data": {
            "mapping_index": 2,
            "section_id": "72a7ee70-9055-41fe-be82-0c77267c0fd0",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "rMZK3T3a1lxaotUziMEK"
    },
    {
        "timestamp": "2025-08-23 20:34:01.000",
        "source": "frontend",
        "data": {
            "mapping_index": 2,
            "section_id": "72a7ee70-9055-41fe-be82-0c77267c0fd0",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "3yCpVK3tOg6T2T6Uohib"
    },
    {
        "timestamp": "2025-08-23 20:34:01.000",
        "source": "frontend",
        "data": {
            "section_id": "72a7ee70-9055-41fe-be82-0c77267c0fd0",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "DdbDZ6SLUcypUTZPXrOM"
    },
    {
        "timestamp": "2025-08-23 20:34:01.000",
        "source": "frontend",
        "data": {
            "mapping_index": 0,
            "section_id": "72a7ee70-9055-41fe-be82-0c77267c0fd0",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "KtCGBPZaHfI4YYKc3MzI"
    },
    {
        "timestamp": "2025-08-23 20:34:01.000",
        "source": "frontend",
        "data": {
            "section_id": "72a7ee70-9055-41fe-be82-0c77267c0fd0",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "t7pBwJhHJWEw2Irepash"
    },
    {
        "timestamp": "2025-08-23 20:34:02.000",
        "source": "frontend",
        "data": {
            "section_id": "72a7ee70-9055-41fe-be82-0c77267c0fd0",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "5EBNU3OAD0cqUzj8TRUh"
    },
    {
        "timestamp": "2025-08-23 20:34:02.000",
        "source": "frontend",
        "data": {
            "mapping_index": 5,
            "section_id": "72a7ee70-9055-41fe-be82-0c77267c0fd0",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "JFnuBkOAXxiZqr0d9UZm"
    },
    {
        "timestamp": "2025-08-23 20:34:02.000",
        "source": "frontend",
        "data": {
            "mapping_index": 6,
            "section_id": "72a7ee70-9055-41fe-be82-0c77267c0fd0",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "XZZMg8dzZp0m0rkisrO7"
    },
    {
        "timestamp": "2025-08-23 20:34:02.000",
        "source": "frontend",
        "data": {
            "mapping_index": 3,
            "section_id": "72a7ee70-9055-41fe-be82-0c77267c0fd0",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "oNViTeTgasY15ZMKDtGf"
    },
    {
        "timestamp": "2025-08-23 20:34:02.000",
        "source": "frontend",
        "data": {
            "section_id": "72a7ee70-9055-41fe-be82-0c77267c0fd0",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "sGKg6wXurr5lk6lTlAJc"
    },
    {
        "timestamp": "2025-08-23 20:34:02.000",
        "source": "frontend",
        "data": {
            "section_id": "72a7ee70-9055-41fe-be82-0c77267c0fd0",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "vEbRuS3jxBhUUJckdxdg"
    },
    {
        "timestamp": "2025-08-23 20:34:02.000",
        "source": "frontend",
        "data": {
            "section_id": "72a7ee70-9055-41fe-be82-0c77267c0fd0",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "wHy4n6olpyFvqhOYDETB"
    },
    {
        "timestamp": "2025-08-23 20:34:03.000",
        "source": "frontend",
        "data": {
            "section_id": "72a7ee70-9055-41fe-be82-0c77267c0fd0",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "7GxKZHqZ1UXHqpZAg0RU"
    },
    {
        "timestamp": "2025-08-23 20:34:03.000",
        "source": "frontend",
        "data": {
            "mapping_index": 1,
            "section_id": "72a7ee70-9055-41fe-be82-0c77267c0fd0",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "BzCRniXJtyUBeBc85LOd"
    },
    {
        "timestamp": "2025-08-23 20:34:03.000",
        "source": "frontend",
        "data": {
            "section_id": "72a7ee70-9055-41fe-be82-0c77267c0fd0",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "IBpRAVxVO6sXwD4znw8Y"
    },
    {
        "timestamp": "2025-08-23 20:34:03.000",
        "source": "frontend",
        "data": {
            "section_id": "72a7ee70-9055-41fe-be82-0c77267c0fd0",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "MbzdfWWLLbmjJrgrs9gg"
    },
    {
        "timestamp": "2025-08-23 20:34:03.000",
        "source": "frontend",
        "data": {
            "mapping_index": 5,
            "section_id": "72a7ee70-9055-41fe-be82-0c77267c0fd0",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "NbBwDu0zBrsrAwmlrsoa"
    },
    {
        "timestamp": "2025-08-23 20:34:03.000",
        "source": "frontend",
        "data": {
            "section_id": "72a7ee70-9055-41fe-be82-0c77267c0fd0",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "SVviklc6o8HbAc5FCqai"
    },
    {
        "timestamp": "2025-08-23 20:34:03.000",
        "source": "frontend",
        "data": {
            "mapping_index": 3,
            "section_id": "72a7ee70-9055-41fe-be82-0c77267c0fd0",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "StHWu0rlrHbN7m8Da4gb"
    },
    {
        "timestamp": "2025-08-23 20:34:03.000",
        "source": "frontend",
        "data": {
            "section_id": "72a7ee70-9055-41fe-be82-0c77267c0fd0",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "ZT1t9xOLYiGTE36GzSVr"
    },
    {
        "timestamp": "2025-08-23 20:34:03.000",
        "source": "frontend",
        "data": {
            "mapping_index": 1,
            "section_id": "72a7ee70-9055-41fe-be82-0c77267c0fd0",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "a1ox3E325ow02oXDxBDf"
    },
    {
        "timestamp": "2025-08-23 20:34:03.000",
        "source": "frontend",
        "data": {
            "mapping_index": 6,
            "section_id": "72a7ee70-9055-41fe-be82-0c77267c0fd0",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "eA3D2SlVOXtNnHpi5uNV"
    },
    {
        "timestamp": "2025-08-23 20:34:03.000",
        "source": "frontend",
        "data": {
            "section_id": "72a7ee70-9055-41fe-be82-0c77267c0fd0",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "nSEj9gnexNhqFJwfCM4x"
    },
    {
        "timestamp": "2025-08-23 20:34:03.000",
        "source": "frontend",
        "data": {
            "mapping_index": 5,
            "section_id": "72a7ee70-9055-41fe-be82-0c77267c0fd0",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "o7GNp9ObQi4ITlOpehLa"
    },
    {
        "timestamp": "2025-08-23 20:34:03.000",
        "source": "frontend",
        "data": {
            "mapping_index": 2,
            "section_id": "72a7ee70-9055-41fe-be82-0c77267c0fd0",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "q2Ao4hldeeVlkYeweHOI"
    },
    {
        "timestamp": "2025-08-23 20:34:03.000",
        "source": "frontend",
        "data": {
            "mapping_index": 2,
            "section_id": "72a7ee70-9055-41fe-be82-0c77267c0fd0",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "uPwaZofW0tgV7ERB1pn8"
    },
    {
        "timestamp": "2025-08-23 20:34:03.000",
        "source": "frontend",
        "data": {
            "section_id": "72a7ee70-9055-41fe-be82-0c77267c0fd0",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "vsQs2lmmcKnis9FGHOdx"
    },
    {
        "timestamp": "2025-08-23 20:34:03.000",
        "source": "frontend",
        "data": {
            "section_id": "72a7ee70-9055-41fe-be82-0c77267c0fd0",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "yTGyUWJavhNwW8uREiTV"
    },
    {
        "timestamp": "2025-08-23 20:34:04.000",
        "source": "frontend",
        "data": {
            "section_id": "72a7ee70-9055-41fe-be82-0c77267c0fd0",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "6yGK7TV81bsI60ktMvZx"
    },
    {
        "timestamp": "2025-08-23 20:34:04.000",
        "source": "frontend",
        "data": {
            "section_id": "72a7ee70-9055-41fe-be82-0c77267c0fd0",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "7I0m1ObcJE8I8fslCVZX"
    },
    {
        "timestamp": "2025-08-23 20:34:04.000",
        "source": "frontend",
        "data": {
            "mapping_index": 2,
            "section_id": "72a7ee70-9055-41fe-be82-0c77267c0fd0",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "FqhAUzHhkYsLgx8yI1C8"
    },
    {
        "timestamp": "2025-08-23 20:34:04.000",
        "source": "frontend",
        "data": {
            "section_id": "72a7ee70-9055-41fe-be82-0c77267c0fd0",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "RM46CqKnv6khqsGgzeBM"
    },
    {
        "timestamp": "2025-08-23 20:34:04.000",
        "source": "frontend",
        "data": {
            "mapping_index": 3,
            "section_id": "72a7ee70-9055-41fe-be82-0c77267c0fd0",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "U7vJe3KUBF0OUmbWA9m0"
    },
    {
        "timestamp": "2025-08-23 20:34:04.000",
        "source": "frontend",
        "data": {
            "section_id": "72a7ee70-9055-41fe-be82-0c77267c0fd0",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "YVJw5cKMItK2fKfLJgoH"
    },
    {
        "timestamp": "2025-08-23 20:34:04.000",
        "source": "frontend",
        "data": {
            "structured": "unstructured",
            "summary": "This code implements a React component called StockChart that visualizes stock price data as a line chart using Recharts. It processes incoming data to extract dates and closing prices, and displays the chart with formatted month labels, a legend, and a tooltip. The component also shows the company name and ticker above the chart.",
            "section_id": "72a7ee70-9055-41fe-be82-0c77267c0fd0",
            "detail_level": "medium"
        },
        "event": "click_edit_in_prompt",
        "id": "bNreNczfeNmQ7mv9CVeM"
    },
    {
        "timestamp": "2025-08-23 20:34:04.000",
        "source": "frontend",
        "data": {
            "mapping_index": 6,
            "section_id": "72a7ee70-9055-41fe-be82-0c77267c0fd0",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "nIT3BA9wqGWPtVuZg4Mm"
    },
    {
        "timestamp": "2025-08-23 20:34:04.000",
        "source": "frontend",
        "data": {
            "mapping_index": 1,
            "section_id": "72a7ee70-9055-41fe-be82-0c77267c0fd0",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "uKCT03KY7GTpAXhTxqHy"
    },
    {
        "timestamp": "2025-08-23 20:34:18.000",
        "source": "backend",
        "data": {
            "updated_summary": "This code implements a React component called StockChart that visualizes stock price data as a line chart using Recharts. It processes incoming data to extract dates and closing prices, and displays the chart with formatted month labels, a legend, and a tooltip. The component also shows the company name and ticker above the chart. Additionally, the chart includes a broken line indicating the current closing price.",
            "instruction": "add a broken line indicating the current closing price",
            "original_code": "import React from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  ReferenceLine,\n} from \"recharts\";\n\nconst StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  // Function to format date as month (e.g., \"Jan\", \"Feb\") in English\n  const formatMonth = (dateString) => {\n    const date = new Date(dateString);\n    return date.toLocaleString(\"en\", { month: \"short\" });\n  };\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatMonth} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;\n",
            "original_summary": "This code implements a React component called StockChart that visualizes stock price data as a line chart using Recharts. It processes incoming data to extract dates and closing prices, and displays the chart with formatted month labels, a legend, and a tooltip. The component also shows the company name and ticker above the chart."
        },
        "event": "apply_instruction_summary",
        "id": "vDWLpELQe58d1A13gC84"
    },
    {
        "timestamp": "2025-08-23 20:34:21.000",
        "source": "frontend",
        "data": {
            "section_id": "72a7ee70-9055-41fe-be82-0c77267c0fd0",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "Yzt6t6UEsLP3nVUvZfiu"
    },
    {
        "timestamp": "2025-08-23 20:34:21.000",
        "source": "frontend",
        "data": {
            "mapping_index": 6,
            "section_id": "72a7ee70-9055-41fe-be82-0c77267c0fd0",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "wxyu5jlXVGHfRIPV4ans"
    },
    {
        "timestamp": "2025-08-23 20:34:24.000",
        "source": "frontend",
        "data": {
            "structured": "unstructured",
            "section_id": "72a7ee70-9055-41fe-be82-0c77267c0fd0",
            "instruction": "add a broken line indicating the current closing price",
            "original_summary": "This code implements a React component called StockChart that visualizes stock price data as a line chart using Recharts. It processes incoming data to extract dates and closing prices, and displays the chart with formatted month labels, a legend, and a tooltip. The component also shows the company name and ticker above the chart.",
            "detail_level": "medium"
        },
        "event": "apply_instruction_summary",
        "id": "NyEIXaKpZoVZzqZeIfil"
    },
    {
        "timestamp": "2025-08-23 20:34:25.000",
        "source": "backend",
        "data": {
            "updated_code": "import React from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  ReferenceLine,\n} from \"recharts\";\n\nconst StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  // Function to format date as month (e.g., \"Jan\", \"Feb\") in English\n  const formatMonth = (dateString) => {\n    const date = new Date(dateString);\n    return date.toLocaleString(\"en\", { month: \"short\" });\n  };\n\n  // Get the latest closing price\n  const currentClose = chartData.length > 0 ? chartData[chartData.length - 1].price : null;\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatMonth} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n          {currentClose !== null && (\n            <ReferenceLine\n              y={currentClose}\n              stroke=\"#ff7300\"\n              strokeDasharray=\"5 5\"\n              label={{ value: \"Current Close\", position: \"right\", fill: \"#ff7300\" }}\n            />\n          )}\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;",
            "edited_summary": "This code implements a React component called StockChart that visualizes stock price data as a line chart using Recharts. It processes incoming data to extract dates and closing prices, and displays the chart with formatted month labels, a legend, and a tooltip. The component also shows the company name and ticker above the chart. Additionally, the chart includes a broken line indicating the current closing price.",
            "structured_type": "unstructured",
            "original_code": "import React from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  ReferenceLine,\n} from \"recharts\";\n\nconst StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  // Function to format date as month (e.g., \"Jan\", \"Feb\") in English\n  const formatMonth = (dateString) => {\n    const date = new Date(dateString);\n    return date.toLocaleString(\"en\", { month: \"short\" });\n  };\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatMonth} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;\n",
            "original_summary": "This code implements a React component called StockChart that visualizes stock price data as a line chart using Recharts. It processes incoming data to extract dates and closing prices, and displays the chart with formatted month labels, a legend, and a tooltip. The component also shows the company name and ticker above the chart.",
            "detail_level": "medium"
        },
        "event": "modify_summary_mediation",
        "id": "xCU2lYBJhZRMKlTKjz5s"
    },
    {
        "timestamp": "2025-08-23 20:34:29.000",
        "source": "frontend",
        "data": {
            "structured": "unstructured",
            "section_id": "72a7ee70-9055-41fe-be82-0c77267c0fd0",
            "edited_summary": "This code implements a React component called StockChart that visualizes stock price data as a line chart using Recharts. It processes incoming data to extract dates and closing prices, and displays the chart with formatted month labels, a legend, and a tooltip. The component also shows the company name and ticker above the chart. Additionally, the chart includes a broken line indicating the current closing price.",
            "original_summary": "This code implements a React component called StockChart that visualizes stock price data as a line chart using Recharts. It processes incoming data to extract dates and closing prices, and displays the chart with formatted month labels, a legend, and a tooltip. The component also shows the company name and ticker above the chart.",
            "detail_level": "medium"
        },
        "event": "commit_modified_summary",
        "id": "RtsLIq3NtpqHlPUfeATP"
    },
    {
        "timestamp": "2025-08-23 20:34:35.000",
        "source": "backend",
        "data": {
            "new_summary": {
                "low_unstructured": "This code defines a React component that displays a stock price line chart using the Recharts library, now enhanced to include a horizontal reference line marking the latest closing price.",
                "low_structured": "• React component for stock price chart\n• Uses Recharts for visualization\n• Displays company and ticker\n• Adds a horizontal reference line at the latest closing price",
                "medium_unstructured": "This code implements a React component called StockChart that visualizes stock price data as a line chart using Recharts. It processes incoming data to extract dates and closing prices, and displays the chart with formatted month labels, a legend, and a tooltip. The component also shows the company name and ticker above the chart, and now visually highlights the most recent closing price with a labeled horizontal reference line.",
                "high_structured": "• Implements the StockChart React component for displaying stock price trends\n• Validates input data to ensure it exists and contains entries\n• Extracts relevant information:\n  ◦ Company name and ticker from the data prop\n  ◦ Maps raw data to an array of objects with 'date' and 'price' fields\n• Provides helper functions:\n  ◦ formatDateString to trim date strings (though not directly used in rendering)\n  ◦ formatMonth to format X-axis labels as short month names\n• Renders the chart using Recharts components:\n  ◦ ResponsiveContainer ensures the chart scales to its parent\n  ◦ LineChart displays the data with a monotone line and no dots\n  ◦ XAxis uses formatted month labels, YAxis auto-scales\n  ◦ Tooltip and Legend enhance interactivity and readability\n  ◦ Adds a ReferenceLine at the latest closing price, labeled as \"Current Close\"\n• Displays the company name and ticker above the chart",
                "medium_structured": "• Defines a StockChart React component for visualizing stock data\n• Processes input data to extract dates and closing prices\n• Renders a line chart with:\n  ◦ X-axis labels formatted as months\n  ◦ Legend and tooltip for better readability\n  ◦ A horizontal reference line marking the latest closing price\n• Displays company name and ticker above the chart",
                "title": "StockChart React Component with Highlighted Current Close Reference Line",
                "high_unstructured": "This code defines the StockChart React component, which takes a data prop containing stock information and renders a responsive line chart using the Recharts library. The component first checks for valid data, then extracts the company name, ticker, and formats the data into an array of objects with date and closing price. It includes helper functions to format dates and months for display, and configures the chart with a monotone line, formatted X-axis, auto-scaling Y-axis, tooltip, and legend. The chart is wrapped in a responsive container and is displayed with the company name and ticker above it. Additionally, the chart now features a horizontal ReferenceLine at the most recent closing price, visually labeled as \"Current Close\"."
            },
            "original_code": "import React from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  ReferenceLine,\n} from \"recharts\";\n\nconst StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  // Function to format date as month (e.g., \"Jan\", \"Feb\") in English\n  const formatMonth = (dateString) => {\n    const date = new Date(dateString);\n    return date.toLocaleString(\"en\", { month: \"short\" });\n  };\n\n  // Get the latest closing price\n  const currentClose = chartData.length > 0 ? chartData[chartData.length - 1].price : null;\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatMonth} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n          {currentClose !== null && (\n            <ReferenceLine\n              y={currentClose}\n              stroke=\"#ff7300\"\n              strokeDasharray=\"5 5\"\n              label={{ value: \"Current Close\", position: \"right\", fill: \"#ff7300\" }}\n            />\n          )}\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;",
            "new_code": "import React from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  ReferenceLine,\n} from \"recharts\";\n\nconst StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  // Function to format date as month (e.g., \"Jan\", \"Feb\") in English\n  const formatMonth = (dateString) => {\n    const date = new Date(dateString);\n    return date.toLocaleString(\"en\", { month: \"short\" });\n  };\n\n  // Get the latest closing price\n  const currentClose = chartData.length > 0 ? chartData[chartData.length - 1].price : null;\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatMonth} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n          {currentClose !== null && (\n            <ReferenceLine\n              y={currentClose}\n              stroke=\"#ff7300\"\n              strokeDasharray=\"5 5\"\n              label={{ value: \"Current Close\", position: \"right\", fill: \"#ff7300\" }}\n            />\n          )}\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;",
            "old_summary": {
                "low_unstructured": "This code defines a React component that displays a stock price line chart using the Recharts library.",
                "low_structured": "• React component for stock price chart\n• Uses Recharts for visualization\n• Displays company and ticker",
                "medium_unstructured": "This code implements a React component called StockChart that visualizes stock price data as a line chart using Recharts. It processes incoming data to extract dates and closing prices, and displays the chart with formatted month labels, a legend, and a tooltip. The component also shows the company name and ticker above the chart.",
                "high_structured": "• Implements the StockChart React component for displaying stock price trends\n• Validates input data to ensure it exists and contains entries\n• Extracts relevant information:\n  ◦ Company name and ticker from the data prop\n  ◦ Maps raw data to an array of objects with 'date' and 'price' fields\n• Provides helper functions:\n  ◦ formatDateString to trim date strings (though not directly used in rendering)\n  ◦ formatMonth to format X-axis labels as short month names\n• Renders the chart using Recharts components:\n  ◦ ResponsiveContainer ensures the chart scales to its parent\n  ◦ LineChart displays the data with a monotone line and no dots\n  ◦ XAxis uses formatted month labels, YAxis auto-scales\n  ◦ Tooltip and Legend enhance interactivity and readability\n• Displays the company name and ticker above the chart",
                "medium_structured": "• Defines a StockChart React component for visualizing stock data\n• Processes input data to extract dates and closing prices\n• Renders a line chart with:\n  ◦ X-axis labels formatted as months\n  ◦ Legend and tooltip for better readability\n• Displays company name and ticker above the chart",
                "title": "StockChart React Component for Displaying Stock Price Line Charts",
                "high_unstructured": "This code defines the StockChart React component, which takes a data prop containing stock information and renders a responsive line chart using the Recharts library. The component first checks for valid data, then extracts the company name, ticker, and formats the data into an array of objects with date and closing price. It includes helper functions to format dates and months for display, and configures the chart with a monotone line, formatted X-axis, auto-scaling Y-axis, tooltip, and legend. The chart is wrapped in a responsive container and is displayed with the company name and ticker above it."
            }
        },
        "event": "summarize_modified_code",
        "id": "OPkb0UvkhyA5xCCyJ3GY"
    },
    {
        "timestamp": "2025-08-23 20:34:38.000",
        "source": "backend",
        "data": {
            "summary": "This code defines a React component that displays a stock price line chart using the Recharts library, now enhanced to include a horizontal reference line marking the latest closing price.",
            "mapping": [
                {
                    "summaryComponent": "defines a React component",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "displays a stock price line chart",
                    "codeSegments": [
                        {
                            "line": 44,
                            "code": "<LineChart"
                        },
                        {
                            "line": 52,
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                        }
                    ]
                },
                {
                    "summaryComponent": "using the Recharts library",
                    "codeSegments": [
                        {
                            "line": 2,
                            "code": "import {"
                        },
                        {
                            "line": 11,
                            "code": "} from \"recharts\";"
                        }
                    ]
                },
                {
                    "summaryComponent": "now enhanced to include a horizontal reference line",
                    "codeSegments": [
                        {
                            "line": 54,
                            "code": "<ReferenceLine"
                        }
                    ]
                },
                {
                    "summaryComponent": "marking the latest closing price",
                    "codeSegments": [
                        {
                            "line": 36,
                            "code": "const currentClose = chartData.length > 0 ? chartData[chartData.length - 1].price : null;"
                        },
                        {
                            "line": 55,
                            "code": "y={currentClose}"
                        }
                    ]
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));\n28: \n29:   // Function to format date as month (e.g., \"Jan\", \"Feb\") in English\n30:   const formatMonth = (dateString) => {\n31:     const date = new Date(dateString);\n32:     return date.toLocaleString(\"en\", { month: \"short\" });\n33:   };\n34: \n35:   // Get the latest closing price\n36:   const currentClose = chartData.length > 0 ? chartData[chartData.length - 1].price : null;\n37: \n38:   return (\n39:     <div style={{ marginTop: \"2rem\" }}>\n40:       <h3>\n41:         {company} ({ticker})\n42:       </h3>\n43:       <ResponsiveContainer width=\"100%\" height={300}>\n44:         <LineChart\n45:           data={chartData}\n46:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n47:         >\n48:           <XAxis dataKey=\"date\" tickFormatter={formatMonth} />\n49:           <YAxis domain={[\"auto\", \"auto\"]} />\n50:           <Tooltip />\n51:           <Legend />\n52:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n53:           {currentClose !== null && (\n54:             <ReferenceLine\n55:               y={currentClose}\n56:               stroke=\"#ff7300\"\n57:               strokeDasharray=\"5 5\"\n58:               label={{ value: \"Current Close\", position: \"right\", fill: \"#ff7300\" }}\n59:             />\n60:           )}\n61:         </LineChart>\n62:       </ResponsiveContainer>\n63:     </div>\n64:   );\n65: };\n66: \n67: export default StockChart;"
        },
        "event": "map_summary_code",
        "id": "taRJjUbi2FBuzaKDwGwW"
    },
    {
        "timestamp": "2025-08-23 20:34:39.000",
        "source": "backend",
        "data": {
            "summary": "• Defines a StockChart React component for visualizing stock data\n• Processes input data to extract dates and closing prices\n• Renders a line chart with:\n  ◦ X-axis labels formatted as months\n  ◦ Legend and tooltip for better readability\n  ◦ A horizontal reference line marking the latest closing price\n• Displays company name and ticker above the chart",
            "mapping": [
                {
                    "summaryComponent": "Defines a StockChart React component for visualizing stock data",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        },
                        {
                            "line": 67,
                            "code": "export default StockChart;"
                        }
                    ]
                },
                {
                    "summaryComponent": "Processes input data to extract dates and closing prices",
                    "codeSegments": [
                        {
                            "line": 24,
                            "code": "const chartData = data.data.map((item) => ({"
                        },
                        {
                            "line": 25,
                            "code": "date: item.date,"
                        },
                        {
                            "line": 26,
                            "code": "price: item.close,"
                        }
                    ]
                },
                {
                    "summaryComponent": "Renders a line chart with:",
                    "codeSegments": [
                        {
                            "line": 44,
                            "code": "<LineChart"
                        }
                    ]
                },
                {
                    "summaryComponent": "X-axis labels formatted as months",
                    "codeSegments": [
                        {
                            "line": 48,
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatMonth} />"
                        },
                        {
                            "line": 30,
                            "code": "const formatMonth = (dateString) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "Legend and tooltip for better readability",
                    "codeSegments": [
                        {
                            "line": 50,
                            "code": "<Tooltip />"
                        },
                        {
                            "line": 51,
                            "code": "<Legend />"
                        }
                    ]
                },
                {
                    "summaryComponent": "A horizontal reference line marking the latest closing price",
                    "codeSegments": [
                        {
                            "line": 53,
                            "code": "{currentClose !== null && ("
                        },
                        {
                            "line": 54,
                            "code": "<ReferenceLine"
                        },
                        {
                            "line": 55,
                            "code": "y={currentClose}"
                        }
                    ]
                },
                {
                    "summaryComponent": "Displays company name and ticker above the chart",
                    "codeSegments": [
                        {
                            "line": 40,
                            "code": "<h3>"
                        },
                        {
                            "line": 41,
                            "code": "{company} ({ticker})"
                        }
                    ]
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));\n28: \n29:   // Function to format date as month (e.g., \"Jan\", \"Feb\") in English\n30:   const formatMonth = (dateString) => {\n31:     const date = new Date(dateString);\n32:     return date.toLocaleString(\"en\", { month: \"short\" });\n33:   };\n34: \n35:   // Get the latest closing price\n36:   const currentClose = chartData.length > 0 ? chartData[chartData.length - 1].price : null;\n37: \n38:   return (\n39:     <div style={{ marginTop: \"2rem\" }}>\n40:       <h3>\n41:         {company} ({ticker})\n42:       </h3>\n43:       <ResponsiveContainer width=\"100%\" height={300}>\n44:         <LineChart\n45:           data={chartData}\n46:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n47:         >\n48:           <XAxis dataKey=\"date\" tickFormatter={formatMonth} />\n49:           <YAxis domain={[\"auto\", \"auto\"]} />\n50:           <Tooltip />\n51:           <Legend />\n52:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n53:           {currentClose !== null && (\n54:             <ReferenceLine\n55:               y={currentClose}\n56:               stroke=\"#ff7300\"\n57:               strokeDasharray=\"5 5\"\n58:               label={{ value: \"Current Close\", position: \"right\", fill: \"#ff7300\" }}\n59:             />\n60:           )}\n61:         </LineChart>\n62:       </ResponsiveContainer>\n63:     </div>\n64:   );\n65: };\n66: \n67: export default StockChart;"
        },
        "event": "map_summary_code",
        "id": "d6l6ssiaroUOV38bhLJd"
    },
    {
        "timestamp": "2025-08-23 20:34:39.000",
        "source": "backend",
        "data": {
            "summary": "• React component for stock price chart\n• Uses Recharts for visualization\n• Displays company and ticker\n• Adds a horizontal reference line at the latest closing price",
            "mapping": [
                {
                    "summaryComponent": "React component for stock price chart",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        },
                        {
                            "line": 67,
                            "code": "export default StockChart;"
                        }
                    ]
                },
                {
                    "summaryComponent": "Uses Recharts for visualization",
                    "codeSegments": [
                        {
                            "line": 2,
                            "code": "import {"
                        },
                        {
                            "line": 3,
                            "code": "LineChart,"
                        },
                        {
                            "line": 4,
                            "code": "Line,"
                        },
                        {
                            "line": 5,
                            "code": "XAxis,"
                        },
                        {
                            "line": 6,
                            "code": "YAxis,"
                        },
                        {
                            "line": 7,
                            "code": "Tooltip,"
                        },
                        {
                            "line": 8,
                            "code": "Legend,"
                        },
                        {
                            "line": 9,
                            "code": "ResponsiveContainer,"
                        },
                        {
                            "line": 10,
                            "code": "ReferenceLine,"
                        },
                        {
                            "line": 11,
                            "code": "} from \"recharts\";"
                        }
                    ]
                },
                {
                    "summaryComponent": "Displays company and ticker",
                    "codeSegments": [
                        {
                            "line": 16,
                            "code": "const company = data.name;"
                        },
                        {
                            "line": 17,
                            "code": "const ticker = data.ticker;"
                        },
                        {
                            "line": 40,
                            "code": "<h3>"
                        },
                        {
                            "line": 41,
                            "code": "{company} ({ticker})"
                        }
                    ]
                },
                {
                    "summaryComponent": "Adds a horizontal reference line at the latest closing price",
                    "codeSegments": [
                        {
                            "line": 36,
                            "code": "const currentClose = chartData.length > 0 ? chartData[chartData.length - 1].price : null;"
                        },
                        {
                            "line": 53,
                            "code": "{currentClose !== null && ("
                        },
                        {
                            "line": 54,
                            "code": "<ReferenceLine"
                        },
                        {
                            "line": 55,
                            "code": "y={currentClose}"
                        },
                        {
                            "line": 56,
                            "code": "stroke=\"#ff7300\""
                        },
                        {
                            "line": 57,
                            "code": "strokeDasharray=\"5 5\""
                        },
                        {
                            "line": 58,
                            "code": "label={{ value: \"Current Close\", position: \"right\", fill: \"#ff7300\" }}"
                        }
                    ]
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));\n28: \n29:   // Function to format date as month (e.g., \"Jan\", \"Feb\") in English\n30:   const formatMonth = (dateString) => {\n31:     const date = new Date(dateString);\n32:     return date.toLocaleString(\"en\", { month: \"short\" });\n33:   };\n34: \n35:   // Get the latest closing price\n36:   const currentClose = chartData.length > 0 ? chartData[chartData.length - 1].price : null;\n37: \n38:   return (\n39:     <div style={{ marginTop: \"2rem\" }}>\n40:       <h3>\n41:         {company} ({ticker})\n42:       </h3>\n43:       <ResponsiveContainer width=\"100%\" height={300}>\n44:         <LineChart\n45:           data={chartData}\n46:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n47:         >\n48:           <XAxis dataKey=\"date\" tickFormatter={formatMonth} />\n49:           <YAxis domain={[\"auto\", \"auto\"]} />\n50:           <Tooltip />\n51:           <Legend />\n52:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n53:           {currentClose !== null && (\n54:             <ReferenceLine\n55:               y={currentClose}\n56:               stroke=\"#ff7300\"\n57:               strokeDasharray=\"5 5\"\n58:               label={{ value: \"Current Close\", position: \"right\", fill: \"#ff7300\" }}\n59:             />\n60:           )}\n61:         </LineChart>\n62:       </ResponsiveContainer>\n63:     </div>\n64:   );\n65: };\n66: \n67: export default StockChart;"
        },
        "event": "map_summary_code",
        "id": "rmi2MtPgYWJunBQ5fAT1"
    },
    {
        "timestamp": "2025-08-23 20:34:40.000",
        "source": "backend",
        "data": {
            "summary": "This code implements a React component called StockChart that visualizes stock price data as a line chart using Recharts. It processes incoming data to extract dates and closing prices, and displays the chart with formatted month labels, a legend, and a tooltip. The component also shows the company name and ticker above the chart, and now visually highlights the most recent closing price with a labeled horizontal reference line.",
            "mapping": [
                {
                    "summaryComponent": "a React component called StockChart",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        },
                        {
                            "line": 67,
                            "code": "export default StockChart;"
                        }
                    ]
                },
                {
                    "summaryComponent": "visualizes stock price data as a line chart using Recharts",
                    "codeSegments": [
                        {
                            "line": 44,
                            "code": "<LineChart"
                        },
                        {
                            "line": 52,
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                        }
                    ]
                },
                {
                    "summaryComponent": "processes incoming data to extract dates and closing prices",
                    "codeSegments": [
                        {
                            "line": 24,
                            "code": "const chartData = data.data.map((item) => ({"
                        },
                        {
                            "line": 25,
                            "code": "date: item.date,"
                        },
                        {
                            "line": 26,
                            "code": "price: item.close,"
                        }
                    ]
                },
                {
                    "summaryComponent": "displays the chart with formatted month labels",
                    "codeSegments": [
                        {
                            "line": 48,
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatMonth} />"
                        },
                        {
                            "line": 30,
                            "code": "const formatMonth = (dateString) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "a legend",
                    "codeSegments": [
                        {
                            "line": 51,
                            "code": "<Legend />"
                        }
                    ]
                },
                {
                    "summaryComponent": "and a tooltip",
                    "codeSegments": [
                        {
                            "line": 50,
                            "code": "<Tooltip />"
                        }
                    ]
                },
                {
                    "summaryComponent": "shows the company name and ticker above the chart",
                    "codeSegments": [
                        {
                            "line": 40,
                            "code": "<h3>"
                        },
                        {
                            "line": 41,
                            "code": "{company} ({ticker})"
                        }
                    ]
                },
                {
                    "summaryComponent": "visually highlights the most recent closing price with a labeled horizontal reference line",
                    "codeSegments": [
                        {
                            "line": 53,
                            "code": "{currentClose !== null && ("
                        },
                        {
                            "line": 54,
                            "code": "<ReferenceLine"
                        },
                        {
                            "line": 55,
                            "code": "y={currentClose}"
                        },
                        {
                            "line": 58,
                            "code": "label={{ value: \"Current Close\", position: \"right\", fill: \"#ff7300\" }}"
                        }
                    ]
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));\n28: \n29:   // Function to format date as month (e.g., \"Jan\", \"Feb\") in English\n30:   const formatMonth = (dateString) => {\n31:     const date = new Date(dateString);\n32:     return date.toLocaleString(\"en\", { month: \"short\" });\n33:   };\n34: \n35:   // Get the latest closing price\n36:   const currentClose = chartData.length > 0 ? chartData[chartData.length - 1].price : null;\n37: \n38:   return (\n39:     <div style={{ marginTop: \"2rem\" }}>\n40:       <h3>\n41:         {company} ({ticker})\n42:       </h3>\n43:       <ResponsiveContainer width=\"100%\" height={300}>\n44:         <LineChart\n45:           data={chartData}\n46:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n47:         >\n48:           <XAxis dataKey=\"date\" tickFormatter={formatMonth} />\n49:           <YAxis domain={[\"auto\", \"auto\"]} />\n50:           <Tooltip />\n51:           <Legend />\n52:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n53:           {currentClose !== null && (\n54:             <ReferenceLine\n55:               y={currentClose}\n56:               stroke=\"#ff7300\"\n57:               strokeDasharray=\"5 5\"\n58:               label={{ value: \"Current Close\", position: \"right\", fill: \"#ff7300\" }}\n59:             />\n60:           )}\n61:         </LineChart>\n62:       </ResponsiveContainer>\n63:     </div>\n64:   );\n65: };\n66: \n67: export default StockChart;"
        },
        "event": "map_summary_code",
        "id": "tMq4ACSPyDdT22BD3dm8"
    },
    {
        "timestamp": "2025-08-23 20:34:41.000",
        "source": "backend",
        "data": {
            "summary": "• Implements the StockChart React component for displaying stock price trends\n• Validates input data to ensure it exists and contains entries\n• Extracts relevant information:\n  ◦ Company name and ticker from the data prop\n  ◦ Maps raw data to an array of objects with 'date' and 'price' fields\n• Provides helper functions:\n  ◦ formatDateString to trim date strings (though not directly used in rendering)\n  ◦ formatMonth to format X-axis labels as short month names\n• Renders the chart using Recharts components:\n  ◦ ResponsiveContainer ensures the chart scales to its parent\n  ◦ LineChart displays the data with a monotone line and no dots\n  ◦ XAxis uses formatted month labels, YAxis auto-scales\n  ◦ Tooltip and Legend enhance interactivity and readability\n  ◦ Adds a ReferenceLine at the latest closing price, labeled as \"Current Close\"\n• Displays the company name and ticker above the chart",
            "mapping": [
                {
                    "summaryComponent": "Implements the StockChart React component for displaying stock price trends",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "Validates input data to ensure it exists and contains entries",
                    "codeSegments": [
                        {
                            "line": 14,
                            "code": "if (!data || !data.data || !data.data.length) return null;"
                        }
                    ]
                },
                {
                    "summaryComponent": "Company name and ticker from the data prop",
                    "codeSegments": [
                        {
                            "line": 16,
                            "code": "const company = data.name;"
                        },
                        {
                            "line": 17,
                            "code": "const ticker = data.ticker;"
                        }
                    ]
                },
                {
                    "summaryComponent": "Maps raw data to an array of objects with 'date' and 'price' fields",
                    "codeSegments": [
                        {
                            "line": 24,
                            "code": "const chartData = data.data.map((item) => ({"
                        },
                        {
                            "line": 25,
                            "code": "date: item.date,"
                        },
                        {
                            "line": 26,
                            "code": "price: item.close,"
                        },
                        {
                            "line": 27,
                            "code": "}));"
                        }
                    ]
                },
                {
                    "summaryComponent": "formatDateString to trim date strings (though not directly used in rendering)",
                    "codeSegments": [
                        {
                            "line": 19,
                            "code": "const formatDateString = (date) => {"
                        },
                        {
                            "line": 20,
                            "code": "return date.split(\"T\")[0];"
                        },
                        {
                            "line": 21,
                            "code": "};"
                        }
                    ]
                },
                {
                    "summaryComponent": "formatMonth to format X-axis labels as short month names",
                    "codeSegments": [
                        {
                            "line": 30,
                            "code": "const formatMonth = (dateString) => {"
                        },
                        {
                            "line": 31,
                            "code": "const date = new Date(dateString);"
                        },
                        {
                            "line": 32,
                            "code": "return date.toLocaleString(\"en\", { month: \"short\" });"
                        },
                        {
                            "line": 33,
                            "code": "};"
                        }
                    ]
                },
                {
                    "summaryComponent": "ResponsiveContainer ensures the chart scales to its parent",
                    "codeSegments": [
                        {
                            "line": 43,
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                        }
                    ]
                },
                {
                    "summaryComponent": "LineChart displays the data with a monotone line and no dots",
                    "codeSegments": [
                        {
                            "line": 44,
                            "code": "<LineChart"
                        },
                        {
                            "line": 52,
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                        }
                    ]
                },
                {
                    "summaryComponent": "XAxis uses formatted month labels, YAxis auto-scales",
                    "codeSegments": [
                        {
                            "line": 48,
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatMonth} />"
                        },
                        {
                            "line": 49,
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                        }
                    ]
                },
                {
                    "summaryComponent": "Tooltip and Legend enhance interactivity and readability",
                    "codeSegments": [
                        {
                            "line": 50,
                            "code": "<Tooltip />"
                        },
                        {
                            "line": 51,
                            "code": "<Legend />"
                        }
                    ]
                },
                {
                    "summaryComponent": "Adds a ReferenceLine at the latest closing price, labeled as \"Current Close\"",
                    "codeSegments": [
                        {
                            "line": 53,
                            "code": "{currentClose !== null && ("
                        },
                        {
                            "line": 54,
                            "code": "<ReferenceLine"
                        },
                        {
                            "line": 55,
                            "code": "y={currentClose}"
                        },
                        {
                            "line": 58,
                            "code": "label={{ value: \"Current Close\", position: \"right\", fill: \"#ff7300\" }}"
                        }
                    ]
                },
                {
                    "summaryComponent": "Displays the company name and ticker above the chart",
                    "codeSegments": [
                        {
                            "line": 40,
                            "code": "<h3>"
                        },
                        {
                            "line": 41,
                            "code": "{company} ({ticker})"
                        }
                    ]
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));\n28: \n29:   // Function to format date as month (e.g., \"Jan\", \"Feb\") in English\n30:   const formatMonth = (dateString) => {\n31:     const date = new Date(dateString);\n32:     return date.toLocaleString(\"en\", { month: \"short\" });\n33:   };\n34: \n35:   // Get the latest closing price\n36:   const currentClose = chartData.length > 0 ? chartData[chartData.length - 1].price : null;\n37: \n38:   return (\n39:     <div style={{ marginTop: \"2rem\" }}>\n40:       <h3>\n41:         {company} ({ticker})\n42:       </h3>\n43:       <ResponsiveContainer width=\"100%\" height={300}>\n44:         <LineChart\n45:           data={chartData}\n46:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n47:         >\n48:           <XAxis dataKey=\"date\" tickFormatter={formatMonth} />\n49:           <YAxis domain={[\"auto\", \"auto\"]} />\n50:           <Tooltip />\n51:           <Legend />\n52:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n53:           {currentClose !== null && (\n54:             <ReferenceLine\n55:               y={currentClose}\n56:               stroke=\"#ff7300\"\n57:               strokeDasharray=\"5 5\"\n58:               label={{ value: \"Current Close\", position: \"right\", fill: \"#ff7300\" }}\n59:             />\n60:           )}\n61:         </LineChart>\n62:       </ResponsiveContainer>\n63:     </div>\n64:   );\n65: };\n66: \n67: export default StockChart;"
        },
        "event": "map_summary_code",
        "id": "g0tFJli2fNJMOo9dcwvG"
    },
    {
        "timestamp": "2025-08-23 20:34:41.000",
        "source": "backend",
        "data": {
            "summary": "This code defines the StockChart React component, which takes a data prop containing stock information and renders a responsive line chart using the Recharts library. The component first checks for valid data, then extracts the company name, ticker, and formats the data into an array of objects with date and closing price. It includes helper functions to format dates and months for display, and configures the chart with a monotone line, formatted X-axis, auto-scaling Y-axis, tooltip, and legend. The chart is wrapped in a responsive container and is displayed with the company name and ticker above it. Additionally, the chart now features a horizontal ReferenceLine at the most recent closing price, visually labeled as \"Current Close\".",
            "mapping": [
                {
                    "summaryComponent": "defines the StockChart React component",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "takes a data prop containing stock information",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "renders a responsive line chart using the Recharts library",
                    "codeSegments": [
                        {
                            "line": 43,
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                        },
                        {
                            "line": 44,
                            "code": "<LineChart"
                        }
                    ]
                },
                {
                    "summaryComponent": "checks for valid data",
                    "codeSegments": [
                        {
                            "line": 14,
                            "code": "if (!data || !data.data || !data.data.length) return null;"
                        }
                    ]
                },
                {
                    "summaryComponent": "extracts the company name, ticker",
                    "codeSegments": [
                        {
                            "line": 16,
                            "code": "const company = data.name;"
                        },
                        {
                            "line": 17,
                            "code": "const ticker = data.ticker;"
                        }
                    ]
                },
                {
                    "summaryComponent": "formats the data into an array of objects with date and closing price",
                    "codeSegments": [
                        {
                            "line": 24,
                            "code": "const chartData = data.data.map((item) => ({"
                        },
                        {
                            "line": 25,
                            "code": "date: item.date,"
                        },
                        {
                            "line": 26,
                            "code": "price: item.close,"
                        }
                    ]
                },
                {
                    "summaryComponent": "includes helper functions to format dates and months for display",
                    "codeSegments": [
                        {
                            "line": 19,
                            "code": "const formatDateString = (date) => {"
                        },
                        {
                            "line": 30,
                            "code": "const formatMonth = (dateString) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "configures the chart with a monotone line, formatted X-axis, auto-scaling Y-axis, tooltip, and legend",
                    "codeSegments": [
                        {
                            "line": 52,
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                        },
                        {
                            "line": 48,
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatMonth} />"
                        },
                        {
                            "line": 49,
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                        },
                        {
                            "line": 50,
                            "code": "<Tooltip />"
                        },
                        {
                            "line": 51,
                            "code": "<Legend />"
                        }
                    ]
                },
                {
                    "summaryComponent": "chart is wrapped in a responsive container",
                    "codeSegments": [
                        {
                            "line": 43,
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                        }
                    ]
                },
                {
                    "summaryComponent": "displayed with the company name and ticker above it",
                    "codeSegments": [
                        {
                            "line": 40,
                            "code": "<h3>"
                        },
                        {
                            "line": 41,
                            "code": "{company} ({ticker})"
                        }
                    ]
                },
                {
                    "summaryComponent": "features a horizontal ReferenceLine at the most recent closing price, visually labeled as \"Current Close\"",
                    "codeSegments": [
                        {
                            "line": 53,
                            "code": "{currentClose !== null && ("
                        },
                        {
                            "line": 54,
                            "code": "<ReferenceLine"
                        },
                        {
                            "line": 55,
                            "code": "y={currentClose}"
                        },
                        {
                            "line": 58,
                            "code": "label={{ value: \"Current Close\", position: \"right\", fill: \"#ff7300\" }}"
                        }
                    ]
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));\n28: \n29:   // Function to format date as month (e.g., \"Jan\", \"Feb\") in English\n30:   const formatMonth = (dateString) => {\n31:     const date = new Date(dateString);\n32:     return date.toLocaleString(\"en\", { month: \"short\" });\n33:   };\n34: \n35:   // Get the latest closing price\n36:   const currentClose = chartData.length > 0 ? chartData[chartData.length - 1].price : null;\n37: \n38:   return (\n39:     <div style={{ marginTop: \"2rem\" }}>\n40:       <h3>\n41:         {company} ({ticker})\n42:       </h3>\n43:       <ResponsiveContainer width=\"100%\" height={300}>\n44:         <LineChart\n45:           data={chartData}\n46:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n47:         >\n48:           <XAxis dataKey=\"date\" tickFormatter={formatMonth} />\n49:           <YAxis domain={[\"auto\", \"auto\"]} />\n50:           <Tooltip />\n51:           <Legend />\n52:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n53:           {currentClose !== null && (\n54:             <ReferenceLine\n55:               y={currentClose}\n56:               stroke=\"#ff7300\"\n57:               strokeDasharray=\"5 5\"\n58:               label={{ value: \"Current Close\", position: \"right\", fill: \"#ff7300\" }}\n59:             />\n60:           )}\n61:         </LineChart>\n62:       </ResponsiveContainer>\n63:     </div>\n64:   );\n65: };\n66: \n67: export default StockChart;"
        },
        "event": "map_summary_code",
        "id": "oRSbap3zbOw9WQUBXFT9"
    },
    {
        "timestamp": "2025-08-23 20:34:42.000",
        "source": "frontend",
        "data": {
            "mapping_index": 6,
            "section_id": "72a7ee70-9055-41fe-be82-0c77267c0fd0",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "DEnAtu470qitG13Ri0wy"
    },
    {
        "timestamp": "2025-08-23 20:34:42.000",
        "source": "frontend",
        "data": {
            "section_id": "72a7ee70-9055-41fe-be82-0c77267c0fd0",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "DonBHmbXjtxTlaEDb76A"
    },
    {
        "timestamp": "2025-08-23 20:34:42.000",
        "source": "frontend",
        "data": {
            "section_id": "72a7ee70-9055-41fe-be82-0c77267c0fd0",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "fXDxwh4NKHhFuLl4YVkg"
    },
    {
        "timestamp": "2025-08-23 20:34:42.000",
        "source": "frontend",
        "data": {
            "mapping_index": 3,
            "section_id": "72a7ee70-9055-41fe-be82-0c77267c0fd0",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "secBlViNVsPv0VPgSsr1"
    },
    {
        "timestamp": "2025-08-23 20:34:43.000",
        "source": "frontend",
        "data": {
            "section_id": "72a7ee70-9055-41fe-be82-0c77267c0fd0",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "SOSr7xHjBdcYeFbvbLNF"
    },
    {
        "timestamp": "2025-08-23 20:34:43.000",
        "source": "frontend",
        "data": {
            "mapping_index": 6,
            "section_id": "72a7ee70-9055-41fe-be82-0c77267c0fd0",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "fQrQE4iluZyQY9gxBpqO"
    },
    {
        "timestamp": "2025-08-23 20:34:43.000",
        "source": "frontend",
        "data": {
            "section_id": "72a7ee70-9055-41fe-be82-0c77267c0fd0",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "hGxN79qYuweey09XRa9u"
    },
    {
        "timestamp": "2025-08-23 20:34:43.000",
        "source": "frontend",
        "data": {
            "mapping_index": 3,
            "section_id": "72a7ee70-9055-41fe-be82-0c77267c0fd0",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "kmJGcV24MsH7kFiKH7hu"
    },
    {
        "timestamp": "2025-08-23 20:34:44.000",
        "source": "frontend",
        "data": {
            "mapping_index": 6,
            "section_id": "72a7ee70-9055-41fe-be82-0c77267c0fd0",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "4N5tUmjijv3mhBfrpzt8"
    },
    {
        "timestamp": "2025-08-23 20:34:44.000",
        "source": "frontend",
        "data": {
            "section_id": "72a7ee70-9055-41fe-be82-0c77267c0fd0",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "g4Qr3Abq9oC9xEb5hla0"
    },
    {
        "timestamp": "2025-08-23 20:34:45.000",
        "source": "frontend",
        "data": {
            "mapping_index": 0,
            "section_id": "72a7ee70-9055-41fe-be82-0c77267c0fd0",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "277BtvmkI41VCuLyTzys"
    },
    {
        "timestamp": "2025-08-23 20:34:45.000",
        "source": "frontend",
        "data": {
            "section_id": "72a7ee70-9055-41fe-be82-0c77267c0fd0",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "B0oHj4kYkHpoiCNy3X8h"
    },
    {
        "timestamp": "2025-08-23 20:34:45.000",
        "source": "frontend",
        "data": {
            "section_id": "72a7ee70-9055-41fe-be82-0c77267c0fd0",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "CHqzexJ1LLewWgrZI6x4"
    },
    {
        "timestamp": "2025-08-23 20:34:45.000",
        "source": "frontend",
        "data": {
            "mapping_index": 1,
            "section_id": "72a7ee70-9055-41fe-be82-0c77267c0fd0",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "b8Buy6aiS5wtgETIWgcd"
    },
    {
        "timestamp": "2025-08-23 20:34:45.000",
        "source": "frontend",
        "data": {
            "mapping_index": 3,
            "section_id": "72a7ee70-9055-41fe-be82-0c77267c0fd0",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "kiJS3OgyKRNp4bQUa4w3"
    },
    {
        "timestamp": "2025-08-23 20:34:45.000",
        "source": "frontend",
        "data": {
            "section_id": "72a7ee70-9055-41fe-be82-0c77267c0fd0",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "zNtbAR9ibLZHVAzZB7qh"
    },
    {
        "timestamp": "2025-08-23 20:34:46.000",
        "source": "frontend",
        "data": {
            "mapping_index": 2,
            "section_id": "72a7ee70-9055-41fe-be82-0c77267c0fd0",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "1rnyQZtB5K1lf2CEg2tt"
    },
    {
        "timestamp": "2025-08-23 20:34:46.000",
        "source": "frontend",
        "data": {
            "section_id": "72a7ee70-9055-41fe-be82-0c77267c0fd0",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "LYTcYgvxICa207VBbhuc"
    },
    {
        "timestamp": "2025-08-23 20:34:46.000",
        "source": "frontend",
        "data": {
            "section_id": "72a7ee70-9055-41fe-be82-0c77267c0fd0",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "YjKOrDtWERvFol4aNoSy"
    },
    {
        "timestamp": "2025-08-23 20:34:46.000",
        "source": "frontend",
        "data": {
            "mapping_index": 0,
            "section_id": "72a7ee70-9055-41fe-be82-0c77267c0fd0",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "oyWqsMEIA0ZgQLJylvYe"
    },
    {
        "timestamp": "2025-08-23 20:34:46.000",
        "source": "frontend",
        "data": {
            "mapping_index": 3,
            "section_id": "72a7ee70-9055-41fe-be82-0c77267c0fd0",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "vXCTSTD0rtCmeapiEJPN"
    },
    {
        "timestamp": "2025-08-23 20:34:47.000",
        "source": "frontend",
        "data": {
            "section_id": "72a7ee70-9055-41fe-be82-0c77267c0fd0",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "3ZY3sMfUipjNpO8Poq3P"
    },
    {
        "timestamp": "2025-08-23 20:34:47.000",
        "source": "frontend",
        "data": {
            "section_id": "72a7ee70-9055-41fe-be82-0c77267c0fd0",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "4FycLgmaQVCDP6p78v5U"
    },
    {
        "timestamp": "2025-08-23 20:34:47.000",
        "source": "frontend",
        "data": {
            "mapping_index": 2,
            "section_id": "72a7ee70-9055-41fe-be82-0c77267c0fd0",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "MwwOWBoMLNwWSAugoGul"
    },
    {
        "timestamp": "2025-08-23 20:34:47.000",
        "source": "frontend",
        "data": {
            "mapping_index": 0,
            "section_id": "72a7ee70-9055-41fe-be82-0c77267c0fd0",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "dOhxxspbdOETxNT0rEff"
    },
    {
        "timestamp": "2025-08-23 20:34:47.000",
        "source": "frontend",
        "data": {
            "mapping_index": 3,
            "section_id": "72a7ee70-9055-41fe-be82-0c77267c0fd0",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "hndyUDDtxFySjTljKOCq"
    },
    {
        "timestamp": "2025-08-23 20:34:47.000",
        "source": "frontend",
        "data": {
            "section_id": "72a7ee70-9055-41fe-be82-0c77267c0fd0",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "sTApYT9IzeKoHdkKydGJ"
    },
    {
        "timestamp": "2025-08-23 20:34:47.000",
        "source": "frontend",
        "data": {
            "section_id": "72a7ee70-9055-41fe-be82-0c77267c0fd0",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "yEZ8mDb1dAVVkMSahXUf"
    },
    {
        "timestamp": "2025-08-23 20:34:49.000",
        "source": "frontend",
        "data": {
            "before_section_id": "72a7ee70-9055-41fe-be82-0c77267c0fd0",
            "after_section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18"
        },
        "event": "autotransit_section",
        "id": "33ylcgNFF9jEmcZKJYyS"
    },
    {
        "timestamp": "2025-08-23 20:34:49.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "section_data": {
                "summaryData": {
                    "low_unstructured": "This code defines a React component that displays a stock price line chart using the Recharts library, now enhanced to include a horizontal reference line marking the latest closing price.",
                    "low_structured": "• React component for stock price chart\n• Uses Recharts for visualization\n• Displays company and ticker\n• Adds a horizontal reference line at the latest closing price",
                    "medium_unstructured": "This code implements a React component called StockChart that visualizes stock price data as a line chart using Recharts. It processes incoming data to extract dates and closing prices, and displays the chart with formatted month labels, a legend, and a tooltip. The component also shows the company name and ticker above the chart, and now visually highlights the most recent closing price with a labeled horizontal reference line.",
                    "high_structured": "• Implements the StockChart React component for displaying stock price trends\n• Validates input data to ensure it exists and contains entries\n• Extracts relevant information:\n  ◦ Company name and ticker from the data prop\n  ◦ Maps raw data to an array of objects with 'date' and 'price' fields\n• Provides helper functions:\n  ◦ formatDateString to trim date strings (though not directly used in rendering)\n  ◦ formatMonth to format X-axis labels as short month names\n• Renders the chart using Recharts components:\n  ◦ ResponsiveContainer ensures the chart scales to its parent\n  ◦ LineChart displays the data with a monotone line and no dots\n  ◦ XAxis uses formatted month labels, YAxis auto-scales\n  ◦ Tooltip and Legend enhance interactivity and readability\n  ◦ Adds a ReferenceLine at the latest closing price, labeled as \"Current Close\"\n• Displays the company name and ticker above the chart",
                    "medium_structured": "• Defines a StockChart React component for visualizing stock data\n• Processes input data to extract dates and closing prices\n• Renders a line chart with:\n  ◦ X-axis labels formatted as months\n  ◦ Legend and tooltip for better readability\n  ◦ A horizontal reference line marking the latest closing price\n• Displays company name and ticker above the chart",
                    "title": "StockChart React Component with Highlighted Current Close Reference Line",
                    "high_unstructured": "This code defines the StockChart React component, which takes a data prop containing stock information and renders a responsive line chart using the Recharts library. The component first checks for valid data, then extracts the company name, ticker, and formats the data into an array of objects with date and closing price. It includes helper functions to format dates and months for display, and configures the chart with a monotone line, formatted X-axis, auto-scaling Y-axis, tooltip, and legend. The chart is wrapped in a responsive container and is displayed with the company name and ticker above it. Additionally, the chart now features a horizontal ReferenceLine at the most recent closing price, visually labeled as \"Current Close\"."
                },
                "metadata": {
                    "offset": 0,
                    "fullPath": "/project/workspace/frontend/src/StockChart.jsx",
                    "id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
                    "filename": "StockChart.jsx",
                    "originalCode": "import React from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  ReferenceLine,\n} from \"recharts\";\n\nconst StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  // Function to format date as month (e.g., \"Jan\", \"Feb\") in English\n  const formatMonth = (dateString) => {\n    const date = new Date(dateString);\n    return date.toLocaleString(\"en\", { month: \"short\" });\n  };\n\n  // Get the latest closing price\n  const currentClose = chartData.length > 0 ? chartData[chartData.length - 1].price : null;\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatMonth} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n          {currentClose !== null && (\n            <ReferenceLine\n              y={currentClose}\n              stroke=\"#ff7300\"\n              strokeDasharray=\"5 5\"\n              label={{ value: \"Current Close\", position: \"right\", fill: \"#ff7300\" }}\n            />\n          )}\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;"
                },
                "createdAt": 1755966881000,
                "selectedStructured": "unstructured",
                "editPromptDetailLevel": null,
                "editPromptStructured": null,
                "lines": [
                    1,
                    67
                ],
                "summaryMappings": {
                    "low_unstructured": [
                        {
                            "summaryComponent": "defines a React component",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "displays a stock price line chart",
                            "codeSegments": [
                                {
                                    "line": 44,
                                    "code": "<LineChart"
                                },
                                {
                                    "line": 52,
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "using the Recharts library",
                            "codeSegments": [
                                {
                                    "line": 2,
                                    "code": "import {"
                                },
                                {
                                    "line": 11,
                                    "code": "} from \"recharts\";"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "now enhanced to include a horizontal reference line",
                            "codeSegments": [
                                {
                                    "line": 54,
                                    "code": "<ReferenceLine"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "marking the latest closing price",
                            "codeSegments": [
                                {
                                    "line": 36,
                                    "code": "const currentClose = chartData.length > 0 ? chartData[chartData.length - 1].price : null;"
                                },
                                {
                                    "line": 55,
                                    "code": "y={currentClose}"
                                }
                            ]
                        }
                    ],
                    "low_structured": [
                        {
                            "summaryComponent": "React component for stock price chart",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                },
                                {
                                    "line": 67,
                                    "code": "export default StockChart;"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Uses Recharts for visualization",
                            "codeSegments": [
                                {
                                    "line": 2,
                                    "code": "import {"
                                },
                                {
                                    "line": 3,
                                    "code": "LineChart,"
                                },
                                {
                                    "line": 4,
                                    "code": "Line,"
                                },
                                {
                                    "line": 5,
                                    "code": "XAxis,"
                                },
                                {
                                    "line": 6,
                                    "code": "YAxis,"
                                },
                                {
                                    "line": 7,
                                    "code": "Tooltip,"
                                },
                                {
                                    "line": 8,
                                    "code": "Legend,"
                                },
                                {
                                    "line": 9,
                                    "code": "ResponsiveContainer,"
                                },
                                {
                                    "line": 10,
                                    "code": "ReferenceLine,"
                                },
                                {
                                    "line": 11,
                                    "code": "} from \"recharts\";"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Displays company and ticker",
                            "codeSegments": [
                                {
                                    "line": 16,
                                    "code": "const company = data.name;"
                                },
                                {
                                    "line": 17,
                                    "code": "const ticker = data.ticker;"
                                },
                                {
                                    "line": 40,
                                    "code": "<h3>"
                                },
                                {
                                    "line": 41,
                                    "code": "{company} ({ticker})"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Adds a horizontal reference line at the latest closing price",
                            "codeSegments": [
                                {
                                    "line": 36,
                                    "code": "const currentClose = chartData.length > 0 ? chartData[chartData.length - 1].price : null;"
                                },
                                {
                                    "line": 53,
                                    "code": "{currentClose !== null && ("
                                },
                                {
                                    "line": 54,
                                    "code": "<ReferenceLine"
                                },
                                {
                                    "line": 55,
                                    "code": "y={currentClose}"
                                },
                                {
                                    "line": 56,
                                    "code": "stroke=\"#ff7300\""
                                },
                                {
                                    "line": 57,
                                    "code": "strokeDasharray=\"5 5\""
                                },
                                {
                                    "line": 58,
                                    "code": "label={{ value: \"Current Close\", position: \"right\", fill: \"#ff7300\" }}"
                                }
                            ]
                        }
                    ],
                    "medium_unstructured": [
                        {
                            "summaryComponent": "a React component called StockChart",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                },
                                {
                                    "line": 67,
                                    "code": "export default StockChart;"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "visualizes stock price data as a line chart using Recharts",
                            "codeSegments": [
                                {
                                    "line": 44,
                                    "code": "<LineChart"
                                },
                                {
                                    "line": 52,
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "processes incoming data to extract dates and closing prices",
                            "codeSegments": [
                                {
                                    "line": 24,
                                    "code": "const chartData = data.data.map((item) => ({"
                                },
                                {
                                    "line": 25,
                                    "code": "date: item.date,"
                                },
                                {
                                    "line": 26,
                                    "code": "price: item.close,"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "displays the chart with formatted month labels",
                            "codeSegments": [
                                {
                                    "line": 48,
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatMonth} />"
                                },
                                {
                                    "line": 30,
                                    "code": "const formatMonth = (dateString) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "a legend",
                            "codeSegments": [
                                {
                                    "line": 51,
                                    "code": "<Legend />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "and a tooltip",
                            "codeSegments": [
                                {
                                    "line": 50,
                                    "code": "<Tooltip />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "shows the company name and ticker above the chart",
                            "codeSegments": [
                                {
                                    "line": 40,
                                    "code": "<h3>"
                                },
                                {
                                    "line": 41,
                                    "code": "{company} ({ticker})"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "visually highlights the most recent closing price with a labeled horizontal reference line",
                            "codeSegments": [
                                {
                                    "line": 53,
                                    "code": "{currentClose !== null && ("
                                },
                                {
                                    "line": 54,
                                    "code": "<ReferenceLine"
                                },
                                {
                                    "line": 55,
                                    "code": "y={currentClose}"
                                },
                                {
                                    "line": 58,
                                    "code": "label={{ value: \"Current Close\", position: \"right\", fill: \"#ff7300\" }}"
                                }
                            ]
                        }
                    ],
                    "high_structured": [
                        {
                            "summaryComponent": "Implements the StockChart React component for displaying stock price trends",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Validates input data to ensure it exists and contains entries",
                            "codeSegments": [
                                {
                                    "line": 14,
                                    "code": "if (!data || !data.data || !data.data.length) return null;"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Company name and ticker from the data prop",
                            "codeSegments": [
                                {
                                    "line": 16,
                                    "code": "const company = data.name;"
                                },
                                {
                                    "line": 17,
                                    "code": "const ticker = data.ticker;"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Maps raw data to an array of objects with 'date' and 'price' fields",
                            "codeSegments": [
                                {
                                    "line": 24,
                                    "code": "const chartData = data.data.map((item) => ({"
                                },
                                {
                                    "line": 25,
                                    "code": "date: item.date,"
                                },
                                {
                                    "line": 26,
                                    "code": "price: item.close,"
                                },
                                {
                                    "line": 27,
                                    "code": "}));"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "formatDateString to trim date strings (though not directly used in rendering)",
                            "codeSegments": [
                                {
                                    "line": 19,
                                    "code": "const formatDateString = (date) => {"
                                },
                                {
                                    "line": 20,
                                    "code": "return date.split(\"T\")[0];"
                                },
                                {
                                    "line": 21,
                                    "code": "};"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "formatMonth to format X-axis labels as short month names",
                            "codeSegments": [
                                {
                                    "line": 30,
                                    "code": "const formatMonth = (dateString) => {"
                                },
                                {
                                    "line": 31,
                                    "code": "const date = new Date(dateString);"
                                },
                                {
                                    "line": 32,
                                    "code": "return date.toLocaleString(\"en\", { month: \"short\" });"
                                },
                                {
                                    "line": 33,
                                    "code": "};"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "ResponsiveContainer ensures the chart scales to its parent",
                            "codeSegments": [
                                {
                                    "line": 43,
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "LineChart displays the data with a monotone line and no dots",
                            "codeSegments": [
                                {
                                    "line": 44,
                                    "code": "<LineChart"
                                },
                                {
                                    "line": 52,
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "XAxis uses formatted month labels, YAxis auto-scales",
                            "codeSegments": [
                                {
                                    "line": 48,
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatMonth} />"
                                },
                                {
                                    "line": 49,
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Tooltip and Legend enhance interactivity and readability",
                            "codeSegments": [
                                {
                                    "line": 50,
                                    "code": "<Tooltip />"
                                },
                                {
                                    "line": 51,
                                    "code": "<Legend />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Adds a ReferenceLine at the latest closing price, labeled as \"Current Close\"",
                            "codeSegments": [
                                {
                                    "line": 53,
                                    "code": "{currentClose !== null && ("
                                },
                                {
                                    "line": 54,
                                    "code": "<ReferenceLine"
                                },
                                {
                                    "line": 55,
                                    "code": "y={currentClose}"
                                },
                                {
                                    "line": 58,
                                    "code": "label={{ value: \"Current Close\", position: \"right\", fill: \"#ff7300\" }}"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Displays the company name and ticker above the chart",
                            "codeSegments": [
                                {
                                    "line": 40,
                                    "code": "<h3>"
                                },
                                {
                                    "line": 41,
                                    "code": "{company} ({ticker})"
                                }
                            ]
                        }
                    ],
                    "medium_structured": [
                        {
                            "summaryComponent": "Defines a StockChart React component for visualizing stock data",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                },
                                {
                                    "line": 67,
                                    "code": "export default StockChart;"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Processes input data to extract dates and closing prices",
                            "codeSegments": [
                                {
                                    "line": 24,
                                    "code": "const chartData = data.data.map((item) => ({"
                                },
                                {
                                    "line": 25,
                                    "code": "date: item.date,"
                                },
                                {
                                    "line": 26,
                                    "code": "price: item.close,"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Renders a line chart with:",
                            "codeSegments": [
                                {
                                    "line": 44,
                                    "code": "<LineChart"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "X-axis labels formatted as months",
                            "codeSegments": [
                                {
                                    "line": 48,
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatMonth} />"
                                },
                                {
                                    "line": 30,
                                    "code": "const formatMonth = (dateString) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Legend and tooltip for better readability",
                            "codeSegments": [
                                {
                                    "line": 50,
                                    "code": "<Tooltip />"
                                },
                                {
                                    "line": 51,
                                    "code": "<Legend />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "A horizontal reference line marking the latest closing price",
                            "codeSegments": [
                                {
                                    "line": 53,
                                    "code": "{currentClose !== null && ("
                                },
                                {
                                    "line": 54,
                                    "code": "<ReferenceLine"
                                },
                                {
                                    "line": 55,
                                    "code": "y={currentClose}"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Displays company name and ticker above the chart",
                            "codeSegments": [
                                {
                                    "line": 40,
                                    "code": "<h3>"
                                },
                                {
                                    "line": 41,
                                    "code": "{company} ({ticker})"
                                }
                            ]
                        }
                    ],
                    "high_unstructured": [
                        {
                            "summaryComponent": "defines the StockChart React component",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "takes a data prop containing stock information",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "renders a responsive line chart using the Recharts library",
                            "codeSegments": [
                                {
                                    "line": 43,
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                                },
                                {
                                    "line": 44,
                                    "code": "<LineChart"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "checks for valid data",
                            "codeSegments": [
                                {
                                    "line": 14,
                                    "code": "if (!data || !data.data || !data.data.length) return null;"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "extracts the company name, ticker",
                            "codeSegments": [
                                {
                                    "line": 16,
                                    "code": "const company = data.name;"
                                },
                                {
                                    "line": 17,
                                    "code": "const ticker = data.ticker;"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "formats the data into an array of objects with date and closing price",
                            "codeSegments": [
                                {
                                    "line": 24,
                                    "code": "const chartData = data.data.map((item) => ({"
                                },
                                {
                                    "line": 25,
                                    "code": "date: item.date,"
                                },
                                {
                                    "line": 26,
                                    "code": "price: item.close,"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "includes helper functions to format dates and months for display",
                            "codeSegments": [
                                {
                                    "line": 19,
                                    "code": "const formatDateString = (date) => {"
                                },
                                {
                                    "line": 30,
                                    "code": "const formatMonth = (dateString) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "configures the chart with a monotone line, formatted X-axis, auto-scaling Y-axis, tooltip, and legend",
                            "codeSegments": [
                                {
                                    "line": 52,
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                                },
                                {
                                    "line": 48,
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatMonth} />"
                                },
                                {
                                    "line": 49,
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                                },
                                {
                                    "line": 50,
                                    "code": "<Tooltip />"
                                },
                                {
                                    "line": 51,
                                    "code": "<Legend />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "chart is wrapped in a responsive container",
                            "codeSegments": [
                                {
                                    "line": 43,
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "displayed with the company name and ticker above it",
                            "codeSegments": [
                                {
                                    "line": 40,
                                    "code": "<h3>"
                                },
                                {
                                    "line": 41,
                                    "code": "{company} ({ticker})"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "features a horizontal ReferenceLine at the most recent closing price, visually labeled as \"Current Close\"",
                            "codeSegments": [
                                {
                                    "line": 53,
                                    "code": "{currentClose !== null && ("
                                },
                                {
                                    "line": 54,
                                    "code": "<ReferenceLine"
                                },
                                {
                                    "line": 55,
                                    "code": "y={currentClose}"
                                },
                                {
                                    "line": 58,
                                    "code": "label={{ value: \"Current Close\", position: \"right\", fill: \"#ff7300\" }}"
                                }
                            ]
                        }
                    ]
                },
                "editPromptValue": "",
                "selectedDetailLevel": "medium",
                "oldSummaryData": {
                    "low_unstructured": "This code defines a React component that displays a stock price line chart using the Recharts library.",
                    "low_structured": "• React component for stock price chart\n• Uses Recharts for visualization\n• Displays company and ticker",
                    "medium_unstructured": "This code implements a React component called StockChart that visualizes stock price data as a line chart using Recharts. It processes incoming data to extract dates and closing prices, and displays the chart with formatted month labels, a legend, and a tooltip. The component also shows the company name and ticker above the chart.",
                    "high_structured": "• Implements the StockChart React component for displaying stock price trends\n• Validates input data to ensure it exists and contains entries\n• Extracts relevant information:\n  ◦ Company name and ticker from the data prop\n  ◦ Maps raw data to an array of objects with 'date' and 'price' fields\n• Provides helper functions:\n  ◦ formatDateString to trim date strings (though not directly used in rendering)\n  ◦ formatMonth to format X-axis labels as short month names\n• Renders the chart using Recharts components:\n  ◦ ResponsiveContainer ensures the chart scales to its parent\n  ◦ LineChart displays the data with a monotone line and no dots\n  ◦ XAxis uses formatted month labels, YAxis auto-scales\n  ◦ Tooltip and Legend enhance interactivity and readability\n• Displays the company name and ticker above the chart",
                    "medium_structured": "• Defines a StockChart React component for visualizing stock data\n• Processes input data to extract dates and closing prices\n• Renders a line chart with:\n  ◦ X-axis labels formatted as months\n  ◦ Legend and tooltip for better readability\n• Displays company name and ticker above the chart",
                    "title": "StockChart React Component for Displaying Stock Price Line Charts",
                    "high_unstructured": "This code defines the StockChart React component, which takes a data prop containing stock information and renders a responsive line chart using the Recharts library. The component first checks for valid data, then extracts the company name, ticker, and formats the data into an array of objects with date and closing price. It includes helper functions to format dates and months for display, and configures the chart with a monotone line, formatted X-axis, auto-scaling Y-axis, tooltip, and legend. The chart is wrapped in a responsive container and is displayed with the company name and ticker above it."
                },
                "title": "StockChart React Component with Highlighted Current Close Reference Line"
            }
        },
        "event": "create_new_section",
        "id": "nOnMk1ENNZjy8GRb2jGG"
    },
    {
        "timestamp": "2025-08-23 20:34:50.000",
        "source": "frontend",
        "data": {
            "mapping_index": 7,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "HdH8ssm2s8V2OQBXDMWW"
    },
    {
        "timestamp": "2025-08-23 20:34:50.000",
        "source": "frontend",
        "data": {
            "mapping_index": 5,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "HjBAP1csXFDsR1tn5dwi"
    },
    {
        "timestamp": "2025-08-23 20:34:50.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "NbmQfUvWn5ZWgHIhx3dq"
    },
    {
        "timestamp": "2025-08-23 20:34:50.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "T1XKBnRhY82tvnQl5xOe"
    },
    {
        "timestamp": "2025-08-23 20:34:50.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "T7TXeIYw3pXMvWTtxT1P"
    },
    {
        "timestamp": "2025-08-23 20:34:50.000",
        "source": "frontend",
        "data": {
            "mapping_index": 6,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "TMRV6TgjpLMoP55u6Sgp"
    },
    {
        "timestamp": "2025-08-23 20:34:50.000",
        "source": "frontend",
        "data": {
            "mapping_index": 3,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "V9mrJP1t1WInAUnSchv8"
    },
    {
        "timestamp": "2025-08-23 20:34:50.000",
        "source": "frontend",
        "data": {
            "mapping_index": 1,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "hn7gdOjnWpJCH2jppqLh"
    },
    {
        "timestamp": "2025-08-23 20:34:50.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "w4aGxHTPpfBWpScstORi"
    },
    {
        "timestamp": "2025-08-23 20:34:51.000",
        "source": "frontend",
        "data": {
            "mapping_index": 2,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "BX5I9T56QIh5iVvwxeB0"
    },
    {
        "timestamp": "2025-08-23 20:34:51.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "FgXTaUNRfyqiEtu3Vamn"
    },
    {
        "timestamp": "2025-08-23 20:34:51.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "VZq0f92e5V6npLW1Ut3r"
    },
    {
        "timestamp": "2025-08-23 20:34:51.000",
        "source": "frontend",
        "data": {
            "mapping_index": 0,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "dfZBiMskefd84xOS0904"
    },
    {
        "timestamp": "2025-08-23 20:34:51.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "fU6waw5boXrO7nh6rxBl"
    },
    {
        "timestamp": "2025-08-23 20:34:52.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "5MdUhfqU9tmQlh0uVhRR"
    },
    {
        "timestamp": "2025-08-23 20:34:52.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "6xHKgWjeKoNUAxnxkdM6"
    },
    {
        "timestamp": "2025-08-23 20:34:52.000",
        "source": "frontend",
        "data": {
            "mapping_index": 7,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "8oo62I4iVXanzs1XO8zR"
    },
    {
        "timestamp": "2025-08-23 20:34:52.000",
        "source": "frontend",
        "data": {
            "mapping_index": 3,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "M2GQwzySSZeWPKeRkaFN"
    },
    {
        "timestamp": "2025-08-23 20:34:52.000",
        "source": "frontend",
        "data": {
            "structured": "unstructured",
            "summary": "This code implements a React component called StockChart that visualizes stock price data as a line chart using Recharts. It processes incoming data to extract dates and closing prices, and displays the chart with formatted month labels, a legend, and a tooltip. The component also shows the company name and ticker above the chart, and now visually highlights the most recent closing price with a labeled horizontal reference line.",
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "detail_level": "medium"
        },
        "event": "click_edit_in_prompt",
        "id": "VSHKgGfiMtTOcArpH72n"
    },
    {
        "timestamp": "2025-08-23 20:34:52.000",
        "source": "frontend",
        "data": {
            "mapping_index": 1,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "WZV085Q9E4IYXkVEwh3C"
    },
    {
        "timestamp": "2025-08-23 20:34:52.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "jYucj3wKbuXLbQQPqg3a"
    },
    {
        "timestamp": "2025-08-23 20:34:52.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "k4imlD1QZSNUeWRztEXj"
    },
    {
        "timestamp": "2025-08-23 20:34:52.000",
        "source": "frontend",
        "data": {
            "mapping_index": 2,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "tavEbzAKIQ3RV47rsLeW"
    },
    {
        "timestamp": "2025-08-23 20:35:17.000",
        "source": "frontend",
        "data": {
            "mapping_index": 7,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "8K5LsAV5Wqv3AJK3WLAP"
    },
    {
        "timestamp": "2025-08-23 20:35:17.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "BnJecsrrE9R3ShsdzsXj"
    },
    {
        "timestamp": "2025-08-23 20:35:17.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "IIAnLk2ToxxpjGYgTjNQ"
    },
    {
        "timestamp": "2025-08-23 20:35:17.000",
        "source": "frontend",
        "data": {
            "mapping_index": 6,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "OZkFKl5BOyRdeu2HsRRN"
    },
    {
        "timestamp": "2025-08-23 20:35:17.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "dJO10yShApWIVFkrVuQx"
    },
    {
        "timestamp": "2025-08-23 20:35:17.000",
        "source": "frontend",
        "data": {
            "mapping_index": 0,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "g7CgIc0ZvzAF5H8RpLa2"
    },
    {
        "timestamp": "2025-08-23 20:35:18.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "9lT4RGVWtTReYWiaCHcK"
    },
    {
        "timestamp": "2025-08-23 20:35:18.000",
        "source": "frontend",
        "data": {
            "mapping_index": 0,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "ArkBJdnMlTEmwqw1BSoI"
    },
    {
        "timestamp": "2025-08-23 20:35:18.000",
        "source": "frontend",
        "data": {
            "mapping_index": 3,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "FWdk4VpHH2aoTrQvlUME"
    },
    {
        "timestamp": "2025-08-23 20:35:18.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "IfUvCtskG4Qv8YX2h3D6"
    },
    {
        "timestamp": "2025-08-23 20:35:18.000",
        "source": "frontend",
        "data": {
            "mapping_index": 3,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "KWqM9yI044u0UzImsUIR"
    },
    {
        "timestamp": "2025-08-23 20:35:18.000",
        "source": "frontend",
        "data": {
            "mapping_index": 1,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "Mzew5Bx5U0ZQhlnfGDZV"
    },
    {
        "timestamp": "2025-08-23 20:35:18.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "ij6Jrs43xrfv2dRzTB0N"
    },
    {
        "timestamp": "2025-08-23 20:35:19.000",
        "source": "frontend",
        "data": {
            "mapping_index": 7,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "1HXLBcioQp8zK5rXuM7c"
    },
    {
        "timestamp": "2025-08-23 20:35:19.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "1y5e8gublcaQReA01JuC"
    },
    {
        "timestamp": "2025-08-23 20:35:19.000",
        "source": "frontend",
        "data": {
            "mapping_index": 2,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "2VfSD8hFWHFXLFfD9owJ"
    },
    {
        "timestamp": "2025-08-23 20:35:19.000",
        "source": "frontend",
        "data": {
            "mapping_index": 0,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "37lzGd95JljZWoZN9SP1"
    },
    {
        "timestamp": "2025-08-23 20:35:19.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "3BtOtG90Nm0W7gE48NsL"
    },
    {
        "timestamp": "2025-08-23 20:35:19.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "3rg5uKRni7ANHqgUf6KW"
    },
    {
        "timestamp": "2025-08-23 20:35:19.000",
        "source": "frontend",
        "data": {
            "mapping_index": 0,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "62DBv9bxCHpzmCY5lbBQ"
    },
    {
        "timestamp": "2025-08-23 20:35:19.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "6TYTFQYEtfMsU24hNWWq"
    },
    {
        "timestamp": "2025-08-23 20:35:19.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "ClirCRr3YS3kPuyoAJ8V"
    },
    {
        "timestamp": "2025-08-23 20:35:19.000",
        "source": "frontend",
        "data": {
            "mapping_index": 0,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "CpxFZjTX0oNriOcWwc7v"
    },
    {
        "timestamp": "2025-08-23 20:35:19.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "EEiERymjIF6Wylg40bAE"
    },
    {
        "timestamp": "2025-08-23 20:35:19.000",
        "source": "frontend",
        "data": {
            "mapping_index": 0,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "GVVLDLQcx9PijE84NAWS"
    },
    {
        "timestamp": "2025-08-23 20:35:19.000",
        "source": "frontend",
        "data": {
            "mapping_index": 7,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "HTmMFlsVQe1kf2qzikqK"
    },
    {
        "timestamp": "2025-08-23 20:35:19.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "Hx8hoh3rg1VSYPo7gng2"
    },
    {
        "timestamp": "2025-08-23 20:35:19.000",
        "source": "frontend",
        "data": {
            "mapping_index": 3,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "J4BLros0VueJx9DUtdUG"
    },
    {
        "timestamp": "2025-08-23 20:35:19.000",
        "source": "frontend",
        "data": {
            "mapping_index": 1,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "LzxIQGoDSosLgysgzkpW"
    },
    {
        "timestamp": "2025-08-23 20:35:19.000",
        "source": "frontend",
        "data": {
            "mapping_index": 5,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "MeZeNdlunAvHkQFdZ4ec"
    },
    {
        "timestamp": "2025-08-23 20:35:19.000",
        "source": "frontend",
        "data": {
            "mapping_index": 7,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "MwNihGroICJMmG3AfOEz"
    },
    {
        "timestamp": "2025-08-23 20:35:19.000",
        "source": "frontend",
        "data": {
            "mapping_index": 6,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "NMnnrghWnSHdlVGABWUe"
    },
    {
        "timestamp": "2025-08-23 20:35:19.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "NbDObutFT2vGc2vDDQZt"
    },
    {
        "timestamp": "2025-08-23 20:35:19.000",
        "source": "frontend",
        "data": {
            "mapping_index": 6,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "PdRs0TLSnkqXoplud622"
    },
    {
        "timestamp": "2025-08-23 20:35:19.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "QvnM2ZTg6qo0gaBNamsO"
    },
    {
        "timestamp": "2025-08-23 20:35:19.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "Redq0u5r0zetwRFt2hH5"
    },
    {
        "timestamp": "2025-08-23 20:35:19.000",
        "source": "frontend",
        "data": {
            "mapping_index": 1,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "STR0RKeDXh2rxWPuTj5c"
    },
    {
        "timestamp": "2025-08-23 20:35:19.000",
        "source": "frontend",
        "data": {
            "mapping_index": 0,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "SfuukuR6O5MfcksA3Vbc"
    },
    {
        "timestamp": "2025-08-23 20:35:19.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "TeN0uQtqYqejLvuvMnlh"
    },
    {
        "timestamp": "2025-08-23 20:35:19.000",
        "source": "frontend",
        "data": {
            "mapping_index": 7,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "TtNM7ZJoycbU4Vzn4mof"
    },
    {
        "timestamp": "2025-08-23 20:35:19.000",
        "source": "frontend",
        "data": {
            "mapping_index": 2,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "UAaJXAfNPxKmtLRSsdTO"
    },
    {
        "timestamp": "2025-08-23 20:35:19.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "UMk7hU1Ul1WEtt8G73Qy"
    },
    {
        "timestamp": "2025-08-23 20:35:19.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "UxYoSx54vENutblqvXdi"
    },
    {
        "timestamp": "2025-08-23 20:35:19.000",
        "source": "frontend",
        "data": {
            "mapping_index": 3,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "V9xMkGqLQO7gn061aDvD"
    },
    {
        "timestamp": "2025-08-23 20:35:19.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "WepTZGvA9teaumfkvtzB"
    },
    {
        "timestamp": "2025-08-23 20:35:19.000",
        "source": "frontend",
        "data": {
            "mapping_index": 7,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "XK6Z6jXcSA8OIfxoH4SH"
    },
    {
        "timestamp": "2025-08-23 20:35:19.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "Z94p77pyg9mfeZVFH0T3"
    },
    {
        "timestamp": "2025-08-23 20:35:19.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "aTu81XepPqaXDNzuKecF"
    },
    {
        "timestamp": "2025-08-23 20:35:19.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "cwRj60ebOmWNFLjWxtDE"
    },
    {
        "timestamp": "2025-08-23 20:35:19.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "gjH0aMgwDQN7xLsKFV2h"
    },
    {
        "timestamp": "2025-08-23 20:35:19.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "jyzYtQmzjkeIggRZGlMJ"
    },
    {
        "timestamp": "2025-08-23 20:35:19.000",
        "source": "frontend",
        "data": {
            "mapping_index": 3,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "kHLyOXu2MWGzqw9rb6lV"
    },
    {
        "timestamp": "2025-08-23 20:35:19.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "kIWhugrfMYqNYmBkihKp"
    },
    {
        "timestamp": "2025-08-23 20:35:19.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "nZmvxDcg4hGISY6rYKYl"
    },
    {
        "timestamp": "2025-08-23 20:35:19.000",
        "source": "frontend",
        "data": {
            "mapping_index": 0,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "o46m9A3VYhlg2JBzyFTt"
    },
    {
        "timestamp": "2025-08-23 20:35:19.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "okdTuEMwhzh6NlYugQS1"
    },
    {
        "timestamp": "2025-08-23 20:35:19.000",
        "source": "frontend",
        "data": {
            "mapping_index": 3,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "pFgjPN88tdwVQ2NWx1V3"
    },
    {
        "timestamp": "2025-08-23 20:35:19.000",
        "source": "frontend",
        "data": {
            "mapping_index": 3,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "qqENIe48tmQSy0GksYNK"
    },
    {
        "timestamp": "2025-08-23 20:35:19.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "uHrxwOL9JzoUnYYNFuhn"
    },
    {
        "timestamp": "2025-08-23 20:35:19.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "uP6tJjhnOtr3YSZNoSDc"
    },
    {
        "timestamp": "2025-08-23 20:35:19.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "uc5pAnnQsYfaVrficFEu"
    },
    {
        "timestamp": "2025-08-23 20:35:19.000",
        "source": "frontend",
        "data": {
            "mapping_index": 7,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "voPOAWcCd26F4LX5Uej0"
    },
    {
        "timestamp": "2025-08-23 20:35:19.000",
        "source": "frontend",
        "data": {
            "mapping_index": 6,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "vxj1YCVGYqut9Wo67N1I"
    },
    {
        "timestamp": "2025-08-23 20:35:19.000",
        "source": "frontend",
        "data": {
            "mapping_index": 7,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "wtxR4fPAqfN2deoCVRO1"
    },
    {
        "timestamp": "2025-08-23 20:35:19.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "xIjSnw8Ylouws30TYYeD"
    },
    {
        "timestamp": "2025-08-23 20:35:20.000",
        "source": "frontend",
        "data": {
            "mapping_index": 7,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "1XivE8R9cABVx8TceVTZ"
    },
    {
        "timestamp": "2025-08-23 20:35:20.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "5BaWswa806O5wqPBv7I1"
    },
    {
        "timestamp": "2025-08-23 20:35:20.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "6VmwQjuWX4sl5sid3KiE"
    },
    {
        "timestamp": "2025-08-23 20:35:20.000",
        "source": "frontend",
        "data": {
            "mapping_index": 0,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "84tMlncTdNxxheN81jjx"
    },
    {
        "timestamp": "2025-08-23 20:35:20.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "8NrrfRCnJaH9WMNHTEPF"
    },
    {
        "timestamp": "2025-08-23 20:35:20.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "BTDNczmaCi6Ft3mOImT4"
    },
    {
        "timestamp": "2025-08-23 20:35:20.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "Bew4MuWOuUljcOcUDkVL"
    },
    {
        "timestamp": "2025-08-23 20:35:20.000",
        "source": "frontend",
        "data": {
            "mapping_index": 6,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "DptGbkfV9kWuN1SikRpK"
    },
    {
        "timestamp": "2025-08-23 20:35:20.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "E1kQzLXdi6BvgBt58CUB"
    },
    {
        "timestamp": "2025-08-23 20:35:20.000",
        "source": "frontend",
        "data": {
            "mapping_index": 4,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "EEVBUwu1VOaC9POsD4nW"
    },
    {
        "timestamp": "2025-08-23 20:35:20.000",
        "source": "frontend",
        "data": {
            "mapping_index": 6,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "GN7wRAxLqYzbqXHoYvz3"
    },
    {
        "timestamp": "2025-08-23 20:35:20.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "MCSpW0XrK4jq1gONbw9G"
    },
    {
        "timestamp": "2025-08-23 20:35:20.000",
        "source": "frontend",
        "data": {
            "mapping_index": 2,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "O6axkDv4PVf8bu7Ff7GS"
    },
    {
        "timestamp": "2025-08-23 20:35:20.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "S70pMWhHd9AejUxfn73M"
    },
    {
        "timestamp": "2025-08-23 20:35:20.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "TMmu0Jpz2wD0gbiH5I9x"
    },
    {
        "timestamp": "2025-08-23 20:35:20.000",
        "source": "frontend",
        "data": {
            "mapping_index": 1,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "VtWW1xZgnSOFeqTXOFgn"
    },
    {
        "timestamp": "2025-08-23 20:35:20.000",
        "source": "frontend",
        "data": {
            "mapping_index": 6,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "Yo4yi6N0rwRtyd7sZ3ep"
    },
    {
        "timestamp": "2025-08-23 20:35:20.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "Z7qVO8ZRH5JF4rLnxKqT"
    },
    {
        "timestamp": "2025-08-23 20:35:20.000",
        "source": "frontend",
        "data": {
            "mapping_index": 5,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "aVihhK0udOM19eY3ZiJ0"
    },
    {
        "timestamp": "2025-08-23 20:35:20.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "eEfxvMFgYDyh1jYUQWlR"
    },
    {
        "timestamp": "2025-08-23 20:35:20.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "ebKSS8x4w2AGT47GmTL7"
    },
    {
        "timestamp": "2025-08-23 20:35:20.000",
        "source": "frontend",
        "data": {
            "mapping_index": 7,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "erUodkp3xVBJmJvxErKS"
    },
    {
        "timestamp": "2025-08-23 20:35:20.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "f0sxRsLgyXF9FgpRyq3x"
    },
    {
        "timestamp": "2025-08-23 20:35:20.000",
        "source": "frontend",
        "data": {
            "mapping_index": 1,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "j7SXKC5jNKITmvQIRfQg"
    },
    {
        "timestamp": "2025-08-23 20:35:20.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "lF0Hq7DTqXs81ad2bdPA"
    },
    {
        "timestamp": "2025-08-23 20:35:20.000",
        "source": "frontend",
        "data": {
            "mapping_index": 5,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "m840Usq4ZA2uTc1y2uW1"
    },
    {
        "timestamp": "2025-08-23 20:35:20.000",
        "source": "frontend",
        "data": {
            "mapping_index": 5,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "n0pfFfEFoxW75L5NKqe0"
    },
    {
        "timestamp": "2025-08-23 20:35:20.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "qOMTLi8epaIfIARYzJ4f"
    },
    {
        "timestamp": "2025-08-23 20:35:20.000",
        "source": "frontend",
        "data": {
            "mapping_index": 4,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "rrvXnqMrRJY4HhrHHZNX"
    },
    {
        "timestamp": "2025-08-23 20:35:20.000",
        "source": "frontend",
        "data": {
            "mapping_index": 6,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "wEKHmILhU22FHYaJhDHM"
    },
    {
        "timestamp": "2025-08-23 20:35:20.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "wrGGHrLvHOOywECNIqoe"
    },
    {
        "timestamp": "2025-08-23 20:35:21.000",
        "source": "frontend",
        "data": {
            "mapping_index": 0,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "1bGGJNikwpwT8IH1Lkbc"
    },
    {
        "timestamp": "2025-08-23 20:35:21.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "2Nmtg5SR6HUa48M44ukD"
    },
    {
        "timestamp": "2025-08-23 20:35:21.000",
        "source": "frontend",
        "data": {
            "mapping_index": 0,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "2XYGiPtXs6tfH5NoGMTE"
    },
    {
        "timestamp": "2025-08-23 20:35:21.000",
        "source": "frontend",
        "data": {
            "mapping_index": 2,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "52KdtgkHQ8mwrzBzcDwL"
    },
    {
        "timestamp": "2025-08-23 20:35:21.000",
        "source": "frontend",
        "data": {
            "mapping_index": 1,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "7NhNJK4vruiBNjHFIgVl"
    },
    {
        "timestamp": "2025-08-23 20:35:21.000",
        "source": "frontend",
        "data": {
            "mapping_index": 6,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "8oq2eP8TaEP5lDF31DtT"
    },
    {
        "timestamp": "2025-08-23 20:35:21.000",
        "source": "frontend",
        "data": {
            "mapping_index": 5,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "97kJGPsz5JcOyRj9mHkB"
    },
    {
        "timestamp": "2025-08-23 20:35:21.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "BR1tTASsPuAMQaoSC7BM"
    },
    {
        "timestamp": "2025-08-23 20:35:21.000",
        "source": "frontend",
        "data": {
            "mapping_index": 6,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "BT2H0Up3ls1zIYX1oct3"
    },
    {
        "timestamp": "2025-08-23 20:35:21.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "C77kqbJ65EuHftjwbLDl"
    },
    {
        "timestamp": "2025-08-23 20:35:21.000",
        "source": "frontend",
        "data": {
            "mapping_index": 6,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "ENiL5kqC6BjIdKjeeKMx"
    },
    {
        "timestamp": "2025-08-23 20:35:21.000",
        "source": "frontend",
        "data": {
            "mapping_index": 1,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "I76AREBnqqygCWlld9pu"
    },
    {
        "timestamp": "2025-08-23 20:35:21.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "I8O5z9R81AUmim9RHh3s"
    },
    {
        "timestamp": "2025-08-23 20:35:21.000",
        "source": "frontend",
        "data": {
            "mapping_index": 7,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "IuJgQ1pvWIbcFaKHDbsv"
    },
    {
        "timestamp": "2025-08-23 20:35:21.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "LHg9Ia8ohrC9gv6LXPOr"
    },
    {
        "timestamp": "2025-08-23 20:35:21.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "NFvJ28MUYtUwOOYq70y7"
    },
    {
        "timestamp": "2025-08-23 20:35:21.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "OT8QC6rwT0pJanJvygY4"
    },
    {
        "timestamp": "2025-08-23 20:35:21.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "OlwiZr7DMd3kFZnPmS8U"
    },
    {
        "timestamp": "2025-08-23 20:35:21.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "Py8ggJoD8OHOdY2iFIBr"
    },
    {
        "timestamp": "2025-08-23 20:35:21.000",
        "source": "frontend",
        "data": {
            "mapping_index": 2,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "Q2vad6YYriMN0eYxe1fI"
    },
    {
        "timestamp": "2025-08-23 20:35:21.000",
        "source": "frontend",
        "data": {
            "mapping_index": 0,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "R8rMaBrWONd6o5BQoHbI"
    },
    {
        "timestamp": "2025-08-23 20:35:21.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "Tqv4hCnV6X0Ix9aeqTtK"
    },
    {
        "timestamp": "2025-08-23 20:35:21.000",
        "source": "frontend",
        "data": {
            "mapping_index": 1,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "Xy1E71vc9TW3jK6E5FsV"
    },
    {
        "timestamp": "2025-08-23 20:35:21.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "Z5Qx2WfCntsOJhVKHkj6"
    },
    {
        "timestamp": "2025-08-23 20:35:21.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "ZsPe138bb403kBevzFoq"
    },
    {
        "timestamp": "2025-08-23 20:35:21.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "alTV95QbY60rOmkkhQ4n"
    },
    {
        "timestamp": "2025-08-23 20:35:21.000",
        "source": "frontend",
        "data": {
            "mapping_index": 5,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "anv7jabopJgOELuVJjda"
    },
    {
        "timestamp": "2025-08-23 20:35:21.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "c3olj1m3bMZnomyGIvwO"
    },
    {
        "timestamp": "2025-08-23 20:35:21.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "j1bPwnX3iYKZFfvG1uNP"
    },
    {
        "timestamp": "2025-08-23 20:35:21.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "nUfcpV8RLtcPg8o6B050"
    },
    {
        "timestamp": "2025-08-23 20:35:21.000",
        "source": "frontend",
        "data": {
            "mapping_index": 2,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "o21I7H6PR48cccQYwthp"
    },
    {
        "timestamp": "2025-08-23 20:35:21.000",
        "source": "frontend",
        "data": {
            "mapping_index": 5,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "oGnN0twE80mBnBNN8CBz"
    },
    {
        "timestamp": "2025-08-23 20:35:21.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "oiC63i2Ux9K5jeYSwyze"
    },
    {
        "timestamp": "2025-08-23 20:35:21.000",
        "source": "frontend",
        "data": {
            "mapping_index": 6,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "r5bOL7ZDTM2j7dR7JugC"
    },
    {
        "timestamp": "2025-08-23 20:35:21.000",
        "source": "frontend",
        "data": {
            "mapping_index": 7,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "yHh5afJo7QWN91oCF1JJ"
    },
    {
        "timestamp": "2025-08-23 20:35:22.000",
        "source": "frontend",
        "data": {
            "mapping_index": 6,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "0LXSv7dDUTsTKXbDXIUu"
    },
    {
        "timestamp": "2025-08-23 20:35:22.000",
        "source": "frontend",
        "data": {
            "mapping_index": 5,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "2b8sSMKf5BpOhhKb6mc1"
    },
    {
        "timestamp": "2025-08-23 20:35:22.000",
        "source": "frontend",
        "data": {
            "mapping_index": 7,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "2yh5XCQdjHxS0M1ty7oX"
    },
    {
        "timestamp": "2025-08-23 20:35:22.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "3dC7R8AckrFrPf667Vle"
    },
    {
        "timestamp": "2025-08-23 20:35:22.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "6vaNZa1vUIHBdQQIOnZj"
    },
    {
        "timestamp": "2025-08-23 20:35:22.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "6xGhXiDXe3TSEFO59knP"
    },
    {
        "timestamp": "2025-08-23 20:35:22.000",
        "source": "frontend",
        "data": {
            "mapping_index": 7,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "9s7tSdol0IJp2bw19iu8"
    },
    {
        "timestamp": "2025-08-23 20:35:22.000",
        "source": "frontend",
        "data": {
            "mapping_index": 3,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "CtGTNZWaOeG33OR8aNhr"
    },
    {
        "timestamp": "2025-08-23 20:35:22.000",
        "source": "frontend",
        "data": {
            "mapping_index": 5,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "H0BjUt9r9qG04YrY6Nni"
    },
    {
        "timestamp": "2025-08-23 20:35:22.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "MFTWA4ggf8jK7O3zIG7D"
    },
    {
        "timestamp": "2025-08-23 20:35:22.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "Sr3tMam6N7TDq9fKVqKo"
    },
    {
        "timestamp": "2025-08-23 20:35:22.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "YE5yltLH8Urjuxi6nRP9"
    },
    {
        "timestamp": "2025-08-23 20:35:22.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "axuXlJsSLBcIu4BQHtbf"
    },
    {
        "timestamp": "2025-08-23 20:35:22.000",
        "source": "frontend",
        "data": {
            "mapping_index": 1,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "rT23oiUT0xI9jxCIU7Vc"
    },
    {
        "timestamp": "2025-08-23 20:35:22.000",
        "source": "frontend",
        "data": {
            "mapping_index": 1,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "sUWHq5JbP3OMZbG19TTm"
    },
    {
        "timestamp": "2025-08-23 20:35:22.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "vKvoXC6VG71k9s6COkve"
    },
    {
        "timestamp": "2025-08-23 20:35:24.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "0tTKRaRuyvYbbdGKn2ca"
    },
    {
        "timestamp": "2025-08-23 20:35:24.000",
        "source": "frontend",
        "data": {
            "mapping_index": 7,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "1KXpL3DqijRbtG1c2zwX"
    },
    {
        "timestamp": "2025-08-23 20:35:24.000",
        "source": "frontend",
        "data": {
            "mapping_index": 6,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "38DEPb6fBKqT3TENRyG6"
    },
    {
        "timestamp": "2025-08-23 20:35:24.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "6OPmlNC7KoXm0CqYFh1q"
    },
    {
        "timestamp": "2025-08-23 20:35:24.000",
        "source": "frontend",
        "data": {
            "mapping_index": 2,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "6cCb9G4N5MVIzTLNpYzQ"
    },
    {
        "timestamp": "2025-08-23 20:35:24.000",
        "source": "frontend",
        "data": {
            "mapping_index": 3,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "7HBwLHtLtzScp0pNvZJx"
    },
    {
        "timestamp": "2025-08-23 20:35:24.000",
        "source": "frontend",
        "data": {
            "mapping_index": 1,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "7tgg84EegmwvxelLqnaM"
    },
    {
        "timestamp": "2025-08-23 20:35:24.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "9k9e60EZE1g9HYDMXfQu"
    },
    {
        "timestamp": "2025-08-23 20:35:24.000",
        "source": "frontend",
        "data": {
            "mapping_index": 6,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "9ql6gji8NYhvLVWFiqr0"
    },
    {
        "timestamp": "2025-08-23 20:35:24.000",
        "source": "frontend",
        "data": {
            "mapping_index": 3,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "AWaODBKN1KGrTB86hSBU"
    },
    {
        "timestamp": "2025-08-23 20:35:24.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "BiasT12hrhkHdDrlr72L"
    },
    {
        "timestamp": "2025-08-23 20:35:24.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "EMZXmzmwg0gLhyiCeF7v"
    },
    {
        "timestamp": "2025-08-23 20:35:24.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "G50p5to4aPaw9gsZugPB"
    },
    {
        "timestamp": "2025-08-23 20:35:24.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "GsA9uh2L16Ll9HKRmTs8"
    },
    {
        "timestamp": "2025-08-23 20:35:24.000",
        "source": "frontend",
        "data": {
            "mapping_index": 1,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "HFeUatt2ozo2ZjxCV4wX"
    },
    {
        "timestamp": "2025-08-23 20:35:24.000",
        "source": "frontend",
        "data": {
            "mapping_index": 7,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "OhKX4gMcYYPzYFI29lOS"
    },
    {
        "timestamp": "2025-08-23 20:35:24.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "R9b9ax4lG1d0AVEtTr8U"
    },
    {
        "timestamp": "2025-08-23 20:35:24.000",
        "source": "frontend",
        "data": {
            "mapping_index": 5,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "Tm0rgggUm6JorZysAMZH"
    },
    {
        "timestamp": "2025-08-23 20:35:24.000",
        "source": "frontend",
        "data": {
            "mapping_index": 1,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "XRbr37AZ4b3WbGxsgga5"
    },
    {
        "timestamp": "2025-08-23 20:35:24.000",
        "source": "frontend",
        "data": {
            "mapping_index": 2,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "YOUF40jE3Nfv2Zasp6aW"
    },
    {
        "timestamp": "2025-08-23 20:35:24.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "aoyaLJKhskmjG4IxBTLf"
    },
    {
        "timestamp": "2025-08-23 20:35:24.000",
        "source": "frontend",
        "data": {
            "mapping_index": 6,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "bEZPj5tgwfhN6UoZllTT"
    },
    {
        "timestamp": "2025-08-23 20:35:24.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "bLYSyoSeKOQGv8J0wriY"
    },
    {
        "timestamp": "2025-08-23 20:35:24.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "cSfHxDBkhj8HERjPTWY0"
    },
    {
        "timestamp": "2025-08-23 20:35:24.000",
        "source": "frontend",
        "data": {
            "mapping_index": 2,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "dG5fWkC2wrHTjl3OfvVU"
    },
    {
        "timestamp": "2025-08-23 20:35:24.000",
        "source": "frontend",
        "data": {
            "mapping_index": 6,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "dkmOosSnlsIwHr0tJQ3N"
    },
    {
        "timestamp": "2025-08-23 20:35:24.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "dzVlBhiz2bv9Bj1rYzhF"
    },
    {
        "timestamp": "2025-08-23 20:35:24.000",
        "source": "frontend",
        "data": {
            "mapping_index": 7,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "mNqsp5xRDlVxKjZ549Fz"
    },
    {
        "timestamp": "2025-08-23 20:35:24.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "mdsuRNW3twRnVjwPbVwQ"
    },
    {
        "timestamp": "2025-08-23 20:35:24.000",
        "source": "frontend",
        "data": {
            "mapping_index": 6,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "ref8LIULeddvhicjbg4M"
    },
    {
        "timestamp": "2025-08-23 20:35:24.000",
        "source": "frontend",
        "data": {
            "mapping_index": 4,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "rf9V3qiLRuzSsLGyUSdI"
    },
    {
        "timestamp": "2025-08-23 20:35:24.000",
        "source": "frontend",
        "data": {
            "mapping_index": 2,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "saQqziS7wT8L6rjnHx1u"
    },
    {
        "timestamp": "2025-08-23 20:35:24.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "sjHWEWXxP2i8kA1lOkBY"
    },
    {
        "timestamp": "2025-08-23 20:35:24.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "tIvRNBpwCLZRCHWYjAB3"
    },
    {
        "timestamp": "2025-08-23 20:35:24.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "xjXHch16686PuYEksBqB"
    },
    {
        "timestamp": "2025-08-23 20:35:24.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "yVFfdWFCKygTqQ9xAZEA"
    },
    {
        "timestamp": "2025-08-23 20:35:24.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "yzcKl1GudKHPnS5uK9qk"
    },
    {
        "timestamp": "2025-08-23 20:35:24.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "zQDWWuHO7b74ufWJL4WE"
    },
    {
        "timestamp": "2025-08-23 20:35:25.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "0yDV2TTL1Iitgr4q1jIZ"
    },
    {
        "timestamp": "2025-08-23 20:35:25.000",
        "source": "frontend",
        "data": {
            "mapping_index": 6,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "1AjsTAj8p0r02xTws1Q8"
    },
    {
        "timestamp": "2025-08-23 20:35:25.000",
        "source": "frontend",
        "data": {
            "mapping_index": 7,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "1pVKVeMDIlHgczvMYLJj"
    },
    {
        "timestamp": "2025-08-23 20:35:25.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "3HrvKx1aNfxHsyB5ZMPW"
    },
    {
        "timestamp": "2025-08-23 20:35:25.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "4M2k6sc6PV5Jm3UT0VaF"
    },
    {
        "timestamp": "2025-08-23 20:35:25.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "6aMbyfjqh4W9v0cUFZxx"
    },
    {
        "timestamp": "2025-08-23 20:35:25.000",
        "source": "frontend",
        "data": {
            "mapping_index": 2,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "8AFBTPrkstdX8yfP2PDY"
    },
    {
        "timestamp": "2025-08-23 20:35:25.000",
        "source": "frontend",
        "data": {
            "mapping_index": 2,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "8M6kB2h5K9uoRx0KhIj3"
    },
    {
        "timestamp": "2025-08-23 20:35:25.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "9ELuxZNNt8QdNpkeeXJi"
    },
    {
        "timestamp": "2025-08-23 20:35:25.000",
        "source": "frontend",
        "data": {
            "mapping_index": 6,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "BpQduB9oOM9TYAHVH74e"
    },
    {
        "timestamp": "2025-08-23 20:35:25.000",
        "source": "frontend",
        "data": {
            "mapping_index": 5,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "CyOu9Q8fm2CnLJmR4uto"
    },
    {
        "timestamp": "2025-08-23 20:35:25.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "DUPzOXAHIATlm2pBr89I"
    },
    {
        "timestamp": "2025-08-23 20:35:25.000",
        "source": "frontend",
        "data": {
            "mapping_index": 7,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "FchsBwOKk00VMWYbofEh"
    },
    {
        "timestamp": "2025-08-23 20:35:25.000",
        "source": "frontend",
        "data": {
            "mapping_index": 0,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "G5xY4369myR6xdjOt9vl"
    },
    {
        "timestamp": "2025-08-23 20:35:25.000",
        "source": "frontend",
        "data": {
            "mapping_index": 7,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "GixK71FQhStd1XACJ2NP"
    },
    {
        "timestamp": "2025-08-23 20:35:25.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "HosWfXMT6RoTMj5XBMdm"
    },
    {
        "timestamp": "2025-08-23 20:35:25.000",
        "source": "frontend",
        "data": {
            "mapping_index": 6,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "Hs1kBD7yPlsPqUvtvEIu"
    },
    {
        "timestamp": "2025-08-23 20:35:25.000",
        "source": "frontend",
        "data": {
            "mapping_index": 1,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "JMiyH6G91bR22OTy9nKp"
    },
    {
        "timestamp": "2025-08-23 20:35:25.000",
        "source": "frontend",
        "data": {
            "mapping_index": 6,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "KMLmezwQiaNSRaCvnEKU"
    },
    {
        "timestamp": "2025-08-23 20:35:25.000",
        "source": "frontend",
        "data": {
            "mapping_index": 2,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "Kh7eeNsl4jYBaxfJjaVB"
    },
    {
        "timestamp": "2025-08-23 20:35:25.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "MGAKBs8dePOhQ2Vyjx0M"
    },
    {
        "timestamp": "2025-08-23 20:35:25.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "OgPyzkuQfb5l6xH88Ekb"
    },
    {
        "timestamp": "2025-08-23 20:35:25.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "OvbEqMY3d3HQS8W5vFYW"
    },
    {
        "timestamp": "2025-08-23 20:35:25.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "Rgl9Rip6g6n838PqTDAR"
    },
    {
        "timestamp": "2025-08-23 20:35:25.000",
        "source": "frontend",
        "data": {
            "mapping_index": 7,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "SYlxQd5TM2MnNkf45kSn"
    },
    {
        "timestamp": "2025-08-23 20:35:25.000",
        "source": "frontend",
        "data": {
            "mapping_index": 1,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "Tmeel806ObSTDC059Cjc"
    },
    {
        "timestamp": "2025-08-23 20:35:25.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "Tn8M1ZJvKVxt1Lzm0jv9"
    },
    {
        "timestamp": "2025-08-23 20:35:25.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "U8LnqQekBerKJI5zKK2R"
    },
    {
        "timestamp": "2025-08-23 20:35:25.000",
        "source": "frontend",
        "data": {
            "mapping_index": 6,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "UI2MplHORZx6r4ptknQn"
    },
    {
        "timestamp": "2025-08-23 20:35:25.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "XZ2U14hIWIQElNjhqhd3"
    },
    {
        "timestamp": "2025-08-23 20:35:25.000",
        "source": "frontend",
        "data": {
            "mapping_index": 1,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "Yxf1DToflQGVUUGAvSuu"
    },
    {
        "timestamp": "2025-08-23 20:35:25.000",
        "source": "frontend",
        "data": {
            "mapping_index": 3,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "b5YPZp6P8bN5YKOdRgNj"
    },
    {
        "timestamp": "2025-08-23 20:35:25.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "brEUpXOouC3ye8ly5HSa"
    },
    {
        "timestamp": "2025-08-23 20:35:25.000",
        "source": "frontend",
        "data": {
            "mapping_index": 2,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "cTiRXlXYyMZpgeuiX4gM"
    },
    {
        "timestamp": "2025-08-23 20:35:25.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "e6fHXRnbrOt4Ou2fZWyB"
    },
    {
        "timestamp": "2025-08-23 20:35:25.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "eamX2qALsJcNEd31b4QN"
    },
    {
        "timestamp": "2025-08-23 20:35:25.000",
        "source": "frontend",
        "data": {
            "mapping_index": 2,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "ewAs637pwOsluICG1tqi"
    },
    {
        "timestamp": "2025-08-23 20:35:25.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "fBUi3aCTHuAd8KFCWy6h"
    },
    {
        "timestamp": "2025-08-23 20:35:25.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "fDPUMb1AFqsbkS1zpdLK"
    },
    {
        "timestamp": "2025-08-23 20:35:25.000",
        "source": "frontend",
        "data": {
            "mapping_index": 3,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "hdl4bTZFQBRis1weJ6Dv"
    },
    {
        "timestamp": "2025-08-23 20:35:25.000",
        "source": "frontend",
        "data": {
            "mapping_index": 3,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "he8obGqnv5KxdJizIdhg"
    },
    {
        "timestamp": "2025-08-23 20:35:25.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "iZX7QOZatPvFCLnjrh9L"
    },
    {
        "timestamp": "2025-08-23 20:35:25.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "isBncTwnVajxwt77vNXm"
    },
    {
        "timestamp": "2025-08-23 20:35:25.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "jQlnMgDwW7gUJRyE4pjM"
    },
    {
        "timestamp": "2025-08-23 20:35:25.000",
        "source": "frontend",
        "data": {
            "mapping_index": 5,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "lQWA4Jy4HXgTjZMiYSGC"
    },
    {
        "timestamp": "2025-08-23 20:35:25.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "ldIFtWWJn7BW85VRdpTM"
    },
    {
        "timestamp": "2025-08-23 20:35:25.000",
        "source": "frontend",
        "data": {
            "mapping_index": 4,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "loXcUbbxwqIGxNADgJne"
    },
    {
        "timestamp": "2025-08-23 20:35:25.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "reHClTLlh5L6AUzEgOdl"
    },
    {
        "timestamp": "2025-08-23 20:35:25.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "rmYoeXMxXLGmXaeJ7q8g"
    },
    {
        "timestamp": "2025-08-23 20:35:25.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "uZJh1V0WbnFqqRvUSY1U"
    },
    {
        "timestamp": "2025-08-23 20:35:25.000",
        "source": "frontend",
        "data": {
            "mapping_index": 7,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "zBpqVzlNRihYKXKjUjCK"
    },
    {
        "timestamp": "2025-08-23 20:35:26.000",
        "source": "frontend",
        "data": {
            "mapping_index": 5,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "0aznq1YB0CqSohMAdp54"
    },
    {
        "timestamp": "2025-08-23 20:35:26.000",
        "source": "frontend",
        "data": {
            "mapping_index": 7,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "0kJxXlWTn8kWxqMrYpgl"
    },
    {
        "timestamp": "2025-08-23 20:35:26.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "19PRZUhNf26ae3NasrqP"
    },
    {
        "timestamp": "2025-08-23 20:35:26.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "4LEQuHtr4cAHMN9vD4Kb"
    },
    {
        "timestamp": "2025-08-23 20:35:26.000",
        "source": "frontend",
        "data": {
            "mapping_index": 3,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "4oRIbbDIvaHASncwRv6Z"
    },
    {
        "timestamp": "2025-08-23 20:35:26.000",
        "source": "frontend",
        "data": {
            "mapping_index": 1,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "4zP8YoXXA4w6aHzQs8ST"
    },
    {
        "timestamp": "2025-08-23 20:35:26.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "5BjZAHOEV47n3zSeEcvI"
    },
    {
        "timestamp": "2025-08-23 20:35:26.000",
        "source": "frontend",
        "data": {
            "mapping_index": 4,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "60Ue9E9isiYFkpOPjvit"
    },
    {
        "timestamp": "2025-08-23 20:35:26.000",
        "source": "frontend",
        "data": {
            "mapping_index": 2,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "6ghm64BfXlrS5AeR1wMk"
    },
    {
        "timestamp": "2025-08-23 20:35:26.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "6vKOvrP6QYEUkN1EgZ9C"
    },
    {
        "timestamp": "2025-08-23 20:35:26.000",
        "source": "frontend",
        "data": {
            "mapping_index": 5,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "9VECakrp7tQQvxQJhgVK"
    },
    {
        "timestamp": "2025-08-23 20:35:26.000",
        "source": "frontend",
        "data": {
            "mapping_index": 7,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "ADUXcHJK2Nxb2nXzbU4H"
    },
    {
        "timestamp": "2025-08-23 20:35:26.000",
        "source": "frontend",
        "data": {
            "mapping_index": 7,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "ARjOYMIcay4lbIcavrSK"
    },
    {
        "timestamp": "2025-08-23 20:35:26.000",
        "source": "frontend",
        "data": {
            "mapping_index": 1,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "Aydz1yxwtsVZSsFyQyJ7"
    },
    {
        "timestamp": "2025-08-23 20:35:26.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "B733eBw7sO0wbZZKW6iw"
    },
    {
        "timestamp": "2025-08-23 20:35:26.000",
        "source": "frontend",
        "data": {
            "mapping_index": 2,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "BFdEfINf11nlwZQMCk45"
    },
    {
        "timestamp": "2025-08-23 20:35:26.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "BNmMBoPNNKzNVMUoByPr"
    },
    {
        "timestamp": "2025-08-23 20:35:26.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "FTnpk4xJohmWBgS17CVU"
    },
    {
        "timestamp": "2025-08-23 20:35:26.000",
        "source": "frontend",
        "data": {
            "mapping_index": 1,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "I1k9vEgWhJeima3yUoFG"
    },
    {
        "timestamp": "2025-08-23 20:35:26.000",
        "source": "frontend",
        "data": {
            "mapping_index": 6,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "Ifzr9qD5CweQBYV1Aw69"
    },
    {
        "timestamp": "2025-08-23 20:35:26.000",
        "source": "frontend",
        "data": {
            "mapping_index": 4,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "JS9v3Am0fjfLTWt9VQTq"
    },
    {
        "timestamp": "2025-08-23 20:35:26.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "LJAGTFYaxCd9AYTRLa9H"
    },
    {
        "timestamp": "2025-08-23 20:35:26.000",
        "source": "frontend",
        "data": {
            "mapping_index": 7,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "MC5upbqNdRNmWlawVj5n"
    },
    {
        "timestamp": "2025-08-23 20:35:26.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "P7kH5KfDYDzfIUzLRQfg"
    },
    {
        "timestamp": "2025-08-23 20:35:26.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "QaXKteHKSFPovYJCLKlQ"
    },
    {
        "timestamp": "2025-08-23 20:35:26.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "R0XS9zRSLVKQixNQsnNA"
    },
    {
        "timestamp": "2025-08-23 20:35:26.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "RByUFy9mgDOnFpXm44gI"
    },
    {
        "timestamp": "2025-08-23 20:35:26.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "S1H9eYidVJyk3BCDfoN5"
    },
    {
        "timestamp": "2025-08-23 20:35:26.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "SI0FctDKwMaz3dEDgMKd"
    },
    {
        "timestamp": "2025-08-23 20:35:26.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "SnVRI3dnyymk4waWzo0l"
    },
    {
        "timestamp": "2025-08-23 20:35:26.000",
        "source": "frontend",
        "data": {
            "mapping_index": 7,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "UQ6TfRjmjArKPIS3P3cX"
    },
    {
        "timestamp": "2025-08-23 20:35:26.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "Uz6QvuHCTlPSE8waf0lt"
    },
    {
        "timestamp": "2025-08-23 20:35:26.000",
        "source": "frontend",
        "data": {
            "mapping_index": 6,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "VXN802OkLiV9UgfIFSbI"
    },
    {
        "timestamp": "2025-08-23 20:35:26.000",
        "source": "frontend",
        "data": {
            "mapping_index": 7,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "XZ8QZzfHtgUo2aWqS33k"
    },
    {
        "timestamp": "2025-08-23 20:35:26.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "YfC0cGSJ65oyTRgmgfCM"
    },
    {
        "timestamp": "2025-08-23 20:35:26.000",
        "source": "frontend",
        "data": {
            "mapping_index": 0,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "ZIGVVroMTv4fhGWui82C"
    },
    {
        "timestamp": "2025-08-23 20:35:26.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "aDVkg5Af3YVZGe0v3Csu"
    },
    {
        "timestamp": "2025-08-23 20:35:26.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "bXX35vAgGOCXtYO1eGIj"
    },
    {
        "timestamp": "2025-08-23 20:35:26.000",
        "source": "frontend",
        "data": {
            "mapping_index": 2,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "bsZky7vnZkYj7t6D6sTr"
    },
    {
        "timestamp": "2025-08-23 20:35:26.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "cWiUNQ5lsMKx4rifs75B"
    },
    {
        "timestamp": "2025-08-23 20:35:26.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "ccko88wmTBdhut25J5MU"
    },
    {
        "timestamp": "2025-08-23 20:35:26.000",
        "source": "frontend",
        "data": {
            "mapping_index": 0,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "cnYPUHPmNe9o6xzmoDsQ"
    },
    {
        "timestamp": "2025-08-23 20:35:26.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "d27mBAK2sQ7eDgNYEudz"
    },
    {
        "timestamp": "2025-08-23 20:35:26.000",
        "source": "frontend",
        "data": {
            "mapping_index": 6,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "h4sKaGKwAw4NwiSesVPC"
    },
    {
        "timestamp": "2025-08-23 20:35:26.000",
        "source": "frontend",
        "data": {
            "mapping_index": 1,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "hfci42cwEd7Ft6hWhdnE"
    },
    {
        "timestamp": "2025-08-23 20:35:26.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "hylSTpWOVaWJMhQLV1I8"
    },
    {
        "timestamp": "2025-08-23 20:35:26.000",
        "source": "frontend",
        "data": {
            "mapping_index": 1,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "i33VUb0Vz8A2z075qe0x"
    },
    {
        "timestamp": "2025-08-23 20:35:26.000",
        "source": "frontend",
        "data": {
            "mapping_index": 3,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "iFIjhrfGuBRRWPJth0yl"
    },
    {
        "timestamp": "2025-08-23 20:35:26.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "ialeDzuT56khKaFCtagX"
    },
    {
        "timestamp": "2025-08-23 20:35:26.000",
        "source": "frontend",
        "data": {
            "mapping_index": 2,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "jSbtyqObrPnQKsCjsrs6"
    },
    {
        "timestamp": "2025-08-23 20:35:26.000",
        "source": "frontend",
        "data": {
            "mapping_index": 6,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "jsTjecMa4Lm1zJ3NvuJ7"
    },
    {
        "timestamp": "2025-08-23 20:35:26.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "jwi1xON6m9ES6lv2HNt6"
    },
    {
        "timestamp": "2025-08-23 20:35:26.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "liIA0hbh4O0pJRifgzqA"
    },
    {
        "timestamp": "2025-08-23 20:35:26.000",
        "source": "frontend",
        "data": {
            "mapping_index": 5,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "ltCJgkWfr4DTM9v5sC8d"
    },
    {
        "timestamp": "2025-08-23 20:35:26.000",
        "source": "frontend",
        "data": {
            "mapping_index": 0,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "nUwh6Xm60nuced7Ks3OO"
    },
    {
        "timestamp": "2025-08-23 20:35:26.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "o5BZsd11XBFjh1X9uQHi"
    },
    {
        "timestamp": "2025-08-23 20:35:26.000",
        "source": "frontend",
        "data": {
            "mapping_index": 4,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "pGdlTsYzBMM4Kgii5Apn"
    },
    {
        "timestamp": "2025-08-23 20:35:26.000",
        "source": "frontend",
        "data": {
            "mapping_index": 6,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "pKXrgWh0STZMWY76dWwM"
    },
    {
        "timestamp": "2025-08-23 20:35:26.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "qIVlSgLkFaWymcT13GmG"
    },
    {
        "timestamp": "2025-08-23 20:35:26.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "sSgpuqBpeHqoQ2fgEWB6"
    },
    {
        "timestamp": "2025-08-23 20:35:26.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "uyPYRF7POZM6anQEPxO3"
    },
    {
        "timestamp": "2025-08-23 20:35:26.000",
        "source": "frontend",
        "data": {
            "mapping_index": 3,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "wKB4mq7h42SOJPD2oH9v"
    },
    {
        "timestamp": "2025-08-23 20:35:26.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "wrohh1V9EeSi51D6qpl3"
    },
    {
        "timestamp": "2025-08-23 20:35:27.000",
        "source": "frontend",
        "data": {
            "mapping_index": 3,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "2aq9wSg1Cu8gl6H8mTzG"
    },
    {
        "timestamp": "2025-08-23 20:35:27.000",
        "source": "frontend",
        "data": {
            "mapping_index": 6,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "BiB67jSWfeXdVjLziST0"
    },
    {
        "timestamp": "2025-08-23 20:35:27.000",
        "source": "frontend",
        "data": {
            "mapping_index": 4,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "ITQTCtoDESustczFiXzJ"
    },
    {
        "timestamp": "2025-08-23 20:35:27.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "ItXtWq2PG8cwoMrf6p2z"
    },
    {
        "timestamp": "2025-08-23 20:35:27.000",
        "source": "frontend",
        "data": {
            "mapping_index": 1,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "NBid5on5KbpzPFhK2g5H"
    },
    {
        "timestamp": "2025-08-23 20:35:27.000",
        "source": "frontend",
        "data": {
            "after_detail_level": "medium",
            "after_structured": "structured",
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "before_structured": "unstructured",
            "before_detail_level": "medium"
        },
        "event": "change_summary_level",
        "id": "TorHbjynK3Qik657AxQ2"
    },
    {
        "timestamp": "2025-08-23 20:35:27.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "UDM0AYShKf4jYN5vOblO"
    },
    {
        "timestamp": "2025-08-23 20:35:27.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "VH8IeP81ZsCjXjmZNYW3"
    },
    {
        "timestamp": "2025-08-23 20:35:27.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "f8XchE5juvA0oeOUtuYa"
    },
    {
        "timestamp": "2025-08-23 20:35:27.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "hWOhgdB2cRCu7Y23p6jP"
    },
    {
        "timestamp": "2025-08-23 20:35:27.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "jEheAt5FSXlj8rXxueOB"
    },
    {
        "timestamp": "2025-08-23 20:35:27.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "n1smaML2YFImD1d1DiCU"
    },
    {
        "timestamp": "2025-08-23 20:35:27.000",
        "source": "frontend",
        "data": {
            "mapping_index": 2,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "pbOdXYemMd1ptCQ0DuHd"
    },
    {
        "timestamp": "2025-08-23 20:35:27.000",
        "source": "frontend",
        "data": {
            "mapping_index": 2,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "yFe5lLJyEtBDEwlh5jMY"
    },
    {
        "timestamp": "2025-08-23 20:35:28.000",
        "source": "frontend",
        "data": {
            "mapping_index": 4,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "09XS84SN3e39EnjOsNai"
    },
    {
        "timestamp": "2025-08-23 20:35:28.000",
        "source": "frontend",
        "data": {
            "mapping_index": 6,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "3838rgQY3PmjQE8yjDlu"
    },
    {
        "timestamp": "2025-08-23 20:35:28.000",
        "source": "frontend",
        "data": {
            "mapping_index": 3,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "76U2hXggi8823P8G5npd"
    },
    {
        "timestamp": "2025-08-23 20:35:28.000",
        "source": "frontend",
        "data": {
            "mapping_index": 5,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "9Aj8c65UC4ptG0HpcRjD"
    },
    {
        "timestamp": "2025-08-23 20:35:28.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "CWxlx6o1ScoLQmZSgM9Q"
    },
    {
        "timestamp": "2025-08-23 20:35:28.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "EGllBrkIEnzAj635uJLB"
    },
    {
        "timestamp": "2025-08-23 20:35:28.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "Nz7wcbudBkTIImE1GGry"
    },
    {
        "timestamp": "2025-08-23 20:35:28.000",
        "source": "frontend",
        "data": {
            "mapping_index": 5,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "OcLrlR5AjQNb1IcJK4gh"
    },
    {
        "timestamp": "2025-08-23 20:35:28.000",
        "source": "frontend",
        "data": {
            "mapping_index": 4,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "TuAxdZunm64NO3SXr4Cl"
    },
    {
        "timestamp": "2025-08-23 20:35:28.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "VOfW0Nx4zefQn6ONWfwK"
    },
    {
        "timestamp": "2025-08-23 20:35:28.000",
        "source": "frontend",
        "data": {
            "mapping_index": 3,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "gBQCtzC7vSHjO8BFvjHf"
    },
    {
        "timestamp": "2025-08-23 20:35:28.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "h0Q7NRqhfPhWTNbZK78i"
    },
    {
        "timestamp": "2025-08-23 20:35:28.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "jyscF3HTlUfuin2gEHgG"
    },
    {
        "timestamp": "2025-08-23 20:35:28.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "mBiJQkOUcwAYksDdriH3"
    },
    {
        "timestamp": "2025-08-23 20:35:28.000",
        "source": "frontend",
        "data": {
            "mapping_index": 1,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "p08QQNC4HhnTs2KRfESq"
    },
    {
        "timestamp": "2025-08-23 20:35:28.000",
        "source": "frontend",
        "data": {
            "mapping_index": 2,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "t6b58Q6dGSeXN0Qw1gH8"
    },
    {
        "timestamp": "2025-08-23 20:35:28.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "uNPnMkS2sTmlZnaCDc5N"
    },
    {
        "timestamp": "2025-08-23 20:35:28.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "uszZ8ZLR7ZaX2RDCu5nC"
    },
    {
        "timestamp": "2025-08-23 20:35:28.000",
        "source": "frontend",
        "data": {
            "mapping_index": 0,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "uwCmUSXLfwqpIO6B17hW"
    },
    {
        "timestamp": "2025-08-23 20:35:28.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "wQC6J0XoSCuoabhaKBZD"
    },
    {
        "timestamp": "2025-08-23 20:35:28.000",
        "source": "frontend",
        "data": {
            "mapping_index": 2,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "wTxeuqJgA2KKQVKVWhC9"
    },
    {
        "timestamp": "2025-08-23 20:35:29.000",
        "source": "frontend",
        "data": {
            "mapping_index": 0,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "7p2wsgRCmYq9Lr9x2V7Z"
    },
    {
        "timestamp": "2025-08-23 20:35:29.000",
        "source": "frontend",
        "data": {
            "mapping_index": 1,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "LNu0xbKOIEHbVwsb5r5I"
    },
    {
        "timestamp": "2025-08-23 20:35:29.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "P4UCXhSmjY2Q6vXAVds6"
    },
    {
        "timestamp": "2025-08-23 20:35:29.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "YPUdDJDNedjfyRRTaQqg"
    },
    {
        "timestamp": "2025-08-23 20:35:29.000",
        "source": "frontend",
        "data": {
            "mapping_index": 2,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "c6iI4iFoobXNT6H82tQs"
    },
    {
        "timestamp": "2025-08-23 20:35:29.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "epfbQ4xOdUnjPC5kqRZZ"
    },
    {
        "timestamp": "2025-08-23 20:35:29.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "eyMOenB8bZSuf6o5hm4J"
    },
    {
        "timestamp": "2025-08-23 20:35:29.000",
        "source": "frontend",
        "data": {
            "mapping_index": 1,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "wLlmMZoJ8OM6YjPxmeWZ"
    },
    {
        "timestamp": "2025-08-23 20:35:30.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "5gVoRvGqFPKtl3I0ceW2"
    },
    {
        "timestamp": "2025-08-23 20:35:30.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "A6LwglD0yjYYM6M9tIU7"
    },
    {
        "timestamp": "2025-08-23 20:35:30.000",
        "source": "frontend",
        "data": {
            "mapping_index": 3,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "ESbPksdonI8Ej5lBGNek"
    },
    {
        "timestamp": "2025-08-23 20:35:30.000",
        "source": "frontend",
        "data": {
            "mapping_index": 6,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "QBj3lsvrFir3koFDIrQP"
    },
    {
        "timestamp": "2025-08-23 20:35:30.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "WAftobPPTxMaxD5o1KTf"
    },
    {
        "timestamp": "2025-08-23 20:35:30.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "mlEwhw0unrlS2AaPC14Y"
    },
    {
        "timestamp": "2025-08-23 20:35:30.000",
        "source": "frontend",
        "data": {
            "mapping_index": 4,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "puEh2j903fYzGanPr8UL"
    },
    {
        "timestamp": "2025-08-23 20:35:30.000",
        "source": "frontend",
        "data": {
            "mapping_index": 5,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "u7sIYqhI2ilb8uIMPNWm"
    },
    {
        "timestamp": "2025-08-23 20:35:31.000",
        "source": "frontend",
        "data": {
            "mapping_index": 5,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "3EfM94IjqDEFJql9chAq"
    },
    {
        "timestamp": "2025-08-23 20:35:31.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "J12t0iIyp5Bc2fzo49vU"
    },
    {
        "timestamp": "2025-08-23 20:35:32.000",
        "source": "frontend",
        "data": {
            "mapping_index": 2,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "2NmIMFMMyZNF7kUTJ6Gp"
    },
    {
        "timestamp": "2025-08-23 20:35:32.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "6sDyrbmCvBmBwAKimrW0"
    },
    {
        "timestamp": "2025-08-23 20:35:32.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "FzKthTjm1vWSRPcOUKho"
    },
    {
        "timestamp": "2025-08-23 20:35:32.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "Jv1vtvl0tc0EnMX4CABP"
    },
    {
        "timestamp": "2025-08-23 20:35:32.000",
        "source": "frontend",
        "data": {
            "mapping_index": 3,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "ZGsXY9jpR4zDTF5k2BB5"
    },
    {
        "timestamp": "2025-08-23 20:35:32.000",
        "source": "frontend",
        "data": {
            "mapping_index": 4,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "tUHWVZh3Br5RAIInWAfh"
    },
    {
        "timestamp": "2025-08-23 20:35:33.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "DrDNL9rDeM4l1LB3kHcD"
    },
    {
        "timestamp": "2025-08-23 20:35:33.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "JBRYfSN8x5EOqYvOl44p"
    },
    {
        "timestamp": "2025-08-23 20:35:33.000",
        "source": "frontend",
        "data": {
            "mapping_index": 3,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "dQRUWx2Fyjl0exjyU1DS"
    },
    {
        "timestamp": "2025-08-23 20:35:33.000",
        "source": "frontend",
        "data": {
            "mapping_index": 3,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "kcspzJWbjev3MVx2k4Hu"
    },
    {
        "timestamp": "2025-08-23 20:35:34.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "6SEj4NATIo4gpFBM8IUA"
    },
    {
        "timestamp": "2025-08-23 20:35:34.000",
        "source": "frontend",
        "data": {
            "mapping_index": 2,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "8zHkeASshlLCNZed8esa"
    },
    {
        "timestamp": "2025-08-23 20:35:34.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "9yqBeLJtuwM1sYnc7FX8"
    },
    {
        "timestamp": "2025-08-23 20:35:34.000",
        "source": "frontend",
        "data": {
            "mapping_index": 3,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "El01C4l0XXoOmyDCi7B7"
    },
    {
        "timestamp": "2025-08-23 20:35:34.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "GQt2lVVSV4CJbnmOquuj"
    },
    {
        "timestamp": "2025-08-23 20:35:34.000",
        "source": "frontend",
        "data": {
            "mapping_index": 3,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "Ip2Q0yInFTI1W6LonmMI"
    },
    {
        "timestamp": "2025-08-23 20:35:34.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "oxiPoOJXUSyH7sDKHYQZ"
    },
    {
        "timestamp": "2025-08-23 20:35:35.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "4Q2qweS9SmKi2vPJ2mue"
    },
    {
        "timestamp": "2025-08-23 20:35:35.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "67OilS8Scfe7vediwdTT"
    },
    {
        "timestamp": "2025-08-23 20:35:35.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "6V8LxtbHfBoICTFgD1N1"
    },
    {
        "timestamp": "2025-08-23 20:35:35.000",
        "source": "frontend",
        "data": {
            "mapping_index": 4,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "7h24qr4nttVVozL5p1FZ"
    },
    {
        "timestamp": "2025-08-23 20:35:35.000",
        "source": "frontend",
        "data": {
            "mapping_index": 6,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "9ljArWNxrWt3rlqkVOxN"
    },
    {
        "timestamp": "2025-08-23 20:35:35.000",
        "source": "frontend",
        "data": {
            "mapping_index": 2,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "EHhrWMmRJNP3oEY45ULr"
    },
    {
        "timestamp": "2025-08-23 20:35:35.000",
        "source": "frontend",
        "data": {
            "mapping_index": 1,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "Ersyor3ky4yfAToWUkZL"
    },
    {
        "timestamp": "2025-08-23 20:35:35.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "HP9rIMxhXMGpE4U4uJyt"
    },
    {
        "timestamp": "2025-08-23 20:35:35.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "Jb2lSr9oSDWN8uNU0RS2"
    },
    {
        "timestamp": "2025-08-23 20:35:35.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "NSrX08xEODgjrMeTxwvv"
    },
    {
        "timestamp": "2025-08-23 20:35:35.000",
        "source": "frontend",
        "data": {
            "mapping_index": 3,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "VMb5syKsq7PZqEOMGKaK"
    },
    {
        "timestamp": "2025-08-23 20:35:35.000",
        "source": "frontend",
        "data": {
            "mapping_index": 0,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "Yk1hCtEKDJnwG4uuG9Yy"
    },
    {
        "timestamp": "2025-08-23 20:35:35.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "cOrpqjiU9p33KOUHLQBo"
    },
    {
        "timestamp": "2025-08-23 20:35:35.000",
        "source": "frontend",
        "data": {
            "mapping_index": 5,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "ldvPM0m9kG5dPF1PgGjb"
    },
    {
        "timestamp": "2025-08-23 20:35:42.000",
        "source": "frontend",
        "data": {
            "mapping_index": 5,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "0B7PQxHrCWUYROOS0DcR"
    },
    {
        "timestamp": "2025-08-23 20:35:42.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "36y7e2Oh9YM6xREpJvig"
    },
    {
        "timestamp": "2025-08-23 20:35:42.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "3AvNXOIbkWVfsD4vOD6r"
    },
    {
        "timestamp": "2025-08-23 20:35:42.000",
        "source": "frontend",
        "data": {
            "mapping_index": 1,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "ButiL25GMqtXhjwpeqCZ"
    },
    {
        "timestamp": "2025-08-23 20:35:42.000",
        "source": "frontend",
        "data": {
            "mapping_index": 6,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "CENtvxNMzfcgIHDzUds3"
    },
    {
        "timestamp": "2025-08-23 20:35:42.000",
        "source": "frontend",
        "data": {
            "mapping_index": 5,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "CUDTPWuYzPtQ6ziCSscq"
    },
    {
        "timestamp": "2025-08-23 20:35:42.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "DREmACjc98MFPsTjP30u"
    },
    {
        "timestamp": "2025-08-23 20:35:42.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "IX5uCyEQY0apNTl14Fox"
    },
    {
        "timestamp": "2025-08-23 20:35:42.000",
        "source": "frontend",
        "data": {
            "mapping_index": 6,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "Pga3qjBXFU5XK4N3QAji"
    },
    {
        "timestamp": "2025-08-23 20:35:42.000",
        "source": "frontend",
        "data": {
            "mapping_index": 0,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "RFzigWq8D1apoa36oZfd"
    },
    {
        "timestamp": "2025-08-23 20:35:42.000",
        "source": "frontend",
        "data": {
            "mapping_index": 4,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "ZcukDXLxepmNPh2I1It5"
    },
    {
        "timestamp": "2025-08-23 20:35:42.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "cBduGMQQMhJnFOg0ecPu"
    },
    {
        "timestamp": "2025-08-23 20:35:42.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "dhiPhUmMdgmSVRP313eL"
    },
    {
        "timestamp": "2025-08-23 20:35:42.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "emZWiJkjT4JVkvhJFYWv"
    },
    {
        "timestamp": "2025-08-23 20:35:42.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "fNjYshHBL3jZWWiDTTdp"
    },
    {
        "timestamp": "2025-08-23 20:35:42.000",
        "source": "frontend",
        "data": {
            "mapping_index": 5,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "i0ZEL6Vi9QiGaieOs1KH"
    },
    {
        "timestamp": "2025-08-23 20:35:42.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "nNkGfTYCWrmWm6Aoks6K"
    },
    {
        "timestamp": "2025-08-23 20:35:42.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "rcqxboRrF8QBVYNQkVI2"
    },
    {
        "timestamp": "2025-08-23 20:35:42.000",
        "source": "frontend",
        "data": {
            "mapping_index": 3,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "rnfp32syp2QGzqJyrHzr"
    },
    {
        "timestamp": "2025-08-23 20:35:42.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "sQQkfzu6eNknfVjGzuj0"
    },
    {
        "timestamp": "2025-08-23 20:35:42.000",
        "source": "frontend",
        "data": {
            "mapping_index": 4,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "tPEWkVjIDoRdKQ1uJzo6"
    },
    {
        "timestamp": "2025-08-23 20:35:42.000",
        "source": "frontend",
        "data": {
            "mapping_index": 6,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "uCvzejrsQxoiAbJsa7yE"
    },
    {
        "timestamp": "2025-08-23 20:35:43.000",
        "source": "frontend",
        "data": {
            "mapping_index": 4,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "1nubIfOWTWSw66vIBAkW"
    },
    {
        "timestamp": "2025-08-23 20:35:43.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "2wgiHuGpfIQ6NndFSYGw"
    },
    {
        "timestamp": "2025-08-23 20:35:43.000",
        "source": "frontend",
        "data": {
            "mapping_index": 1,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "4501Fc2l4Fxzas0cjyJd"
    },
    {
        "timestamp": "2025-08-23 20:35:43.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "9gWAXQRwtsnNxpjjxUq6"
    },
    {
        "timestamp": "2025-08-23 20:35:43.000",
        "source": "frontend",
        "data": {
            "mapping_index": 3,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "AtGzoXJY5avLgIw3x8yu"
    },
    {
        "timestamp": "2025-08-23 20:35:43.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "BFu9UJ1tvZGu5wUOZiBD"
    },
    {
        "timestamp": "2025-08-23 20:35:43.000",
        "source": "frontend",
        "data": {
            "mapping_index": 5,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "CD74Ir9axidphxTzypM1"
    },
    {
        "timestamp": "2025-08-23 20:35:43.000",
        "source": "frontend",
        "data": {
            "mapping_index": 6,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "CXgOrSFvdjRZyWzquzlc"
    },
    {
        "timestamp": "2025-08-23 20:35:43.000",
        "source": "frontend",
        "data": {
            "mapping_index": 2,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "EPZoOh4FukhlCybzNU7d"
    },
    {
        "timestamp": "2025-08-23 20:35:43.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "J6guE9nlmHDQf1xWRiDl"
    },
    {
        "timestamp": "2025-08-23 20:35:43.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "JVBo81hqzeUPXCaGaefz"
    },
    {
        "timestamp": "2025-08-23 20:35:43.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "NelbkTuT4bziCuM8xUo3"
    },
    {
        "timestamp": "2025-08-23 20:35:43.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "TgEJhVNJjOoZRSx0xnWH"
    },
    {
        "timestamp": "2025-08-23 20:35:43.000",
        "source": "frontend",
        "data": {
            "mapping_index": 0,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "YxV2Opc9UrWjTKJINxvx"
    },
    {
        "timestamp": "2025-08-23 20:35:43.000",
        "source": "frontend",
        "data": {
            "mapping_index": 3,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "ZXa9YdFd3dsJcpIT3GLw"
    },
    {
        "timestamp": "2025-08-23 20:35:43.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "aO4zZ1V1XGSgFFKE7Lgs"
    },
    {
        "timestamp": "2025-08-23 20:35:43.000",
        "source": "frontend",
        "data": {
            "mapping_index": 5,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "euh21Z3qjZ1oX1F8yI8f"
    },
    {
        "timestamp": "2025-08-23 20:35:43.000",
        "source": "frontend",
        "data": {
            "mapping_index": 0,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "fdrzaEKHE72EBbcd4p2T"
    },
    {
        "timestamp": "2025-08-23 20:35:43.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "fw7FZZ7Rv5YxViZcrqov"
    },
    {
        "timestamp": "2025-08-23 20:35:43.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "kb6sRxhv5TjTmvh0tAPu"
    },
    {
        "timestamp": "2025-08-23 20:35:43.000",
        "source": "frontend",
        "data": {
            "mapping_index": 1,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "lqYBtxZc9ya3ANMmiU8e"
    },
    {
        "timestamp": "2025-08-23 20:35:43.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "njz0Ob48phhgAk1D0w1j"
    },
    {
        "timestamp": "2025-08-23 20:35:43.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "nohfTnInkaayxF4KJdsE"
    },
    {
        "timestamp": "2025-08-23 20:35:43.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "qwdTKL2LwDHQZeI3Cz4W"
    },
    {
        "timestamp": "2025-08-23 20:35:43.000",
        "source": "frontend",
        "data": {
            "mapping_index": 6,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "riOhX0tznQXh7vI5oVlV"
    },
    {
        "timestamp": "2025-08-23 20:35:43.000",
        "source": "frontend",
        "data": {
            "mapping_index": 4,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "w2CtUVpQ7H6InckgbvAQ"
    },
    {
        "timestamp": "2025-08-23 20:35:52.000",
        "source": "frontend",
        "data": {
            "mapping_index": 6,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "ItHGrpjkajuaXClUueeJ"
    },
    {
        "timestamp": "2025-08-23 20:35:52.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "KmDHxxTgA9U4PwoMpuPr"
    },
    {
        "timestamp": "2025-08-23 20:35:52.000",
        "source": "frontend",
        "data": {
            "mapping_index": 4,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "NPuDlcSXkDV8VV16gv88"
    },
    {
        "timestamp": "2025-08-23 20:35:52.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "S0q14rRwfBaFlEWt4Pvz"
    },
    {
        "timestamp": "2025-08-23 20:35:52.000",
        "source": "frontend",
        "data": {
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "VWejl7j79scHIdS4zpcY"
    },
    {
        "timestamp": "2025-08-23 20:35:52.000",
        "source": "frontend",
        "data": {
            "mapping_index": 5,
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "zIG5xhyfT6vECstaxiQy"
    },
    {
        "timestamp": "2025-08-23 20:36:40.000",
        "source": "backend",
        "data": {
            "updated_summary": "This code implements a React component called StockChart that visualizes stock price data as a line chart using Recharts. It processes incoming data to extract dates and closing prices, and displays the chart with formatted month labels, a legend, and a tooltip. The component also shows the company name and ticker above the chart, and now visually highlights the most recent closing price with a labeled horizontal reference line. The broken (reference) line is displayed in red and does not have any label or characters on it.",
            "instruction": "I want the broken line in red. And I do not want any characters on the line",
            "original_code": "import React from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  ReferenceLine,\n} from \"recharts\";\n\nconst StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  // Function to format date as month (e.g., \"Jan\", \"Feb\") in English\n  const formatMonth = (dateString) => {\n    const date = new Date(dateString);\n    return date.toLocaleString(\"en\", { month: \"short\" });\n  };\n\n  // Get the latest closing price\n  const currentClose = chartData.length > 0 ? chartData[chartData.length - 1].price : null;\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatMonth} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n          {currentClose !== null && (\n            <ReferenceLine\n              y={currentClose}\n              stroke=\"#ff7300\"\n              strokeDasharray=\"5 5\"\n              label={{ value: \"Current Close\", position: \"right\", fill: \"#ff7300\" }}\n            />\n          )}\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;",
            "original_summary": "This code implements a React component called StockChart that visualizes stock price data as a line chart using Recharts. It processes incoming data to extract dates and closing prices, and displays the chart with formatted month labels, a legend, and a tooltip. The component also shows the company name and ticker above the chart, and now visually highlights the most recent closing price with a labeled horizontal reference line."
        },
        "event": "apply_instruction_summary",
        "id": "85YjNQowtI0n2wvhY2zb"
    },
    {
        "timestamp": "2025-08-23 20:36:46.000",
        "source": "frontend",
        "data": {
            "structured": "unstructured",
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "instruction": "I want the broken line in red. And I do not want any characters on the line",
            "original_summary": "This code implements a React component called StockChart that visualizes stock price data as a line chart using Recharts. It processes incoming data to extract dates and closing prices, and displays the chart with formatted month labels, a legend, and a tooltip. The component also shows the company name and ticker above the chart, and now visually highlights the most recent closing price with a labeled horizontal reference line.",
            "detail_level": "medium"
        },
        "event": "apply_instruction_summary",
        "id": "euFNL6EPkCoe9MTvhE24"
    },
    {
        "timestamp": "2025-08-23 20:36:46.000",
        "source": "backend",
        "data": {
            "updated_code": "import React from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  ReferenceLine,\n} from \"recharts\";\n\nconst StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  // Function to format date as month (e.g., \"Jan\", \"Feb\") in English\n  const formatMonth = (dateString) => {\n    const date = new Date(dateString);\n    return date.toLocaleString(\"en\", { month: \"short\" });\n  };\n\n  // Get the latest closing price\n  const currentClose = chartData.length > 0 ? chartData[chartData.length - 1].price : null;\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatMonth} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n          {currentClose !== null && (\n            <ReferenceLine\n              y={currentClose}\n              stroke=\"red\"\n              strokeDasharray=\"5 5\"\n            />\n          )}\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;",
            "edited_summary": "This code implements a React component called StockChart that visualizes stock price data as a line chart using Recharts. It processes incoming data to extract dates and closing prices, and displays the chart with formatted month labels, a legend, and a tooltip. The component also shows the company name and ticker above the chart, and now visually highlights the most recent closing price with a labeled horizontal reference line. The broken (reference) line is displayed in red and does not have any label or characters on it.",
            "structured_type": "unstructured",
            "original_code": "import React from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  ReferenceLine,\n} from \"recharts\";\n\nconst StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  // Function to format date as month (e.g., \"Jan\", \"Feb\") in English\n  const formatMonth = (dateString) => {\n    const date = new Date(dateString);\n    return date.toLocaleString(\"en\", { month: \"short\" });\n  };\n\n  // Get the latest closing price\n  const currentClose = chartData.length > 0 ? chartData[chartData.length - 1].price : null;\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatMonth} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n          {currentClose !== null && (\n            <ReferenceLine\n              y={currentClose}\n              stroke=\"#ff7300\"\n              strokeDasharray=\"5 5\"\n              label={{ value: \"Current Close\", position: \"right\", fill: \"#ff7300\" }}\n            />\n          )}\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;",
            "original_summary": "This code implements a React component called StockChart that visualizes stock price data as a line chart using Recharts. It processes incoming data to extract dates and closing prices, and displays the chart with formatted month labels, a legend, and a tooltip. The component also shows the company name and ticker above the chart, and now visually highlights the most recent closing price with a labeled horizontal reference line.",
            "detail_level": "medium"
        },
        "event": "modify_summary_mediation",
        "id": "hJuJjG1AEwyPLF7uCvFn"
    },
    {
        "timestamp": "2025-08-23 20:36:51.000",
        "source": "frontend",
        "data": {
            "structured": "unstructured",
            "section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "edited_summary": "This code implements a React component called StockChart that visualizes stock price data as a line chart using Recharts. It processes incoming data to extract dates and closing prices, and displays the chart with formatted month labels, a legend, and a tooltip. The component also shows the company name and ticker above the chart, and now visually highlights the most recent closing price with a labeled horizontal reference line. The broken (reference) line is displayed in red and does not have any label or characters on it.",
            "original_summary": "This code implements a React component called StockChart that visualizes stock price data as a line chart using Recharts. It processes incoming data to extract dates and closing prices, and displays the chart with formatted month labels, a legend, and a tooltip. The component also shows the company name and ticker above the chart, and now visually highlights the most recent closing price with a labeled horizontal reference line.",
            "detail_level": "medium"
        },
        "event": "commit_modified_summary",
        "id": "NCe4GjfGbEVc5lTCTqV0"
    },
    {
        "timestamp": "2025-08-23 20:36:52.000",
        "source": "backend",
        "data": {
            "new_summary": {
                "low_unstructured": "This code defines a React component that displays a stock price line chart using the Recharts library, now showing a horizontal reference line marking the latest closing price in red, but without a label.",
                "low_structured": "• React component for stock price chart\n• Uses Recharts for visualization\n• Displays company and ticker\n• Adds a horizontal red reference line at the latest closing price, now without a label",
                "medium_unstructured": "This code implements a React component called StockChart that visualizes stock price data as a line chart using Recharts. It processes incoming data to extract dates and closing prices, and displays the chart with formatted month labels, a legend, and a tooltip. The component also shows the company name and ticker above the chart, and now visually highlights the most recent closing price with a red horizontal reference line that is no longer labeled.",
                "high_structured": "• Implements the StockChart React component for displaying stock price trends\n• Validates input data to ensure it exists and contains entries\n• Extracts relevant information:\n  ◦ Company name and ticker from the data prop\n  ◦ Maps raw data to an array of objects with 'date' and 'price' fields\n• Provides helper functions:\n  ◦ formatDateString to trim date strings (though not directly used in rendering)\n  ◦ formatMonth to format X-axis labels as short month names\n• Renders the chart using Recharts components:\n  ◦ ResponsiveContainer ensures the chart scales to its parent\n  ◦ LineChart displays the data with a monotone line and no dots\n  ◦ XAxis uses formatted month labels, YAxis auto-scales\n  ◦ Tooltip and Legend enhance interactivity and readability\n  ◦ Adds a ReferenceLine at the latest closing price, now colored red and without a label\n• Displays the company name and ticker above the chart",
                "medium_structured": "• Defines a StockChart React component for visualizing stock data\n• Processes input data to extract dates and closing prices\n• Renders a line chart with:\n  ◦ X-axis labels formatted as months\n  ◦ Legend and tooltip for better readability\n  ◦ A horizontal red reference line marking the latest closing price, now without a label\n• Displays company name and ticker above the chart",
                "title": "StockChart React Component with Unlabeled Red Current Close Reference Line",
                "high_unstructured": "This code defines the StockChart React component, which takes a data prop containing stock information and renders a responsive line chart using the Recharts library. The component first checks for valid data, then extracts the company name, ticker, and formats the data into an array of objects with date and closing price. It includes helper functions to format dates and months for display, and configures the chart with a monotone line, formatted X-axis, auto-scaling Y-axis, tooltip, and legend. The chart is wrapped in a responsive container and is displayed with the company name and ticker above it. Additionally, the chart now features a horizontal ReferenceLine at the most recent closing price, which is colored red and no longer includes a \"Current Close\" label."
            },
            "original_code": "import React from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  ReferenceLine,\n} from \"recharts\";\n\nconst StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  // Function to format date as month (e.g., \"Jan\", \"Feb\") in English\n  const formatMonth = (dateString) => {\n    const date = new Date(dateString);\n    return date.toLocaleString(\"en\", { month: \"short\" });\n  };\n\n  // Get the latest closing price\n  const currentClose = chartData.length > 0 ? chartData[chartData.length - 1].price : null;\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatMonth} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n          {currentClose !== null && (\n            <ReferenceLine\n              y={currentClose}\n              stroke=\"red\"\n              strokeDasharray=\"5 5\"\n            />\n          )}\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;",
            "new_code": "import React from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  ReferenceLine,\n} from \"recharts\";\n\nconst StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  // Function to format date as month (e.g., \"Jan\", \"Feb\") in English\n  const formatMonth = (dateString) => {\n    const date = new Date(dateString);\n    return date.toLocaleString(\"en\", { month: \"short\" });\n  };\n\n  // Get the latest closing price\n  const currentClose = chartData.length > 0 ? chartData[chartData.length - 1].price : null;\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatMonth} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n          {currentClose !== null && (\n            <ReferenceLine\n              y={currentClose}\n              stroke=\"red\"\n              strokeDasharray=\"5 5\"\n            />\n          )}\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;",
            "old_summary": {
                "low_unstructured": "This code defines a React component that displays a stock price line chart using the Recharts library, now enhanced to include a horizontal reference line marking the latest closing price.",
                "low_structured": "• React component for stock price chart\n• Uses Recharts for visualization\n• Displays company and ticker\n• Adds a horizontal reference line at the latest closing price",
                "medium_unstructured": "This code implements a React component called StockChart that visualizes stock price data as a line chart using Recharts. It processes incoming data to extract dates and closing prices, and displays the chart with formatted month labels, a legend, and a tooltip. The component also shows the company name and ticker above the chart, and now visually highlights the most recent closing price with a labeled horizontal reference line.",
                "high_structured": "• Implements the StockChart React component for displaying stock price trends\n• Validates input data to ensure it exists and contains entries\n• Extracts relevant information:\n  ◦ Company name and ticker from the data prop\n  ◦ Maps raw data to an array of objects with 'date' and 'price' fields\n• Provides helper functions:\n  ◦ formatDateString to trim date strings (though not directly used in rendering)\n  ◦ formatMonth to format X-axis labels as short month names\n• Renders the chart using Recharts components:\n  ◦ ResponsiveContainer ensures the chart scales to its parent\n  ◦ LineChart displays the data with a monotone line and no dots\n  ◦ XAxis uses formatted month labels, YAxis auto-scales\n  ◦ Tooltip and Legend enhance interactivity and readability\n  ◦ Adds a ReferenceLine at the latest closing price, labeled as \"Current Close\"\n• Displays the company name and ticker above the chart",
                "medium_structured": "• Defines a StockChart React component for visualizing stock data\n• Processes input data to extract dates and closing prices\n• Renders a line chart with:\n  ◦ X-axis labels formatted as months\n  ◦ Legend and tooltip for better readability\n  ◦ A horizontal reference line marking the latest closing price\n• Displays company name and ticker above the chart",
                "title": "StockChart React Component with Highlighted Current Close Reference Line",
                "high_unstructured": "This code defines the StockChart React component, which takes a data prop containing stock information and renders a responsive line chart using the Recharts library. The component first checks for valid data, then extracts the company name, ticker, and formats the data into an array of objects with date and closing price. It includes helper functions to format dates and months for display, and configures the chart with a monotone line, formatted X-axis, auto-scaling Y-axis, tooltip, and legend. The chart is wrapped in a responsive container and is displayed with the company name and ticker above it. Additionally, the chart now features a horizontal ReferenceLine at the most recent closing price, visually labeled as \"Current Close\"."
            }
        },
        "event": "summarize_modified_code",
        "id": "QZbX77mcSkFzKZC8CTz5"
    },
    {
        "timestamp": "2025-08-23 20:36:54.000",
        "source": "backend",
        "data": {
            "summary": "• React component for stock price chart\n• Uses Recharts for visualization\n• Displays company and ticker\n• Adds a horizontal red reference line at the latest closing price, now without a label",
            "mapping": [
                {
                    "summaryComponent": "React component for stock price chart",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "Uses Recharts for visualization",
                    "codeSegments": [
                        {
                            "line": 2,
                            "code": "import {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  ReferenceLine,\n} from \"recharts\";"
                        },
                        {
                            "line": 43,
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                        },
                        {
                            "line": 44,
                            "code": "<LineChart"
                        }
                    ]
                },
                {
                    "summaryComponent": "Displays company and ticker",
                    "codeSegments": [
                        {
                            "line": 16,
                            "code": "const company = data.name;"
                        },
                        {
                            "line": 17,
                            "code": "const ticker = data.ticker;"
                        },
                        {
                            "line": 40,
                            "code": "<h3>"
                        },
                        {
                            "line": 41,
                            "code": "{company} ({ticker})"
                        }
                    ]
                },
                {
                    "summaryComponent": "Adds a horizontal red reference line at the latest closing price, now without a label",
                    "codeSegments": [
                        {
                            "line": 36,
                            "code": "const currentClose = chartData.length > 0 ? chartData[chartData.length - 1].price : null;"
                        },
                        {
                            "line": 53,
                            "code": "{currentClose !== null && ("
                        },
                        {
                            "line": 54,
                            "code": "<ReferenceLine"
                        },
                        {
                            "line": 55,
                            "code": "y={currentClose}"
                        },
                        {
                            "line": 56,
                            "code": "stroke=\"red\""
                        }
                    ]
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));\n28: \n29:   // Function to format date as month (e.g., \"Jan\", \"Feb\") in English\n30:   const formatMonth = (dateString) => {\n31:     const date = new Date(dateString);\n32:     return date.toLocaleString(\"en\", { month: \"short\" });\n33:   };\n34: \n35:   // Get the latest closing price\n36:   const currentClose = chartData.length > 0 ? chartData[chartData.length - 1].price : null;\n37: \n38:   return (\n39:     <div style={{ marginTop: \"2rem\" }}>\n40:       <h3>\n41:         {company} ({ticker})\n42:       </h3>\n43:       <ResponsiveContainer width=\"100%\" height={300}>\n44:         <LineChart\n45:           data={chartData}\n46:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n47:         >\n48:           <XAxis dataKey=\"date\" tickFormatter={formatMonth} />\n49:           <YAxis domain={[\"auto\", \"auto\"]} />\n50:           <Tooltip />\n51:           <Legend />\n52:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n53:           {currentClose !== null && (\n54:             <ReferenceLine\n55:               y={currentClose}\n56:               stroke=\"red\"\n57:               strokeDasharray=\"5 5\"\n58:             />\n59:           )}\n60:         </LineChart>\n61:       </ResponsiveContainer>\n62:     </div>\n63:   );\n64: };\n65: \n66: export default StockChart;"
        },
        "event": "map_summary_code",
        "id": "laG0GhZTw7kQEFvw0pqX"
    },
    {
        "timestamp": "2025-08-23 20:36:55.000",
        "source": "backend",
        "data": {
            "summary": "• Defines a StockChart React component for visualizing stock data\n• Processes input data to extract dates and closing prices\n• Renders a line chart with:\n  ◦ X-axis labels formatted as months\n  ◦ Legend and tooltip for better readability\n  ◦ A horizontal red reference line marking the latest closing price, now without a label\n• Displays company name and ticker above the chart",
            "mapping": [
                {
                    "summaryComponent": "Defines a StockChart React component for visualizing stock data",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        },
                        {
                            "line": 66,
                            "code": "export default StockChart;"
                        }
                    ]
                },
                {
                    "summaryComponent": "Processes input data to extract dates and closing prices",
                    "codeSegments": [
                        {
                            "line": 24,
                            "code": "const chartData = data.data.map((item) => ({"
                        },
                        {
                            "line": 25,
                            "code": "date: item.date,"
                        },
                        {
                            "line": 26,
                            "code": "price: item.close,"
                        }
                    ]
                },
                {
                    "summaryComponent": "Renders a line chart with:",
                    "codeSegments": [
                        {
                            "line": 44,
                            "code": "<LineChart"
                        }
                    ]
                },
                {
                    "summaryComponent": "X-axis labels formatted as months",
                    "codeSegments": [
                        {
                            "line": 48,
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatMonth} />"
                        },
                        {
                            "line": 30,
                            "code": "const formatMonth = (dateString) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "Legend and tooltip for better readability",
                    "codeSegments": [
                        {
                            "line": 50,
                            "code": "<Tooltip />"
                        },
                        {
                            "line": 51,
                            "code": "<Legend />"
                        }
                    ]
                },
                {
                    "summaryComponent": "A horizontal red reference line marking the latest closing price, now without a label",
                    "codeSegments": [
                        {
                            "line": 54,
                            "code": "<ReferenceLine"
                        },
                        {
                            "line": 55,
                            "code": "y={currentClose}"
                        },
                        {
                            "line": 56,
                            "code": "stroke=\"red\""
                        }
                    ]
                },
                {
                    "summaryComponent": "Displays company name and ticker above the chart",
                    "codeSegments": [
                        {
                            "line": 40,
                            "code": "<h3>"
                        },
                        {
                            "line": 41,
                            "code": "{company} ({ticker})"
                        }
                    ]
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));\n28: \n29:   // Function to format date as month (e.g., \"Jan\", \"Feb\") in English\n30:   const formatMonth = (dateString) => {\n31:     const date = new Date(dateString);\n32:     return date.toLocaleString(\"en\", { month: \"short\" });\n33:   };\n34: \n35:   // Get the latest closing price\n36:   const currentClose = chartData.length > 0 ? chartData[chartData.length - 1].price : null;\n37: \n38:   return (\n39:     <div style={{ marginTop: \"2rem\" }}>\n40:       <h3>\n41:         {company} ({ticker})\n42:       </h3>\n43:       <ResponsiveContainer width=\"100%\" height={300}>\n44:         <LineChart\n45:           data={chartData}\n46:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n47:         >\n48:           <XAxis dataKey=\"date\" tickFormatter={formatMonth} />\n49:           <YAxis domain={[\"auto\", \"auto\"]} />\n50:           <Tooltip />\n51:           <Legend />\n52:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n53:           {currentClose !== null && (\n54:             <ReferenceLine\n55:               y={currentClose}\n56:               stroke=\"red\"\n57:               strokeDasharray=\"5 5\"\n58:             />\n59:           )}\n60:         </LineChart>\n61:       </ResponsiveContainer>\n62:     </div>\n63:   );\n64: };\n65: \n66: export default StockChart;"
        },
        "event": "map_summary_code",
        "id": "98yuggPUIWV9W6lteEOz"
    },
    {
        "timestamp": "2025-08-23 20:36:55.000",
        "source": "backend",
        "data": {
            "summary": "This code defines a React component that displays a stock price line chart using the Recharts library, now showing a horizontal reference line marking the latest closing price in red, but without a label.",
            "mapping": [
                {
                    "summaryComponent": "defines a React component",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "displays a stock price line chart",
                    "codeSegments": [
                        {
                            "line": 44,
                            "code": "<LineChart"
                        },
                        {
                            "line": 52,
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                        }
                    ]
                },
                {
                    "summaryComponent": "using the Recharts library",
                    "codeSegments": [
                        {
                            "line": 2,
                            "code": "import {"
                        },
                        {
                            "line": 3,
                            "code": "LineChart,"
                        },
                        {
                            "line": 4,
                            "code": "Line,"
                        },
                        {
                            "line": 5,
                            "code": "XAxis,"
                        },
                        {
                            "line": 6,
                            "code": "YAxis,"
                        },
                        {
                            "line": 7,
                            "code": "Tooltip,"
                        },
                        {
                            "line": 8,
                            "code": "Legend,"
                        },
                        {
                            "line": 9,
                            "code": "ResponsiveContainer,"
                        },
                        {
                            "line": 10,
                            "code": "ReferenceLine,"
                        },
                        {
                            "line": 11,
                            "code": "} from \"recharts\";"
                        }
                    ]
                },
                {
                    "summaryComponent": "now showing a horizontal reference line",
                    "codeSegments": [
                        {
                            "line": 54,
                            "code": "<ReferenceLine"
                        }
                    ]
                },
                {
                    "summaryComponent": "marking the latest closing price",
                    "codeSegments": [
                        {
                            "line": 36,
                            "code": "const currentClose = chartData.length > 0 ? chartData[chartData.length - 1].price : null;"
                        },
                        {
                            "line": 55,
                            "code": "y={currentClose}"
                        }
                    ]
                },
                {
                    "summaryComponent": "in red",
                    "codeSegments": [
                        {
                            "line": 56,
                            "code": "stroke=\"red\""
                        }
                    ]
                },
                {
                    "summaryComponent": "but without a label",
                    "codeSegments": [
                        {
                            "line": 54,
                            "code": "<ReferenceLine"
                        }
                    ]
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));\n28: \n29:   // Function to format date as month (e.g., \"Jan\", \"Feb\") in English\n30:   const formatMonth = (dateString) => {\n31:     const date = new Date(dateString);\n32:     return date.toLocaleString(\"en\", { month: \"short\" });\n33:   };\n34: \n35:   // Get the latest closing price\n36:   const currentClose = chartData.length > 0 ? chartData[chartData.length - 1].price : null;\n37: \n38:   return (\n39:     <div style={{ marginTop: \"2rem\" }}>\n40:       <h3>\n41:         {company} ({ticker})\n42:       </h3>\n43:       <ResponsiveContainer width=\"100%\" height={300}>\n44:         <LineChart\n45:           data={chartData}\n46:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n47:         >\n48:           <XAxis dataKey=\"date\" tickFormatter={formatMonth} />\n49:           <YAxis domain={[\"auto\", \"auto\"]} />\n50:           <Tooltip />\n51:           <Legend />\n52:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n53:           {currentClose !== null && (\n54:             <ReferenceLine\n55:               y={currentClose}\n56:               stroke=\"red\"\n57:               strokeDasharray=\"5 5\"\n58:             />\n59:           )}\n60:         </LineChart>\n61:       </ResponsiveContainer>\n62:     </div>\n63:   );\n64: };\n65: \n66: export default StockChart;"
        },
        "event": "map_summary_code",
        "id": "F4k1NvZ9KwuyyDAoMZrT"
    },
    {
        "timestamp": "2025-08-23 20:36:55.000",
        "source": "backend",
        "data": {
            "summary": "This code implements a React component called StockChart that visualizes stock price data as a line chart using Recharts. It processes incoming data to extract dates and closing prices, and displays the chart with formatted month labels, a legend, and a tooltip. The component also shows the company name and ticker above the chart, and now visually highlights the most recent closing price with a red horizontal reference line that is no longer labeled.",
            "mapping": [
                {
                    "summaryComponent": "implements a React component called StockChart",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "visualizes stock price data as a line chart using Recharts",
                    "codeSegments": [
                        {
                            "line": 44,
                            "code": "<LineChart"
                        },
                        {
                            "line": 2,
                            "code": "import {"
                        },
                        {
                            "line": 3,
                            "code": "LineChart,"
                        }
                    ]
                },
                {
                    "summaryComponent": "processes incoming data to extract dates and closing prices",
                    "codeSegments": [
                        {
                            "line": 24,
                            "code": "const chartData = data.data.map((item) => ({"
                        },
                        {
                            "line": 25,
                            "code": "date: item.date,"
                        },
                        {
                            "line": 26,
                            "code": "price: item.close,"
                        }
                    ]
                },
                {
                    "summaryComponent": "displays the chart with formatted month labels",
                    "codeSegments": [
                        {
                            "line": 48,
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatMonth} />"
                        },
                        {
                            "line": 30,
                            "code": "const formatMonth = (dateString) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "a legend",
                    "codeSegments": [
                        {
                            "line": 51,
                            "code": "<Legend />"
                        }
                    ]
                },
                {
                    "summaryComponent": "and a tooltip",
                    "codeSegments": [
                        {
                            "line": 50,
                            "code": "<Tooltip />"
                        }
                    ]
                },
                {
                    "summaryComponent": "shows the company name and ticker above the chart",
                    "codeSegments": [
                        {
                            "line": 40,
                            "code": "<h3>"
                        },
                        {
                            "line": 41,
                            "code": "{company} ({ticker})"
                        }
                    ]
                },
                {
                    "summaryComponent": "visually highlights the most recent closing price with a red horizontal reference line",
                    "codeSegments": [
                        {
                            "line": 53,
                            "code": "{currentClose !== null && ("
                        },
                        {
                            "line": 54,
                            "code": "<ReferenceLine"
                        },
                        {
                            "line": 55,
                            "code": "y={currentClose}"
                        },
                        {
                            "line": 56,
                            "code": "stroke=\"red\""
                        }
                    ]
                },
                {
                    "summaryComponent": "that is no longer labeled",
                    "codeSegments": [
                        {
                            "line": 54,
                            "code": "<ReferenceLine"
                        }
                    ]
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));\n28: \n29:   // Function to format date as month (e.g., \"Jan\", \"Feb\") in English\n30:   const formatMonth = (dateString) => {\n31:     const date = new Date(dateString);\n32:     return date.toLocaleString(\"en\", { month: \"short\" });\n33:   };\n34: \n35:   // Get the latest closing price\n36:   const currentClose = chartData.length > 0 ? chartData[chartData.length - 1].price : null;\n37: \n38:   return (\n39:     <div style={{ marginTop: \"2rem\" }}>\n40:       <h3>\n41:         {company} ({ticker})\n42:       </h3>\n43:       <ResponsiveContainer width=\"100%\" height={300}>\n44:         <LineChart\n45:           data={chartData}\n46:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n47:         >\n48:           <XAxis dataKey=\"date\" tickFormatter={formatMonth} />\n49:           <YAxis domain={[\"auto\", \"auto\"]} />\n50:           <Tooltip />\n51:           <Legend />\n52:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n53:           {currentClose !== null && (\n54:             <ReferenceLine\n55:               y={currentClose}\n56:               stroke=\"red\"\n57:               strokeDasharray=\"5 5\"\n58:             />\n59:           )}\n60:         </LineChart>\n61:       </ResponsiveContainer>\n62:     </div>\n63:   );\n64: };\n65: \n66: export default StockChart;"
        },
        "event": "map_summary_code",
        "id": "mCnDeUYstEb9uLd0IaQT"
    },
    {
        "timestamp": "2025-08-23 20:36:57.000",
        "source": "backend",
        "data": {
            "summary": "• Implements the StockChart React component for displaying stock price trends\n• Validates input data to ensure it exists and contains entries\n• Extracts relevant information:\n  ◦ Company name and ticker from the data prop\n  ◦ Maps raw data to an array of objects with 'date' and 'price' fields\n• Provides helper functions:\n  ◦ formatDateString to trim date strings (though not directly used in rendering)\n  ◦ formatMonth to format X-axis labels as short month names\n• Renders the chart using Recharts components:\n  ◦ ResponsiveContainer ensures the chart scales to its parent\n  ◦ LineChart displays the data with a monotone line and no dots\n  ◦ XAxis uses formatted month labels, YAxis auto-scales\n  ◦ Tooltip and Legend enhance interactivity and readability\n  ◦ Adds a ReferenceLine at the latest closing price, now colored red and without a label\n• Displays the company name and ticker above the chart",
            "mapping": [
                {
                    "summaryComponent": "Implements the StockChart React component for displaying stock price trends",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "Validates input data to ensure it exists and contains entries",
                    "codeSegments": [
                        {
                            "line": 14,
                            "code": "if (!data || !data.data || !data.data.length) return null;"
                        }
                    ]
                },
                {
                    "summaryComponent": "Company name and ticker from the data prop",
                    "codeSegments": [
                        {
                            "line": 16,
                            "code": "const company = data.name;"
                        },
                        {
                            "line": 17,
                            "code": "const ticker = data.ticker;"
                        }
                    ]
                },
                {
                    "summaryComponent": "Maps raw data to an array of objects with 'date' and 'price' fields",
                    "codeSegments": [
                        {
                            "line": 24,
                            "code": "const chartData = data.data.map((item) => ({"
                        },
                        {
                            "line": 25,
                            "code": "date: item.date,"
                        },
                        {
                            "line": 26,
                            "code": "price: item.close,"
                        }
                    ]
                },
                {
                    "summaryComponent": "formatDateString to trim date strings (though not directly used in rendering)",
                    "codeSegments": [
                        {
                            "line": 19,
                            "code": "const formatDateString = (date) => {"
                        },
                        {
                            "line": 20,
                            "code": "return date.split(\"T\")[0];"
                        }
                    ]
                },
                {
                    "summaryComponent": "formatMonth to format X-axis labels as short month names",
                    "codeSegments": [
                        {
                            "line": 30,
                            "code": "const formatMonth = (dateString) => {"
                        },
                        {
                            "line": 32,
                            "code": "return date.toLocaleString(\"en\", { month: \"short\" });"
                        }
                    ]
                },
                {
                    "summaryComponent": "ResponsiveContainer ensures the chart scales to its parent",
                    "codeSegments": [
                        {
                            "line": 43,
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                        }
                    ]
                },
                {
                    "summaryComponent": "LineChart displays the data with a monotone line and no dots",
                    "codeSegments": [
                        {
                            "line": 44,
                            "code": "<LineChart"
                        },
                        {
                            "line": 52,
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                        }
                    ]
                },
                {
                    "summaryComponent": "XAxis uses formatted month labels, YAxis auto-scales",
                    "codeSegments": [
                        {
                            "line": 48,
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatMonth} />"
                        },
                        {
                            "line": 49,
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                        }
                    ]
                },
                {
                    "summaryComponent": "Tooltip and Legend enhance interactivity and readability",
                    "codeSegments": [
                        {
                            "line": 50,
                            "code": "<Tooltip />"
                        },
                        {
                            "line": 51,
                            "code": "<Legend />"
                        }
                    ]
                },
                {
                    "summaryComponent": "Adds a ReferenceLine at the latest closing price, now colored red and without a label",
                    "codeSegments": [
                        {
                            "line": 53,
                            "code": "{currentClose !== null && ("
                        },
                        {
                            "line": 54,
                            "code": "<ReferenceLine"
                        },
                        {
                            "line": 55,
                            "code": "y={currentClose}"
                        },
                        {
                            "line": 56,
                            "code": "stroke=\"red\""
                        }
                    ]
                },
                {
                    "summaryComponent": "Displays the company name and ticker above the chart",
                    "codeSegments": [
                        {
                            "line": 40,
                            "code": "<h3>"
                        },
                        {
                            "line": 41,
                            "code": "{company} ({ticker})"
                        }
                    ]
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));\n28: \n29:   // Function to format date as month (e.g., \"Jan\", \"Feb\") in English\n30:   const formatMonth = (dateString) => {\n31:     const date = new Date(dateString);\n32:     return date.toLocaleString(\"en\", { month: \"short\" });\n33:   };\n34: \n35:   // Get the latest closing price\n36:   const currentClose = chartData.length > 0 ? chartData[chartData.length - 1].price : null;\n37: \n38:   return (\n39:     <div style={{ marginTop: \"2rem\" }}>\n40:       <h3>\n41:         {company} ({ticker})\n42:       </h3>\n43:       <ResponsiveContainer width=\"100%\" height={300}>\n44:         <LineChart\n45:           data={chartData}\n46:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n47:         >\n48:           <XAxis dataKey=\"date\" tickFormatter={formatMonth} />\n49:           <YAxis domain={[\"auto\", \"auto\"]} />\n50:           <Tooltip />\n51:           <Legend />\n52:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n53:           {currentClose !== null && (\n54:             <ReferenceLine\n55:               y={currentClose}\n56:               stroke=\"red\"\n57:               strokeDasharray=\"5 5\"\n58:             />\n59:           )}\n60:         </LineChart>\n61:       </ResponsiveContainer>\n62:     </div>\n63:   );\n64: };\n65: \n66: export default StockChart;"
        },
        "event": "map_summary_code",
        "id": "GxNUHHU4RhfnvyCRPvdK"
    },
    {
        "timestamp": "2025-08-23 20:36:57.000",
        "source": "backend",
        "data": {
            "summary": "This code defines the StockChart React component, which takes a data prop containing stock information and renders a responsive line chart using the Recharts library. The component first checks for valid data, then extracts the company name, ticker, and formats the data into an array of objects with date and closing price. It includes helper functions to format dates and months for display, and configures the chart with a monotone line, formatted X-axis, auto-scaling Y-axis, tooltip, and legend. The chart is wrapped in a responsive container and is displayed with the company name and ticker above it. Additionally, the chart now features a horizontal ReferenceLine at the most recent closing price, which is colored red and no longer includes a \"Current Close\" label.",
            "mapping": [
                {
                    "summaryComponent": "defines the StockChart React component",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "takes a data prop containing stock information",
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "renders a responsive line chart using the Recharts library",
                    "codeSegments": [
                        {
                            "line": 43,
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                        },
                        {
                            "line": 44,
                            "code": "<LineChart"
                        }
                    ]
                },
                {
                    "summaryComponent": "checks for valid data",
                    "codeSegments": [
                        {
                            "line": 14,
                            "code": "if (!data || !data.data || !data.data.length) return null;"
                        }
                    ]
                },
                {
                    "summaryComponent": "extracts the company name, ticker",
                    "codeSegments": [
                        {
                            "line": 16,
                            "code": "const company = data.name;"
                        },
                        {
                            "line": 17,
                            "code": "const ticker = data.ticker;"
                        }
                    ]
                },
                {
                    "summaryComponent": "formats the data into an array of objects with date and closing price",
                    "codeSegments": [
                        {
                            "line": 24,
                            "code": "const chartData = data.data.map((item) => ({"
                        },
                        {
                            "line": 25,
                            "code": "date: item.date,"
                        },
                        {
                            "line": 26,
                            "code": "price: item.close,"
                        }
                    ]
                },
                {
                    "summaryComponent": "includes helper functions to format dates and months for display",
                    "codeSegments": [
                        {
                            "line": 19,
                            "code": "const formatDateString = (date) => {"
                        },
                        {
                            "line": 30,
                            "code": "const formatMonth = (dateString) => {"
                        }
                    ]
                },
                {
                    "summaryComponent": "configures the chart with a monotone line, formatted X-axis, auto-scaling Y-axis, tooltip, and legend",
                    "codeSegments": [
                        {
                            "line": 52,
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                        },
                        {
                            "line": 48,
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatMonth} />"
                        },
                        {
                            "line": 49,
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                        },
                        {
                            "line": 50,
                            "code": "<Tooltip />"
                        },
                        {
                            "line": 51,
                            "code": "<Legend />"
                        }
                    ]
                },
                {
                    "summaryComponent": "chart is wrapped in a responsive container and is displayed with the company name and ticker above it",
                    "codeSegments": [
                        {
                            "line": 39,
                            "code": "<div style={{ marginTop: \"2rem\" }}>"
                        },
                        {
                            "line": 40,
                            "code": "<h3>"
                        },
                        {
                            "line": 41,
                            "code": "{company} ({ticker})"
                        },
                        {
                            "line": 42,
                            "code": "</h3>"
                        },
                        {
                            "line": 43,
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                        }
                    ]
                },
                {
                    "summaryComponent": "features a horizontal ReferenceLine at the most recent closing price, which is colored red and no longer includes a \"Current Close\" label",
                    "codeSegments": [
                        {
                            "line": 36,
                            "code": "const currentClose = chartData.length > 0 ? chartData[chartData.length - 1].price : null;"
                        },
                        {
                            "line": 53,
                            "code": "{currentClose !== null && ("
                        },
                        {
                            "line": 54,
                            "code": "<ReferenceLine"
                        },
                        {
                            "line": 55,
                            "code": "y={currentClose}"
                        },
                        {
                            "line": 56,
                            "code": "stroke=\"red\""
                        }
                    ]
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));\n28: \n29:   // Function to format date as month (e.g., \"Jan\", \"Feb\") in English\n30:   const formatMonth = (dateString) => {\n31:     const date = new Date(dateString);\n32:     return date.toLocaleString(\"en\", { month: \"short\" });\n33:   };\n34: \n35:   // Get the latest closing price\n36:   const currentClose = chartData.length > 0 ? chartData[chartData.length - 1].price : null;\n37: \n38:   return (\n39:     <div style={{ marginTop: \"2rem\" }}>\n40:       <h3>\n41:         {company} ({ticker})\n42:       </h3>\n43:       <ResponsiveContainer width=\"100%\" height={300}>\n44:         <LineChart\n45:           data={chartData}\n46:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n47:         >\n48:           <XAxis dataKey=\"date\" tickFormatter={formatMonth} />\n49:           <YAxis domain={[\"auto\", \"auto\"]} />\n50:           <Tooltip />\n51:           <Legend />\n52:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n53:           {currentClose !== null && (\n54:             <ReferenceLine\n55:               y={currentClose}\n56:               stroke=\"red\"\n57:               strokeDasharray=\"5 5\"\n58:             />\n59:           )}\n60:         </LineChart>\n61:       </ResponsiveContainer>\n62:     </div>\n63:   );\n64: };\n65: \n66: export default StockChart;"
        },
        "event": "map_summary_code",
        "id": "MbwgMmYPc6JIhoLLUiDa"
    },
    {
        "timestamp": "2025-08-23 20:37:05.000",
        "source": "frontend",
        "data": {
            "section_id": "8ac26ede-6f12-41f6-abff-e7646de7e629",
            "section_data": {
                "summaryData": {
                    "low_unstructured": "This code defines a React component that displays a stock price line chart using the Recharts library, now showing a horizontal reference line marking the latest closing price in red, but without a label.",
                    "low_structured": "• React component for stock price chart\n• Uses Recharts for visualization\n• Displays company and ticker\n• Adds a horizontal red reference line at the latest closing price, now without a label",
                    "medium_unstructured": "This code implements a React component called StockChart that visualizes stock price data as a line chart using Recharts. It processes incoming data to extract dates and closing prices, and displays the chart with formatted month labels, a legend, and a tooltip. The component also shows the company name and ticker above the chart, and now visually highlights the most recent closing price with a red horizontal reference line that is no longer labeled.",
                    "high_structured": "• Implements the StockChart React component for displaying stock price trends\n• Validates input data to ensure it exists and contains entries\n• Extracts relevant information:\n  ◦ Company name and ticker from the data prop\n  ◦ Maps raw data to an array of objects with 'date' and 'price' fields\n• Provides helper functions:\n  ◦ formatDateString to trim date strings (though not directly used in rendering)\n  ◦ formatMonth to format X-axis labels as short month names\n• Renders the chart using Recharts components:\n  ◦ ResponsiveContainer ensures the chart scales to its parent\n  ◦ LineChart displays the data with a monotone line and no dots\n  ◦ XAxis uses formatted month labels, YAxis auto-scales\n  ◦ Tooltip and Legend enhance interactivity and readability\n  ◦ Adds a ReferenceLine at the latest closing price, now colored red and without a label\n• Displays the company name and ticker above the chart",
                    "medium_structured": "• Defines a StockChart React component for visualizing stock data\n• Processes input data to extract dates and closing prices\n• Renders a line chart with:\n  ◦ X-axis labels formatted as months\n  ◦ Legend and tooltip for better readability\n  ◦ A horizontal red reference line marking the latest closing price, now without a label\n• Displays company name and ticker above the chart",
                    "title": "StockChart React Component with Unlabeled Red Current Close Reference Line",
                    "high_unstructured": "This code defines the StockChart React component, which takes a data prop containing stock information and renders a responsive line chart using the Recharts library. The component first checks for valid data, then extracts the company name, ticker, and formats the data into an array of objects with date and closing price. It includes helper functions to format dates and months for display, and configures the chart with a monotone line, formatted X-axis, auto-scaling Y-axis, tooltip, and legend. The chart is wrapped in a responsive container and is displayed with the company name and ticker above it. Additionally, the chart now features a horizontal ReferenceLine at the most recent closing price, which is colored red and no longer includes a \"Current Close\" label."
                },
                "metadata": {
                    "offset": 0,
                    "fullPath": "/project/workspace/frontend/src/StockChart.jsx",
                    "id": "8ac26ede-6f12-41f6-abff-e7646de7e629",
                    "filename": "StockChart.jsx",
                    "originalCode": "import React from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  ReferenceLine,\n} from \"recharts\";\n\nconst StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  // Function to format date as month (e.g., \"Jan\", \"Feb\") in English\n  const formatMonth = (dateString) => {\n    const date = new Date(dateString);\n    return date.toLocaleString(\"en\", { month: \"short\" });\n  };\n\n  // Get the latest closing price\n  const currentClose = chartData.length > 0 ? chartData[chartData.length - 1].price : null;\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatMonth} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n          {currentClose !== null && (\n            <ReferenceLine\n              y={currentClose}\n              stroke=\"red\"\n              strokeDasharray=\"5 5\"\n            />\n          )}\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;"
                },
                "createdAt": 1755967017000,
                "selectedStructured": "unstructured",
                "editPromptDetailLevel": null,
                "editPromptStructured": null,
                "lines": [
                    1,
                    66
                ],
                "summaryMappings": {
                    "low_unstructured": [
                        {
                            "summaryComponent": "defines a React component",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "displays a stock price line chart",
                            "codeSegments": [
                                {
                                    "line": 44,
                                    "code": "<LineChart"
                                },
                                {
                                    "line": 52,
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "using the Recharts library",
                            "codeSegments": [
                                {
                                    "line": 2,
                                    "code": "import {"
                                },
                                {
                                    "line": 3,
                                    "code": "LineChart,"
                                },
                                {
                                    "line": 4,
                                    "code": "Line,"
                                },
                                {
                                    "line": 5,
                                    "code": "XAxis,"
                                },
                                {
                                    "line": 6,
                                    "code": "YAxis,"
                                },
                                {
                                    "line": 7,
                                    "code": "Tooltip,"
                                },
                                {
                                    "line": 8,
                                    "code": "Legend,"
                                },
                                {
                                    "line": 9,
                                    "code": "ResponsiveContainer,"
                                },
                                {
                                    "line": 10,
                                    "code": "ReferenceLine,"
                                },
                                {
                                    "line": 11,
                                    "code": "} from \"recharts\";"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "now showing a horizontal reference line",
                            "codeSegments": [
                                {
                                    "line": 54,
                                    "code": "<ReferenceLine"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "marking the latest closing price",
                            "codeSegments": [
                                {
                                    "line": 36,
                                    "code": "const currentClose = chartData.length > 0 ? chartData[chartData.length - 1].price : null;"
                                },
                                {
                                    "line": 55,
                                    "code": "y={currentClose}"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "in red",
                            "codeSegments": [
                                {
                                    "line": 56,
                                    "code": "stroke=\"red\""
                                }
                            ]
                        },
                        {
                            "summaryComponent": "but without a label",
                            "codeSegments": [
                                {
                                    "line": 54,
                                    "code": "<ReferenceLine"
                                }
                            ]
                        }
                    ],
                    "low_structured": [
                        {
                            "summaryComponent": "React component for stock price chart",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Uses Recharts for visualization",
                            "codeSegments": [
                                {
                                    "line": 2,
                                    "code": "import {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  ReferenceLine,\n} from \"recharts\";"
                                },
                                {
                                    "line": 43,
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                                },
                                {
                                    "line": 44,
                                    "code": "<LineChart"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Displays company and ticker",
                            "codeSegments": [
                                {
                                    "line": 16,
                                    "code": "const company = data.name;"
                                },
                                {
                                    "line": 17,
                                    "code": "const ticker = data.ticker;"
                                },
                                {
                                    "line": 40,
                                    "code": "<h3>"
                                },
                                {
                                    "line": 41,
                                    "code": "{company} ({ticker})"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Adds a horizontal red reference line at the latest closing price, now without a label",
                            "codeSegments": [
                                {
                                    "line": 36,
                                    "code": "const currentClose = chartData.length > 0 ? chartData[chartData.length - 1].price : null;"
                                },
                                {
                                    "line": 53,
                                    "code": "{currentClose !== null && ("
                                },
                                {
                                    "line": 54,
                                    "code": "<ReferenceLine"
                                },
                                {
                                    "line": 55,
                                    "code": "y={currentClose}"
                                },
                                {
                                    "line": 56,
                                    "code": "stroke=\"red\""
                                }
                            ]
                        }
                    ],
                    "medium_unstructured": [
                        {
                            "summaryComponent": "implements a React component called StockChart",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "visualizes stock price data as a line chart using Recharts",
                            "codeSegments": [
                                {
                                    "line": 44,
                                    "code": "<LineChart"
                                },
                                {
                                    "line": 2,
                                    "code": "import {"
                                },
                                {
                                    "line": 3,
                                    "code": "LineChart,"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "processes incoming data to extract dates and closing prices",
                            "codeSegments": [
                                {
                                    "line": 24,
                                    "code": "const chartData = data.data.map((item) => ({"
                                },
                                {
                                    "line": 25,
                                    "code": "date: item.date,"
                                },
                                {
                                    "line": 26,
                                    "code": "price: item.close,"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "displays the chart with formatted month labels",
                            "codeSegments": [
                                {
                                    "line": 48,
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatMonth} />"
                                },
                                {
                                    "line": 30,
                                    "code": "const formatMonth = (dateString) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "a legend",
                            "codeSegments": [
                                {
                                    "line": 51,
                                    "code": "<Legend />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "and a tooltip",
                            "codeSegments": [
                                {
                                    "line": 50,
                                    "code": "<Tooltip />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "shows the company name and ticker above the chart",
                            "codeSegments": [
                                {
                                    "line": 40,
                                    "code": "<h3>"
                                },
                                {
                                    "line": 41,
                                    "code": "{company} ({ticker})"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "visually highlights the most recent closing price with a red horizontal reference line",
                            "codeSegments": [
                                {
                                    "line": 53,
                                    "code": "{currentClose !== null && ("
                                },
                                {
                                    "line": 54,
                                    "code": "<ReferenceLine"
                                },
                                {
                                    "line": 55,
                                    "code": "y={currentClose}"
                                },
                                {
                                    "line": 56,
                                    "code": "stroke=\"red\""
                                }
                            ]
                        },
                        {
                            "summaryComponent": "that is no longer labeled",
                            "codeSegments": [
                                {
                                    "line": 54,
                                    "code": "<ReferenceLine"
                                }
                            ]
                        }
                    ],
                    "high_structured": [
                        {
                            "summaryComponent": "Implements the StockChart React component for displaying stock price trends",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Validates input data to ensure it exists and contains entries",
                            "codeSegments": [
                                {
                                    "line": 14,
                                    "code": "if (!data || !data.data || !data.data.length) return null;"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Company name and ticker from the data prop",
                            "codeSegments": [
                                {
                                    "line": 16,
                                    "code": "const company = data.name;"
                                },
                                {
                                    "line": 17,
                                    "code": "const ticker = data.ticker;"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Maps raw data to an array of objects with 'date' and 'price' fields",
                            "codeSegments": [
                                {
                                    "line": 24,
                                    "code": "const chartData = data.data.map((item) => ({"
                                },
                                {
                                    "line": 25,
                                    "code": "date: item.date,"
                                },
                                {
                                    "line": 26,
                                    "code": "price: item.close,"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "formatDateString to trim date strings (though not directly used in rendering)",
                            "codeSegments": [
                                {
                                    "line": 19,
                                    "code": "const formatDateString = (date) => {"
                                },
                                {
                                    "line": 20,
                                    "code": "return date.split(\"T\")[0];"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "formatMonth to format X-axis labels as short month names",
                            "codeSegments": [
                                {
                                    "line": 30,
                                    "code": "const formatMonth = (dateString) => {"
                                },
                                {
                                    "line": 32,
                                    "code": "return date.toLocaleString(\"en\", { month: \"short\" });"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "ResponsiveContainer ensures the chart scales to its parent",
                            "codeSegments": [
                                {
                                    "line": 43,
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "LineChart displays the data with a monotone line and no dots",
                            "codeSegments": [
                                {
                                    "line": 44,
                                    "code": "<LineChart"
                                },
                                {
                                    "line": 52,
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "XAxis uses formatted month labels, YAxis auto-scales",
                            "codeSegments": [
                                {
                                    "line": 48,
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatMonth} />"
                                },
                                {
                                    "line": 49,
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Tooltip and Legend enhance interactivity and readability",
                            "codeSegments": [
                                {
                                    "line": 50,
                                    "code": "<Tooltip />"
                                },
                                {
                                    "line": 51,
                                    "code": "<Legend />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Adds a ReferenceLine at the latest closing price, now colored red and without a label",
                            "codeSegments": [
                                {
                                    "line": 53,
                                    "code": "{currentClose !== null && ("
                                },
                                {
                                    "line": 54,
                                    "code": "<ReferenceLine"
                                },
                                {
                                    "line": 55,
                                    "code": "y={currentClose}"
                                },
                                {
                                    "line": 56,
                                    "code": "stroke=\"red\""
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Displays the company name and ticker above the chart",
                            "codeSegments": [
                                {
                                    "line": 40,
                                    "code": "<h3>"
                                },
                                {
                                    "line": 41,
                                    "code": "{company} ({ticker})"
                                }
                            ]
                        }
                    ],
                    "medium_structured": [
                        {
                            "summaryComponent": "Defines a StockChart React component for visualizing stock data",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                },
                                {
                                    "line": 66,
                                    "code": "export default StockChart;"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Processes input data to extract dates and closing prices",
                            "codeSegments": [
                                {
                                    "line": 24,
                                    "code": "const chartData = data.data.map((item) => ({"
                                },
                                {
                                    "line": 25,
                                    "code": "date: item.date,"
                                },
                                {
                                    "line": 26,
                                    "code": "price: item.close,"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Renders a line chart with:",
                            "codeSegments": [
                                {
                                    "line": 44,
                                    "code": "<LineChart"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "X-axis labels formatted as months",
                            "codeSegments": [
                                {
                                    "line": 48,
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatMonth} />"
                                },
                                {
                                    "line": 30,
                                    "code": "const formatMonth = (dateString) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Legend and tooltip for better readability",
                            "codeSegments": [
                                {
                                    "line": 50,
                                    "code": "<Tooltip />"
                                },
                                {
                                    "line": 51,
                                    "code": "<Legend />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "A horizontal red reference line marking the latest closing price, now without a label",
                            "codeSegments": [
                                {
                                    "line": 54,
                                    "code": "<ReferenceLine"
                                },
                                {
                                    "line": 55,
                                    "code": "y={currentClose}"
                                },
                                {
                                    "line": 56,
                                    "code": "stroke=\"red\""
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Displays company name and ticker above the chart",
                            "codeSegments": [
                                {
                                    "line": 40,
                                    "code": "<h3>"
                                },
                                {
                                    "line": 41,
                                    "code": "{company} ({ticker})"
                                }
                            ]
                        }
                    ],
                    "high_unstructured": [
                        {
                            "summaryComponent": "defines the StockChart React component",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "takes a data prop containing stock information",
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "renders a responsive line chart using the Recharts library",
                            "codeSegments": [
                                {
                                    "line": 43,
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                                },
                                {
                                    "line": 44,
                                    "code": "<LineChart"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "checks for valid data",
                            "codeSegments": [
                                {
                                    "line": 14,
                                    "code": "if (!data || !data.data || !data.data.length) return null;"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "extracts the company name, ticker",
                            "codeSegments": [
                                {
                                    "line": 16,
                                    "code": "const company = data.name;"
                                },
                                {
                                    "line": 17,
                                    "code": "const ticker = data.ticker;"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "formats the data into an array of objects with date and closing price",
                            "codeSegments": [
                                {
                                    "line": 24,
                                    "code": "const chartData = data.data.map((item) => ({"
                                },
                                {
                                    "line": 25,
                                    "code": "date: item.date,"
                                },
                                {
                                    "line": 26,
                                    "code": "price: item.close,"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "includes helper functions to format dates and months for display",
                            "codeSegments": [
                                {
                                    "line": 19,
                                    "code": "const formatDateString = (date) => {"
                                },
                                {
                                    "line": 30,
                                    "code": "const formatMonth = (dateString) => {"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "configures the chart with a monotone line, formatted X-axis, auto-scaling Y-axis, tooltip, and legend",
                            "codeSegments": [
                                {
                                    "line": 52,
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                                },
                                {
                                    "line": 48,
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatMonth} />"
                                },
                                {
                                    "line": 49,
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                                },
                                {
                                    "line": 50,
                                    "code": "<Tooltip />"
                                },
                                {
                                    "line": 51,
                                    "code": "<Legend />"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "chart is wrapped in a responsive container and is displayed with the company name and ticker above it",
                            "codeSegments": [
                                {
                                    "line": 39,
                                    "code": "<div style={{ marginTop: \"2rem\" }}>"
                                },
                                {
                                    "line": 40,
                                    "code": "<h3>"
                                },
                                {
                                    "line": 41,
                                    "code": "{company} ({ticker})"
                                },
                                {
                                    "line": 42,
                                    "code": "</h3>"
                                },
                                {
                                    "line": 43,
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "features a horizontal ReferenceLine at the most recent closing price, which is colored red and no longer includes a \"Current Close\" label",
                            "codeSegments": [
                                {
                                    "line": 36,
                                    "code": "const currentClose = chartData.length > 0 ? chartData[chartData.length - 1].price : null;"
                                },
                                {
                                    "line": 53,
                                    "code": "{currentClose !== null && ("
                                },
                                {
                                    "line": 54,
                                    "code": "<ReferenceLine"
                                },
                                {
                                    "line": 55,
                                    "code": "y={currentClose}"
                                },
                                {
                                    "line": 56,
                                    "code": "stroke=\"red\""
                                }
                            ]
                        }
                    ]
                },
                "editPromptValue": "",
                "selectedDetailLevel": "medium",
                "oldSummaryData": {
                    "low_unstructured": "This code defines a React component that displays a stock price line chart using the Recharts library, now enhanced to include a horizontal reference line marking the latest closing price.",
                    "low_structured": "• React component for stock price chart\n• Uses Recharts for visualization\n• Displays company and ticker\n• Adds a horizontal reference line at the latest closing price",
                    "medium_unstructured": "This code implements a React component called StockChart that visualizes stock price data as a line chart using Recharts. It processes incoming data to extract dates and closing prices, and displays the chart with formatted month labels, a legend, and a tooltip. The component also shows the company name and ticker above the chart, and now visually highlights the most recent closing price with a labeled horizontal reference line.",
                    "high_structured": "• Implements the StockChart React component for displaying stock price trends\n• Validates input data to ensure it exists and contains entries\n• Extracts relevant information:\n  ◦ Company name and ticker from the data prop\n  ◦ Maps raw data to an array of objects with 'date' and 'price' fields\n• Provides helper functions:\n  ◦ formatDateString to trim date strings (though not directly used in rendering)\n  ◦ formatMonth to format X-axis labels as short month names\n• Renders the chart using Recharts components:\n  ◦ ResponsiveContainer ensures the chart scales to its parent\n  ◦ LineChart displays the data with a monotone line and no dots\n  ◦ XAxis uses formatted month labels, YAxis auto-scales\n  ◦ Tooltip and Legend enhance interactivity and readability\n  ◦ Adds a ReferenceLine at the latest closing price, labeled as \"Current Close\"\n• Displays the company name and ticker above the chart",
                    "medium_structured": "• Defines a StockChart React component for visualizing stock data\n• Processes input data to extract dates and closing prices\n• Renders a line chart with:\n  ◦ X-axis labels formatted as months\n  ◦ Legend and tooltip for better readability\n  ◦ A horizontal reference line marking the latest closing price\n• Displays company name and ticker above the chart",
                    "title": "StockChart React Component with Highlighted Current Close Reference Line",
                    "high_unstructured": "This code defines the StockChart React component, which takes a data prop containing stock information and renders a responsive line chart using the Recharts library. The component first checks for valid data, then extracts the company name, ticker, and formats the data into an array of objects with date and closing price. It includes helper functions to format dates and months for display, and configures the chart with a monotone line, formatted X-axis, auto-scaling Y-axis, tooltip, and legend. The chart is wrapped in a responsive container and is displayed with the company name and ticker above it. Additionally, the chart now features a horizontal ReferenceLine at the most recent closing price, visually labeled as \"Current Close\"."
                },
                "title": "StockChart React Component with Unlabeled Red Current Close Reference Line"
            }
        },
        "event": "create_new_section",
        "id": "8n5DhovJsjMMtulqnD2Z"
    },
    {
        "timestamp": "2025-08-23 20:37:05.000",
        "source": "frontend",
        "data": {
            "before_section_id": "3cfbf9ff-6889-4de0-9f4d-5d52751a6c18",
            "after_section_id": "8ac26ede-6f12-41f6-abff-e7646de7e629"
        },
        "event": "autotransit_section",
        "id": "Tv7w2jPNi5Givaibi429"
    },
    {
        "timestamp": "2025-08-23 20:37:33.000",
        "source": "backend",
        "data": {
            "summary": {
                "low_unstructured": "This code conditionally renders a ReferenceLine at the current close price on the chart.",
                "low_structured": "• Conditionally adds a ReferenceLine to the chart.\n• The line marks the current close price.",
                "medium_unstructured": "This snippet checks if the current close price is available and, if so, renders a ReferenceLine at that value on the chart. The line is styled with a specific color and dashed pattern, and includes a label indicating it represents the 'Current Close'. This helps visually highlight the latest closing price on the stock chart.",
                "high_structured": "• Checks if currentClose is not null before rendering.\n• If the condition is met, adds a ReferenceLine to the LineChart:\n  ◦ The ReferenceLine is drawn at the y-value equal to currentClose.\n  ◦ The stroke color is set to orange (#ff7300).\n  ◦ The line uses a dashed pattern ('5 5') for visual distinction.\n  ◦ A label 'Current Close' is attached, positioned to the right and colored orange.\n• This line visually highlights the latest closing price on the chart.\n• Enhances chart readability by clearly marking the current close value for users.",
                "medium_structured": "• Checks if currentClose is not null.\n• If true, renders a ReferenceLine at the y-position of currentClose.\n  ◦ The line is orange (#ff7300) and dashed.\n  ◦ A label 'Current Close' is displayed on the right in orange.\n• Visually highlights the latest closing price on the chart.",
                "title": "Conditional Rendering of a ReferenceLine for Current Close Price in StockChart",
                "high_unstructured": "This code conditionally renders a ReferenceLine component from Recharts if the currentClose value is not null, placing the line horizontally at the y-coordinate corresponding to the latest closing price. The line is styled with an orange color (#ff7300) and a dashed pattern ('5 5'), making it visually distinct from other chart elements. Additionally, it includes a label reading 'Current Close', positioned on the right and colored to match the line for clarity. This feature helps users quickly identify the most recent closing price directly on the stock chart."
            },
            "selected_code": "          {currentClose !== null && (\n            <ReferenceLine\n              y={currentClose}\n              stroke=\"#ff7300\"\n              strokeDasharray=\"5 5\"\n              label={{\n                value: \"Current Close\",\n                position: \"right\",\n                fill: \"#ff7300\",\n              }}\n            />\n          )}"
        },
        "event": "summarize_selected_code",
        "id": "jTbgDGxWRnezFmAy22s9"
    },
    {
        "timestamp": "2025-08-23 20:37:34.000",
        "source": "backend",
        "data": {
            "summary": "• Conditionally adds a ReferenceLine to the chart.\n• The line marks the current close price.",
            "mapping": [
                {
                    "summaryComponent": "Conditionally adds a ReferenceLine to the chart.",
                    "codeSegments": [
                        {
                            "line": 54,
                            "code": "{currentClose !== null && ("
                        },
                        {
                            "line": 55,
                            "code": "<ReferenceLine"
                        }
                    ]
                },
                {
                    "summaryComponent": "The line marks the current close price.",
                    "codeSegments": [
                        {
                            "line": 56,
                            "code": "y={currentClose}"
                        },
                        {
                            "line": 59,
                            "code": "label={{"
                        },
                        {
                            "line": 60,
                            "code": "value: \"Current Close\","
                        }
                    ]
                }
            ],
            "code": "54:           {currentClose !== null && (\n55:             <ReferenceLine\n56:               y={currentClose}\n57:               stroke=\"#ff7300\"\n58:               strokeDasharray=\"5 5\"\n59:               label={{\n60:                 value: \"Current Close\",\n61:                 position: \"right\",\n62:                 fill: \"#ff7300\",\n63:               }}\n64:             />\n65:           )}"
        },
        "event": "map_summary_code",
        "id": "AN98WHEc4PWz0VMGEZex"
    },
    {
        "timestamp": "2025-08-23 20:37:34.000",
        "source": "backend",
        "data": {
            "summary": "This code conditionally renders a ReferenceLine at the current close price on the chart.",
            "mapping": [
                {
                    "summaryComponent": "conditionally renders",
                    "codeSegments": [
                        {
                            "line": 54,
                            "code": "{currentClose !== null && ("
                        },
                        {
                            "line": 65,
                            "code": ")}"
                        }
                    ]
                },
                {
                    "summaryComponent": "a ReferenceLine",
                    "codeSegments": [
                        {
                            "line": 55,
                            "code": "<ReferenceLine"
                        }
                    ]
                },
                {
                    "summaryComponent": "at the current close price",
                    "codeSegments": [
                        {
                            "line": 56,
                            "code": "y={currentClose}"
                        }
                    ]
                },
                {
                    "summaryComponent": "on the chart",
                    "codeSegments": [
                        {
                            "line": 55,
                            "code": "<ReferenceLine"
                        }
                    ]
                }
            ],
            "code": "54:           {currentClose !== null && (\n55:             <ReferenceLine\n56:               y={currentClose}\n57:               stroke=\"#ff7300\"\n58:               strokeDasharray=\"5 5\"\n59:               label={{\n60:                 value: \"Current Close\",\n61:                 position: \"right\",\n62:                 fill: \"#ff7300\",\n63:               }}\n64:             />\n65:           )}"
        },
        "event": "map_summary_code",
        "id": "KRn3dDhfNihNJp1Gw4pe"
    },
    {
        "timestamp": "2025-08-23 20:37:35.000",
        "source": "frontend",
        "data": {
            "section_id": "8ac26ede-6f12-41f6-abff-e7646de7e629",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "QDP2Qvi1QqgYKhci0JPN"
    },
    {
        "timestamp": "2025-08-23 20:37:35.000",
        "source": "backend",
        "data": {
            "summary": "This snippet checks if the current close price is available and, if so, renders a ReferenceLine at that value on the chart. The line is styled with a specific color and dashed pattern, and includes a label indicating it represents the 'Current Close'. This helps visually highlight the latest closing price on the stock chart.",
            "mapping": [
                {
                    "summaryComponent": "checks if the current close price is available",
                    "codeSegments": [
                        {
                            "line": 54,
                            "code": "currentClose !== null"
                        }
                    ]
                },
                {
                    "summaryComponent": "if so, renders a ReferenceLine at that value on the chart",
                    "codeSegments": [
                        {
                            "line": 55,
                            "code": "<ReferenceLine"
                        },
                        {
                            "line": 56,
                            "code": "y={currentClose}"
                        }
                    ]
                },
                {
                    "summaryComponent": "The line is styled with a specific color",
                    "codeSegments": [
                        {
                            "line": 57,
                            "code": "stroke=\"#ff7300\""
                        }
                    ]
                },
                {
                    "summaryComponent": "and dashed pattern",
                    "codeSegments": [
                        {
                            "line": 58,
                            "code": "strokeDasharray=\"5 5\""
                        }
                    ]
                },
                {
                    "summaryComponent": "and includes a label indicating it represents the 'Current Close'",
                    "codeSegments": [
                        {
                            "line": 59,
                            "code": "label={{"
                        },
                        {
                            "line": 60,
                            "code": "value: \"Current Close\","
                        }
                    ]
                },
                {
                    "summaryComponent": "visually highlight the latest closing price on the stock chart",
                    "codeSegments": [
                        {
                            "line": 56,
                            "code": "y={currentClose}"
                        },
                        {
                            "line": 59,
                            "code": "label={{"
                        },
                        {
                            "line": 60,
                            "code": "value: \"Current Close\","
                        }
                    ]
                }
            ],
            "code": "54:           {currentClose !== null && (\n55:             <ReferenceLine\n56:               y={currentClose}\n57:               stroke=\"#ff7300\"\n58:               strokeDasharray=\"5 5\"\n59:               label={{\n60:                 value: \"Current Close\",\n61:                 position: \"right\",\n62:                 fill: \"#ff7300\",\n63:               }}\n64:             />\n65:           )}"
        },
        "event": "map_summary_code",
        "id": "SyrHp61kWhZZhsuV3mZV"
    },
    {
        "timestamp": "2025-08-23 20:37:35.000",
        "source": "backend",
        "data": {
            "summary": "• Checks if currentClose is not null.\n• If true, renders a ReferenceLine at the y-position of currentClose.\n  ◦ The line is orange (#ff7300) and dashed.\n  ◦ A label 'Current Close' is displayed on the right in orange.\n• Visually highlights the latest closing price on the chart.",
            "mapping": [
                {
                    "summaryComponent": "Checks if currentClose is not null.",
                    "codeSegments": [
                        {
                            "line": 54,
                            "code": "currentClose !== null"
                        }
                    ]
                },
                {
                    "summaryComponent": "If true, renders a ReferenceLine at the y-position of currentClose.",
                    "codeSegments": [
                        {
                            "line": 55,
                            "code": "<ReferenceLine"
                        },
                        {
                            "line": 56,
                            "code": "y={currentClose}"
                        }
                    ]
                },
                {
                    "summaryComponent": "The line is orange (#ff7300) and dashed.",
                    "codeSegments": [
                        {
                            "line": 57,
                            "code": "stroke=\"#ff7300\""
                        },
                        {
                            "line": 58,
                            "code": "strokeDasharray=\"5 5\""
                        }
                    ]
                },
                {
                    "summaryComponent": "A label 'Current Close' is displayed on the right in orange.",
                    "codeSegments": [
                        {
                            "line": 59,
                            "code": "label={{"
                        },
                        {
                            "line": 60,
                            "code": "value: \"Current Close\","
                        },
                        {
                            "line": 61,
                            "code": "position: \"right\","
                        },
                        {
                            "line": 62,
                            "code": "fill: \"#ff7300\","
                        }
                    ]
                },
                {
                    "summaryComponent": "Visually highlights the latest closing price on the chart.",
                    "codeSegments": [
                        {
                            "line": 55,
                            "code": "<ReferenceLine"
                        },
                        {
                            "line": 56,
                            "code": "y={currentClose}"
                        }
                    ]
                }
            ],
            "code": "54:           {currentClose !== null && (\n55:             <ReferenceLine\n56:               y={currentClose}\n57:               stroke=\"#ff7300\"\n58:               strokeDasharray=\"5 5\"\n59:               label={{\n60:                 value: \"Current Close\",\n61:                 position: \"right\",\n62:                 fill: \"#ff7300\",\n63:               }}\n64:             />\n65:           )}"
        },
        "event": "map_summary_code",
        "id": "USk8hn3bJAbecR0gD7nm"
    },
    {
        "timestamp": "2025-08-23 20:37:35.000",
        "source": "frontend",
        "data": {
            "mapping_index": 1,
            "section_id": "8ac26ede-6f12-41f6-abff-e7646de7e629",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "o1Lv9jkr02tKTgTzDXG8"
    },
    {
        "timestamp": "2025-08-23 20:37:36.000",
        "source": "backend",
        "data": {
            "summary": "This code conditionally renders a ReferenceLine component from Recharts if the currentClose value is not null, placing the line horizontally at the y-coordinate corresponding to the latest closing price. The line is styled with an orange color (#ff7300) and a dashed pattern ('5 5'), making it visually distinct from other chart elements. Additionally, it includes a label reading 'Current Close', positioned on the right and colored to match the line for clarity. This feature helps users quickly identify the most recent closing price directly on the stock chart.",
            "mapping": [
                {
                    "summaryComponent": "conditionally renders a ReferenceLine component from Recharts",
                    "codeSegments": [
                        {
                            "line": 54,
                            "code": "{currentClose !== null && ("
                        },
                        {
                            "line": 55,
                            "code": "<ReferenceLine"
                        }
                    ]
                },
                {
                    "summaryComponent": "if the currentClose value is not null",
                    "codeSegments": [
                        {
                            "line": 54,
                            "code": "{currentClose !== null && ("
                        }
                    ]
                },
                {
                    "summaryComponent": "placing the line horizontally at the y-coordinate corresponding to the latest closing price",
                    "codeSegments": [
                        {
                            "line": 56,
                            "code": "y={currentClose}"
                        }
                    ]
                },
                {
                    "summaryComponent": "styled with an orange color (#ff7300)",
                    "codeSegments": [
                        {
                            "line": 57,
                            "code": "stroke=\"#ff7300\""
                        }
                    ]
                },
                {
                    "summaryComponent": "and a dashed pattern ('5 5')",
                    "codeSegments": [
                        {
                            "line": 58,
                            "code": "strokeDasharray=\"5 5\""
                        }
                    ]
                },
                {
                    "summaryComponent": "making it visually distinct from other chart elements",
                    "codeSegments": [
                        {
                            "line": 57,
                            "code": "stroke=\"#ff7300\""
                        },
                        {
                            "line": 58,
                            "code": "strokeDasharray=\"5 5\""
                        }
                    ]
                },
                {
                    "summaryComponent": "includes a label reading 'Current Close'",
                    "codeSegments": [
                        {
                            "line": 59,
                            "code": "label={{"
                        },
                        {
                            "line": 60,
                            "code": "value: \"Current Close\","
                        }
                    ]
                },
                {
                    "summaryComponent": "positioned on the right",
                    "codeSegments": [
                        {
                            "line": 61,
                            "code": "position: \"right\","
                        }
                    ]
                },
                {
                    "summaryComponent": "colored to match the line for clarity",
                    "codeSegments": [
                        {
                            "line": 62,
                            "code": "fill: \"#ff7300\","
                        }
                    ]
                },
                {
                    "summaryComponent": "helps users quickly identify the most recent closing price directly on the stock chart",
                    "codeSegments": [
                        {
                            "line": 56,
                            "code": "y={currentClose}"
                        },
                        {
                            "line": 59,
                            "code": "label={{"
                        }
                    ]
                }
            ],
            "code": "54:           {currentClose !== null && (\n55:             <ReferenceLine\n56:               y={currentClose}\n57:               stroke=\"#ff7300\"\n58:               strokeDasharray=\"5 5\"\n59:               label={{\n60:                 value: \"Current Close\",\n61:                 position: \"right\",\n62:                 fill: \"#ff7300\",\n63:               }}\n64:             />\n65:           )}"
        },
        "event": "map_summary_code",
        "id": "2HzccmVcmFCjWvITCMwB"
    },
    {
        "timestamp": "2025-08-23 20:37:36.000",
        "source": "frontend",
        "data": {},
        "event": "click_summarize_code",
        "id": "E07k9gDxpjd1graiULgT"
    },
    {
        "timestamp": "2025-08-23 20:37:36.000",
        "source": "backend",
        "data": {
            "summary": "• Checks if currentClose is not null before rendering.\n• If the condition is met, adds a ReferenceLine to the LineChart:\n  ◦ The ReferenceLine is drawn at the y-value equal to currentClose.\n  ◦ The stroke color is set to orange (#ff7300).\n  ◦ The line uses a dashed pattern ('5 5') for visual distinction.\n  ◦ A label 'Current Close' is attached, positioned to the right and colored orange.\n• This line visually highlights the latest closing price on the chart.\n• Enhances chart readability by clearly marking the current close value for users.",
            "mapping": [
                {
                    "summaryComponent": "Checks if currentClose is not null before rendering.",
                    "codeSegments": [
                        {
                            "line": 54,
                            "code": "{currentClose !== null && ("
                        }
                    ]
                },
                {
                    "summaryComponent": "If the condition is met, adds a ReferenceLine to the LineChart:",
                    "codeSegments": [
                        {
                            "line": 55,
                            "code": "<ReferenceLine"
                        }
                    ]
                },
                {
                    "summaryComponent": "The ReferenceLine is drawn at the y-value equal to currentClose.",
                    "codeSegments": [
                        {
                            "line": 56,
                            "code": "y={currentClose}"
                        }
                    ]
                },
                {
                    "summaryComponent": "The stroke color is set to orange (#ff7300).",
                    "codeSegments": [
                        {
                            "line": 57,
                            "code": "stroke=\"#ff7300\""
                        }
                    ]
                },
                {
                    "summaryComponent": "The line uses a dashed pattern ('5 5') for visual distinction.",
                    "codeSegments": [
                        {
                            "line": 58,
                            "code": "strokeDasharray=\"5 5\""
                        }
                    ]
                },
                {
                    "summaryComponent": "A label 'Current Close' is attached, positioned to the right and colored orange.",
                    "codeSegments": [
                        {
                            "line": 59,
                            "code": "label={{"
                        },
                        {
                            "line": 60,
                            "code": "value: \"Current Close\","
                        },
                        {
                            "line": 61,
                            "code": "position: \"right\","
                        },
                        {
                            "line": 62,
                            "code": "fill: \"#ff7300\","
                        }
                    ]
                },
                {
                    "summaryComponent": "This line visually highlights the latest closing price on the chart.",
                    "codeSegments": [
                        {
                            "line": 55,
                            "code": "<ReferenceLine"
                        },
                        {
                            "line": 56,
                            "code": "y={currentClose}"
                        }
                    ]
                },
                {
                    "summaryComponent": "Enhances chart readability by clearly marking the current close value for users.",
                    "codeSegments": [
                        {
                            "line": 55,
                            "code": "<ReferenceLine"
                        },
                        {
                            "line": 59,
                            "code": "label={{"
                        }
                    ]
                }
            ],
            "code": "54:           {currentClose !== null && (\n55:             <ReferenceLine\n56:               y={currentClose}\n57:               stroke=\"#ff7300\"\n58:               strokeDasharray=\"5 5\"\n59:               label={{\n60:                 value: \"Current Close\",\n61:                 position: \"right\",\n62:                 fill: \"#ff7300\",\n63:               }}\n64:             />\n65:           )}"
        },
        "event": "map_summary_code",
        "id": "KiSMSI0TbA3bW75HISRL"
    },
    {
        "timestamp": "2025-08-23 20:37:44.000",
        "source": "frontend",
        "data": {
            "before_section_id": "8ac26ede-6f12-41f6-abff-e7646de7e629",
            "after_section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008"
        },
        "event": "autotransit_section",
        "id": "G0hGNYr6qb1IVa0mOoyo"
    },
    {
        "timestamp": "2025-08-23 20:37:44.000",
        "source": "frontend",
        "data": {
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "section_data": {
                "summaryData": {
                    "low_unstructured": "This code conditionally renders a ReferenceLine at the current close price on the chart.",
                    "low_structured": "• Conditionally adds a ReferenceLine to the chart.\n• The line marks the current close price.",
                    "medium_unstructured": "This snippet checks if the current close price is available and, if so, renders a ReferenceLine at that value on the chart. The line is styled with a specific color and dashed pattern, and includes a label indicating it represents the 'Current Close'. This helps visually highlight the latest closing price on the stock chart.",
                    "high_structured": "• Checks if currentClose is not null before rendering.\n• If the condition is met, adds a ReferenceLine to the LineChart:\n  ◦ The ReferenceLine is drawn at the y-value equal to currentClose.\n  ◦ The stroke color is set to orange (#ff7300).\n  ◦ The line uses a dashed pattern ('5 5') for visual distinction.\n  ◦ A label 'Current Close' is attached, positioned to the right and colored orange.\n• This line visually highlights the latest closing price on the chart.\n• Enhances chart readability by clearly marking the current close value for users.",
                    "medium_structured": "• Checks if currentClose is not null.\n• If true, renders a ReferenceLine at the y-position of currentClose.\n  ◦ The line is orange (#ff7300) and dashed.\n  ◦ A label 'Current Close' is displayed on the right in orange.\n• Visually highlights the latest closing price on the chart.",
                    "title": "Conditional Rendering of a ReferenceLine for Current Close Price in StockChart",
                    "high_unstructured": "This code conditionally renders a ReferenceLine component from Recharts if the currentClose value is not null, placing the line horizontally at the y-coordinate corresponding to the latest closing price. The line is styled with an orange color (#ff7300) and a dashed pattern ('5 5'), making it visually distinct from other chart elements. Additionally, it includes a label reading 'Current Close', positioned on the right and colored to match the line for clarity. This feature helps users quickly identify the most recent closing price directly on the stock chart."
                },
                "metadata": {
                    "offset": 1408,
                    "fullPath": "/project/workspace/frontend/src/StockChart.jsx",
                    "id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
                    "filename": "StockChart.jsx",
                    "originalCode": "          {currentClose !== null && (\n            <ReferenceLine\n              y={currentClose}\n              stroke=\"#ff7300\"\n              strokeDasharray=\"5 5\"\n              label={{\n                value: \"Current Close\",\n                position: \"right\",\n                fill: \"#ff7300\",\n              }}\n            />\n          )}"
                },
                "editPromptValue": "",
                "selectedStructured": "unstructured",
                "editPromptDetailLevel": null,
                "editPromptStructured": null,
                "lines": [
                    54,
                    65
                ],
                "summaryMappings": {
                    "low_unstructured": [
                        {
                            "summaryComponent": "conditionally renders",
                            "codeSegments": [
                                {
                                    "line": 54,
                                    "code": "{currentClose !== null && ("
                                },
                                {
                                    "line": 65,
                                    "code": ")}"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "a ReferenceLine",
                            "codeSegments": [
                                {
                                    "line": 55,
                                    "code": "<ReferenceLine"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "at the current close price",
                            "codeSegments": [
                                {
                                    "line": 56,
                                    "code": "y={currentClose}"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "on the chart",
                            "codeSegments": [
                                {
                                    "line": 55,
                                    "code": "<ReferenceLine"
                                }
                            ]
                        }
                    ],
                    "low_structured": [
                        {
                            "summaryComponent": "Conditionally adds a ReferenceLine to the chart.",
                            "codeSegments": [
                                {
                                    "line": 54,
                                    "code": "{currentClose !== null && ("
                                },
                                {
                                    "line": 55,
                                    "code": "<ReferenceLine"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "The line marks the current close price.",
                            "codeSegments": [
                                {
                                    "line": 56,
                                    "code": "y={currentClose}"
                                },
                                {
                                    "line": 59,
                                    "code": "label={{"
                                },
                                {
                                    "line": 60,
                                    "code": "value: \"Current Close\","
                                }
                            ]
                        }
                    ],
                    "medium_unstructured": [
                        {
                            "summaryComponent": "checks if the current close price is available",
                            "codeSegments": [
                                {
                                    "line": 54,
                                    "code": "currentClose !== null"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "if so, renders a ReferenceLine at that value on the chart",
                            "codeSegments": [
                                {
                                    "line": 55,
                                    "code": "<ReferenceLine"
                                },
                                {
                                    "line": 56,
                                    "code": "y={currentClose}"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "The line is styled with a specific color",
                            "codeSegments": [
                                {
                                    "line": 57,
                                    "code": "stroke=\"#ff7300\""
                                }
                            ]
                        },
                        {
                            "summaryComponent": "and dashed pattern",
                            "codeSegments": [
                                {
                                    "line": 58,
                                    "code": "strokeDasharray=\"5 5\""
                                }
                            ]
                        },
                        {
                            "summaryComponent": "and includes a label indicating it represents the 'Current Close'",
                            "codeSegments": [
                                {
                                    "line": 59,
                                    "code": "label={{"
                                },
                                {
                                    "line": 60,
                                    "code": "value: \"Current Close\","
                                }
                            ]
                        },
                        {
                            "summaryComponent": "visually highlight the latest closing price on the stock chart",
                            "codeSegments": [
                                {
                                    "line": 56,
                                    "code": "y={currentClose}"
                                },
                                {
                                    "line": 59,
                                    "code": "label={{"
                                },
                                {
                                    "line": 60,
                                    "code": "value: \"Current Close\","
                                }
                            ]
                        }
                    ],
                    "high_structured": [
                        {
                            "summaryComponent": "Checks if currentClose is not null before rendering.",
                            "codeSegments": [
                                {
                                    "line": 54,
                                    "code": "{currentClose !== null && ("
                                }
                            ]
                        },
                        {
                            "summaryComponent": "If the condition is met, adds a ReferenceLine to the LineChart:",
                            "codeSegments": [
                                {
                                    "line": 55,
                                    "code": "<ReferenceLine"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "The ReferenceLine is drawn at the y-value equal to currentClose.",
                            "codeSegments": [
                                {
                                    "line": 56,
                                    "code": "y={currentClose}"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "The stroke color is set to orange (#ff7300).",
                            "codeSegments": [
                                {
                                    "line": 57,
                                    "code": "stroke=\"#ff7300\""
                                }
                            ]
                        },
                        {
                            "summaryComponent": "The line uses a dashed pattern ('5 5') for visual distinction.",
                            "codeSegments": [
                                {
                                    "line": 58,
                                    "code": "strokeDasharray=\"5 5\""
                                }
                            ]
                        },
                        {
                            "summaryComponent": "A label 'Current Close' is attached, positioned to the right and colored orange.",
                            "codeSegments": [
                                {
                                    "line": 59,
                                    "code": "label={{"
                                },
                                {
                                    "line": 60,
                                    "code": "value: \"Current Close\","
                                },
                                {
                                    "line": 61,
                                    "code": "position: \"right\","
                                },
                                {
                                    "line": 62,
                                    "code": "fill: \"#ff7300\","
                                }
                            ]
                        },
                        {
                            "summaryComponent": "This line visually highlights the latest closing price on the chart.",
                            "codeSegments": [
                                {
                                    "line": 55,
                                    "code": "<ReferenceLine"
                                },
                                {
                                    "line": 56,
                                    "code": "y={currentClose}"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Enhances chart readability by clearly marking the current close value for users.",
                            "codeSegments": [
                                {
                                    "line": 55,
                                    "code": "<ReferenceLine"
                                },
                                {
                                    "line": 59,
                                    "code": "label={{"
                                }
                            ]
                        }
                    ],
                    "medium_structured": [
                        {
                            "summaryComponent": "Checks if currentClose is not null.",
                            "codeSegments": [
                                {
                                    "line": 54,
                                    "code": "currentClose !== null"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "If true, renders a ReferenceLine at the y-position of currentClose.",
                            "codeSegments": [
                                {
                                    "line": 55,
                                    "code": "<ReferenceLine"
                                },
                                {
                                    "line": 56,
                                    "code": "y={currentClose}"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "The line is orange (#ff7300) and dashed.",
                            "codeSegments": [
                                {
                                    "line": 57,
                                    "code": "stroke=\"#ff7300\""
                                },
                                {
                                    "line": 58,
                                    "code": "strokeDasharray=\"5 5\""
                                }
                            ]
                        },
                        {
                            "summaryComponent": "A label 'Current Close' is displayed on the right in orange.",
                            "codeSegments": [
                                {
                                    "line": 59,
                                    "code": "label={{"
                                },
                                {
                                    "line": 60,
                                    "code": "value: \"Current Close\","
                                },
                                {
                                    "line": 61,
                                    "code": "position: \"right\","
                                },
                                {
                                    "line": 62,
                                    "code": "fill: \"#ff7300\","
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Visually highlights the latest closing price on the chart.",
                            "codeSegments": [
                                {
                                    "line": 55,
                                    "code": "<ReferenceLine"
                                },
                                {
                                    "line": 56,
                                    "code": "y={currentClose}"
                                }
                            ]
                        }
                    ],
                    "high_unstructured": [
                        {
                            "summaryComponent": "conditionally renders a ReferenceLine component from Recharts",
                            "codeSegments": [
                                {
                                    "line": 54,
                                    "code": "{currentClose !== null && ("
                                },
                                {
                                    "line": 55,
                                    "code": "<ReferenceLine"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "if the currentClose value is not null",
                            "codeSegments": [
                                {
                                    "line": 54,
                                    "code": "{currentClose !== null && ("
                                }
                            ]
                        },
                        {
                            "summaryComponent": "placing the line horizontally at the y-coordinate corresponding to the latest closing price",
                            "codeSegments": [
                                {
                                    "line": 56,
                                    "code": "y={currentClose}"
                                }
                            ]
                        },
                        {
                            "summaryComponent": "styled with an orange color (#ff7300)",
                            "codeSegments": [
                                {
                                    "line": 57,
                                    "code": "stroke=\"#ff7300\""
                                }
                            ]
                        },
                        {
                            "summaryComponent": "and a dashed pattern ('5 5')",
                            "codeSegments": [
                                {
                                    "line": 58,
                                    "code": "strokeDasharray=\"5 5\""
                                }
                            ]
                        },
                        {
                            "summaryComponent": "making it visually distinct from other chart elements",
                            "codeSegments": [
                                {
                                    "line": 57,
                                    "code": "stroke=\"#ff7300\""
                                },
                                {
                                    "line": 58,
                                    "code": "strokeDasharray=\"5 5\""
                                }
                            ]
                        },
                        {
                            "summaryComponent": "includes a label reading 'Current Close'",
                            "codeSegments": [
                                {
                                    "line": 59,
                                    "code": "label={{"
                                },
                                {
                                    "line": 60,
                                    "code": "value: \"Current Close\","
                                }
                            ]
                        },
                        {
                            "summaryComponent": "positioned on the right",
                            "codeSegments": [
                                {
                                    "line": 61,
                                    "code": "position: \"right\","
                                }
                            ]
                        },
                        {
                            "summaryComponent": "colored to match the line for clarity",
                            "codeSegments": [
                                {
                                    "line": 62,
                                    "code": "fill: \"#ff7300\","
                                }
                            ]
                        },
                        {
                            "summaryComponent": "helps users quickly identify the most recent closing price directly on the stock chart",
                            "codeSegments": [
                                {
                                    "line": 56,
                                    "code": "y={currentClose}"
                                },
                                {
                                    "line": 59,
                                    "code": "label={{"
                                }
                            ]
                        }
                    ]
                },
                "selectedDetailLevel": "medium",
                "title": "Conditional Rendering of a ReferenceLine for Current Close Price in StockChart",
                "createdAt": 1755967056000
            }
        },
        "event": "create_new_section",
        "id": "bs6kwAH80JCjNzV7lup4"
    },
    {
        "timestamp": "2025-08-23 20:38:47.000",
        "source": "frontend",
        "data": {
            "mapping_index": 3,
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "5jDfxwlXzLX6QAFo3W3v"
    },
    {
        "timestamp": "2025-08-23 20:38:47.000",
        "source": "frontend",
        "data": {
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "A6teMqqGW8LR4o4OLVFx"
    },
    {
        "timestamp": "2025-08-23 20:38:47.000",
        "source": "frontend",
        "data": {
            "mapping_index": 1,
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "Y1bYWssP84gzbIGYCHU9"
    },
    {
        "timestamp": "2025-08-23 20:38:47.000",
        "source": "frontend",
        "data": {
            "mapping_index": 0,
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "iFJgObnbAMLVmG3teJGb"
    },
    {
        "timestamp": "2025-08-23 20:38:47.000",
        "source": "frontend",
        "data": {
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "na0nkDRo01AJwcQ0s8NU"
    },
    {
        "timestamp": "2025-08-23 20:38:47.000",
        "source": "frontend",
        "data": {
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "yhk1UIvRzN1Ee2frnaMA"
    },
    {
        "timestamp": "2025-08-23 20:39:03.000",
        "source": "frontend",
        "data": {
            "after_detail_level": "medium",
            "after_structured": "structured",
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "before_structured": "unstructured",
            "before_detail_level": "medium"
        },
        "event": "change_summary_level",
        "id": "SI2BsOikNJuks6d3AEmA"
    },
    {
        "timestamp": "2025-08-23 20:39:04.000",
        "source": "frontend",
        "data": {
            "mapping_index": 0,
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "MLwhSDmqpX3IVnTxtd2U"
    },
    {
        "timestamp": "2025-08-23 20:39:05.000",
        "source": "frontend",
        "data": {
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "EmU012PuNLvajbEXakuT"
    },
    {
        "timestamp": "2025-08-23 20:39:06.000",
        "source": "frontend",
        "data": {
            "mapping_index": 2,
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "6ds61ESyQvmlgC2IxZJv"
    },
    {
        "timestamp": "2025-08-23 20:39:06.000",
        "source": "frontend",
        "data": {
            "mapping_index": 1,
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "B9BfRYfzCBTbZn2XAXBM"
    },
    {
        "timestamp": "2025-08-23 20:39:06.000",
        "source": "frontend",
        "data": {
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "Xn2rT0Tt375FITT9u3rS"
    },
    {
        "timestamp": "2025-08-23 20:39:06.000",
        "source": "frontend",
        "data": {
            "mapping_index": 0,
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "olXzrlZOpLnJ0nQGkP6e"
    },
    {
        "timestamp": "2025-08-23 20:39:06.000",
        "source": "frontend",
        "data": {
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "thP3d0uMcftKUEaUG5PW"
    },
    {
        "timestamp": "2025-08-23 20:39:07.000",
        "source": "frontend",
        "data": {
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "BRuDj1BhwsObUVTeIHnP"
    },
    {
        "timestamp": "2025-08-23 20:39:07.000",
        "source": "frontend",
        "data": {
            "mapping_index": 3,
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "K0YGaGuWxSRZXCrsI6d7"
    },
    {
        "timestamp": "2025-08-23 20:39:08.000",
        "source": "frontend",
        "data": {
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "fMViQX0rjozOXus4xYye"
    },
    {
        "timestamp": "2025-08-23 20:39:10.000",
        "source": "frontend",
        "data": {
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "6S9oTT0JXTT7eSKoL2x2"
    },
    {
        "timestamp": "2025-08-23 20:39:10.000",
        "source": "frontend",
        "data": {
            "mapping_index": 4,
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "FZ8oXN5l2erNHksGSsp7"
    },
    {
        "timestamp": "2025-08-23 20:39:10.000",
        "source": "frontend",
        "data": {
            "mapping_index": 4,
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "ct03hkXAJczYXAFEiM86"
    },
    {
        "timestamp": "2025-08-23 20:39:11.000",
        "source": "frontend",
        "data": {
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "0VXA1ciD0CLyPynbHO62"
    },
    {
        "timestamp": "2025-08-23 20:39:11.000",
        "source": "frontend",
        "data": {
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "JktTPqpcY1qGNY2hqNqP"
    },
    {
        "timestamp": "2025-08-23 20:39:11.000",
        "source": "frontend",
        "data": {
            "mapping_index": 3,
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "YrY5qUR6K00IZo1qth3u"
    },
    {
        "timestamp": "2025-08-23 20:39:13.000",
        "source": "frontend",
        "data": {
            "mapping_index": 3,
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "37Omdmw4ooe4ZNQ3vGrK"
    },
    {
        "timestamp": "2025-08-23 20:39:13.000",
        "source": "frontend",
        "data": {
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "9cszlVJPurtiYR5NleWB"
    },
    {
        "timestamp": "2025-08-23 20:39:13.000",
        "source": "frontend",
        "data": {
            "mapping_index": 4,
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "DDJUkVjh5C59r7ozxbWt"
    },
    {
        "timestamp": "2025-08-23 20:39:13.000",
        "source": "frontend",
        "data": {
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "O2r2fdF9IIPLiPdiTadp"
    },
    {
        "timestamp": "2025-08-23 20:39:13.000",
        "source": "frontend",
        "data": {
            "mapping_index": 3,
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "UI8NtBa8lO5ug6jQ3Bv7"
    },
    {
        "timestamp": "2025-08-23 20:39:20.000",
        "source": "frontend",
        "data": {
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "LGgBb89fG8ab7auML1ex"
    },
    {
        "timestamp": "2025-08-23 20:39:20.000",
        "source": "frontend",
        "data": {
            "mapping_index": 4,
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "bNm9qduKCBRg3K9cDpaE"
    },
    {
        "timestamp": "2025-08-23 20:39:20.000",
        "source": "frontend",
        "data": {
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "qlpYqHtJ9jDngWgdFSRP"
    },
    {
        "timestamp": "2025-08-23 20:39:22.000",
        "source": "frontend",
        "data": {
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "9N8IGLeu20cDOC0bZgJD"
    },
    {
        "timestamp": "2025-08-23 20:39:22.000",
        "source": "frontend",
        "data": {
            "mapping_index": 4,
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "APH3ZGXx01oiApd0qi3s"
    },
    {
        "timestamp": "2025-08-23 20:39:22.000",
        "source": "frontend",
        "data": {
            "mapping_index": 3,
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "EpzzXNRjvY2BwcSoMvOE"
    },
    {
        "timestamp": "2025-08-23 20:39:22.000",
        "source": "frontend",
        "data": {
            "mapping_index": 2,
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "HgePBUVQHEA8xl3FBuM0"
    },
    {
        "timestamp": "2025-08-23 20:39:22.000",
        "source": "frontend",
        "data": {
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "S7Cf4FIsinBsHeEJzJ5n"
    },
    {
        "timestamp": "2025-08-23 20:39:22.000",
        "source": "frontend",
        "data": {
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "U7TMcLFgwWUQI9tF6mBi"
    },
    {
        "timestamp": "2025-08-23 20:39:22.000",
        "source": "frontend",
        "data": {
            "mapping_index": 3,
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "zw4NGW9xnTVCOHHjGQSd"
    },
    {
        "timestamp": "2025-08-23 20:39:23.000",
        "source": "frontend",
        "data": {
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "4GJPHYTWKhf1G4i71a7E"
    },
    {
        "timestamp": "2025-08-23 20:39:23.000",
        "source": "frontend",
        "data": {
            "mapping_index": 1,
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "AUIlnpR6qbAJGso9sVS3"
    },
    {
        "timestamp": "2025-08-23 20:39:23.000",
        "source": "frontend",
        "data": {
            "mapping_index": 2,
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "YB5HxcsXaycbuCfqVobh"
    },
    {
        "timestamp": "2025-08-23 20:39:23.000",
        "source": "frontend",
        "data": {
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "iCs0Evty9APn4W3jPyHJ"
    },
    {
        "timestamp": "2025-08-23 20:39:23.000",
        "source": "frontend",
        "data": {
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "vV96pfvUsPo1QxMQMQTQ"
    },
    {
        "timestamp": "2025-08-23 20:39:23.000",
        "source": "frontend",
        "data": {
            "mapping_index": 3,
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "zvto4iqtHMrEa2aOy997"
    },
    {
        "timestamp": "2025-08-23 20:39:25.000",
        "source": "frontend",
        "data": {
            "mapping_index": 4,
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "8VkwJiJTrSEWoU8IRVqh"
    },
    {
        "timestamp": "2025-08-23 20:39:25.000",
        "source": "frontend",
        "data": {
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "nlOX2OFJqfBZQHR3uw88"
    },
    {
        "timestamp": "2025-08-23 20:39:25.000",
        "source": "frontend",
        "data": {
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "tIzqUDwpYclDMZw6X9De"
    },
    {
        "timestamp": "2025-08-23 20:39:30.000",
        "source": "frontend",
        "data": {
            "structured": "structured",
            "summary": "• Checks if currentClose is not null.\n• If true, renders a ReferenceLine at the y-position of currentClose.\n  ◦ The line is orange (#ff7300) and dashed.\n  ◦ A label 'Current Close' is displayed on the right in orange.\n• Visually highlights the latest closing price on the chart.",
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "detail_level": "medium"
        },
        "event": "click_edit_in_prompt",
        "id": "07HmDsLzrP2jJ66YNqMs"
    },
    {
        "timestamp": "2025-08-23 20:39:35.000",
        "source": "frontend",
        "data": {
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "17PpVn0CSlMLbqCa4wMS"
    },
    {
        "timestamp": "2025-08-23 20:39:35.000",
        "source": "frontend",
        "data": {
            "mapping_index": 2,
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "9uUJDvLpnhdqfYPX5b5o"
    },
    {
        "timestamp": "2025-08-23 20:39:35.000",
        "source": "frontend",
        "data": {
            "mapping_index": 3,
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "DmzoTr6I4QmcIfUfZmNB"
    },
    {
        "timestamp": "2025-08-23 20:39:35.000",
        "source": "frontend",
        "data": {
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "H6MNWLQTq5UyTbb6eEKF"
    },
    {
        "timestamp": "2025-08-23 20:39:35.000",
        "source": "frontend",
        "data": {
            "mapping_index": 1,
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "QLqwvwCbP2b6waVksdOM"
    },
    {
        "timestamp": "2025-08-23 20:39:35.000",
        "source": "frontend",
        "data": {
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "mz0PRo6lM8l19D8CtVG7"
    },
    {
        "timestamp": "2025-08-23 20:39:35.000",
        "source": "frontend",
        "data": {
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "nDi3nlZzwvjQvXQzu8cg"
    },
    {
        "timestamp": "2025-08-23 20:39:35.000",
        "source": "frontend",
        "data": {
            "mapping_index": 4,
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "x3oEPlGfbIjNS3JeY2n1"
    },
    {
        "timestamp": "2025-08-23 20:39:56.000",
        "source": "backend",
        "data": {
            "updated_code": "{currentClose !== null && (\n            <ReferenceLine\n              y={currentClose}\n              stroke=\"red\"\n              strokeDasharray=\"5 5\"\n            />\n          )}",
            "edited_summary": "• Checks if currentClose is not null.\n• If true, renders a ReferenceLine at the y-position of currentClose.\n  ◦ The line is red and dashed.\n• Visually highlights the latest closing price on the chart.",
            "structured_type": "structured",
            "original_code": "          {currentClose !== null && (\n            <ReferenceLine\n              y={currentClose}\n              stroke=\"#ff7300\"\n              strokeDasharray=\"5 5\"\n              label={{\n                value: \"Current Close\",\n                position: \"right\",\n                fill: \"#ff7300\",\n              }}\n            />\n          )}",
            "original_summary": "• Checks if currentClose is not null.\n• If true, renders a ReferenceLine at the y-position of currentClose.\n  ◦ The line is orange (#ff7300) and dashed.\n  ◦ A label 'Current Close' is displayed on the right in orange.\n• Visually highlights the latest closing price on the chart.",
            "detail_level": "medium"
        },
        "event": "modify_summary_mediation",
        "id": "VqxRxLhIwztSqMxQU4Rh"
    },
    {
        "timestamp": "2025-08-23 20:40:02.000",
        "source": "backend",
        "data": {
            "new_summary": {
                "low_unstructured": "This code conditionally renders a ReferenceLine at the current close price on the chart, but now the line is red and no longer includes a label.",
                "low_structured": "• Conditionally adds a ReferenceLine to the chart.\n• The line marks the current close price and is now red without a label.",
                "medium_unstructured": "This snippet checks if the current close price is available and, if so, renders a ReferenceLine at that value on the chart. The line is now styled with a red color and a dashed pattern, and no longer includes a label indicating it represents the 'Current Close'. This visually highlights the latest closing price on the stock chart, but without the previous textual annotation.",
                "high_structured": "• Checks if currentClose is not null before rendering.\n• If the condition is met, adds a ReferenceLine to the LineChart:\n  ◦ The ReferenceLine is drawn at the y-value equal to currentClose.\n  ◦ The stroke color is now set to red (was previously orange).\n  ◦ The line uses a dashed pattern ('5 5') for visual distinction.\n  ◦ The label 'Current Close', previously attached and colored orange, has been removed.\n• This line visually highlights the latest closing price on the chart, but without a descriptive label.\n• Enhances chart readability by clearly marking the current close value for users, though without the previous textual annotation.",
                "medium_structured": "• Checks if currentClose is not null.\n• If true, renders a ReferenceLine at the y-position of currentClose.\n  ◦ The line is now red and dashed.\n  ◦ The previous 'Current Close' label on the right in orange has been removed.\n• Visually highlights the latest closing price on the chart, but without a label.",
                "title": "Conditional Rendering of a ReferenceLine for Current Close Price in StockChart (Color Changed to Red, Label Removed)",
                "high_unstructured": "This code conditionally renders a ReferenceLine component from Recharts if the currentClose value is not null, placing the line horizontally at the y-coordinate corresponding to the latest closing price. The line is now styled with a red color and a dashed pattern ('5 5'), making it visually distinct from other chart elements, but the label reading 'Current Close' that was previously positioned on the right and colored to match the line has been removed. This feature helps users quickly identify the most recent closing price directly on the stock chart, but without the explicit label."
            },
            "original_code": "          {currentClose !== null && (\n            <ReferenceLine\n              y={currentClose}\n              stroke=\"red\"\n              strokeDasharray=\"5 5\"\n            />\n          )}",
            "new_code": "          {currentClose !== null && (\n            <ReferenceLine\n              y={currentClose}\n              stroke=\"red\"\n              strokeDasharray=\"5 5\"\n            />\n          )}",
            "old_summary": {
                "low_unstructured": "This code conditionally renders a ReferenceLine at the current close price on the chart.",
                "low_structured": "• Conditionally adds a ReferenceLine to the chart.\n• The line marks the current close price.",
                "medium_unstructured": "This snippet checks if the current close price is available and, if so, renders a ReferenceLine at that value on the chart. The line is styled with a specific color and dashed pattern, and includes a label indicating it represents the 'Current Close'. This helps visually highlight the latest closing price on the stock chart.",
                "high_structured": "• Checks if currentClose is not null before rendering.\n• If the condition is met, adds a ReferenceLine to the LineChart:\n  ◦ The ReferenceLine is drawn at the y-value equal to currentClose.\n  ◦ The stroke color is set to orange (#ff7300).\n  ◦ The line uses a dashed pattern ('5 5') for visual distinction.\n  ◦ A label 'Current Close' is attached, positioned to the right and colored orange.\n• This line visually highlights the latest closing price on the chart.\n• Enhances chart readability by clearly marking the current close value for users.",
                "medium_structured": "• Checks if currentClose is not null.\n• If true, renders a ReferenceLine at the y-position of currentClose.\n  ◦ The line is orange (#ff7300) and dashed.\n  ◦ A label 'Current Close' is displayed on the right in orange.\n• Visually highlights the latest closing price on the chart.",
                "title": "Conditional Rendering of a ReferenceLine for Current Close Price in StockChart",
                "high_unstructured": "This code conditionally renders a ReferenceLine component from Recharts if the currentClose value is not null, placing the line horizontally at the y-coordinate corresponding to the latest closing price. The line is styled with an orange color (#ff7300) and a dashed pattern ('5 5'), making it visually distinct from other chart elements. Additionally, it includes a label reading 'Current Close', positioned on the right and colored to match the line for clarity. This feature helps users quickly identify the most recent closing price directly on the stock chart."
            }
        },
        "event": "summarize_modified_code",
        "id": "ncL2nXo6xzEJnPGapCkL"
    },
    {
        "timestamp": "2025-08-23 20:40:03.000",
        "source": "frontend",
        "data": {
            "structured": "structured",
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "edited_summary": "• Checks if currentClose is not null.\n• If true, renders a ReferenceLine at the y-position of currentClose.\n  ◦ The line is red and dashed.\n• Visually highlights the latest closing price on the chart.",
            "original_summary": "• Checks if currentClose is not null.\n• If true, renders a ReferenceLine at the y-position of currentClose.\n  ◦ The line is orange (#ff7300) and dashed.\n  ◦ A label 'Current Close' is displayed on the right in orange.\n• Visually highlights the latest closing price on the chart.",
            "detail_level": "medium"
        },
        "event": "commit_modified_summary",
        "id": "yJgU0Jhweu7addrGURLD"
    },
    {
        "timestamp": "2025-08-23 20:40:04.000",
        "source": "backend",
        "data": {
            "summary": "This snippet checks if the current close price is available and, if so, renders a ReferenceLine at that value on the chart. The line is now styled with a red color and a dashed pattern, and no longer includes a label indicating it represents the 'Current Close'. This visually highlights the latest closing price on the stock chart, but without the previous textual annotation.",
            "mapping": [
                {
                    "summaryComponent": "checks if the current close price is available",
                    "codeSegments": [
                        {
                            "line": 54,
                            "code": "currentClose !== null"
                        }
                    ]
                },
                {
                    "summaryComponent": "if so, renders a ReferenceLine at that value on the chart",
                    "codeSegments": [
                        {
                            "line": 55,
                            "code": "<ReferenceLine"
                        },
                        {
                            "line": 56,
                            "code": "y={currentClose}"
                        }
                    ]
                },
                {
                    "summaryComponent": "The line is now styled with a red color",
                    "codeSegments": [
                        {
                            "line": 57,
                            "code": "stroke=\"red\""
                        }
                    ]
                },
                {
                    "summaryComponent": "and a dashed pattern",
                    "codeSegments": [
                        {
                            "line": 58,
                            "code": "strokeDasharray=\"5 5\""
                        }
                    ]
                },
                {
                    "summaryComponent": "no longer includes a label indicating it represents the 'Current Close'",
                    "codeSegments": [
                        {
                            "line": 55,
                            "code": "<ReferenceLine"
                        }
                    ]
                },
                {
                    "summaryComponent": "visually highlights the latest closing price on the stock chart",
                    "codeSegments": [
                        {
                            "line": 56,
                            "code": "y={currentClose}"
                        }
                    ]
                },
                {
                    "summaryComponent": "without the previous textual annotation",
                    "codeSegments": [
                        {
                            "line": 55,
                            "code": "<ReferenceLine"
                        }
                    ]
                }
            ],
            "code": "54:           {currentClose !== null && (\n55:             <ReferenceLine\n56:               y={currentClose}\n57:               stroke=\"red\"\n58:               strokeDasharray=\"5 5\"\n59:             />\n60:           )}"
        },
        "event": "map_summary_code",
        "id": "2eCYcj6X0BmR4KDkjtqi"
    },
    {
        "timestamp": "2025-08-23 20:40:04.000",
        "source": "backend",
        "data": {
            "summary": "• Conditionally adds a ReferenceLine to the chart.\n• The line marks the current close price and is now red without a label.",
            "mapping": [
                {
                    "summaryComponent": "Conditionally adds a ReferenceLine to the chart.",
                    "codeSegments": [
                        {
                            "line": 54,
                            "code": "{currentClose !== null && ("
                        },
                        {
                            "line": 55,
                            "code": "<ReferenceLine"
                        },
                        {
                            "line": 59,
                            "code": "/>"
                        },
                        {
                            "line": 60,
                            "code": ")}"
                        }
                    ]
                },
                {
                    "summaryComponent": "The line marks the current close price",
                    "codeSegments": [
                        {
                            "line": 56,
                            "code": "y={currentClose}"
                        }
                    ]
                },
                {
                    "summaryComponent": "and is now red without a label.",
                    "codeSegments": [
                        {
                            "line": 57,
                            "code": "stroke=\"red\""
                        }
                    ]
                }
            ],
            "code": "54:           {currentClose !== null && (\n55:             <ReferenceLine\n56:               y={currentClose}\n57:               stroke=\"red\"\n58:               strokeDasharray=\"5 5\"\n59:             />\n60:           )}"
        },
        "event": "map_summary_code",
        "id": "YU0RmH5FcDRhVt0a73qc"
    },
    {
        "timestamp": "2025-08-23 20:40:05.000",
        "source": "backend",
        "data": {
            "summary": "This code conditionally renders a ReferenceLine at the current close price on the chart, but now the line is red and no longer includes a label.",
            "mapping": [
                {
                    "summaryComponent": "conditionally renders a ReferenceLine",
                    "codeSegments": [
                        {
                            "line": 54,
                            "code": "{currentClose !== null && ("
                        },
                        {
                            "line": 55,
                            "code": "<ReferenceLine"
                        }
                    ]
                },
                {
                    "summaryComponent": "at the current close price",
                    "codeSegments": [
                        {
                            "line": 56,
                            "code": "y={currentClose}"
                        }
                    ]
                },
                {
                    "summaryComponent": "on the chart",
                    "codeSegments": [
                        {
                            "line": 55,
                            "code": "<ReferenceLine"
                        }
                    ]
                },
                {
                    "summaryComponent": "the line is red",
                    "codeSegments": [
                        {
                            "line": 57,
                            "code": "stroke=\"red\""
                        }
                    ]
                },
                {
                    "summaryComponent": "no longer includes a label",
                    "codeSegments": [
                        {
                            "line": 55,
                            "code": "<ReferenceLine"
                        }
                    ]
                }
            ],
            "code": "54:           {currentClose !== null && (\n55:             <ReferenceLine\n56:               y={currentClose}\n57:               stroke=\"red\"\n58:               strokeDasharray=\"5 5\"\n59:             />\n60:           )}"
        },
        "event": "map_summary_code",
        "id": "SV2WlJSD950NLzzWn1Pf"
    },
    {
        "timestamp": "2025-08-23 20:40:06.000",
        "source": "backend",
        "data": {
            "summary": "• Checks if currentClose is not null before rendering.\n• If the condition is met, adds a ReferenceLine to the LineChart:\n  ◦ The ReferenceLine is drawn at the y-value equal to currentClose.\n  ◦ The stroke color is now set to red (was previously orange).\n  ◦ The line uses a dashed pattern ('5 5') for visual distinction.\n  ◦ The label 'Current Close', previously attached and colored orange, has been removed.\n• This line visually highlights the latest closing price on the chart, but without a descriptive label.\n• Enhances chart readability by clearly marking the current close value for users, though without the previous textual annotation.",
            "mapping": [
                {
                    "summaryComponent": "Checks if currentClose is not null before rendering.",
                    "codeSegments": [
                        {
                            "line": 54,
                            "code": "{currentClose !== null && ("
                        }
                    ]
                },
                {
                    "summaryComponent": "If the condition is met, adds a ReferenceLine to the LineChart:",
                    "codeSegments": [
                        {
                            "line": 55,
                            "code": "<ReferenceLine"
                        }
                    ]
                },
                {
                    "summaryComponent": "The ReferenceLine is drawn at the y-value equal to currentClose.",
                    "codeSegments": [
                        {
                            "line": 56,
                            "code": "y={currentClose}"
                        }
                    ]
                },
                {
                    "summaryComponent": "The stroke color is now set to red (was previously orange).",
                    "codeSegments": [
                        {
                            "line": 57,
                            "code": "stroke=\"red\""
                        }
                    ]
                },
                {
                    "summaryComponent": "The line uses a dashed pattern ('5 5') for visual distinction.",
                    "codeSegments": [
                        {
                            "line": 58,
                            "code": "strokeDasharray=\"5 5\""
                        }
                    ]
                },
                {
                    "summaryComponent": "The label 'Current Close', previously attached and colored orange, has been removed.",
                    "codeSegments": [
                        {
                            "line": 55,
                            "code": "<ReferenceLine"
                        },
                        {
                            "line": 56,
                            "code": "y={currentClose}"
                        },
                        {
                            "line": 57,
                            "code": "stroke=\"red\""
                        },
                        {
                            "line": 58,
                            "code": "strokeDasharray=\"5 5\""
                        }
                    ]
                },
                {
                    "summaryComponent": "This line visually highlights the latest closing price on the chart, but without a descriptive label.",
                    "codeSegments": [
                        {
                            "line": 55,
                            "code": "<ReferenceLine"
                        },
                        {
                            "line": 56,
                            "code": "y={currentClose}"
                        }
                    ]
                },
                {
                    "summaryComponent": "Enhances chart readability by clearly marking the current close value for users, though without the previous textual annotation.",
                    "codeSegments": [
                        {
                            "line": 55,
                            "code": "<ReferenceLine"
                        },
                        {
                            "line": 56,
                            "code": "y={currentClose}"
                        },
                        {
                            "line": 57,
                            "code": "stroke=\"red\""
                        },
                        {
                            "line": 58,
                            "code": "strokeDasharray=\"5 5\""
                        }
                    ]
                }
            ],
            "code": "54:           {currentClose !== null && (\n55:             <ReferenceLine\n56:               y={currentClose}\n57:               stroke=\"red\"\n58:               strokeDasharray=\"5 5\"\n59:             />\n60:           )}"
        },
        "event": "map_summary_code",
        "id": "G6ia7n6AH3SUxL4w2QW6"
    },
    {
        "timestamp": "2025-08-23 20:40:06.000",
        "source": "backend",
        "data": {
            "summary": "This code conditionally renders a ReferenceLine component from Recharts if the currentClose value is not null, placing the line horizontally at the y-coordinate corresponding to the latest closing price. The line is now styled with a red color and a dashed pattern ('5 5'), making it visually distinct from other chart elements, but the label reading 'Current Close' that was previously positioned on the right and colored to match the line has been removed. This feature helps users quickly identify the most recent closing price directly on the stock chart, but without the explicit label.",
            "mapping": [
                {
                    "summaryComponent": "conditionally renders a ReferenceLine component from Recharts",
                    "codeSegments": [
                        {
                            "line": 54,
                            "code": "{currentClose !== null && ("
                        },
                        {
                            "line": 55,
                            "code": "<ReferenceLine"
                        }
                    ]
                },
                {
                    "summaryComponent": "if the currentClose value is not null",
                    "codeSegments": [
                        {
                            "line": 54,
                            "code": "currentClose !== null"
                        }
                    ]
                },
                {
                    "summaryComponent": "placing the line horizontally at the y-coordinate corresponding to the latest closing price",
                    "codeSegments": [
                        {
                            "line": 56,
                            "code": "y={currentClose}"
                        }
                    ]
                },
                {
                    "summaryComponent": "The line is now styled with a red color",
                    "codeSegments": [
                        {
                            "line": 57,
                            "code": "stroke=\"red\""
                        }
                    ]
                },
                {
                    "summaryComponent": "and a dashed pattern ('5 5')",
                    "codeSegments": [
                        {
                            "line": 58,
                            "code": "strokeDasharray=\"5 5\""
                        }
                    ]
                },
                {
                    "summaryComponent": "making it visually distinct from other chart elements",
                    "codeSegments": [
                        {
                            "line": 57,
                            "code": "stroke=\"red\""
                        },
                        {
                            "line": 58,
                            "code": "strokeDasharray=\"5 5\""
                        }
                    ]
                },
                {
                    "summaryComponent": "the label reading 'Current Close' that was previously positioned on the right and colored to match the line has been removed",
                    "codeSegments": [
                        {
                            "line": 55,
                            "code": "No label prop or label element present in <ReferenceLine ... />"
                        }
                    ]
                },
                {
                    "summaryComponent": "This feature helps users quickly identify the most recent closing price directly on the stock chart",
                    "codeSegments": [
                        {
                            "line": 56,
                            "code": "y={currentClose}"
                        }
                    ]
                },
                {
                    "summaryComponent": "but without the explicit label",
                    "codeSegments": [
                        {
                            "line": 55,
                            "code": "No label prop or label element present in <ReferenceLine ... />"
                        }
                    ]
                }
            ],
            "code": "54:           {currentClose !== null && (\n55:             <ReferenceLine\n56:               y={currentClose}\n57:               stroke=\"red\"\n58:               strokeDasharray=\"5 5\"\n59:             />\n60:           )}"
        },
        "event": "map_summary_code",
        "id": "TylZb2U45OLxwfK6HTex"
    },
    {
        "timestamp": "2025-08-23 20:40:14.000",
        "source": "frontend",
        "data": {
            "mapping_index": 2,
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "3igE23dlp9IEd2HACnr8"
    },
    {
        "timestamp": "2025-08-23 20:40:14.000",
        "source": "frontend",
        "data": {
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "EIvHrreQPweRdoHPybfR"
    },
    {
        "timestamp": "2025-08-23 20:40:14.000",
        "source": "frontend",
        "data": {
            "mapping_index": 0,
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "Ej7cMzBXqkPV1uLED09O"
    },
    {
        "timestamp": "2025-08-23 20:40:14.000",
        "source": "frontend",
        "data": {
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "F2TqGjy8xSY6Q8jDG0BR"
    },
    {
        "timestamp": "2025-08-23 20:40:14.000",
        "source": "frontend",
        "data": {
            "mapping_index": 1,
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "JCAo4vb60CtbkS8bYYpG"
    },
    {
        "timestamp": "2025-08-23 20:40:14.000",
        "source": "frontend",
        "data": {
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "LvAxCOaTfmP1MJnGYmtg"
    },
    {
        "timestamp": "2025-08-23 20:40:14.000",
        "source": "frontend",
        "data": {
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "XItZY9Ze1KL2fupDbgXE"
    },
    {
        "timestamp": "2025-08-23 20:40:14.000",
        "source": "frontend",
        "data": {
            "mapping_index": 4,
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "YxNpZGJxheydkHSPPj3Z"
    },
    {
        "timestamp": "2025-08-23 20:40:14.000",
        "source": "frontend",
        "data": {
            "mapping_index": 3,
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "tI1FskeQVTZE7rk1XVXg"
    },
    {
        "timestamp": "2025-08-23 20:40:15.000",
        "source": "frontend",
        "data": {
            "mapping_index": 3,
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "RDg1WIETcV6LrHigHYjy"
    },
    {
        "timestamp": "2025-08-23 20:40:15.000",
        "source": "frontend",
        "data": {
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "epG7mir6AJpS7Uq8GvSb"
    },
    {
        "timestamp": "2025-08-23 20:40:16.000",
        "source": "frontend",
        "data": {
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "8cRByYMNN7BqP3iFuHoS"
    },
    {
        "timestamp": "2025-08-23 20:40:16.000",
        "source": "frontend",
        "data": {
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "9mWAkvK6Pn5GCWTtujrU"
    },
    {
        "timestamp": "2025-08-23 20:40:16.000",
        "source": "frontend",
        "data": {
            "mapping_index": 2,
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "FpxI4cNuiaSu4FEsuNd0"
    },
    {
        "timestamp": "2025-08-23 20:40:16.000",
        "source": "frontend",
        "data": {
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "aWxYMEdGWg07J5G46Zpv"
    },
    {
        "timestamp": "2025-08-23 20:40:16.000",
        "source": "frontend",
        "data": {
            "mapping_index": 1,
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "dxlIn31fcWRBANgLz6vl"
    },
    {
        "timestamp": "2025-08-23 20:40:16.000",
        "source": "frontend",
        "data": {
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "rSODle0C4TrswbsZKkm8"
    },
    {
        "timestamp": "2025-08-23 20:40:16.000",
        "source": "frontend",
        "data": {
            "mapping_index": 0,
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "xQFPmJFYuyAX8aPOm8W9"
    },
    {
        "timestamp": "2025-08-23 20:41:10.000",
        "source": "frontend",
        "data": {
            "mapping_index": 2,
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "2HtMd1KkBgooH82SSOPh"
    },
    {
        "timestamp": "2025-08-23 20:41:10.000",
        "source": "frontend",
        "data": {
            "mapping_index": 1,
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "7n12t5sjoJ3QWrCoK4vN"
    },
    {
        "timestamp": "2025-08-23 20:41:10.000",
        "source": "frontend",
        "data": {
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "TVt0aPkK5IllkRfTPSHL"
    },
    {
        "timestamp": "2025-08-23 20:41:10.000",
        "source": "frontend",
        "data": {
            "mapping_index": 3,
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "WE3cTzuBJkgiR4lX2ruO"
    },
    {
        "timestamp": "2025-08-23 20:41:10.000",
        "source": "frontend",
        "data": {
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "amngGG1QECRuL5pr3EFO"
    },
    {
        "timestamp": "2025-08-23 20:41:10.000",
        "source": "frontend",
        "data": {
            "mapping_index": 4,
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "anRmygd4Qlw8tzg2u3Ed"
    },
    {
        "timestamp": "2025-08-23 20:41:10.000",
        "source": "frontend",
        "data": {
            "mapping_index": 0,
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "hl3tqYmEfy6Yd1VnrViE"
    },
    {
        "timestamp": "2025-08-23 20:41:10.000",
        "source": "frontend",
        "data": {
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "lTBAIwLD6kqZ7mEOrAQu"
    },
    {
        "timestamp": "2025-08-23 20:41:10.000",
        "source": "frontend",
        "data": {
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "nM4UQ7I0Ut9AzhvC1nJQ"
    },
    {
        "timestamp": "2025-08-23 20:41:10.000",
        "source": "frontend",
        "data": {
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "uqGL6rtFjrI1oDn9qais"
    },
    {
        "timestamp": "2025-08-23 20:41:12.000",
        "source": "frontend",
        "data": {
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "2SGag1nzqCmHmSSLFpqC"
    },
    {
        "timestamp": "2025-08-23 20:41:12.000",
        "source": "frontend",
        "data": {
            "mapping_index": 4,
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "4OlxTTgwi2rwPYDC3DSB"
    },
    {
        "timestamp": "2025-08-23 20:41:12.000",
        "source": "frontend",
        "data": {
            "mapping_index": 3,
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "4lOPs5sq1eZa0kJdAJxx"
    },
    {
        "timestamp": "2025-08-23 20:41:12.000",
        "source": "frontend",
        "data": {
            "mapping_index": 4,
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "7VMoGwswTNdOI5uvBKpA"
    },
    {
        "timestamp": "2025-08-23 20:41:12.000",
        "source": "frontend",
        "data": {
            "mapping_index": 3,
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "9Mopjjb9I3bH02bdV0WF"
    },
    {
        "timestamp": "2025-08-23 20:41:12.000",
        "source": "frontend",
        "data": {
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "AMEgtRg06lik5tuUddA5"
    },
    {
        "timestamp": "2025-08-23 20:41:12.000",
        "source": "frontend",
        "data": {
            "mapping_index": 2,
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "CHSBelutPm7S4htOuOCM"
    },
    {
        "timestamp": "2025-08-23 20:41:12.000",
        "source": "frontend",
        "data": {
            "mapping_index": 3,
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "F9xXoPs5Mactekm89G5a"
    },
    {
        "timestamp": "2025-08-23 20:41:12.000",
        "source": "frontend",
        "data": {
            "mapping_index": 4,
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "GeNO6z8Yz3lUpZnIf8Qa"
    },
    {
        "timestamp": "2025-08-23 20:41:12.000",
        "source": "frontend",
        "data": {
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "J1ENpejUMsylpcfM88dG"
    },
    {
        "timestamp": "2025-08-23 20:41:12.000",
        "source": "frontend",
        "data": {
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "RomcPOxXCKDUpuhIGF92"
    },
    {
        "timestamp": "2025-08-23 20:41:12.000",
        "source": "frontend",
        "data": {
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "SHrBK6Sj7gx0T3xfHIii"
    },
    {
        "timestamp": "2025-08-23 20:41:12.000",
        "source": "frontend",
        "data": {
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "XWpYs5XhtKlxlM2CM9t7"
    },
    {
        "timestamp": "2025-08-23 20:41:12.000",
        "source": "frontend",
        "data": {
            "mapping_index": 1,
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "YELy1G4G64BgQo8XvSBK"
    },
    {
        "timestamp": "2025-08-23 20:41:12.000",
        "source": "frontend",
        "data": {
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "cGqfseKUKWe4ytjS8bfH"
    },
    {
        "timestamp": "2025-08-23 20:41:12.000",
        "source": "frontend",
        "data": {
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "eLZ0VteEn35uY1EnPs7d"
    },
    {
        "timestamp": "2025-08-23 20:41:12.000",
        "source": "frontend",
        "data": {
            "mapping_index": 4,
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "enaAaSQXfkjdv3kc4lZ4"
    },
    {
        "timestamp": "2025-08-23 20:41:12.000",
        "source": "frontend",
        "data": {
            "mapping_index": 2,
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "gLUIJt9nngqJuIQtsyLB"
    },
    {
        "timestamp": "2025-08-23 20:41:12.000",
        "source": "frontend",
        "data": {
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "hjajvBmMNrTVW1P4G6w5"
    },
    {
        "timestamp": "2025-08-23 20:41:12.000",
        "source": "frontend",
        "data": {
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "iLQ5FoVjVjskb8bk10XU"
    },
    {
        "timestamp": "2025-08-23 20:41:12.000",
        "source": "frontend",
        "data": {
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "iScBavYpbjPpAJRhxlRi"
    },
    {
        "timestamp": "2025-08-23 20:41:12.000",
        "source": "frontend",
        "data": {
            "mapping_index": 2,
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "jYQx0BDnWk80iYzEMFbt"
    },
    {
        "timestamp": "2025-08-23 20:41:12.000",
        "source": "frontend",
        "data": {
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "nKxUtLia29d5hNswOVNd"
    },
    {
        "timestamp": "2025-08-23 20:41:12.000",
        "source": "frontend",
        "data": {
            "mapping_index": 2,
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "ohFXXtbsQSh8siqga4Du"
    },
    {
        "timestamp": "2025-08-23 20:41:12.000",
        "source": "frontend",
        "data": {
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "rrfzwpwdCqbPLVkiqNfb"
    },
    {
        "timestamp": "2025-08-23 20:41:12.000",
        "source": "frontend",
        "data": {
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "shXhqaypky0VfWbLePnD"
    },
    {
        "timestamp": "2025-08-23 20:41:12.000",
        "source": "frontend",
        "data": {
            "mapping_index": 3,
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "ugaq3cjoBYPHE37QytDU"
    },
    {
        "timestamp": "2025-08-23 20:41:12.000",
        "source": "frontend",
        "data": {
            "mapping_index": 1,
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "wJBgctvMNRW3wBDTLFph"
    },
    {
        "timestamp": "2025-08-23 20:41:14.000",
        "source": "frontend",
        "data": {
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "2QtKLorvLutxBBJDYv1X"
    },
    {
        "timestamp": "2025-08-23 20:41:14.000",
        "source": "frontend",
        "data": {
            "mapping_index": 4,
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "BTlyXw1AKk8XqPtQElgO"
    },
    {
        "timestamp": "2025-08-23 20:41:14.000",
        "source": "frontend",
        "data": {
            "mapping_index": 2,
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "JTzL9BJFhLvkefMB7FlC"
    },
    {
        "timestamp": "2025-08-23 20:41:14.000",
        "source": "frontend",
        "data": {
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "MStySwWikcNVF3Kc0OK7"
    },
    {
        "timestamp": "2025-08-23 20:41:14.000",
        "source": "frontend",
        "data": {
            "mapping_index": 3,
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_hover",
        "id": "WicxsLDUnH4U4EVTHPl5"
    },
    {
        "timestamp": "2025-08-23 20:41:14.000",
        "source": "frontend",
        "data": {
            "section_id": "1a9a1970-c804-4ff9-89e0-c8127f2b4008",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "event": "mapping_unhover",
        "id": "lhMCp71uXSgSa0s2UE4R"
    }
]