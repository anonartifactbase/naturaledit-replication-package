[
    {
        "event": "click_summarize_code",
        "timestamp": "2025-08-22 22:30:00.000",
        "source": "frontend",
        "data": {},
        "id": "lF2LCp09T0GyE7wsdAbm"
    },
    {
        "event": "summarize_selected_code",
        "timestamp": "2025-08-22 22:30:06.000",
        "source": "backend",
        "data": {
            "selected_code": "import React from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  ReferenceLine,\n} from \"recharts\";\n\nconst StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;\n",
            "summary": {
                "low_structured": "• React component for stock price chart\n• Uses Recharts for visualization\n• Displays company and ticker info",
                "low_unstructured": "This code defines a React component that displays a stock price line chart using the Recharts library.",
                "title": "StockChart React Component for Displaying Stock Price Line Charts",
                "medium_unstructured": "The code implements a React component called StockChart that visualizes stock price data as a line chart using Recharts. It takes a data prop, processes it, and displays the company's name, ticker, and price trend over time. The chart includes axes, a legend, and a tooltip for better readability.",
                "medium_structured": "• Defines a StockChart React component\n• Accepts a data prop with company, ticker, and price data\n• Processes and formats the data for Recharts\n• Renders a responsive line chart with axes, legend, and tooltip\n• Displays company name and ticker above the chart",
                "high_unstructured": "This code defines a StockChart React component that visualizes stock price data using the Recharts library. It first checks for valid input data, extracts the company name and ticker, and formats the date and closing price for each data point. The component renders a responsive line chart with axes, a legend, and a tooltip, displaying the price trend over time. The chart is styled with a margin and includes the company name and ticker as a heading.",
                "high_structured": "• Implements a StockChart React component for visualizing stock prices\n• Data handling:\n  ◦ Validates the data prop, ensuring it contains a non-empty data array\n  ◦ Extracts company name and ticker from the data\n  ◦ Maps each data point to an object with date and closing price\n• Chart rendering:\n  ◦ Uses Recharts components (LineChart, Line, XAxis, YAxis, Tooltip, Legend, ResponsiveContainer)\n  ◦ Configures the chart to display dates on the x-axis and prices on the y-axis\n  ◦ Renders a monotone line without dots, colored with a specific stroke\n  ◦ Adds a responsive container with a fixed height and full width\n• UI elements:\n  ◦ Displays the company name and ticker above the chart\n  ◦ Adds margin above the chart for spacing\n• Exports the component as default"
            }
        },
        "id": "GYFEVP8MnUlRmrIqosYU"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-22 22:30:08.000",
        "source": "backend",
        "data": {
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        }
                    ],
                    "summaryComponent": "defines a React component"
                },
                {
                    "codeSegments": [
                        {
                            "line": 35,
                            "code": "<LineChart"
                        },
                        {
                            "line": 43,
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                        }
                    ],
                    "summaryComponent": "displays a stock price line chart"
                },
                {
                    "codeSegments": [
                        {
                            "line": 2,
                            "code": "import {"
                        },
                        {
                            "line": 3,
                            "code": "LineChart,"
                        },
                        {
                            "line": 4,
                            "code": "Line,"
                        },
                        {
                            "line": 5,
                            "code": "XAxis,"
                        },
                        {
                            "line": 6,
                            "code": "YAxis,"
                        },
                        {
                            "line": 7,
                            "code": "Tooltip,"
                        },
                        {
                            "line": 8,
                            "code": "Legend,"
                        },
                        {
                            "line": 9,
                            "code": "ResponsiveContainer,"
                        },
                        {
                            "line": 10,
                            "code": "ReferenceLine,"
                        },
                        {
                            "line": 11,
                            "code": "} from \"recharts\";"
                        }
                    ],
                    "summaryComponent": "using the Recharts library"
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));\n28: \n29:   return (\n30:     <div style={{ marginTop: \"2rem\" }}>\n31:       <h3>\n32:         {company} ({ticker})\n33:       </h3>\n34:       <ResponsiveContainer width=\"100%\" height={300}>\n35:         <LineChart\n36:           data={chartData}\n37:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n38:         >\n39:           <XAxis dataKey=\"date\" />\n40:           <YAxis domain={[\"auto\", \"auto\"]} />\n41:           <Tooltip />\n42:           <Legend />\n43:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n44:         </LineChart>\n45:       </ResponsiveContainer>\n46:     </div>\n47:   );\n48: };\n49: \n50: export default StockChart;\n51: ",
            "summary": "This code defines a React component that displays a stock price line chart using the Recharts library."
        },
        "id": "MjyPhLsQUXKE0WKrDpUt"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-22 22:30:08.000",
        "source": "backend",
        "data": {
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        },
                        {
                            "line": 50,
                            "code": "export default StockChart;"
                        }
                    ],
                    "summaryComponent": "React component for stock price chart"
                },
                {
                    "codeSegments": [
                        {
                            "line": 2,
                            "code": "import {"
                        },
                        {
                            "line": 3,
                            "code": "LineChart,"
                        },
                        {
                            "line": 4,
                            "code": "Line,"
                        },
                        {
                            "line": 5,
                            "code": "XAxis,"
                        },
                        {
                            "line": 6,
                            "code": "YAxis,"
                        },
                        {
                            "line": 7,
                            "code": "Tooltip,"
                        },
                        {
                            "line": 8,
                            "code": "Legend,"
                        },
                        {
                            "line": 9,
                            "code": "ResponsiveContainer,"
                        },
                        {
                            "line": 10,
                            "code": "ReferenceLine,"
                        },
                        {
                            "line": 11,
                            "code": "} from \"recharts\";"
                        }
                    ],
                    "summaryComponent": "Uses Recharts for visualization"
                },
                {
                    "codeSegments": [
                        {
                            "line": 16,
                            "code": "const company = data.name;"
                        },
                        {
                            "line": 17,
                            "code": "const ticker = data.ticker;"
                        },
                        {
                            "line": 31,
                            "code": "<h3>"
                        },
                        {
                            "line": 32,
                            "code": "{company} ({ticker})"
                        }
                    ],
                    "summaryComponent": "Displays company and ticker info"
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));\n28: \n29:   return (\n30:     <div style={{ marginTop: \"2rem\" }}>\n31:       <h3>\n32:         {company} ({ticker})\n33:       </h3>\n34:       <ResponsiveContainer width=\"100%\" height={300}>\n35:         <LineChart\n36:           data={chartData}\n37:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n38:         >\n39:           <XAxis dataKey=\"date\" />\n40:           <YAxis domain={[\"auto\", \"auto\"]} />\n41:           <Tooltip />\n42:           <Legend />\n43:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n44:         </LineChart>\n45:       </ResponsiveContainer>\n46:     </div>\n47:   );\n48: };\n49: \n50: export default StockChart;\n51: ",
            "summary": "• React component for stock price chart\n• Uses Recharts for visualization\n• Displays company and ticker info"
        },
        "id": "tzVEvSX6gaM7OPCbfFuS"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-22 22:30:09.000",
        "source": "backend",
        "data": {
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        },
                        {
                            "line": 50,
                            "code": "export default StockChart;"
                        }
                    ],
                    "summaryComponent": "Defines a StockChart React component"
                },
                {
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        },
                        {
                            "line": 16,
                            "code": "const company = data.name;"
                        },
                        {
                            "line": 17,
                            "code": "const ticker = data.ticker;"
                        },
                        {
                            "line": 24,
                            "code": "const chartData = data.data.map((item) => ({"
                        }
                    ],
                    "summaryComponent": "Accepts a data prop with company, ticker, and price data"
                },
                {
                    "codeSegments": [
                        {
                            "line": 19,
                            "code": "const formatDateString = (date) => {"
                        },
                        {
                            "line": 20,
                            "code": "return date.split(\"T\")[0];"
                        },
                        {
                            "line": 24,
                            "code": "const chartData = data.data.map((item) => ({"
                        },
                        {
                            "line": 25,
                            "code": "date: item.date,"
                        },
                        {
                            "line": 26,
                            "code": "price: item.close,"
                        }
                    ],
                    "summaryComponent": "Processes and formats the data for Recharts"
                },
                {
                    "codeSegments": [
                        {
                            "line": 34,
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                        },
                        {
                            "line": 35,
                            "code": "<LineChart"
                        },
                        {
                            "line": 39,
                            "code": "<XAxis dataKey=\"date\" />"
                        },
                        {
                            "line": 40,
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                        },
                        {
                            "line": 41,
                            "code": "<Tooltip />"
                        },
                        {
                            "line": 42,
                            "code": "<Legend />"
                        },
                        {
                            "line": 43,
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                        }
                    ],
                    "summaryComponent": "Renders a responsive line chart with axes, legend, and tooltip"
                },
                {
                    "codeSegments": [
                        {
                            "line": 31,
                            "code": "<h3>"
                        },
                        {
                            "line": 32,
                            "code": "{company} ({ticker})"
                        }
                    ],
                    "summaryComponent": "Displays company name and ticker above the chart"
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));\n28: \n29:   return (\n30:     <div style={{ marginTop: \"2rem\" }}>\n31:       <h3>\n32:         {company} ({ticker})\n33:       </h3>\n34:       <ResponsiveContainer width=\"100%\" height={300}>\n35:         <LineChart\n36:           data={chartData}\n37:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n38:         >\n39:           <XAxis dataKey=\"date\" />\n40:           <YAxis domain={[\"auto\", \"auto\"]} />\n41:           <Tooltip />\n42:           <Legend />\n43:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n44:         </LineChart>\n45:       </ResponsiveContainer>\n46:     </div>\n47:   );\n48: };\n49: \n50: export default StockChart;\n51: ",
            "summary": "• Defines a StockChart React component\n• Accepts a data prop with company, ticker, and price data\n• Processes and formats the data for Recharts\n• Renders a responsive line chart with axes, legend, and tooltip\n• Displays company name and ticker above the chart"
        },
        "id": "7kwaVzSE8drZQXyTTAUG"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-22 22:30:10.000",
        "source": "backend",
        "data": {
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        },
                        {
                            "line": 50,
                            "code": "export default StockChart;"
                        }
                    ],
                    "summaryComponent": "a React component called StockChart"
                },
                {
                    "codeSegments": [
                        {
                            "line": 35,
                            "code": "<LineChart"
                        },
                        {
                            "line": 43,
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                        }
                    ],
                    "summaryComponent": "visualizes stock price data as a line chart using Recharts"
                },
                {
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        }
                    ],
                    "summaryComponent": "takes a data prop"
                },
                {
                    "codeSegments": [
                        {
                            "line": 24,
                            "code": "const chartData = data.data.map((item) => ({"
                        },
                        {
                            "line": 25,
                            "code": "date: item.date,"
                        },
                        {
                            "line": 26,
                            "code": "price: item.close,"
                        }
                    ],
                    "summaryComponent": "processes it"
                },
                {
                    "codeSegments": [
                        {
                            "line": 16,
                            "code": "const company = data.name;"
                        },
                        {
                            "line": 32,
                            "code": "{company}"
                        }
                    ],
                    "summaryComponent": "displays the company's name"
                },
                {
                    "codeSegments": [
                        {
                            "line": 17,
                            "code": "const ticker = data.ticker;"
                        },
                        {
                            "line": 32,
                            "code": "{ticker}"
                        }
                    ],
                    "summaryComponent": "ticker"
                },
                {
                    "codeSegments": [
                        {
                            "line": 43,
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                        }
                    ],
                    "summaryComponent": "price trend over time"
                },
                {
                    "codeSegments": [
                        {
                            "line": 39,
                            "code": "<XAxis dataKey=\"date\" />"
                        },
                        {
                            "line": 40,
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                        }
                    ],
                    "summaryComponent": "The chart includes axes"
                },
                {
                    "codeSegments": [
                        {
                            "line": 42,
                            "code": "<Legend />"
                        }
                    ],
                    "summaryComponent": "a legend"
                },
                {
                    "codeSegments": [
                        {
                            "line": 41,
                            "code": "<Tooltip />"
                        }
                    ],
                    "summaryComponent": "a tooltip for better readability"
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));\n28: \n29:   return (\n30:     <div style={{ marginTop: \"2rem\" }}>\n31:       <h3>\n32:         {company} ({ticker})\n33:       </h3>\n34:       <ResponsiveContainer width=\"100%\" height={300}>\n35:         <LineChart\n36:           data={chartData}\n37:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n38:         >\n39:           <XAxis dataKey=\"date\" />\n40:           <YAxis domain={[\"auto\", \"auto\"]} />\n41:           <Tooltip />\n42:           <Legend />\n43:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n44:         </LineChart>\n45:       </ResponsiveContainer>\n46:     </div>\n47:   );\n48: };\n49: \n50: export default StockChart;\n51: ",
            "summary": "The code implements a React component called StockChart that visualizes stock price data as a line chart using Recharts. It takes a data prop, processes it, and displays the company's name, ticker, and price trend over time. The chart includes axes, a legend, and a tooltip for better readability."
        },
        "id": "WS1URaXlBSDPwbbEEQmF"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-22 22:30:11.000",
        "source": "backend",
        "data": {
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        }
                    ],
                    "summaryComponent": "defines a StockChart React component"
                },
                {
                    "codeSegments": [
                        {
                            "line": 2,
                            "code": "import {"
                        },
                        {
                            "line": 3,
                            "code": "LineChart,"
                        },
                        {
                            "line": 4,
                            "code": "Line,"
                        },
                        {
                            "line": 5,
                            "code": "XAxis,"
                        },
                        {
                            "line": 6,
                            "code": "YAxis,"
                        },
                        {
                            "line": 7,
                            "code": "Tooltip,"
                        },
                        {
                            "line": 8,
                            "code": "Legend,"
                        },
                        {
                            "line": 9,
                            "code": "ResponsiveContainer,"
                        },
                        {
                            "line": 10,
                            "code": "ReferenceLine,"
                        },
                        {
                            "line": 11,
                            "code": "} from \"recharts\";"
                        }
                    ],
                    "summaryComponent": "visualizes stock price data using the Recharts library"
                },
                {
                    "codeSegments": [
                        {
                            "line": 14,
                            "code": "if (!data || !data.data || !data.data.length) return null;"
                        }
                    ],
                    "summaryComponent": "checks for valid input data"
                },
                {
                    "codeSegments": [
                        {
                            "line": 16,
                            "code": "const company = data.name;"
                        },
                        {
                            "line": 17,
                            "code": "const ticker = data.ticker;"
                        }
                    ],
                    "summaryComponent": "extracts the company name and ticker"
                },
                {
                    "codeSegments": [
                        {
                            "line": 19,
                            "code": "const formatDateString = (date) => {"
                        },
                        {
                            "line": 20,
                            "code": "return date.split(\"T\")[0];"
                        },
                        {
                            "line": 24,
                            "code": "const chartData = data.data.map((item) => ({"
                        },
                        {
                            "line": 25,
                            "code": "date: item.date,"
                        },
                        {
                            "line": 26,
                            "code": "price: item.close,"
                        },
                        {
                            "line": 27,
                            "code": "}));"
                        }
                    ],
                    "summaryComponent": "formats the date and closing price for each data point"
                },
                {
                    "codeSegments": [
                        {
                            "line": 34,
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                        },
                        {
                            "line": 35,
                            "code": "<LineChart"
                        },
                        {
                            "line": 39,
                            "code": "<XAxis dataKey=\"date\" />"
                        },
                        {
                            "line": 40,
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                        },
                        {
                            "line": 41,
                            "code": "<Tooltip />"
                        },
                        {
                            "line": 42,
                            "code": "<Legend />"
                        },
                        {
                            "line": 43,
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                        }
                    ],
                    "summaryComponent": "renders a responsive line chart with axes, a legend, and a tooltip"
                },
                {
                    "codeSegments": [
                        {
                            "line": 43,
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                        }
                    ],
                    "summaryComponent": "displaying the price trend over time"
                },
                {
                    "codeSegments": [
                        {
                            "line": 30,
                            "code": "<div style={{ marginTop: \"2rem\" }}>"
                        }
                    ],
                    "summaryComponent": "styled with a margin"
                },
                {
                    "codeSegments": [
                        {
                            "line": 31,
                            "code": "<h3>"
                        },
                        {
                            "line": 32,
                            "code": "{company} ({ticker})"
                        }
                    ],
                    "summaryComponent": "includes the company name and ticker as a heading"
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));\n28: \n29:   return (\n30:     <div style={{ marginTop: \"2rem\" }}>\n31:       <h3>\n32:         {company} ({ticker})\n33:       </h3>\n34:       <ResponsiveContainer width=\"100%\" height={300}>\n35:         <LineChart\n36:           data={chartData}\n37:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n38:         >\n39:           <XAxis dataKey=\"date\" />\n40:           <YAxis domain={[\"auto\", \"auto\"]} />\n41:           <Tooltip />\n42:           <Legend />\n43:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n44:         </LineChart>\n45:       </ResponsiveContainer>\n46:     </div>\n47:   );\n48: };\n49: \n50: export default StockChart;\n51: ",
            "summary": "This code defines a StockChart React component that visualizes stock price data using the Recharts library. It first checks for valid input data, extracts the company name and ticker, and formats the date and closing price for each data point. The component renders a responsive line chart with axes, a legend, and a tooltip, displaying the price trend over time. The chart is styled with a margin and includes the company name and ticker as a heading."
        },
        "id": "XWdp32gHByR3Jdhax2fp"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-22 22:30:12.000",
        "source": "backend",
        "data": {
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        }
                    ],
                    "summaryComponent": "Implements a StockChart React component for visualizing stock prices"
                },
                {
                    "codeSegments": [
                        {
                            "line": 14,
                            "code": "if (!data || !data.data || !data.data.length) return null;"
                        }
                    ],
                    "summaryComponent": "Validates the data prop, ensuring it contains a non-empty data array"
                },
                {
                    "codeSegments": [
                        {
                            "line": 16,
                            "code": "const company = data.name;"
                        },
                        {
                            "line": 17,
                            "code": "const ticker = data.ticker;"
                        }
                    ],
                    "summaryComponent": "Extracts company name and ticker from the data"
                },
                {
                    "codeSegments": [
                        {
                            "line": 24,
                            "code": "const chartData = data.data.map((item) => ({"
                        },
                        {
                            "line": 25,
                            "code": "date: item.date,"
                        },
                        {
                            "line": 26,
                            "code": "price: item.close,"
                        },
                        {
                            "line": 27,
                            "code": "}));"
                        }
                    ],
                    "summaryComponent": "Maps each data point to an object with date and closing price"
                },
                {
                    "codeSegments": [
                        {
                            "line": 2,
                            "code": "import {"
                        },
                        {
                            "line": 3,
                            "code": "LineChart,"
                        },
                        {
                            "line": 4,
                            "code": "Line,"
                        },
                        {
                            "line": 5,
                            "code": "XAxis,"
                        },
                        {
                            "line": 6,
                            "code": "YAxis,"
                        },
                        {
                            "line": 7,
                            "code": "Tooltip,"
                        },
                        {
                            "line": 8,
                            "code": "Legend,"
                        },
                        {
                            "line": 9,
                            "code": "ResponsiveContainer,"
                        },
                        {
                            "line": 11,
                            "code": "} from \"recharts\";"
                        },
                        {
                            "line": 34,
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                        },
                        {
                            "line": 35,
                            "code": "<LineChart"
                        },
                        {
                            "line": 39,
                            "code": "<XAxis dataKey=\"date\" />"
                        },
                        {
                            "line": 40,
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                        },
                        {
                            "line": 41,
                            "code": "<Tooltip />"
                        },
                        {
                            "line": 42,
                            "code": "<Legend />"
                        },
                        {
                            "line": 43,
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                        }
                    ],
                    "summaryComponent": "Uses Recharts components (LineChart, Line, XAxis, YAxis, Tooltip, Legend, ResponsiveContainer)"
                },
                {
                    "codeSegments": [
                        {
                            "line": 39,
                            "code": "<XAxis dataKey=\"date\" />"
                        },
                        {
                            "line": 40,
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                        }
                    ],
                    "summaryComponent": "Configures the chart to display dates on the x-axis and prices on the y-axis"
                },
                {
                    "codeSegments": [
                        {
                            "line": 43,
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                        }
                    ],
                    "summaryComponent": "Renders a monotone line without dots, colored with a specific stroke"
                },
                {
                    "codeSegments": [
                        {
                            "line": 34,
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                        }
                    ],
                    "summaryComponent": "Adds a responsive container with a fixed height and full width"
                },
                {
                    "codeSegments": [
                        {
                            "line": 31,
                            "code": "<h3>"
                        },
                        {
                            "line": 32,
                            "code": "{company} ({ticker})"
                        }
                    ],
                    "summaryComponent": "Displays the company name and ticker above the chart"
                },
                {
                    "codeSegments": [
                        {
                            "line": 30,
                            "code": "<div style={{ marginTop: \"2rem\" }}>"
                        }
                    ],
                    "summaryComponent": "Adds margin above the chart for spacing"
                },
                {
                    "codeSegments": [
                        {
                            "line": 50,
                            "code": "export default StockChart;"
                        }
                    ],
                    "summaryComponent": "Exports the component as default"
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));\n28: \n29:   return (\n30:     <div style={{ marginTop: \"2rem\" }}>\n31:       <h3>\n32:         {company} ({ticker})\n33:       </h3>\n34:       <ResponsiveContainer width=\"100%\" height={300}>\n35:         <LineChart\n36:           data={chartData}\n37:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n38:         >\n39:           <XAxis dataKey=\"date\" />\n40:           <YAxis domain={[\"auto\", \"auto\"]} />\n41:           <Tooltip />\n42:           <Legend />\n43:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n44:         </LineChart>\n45:       </ResponsiveContainer>\n46:     </div>\n47:   );\n48: };\n49: \n50: export default StockChart;\n51: ",
            "summary": "• Implements a StockChart React component for visualizing stock prices\n• Data handling:\n  ◦ Validates the data prop, ensuring it contains a non-empty data array\n  ◦ Extracts company name and ticker from the data\n  ◦ Maps each data point to an object with date and closing price\n• Chart rendering:\n  ◦ Uses Recharts components (LineChart, Line, XAxis, YAxis, Tooltip, Legend, ResponsiveContainer)\n  ◦ Configures the chart to display dates on the x-axis and prices on the y-axis\n  ◦ Renders a monotone line without dots, colored with a specific stroke\n  ◦ Adds a responsive container with a fixed height and full width\n• UI elements:\n  ◦ Displays the company name and ticker above the chart\n  ◦ Adds margin above the chart for spacing\n• Exports the component as default"
        },
        "id": "fr6SIWdUpemPIjTogYFt"
    },
    {
        "event": "autotransit_section",
        "timestamp": "2025-08-22 22:30:12.000",
        "source": "frontend",
        "data": {
            "before_section_id": null,
            "after_section_id": "3839e55c-f1ec-4e35-b114-b34276949623"
        },
        "id": "n8pN4fwadXFLqZWRhdS2"
    },
    {
        "event": "create_new_section",
        "timestamp": "2025-08-22 22:30:12.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "section_data": {
                "summaryData": {
                    "low_structured": "• React component for stock price chart\n• Uses Recharts for visualization\n• Displays company and ticker info",
                    "low_unstructured": "This code defines a React component that displays a stock price line chart using the Recharts library.",
                    "title": "StockChart React Component for Displaying Stock Price Line Charts",
                    "medium_unstructured": "The code implements a React component called StockChart that visualizes stock price data as a line chart using Recharts. It takes a data prop, processes it, and displays the company's name, ticker, and price trend over time. The chart includes axes, a legend, and a tooltip for better readability.",
                    "medium_structured": "• Defines a StockChart React component\n• Accepts a data prop with company, ticker, and price data\n• Processes and formats the data for Recharts\n• Renders a responsive line chart with axes, legend, and tooltip\n• Displays company name and ticker above the chart",
                    "high_unstructured": "This code defines a StockChart React component that visualizes stock price data using the Recharts library. It first checks for valid input data, extracts the company name and ticker, and formats the date and closing price for each data point. The component renders a responsive line chart with axes, a legend, and a tooltip, displaying the price trend over time. The chart is styled with a margin and includes the company name and ticker as a heading.",
                    "high_structured": "• Implements a StockChart React component for visualizing stock prices\n• Data handling:\n  ◦ Validates the data prop, ensuring it contains a non-empty data array\n  ◦ Extracts company name and ticker from the data\n  ◦ Maps each data point to an object with date and closing price\n• Chart rendering:\n  ◦ Uses Recharts components (LineChart, Line, XAxis, YAxis, Tooltip, Legend, ResponsiveContainer)\n  ◦ Configures the chart to display dates on the x-axis and prices on the y-axis\n  ◦ Renders a monotone line without dots, colored with a specific stroke\n  ◦ Adds a responsive container with a fixed height and full width\n• UI elements:\n  ◦ Displays the company name and ticker above the chart\n  ◦ Adds margin above the chart for spacing\n• Exports the component as default"
                },
                "editPromptValue": "",
                "title": "StockChart React Component for Displaying Stock Price Line Charts",
                "editPromptStructured": null,
                "selectedDetailLevel": "medium",
                "metadata": {
                    "filename": "StockChart.jsx",
                    "fullPath": "/project/workspace/frontend/src/StockChart.jsx",
                    "id": "3839e55c-f1ec-4e35-b114-b34276949623",
                    "originalCode": "import React from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  ReferenceLine,\n} from \"recharts\";\n\nconst StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;\n",
                    "offset": 0
                },
                "createdAt": 1755887412000,
                "lines": [
                    1,
                    51
                ],
                "summaryMappings": {
                    "low_structured": [
                        {
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                },
                                {
                                    "line": 50,
                                    "code": "export default StockChart;"
                                }
                            ],
                            "summaryComponent": "React component for stock price chart"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 2,
                                    "code": "import {"
                                },
                                {
                                    "line": 3,
                                    "code": "LineChart,"
                                },
                                {
                                    "line": 4,
                                    "code": "Line,"
                                },
                                {
                                    "line": 5,
                                    "code": "XAxis,"
                                },
                                {
                                    "line": 6,
                                    "code": "YAxis,"
                                },
                                {
                                    "line": 7,
                                    "code": "Tooltip,"
                                },
                                {
                                    "line": 8,
                                    "code": "Legend,"
                                },
                                {
                                    "line": 9,
                                    "code": "ResponsiveContainer,"
                                },
                                {
                                    "line": 10,
                                    "code": "ReferenceLine,"
                                },
                                {
                                    "line": 11,
                                    "code": "} from \"recharts\";"
                                }
                            ],
                            "summaryComponent": "Uses Recharts for visualization"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 16,
                                    "code": "const company = data.name;"
                                },
                                {
                                    "line": 17,
                                    "code": "const ticker = data.ticker;"
                                },
                                {
                                    "line": 31,
                                    "code": "<h3>"
                                },
                                {
                                    "line": 32,
                                    "code": "{company} ({ticker})"
                                }
                            ],
                            "summaryComponent": "Displays company and ticker info"
                        }
                    ],
                    "low_unstructured": [
                        {
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                }
                            ],
                            "summaryComponent": "defines a React component"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 35,
                                    "code": "<LineChart"
                                },
                                {
                                    "line": 43,
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                                }
                            ],
                            "summaryComponent": "displays a stock price line chart"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 2,
                                    "code": "import {"
                                },
                                {
                                    "line": 3,
                                    "code": "LineChart,"
                                },
                                {
                                    "line": 4,
                                    "code": "Line,"
                                },
                                {
                                    "line": 5,
                                    "code": "XAxis,"
                                },
                                {
                                    "line": 6,
                                    "code": "YAxis,"
                                },
                                {
                                    "line": 7,
                                    "code": "Tooltip,"
                                },
                                {
                                    "line": 8,
                                    "code": "Legend,"
                                },
                                {
                                    "line": 9,
                                    "code": "ResponsiveContainer,"
                                },
                                {
                                    "line": 10,
                                    "code": "ReferenceLine,"
                                },
                                {
                                    "line": 11,
                                    "code": "} from \"recharts\";"
                                }
                            ],
                            "summaryComponent": "using the Recharts library"
                        }
                    ],
                    "medium_structured": [
                        {
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                },
                                {
                                    "line": 50,
                                    "code": "export default StockChart;"
                                }
                            ],
                            "summaryComponent": "Defines a StockChart React component"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                },
                                {
                                    "line": 16,
                                    "code": "const company = data.name;"
                                },
                                {
                                    "line": 17,
                                    "code": "const ticker = data.ticker;"
                                },
                                {
                                    "line": 24,
                                    "code": "const chartData = data.data.map((item) => ({"
                                }
                            ],
                            "summaryComponent": "Accepts a data prop with company, ticker, and price data"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 19,
                                    "code": "const formatDateString = (date) => {"
                                },
                                {
                                    "line": 20,
                                    "code": "return date.split(\"T\")[0];"
                                },
                                {
                                    "line": 24,
                                    "code": "const chartData = data.data.map((item) => ({"
                                },
                                {
                                    "line": 25,
                                    "code": "date: item.date,"
                                },
                                {
                                    "line": 26,
                                    "code": "price: item.close,"
                                }
                            ],
                            "summaryComponent": "Processes and formats the data for Recharts"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 34,
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                                },
                                {
                                    "line": 35,
                                    "code": "<LineChart"
                                },
                                {
                                    "line": 39,
                                    "code": "<XAxis dataKey=\"date\" />"
                                },
                                {
                                    "line": 40,
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                                },
                                {
                                    "line": 41,
                                    "code": "<Tooltip />"
                                },
                                {
                                    "line": 42,
                                    "code": "<Legend />"
                                },
                                {
                                    "line": 43,
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                                }
                            ],
                            "summaryComponent": "Renders a responsive line chart with axes, legend, and tooltip"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 31,
                                    "code": "<h3>"
                                },
                                {
                                    "line": 32,
                                    "code": "{company} ({ticker})"
                                }
                            ],
                            "summaryComponent": "Displays company name and ticker above the chart"
                        }
                    ],
                    "medium_unstructured": [
                        {
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                },
                                {
                                    "line": 50,
                                    "code": "export default StockChart;"
                                }
                            ],
                            "summaryComponent": "a React component called StockChart"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 35,
                                    "code": "<LineChart"
                                },
                                {
                                    "line": 43,
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                                }
                            ],
                            "summaryComponent": "visualizes stock price data as a line chart using Recharts"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                }
                            ],
                            "summaryComponent": "takes a data prop"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 24,
                                    "code": "const chartData = data.data.map((item) => ({"
                                },
                                {
                                    "line": 25,
                                    "code": "date: item.date,"
                                },
                                {
                                    "line": 26,
                                    "code": "price: item.close,"
                                }
                            ],
                            "summaryComponent": "processes it"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 16,
                                    "code": "const company = data.name;"
                                },
                                {
                                    "line": 32,
                                    "code": "{company}"
                                }
                            ],
                            "summaryComponent": "displays the company's name"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 17,
                                    "code": "const ticker = data.ticker;"
                                },
                                {
                                    "line": 32,
                                    "code": "{ticker}"
                                }
                            ],
                            "summaryComponent": "ticker"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 43,
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                                }
                            ],
                            "summaryComponent": "price trend over time"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 39,
                                    "code": "<XAxis dataKey=\"date\" />"
                                },
                                {
                                    "line": 40,
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                                }
                            ],
                            "summaryComponent": "The chart includes axes"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 42,
                                    "code": "<Legend />"
                                }
                            ],
                            "summaryComponent": "a legend"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 41,
                                    "code": "<Tooltip />"
                                }
                            ],
                            "summaryComponent": "a tooltip for better readability"
                        }
                    ],
                    "high_unstructured": [
                        {
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                }
                            ],
                            "summaryComponent": "defines a StockChart React component"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 2,
                                    "code": "import {"
                                },
                                {
                                    "line": 3,
                                    "code": "LineChart,"
                                },
                                {
                                    "line": 4,
                                    "code": "Line,"
                                },
                                {
                                    "line": 5,
                                    "code": "XAxis,"
                                },
                                {
                                    "line": 6,
                                    "code": "YAxis,"
                                },
                                {
                                    "line": 7,
                                    "code": "Tooltip,"
                                },
                                {
                                    "line": 8,
                                    "code": "Legend,"
                                },
                                {
                                    "line": 9,
                                    "code": "ResponsiveContainer,"
                                },
                                {
                                    "line": 10,
                                    "code": "ReferenceLine,"
                                },
                                {
                                    "line": 11,
                                    "code": "} from \"recharts\";"
                                }
                            ],
                            "summaryComponent": "visualizes stock price data using the Recharts library"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 14,
                                    "code": "if (!data || !data.data || !data.data.length) return null;"
                                }
                            ],
                            "summaryComponent": "checks for valid input data"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 16,
                                    "code": "const company = data.name;"
                                },
                                {
                                    "line": 17,
                                    "code": "const ticker = data.ticker;"
                                }
                            ],
                            "summaryComponent": "extracts the company name and ticker"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 19,
                                    "code": "const formatDateString = (date) => {"
                                },
                                {
                                    "line": 20,
                                    "code": "return date.split(\"T\")[0];"
                                },
                                {
                                    "line": 24,
                                    "code": "const chartData = data.data.map((item) => ({"
                                },
                                {
                                    "line": 25,
                                    "code": "date: item.date,"
                                },
                                {
                                    "line": 26,
                                    "code": "price: item.close,"
                                },
                                {
                                    "line": 27,
                                    "code": "}));"
                                }
                            ],
                            "summaryComponent": "formats the date and closing price for each data point"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 34,
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                                },
                                {
                                    "line": 35,
                                    "code": "<LineChart"
                                },
                                {
                                    "line": 39,
                                    "code": "<XAxis dataKey=\"date\" />"
                                },
                                {
                                    "line": 40,
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                                },
                                {
                                    "line": 41,
                                    "code": "<Tooltip />"
                                },
                                {
                                    "line": 42,
                                    "code": "<Legend />"
                                },
                                {
                                    "line": 43,
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                                }
                            ],
                            "summaryComponent": "renders a responsive line chart with axes, a legend, and a tooltip"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 43,
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                                }
                            ],
                            "summaryComponent": "displaying the price trend over time"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 30,
                                    "code": "<div style={{ marginTop: \"2rem\" }}>"
                                }
                            ],
                            "summaryComponent": "styled with a margin"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 31,
                                    "code": "<h3>"
                                },
                                {
                                    "line": 32,
                                    "code": "{company} ({ticker})"
                                }
                            ],
                            "summaryComponent": "includes the company name and ticker as a heading"
                        }
                    ],
                    "high_structured": [
                        {
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                }
                            ],
                            "summaryComponent": "Implements a StockChart React component for visualizing stock prices"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 14,
                                    "code": "if (!data || !data.data || !data.data.length) return null;"
                                }
                            ],
                            "summaryComponent": "Validates the data prop, ensuring it contains a non-empty data array"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 16,
                                    "code": "const company = data.name;"
                                },
                                {
                                    "line": 17,
                                    "code": "const ticker = data.ticker;"
                                }
                            ],
                            "summaryComponent": "Extracts company name and ticker from the data"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 24,
                                    "code": "const chartData = data.data.map((item) => ({"
                                },
                                {
                                    "line": 25,
                                    "code": "date: item.date,"
                                },
                                {
                                    "line": 26,
                                    "code": "price: item.close,"
                                },
                                {
                                    "line": 27,
                                    "code": "}));"
                                }
                            ],
                            "summaryComponent": "Maps each data point to an object with date and closing price"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 2,
                                    "code": "import {"
                                },
                                {
                                    "line": 3,
                                    "code": "LineChart,"
                                },
                                {
                                    "line": 4,
                                    "code": "Line,"
                                },
                                {
                                    "line": 5,
                                    "code": "XAxis,"
                                },
                                {
                                    "line": 6,
                                    "code": "YAxis,"
                                },
                                {
                                    "line": 7,
                                    "code": "Tooltip,"
                                },
                                {
                                    "line": 8,
                                    "code": "Legend,"
                                },
                                {
                                    "line": 9,
                                    "code": "ResponsiveContainer,"
                                },
                                {
                                    "line": 11,
                                    "code": "} from \"recharts\";"
                                },
                                {
                                    "line": 34,
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                                },
                                {
                                    "line": 35,
                                    "code": "<LineChart"
                                },
                                {
                                    "line": 39,
                                    "code": "<XAxis dataKey=\"date\" />"
                                },
                                {
                                    "line": 40,
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                                },
                                {
                                    "line": 41,
                                    "code": "<Tooltip />"
                                },
                                {
                                    "line": 42,
                                    "code": "<Legend />"
                                },
                                {
                                    "line": 43,
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                                }
                            ],
                            "summaryComponent": "Uses Recharts components (LineChart, Line, XAxis, YAxis, Tooltip, Legend, ResponsiveContainer)"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 39,
                                    "code": "<XAxis dataKey=\"date\" />"
                                },
                                {
                                    "line": 40,
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                                }
                            ],
                            "summaryComponent": "Configures the chart to display dates on the x-axis and prices on the y-axis"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 43,
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                                }
                            ],
                            "summaryComponent": "Renders a monotone line without dots, colored with a specific stroke"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 34,
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                                }
                            ],
                            "summaryComponent": "Adds a responsive container with a fixed height and full width"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 31,
                                    "code": "<h3>"
                                },
                                {
                                    "line": 32,
                                    "code": "{company} ({ticker})"
                                }
                            ],
                            "summaryComponent": "Displays the company name and ticker above the chart"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 30,
                                    "code": "<div style={{ marginTop: \"2rem\" }}>"
                                }
                            ],
                            "summaryComponent": "Adds margin above the chart for spacing"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 50,
                                    "code": "export default StockChart;"
                                }
                            ],
                            "summaryComponent": "Exports the component as default"
                        }
                    ]
                },
                "editPromptDetailLevel": null,
                "selectedStructured": "unstructured"
            }
        },
        "id": "yJsfbmtzvXNXFHXimNq6"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:30:20.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 1,
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "AKOrbpfVued14S8MOEn1"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:30:20.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "DCEr6VSTDIri61Y3U9KK"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:30:20.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 3,
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "v5lCCcXGTUwwPeTQbCYk"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:30:21.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "GLCTlS4ASSRIzDOqxbig"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:30:21.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 1,
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "I8QVfOApIwnWN9ezP31C"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:30:21.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "LI0YrtdnJg6lUEUUx3TX"
    },
    {
        "event": "change_summary_level",
        "timestamp": "2025-08-22 22:30:22.000",
        "source": "frontend",
        "data": {
            "before_detail_level": "medium",
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "after_detail_level": "high",
            "before_structured": "unstructured",
            "after_structured": "unstructured"
        },
        "id": "Dtf7rnXZhvkK6mRli7AC"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:30:22.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 0,
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "sql82qE1Kzk5DvA3n9P3"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:30:22.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "tvAIc5J5NXFvKdqusY9S"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:30:23.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "2Boi5PhGW1F7JOTR6Sew"
    },
    {
        "event": "change_summary_level",
        "timestamp": "2025-08-22 22:30:23.000",
        "source": "frontend",
        "data": {
            "before_detail_level": "high",
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "after_detail_level": "high",
            "before_structured": "unstructured",
            "after_structured": "structured"
        },
        "id": "MeUsr1CdtjFjlWIlNItz"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:30:23.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 0,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "bPm3G6R0XPuNzfxhLW6X"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:30:23.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 1,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "sYC3NYbZbDeNj93ehYcX"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:30:24.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "NeCHfhNq2TlsI515iyaD"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:30:25.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 1,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "bth7rwFRb2YwLOa6s72k"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:30:27.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "bF6kJMmwR9F4WirDkYZD"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:30:28.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 2,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "DF8kqXqdllC5pioh9SEj"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:30:29.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 3,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "tClPRcz39X1F02rFRhMg"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:30:29.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "xBvwEpok7tGphkx1IeGw"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:30:30.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 4,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "Zonc2ruVALmilejPTbPy"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:30:30.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "woCOwm8IQpUdyL8gvLtH"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:30:32.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "GnbNi8cwpNukVvaZETPz"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:30:32.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 5,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "TFkoq3A0qTzT8nXNPyUQ"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:30:34.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "ED9W0agQl5jQ7f2TVOwx"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:30:34.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 10,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "NHQsaanHxv3ZzIuoWQQv"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:30:34.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 7,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "SHxuwNUe5vMYBC1cxcra"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:30:34.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "YwTHPwvt1is3vUVlWyge"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:30:34.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 5,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "aW8Imhl6ZKfFPbebeiiL"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:30:34.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "fsA722EEZIpD23bmi0k5"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:30:34.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 8,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "hAccK6shTEWPdkzLWBei"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:30:34.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 6,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "kpjkKxJlAefqB4Kmz88p"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:30:34.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "oBIqMw9tMYKlJYo62hkK"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:30:34.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 9,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "uS2KTbXQX9yY6ZHXsS76"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:30:34.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "wrsfK8fZqrNXERZkFJgW"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:30:34.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "yCA7k041oktJH0jwajWy"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:30:36.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 6,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "E8aiNkKPT8zahi7wBOSB"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:30:36.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "deyavUDB97OrIRWAHdLk"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:30:37.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "4cLOCHyCdlc2lE94lnyA"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:30:42.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 4,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "3oLxrKybKrgqe4YfmRHA"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:30:42.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "4eduC7ITQvCi6igaDr4v"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:30:42.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "MmiPndYFnKg7qoj3ZTBz"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:30:42.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 6,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "SnA8JBHYo0SAL0VONG8n"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:30:42.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 5,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "XHsIfbpdOwoeMf3dfVaO"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:30:42.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "ltsM8DZCuLqZ8q3lPzCW"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:30:45.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 5,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "WZbsLq9ZdydsJTd8wxLD"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:30:46.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "300INQiHh5NQW72z9SYv"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:30:46.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "7xNWTLixhkIgyyeeyxH1"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:30:46.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 7,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "FvGY7SGY3cuJfNwrg4Tc"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:30:46.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "SuxFel7EiGge8rvNn4pA"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:30:46.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 5,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "U4QYxrgRbPfu4EUJ7MlL"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:30:46.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "fke6ySalgUDXbcTm96jP"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:30:46.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 6,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "hpcv1zwegit9TgWxJwL7"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:30:46.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 5,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "pOfoPTWdoWAvEgxsocci"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:30:47.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "1nbRnOBKFOrTy7ZmDLaS"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:30:47.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "K1M0fZa4IzZd9asQiLyW"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:30:47.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 6,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "lStXDj7QOCKq5d3VnhAz"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:30:48.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 5,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "BcT4DA4vWbYQzMveOQ4V"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:30:49.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 4,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "9oF6qEDofEbWSfTzWu1h"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:30:49.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "abiIZojDVLpKRWnmAyPn"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:30:49.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "sXii4cxCMiBkjg9kmNmH"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:30:49.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 3,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "zoL0NY5voqT5AA9YII6D"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:30:51.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 2,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "DYlSh6fdJpDDM07FFvlt"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:30:51.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "oDxbXqqqtrz4rj4HC0Ez"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:30:56.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "07YQqDbKhCIYN4g4pmpe"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:30:59.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 2,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "PlDvoXPOsf1fNo8R45Mj"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:31:00.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "8pLxputkaYh4tlwJtlgq"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:31:00.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "KpGzGySJ4GjiKjj7GsnJ"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:31:00.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 1,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "dYBjvaKlDuvgD0eyEk77"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:31:00.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 3,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "oCFhn6BRBSaVdlq7fBF1"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:31:00.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "y2KiijhukTt5MzWKEC6H"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:31:14.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "5BBzgJT7npofHDJW6MVE"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:31:14.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "OaSZujnZqSH2vzDWusGC"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:31:14.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 5,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "YkSzhpkaa6guVbKNfUAv"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:31:14.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 4,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "wcN6zZqTVofMJ3Ygo5Qt"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:31:21.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 4,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "OV8yP2n5ikTq9mBj3SZz"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:31:22.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 3,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "KZsZxydoj1VUoFpHS8B1"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:31:22.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "j2I3VOpCBJH06DLgRikJ"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:31:23.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 2,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "BlIadfAqRc8nM7SPO76O"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:31:23.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 0,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "FRnRfhxiwKVdvUO8NPei"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:31:23.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "Mr8Sj9vYRpUZaJLdRyCx"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:31:23.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "aJ1UYmWzF8HYiobx7Xkc"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:31:24.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "IP6pgz0cJ08Txgl3f6RT"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:31:30.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 6,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "VocSex2OCJnlNco2G9OW"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:31:30.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 1,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "lQ8QGEqfc2F4zCZBCiax"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:31:30.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "uUVuOhdSR9WL8ATJivgs"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:31:32.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "XGpYTn3jUKcfEEvwoKvT"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:31:40.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "0XBaOtFpbwrWjmwDFfIt"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:31:40.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "IzKc1UMmHz9zQvTZmIEp"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:31:40.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 6,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "K5JJVkiEPZSCpi7D27P9"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:31:40.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 5,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "oAhntQsJOS1mO0V9en71"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:32:07.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 1,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "8CZeoLIfxpakxu4vFXIZ"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:32:07.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 8,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "8g1QuI27QA65oiRLJGVo"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:32:07.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "Jze4aFH5cJl9ztzFmQF4"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:32:07.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 5,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "bWhcLeSfQ03cHuEYCnNA"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:32:07.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 6,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "d2ReoH0IfLUMg4FqAs4w"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:32:07.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 10,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "erauSTDzZTYakM2dfL2H"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:32:07.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "jY2H1XEyD3kpq8fvQpr5"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:32:07.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "lgTHWETjAU6FVDz2Qz9n"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:32:07.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "lmeiBoKQV1pgciZYfiof"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:32:07.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 4,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "ozW67CsbiLYCoaGxBDq0"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:32:07.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "ud1QcD3NKe0VRyeXgMMP"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:32:07.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "x4aTNLTFKmO88Ua7M670"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:32:09.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 10,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "6Smo4oHC0sItewgm2v60"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:32:09.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 8,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "EUmWUDjkLQSHYj07BkUl"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:32:09.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "TYR4YAHEk2X8HnIqcRyt"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:32:09.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 9,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "VBNrtgrkxASQk3rwhdB5"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:32:09.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "rZMvLdfh9bqHIAXgrM4a"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:32:09.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "tgMQ22ZYUVNto7xNtnqe"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:32:18.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 0,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "u4fhYELtLyThgSlXHDBn"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:32:19.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "c7TxVGiniIGYfFxghKdV"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:32:20.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 1,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "OtYpvadA6AKl6QEVvGYT"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:32:25.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 2,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "fiB4R4PwFFAjqbWsLTNE"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:32:25.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "uxbtQlvlvLa5mj4Zxj4P"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:32:26.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 3,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "88X9PBTHOVVN8oK6jH3M"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:32:26.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "wIrOKegNW38uAdMKpaiJ"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:32:27.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "BTImAKrqEl50gPluvuQ5"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:32:32.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 0,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "9C879uOXqktGMveh4oML"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:32:32.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "Ecvr2gh4iBxIa7zAbMgB"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:32:32.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 0,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "HSyo1be5tIpl1IEpXBzf"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:32:32.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 0,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "Uhv8KDPeiGXeuiLrmK74"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:32:32.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "aYdp6IBORHed2SuhlUbC"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:32:32.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 1,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "fRqe8XJ1nq7CjOJyn1zp"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:32:32.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "htf8ipvgOxZooVP5JZJZ"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:32:32.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "pPHJz7mVN3GRqZWoBPLS"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:32:33.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "CtjUl9phSPC2oMPpglwo"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:32:33.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 3,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "DxCip6QuP1KWrLPqXBv7"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:32:33.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "OY4qoiGfoRaFc33UYmGq"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:32:33.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 2,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "Ohe2wonrIOY8h1n0VOOK"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:32:33.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 2,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "lHdzItYWicYnbDprgfwh"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:32:34.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 3,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "IJAWEdcf8xiPoYB2Exfo"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:32:34.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "oN0cauMQ58x3aWV2U25f"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:32:35.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "DlHhpax5Pi5fmKfP5nnS"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:32:35.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 4,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "uoU6s621PsHJLKqXtf3Q"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:32:37.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "Eg8gy2xOZWPpvucCs3Fy"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:32:38.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 4,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "xk9QcLBBF8gJyFQvUrel"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:32:39.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "5bcnfSxB9OQDkubxak2W"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:32:39.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 5,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "9NByRrmi7zAKPF9KNQlM"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:32:40.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 7,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "GYn7HC9IrvodST0MCsTM"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:32:40.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "IVsklv0KqtlqfK3RjfdH"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:32:40.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "baBYdSwiZw3eQ2aKIk1C"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:32:40.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 6,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "yfWh5Yul3aKvvfznkhyJ"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:32:41.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "5A6b9d85HHM6FYAXyzry"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:32:41.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 8,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "aLog520nvUyrzMIfwWVd"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:32:42.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 10,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "8k5bMZUB01ul4u410EoZ"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:32:42.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 9,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "CBlwiytdkqo5Z78ivjYS"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:32:42.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 9,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "ENHik3IqUZJKxmCbAOnr"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:32:42.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "OMzWvymipTL7TACo50Ag"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:32:42.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "P3tNj2ciXhHTzahi4bsO"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:32:42.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "Zr3FbvJGzubeGLo5TWqm"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:32:42.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "allMo8cOn8ykvix1Q5JW"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:32:42.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "swLQD1TslW1zXvP6Zoq9"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:32:42.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 8,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "va7j4skhoDFd1s5eWyJL"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:32:43.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "UsgDFNtS7G8RH6hAZrjX"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:32:43.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 7,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "aOaNe6MwRq4va1zd7Zh9"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:32:43.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 5,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "qiGdQWt6yGx8xjwK8w0o"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:32:43.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "tVAfBIqRGPMxMZcAl1QT"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:32:43.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 6,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "xsUlq5sxz05KpcfkLmbM"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:32:44.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "49HFKrzTu1afK07RhnhJ"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:32:44.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 0,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "BvGoWMSEoFq2Mb7mkQky"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:32:44.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 3,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "JK96ZYeRMonE6SeVk9wI"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:32:44.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 2,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "Jgj1QhQ2CG2HqAa5t2ey"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:32:44.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 1,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "Kbltrav1vHIVvpwLGXde"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:32:44.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "LgvHWiH2i5xNxpANSogB"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:32:44.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 4,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "St3TgBY5Jha0ugES3CR8"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:32:44.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "Vd0CiP9RBh1TXG8cuNGk"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:32:44.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "Vz4MObljUKMhQ6VKXcM0"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:32:44.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 1,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "mPld7hBdJGcuFbxTNCUV"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:32:44.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "o5nXWJjpVQ24ItPZbGMI"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:32:44.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "wRUizCvFGrWmnrLeNmp6"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:32:45.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 0,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "AU3M7RiawUos0IZhlDJl"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:32:45.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 0,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "b6R7TXDtfyBuwU3c2MFB"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:32:45.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "blxbHUB1IXjWQV4xFU1y"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:32:45.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "oxfgxbL7TTbxdCVzIVJT"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:32:46.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "9ILWlAVVFTUWIO42lsYH"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:32:46.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "IeW0lBMRC4qP5MqElSP5"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:32:46.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 1,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "M3npQUTQq0pjIIGnGZ2W"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:32:49.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "0Qa0CySTvIf5X8eVaYa2"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:32:49.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "6PzN9IeA7LBJiVIi76es"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:32:49.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 3,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "BqAfupUqIGhgCvirV3Oc"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:32:49.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "IoQI1wdwrqRBUu0uk0T0"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:32:49.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 2,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "OtR4iFfXU5Ed6HwmyB2r"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:32:49.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "W38t9rl1GpZUEUt3GFnS"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:32:49.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 5,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "m5Rf9YRFp3rC9n93h1d1"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:32:49.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 4,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "u9HB5veBfE1mb8hJDOJ9"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:32:50.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 5,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "DW8r1q6AA6xDHnBzUyH6"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:32:50.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "okljEwFGTI7NS1td2Vsc"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:32:51.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "5tn12PYxL8mY2NTLiuSJ"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:32:51.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "BYQKlBGOuRcwWsayLzoF"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:32:51.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 9,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "HqR6bamUYBRcxA8qQ4kl"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:32:51.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "Lo1qK2gPmhIeSQ1VOOaZ"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:32:51.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "RYCkiEH9PtRUwehaytFh"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:32:51.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 8,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "ieUuKf2GRCDQiwX49zzX"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:32:51.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 6,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "veHkldGsXH1AVfhZFl0M"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:32:51.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 7,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "w2vvVfQkTzhpuY5egib9"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:33:18.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "BSsDFLnCjff7oDjiFF1r"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:33:18.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 5,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "Gz6wb859whEtKUt6tyRP"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:33:18.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "LNarJxZiKaKddYmi7RS4"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:33:18.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "UNiGDGKTuUdd3egrmJ2t"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:33:18.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 10,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "VHQU6p8gxhwIuD5Y1iJn"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:33:18.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "XUvlDhw4NAWvLwcPtv9J"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:33:18.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 6,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "a6kHJREINB9gFLLbpOuT"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:33:18.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 9,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "bmFAFQOd5luRSIzy7dgT"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:33:18.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 7,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "ecQEtbzw4FapnAIGb1BR"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:33:18.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "ivxKWUfBCXE4wtjkrcSm"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:33:18.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 8,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "j7nR0Szd3OKnEaoLyA9c"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:33:18.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 4,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "noKwnIYWlWfSIskvhj4T"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:33:18.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "wKrvOtP6vccgFzz3OqQE"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:33:18.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "yhLJb6eJDFzYbemwN9Zl"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:33:19.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 10,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "4n91wb8XI6DB1Cx6tlIv"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:33:19.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "ExIf8gvosJplpLaGVBye"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:33:19.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "VLkueXfzdc13yiOpLGDV"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:33:19.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 8,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "mYmntlpysCbhBRKUAv7u"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:33:19.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "n6VKy01VTshTQkppYCOl"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:33:19.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 6,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "ycmNxblAjTJAgu4rBMNQ"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:33:20.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "WuwhMdLraTLzjKUXaIwG"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:33:20.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 6,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "ruXWVymQeeZXR7M2xenE"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:33:28.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 5,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "4iYwwuUZsTkSD9phtkTT"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:33:28.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "FUzG3DXSdqG0PL5yAEh9"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:33:28.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "H3GS1z8K7g6JCXGV7D3r"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:33:28.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 9,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "Mq2VdzwhH92x8M7UJlWB"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:33:28.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 2,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "My0tjYPZZbymS9kcOf2C"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:33:28.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 4,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "QkWl42iMHcB4emEsMelW"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:33:28.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 3,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "U6NFoscca7eRwTfKVjyJ"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:33:28.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 6,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "X2Mm5kwW2yex29Inaepr"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:33:28.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 7,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "Xp869VNhDxZZ5sCvNlYe"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:33:28.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "c7kdOxrkUghNWnqoRV2B"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:33:28.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "eTnIGSxXoQ8fCoPxUQms"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:33:28.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 8,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "izeqh7J0uKvz3796xzLP"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:33:28.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "oztkX6R8TgaB7zFJNRve"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:33:28.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "tXMZIWV1U2LfOba0pmkh"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:33:28.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "zs3rLIaL52O00JmZVnIO"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:33:29.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "H3uGaM7mxtLglpIoDtzt"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:33:29.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 0,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "RyAQqxvoAPxM8OIo8FEH"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:33:29.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "afIePSQW7syb4m1J2xiP"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:33:29.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 1,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "y0x3z8Tzzx6dp6hx1JZF"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:33:29.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "zLpQvifeTZFwOG7vJIX5"
    },
    {
        "event": "change_summary_level",
        "timestamp": "2025-08-22 22:33:33.000",
        "source": "frontend",
        "data": {
            "before_detail_level": "high",
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "after_detail_level": "medium",
            "before_structured": "structured",
            "after_structured": "structured"
        },
        "id": "zq6mD4P8xNF4J2qals3b"
    },
    {
        "event": "change_summary_level",
        "timestamp": "2025-08-22 22:33:34.000",
        "source": "frontend",
        "data": {
            "before_detail_level": "medium",
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "after_detail_level": "low",
            "before_structured": "structured",
            "after_structured": "structured"
        },
        "id": "zHpqWdsRDik6ztaFZu79"
    },
    {
        "event": "change_summary_level",
        "timestamp": "2025-08-22 22:33:37.000",
        "source": "frontend",
        "data": {
            "before_detail_level": "low",
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "after_detail_level": "medium",
            "before_structured": "structured",
            "after_structured": "structured"
        },
        "id": "JmcF5mHMlekreIqU07cp"
    },
    {
        "event": "change_summary_level",
        "timestamp": "2025-08-22 22:33:37.000",
        "source": "frontend",
        "data": {
            "before_detail_level": "medium",
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "after_detail_level": "high",
            "before_structured": "structured",
            "after_structured": "structured"
        },
        "id": "oJw3NyFNJh2sy2pgRf3p"
    },
    {
        "event": "change_summary_level",
        "timestamp": "2025-08-22 22:33:38.000",
        "source": "frontend",
        "data": {
            "before_detail_level": "high",
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "after_detail_level": "medium",
            "before_structured": "structured",
            "after_structured": "structured"
        },
        "id": "0TIcauMNLn4X73ekwgBH"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:33:41.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "IOttFrphk842RUqYktQb"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:33:41.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 1,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "i9BCHO7f97Dg6f6vCWkO"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:33:41.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "kcCWgxYqZPHu2pFjofce"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:33:41.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 0,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "nsOqFSh92DJ2lHtcUHyg"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:33:41.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 2,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "zaB4BoKOiKZbJIDFqHF1"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:33:42.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "2sVYsiFhMJOrnAmaRb3E"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:33:42.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 4,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "PCMyQwuGaXiPjiZ2ujez"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:33:42.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "S4uyJjWNhJThzpUJ2oel"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:33:42.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "hmIkZZJ6GNnWy9TnaL6D"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:33:42.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 3,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "rzpNQScGJOlOe60IBSqy"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:33:44.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "3UuaXYc2zGG6rKosXS35"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:33:44.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 1,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "JALaGV1blaMjYFhbskG1"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:33:44.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 2,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "NodBuh0mhGqdHs6nHZo7"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:33:44.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 2,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "Qm8QMz4UVP2HBfgoco1R"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:33:44.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "g3MCXnetSALmAIOlA1SY"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:33:44.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 3,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "nGNnf4ESrtOtvHpvO0wA"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:33:44.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "zODdywiJxVJxQIptrnct"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:33:46.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "PZpSSgPpGxWBWUroqQwF"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:33:46.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 1,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "XMep87DwUepu3XynLHhN"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:33:46.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "cFhxtiQeA6OxXgiZLmQM"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:33:46.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 0,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "kxWa3eZNUdiOjMquOEWr"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:33:46.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "yp62SOia3hnryK0wZjoh"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:33:47.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 0,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "42Xj67ijof01ExU1WqXt"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:33:47.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 2,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "6Gts7mNPTKYG4uyOZRWS"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:33:47.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 1,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "7aLeGuMbNDkERTQau4OX"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:33:47.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 3,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "KK0YMIxBSwpvHrhvudwX"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:33:47.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "QPZKJWPovVH1h0zsuTUA"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:33:47.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "cOR4jATbIZumaZbmi7Ej"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:33:47.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "iRbLzXHGy8Dh86m9qBxp"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:33:47.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "kdQp55GkejGWUxJH72Rp"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:33:47.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 2,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "usqO3x5YsQH342BTzgoj"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:33:49.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 0,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "AbxQEek53WgdL5TtpfIl"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:33:49.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 1,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "P6V9zwZKomvkjUpKJHwg"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:33:49.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "TmufT7SQZNNtTfZAwOC9"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:33:49.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "bDEzzSbaCCHuW2BvYieS"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:33:49.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "nBcvztZUoTxl2Z5KTtwj"
    },
    {
        "event": "change_summary_level",
        "timestamp": "2025-08-22 22:33:50.000",
        "source": "frontend",
        "data": {
            "before_detail_level": "medium",
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "after_detail_level": "high",
            "before_structured": "structured",
            "after_structured": "structured"
        },
        "id": "F26lXODdmf6cT4dVsJII"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:33:50.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 0,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "R7UZa2LDO3Ke3qsIOVRg"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:33:50.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "aHswH1JIWheBjADSqwbV"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:33:50.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 1,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "ktHpgzesCHUys7dCHGSc"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:33:50.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "yrSg2uLuPzRXyhk872vp"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:33:51.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 3,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "4asyO9gFZzrz2GdEnL4L"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:33:51.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "EsP2PHaqyLwNzo4PnfOS"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:33:51.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "LAY3CWNyf9NBKdB3x8Cy"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:33:51.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 4,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "Un81yF2EmbIHas0gEOEd"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:33:51.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 2,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "Y8qFh4XmQeXUV1TwJ5QU"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:33:51.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "qtusBORUjQFJSrzptEoh"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:33:51.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 5,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "uh9Jqntpl5RRTDwAzH84"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:33:52.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 6,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "IHY8QZ1wCW7sNuIUGTyh"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:33:52.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 7,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "JMjvKvzLEFPwtx9ZP5a3"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:33:52.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "Ms77cIp9pfOfeVufgw5v"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:33:52.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "heMspn4Ha77YowDyKB0L"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:33:52.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "wkALDjuCh7EhlqRsierI"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:33:53.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "4D6m3l7NGwfnOicHqIVb"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:33:53.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "Xqbn0FaKzVUBPyYIj7b1"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:33:53.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 5,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "fFU2CFGRdYZEA5YtcyPa"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:33:53.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 6,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "gcgvjC5WlgRIDIqNlJAI"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:33:53.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 7,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "rJixfagV0MGrukiKzMuG"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:33:54.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "5xuq50JbowUqumI7S8Sw"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:33:54.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "c59wqHgTsIcHPuTk9Q2A"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:33:54.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 4,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "fZiRUYkxqh1eVLbPDfrQ"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:33:54.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 3,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "hZSJXWJNHqsy0YTqV81Y"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:33:55.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 2,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "oyWktK10jARVPo0yfWK1"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:33:55.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "pw4mgKNULiZy3Eak9OKR"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:33:56.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "H5E8kjJSMTdP74Ftsa63"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:33:57.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "00LJ0zZp7zgwpC25IkgJ"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:33:57.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 1,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "D14yiMqca1sHd8SSwLCi"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:33:57.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 0,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "TTvIIJd2hHLxvXXkLG8U"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:33:57.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "jACucmWFSUwMcFec74hS"
    },
    {
        "event": "change_summary_level",
        "timestamp": "2025-08-22 22:34:00.000",
        "source": "frontend",
        "data": {
            "before_detail_level": "high",
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "after_detail_level": "medium",
            "before_structured": "structured",
            "after_structured": "structured"
        },
        "id": "xFQRECItKwYeoWwZQTlu"
    },
    {
        "event": "change_summary_level",
        "timestamp": "2025-08-22 22:34:01.000",
        "source": "frontend",
        "data": {
            "before_detail_level": "medium",
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "after_detail_level": "low",
            "before_structured": "structured",
            "after_structured": "structured"
        },
        "id": "rTrKn8W58eyfFbMXFHPl"
    },
    {
        "event": "change_summary_level",
        "timestamp": "2025-08-22 22:34:02.000",
        "source": "frontend",
        "data": {
            "before_detail_level": "low",
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "after_detail_level": "medium",
            "before_structured": "structured",
            "after_structured": "structured"
        },
        "id": "XVmENTWU3Bfk5gbcSUu7"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:34:03.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "30RWNaLXqbrDa4W96WlC"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:34:03.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 2,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "3AFdfzOVDYiUeYaKL4ID"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:34:03.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 1,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "VsBxRZxLcmwRI0NbuZh5"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:34:03.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 0,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "cteTczgGLRAYGy9kPISk"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:34:03.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "mFhWyA1qlNPtBFiouwEb"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:34:10.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 1,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "CKw6ULvrP5bVBX8vYZCf"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:34:10.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "ndPzFWTzfJqqTwWSKVbr"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:34:10.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "u9wRvetCc1YvF3eE7LDt"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:34:11.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "1i3KA34qqv5Y6upGGcm0"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:34:11.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 2,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "YuOAn7zhITMUZkh1ewiI"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:34:11.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 1,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "nrci6KDv3CJo0uCn1x0k"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:34:12.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "AfwQT0akOR6oJrmqZWCZ"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:34:12.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 1,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "LMhgpv1MSrek0bvyUY2f"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:34:12.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "QHQEGSOLf0u0C2XmG4ID"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:34:13.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "FjAvPxVRCBfjHuQKp62L"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:34:13.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 2,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "M2z0Sjjusw1su0qxI9Fi"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:34:13.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 1,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "P3JPFE3qEpZvCyfJWDhH"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:34:14.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 1,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "NtUnwyDqv5fjs1wZge2u"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:34:14.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "RrwunZZXbNWkR03rJ2GE"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:34:15.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "5heHo1cvIu4qf76t7H1F"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:34:15.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 2,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "YybbnQzUG5gE5MwfNJyc"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:34:16.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "2ibDXp1UvWaaMsYYpRVD"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:34:16.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 2,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "4M3oTazwNmukkIkOJuIl"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:34:16.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "Cp973TSimRou0JcELRah"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:34:16.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 2,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "Fc0jyVjBcncovWnVbztD"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:34:16.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 0,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "LbPE0Ss1sDdRtYVfhKNH"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:34:16.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "XoYdsrYZA7GGQmcBxBwx"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:34:16.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "iHkk1Z8hlc0k5JCYEwPb"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:34:16.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "pQydB0MasgFHup6tuIod"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:34:16.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 1,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "pv47i05dUIu3Gno6K9Ep"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:34:16.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 1,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "uYndboroChMTE8SEXsZV"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:34:20.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "3LDqfc27fDgpO1Nt4y1f"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:34:20.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "8bMk7exvZjzgw2O66jKX"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:34:20.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 1,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "DILy6Rtb0VZFVvppL5O1"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:34:20.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 0,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "JorjukWZfyEKVdi9tGL7"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:34:20.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "fdo8WJ7kKpRn7bHUpmqZ"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:34:21.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "0TtYsNN3oqZLBxByg1eJ"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:34:21.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 2,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "2WAS1YKO941qyR9sQR7R"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:34:21.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 2,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "5gblGjoZcF6TnxunoKbn"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:34:21.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "7k4Kkz3cV0fNfZpZqFNc"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:34:21.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 0,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "EA21Coag0jMG0ieBjEOs"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:34:21.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 1,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "SXlQ9BV5lLUlwwlCsP46"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:34:21.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 3,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "d0jw4EjYCdEH9TyXatrG"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:34:21.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "dYZqeq9fXlkMT4KsDVCj"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:34:21.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 0,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "oFxriiftKtcfXSb7i40T"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:34:21.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "p8gsKbMkzwzkF0KfUqym"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:34:21.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "rF3ndqnAQ1avyvPAmQod"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:34:23.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "EaZiamxVP0NRQ5u7rBWa"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:34:23.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "IgiKqKhr1rKlCfLuUndo"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:34:23.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 2,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "Ihlw74P77vOLUUqa1mxr"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:34:23.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 1,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "SkPdltYVvpa8Cnf5sHF8"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:34:25.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "uouzqoXaUD0N5c9CdjMM"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:34:26.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "FTDfKYx2boUCexueiHCv"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:34:26.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 3,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "S7G7pmQpQq6vQMqv0GZy"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:34:26.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 4,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "d6tGQgy3qQh0uswvYzso"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:34:27.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "Htf7qY9XxHRQRafLp3jy"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:34:27.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 2,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "QnR3lIUPGWMljZYmrwXU"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:34:27.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "YIsFBuNNxbojoul0eT1G"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:34:27.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 3,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "qR8zhd0yFxcAFJCU2XHk"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:34:29.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "1ANbEnscTafrshzmRLQa"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:34:29.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "7qsVqOj7dK9S7BmljiyY"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:34:29.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "OEHO7TXawtCxfQeVT2Y0"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:34:29.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 1,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "RmvmRf0OszNWfYHqwXJK"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:34:29.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "TkllbQlxuYcIRKXKg6iM"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:34:29.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 2,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "UFHJIT9a4LNhsDvaJ99X"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:34:29.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "ccVDmcDYVX0YI7oc37Lu"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:34:29.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 1,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "keVjV2flzpCbtXqutbst"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:34:29.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 0,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "mhFQVcKjlOhQJ6JSsBru"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:34:29.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "raaCZkafrg0m5zwqDmbp"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:34:29.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 3,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "s4rRUC9QX1JppCI8O3fH"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:34:29.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 0,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "snlPCqWAo0YPcmnqavr6"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:34:29.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "xs6ABxnw5BJdyo996vJU"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:34:29.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 2,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "zc70UzFxRgnHMfrhhpoo"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:34:34.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "7ldhA5O3HOzWFM3ljwy9"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:34:34.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 3,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "VREkmuLKCyPAnbhr9pdh"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:34:34.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 4,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "bsfWz5aIMN5VjxKu0knv"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:34:34.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "jg7vpEuVxphAIczSMHzK"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:34:34.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "kx1Hj2ylsSXAlp7f86na"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:34:34.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "mVkQ72xwM1MAGW3coZVk"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:34:34.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 3,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "oDqKK2JoNX5a8j13CHWt"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:34:34.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "tqVqhTT1vOlGACppP2HO"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:34:34.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 4,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "uM1OKvTWXRSnrEZ1WdJ6"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:34:34.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 2,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "xkxLhOnQv3m2lr4MghHt"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:34:37.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "Ruo0HMbVzQS4o4fSW0Ps"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:34:38.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 2,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "42DTihBkiOYjLC4nGkXJ"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:34:38.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "4MRaqlfCE8tjfRcaTpmS"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:34:38.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "69YLNCtu41ypG5bM3Uzb"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:34:38.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 3,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "7gqUtcYSLlC4Xz61nzwu"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:34:38.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 3,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "C88oVlq2wzI5p8jL3SVq"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:34:38.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 4,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "Os4xM9txYZbkVz1mKOj1"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:34:38.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "iH9tRPBtHsDV95RxPaPF"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:34:38.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 4,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "j97DWghhT3T9TBoiz2B2"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:34:38.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "xzqQs7ehP2SkYnvnG07G"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:34:39.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "3zSQhjy7RwSHUi0KSHzb"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:34:39.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 1,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "9NOfqffsBDXuMrR9YDG1"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:34:39.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "GH0XUJDhWjBnIu3T2Njf"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:34:39.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 2,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "gwPQ0CXd7uHK2wk2wAvx"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:34:40.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "L4W7NvLtePS7PoCFvOmG"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:34:40.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 1,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "MEdoVXoez6ti9oA1Z67A"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:34:40.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "Rcwqs2PWaUs316KptAkE"
    },
    {
        "event": "click_edit_in_prompt",
        "timestamp": "2025-08-22 22:34:41.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured": "structured",
            "summary": "• Defines a StockChart React component\n• Accepts a data prop with company, ticker, and price data\n• Processes and formats the data for Recharts\n• Renders a responsive line chart with axes, legend, and tooltip\n• Displays company name and ticker above the chart"
        },
        "id": "b2TKhhNqVaKu1DT24Tug"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:34:42.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 3,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "4WiavqGzumsG76BI7fvx"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:34:42.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "pmd4TxUDmOlINecSAOaF"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:34:47.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "Ak8mdUjoWmpfEMu3A1pf"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:34:47.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 3,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "FT8chZsbRTyjXkg5NfBI"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:34:47.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "QaKGq0DwEgd6bacAks3X"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:34:47.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 0,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "VIc0b7l0GVNstujpomi0"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:34:47.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 1,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "aOacY1tk7BtTTjDo6tk0"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:34:47.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "eZMmMY1DOwp34IKMUyJ9"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:34:47.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 2,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "mXU5JVyKNwqP4ruCRg0H"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:34:47.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 4,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "vzKGUHZOfJWEuGnexOGj"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:34:47.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "wutfoir98k4WlAD8aoLx"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:34:48.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "7UixAzFZuI4dRY7loEKH"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:34:48.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 1,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "BqTW7nOJzvFDUMmEEvmS"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:34:48.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 3,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "ExmyNvBLtUfjz1c0YLFP"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:34:48.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "LNCPUZ9wBZaWmbQutTih"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:34:48.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 4,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "M0iHjMlOWh7ckvzPpOjI"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:34:48.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "Y2qFKxbU7jl7Tg2aLFEI"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:34:48.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 3,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "iE0gFQEfX8QnCePJqEHB"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:34:48.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 2,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "kmeWkGJAZ3KZmb2yKdEK"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:34:48.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "lutUxMx8QvgPUIEydHxs"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:34:48.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "zrdXRnKTzG5UplK8DbON"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:34:49.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 1,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "2zpy9COxUDLVwvxln5py"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:34:49.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 0,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "DyhwMaCpTIk5CZZuDZ2F"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:34:49.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "RfNzFlnUwp7ctLWECuBg"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:34:49.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "St6B44Aza4F4KgFXsVXB"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:34:49.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "WYRS9qTA6hs3jjrIDEPs"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:34:49.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "Yt4iiirFxXAnyPkYOl5A"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:34:49.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 2,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "zAnogkY2tDWjYmN4To7b"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:34:51.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 0,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "Rk1Og2zvdthFWzd5yfQW"
    },
    {
        "event": "click_edit_in_prompt",
        "timestamp": "2025-08-22 22:34:51.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured": "structured",
            "summary": "• Defines a StockChart React component\n• Accepts a data prop with company, ticker, and price data\n• Processes and formats the data for Recharts\n• Renders a responsive line chart with axes, legend, and tooltip\n• Displays company name and ticker above the chart"
        },
        "id": "Taj934XLreRI8YdNHXcR"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:34:52.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 2,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "4U9hR3boXOwTpJiDWRxy"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:34:52.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "4dPNY634UHuDXNDGKZc9"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:34:52.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "9xgjMeYzNhWLZu2eG63C"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:34:52.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "CWRofJTUmf7PVEFPhQTa"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:34:52.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "EwCUt1lCNHCkRd5ZImGu"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:34:52.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 1,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "L02Rrl9WFUWSxswYcSDW"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:34:52.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "aIvqHuTkCsS7mVLIYUmY"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:34:52.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 0,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "nRv4utdZa4xDRvLn4PEe"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:34:52.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 1,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "pMCpJprZ0qnFDYUQArfi"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:34:55.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "4dq1GssnSGd4ZaHbzUcM"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:34:55.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 4,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "EjjA3lq3O3E4YUCJgdPg"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:34:55.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "Hn8yncasoDkFmJ6iv7DJ"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:34:55.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 3,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "Mb5BIBUqT9A7ZkXNjfP6"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:34:55.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "XcV3rkJCanHgyIU0Vnr2"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:34:55.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 2,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "oLVuiuwxnql5NYzXrlPR"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:34:57.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 2,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "0fyL3HN5hluEyPNvfQ9A"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:34:57.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "10sSnNiefKG9GevsiIXa"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:34:57.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "BLQi1smyCjwabvAwJQG0"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:34:57.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 1,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "EtA7JkM7wcHzU2wkfHb5"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:34:57.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "Gqw1PX7aGBLC7aSfKAfJ"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:34:57.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 2,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "NjLU9EGepUKod2WF2S4j"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:34:57.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "Q56YpYt4SEltMd3hRsiB"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:34:57.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 4,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "QBjXzHXcegfudjR7IXZC"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:34:57.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "V7Xp3ednt7zJdJCPuFYx"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:34:57.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 3,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "fTlwZKRClL2TJyugFCwy"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:34:57.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 3,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "ige5kohS39mGljGl5J7L"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:34:57.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "mapping_index": 4,
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "kIdmNckhtGCO0rjzGfQ5"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:34:57.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "yX8sG3Sbnv27Jj4D93aq"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:34:58.000",
        "source": "frontend",
        "data": {
            "section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "detail_level": "medium",
            "structured_type": "structured"
        },
        "id": "5KTRldC7VFl7K3TaJhl3"
    },
    {
        "event": "click_summarize_code",
        "timestamp": "2025-08-22 22:35:03.000",
        "source": "frontend",
        "data": {},
        "id": "LzMpdrx0hWDqsWWbsblj"
    },
    {
        "event": "summarize_selected_code",
        "timestamp": "2025-08-22 22:35:07.000",
        "source": "backend",
        "data": {
            "selected_code": "const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));",
            "summary": {
                "low_structured": "• Defines a function to format dates.\n• Transforms stock data for use in a chart.",
                "low_unstructured": "This code defines a date formatting function and transforms stock data for charting.",
                "title": "Data Formatting and Transformation for Charting",
                "medium_unstructured": "The code includes a function that formats a date string by removing the time component. It also maps raw stock data into a new array of objects, each containing a date and closing price, to prepare it for chart rendering.",
                "medium_structured": "• Provides a function to format date strings by extracting the date part.\n• Transforms the input stock data into a format suitable for charting.\n  ◦ Each new object contains 'date' and 'price' fields.\n• Prepares data specifically for use with the Recharts library.",
                "high_unstructured": "A helper function, formatDateString, is defined to extract only the date portion from an ISO datetime string by splitting at the 'T' character. The code then processes the input stock data array, mapping each item to a new object containing the original date and the closing price under the keys 'date' and 'price', respectively. This transformation is tailored for compatibility with the Recharts charting library, ensuring the data structure matches the expected input format. The result is a clean dataset ready for visualization.",
                "high_structured": "• Defines formatDateString to process ISO date strings.\n  ◦ Splits the input string at 'T' and returns the date part.\n• Transforms the input stock data array for charting purposes.\n  ◦ Maps each item to an object with 'date' and 'price' keys.\n  ◦ 'date' is taken directly from the item's date property.\n  ◦ 'price' is assigned from the item's close property.\n• Prepares the data specifically for use with the Recharts library, ensuring compatibility with its expected data structure.\n• Facilitates clean and effective data visualization by standardizing the input."
            }
        },
        "id": "Rbqu5WUbKddFLrxkVXwO"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-22 22:35:09.000",
        "source": "backend",
        "data": {
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "line": 19,
                            "code": "const formatDateString = (date) => {"
                        },
                        {
                            "line": 20,
                            "code": "return date.split(\"T\")[0];"
                        },
                        {
                            "line": 21,
                            "code": "};"
                        }
                    ],
                    "summaryComponent": "Provides a function to format date strings by extracting the date part."
                },
                {
                    "codeSegments": [
                        {
                            "line": 24,
                            "code": "const chartData = data.data.map((item) => ({"
                        }
                    ],
                    "summaryComponent": "Transforms the input stock data into a format suitable for charting."
                },
                {
                    "codeSegments": [
                        {
                            "line": 25,
                            "code": "date: item.date,"
                        },
                        {
                            "line": 26,
                            "code": "price: item.close,"
                        }
                    ],
                    "summaryComponent": "Each new object contains 'date' and 'price' fields."
                },
                {
                    "codeSegments": [
                        {
                            "line": 23,
                            "code": "// Combine labels and values into an array of objects for Recharts"
                        }
                    ],
                    "summaryComponent": "Prepares data specifically for use with the Recharts library."
                }
            ],
            "code": "19: const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));",
            "summary": "• Provides a function to format date strings by extracting the date part.\n• Transforms the input stock data into a format suitable for charting.\n  ◦ Each new object contains 'date' and 'price' fields.\n• Prepares data specifically for use with the Recharts library."
        },
        "id": "D1INbBc3N6hoAXYRLMDK"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-22 22:35:09.000",
        "source": "backend",
        "data": {
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "line": 19,
                            "code": "const formatDateString = (date) => {"
                        },
                        {
                            "line": 20,
                            "code": "return date.split(\"T\")[0];"
                        },
                        {
                            "line": 21,
                            "code": "};"
                        }
                    ],
                    "summaryComponent": "a function that formats a date string by removing the time component"
                },
                {
                    "codeSegments": [
                        {
                            "line": 24,
                            "code": "const chartData = data.data.map((item) => ({"
                        }
                    ],
                    "summaryComponent": "maps raw stock data into a new array of objects"
                },
                {
                    "codeSegments": [
                        {
                            "line": 25,
                            "code": "date: item.date,"
                        },
                        {
                            "line": 26,
                            "code": "price: item.close,"
                        }
                    ],
                    "summaryComponent": "each containing a date and closing price"
                },
                {
                    "codeSegments": [
                        {
                            "line": 23,
                            "code": "// Combine labels and values into an array of objects for Recharts"
                        }
                    ],
                    "summaryComponent": "to prepare it for chart rendering"
                }
            ],
            "code": "19: const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));",
            "summary": "The code includes a function that formats a date string by removing the time component. It also maps raw stock data into a new array of objects, each containing a date and closing price, to prepare it for chart rendering."
        },
        "id": "YrLboC3VzhmpU6jG3kBi"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-22 22:35:09.000",
        "source": "backend",
        "data": {
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "line": 19,
                            "code": "const formatDateString = (date) => {"
                        },
                        {
                            "line": 20,
                            "code": "return date.split(\"T\")[0];"
                        },
                        {
                            "line": 21,
                            "code": "};"
                        }
                    ],
                    "summaryComponent": "Defines a function to format dates."
                },
                {
                    "codeSegments": [
                        {
                            "line": 24,
                            "code": "const chartData = data.data.map((item) => ({"
                        },
                        {
                            "line": 25,
                            "code": "date: item.date,"
                        },
                        {
                            "line": 26,
                            "code": "price: item.close,"
                        },
                        {
                            "line": 27,
                            "code": "}));"
                        }
                    ],
                    "summaryComponent": "Transforms stock data for use in a chart."
                }
            ],
            "code": "19: const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));",
            "summary": "• Defines a function to format dates.\n• Transforms stock data for use in a chart."
        },
        "id": "hAj6H6JiNCXdPThWEanW"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-22 22:35:09.000",
        "source": "backend",
        "data": {
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "line": 19,
                            "code": "const formatDateString = (date) => {"
                        },
                        {
                            "line": 20,
                            "code": "return date.split(\"T\")[0];"
                        },
                        {
                            "line": 21,
                            "code": "};"
                        }
                    ],
                    "summaryComponent": "defines a date formatting function"
                },
                {
                    "codeSegments": [
                        {
                            "line": 24,
                            "code": "const chartData = data.data.map((item) => ({"
                        },
                        {
                            "line": 25,
                            "code": "date: item.date,"
                        },
                        {
                            "line": 26,
                            "code": "price: item.close,"
                        },
                        {
                            "line": 27,
                            "code": "}));"
                        }
                    ],
                    "summaryComponent": "transforms stock data for charting"
                }
            ],
            "code": "19: const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));",
            "summary": "This code defines a date formatting function and transforms stock data for charting."
        },
        "id": "w0tc2C5sAFd3GT3d961Q"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-22 22:35:10.000",
        "source": "backend",
        "data": {
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "line": 19,
                            "code": "const formatDateString = (date) => {"
                        }
                    ],
                    "summaryComponent": "A helper function, formatDateString, is defined"
                },
                {
                    "codeSegments": [
                        {
                            "line": 20,
                            "code": "return date.split(\"T\")[0];"
                        }
                    ],
                    "summaryComponent": "to extract only the date portion from an ISO datetime string by splitting at the 'T' character"
                },
                {
                    "codeSegments": [
                        {
                            "line": 24,
                            "code": "const chartData = data.data.map((item) => ({"
                        }
                    ],
                    "summaryComponent": "The code then processes the input stock data array"
                },
                {
                    "codeSegments": [
                        {
                            "line": 25,
                            "code": "date: item.date,"
                        }
                    ],
                    "summaryComponent": "mapping each item to a new object containing the original date"
                },
                {
                    "codeSegments": [
                        {
                            "line": 26,
                            "code": "price: item.close,"
                        }
                    ],
                    "summaryComponent": "and the closing price under the keys 'date' and 'price', respectively"
                },
                {
                    "codeSegments": [
                        {
                            "line": 23,
                            "code": "// Combine labels and values into an array of objects for Recharts"
                        }
                    ],
                    "summaryComponent": "This transformation is tailored for compatibility with the Recharts charting library"
                },
                {
                    "codeSegments": [
                        {
                            "line": 24,
                            "code": "const chartData = data.data.map((item) => ({"
                        }
                    ],
                    "summaryComponent": "ensuring the data structure matches the expected input format"
                },
                {
                    "codeSegments": [
                        {
                            "line": 24,
                            "code": "const chartData = data.data.map((item) => ({"
                        }
                    ],
                    "summaryComponent": "The result is a clean dataset ready for visualization"
                }
            ],
            "code": "19: const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));",
            "summary": "A helper function, formatDateString, is defined to extract only the date portion from an ISO datetime string by splitting at the 'T' character. The code then processes the input stock data array, mapping each item to a new object containing the original date and the closing price under the keys 'date' and 'price', respectively. This transformation is tailored for compatibility with the Recharts charting library, ensuring the data structure matches the expected input format. The result is a clean dataset ready for visualization."
        },
        "id": "740poazdsgFkXoByQg69"
    },
    {
        "event": "create_new_section",
        "timestamp": "2025-08-22 22:35:11.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "section_data": {
                "summaryData": {
                    "low_structured": "• Defines a function to format dates.\n• Transforms stock data for use in a chart.",
                    "low_unstructured": "This code defines a date formatting function and transforms stock data for charting.",
                    "title": "Data Formatting and Transformation for Charting",
                    "medium_unstructured": "The code includes a function that formats a date string by removing the time component. It also maps raw stock data into a new array of objects, each containing a date and closing price, to prepare it for chart rendering.",
                    "medium_structured": "• Provides a function to format date strings by extracting the date part.\n• Transforms the input stock data into a format suitable for charting.\n  ◦ Each new object contains 'date' and 'price' fields.\n• Prepares data specifically for use with the Recharts library.",
                    "high_unstructured": "A helper function, formatDateString, is defined to extract only the date portion from an ISO datetime string by splitting at the 'T' character. The code then processes the input stock data array, mapping each item to a new object containing the original date and the closing price under the keys 'date' and 'price', respectively. This transformation is tailored for compatibility with the Recharts charting library, ensuring the data structure matches the expected input format. The result is a clean dataset ready for visualization.",
                    "high_structured": "• Defines formatDateString to process ISO date strings.\n  ◦ Splits the input string at 'T' and returns the date part.\n• Transforms the input stock data array for charting purposes.\n  ◦ Maps each item to an object with 'date' and 'price' keys.\n  ◦ 'date' is taken directly from the item's date property.\n  ◦ 'price' is assigned from the item's close property.\n• Prepares the data specifically for use with the Recharts library, ensuring compatibility with its expected data structure.\n• Facilitates clean and effective data visualization by standardizing the input."
                },
                "editPromptValue": "",
                "title": "Data Formatting and Transformation for Charting",
                "editPromptStructured": null,
                "selectedDetailLevel": "medium",
                "metadata": {
                    "filename": "StockChart.jsx",
                    "fullPath": "/project/workspace/frontend/src/StockChart.jsx",
                    "id": "e6fafde9-26ab-4103-8218-ac584e313def",
                    "originalCode": "const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));",
                    "offset": 315
                },
                "createdAt": 1755887711000,
                "lines": [
                    19,
                    27
                ],
                "summaryMappings": {
                    "low_structured": [
                        {
                            "codeSegments": [
                                {
                                    "line": 19,
                                    "code": "const formatDateString = (date) => {"
                                },
                                {
                                    "line": 20,
                                    "code": "return date.split(\"T\")[0];"
                                },
                                {
                                    "line": 21,
                                    "code": "};"
                                }
                            ],
                            "summaryComponent": "Defines a function to format dates."
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 24,
                                    "code": "const chartData = data.data.map((item) => ({"
                                },
                                {
                                    "line": 25,
                                    "code": "date: item.date,"
                                },
                                {
                                    "line": 26,
                                    "code": "price: item.close,"
                                },
                                {
                                    "line": 27,
                                    "code": "}));"
                                }
                            ],
                            "summaryComponent": "Transforms stock data for use in a chart."
                        }
                    ],
                    "low_unstructured": [
                        {
                            "codeSegments": [
                                {
                                    "line": 19,
                                    "code": "const formatDateString = (date) => {"
                                },
                                {
                                    "line": 20,
                                    "code": "return date.split(\"T\")[0];"
                                },
                                {
                                    "line": 21,
                                    "code": "};"
                                }
                            ],
                            "summaryComponent": "defines a date formatting function"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 24,
                                    "code": "const chartData = data.data.map((item) => ({"
                                },
                                {
                                    "line": 25,
                                    "code": "date: item.date,"
                                },
                                {
                                    "line": 26,
                                    "code": "price: item.close,"
                                },
                                {
                                    "line": 27,
                                    "code": "}));"
                                }
                            ],
                            "summaryComponent": "transforms stock data for charting"
                        }
                    ],
                    "medium_structured": [
                        {
                            "codeSegments": [
                                {
                                    "line": 19,
                                    "code": "const formatDateString = (date) => {"
                                },
                                {
                                    "line": 20,
                                    "code": "return date.split(\"T\")[0];"
                                },
                                {
                                    "line": 21,
                                    "code": "};"
                                }
                            ],
                            "summaryComponent": "Provides a function to format date strings by extracting the date part."
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 24,
                                    "code": "const chartData = data.data.map((item) => ({"
                                }
                            ],
                            "summaryComponent": "Transforms the input stock data into a format suitable for charting."
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 25,
                                    "code": "date: item.date,"
                                },
                                {
                                    "line": 26,
                                    "code": "price: item.close,"
                                }
                            ],
                            "summaryComponent": "Each new object contains 'date' and 'price' fields."
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 23,
                                    "code": "// Combine labels and values into an array of objects for Recharts"
                                }
                            ],
                            "summaryComponent": "Prepares data specifically for use with the Recharts library."
                        }
                    ],
                    "medium_unstructured": [
                        {
                            "codeSegments": [
                                {
                                    "line": 19,
                                    "code": "const formatDateString = (date) => {"
                                },
                                {
                                    "line": 20,
                                    "code": "return date.split(\"T\")[0];"
                                },
                                {
                                    "line": 21,
                                    "code": "};"
                                }
                            ],
                            "summaryComponent": "a function that formats a date string by removing the time component"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 24,
                                    "code": "const chartData = data.data.map((item) => ({"
                                }
                            ],
                            "summaryComponent": "maps raw stock data into a new array of objects"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 25,
                                    "code": "date: item.date,"
                                },
                                {
                                    "line": 26,
                                    "code": "price: item.close,"
                                }
                            ],
                            "summaryComponent": "each containing a date and closing price"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 23,
                                    "code": "// Combine labels and values into an array of objects for Recharts"
                                }
                            ],
                            "summaryComponent": "to prepare it for chart rendering"
                        }
                    ],
                    "high_unstructured": [
                        {
                            "codeSegments": [
                                {
                                    "line": 19,
                                    "code": "const formatDateString = (date) => {"
                                }
                            ],
                            "summaryComponent": "A helper function, formatDateString, is defined"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 20,
                                    "code": "return date.split(\"T\")[0];"
                                }
                            ],
                            "summaryComponent": "to extract only the date portion from an ISO datetime string by splitting at the 'T' character"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 24,
                                    "code": "const chartData = data.data.map((item) => ({"
                                }
                            ],
                            "summaryComponent": "The code then processes the input stock data array"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 25,
                                    "code": "date: item.date,"
                                }
                            ],
                            "summaryComponent": "mapping each item to a new object containing the original date"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 26,
                                    "code": "price: item.close,"
                                }
                            ],
                            "summaryComponent": "and the closing price under the keys 'date' and 'price', respectively"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 23,
                                    "code": "// Combine labels and values into an array of objects for Recharts"
                                }
                            ],
                            "summaryComponent": "This transformation is tailored for compatibility with the Recharts charting library"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 24,
                                    "code": "const chartData = data.data.map((item) => ({"
                                }
                            ],
                            "summaryComponent": "ensuring the data structure matches the expected input format"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 24,
                                    "code": "const chartData = data.data.map((item) => ({"
                                }
                            ],
                            "summaryComponent": "The result is a clean dataset ready for visualization"
                        }
                    ],
                    "high_structured": [
                        {
                            "codeSegments": [
                                {
                                    "line": 19,
                                    "code": "const formatDateString = (date) => {"
                                },
                                {
                                    "line": 20,
                                    "code": "return date.split(\"T\")[0];"
                                },
                                {
                                    "line": 21,
                                    "code": "};"
                                }
                            ],
                            "summaryComponent": "Defines formatDateString to process ISO date strings."
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 20,
                                    "code": "return date.split(\"T\")[0];"
                                }
                            ],
                            "summaryComponent": "Splits the input string at 'T' and returns the date part."
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 24,
                                    "code": "const chartData = data.data.map((item) => ({"
                                },
                                {
                                    "line": 25,
                                    "code": "date: item.date,"
                                },
                                {
                                    "line": 26,
                                    "code": "price: item.close,"
                                },
                                {
                                    "line": 27,
                                    "code": "}));"
                                }
                            ],
                            "summaryComponent": "Transforms the input stock data array for charting purposes."
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 25,
                                    "code": "date: item.date,"
                                },
                                {
                                    "line": 26,
                                    "code": "price: item.close,"
                                }
                            ],
                            "summaryComponent": "Maps each item to an object with 'date' and 'price' keys."
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 25,
                                    "code": "date: item.date,"
                                }
                            ],
                            "summaryComponent": "'date' is taken directly from the item's date property."
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 26,
                                    "code": "price: item.close,"
                                }
                            ],
                            "summaryComponent": "'price' is assigned from the item's close property."
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 23,
                                    "code": "// Combine labels and values into an array of objects for Recharts"
                                },
                                {
                                    "line": 24,
                                    "code": "const chartData = data.data.map((item) => ({"
                                }
                            ],
                            "summaryComponent": "Prepares the data specifically for use with the Recharts library, ensuring compatibility with its expected data structure."
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 24,
                                    "code": "const chartData = data.data.map((item) => ({"
                                }
                            ],
                            "summaryComponent": "Facilitates clean and effective data visualization by standardizing the input."
                        }
                    ]
                },
                "editPromptDetailLevel": null,
                "selectedStructured": "unstructured"
            }
        },
        "id": "7r2X9UVyBozrZR22tNls"
    },
    {
        "event": "autotransit_section",
        "timestamp": "2025-08-22 22:35:11.000",
        "source": "frontend",
        "data": {
            "before_section_id": "3839e55c-f1ec-4e35-b114-b34276949623",
            "after_section_id": "e6fafde9-26ab-4103-8218-ac584e313def"
        },
        "id": "NGODejZti73TsPclrbPq"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-22 22:35:11.000",
        "source": "backend",
        "data": {
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "line": 19,
                            "code": "const formatDateString = (date) => {"
                        },
                        {
                            "line": 20,
                            "code": "return date.split(\"T\")[0];"
                        },
                        {
                            "line": 21,
                            "code": "};"
                        }
                    ],
                    "summaryComponent": "Defines formatDateString to process ISO date strings."
                },
                {
                    "codeSegments": [
                        {
                            "line": 20,
                            "code": "return date.split(\"T\")[0];"
                        }
                    ],
                    "summaryComponent": "Splits the input string at 'T' and returns the date part."
                },
                {
                    "codeSegments": [
                        {
                            "line": 24,
                            "code": "const chartData = data.data.map((item) => ({"
                        },
                        {
                            "line": 25,
                            "code": "date: item.date,"
                        },
                        {
                            "line": 26,
                            "code": "price: item.close,"
                        },
                        {
                            "line": 27,
                            "code": "}));"
                        }
                    ],
                    "summaryComponent": "Transforms the input stock data array for charting purposes."
                },
                {
                    "codeSegments": [
                        {
                            "line": 25,
                            "code": "date: item.date,"
                        },
                        {
                            "line": 26,
                            "code": "price: item.close,"
                        }
                    ],
                    "summaryComponent": "Maps each item to an object with 'date' and 'price' keys."
                },
                {
                    "codeSegments": [
                        {
                            "line": 25,
                            "code": "date: item.date,"
                        }
                    ],
                    "summaryComponent": "'date' is taken directly from the item's date property."
                },
                {
                    "codeSegments": [
                        {
                            "line": 26,
                            "code": "price: item.close,"
                        }
                    ],
                    "summaryComponent": "'price' is assigned from the item's close property."
                },
                {
                    "codeSegments": [
                        {
                            "line": 23,
                            "code": "// Combine labels and values into an array of objects for Recharts"
                        },
                        {
                            "line": 24,
                            "code": "const chartData = data.data.map((item) => ({"
                        }
                    ],
                    "summaryComponent": "Prepares the data specifically for use with the Recharts library, ensuring compatibility with its expected data structure."
                },
                {
                    "codeSegments": [
                        {
                            "line": 24,
                            "code": "const chartData = data.data.map((item) => ({"
                        }
                    ],
                    "summaryComponent": "Facilitates clean and effective data visualization by standardizing the input."
                }
            ],
            "code": "19: const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));",
            "summary": "• Defines formatDateString to process ISO date strings.\n  ◦ Splits the input string at 'T' and returns the date part.\n• Transforms the input stock data array for charting purposes.\n  ◦ Maps each item to an object with 'date' and 'price' keys.\n  ◦ 'date' is taken directly from the item's date property.\n  ◦ 'price' is assigned from the item's close property.\n• Prepares the data specifically for use with the Recharts library, ensuring compatibility with its expected data structure.\n• Facilitates clean and effective data visualization by standardizing the input."
        },
        "id": "xvxKH10q90S3MUzz8BCq"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:35:14.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "Bv20a2gZF7drGgEaSAry"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:35:14.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 0,
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "voaVqqUbiIU7DDmysj2m"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:35:15.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "DF0X4ZDOagrMtAKnCUiN"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:35:15.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "JWhrc2se6fG9zJLLgU1t"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:35:15.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 0,
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "eI0MwHlDMmhif1Vc75g5"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:35:15.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 3,
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "zhN5UdcmuConADJTXNGf"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:35:16.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 0,
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "HAVlHlglM7jkc8osWnEB"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:35:16.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 2,
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "V3fi9DlpnK13BzbN78Fl"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:35:16.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "uZl1jJnbGFhxzVXNDhl0"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:35:21.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 1,
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "K72GaenMu8ODzdCg23xG"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:35:21.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "Tnqphr8i6xUip1HYelTl"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:35:24.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 2,
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "2ygaDMHyRiZbMhCn7ROa"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:35:24.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "JH4ja5AcURnkpeFFOTqU"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:35:27.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 3,
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "9yO3xx6UEYWjdYWGyCy1"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:35:27.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "ZINKPe4jFnQfZCRIA4L3"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:35:28.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "4E0TxdrfS5g1LW73MAR5"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:35:28.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "H8KeRgoCevJLrEnQbCzY"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:35:28.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 1,
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "JCMs9yvnd7ZQG6zNJ8FT"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:35:28.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 0,
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "UBTMvMIuwzBXYIBG1l9S"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:35:28.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "qrHJPHrHg7YTeIHRSbcw"
    },
    {
        "event": "change_summary_level",
        "timestamp": "2025-08-22 22:35:29.000",
        "source": "frontend",
        "data": {
            "before_detail_level": "medium",
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "after_detail_level": "high",
            "before_structured": "unstructured",
            "after_structured": "unstructured"
        },
        "id": "YhuPDcXtG19yKP31xcdY"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:35:30.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 0,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "bJKxAmmEKJDv3KPiJHJm"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:35:31.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 1,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "TeyNrjv5znEfn7KE44GN"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:35:31.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "bTX6LQ0PWAinG6q46d8Q"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:35:32.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 2,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "EOxTGs0PcAU08tBPYpEO"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:35:32.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "O8Brdct5V06Bwr7u6Vbm"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:35:35.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "01Czzk512ilJXFw3NvxB"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:35:35.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 3,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "YDCx4XdTyGtpxcNvEyT8"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:35:35.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 3,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "kWXZWmTUyqpEYO9QnFAR"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:35:35.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 4,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "kk7KiXWTV6oLFnUx0rBN"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:35:35.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "rQpDreZJvCa35kTkvEPi"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:35:35.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "uVQTHX2ytIOt4rZcvySb"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:35:36.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 4,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "MhnBrq7BuAJRkmK1q7RT"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:35:36.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "VrQUeHOnIzpzVZfLr3Vg"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:35:41.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 5,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "NAhT8lxY9IPIwqfPlYcD"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:35:41.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "xRDOjBW8bDYfutDGcX4B"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:35:42.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 6,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "LGnS52eUkYODX4nsa8CN"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:35:42.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "oSapDy39NLm3Ayj5ZgL1"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:35:43.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 6,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "FkF1E0oF6MWKx6hKKDAJ"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:35:43.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "LYLudGgANJuTUhTlRmw7"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:35:43.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "ZKLT41z1nDCe8IitX495"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:35:43.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 7,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "id4DT1rT1gwNqUsJl0k9"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:35:46.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 7,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "AvdfbT1gQHhJb6pvEui4"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:35:46.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "n3JUfY9oOaHhOqBXCctL"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:35:47.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 6,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "T8PUBfPiWbebZfbsl07a"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:35:47.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "obywTDTq7fHpJZnjbnjT"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:35:48.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 3,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "51BL2yL6LoON5NMeprf3"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:35:48.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 4,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "5sE2TT5B3TUOhibyjOqI"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:35:48.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "7O9JAPVgO14lS9EHykoY"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:35:48.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "82W6Dj9HLWpwNCXktEhv"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:35:48.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "9gmxUxaZpBZkiJeJAcRw"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:35:48.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 0,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "HnbSSqeCQdRvTxbBHCjN"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:35:48.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "L1LOOlrsu9MoMsDNMSYL"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:35:48.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 5,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "R8IrPP5ykRVFtXcf2vXn"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:35:48.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "RQEuwHeExSv4Zn7DEVqN"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:35:48.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "UgKEq1zkB8yYP89x1sim"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:35:48.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 1,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "VdoXsZaYD7xWUjdYJ9gf"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:35:48.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "Whch2lCQpo58ssl4Z7oH"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:35:48.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 2,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "vt9zEEXqBTBsS5YH4KXE"
    },
    {
        "event": "change_summary_level",
        "timestamp": "2025-08-22 22:35:49.000",
        "source": "frontend",
        "data": {
            "before_detail_level": "high",
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "after_detail_level": "high",
            "before_structured": "unstructured",
            "after_structured": "structured"
        },
        "id": "8sQvOj7wlqLAwhHgw6As"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:35:49.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 0,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "wdUx6jofFofEa6SOBibZ"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:35:50.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "0OJfdduQck3D8VMbUe2s"
    },
    {
        "event": "change_summary_level",
        "timestamp": "2025-08-22 22:35:51.000",
        "source": "frontend",
        "data": {
            "before_detail_level": "high",
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "after_detail_level": "high",
            "before_structured": "structured",
            "after_structured": "unstructured"
        },
        "id": "T9QoKtOqLtoL5Mg6nToK"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:35:52.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 0,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "SyDEyRwZ9shxOnjQOvr2"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:35:53.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 1,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "48O1aClDeSEcsGONg8DP"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:35:53.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "dScJ2suJc6E2jhWkgTzS"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:35:54.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 2,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "QWTWyqCYjQhXORiGZiSp"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:35:54.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "wO9fA5xK9AzGxQl5Y3Qs"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:35:55.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 3,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "FBlWurzuXPgsPGz8cFLF"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:35:55.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "WfgevE8P3yaV0nOJBaLQ"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:35:56.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 2,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "QwSzIqGg5ofbUL31W8pC"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:35:56.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "xfU9mOeLbDULGGZcqxoS"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:35:58.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "19abOfv9TVpc1mC8kvKp"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:35:58.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 3,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "k4vW902oklmG9R7D9hSI"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:36:01.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 4,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "YAjnJ93CH8YKKRa16jk9"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:36:01.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "qd381yWmEbFRoYbBDHjF"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:36:02.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 3,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "E2PNpSA551x0gBFxDMVD"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:36:02.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "tNRzgrXFaPMB7ANSL7Hs"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:36:03.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 4,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "pJG7c0mBDZ52C6g2dnbd"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:36:03.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "uNQ4vB97Z7T5jT4lptt0"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:36:04.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "0hAcR2tQl8Ce808YlMIy"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:36:04.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 5,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "EVYUsDkVIZ8qqsrwDbSI"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:36:05.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "1yqGGYLcD07Rn5v7z3EO"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:36:05.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "4mMrxyMV7w6lrTPQm087"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:36:05.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 2,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "PbqeFEbWAG3XtDWe2Ey9"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:36:05.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 3,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "UTgkXBBxEiw76btv8KgR"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:36:05.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 0,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "kqpg2u07YGqPpVC0VQ1f"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:36:05.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "oDXYdYSNSBNtNfyOEXRE"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:36:05.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 4,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "p7J8laCqON89WBqyTLuK"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:36:05.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 1,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "qC20yzd2jcZaK6y6KMG5"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:36:05.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "qdKEYWEst3lFmKOxbmID"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:36:05.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "xkldcN8OGsuKdQonNhQT"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:36:07.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "NHXQW2XcfSnP8B5ZzHUT"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:36:09.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 5,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "0XvJcTHLnev8HniSVFtv"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:36:09.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 2,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "4rlj9NoQomVXRbNbqTPf"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:36:09.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 7,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "CObZmIn12A5KujcNpWMj"
    },
    {
        "event": "click_edit_in_prompt",
        "timestamp": "2025-08-22 22:36:09.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured": "unstructured",
            "summary": "A helper function, formatDateString, is defined to extract only the date portion from an ISO datetime string by splitting at the 'T' character. The code then processes the input stock data array, mapping each item to a new object containing the original date and the closing price under the keys 'date' and 'price', respectively. This transformation is tailored for compatibility with the Recharts charting library, ensuring the data structure matches the expected input format. The result is a clean dataset ready for visualization."
        },
        "id": "KXzi0OM2ix1mWut4Zt4Y"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:36:09.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 6,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "UcAfN8auwWO6z9MaPO1J"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:36:09.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "gv86efWF2KROzGVseET2"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:36:09.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "h2gc6g5K9UUHH9Fhj9Sp"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:36:09.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "h8EosJ2YKBiFpojSA0kj"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:36:09.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "huedTbpQu0xNNmDwX0p5"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:36:09.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 3,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "jRbQ8nqSOKRZpVDgpAF9"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:36:09.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 4,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "oEqMafYJsWUWkVblUjp4"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:36:09.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 1,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "qg4TYFlVaZktA24UGwE3"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:36:09.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "vg1K0O2bsqYJ8ERjXi1o"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:36:09.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "x7Ty6TbuYNZlobTTGs48"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:36:09.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "xMgFtfosvtBBWKtbV9JH"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:36:57.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "12En9X99DygN88NPlU4q"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:36:57.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "62okcjPU9FIa8Jxkvlcc"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:36:57.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 6,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "FYYDFszVarTWo2eskjO0"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:36:57.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "dbI7CZSFRJaAizUuzxXR"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:36:57.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 4,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "hXqB9Ry9nFHH6dy2uDFq"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:36:57.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 5,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "kMWDzH62JhaPLKaxdc2P"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:37:25.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "DbJdHluTaF9vqdEfOI1f"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:37:25.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 6,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "J8yTTZtKPId80GiwIh09"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:37:25.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "Xe8zcTAPzGefu4YgTZ00"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:37:25.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 7,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "e5ILy2rYiv3PNjBrWo0e"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:37:27.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 5,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "7BaGh32Z7fy5ba307bOl"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:37:27.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 7,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "NzmGwWcX1fbrQbn5syqR"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:37:27.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 4,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "ZNVGbScLwcda3QHQraat"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:37:27.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "lq7YcoZB7PmPdgyYThLk"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:37:27.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "p2kCPTF17a6auf6FRYRD"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:37:27.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "qPyARokk2EtTYr69BxWM"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:37:27.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 6,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "z7aZS7GXopmii8jYZar0"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:37:27.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "zlnxsMUxnDi8oojMdWWh"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:37:29.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 6,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "0lzalulGDj2HW2nRExpY"
    },
    {
        "event": "apply_instruction_summary",
        "timestamp": "2025-08-22 22:37:29.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "instruction": "modify the x-axis to show the month name like Jan, Feb.",
            "original_summary": "A helper function, formatDateString, is defined to extract only the date portion from an ISO datetime string by splitting at the 'T' character. The code then processes the input stock data array, mapping each item to a new object containing the original date and the closing price under the keys 'date' and 'price', respectively. This transformation is tailored for compatibility with the Recharts charting library, ensuring the data structure matches the expected input format. The result is a clean dataset ready for visualization.",
            "structured": "unstructured"
        },
        "id": "nINJoXmbbWaRUQJQk4yf"
    },
    {
        "event": "apply_instruction_summary",
        "timestamp": "2025-08-22 22:37:30.000",
        "source": "backend",
        "data": {
            "original_code": "const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));",
            "original_summary": "A helper function, formatDateString, is defined to extract only the date portion from an ISO datetime string by splitting at the 'T' character. The code then processes the input stock data array, mapping each item to a new object containing the original date and the closing price under the keys 'date' and 'price', respectively. This transformation is tailored for compatibility with the Recharts charting library, ensuring the data structure matches the expected input format. The result is a clean dataset ready for visualization.",
            "updated_summary": "A helper function, formatDateString, is defined to extract only the date portion from an ISO datetime string by splitting at the 'T' character. The code then processes the input stock data array, mapping each item to a new object containing the original date and the closing price under the keys 'date' and 'price', respectively. The transformation is tailored for compatibility with the Recharts charting library, ensuring the data structure matches the expected input format. The result is a clean dataset ready for visualization. Additionally, the x-axis is modified to display the month name (e.g., Jan, Feb) instead of the full date, enhancing readability on the chart.",
            "instruction": "modify the x-axis to show the month name like Jan, Feb."
        },
        "id": "ZwY04PCfpkkJHku0Uive"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:37:30.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "ojzBSebOzoEvIWkd91mC"
    },
    {
        "event": "commit_modified_summary",
        "timestamp": "2025-08-22 22:37:45.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "original_summary": "A helper function, formatDateString, is defined to extract only the date portion from an ISO datetime string by splitting at the 'T' character. The code then processes the input stock data array, mapping each item to a new object containing the original date and the closing price under the keys 'date' and 'price', respectively. This transformation is tailored for compatibility with the Recharts charting library, ensuring the data structure matches the expected input format. The result is a clean dataset ready for visualization.",
            "edited_summary": "A helper function, formatDateString, is defined to extract only the date portion from an ISO datetime string by splitting at the 'T' character. The code then processes the input stock data array, mapping each item to a new object containing the original date and the closing price under the keys 'date' and 'price', respectively. The transformation is tailored for compatibility with the Recharts charting library, ensuring the data structure matches the expected input format. The result is a clean dataset ready for visualization. Additionally, the x-axis is modified to display the month name (e.g., Jan, Feb) instead of the full date, enhancing readability on the chart.",
            "structured": "unstructured"
        },
        "id": "u0X7HOfjh0MTnL6IbhXw"
    },
    {
        "event": "modify_summary_mediation",
        "timestamp": "2025-08-22 22:37:48.000",
        "source": "backend",
        "data": {
            "detail_level": "high",
            "original_code": "const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));",
            "original_summary": "A helper function, formatDateString, is defined to extract only the date portion from an ISO datetime string by splitting at the 'T' character. The code then processes the input stock data array, mapping each item to a new object containing the original date and the closing price under the keys 'date' and 'price', respectively. This transformation is tailored for compatibility with the Recharts charting library, ensuring the data structure matches the expected input format. The result is a clean dataset ready for visualization.",
            "structured_type": "unstructured",
            "edited_summary": "A helper function, formatDateString, is defined to extract only the date portion from an ISO datetime string by splitting at the 'T' character. The code then processes the input stock data array, mapping each item to a new object containing the original date and the closing price under the keys 'date' and 'price', respectively. The transformation is tailored for compatibility with the Recharts charting library, ensuring the data structure matches the expected input format. The result is a clean dataset ready for visualization. Additionally, the x-axis is modified to display the month name (e.g., Jan, Feb) instead of the full date, enhancing readability on the chart.",
            "updated_code": "const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  // Helper function to format the x-axis as month abbreviation\n  const formatMonth = (dateString) => {\n    const dateObj = new Date(dateString);\n    return dateObj.toLocaleString('default', { month: 'short' });\n  };"
        },
        "id": "AZPuoMUbd0tuC8bbrfUV"
    },
    {
        "event": "summarize_modified_code",
        "timestamp": "2025-08-22 22:37:54.000",
        "source": "backend",
        "data": {
            "old_summary": {
                "low_structured": "• Defines a function to format dates.\n• Transforms stock data for use in a chart.",
                "low_unstructured": "This code defines a date formatting function and transforms stock data for charting.",
                "title": "Data Formatting and Transformation for Charting",
                "medium_unstructured": "The code includes a function that formats a date string by removing the time component. It also maps raw stock data into a new array of objects, each containing a date and closing price, to prepare it for chart rendering.",
                "medium_structured": "• Provides a function to format date strings by extracting the date part.\n• Transforms the input stock data into a format suitable for charting.\n  ◦ Each new object contains 'date' and 'price' fields.\n• Prepares data specifically for use with the Recharts library.",
                "high_unstructured": "A helper function, formatDateString, is defined to extract only the date portion from an ISO datetime string by splitting at the 'T' character. The code then processes the input stock data array, mapping each item to a new object containing the original date and the closing price under the keys 'date' and 'price', respectively. This transformation is tailored for compatibility with the Recharts charting library, ensuring the data structure matches the expected input format. The result is a clean dataset ready for visualization.",
                "high_structured": "• Defines formatDateString to process ISO date strings.\n  ◦ Splits the input string at 'T' and returns the date part.\n• Transforms the input stock data array for charting purposes.\n  ◦ Maps each item to an object with 'date' and 'price' keys.\n  ◦ 'date' is taken directly from the item's date property.\n  ◦ 'price' is assigned from the item's close property.\n• Prepares the data specifically for use with the Recharts library, ensuring compatibility with its expected data structure.\n• Facilitates clean and effective data visualization by standardizing the input."
            },
            "original_code": "const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  // Helper function to format the x-axis as month abbreviation\n  const formatMonth = (dateString) => {\n    const dateObj = new Date(dateString);\n    return dateObj.toLocaleString('default', { month: 'short' });\n  };",
            "new_code": "const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  // Helper function to format the x-axis as month abbreviation\n  const formatMonth = (dateString) => {\n    const dateObj = new Date(dateString);\n    return dateObj.toLocaleString('default', { month: 'short' });\n  };",
            "new_summary": {
                "low_structured": "• Defines a function to format dates.\n• Transforms stock data for use in a chart.\n• Adds a helper function to format dates as month abbreviations.",
                "low_unstructured": "This code defines a date formatting function, transforms stock data for charting, and adds a helper to format dates as month abbreviations.",
                "title": "Data Formatting, Transformation, and Month Abbreviation Helper for Charting",
                "medium_unstructured": "The code includes a function that formats a date string by removing the time component, maps raw stock data into a new array of objects each containing a date and closing price to prepare it for chart rendering, and introduces a new helper function to format date strings as month abbreviations.",
                "medium_structured": "• Provides a function to format date strings by extracting the date part.\n• Transforms the input stock data into a format suitable for charting.\n  ◦ Each new object contains 'date' and 'price' fields.\n• Prepares data specifically for use with the Recharts library.\n• Adds a helper function that formats a date string into a month abbreviation.",
                "high_unstructured": "A helper function, formatDateString, is defined to extract only the date portion from an ISO datetime string by splitting at the 'T' character. The code then processes the input stock data array, mapping each item to a new object containing the original date and the closing price under the keys 'date' and 'price', respectively. This transformation is tailored for compatibility with the Recharts charting library, ensuring the data structure matches the expected input format. Additionally, a new helper function, formatMonth, is introduced to convert a date string into a month abbreviation using JavaScript's toLocaleString method. The result is a clean dataset ready for visualization, with enhanced date formatting capabilities.",
                "high_structured": "• Defines formatDateString to process ISO date strings.\n  ◦ Splits the input string at 'T' and returns the date part.\n• Transforms the input stock data array for charting purposes.\n  ◦ Maps each item to an object with 'date' and 'price' keys.\n  ◦ 'date' is taken directly from the item's date property.\n  ◦ 'price' is assigned from the item's close property.\n• Prepares the data specifically for use with the Recharts library, ensuring compatibility with its expected data structure.\n• Facilitates clean and effective data visualization by standardizing the input.\n• Adds a new helper function, formatMonth, which converts a date string into a month abbreviation using toLocaleString."
            }
        },
        "id": "ucy9lJNbe1BifDtSYGJY"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-22 22:37:56.000",
        "source": "backend",
        "data": {
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "line": 19,
                            "code": "const formatDateString = (date) => {"
                        },
                        {
                            "line": 20,
                            "code": "return date.split(\"T\")[0];"
                        },
                        {
                            "line": 21,
                            "code": "};"
                        }
                    ],
                    "summaryComponent": "defines a date formatting function"
                },
                {
                    "codeSegments": [
                        {
                            "line": 24,
                            "code": "const chartData = data.data.map((item) => ({"
                        },
                        {
                            "line": 25,
                            "code": "date: item.date,"
                        },
                        {
                            "line": 26,
                            "code": "price: item.close,"
                        },
                        {
                            "line": 27,
                            "code": "}));"
                        }
                    ],
                    "summaryComponent": "transforms stock data for charting"
                },
                {
                    "codeSegments": [
                        {
                            "line": 30,
                            "code": "const formatMonth = (dateString) => {"
                        },
                        {
                            "line": 31,
                            "code": "const dateObj = new Date(dateString);"
                        },
                        {
                            "line": 32,
                            "code": "return dateObj.toLocaleString('default', { month: 'short' });"
                        },
                        {
                            "line": 33,
                            "code": "};"
                        }
                    ],
                    "summaryComponent": "adds a helper to format dates as month abbreviations"
                }
            ],
            "code": "19: const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));\n28: \n29:   // Helper function to format the x-axis as month abbreviation\n30:   const formatMonth = (dateString) => {\n31:     const dateObj = new Date(dateString);\n32:     return dateObj.toLocaleString('default', { month: 'short' });\n33:   };",
            "summary": "This code defines a date formatting function, transforms stock data for charting, and adds a helper to format dates as month abbreviations."
        },
        "id": "PgS81UerhNqz9YKmpadw"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-22 22:37:57.000",
        "source": "backend",
        "data": {
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "line": 19,
                            "code": "const formatDateString = (date) => {"
                        },
                        {
                            "line": 20,
                            "code": "return date.split(\"T\")[0];"
                        }
                    ],
                    "summaryComponent": "A helper function, formatDateString, is defined to extract only the date portion from an ISO datetime string by splitting at the 'T' character."
                },
                {
                    "codeSegments": [
                        {
                            "line": 24,
                            "code": "const chartData = data.data.map((item) => ({"
                        },
                        {
                            "line": 25,
                            "code": "date: item.date,"
                        },
                        {
                            "line": 26,
                            "code": "price: item.close,"
                        }
                    ],
                    "summaryComponent": "The code then processes the input stock data array, mapping each item to a new object containing the original date and the closing price under the keys 'date' and 'price', respectively."
                },
                {
                    "codeSegments": [
                        {
                            "line": 23,
                            "code": "// Combine labels and values into an array of objects for Recharts"
                        }
                    ],
                    "summaryComponent": "This transformation is tailored for compatibility with the Recharts charting library, ensuring the data structure matches the expected input format."
                },
                {
                    "codeSegments": [
                        {
                            "line": 30,
                            "code": "const formatMonth = (dateString) => {"
                        },
                        {
                            "line": 31,
                            "code": "const dateObj = new Date(dateString);"
                        },
                        {
                            "line": 32,
                            "code": "return dateObj.toLocaleString('default', { month: 'short' });"
                        }
                    ],
                    "summaryComponent": "Additionally, a new helper function, formatMonth, is introduced to convert a date string into a month abbreviation using JavaScript's toLocaleString method."
                },
                {
                    "codeSegments": [
                        {
                            "line": 24,
                            "code": "const chartData = data.data.map((item) => ({"
                        },
                        {
                            "line": 19,
                            "code": "const formatDateString = (date) => {"
                        },
                        {
                            "line": 30,
                            "code": "const formatMonth = (dateString) => {"
                        }
                    ],
                    "summaryComponent": "The result is a clean dataset ready for visualization, with enhanced date formatting capabilities."
                }
            ],
            "code": "19: const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));\n28: \n29:   // Helper function to format the x-axis as month abbreviation\n30:   const formatMonth = (dateString) => {\n31:     const dateObj = new Date(dateString);\n32:     return dateObj.toLocaleString('default', { month: 'short' });\n33:   };",
            "summary": "A helper function, formatDateString, is defined to extract only the date portion from an ISO datetime string by splitting at the 'T' character. The code then processes the input stock data array, mapping each item to a new object containing the original date and the closing price under the keys 'date' and 'price', respectively. This transformation is tailored for compatibility with the Recharts charting library, ensuring the data structure matches the expected input format. Additionally, a new helper function, formatMonth, is introduced to convert a date string into a month abbreviation using JavaScript's toLocaleString method. The result is a clean dataset ready for visualization, with enhanced date formatting capabilities."
        },
        "id": "MdU6S9AJ8XP1B6AeMiRx"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-22 22:37:57.000",
        "source": "backend",
        "data": {
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "line": 19,
                            "code": "const formatDateString = (date) => {"
                        },
                        {
                            "line": 20,
                            "code": "return date.split(\"T\")[0];"
                        },
                        {
                            "line": 21,
                            "code": "};"
                        }
                    ],
                    "summaryComponent": "a function that formats a date string by removing the time component"
                },
                {
                    "codeSegments": [
                        {
                            "line": 24,
                            "code": "const chartData = data.data.map((item) => ({"
                        },
                        {
                            "line": 25,
                            "code": "date: item.date,"
                        },
                        {
                            "line": 26,
                            "code": "price: item.close,"
                        },
                        {
                            "line": 27,
                            "code": "}));"
                        }
                    ],
                    "summaryComponent": "maps raw stock data into a new array of objects each containing a date and closing price"
                },
                {
                    "codeSegments": [
                        {
                            "line": 24,
                            "code": "const chartData = data.data.map((item) => ({"
                        }
                    ],
                    "summaryComponent": "to prepare it for chart rendering"
                },
                {
                    "codeSegments": [
                        {
                            "line": 30,
                            "code": "const formatMonth = (dateString) => {"
                        },
                        {
                            "line": 31,
                            "code": "const dateObj = new Date(dateString);"
                        },
                        {
                            "line": 32,
                            "code": "return dateObj.toLocaleString('default', { month: 'short' });"
                        },
                        {
                            "line": 33,
                            "code": "};"
                        }
                    ],
                    "summaryComponent": "introduces a new helper function to format date strings as month abbreviations"
                }
            ],
            "code": "19: const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));\n28: \n29:   // Helper function to format the x-axis as month abbreviation\n30:   const formatMonth = (dateString) => {\n31:     const dateObj = new Date(dateString);\n32:     return dateObj.toLocaleString('default', { month: 'short' });\n33:   };",
            "summary": "The code includes a function that formats a date string by removing the time component, maps raw stock data into a new array of objects each containing a date and closing price to prepare it for chart rendering, and introduces a new helper function to format date strings as month abbreviations."
        },
        "id": "qnaWdPO40OpwxKUUrWoL"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-22 22:37:57.000",
        "source": "backend",
        "data": {
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "line": 19,
                            "code": "const formatDateString = (date) => {"
                        },
                        {
                            "line": 20,
                            "code": "return date.split(\"T\")[0];"
                        },
                        {
                            "line": 21,
                            "code": "};"
                        }
                    ],
                    "summaryComponent": "Defines a function to format dates."
                },
                {
                    "codeSegments": [
                        {
                            "line": 24,
                            "code": "const chartData = data.data.map((item) => ({"
                        },
                        {
                            "line": 25,
                            "code": "date: item.date,"
                        },
                        {
                            "line": 26,
                            "code": "price: item.close,"
                        },
                        {
                            "line": 27,
                            "code": "}));"
                        }
                    ],
                    "summaryComponent": "Transforms stock data for use in a chart."
                },
                {
                    "codeSegments": [
                        {
                            "line": 30,
                            "code": "const formatMonth = (dateString) => {"
                        },
                        {
                            "line": 31,
                            "code": "const dateObj = new Date(dateString);"
                        },
                        {
                            "line": 32,
                            "code": "return dateObj.toLocaleString('default', { month: 'short' });"
                        },
                        {
                            "line": 33,
                            "code": "};"
                        }
                    ],
                    "summaryComponent": "Adds a helper function to format dates as month abbreviations."
                }
            ],
            "code": "19: const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));\n28: \n29:   // Helper function to format the x-axis as month abbreviation\n30:   const formatMonth = (dateString) => {\n31:     const dateObj = new Date(dateString);\n32:     return dateObj.toLocaleString('default', { month: 'short' });\n33:   };",
            "summary": "• Defines a function to format dates.\n• Transforms stock data for use in a chart.\n• Adds a helper function to format dates as month abbreviations."
        },
        "id": "tZ8PFendl3GwBHvMgS4g"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-22 22:37:58.000",
        "source": "backend",
        "data": {
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "line": 19,
                            "code": "const formatDateString = (date) => {"
                        },
                        {
                            "line": 20,
                            "code": "return date.split(\"T\")[0];"
                        },
                        {
                            "line": 21,
                            "code": "};"
                        }
                    ],
                    "summaryComponent": "Provides a function to format date strings by extracting the date part."
                },
                {
                    "codeSegments": [
                        {
                            "line": 24,
                            "code": "const chartData = data.data.map((item) => ({"
                        }
                    ],
                    "summaryComponent": "Transforms the input stock data into a format suitable for charting."
                },
                {
                    "codeSegments": [
                        {
                            "line": 25,
                            "code": "date: item.date,"
                        },
                        {
                            "line": 26,
                            "code": "price: item.close,"
                        }
                    ],
                    "summaryComponent": "Each new object contains 'date' and 'price' fields."
                },
                {
                    "codeSegments": [
                        {
                            "line": 23,
                            "code": "// Combine labels and values into an array of objects for Recharts"
                        }
                    ],
                    "summaryComponent": "Prepares data specifically for use with the Recharts library."
                },
                {
                    "codeSegments": [
                        {
                            "line": 30,
                            "code": "const formatMonth = (dateString) => {"
                        },
                        {
                            "line": 31,
                            "code": "const dateObj = new Date(dateString);"
                        },
                        {
                            "line": 32,
                            "code": "return dateObj.toLocaleString('default', { month: 'short' });"
                        },
                        {
                            "line": 33,
                            "code": "};"
                        }
                    ],
                    "summaryComponent": "Adds a helper function that formats a date string into a month abbreviation."
                }
            ],
            "code": "19: const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));\n28: \n29:   // Helper function to format the x-axis as month abbreviation\n30:   const formatMonth = (dateString) => {\n31:     const dateObj = new Date(dateString);\n32:     return dateObj.toLocaleString('default', { month: 'short' });\n33:   };",
            "summary": "• Provides a function to format date strings by extracting the date part.\n• Transforms the input stock data into a format suitable for charting.\n  ◦ Each new object contains 'date' and 'price' fields.\n• Prepares data specifically for use with the Recharts library.\n• Adds a helper function that formats a date string into a month abbreviation."
        },
        "id": "LWklB73f0WoLFEmzAU0b"
    },
    {
        "event": "autotransit_section",
        "timestamp": "2025-08-22 22:37:58.000",
        "source": "frontend",
        "data": {
            "before_section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "after_section_id": "4978fc9b-b49f-4a05-89ac-83316533133b"
        },
        "id": "TH3SpOy8ju6mf75CBJxB"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-22 22:37:58.000",
        "source": "backend",
        "data": {
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "line": 19,
                            "code": "const formatDateString = (date) => {"
                        }
                    ],
                    "summaryComponent": "Defines formatDateString to process ISO date strings."
                },
                {
                    "codeSegments": [
                        {
                            "line": 20,
                            "code": "return date.split(\"T\")[0];"
                        }
                    ],
                    "summaryComponent": "Splits the input string at 'T' and returns the date part."
                },
                {
                    "codeSegments": [
                        {
                            "line": 24,
                            "code": "const chartData = data.data.map((item) => ({"
                        }
                    ],
                    "summaryComponent": "Transforms the input stock data array for charting purposes."
                },
                {
                    "codeSegments": [
                        {
                            "line": 25,
                            "code": "date: item.date,"
                        },
                        {
                            "line": 26,
                            "code": "price: item.close,"
                        }
                    ],
                    "summaryComponent": "Maps each item to an object with 'date' and 'price' keys."
                },
                {
                    "codeSegments": [
                        {
                            "line": 25,
                            "code": "date: item.date,"
                        }
                    ],
                    "summaryComponent": "'date' is taken directly from the item's date property."
                },
                {
                    "codeSegments": [
                        {
                            "line": 26,
                            "code": "price: item.close,"
                        }
                    ],
                    "summaryComponent": "'price' is assigned from the item's close property."
                },
                {
                    "codeSegments": [
                        {
                            "line": 23,
                            "code": "// Combine labels and values into an array of objects for Recharts"
                        }
                    ],
                    "summaryComponent": "Prepares the data specifically for use with the Recharts library, ensuring compatibility with its expected data structure."
                },
                {
                    "codeSegments": [
                        {
                            "line": 24,
                            "code": "const chartData = data.data.map((item) => ({"
                        }
                    ],
                    "summaryComponent": "Facilitates clean and effective data visualization by standardizing the input."
                },
                {
                    "codeSegments": [
                        {
                            "line": 30,
                            "code": "const formatMonth = (dateString) => {"
                        },
                        {
                            "line": 32,
                            "code": "return dateObj.toLocaleString('default', { month: 'short' });"
                        }
                    ],
                    "summaryComponent": "Adds a new helper function, formatMonth, which converts a date string into a month abbreviation using toLocaleString."
                }
            ],
            "code": "19: const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));\n28: \n29:   // Helper function to format the x-axis as month abbreviation\n30:   const formatMonth = (dateString) => {\n31:     const dateObj = new Date(dateString);\n32:     return dateObj.toLocaleString('default', { month: 'short' });\n33:   };",
            "summary": "• Defines formatDateString to process ISO date strings.\n  ◦ Splits the input string at 'T' and returns the date part.\n• Transforms the input stock data array for charting purposes.\n  ◦ Maps each item to an object with 'date' and 'price' keys.\n  ◦ 'date' is taken directly from the item's date property.\n  ◦ 'price' is assigned from the item's close property.\n• Prepares the data specifically for use with the Recharts library, ensuring compatibility with its expected data structure.\n• Facilitates clean and effective data visualization by standardizing the input.\n• Adds a new helper function, formatMonth, which converts a date string into a month abbreviation using toLocaleString."
        },
        "id": "ZXBLVzWdixjPGozAymgg"
    },
    {
        "event": "create_new_section",
        "timestamp": "2025-08-22 22:37:58.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "section_data": {
                "summaryData": {
                    "low_structured": "• Defines a function to format dates.\n• Transforms stock data for use in a chart.\n• Adds a helper function to format dates as month abbreviations.",
                    "low_unstructured": "This code defines a date formatting function, transforms stock data for charting, and adds a helper to format dates as month abbreviations.",
                    "title": "Data Formatting, Transformation, and Month Abbreviation Helper for Charting",
                    "medium_unstructured": "The code includes a function that formats a date string by removing the time component, maps raw stock data into a new array of objects each containing a date and closing price to prepare it for chart rendering, and introduces a new helper function to format date strings as month abbreviations.",
                    "medium_structured": "• Provides a function to format date strings by extracting the date part.\n• Transforms the input stock data into a format suitable for charting.\n  ◦ Each new object contains 'date' and 'price' fields.\n• Prepares data specifically for use with the Recharts library.\n• Adds a helper function that formats a date string into a month abbreviation.",
                    "high_unstructured": "A helper function, formatDateString, is defined to extract only the date portion from an ISO datetime string by splitting at the 'T' character. The code then processes the input stock data array, mapping each item to a new object containing the original date and the closing price under the keys 'date' and 'price', respectively. This transformation is tailored for compatibility with the Recharts charting library, ensuring the data structure matches the expected input format. Additionally, a new helper function, formatMonth, is introduced to convert a date string into a month abbreviation using JavaScript's toLocaleString method. The result is a clean dataset ready for visualization, with enhanced date formatting capabilities.",
                    "high_structured": "• Defines formatDateString to process ISO date strings.\n  ◦ Splits the input string at 'T' and returns the date part.\n• Transforms the input stock data array for charting purposes.\n  ◦ Maps each item to an object with 'date' and 'price' keys.\n  ◦ 'date' is taken directly from the item's date property.\n  ◦ 'price' is assigned from the item's close property.\n• Prepares the data specifically for use with the Recharts library, ensuring compatibility with its expected data structure.\n• Facilitates clean and effective data visualization by standardizing the input.\n• Adds a new helper function, formatMonth, which converts a date string into a month abbreviation using toLocaleString."
                },
                "editPromptValue": "",
                "title": "Data Formatting, Transformation, and Month Abbreviation Helper for Charting",
                "editPromptStructured": null,
                "selectedDetailLevel": "medium",
                "metadata": {
                    "filename": "StockChart.jsx",
                    "fullPath": "/project/workspace/frontend/src/StockChart.jsx",
                    "id": "4978fc9b-b49f-4a05-89ac-83316533133b",
                    "originalCode": "const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  // Helper function to format the x-axis as month abbreviation\n  const formatMonth = (dateString) => {\n    const dateObj = new Date(dateString);\n    return dateObj.toLocaleString('default', { month: 'short' });\n  };",
                    "offset": 315
                },
                "createdAt": 1755887878000,
                "lines": [
                    19,
                    33
                ],
                "oldSummaryData": {
                    "low_structured": "• Defines a function to format dates.\n• Transforms stock data for use in a chart.",
                    "low_unstructured": "This code defines a date formatting function and transforms stock data for charting.",
                    "title": "Data Formatting and Transformation for Charting",
                    "medium_unstructured": "The code includes a function that formats a date string by removing the time component. It also maps raw stock data into a new array of objects, each containing a date and closing price, to prepare it for chart rendering.",
                    "medium_structured": "• Provides a function to format date strings by extracting the date part.\n• Transforms the input stock data into a format suitable for charting.\n  ◦ Each new object contains 'date' and 'price' fields.\n• Prepares data specifically for use with the Recharts library.",
                    "high_unstructured": "A helper function, formatDateString, is defined to extract only the date portion from an ISO datetime string by splitting at the 'T' character. The code then processes the input stock data array, mapping each item to a new object containing the original date and the closing price under the keys 'date' and 'price', respectively. This transformation is tailored for compatibility with the Recharts charting library, ensuring the data structure matches the expected input format. The result is a clean dataset ready for visualization.",
                    "high_structured": "• Defines formatDateString to process ISO date strings.\n  ◦ Splits the input string at 'T' and returns the date part.\n• Transforms the input stock data array for charting purposes.\n  ◦ Maps each item to an object with 'date' and 'price' keys.\n  ◦ 'date' is taken directly from the item's date property.\n  ◦ 'price' is assigned from the item's close property.\n• Prepares the data specifically for use with the Recharts library, ensuring compatibility with its expected data structure.\n• Facilitates clean and effective data visualization by standardizing the input."
                },
                "summaryMappings": {
                    "low_structured": [
                        {
                            "codeSegments": [
                                {
                                    "line": 19,
                                    "code": "const formatDateString = (date) => {"
                                },
                                {
                                    "line": 20,
                                    "code": "return date.split(\"T\")[0];"
                                },
                                {
                                    "line": 21,
                                    "code": "};"
                                }
                            ],
                            "summaryComponent": "Defines a function to format dates."
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 24,
                                    "code": "const chartData = data.data.map((item) => ({"
                                },
                                {
                                    "line": 25,
                                    "code": "date: item.date,"
                                },
                                {
                                    "line": 26,
                                    "code": "price: item.close,"
                                },
                                {
                                    "line": 27,
                                    "code": "}));"
                                }
                            ],
                            "summaryComponent": "Transforms stock data for use in a chart."
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 30,
                                    "code": "const formatMonth = (dateString) => {"
                                },
                                {
                                    "line": 31,
                                    "code": "const dateObj = new Date(dateString);"
                                },
                                {
                                    "line": 32,
                                    "code": "return dateObj.toLocaleString('default', { month: 'short' });"
                                },
                                {
                                    "line": 33,
                                    "code": "};"
                                }
                            ],
                            "summaryComponent": "Adds a helper function to format dates as month abbreviations."
                        }
                    ],
                    "low_unstructured": [
                        {
                            "codeSegments": [
                                {
                                    "line": 19,
                                    "code": "const formatDateString = (date) => {"
                                },
                                {
                                    "line": 20,
                                    "code": "return date.split(\"T\")[0];"
                                },
                                {
                                    "line": 21,
                                    "code": "};"
                                }
                            ],
                            "summaryComponent": "defines a date formatting function"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 24,
                                    "code": "const chartData = data.data.map((item) => ({"
                                },
                                {
                                    "line": 25,
                                    "code": "date: item.date,"
                                },
                                {
                                    "line": 26,
                                    "code": "price: item.close,"
                                },
                                {
                                    "line": 27,
                                    "code": "}));"
                                }
                            ],
                            "summaryComponent": "transforms stock data for charting"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 30,
                                    "code": "const formatMonth = (dateString) => {"
                                },
                                {
                                    "line": 31,
                                    "code": "const dateObj = new Date(dateString);"
                                },
                                {
                                    "line": 32,
                                    "code": "return dateObj.toLocaleString('default', { month: 'short' });"
                                },
                                {
                                    "line": 33,
                                    "code": "};"
                                }
                            ],
                            "summaryComponent": "adds a helper to format dates as month abbreviations"
                        }
                    ],
                    "medium_structured": [
                        {
                            "codeSegments": [
                                {
                                    "line": 19,
                                    "code": "const formatDateString = (date) => {"
                                },
                                {
                                    "line": 20,
                                    "code": "return date.split(\"T\")[0];"
                                },
                                {
                                    "line": 21,
                                    "code": "};"
                                }
                            ],
                            "summaryComponent": "Provides a function to format date strings by extracting the date part."
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 24,
                                    "code": "const chartData = data.data.map((item) => ({"
                                }
                            ],
                            "summaryComponent": "Transforms the input stock data into a format suitable for charting."
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 25,
                                    "code": "date: item.date,"
                                },
                                {
                                    "line": 26,
                                    "code": "price: item.close,"
                                }
                            ],
                            "summaryComponent": "Each new object contains 'date' and 'price' fields."
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 23,
                                    "code": "// Combine labels and values into an array of objects for Recharts"
                                }
                            ],
                            "summaryComponent": "Prepares data specifically for use with the Recharts library."
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 30,
                                    "code": "const formatMonth = (dateString) => {"
                                },
                                {
                                    "line": 31,
                                    "code": "const dateObj = new Date(dateString);"
                                },
                                {
                                    "line": 32,
                                    "code": "return dateObj.toLocaleString('default', { month: 'short' });"
                                },
                                {
                                    "line": 33,
                                    "code": "};"
                                }
                            ],
                            "summaryComponent": "Adds a helper function that formats a date string into a month abbreviation."
                        }
                    ],
                    "medium_unstructured": [
                        {
                            "codeSegments": [
                                {
                                    "line": 19,
                                    "code": "const formatDateString = (date) => {"
                                },
                                {
                                    "line": 20,
                                    "code": "return date.split(\"T\")[0];"
                                },
                                {
                                    "line": 21,
                                    "code": "};"
                                }
                            ],
                            "summaryComponent": "a function that formats a date string by removing the time component"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 24,
                                    "code": "const chartData = data.data.map((item) => ({"
                                },
                                {
                                    "line": 25,
                                    "code": "date: item.date,"
                                },
                                {
                                    "line": 26,
                                    "code": "price: item.close,"
                                },
                                {
                                    "line": 27,
                                    "code": "}));"
                                }
                            ],
                            "summaryComponent": "maps raw stock data into a new array of objects each containing a date and closing price"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 24,
                                    "code": "const chartData = data.data.map((item) => ({"
                                }
                            ],
                            "summaryComponent": "to prepare it for chart rendering"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 30,
                                    "code": "const formatMonth = (dateString) => {"
                                },
                                {
                                    "line": 31,
                                    "code": "const dateObj = new Date(dateString);"
                                },
                                {
                                    "line": 32,
                                    "code": "return dateObj.toLocaleString('default', { month: 'short' });"
                                },
                                {
                                    "line": 33,
                                    "code": "};"
                                }
                            ],
                            "summaryComponent": "introduces a new helper function to format date strings as month abbreviations"
                        }
                    ],
                    "high_unstructured": [
                        {
                            "codeSegments": [
                                {
                                    "line": 19,
                                    "code": "const formatDateString = (date) => {"
                                },
                                {
                                    "line": 20,
                                    "code": "return date.split(\"T\")[0];"
                                }
                            ],
                            "summaryComponent": "A helper function, formatDateString, is defined to extract only the date portion from an ISO datetime string by splitting at the 'T' character."
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 24,
                                    "code": "const chartData = data.data.map((item) => ({"
                                },
                                {
                                    "line": 25,
                                    "code": "date: item.date,"
                                },
                                {
                                    "line": 26,
                                    "code": "price: item.close,"
                                }
                            ],
                            "summaryComponent": "The code then processes the input stock data array, mapping each item to a new object containing the original date and the closing price under the keys 'date' and 'price', respectively."
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 23,
                                    "code": "// Combine labels and values into an array of objects for Recharts"
                                }
                            ],
                            "summaryComponent": "This transformation is tailored for compatibility with the Recharts charting library, ensuring the data structure matches the expected input format."
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 30,
                                    "code": "const formatMonth = (dateString) => {"
                                },
                                {
                                    "line": 31,
                                    "code": "const dateObj = new Date(dateString);"
                                },
                                {
                                    "line": 32,
                                    "code": "return dateObj.toLocaleString('default', { month: 'short' });"
                                }
                            ],
                            "summaryComponent": "Additionally, a new helper function, formatMonth, is introduced to convert a date string into a month abbreviation using JavaScript's toLocaleString method."
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 24,
                                    "code": "const chartData = data.data.map((item) => ({"
                                },
                                {
                                    "line": 19,
                                    "code": "const formatDateString = (date) => {"
                                },
                                {
                                    "line": 30,
                                    "code": "const formatMonth = (dateString) => {"
                                }
                            ],
                            "summaryComponent": "The result is a clean dataset ready for visualization, with enhanced date formatting capabilities."
                        }
                    ],
                    "high_structured": [
                        {
                            "codeSegments": [
                                {
                                    "line": 19,
                                    "code": "const formatDateString = (date) => {"
                                }
                            ],
                            "summaryComponent": "Defines formatDateString to process ISO date strings."
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 20,
                                    "code": "return date.split(\"T\")[0];"
                                }
                            ],
                            "summaryComponent": "Splits the input string at 'T' and returns the date part."
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 24,
                                    "code": "const chartData = data.data.map((item) => ({"
                                }
                            ],
                            "summaryComponent": "Transforms the input stock data array for charting purposes."
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 25,
                                    "code": "date: item.date,"
                                },
                                {
                                    "line": 26,
                                    "code": "price: item.close,"
                                }
                            ],
                            "summaryComponent": "Maps each item to an object with 'date' and 'price' keys."
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 25,
                                    "code": "date: item.date,"
                                }
                            ],
                            "summaryComponent": "'date' is taken directly from the item's date property."
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 26,
                                    "code": "price: item.close,"
                                }
                            ],
                            "summaryComponent": "'price' is assigned from the item's close property."
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 23,
                                    "code": "// Combine labels and values into an array of objects for Recharts"
                                }
                            ],
                            "summaryComponent": "Prepares the data specifically for use with the Recharts library, ensuring compatibility with its expected data structure."
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 24,
                                    "code": "const chartData = data.data.map((item) => ({"
                                }
                            ],
                            "summaryComponent": "Facilitates clean and effective data visualization by standardizing the input."
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 30,
                                    "code": "const formatMonth = (dateString) => {"
                                },
                                {
                                    "line": 32,
                                    "code": "return dateObj.toLocaleString('default', { month: 'short' });"
                                }
                            ],
                            "summaryComponent": "Adds a new helper function, formatMonth, which converts a date string into a month abbreviation using toLocaleString."
                        }
                    ]
                },
                "editPromptDetailLevel": null,
                "selectedStructured": "unstructured"
            }
        },
        "id": "yd9a3fn9D465LDWAyQb5"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:38:34.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 3,
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "FpN5mfkuzUNMbJ3Rxy9x"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:38:35.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "ltTXggFlBr5qAEM6UBEv"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:38:37.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "4LyT9rWgysb2Kg27ZLBf"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:38:37.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 0,
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "Am123Y1VmqywmtZOjeys"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:38:37.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 3,
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "EodkkpDQ4fIjE2vjun10"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:38:37.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "NJKTOLY2T3AYGTlV8lLA"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:38:37.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "NUYKQAynhxTQW8htDOJ2"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:38:37.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 1,
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "QQdzCxbhgVBvu4JJoz9T"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:38:37.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "Zf2ktkQJ7FShhHKGCq0b"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:38:37.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 2,
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "wzYvKVbEe3FOsNDWaJAt"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:38:39.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 0,
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "xdpqFM3Llem89U8LtkzU"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:38:40.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "YtYRX4k4cTGZwU4RKlck"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:38:41.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 3,
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "AeIWNXkidhtw96xxzCfr"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:38:41.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 2,
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "HDtYeatZPOoCGPG1iTJX"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:38:41.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "b0aRQgWI9br5TMjHFak9"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:38:41.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 1,
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "b1tUootm713ctMLI0UaP"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:38:41.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "mi0A0FLML3bDOnCNNsr0"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:38:41.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "oYMVWxALx7W1TlZc7XTn"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:38:42.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 1,
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "0iFa208iA8yikBbG8VVL"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:38:42.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 2,
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "DgG49Hp1TTvkPj0rXyo6"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:38:42.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 0,
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "RsRTIsUhuFGw9NBMAH9I"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:38:42.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "TNVj7gWK0yKpPjgQydXJ"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:38:42.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "XvayF43n2WATZZm3mVT1"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:38:42.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "ZZIeKXvD5vd56BBmpvvf"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:38:42.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "e2QeINmAFP89jMeLeImP"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:38:42.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 3,
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "ge18Ndvs70nxp7PTcV3B"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:38:42.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "iKMo56hwkCIX4DBDO2ci"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:38:42.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 1,
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "mTgXhiFzo1KSeKl9DqVF"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:38:42.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 0,
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "qNgRmoafufaSQBQPBuWT"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:38:43.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "DjE3KFiYglqdjHsogMYv"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:38:43.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "IC6v9LjnRNNQ1OjkypxU"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:38:43.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 0,
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "K20GQKisbWIKvSltYyp4"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:38:43.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 0,
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "QvnWL7Ht02yKssVV5jUN"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:38:43.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 1,
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "gzTnn0d80NCNi2leo6qH"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:38:43.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "vpHhW0tuSqVjsnzyL2pb"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:38:44.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 3,
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "9biO1kgFAPlLsBqY9f75"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:38:44.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "rpNf7vgYuWFd7ehZpHFa"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:38:45.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "IYh8niGJra6KbfbcmsH1"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:38:45.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "ZK8M5NAZ51hgRFGqqfhR"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:38:45.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 1,
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "pZ7wWcswfKwJzG36nWyI"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:38:45.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 0,
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "tumBKa4gpVmBDPIo4qhH"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:38:47.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "ORoKVNUKIuwtP33dcY7c"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:38:50.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 2,
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "6Mek3j9aZCyNnIynxJOk"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:38:50.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "80qBfpno5yWPAEW5n4Wj"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:38:50.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "BkVpKvHEAaZ769g5lYAG"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:38:50.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 0,
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "TB038u5EKPVtLOt95MDq"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:38:50.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "lIwl9RBrXqkskxdx1ubI"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:38:50.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 1,
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "oWwiukIYEeUP9LhbCaFU"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:38:59.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "18PReOoRDYdDiTD7PPwe"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:38:59.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 1,
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "JKq1gmwM8pFnsudWNr5R"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:38:59.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 0,
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "r4RnOZNLBu4mCiGko9Rv"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:39:00.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "ELisORAtqpEfu1Qz3Mvy"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:39:00.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 3,
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "J3KsDbaXxT4C0grIQCBJ"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:39:00.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "LaRjwFBKdavL06FA5p9K"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:39:00.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "jgMlMFAQl7X2SCh4GEk2"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:39:00.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 2,
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "vDoGliEuVjK13DHICsGv"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:39:01.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 3,
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "0A5DSUWfivyx6bI84vEu"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:39:02.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 1,
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "1qzAI3EwLu1n7iIk6DjJ"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:39:02.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "6r0h8JvgouFgBAs7HzxY"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:39:02.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "Aai40uXwdGzVqA1u2e52"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:39:02.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 0,
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "KA6twJ89zPkN921MB7EG"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:39:02.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "lY6ZADovLpOwyffrEbnh"
    },
    {
        "event": "change_summary_level",
        "timestamp": "2025-08-22 22:39:05.000",
        "source": "frontend",
        "data": {
            "before_detail_level": "medium",
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "after_detail_level": "high",
            "before_structured": "unstructured",
            "after_structured": "unstructured"
        },
        "id": "0seGBgTIfGU7IAEKX3Qc"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:39:05.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 1,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "LZ0UOCbJGSbNidiWxXMJ"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:39:05.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "WAfPgAWguLEvkD4zIx0D"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:39:05.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 0,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "c6V4Q0Ta4WDbCu7SjXxx"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:39:05.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "eeMiMKKBAMLXUSPQ6Lg1"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:39:05.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 2,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "xMmpLmgU4pCUHoTam854"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:39:06.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 3,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "09f5HjiwItxID7PMDcEA"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:39:06.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "dzMCQ2ejpBHUJfFlhUmo"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:39:06.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "fF9mE5Tg6LgS6qWEuBEG"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:39:06.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 4,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "jXG0RrFezUtOQD0Rzjc8"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:39:08.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 3,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "JeHEXwKj4c4H7Bb6CYc9"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:39:08.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "R5ZmyArqJDz1IUvq0BSl"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:39:10.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 4,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "k4p1FtCCWFNAiQzD6vYK"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:39:10.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "ook6Qk3vn8KtAA2jzH42"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:39:11.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "JJPPQhAPaVcHZixwmM6C"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:39:11.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 3,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "UV7qtjtO01KNKIxbNiJb"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:39:12.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "HsDzd5hOaNqxyx7UOwJA"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:39:12.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 2,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "sVJP9B0B4sv6VSnDllRl"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:39:12.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "xNRlgbxNKeVddTcvSQRD"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:39:15.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 3,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "AOu8VS8pv24v5ZQnPPIc"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:39:15.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "BBTJaVVKdSQA8td0L7Px"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:39:15.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 0,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "CXI1ZXUT71nXJeI8oiPP"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:39:15.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 3,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "DzkAqhw9rM6v885PnAUK"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:39:15.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 4,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "Hkr6lkqVezx75KTi1myI"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:39:15.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 1,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "II0IxiWSWnihWPi5LxQl"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:39:15.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "KzInZTMn0VdbxSysgoKV"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:39:15.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "SXgYT5HFfTfovj4aRM7P"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:39:15.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "UBeCGzboC6jdFnnBGi3u"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:39:15.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "YvbAKIC5tlerQJGoARGr"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:39:15.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "ZopWTdwEymCVBBLqxgH2"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:39:15.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 4,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "atJOXzvMUGWQol6bdSjy"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:39:15.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 1,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "cFe81zW7y8bXHiNB7b6C"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:39:15.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 1,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "cZT8Cpa6MmFyWg6AIVB9"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:39:15.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "fJ9hJ5gcHxKj7gUPfSVE"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:39:15.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "hxOYhg3OwydKPJwrQBVB"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:39:15.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 2,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "jZM0RGv1AgOOGvZlsZoS"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:39:15.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 1,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "jbtSJrgcK65UGMObxyyW"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:39:15.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 2,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "kL50ftF6oUAYeVokll3P"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:39:15.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "lzWAucjinfvbBp8BELj7"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:39:15.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "m6M9tINB2exPUVghC4UV"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:39:15.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "p4aeD5QKuONdJEjqdHqM"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:39:15.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 0,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "pFmRpOsRwlAAcIPGAizr"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:39:15.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 2,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "uArM3ObuohSq2ugW5Lqn"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:39:15.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "x0dK6Ral9VtB52C6BHei"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:39:16.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 2,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "6irA93JCPNj6j5PWjGcf"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:39:16.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "8BzUpdaoOudJShxy9HIF"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:39:16.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "dqukLX91OenlyZ66KSCy"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:39:16.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 3,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "qwVnIYejkiPFmDGN8QOV"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:39:17.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 1,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "1Ck4jEZjhGCVs2BNOGW5"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:39:17.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 3,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "3abZe6UeXcflZ2ZVaZhI"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:39:17.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "BSzi6PWBMfoT5k9WWN1F"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:39:17.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "HoSwJ3r7pDMtxiMPSaQ8"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:39:17.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "Q8YmtXQqCfmq5SbomQto"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:39:17.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "QocE88FTsLhxCSg4KAMj"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:39:17.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 2,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "RZXK7dyPlrqaiIlTvFBN"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:39:17.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 0,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "RlukvA02NPWoBdNUxAsf"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:39:17.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "gFnQwNDioyLBY87LcXWY"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:39:17.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "lPwOTlfhQcUWIDVeN0Pf"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:39:17.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "lQgLBjTp4GfT7yHrpfKD"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:39:17.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 1,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "pTUxhUVsKnWqmSFnLzfm"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:39:17.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 2,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "sebTD5umtMYSc7KDrrXY"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:39:17.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 2,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "vaSkcEmXEGFNMsKFkusg"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:39:17.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "wwihe0aReRQv9HEZfVi7"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:39:17.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 0,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "xMXgtU09gbbl5QOP5jBH"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:39:25.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "LU7OZz2pBAvf1WK8Z6sL"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:39:48.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "2uskExjvMvM73H42j0v2"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:39:48.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "4w8nqomvyVE6cXdHj5gi"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:39:48.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "MbqALfEtOlp4cBosECcQ"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:39:48.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 2,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "dB5ht0AOC6oKfvF46zzK"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:39:48.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 3,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "fWu0nxzpLaEPHEbbyktb"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:39:48.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 4,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "mMx6nPPSBdFwQXBZXDEo"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:39:50.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 4,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "34Hxjuwf9vmO3oMMPnXm"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:39:50.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 2,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "8GEvJBYWbqZ1mBFtN90G"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:39:50.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "Hrn6ci9LWUqmKAt2SdgJ"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:39:50.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "JhTAMEImSD5qQNJYdljm"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:39:50.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 3,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "KTgncG9wAWP017xWNJLa"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:39:50.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "PFCxW0RaFlyVYa46raIi"
    },
    {
        "event": "toggle_section",
        "timestamp": "2025-08-22 22:40:10.000",
        "source": "frontend",
        "data": {
            "before_section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "after_section_id": "e6fafde9-26ab-4103-8218-ac584e313def"
        },
        "id": "08Y6QyqbPhivwfzCCxrQ"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:40:10.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "TTNsFrv7BhbK1vaBhutJ"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:40:10.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 6,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "XaQ2ODzXNMZpGgACbBXL"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:40:10.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 5,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "dEmhslz3cy6AB6tCWaR1"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:40:11.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 3,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "36AOryT96BvNhJ9nYNuu"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:40:11.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 4,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "3vQFC3ERvIfRDKzTka9o"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:40:11.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "4gAKKXgBSP3gwh5Z07UO"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:40:11.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 4,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "5SHThQw4oNLCR6K57275"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:40:11.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 5,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "9639ZRQcHXfNmk8uybDW"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:40:11.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "I3OEJhk0YfYWO907lLLp"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:40:11.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "KyTRqdr7Au7G9vvOp5Hp"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:40:11.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "N9xNUhEA9wCLHejoUW8D"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:40:11.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 3,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "PI3tj9zukSihn3ExuV6v"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:40:11.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 7,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "Ujrod35gfI3zLBKrG0Tz"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:40:11.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "Uloku0Q3Knlak23k4f3V"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:40:11.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 2,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "k2fbXAtXdN6VZwLvWt7A"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:40:11.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "kM2XmIy0zoVv4ZxYIfJh"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:40:11.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "kft80QAEMi15bjAbpMN2"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:40:11.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "mOAwDuJRoyTvpCdIdQAV"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:40:11.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 6,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "wzbe1QIyUwqtWREDKPse"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:40:12.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "2qFru1Oj2aVoXCaWtw44"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:40:12.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "6JGa04chaMq7SLEr5Kst"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:40:12.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "9dbjRxu258N11oBYXp30"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:40:12.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 6,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "CErdsUq9ErBRElO9RCHp"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:40:12.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 7,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "JX8eSp98kxIGPbvIJCaA"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:40:12.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 4,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "OvZflmG5MuEfARIR7reX"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:40:12.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "Sv5EE6xsU27hxLFxVZi1"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:40:12.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "WL2Q7yCvQbm0bxEsUQ81"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:40:12.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 5,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "dsT4wr7qMeYzMpGIraQj"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:40:12.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 5,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "maAVbtTYdEm8At1KvUwN"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:40:12.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "tOIOINs3aAuT1li0wXQE"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:40:12.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 6,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "wCG9gBS4qSUKRaDgg62F"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:40:12.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "wMUlnpYe5P33j7LZ58Me"
    },
    {
        "event": "apply_instruction_summary",
        "timestamp": "2025-08-22 22:40:59.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "instruction": "modify the x-axis to show the short month name like Jan, Feb, remember to modify the formatDateString function",
            "original_summary": "A helper function, formatDateString, is defined to extract only the date portion from an ISO datetime string by splitting at the 'T' character. The code then processes the input stock data array, mapping each item to a new object containing the original date and the closing price under the keys 'date' and 'price', respectively. The transformation is tailored for compatibility with the Recharts charting library, ensuring the data structure matches the expected input format. The result is a clean dataset ready for visualization. Additionally, the x-axis is modified to display the month name (e.g., Jan, Feb) instead of the full date, enhancing readability on the chart.",
            "structured": "unstructured"
        },
        "id": "KNylecpXWFYHL0PdvOxH"
    },
    {
        "event": "apply_instruction_summary",
        "timestamp": "2025-08-22 22:41:01.000",
        "source": "backend",
        "data": {
            "original_code": "const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));",
            "original_summary": "A helper function, formatDateString, is defined to extract only the date portion from an ISO datetime string by splitting at the 'T' character. The code then processes the input stock data array, mapping each item to a new object containing the original date and the closing price under the keys 'date' and 'price', respectively. The transformation is tailored for compatibility with the Recharts charting library, ensuring the data structure matches the expected input format. The result is a clean dataset ready for visualization. Additionally, the x-axis is modified to display the month name (e.g., Jan, Feb) instead of the full date, enhancing readability on the chart.",
            "updated_summary": "A helper function, formatDateString, is defined to extract the short month name (e.g., Jan, Feb) from an ISO datetime string by splitting at the 'T' character and formatting the resulting date accordingly. The code then processes the input stock data array, mapping each item to a new object containing the original date and the closing price under the keys 'date' and 'price', respectively. The transformation is tailored for compatibility with the Recharts charting library, ensuring the data structure matches the expected input format. The result is a clean dataset ready for visualization. Additionally, the x-axis is modified to display the short month name (e.g., Jan, Feb) instead of the full date, enhancing readability on the chart.",
            "instruction": "modify the x-axis to show the short month name like Jan, Feb, remember to modify the formatDateString function"
        },
        "id": "57WiZJydb8lmNxrYQtvA"
    },
    {
        "event": "toggle_section",
        "timestamp": "2025-08-22 22:41:14.000",
        "source": "frontend",
        "data": {
            "before_section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "after_section_id": "4978fc9b-b49f-4a05-89ac-83316533133b"
        },
        "id": "CNMqE1zi2QiN8gcMkp8A"
    },
    {
        "event": "toggle_section",
        "timestamp": "2025-08-22 22:41:16.000",
        "source": "frontend",
        "data": {
            "before_section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "after_section_id": null
        },
        "id": "36jZwwqAUMplGdqIc8k1"
    },
    {
        "event": "toggle_section",
        "timestamp": "2025-08-22 22:41:17.000",
        "source": "frontend",
        "data": {
            "before_section_id": null,
            "after_section_id": "4978fc9b-b49f-4a05-89ac-83316533133b"
        },
        "id": "55baIoHziEoBOOX2Drml"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:41:18.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 0,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "2X1yxuld6palAi39YuPJ"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:41:18.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "2rKrHOUbDRDk7PEG9Peu"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:41:18.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "6SUPriW8OKpGH5nc9ZJM"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:41:18.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "N7Nh3GYo3Aataty2FGPN"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:41:18.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 2,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "Pk5408vkjeA5pwB4AMsL"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:41:18.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 3,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "ofjb2apeb8t2Vfsjaiwb"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:41:18.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 1,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "vuGj4gpJGodVLgnwciei"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:41:27.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "VdJcPz8RwUsjgXls4ExC"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:41:27.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 4,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "dyL14ZVc3Oqe7nx8LE5U"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:41:27.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 4,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "lUjc9saUxpB2iYkrfqbY"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:41:27.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "pUG7nECNM5dlcL9hnTIL"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:41:28.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "ztAVqxyLkPjGShVOPte6"
    },
    {
        "event": "toggle_section",
        "timestamp": "2025-08-22 22:41:29.000",
        "source": "frontend",
        "data": {
            "before_section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "after_section_id": "e6fafde9-26ab-4103-8218-ac584e313def"
        },
        "id": "zv9LauqAQx0LAdTPrG5v"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:41:32.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "611mQ4ZsbXTyUkAN0JnX"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:41:32.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "AnBeYe5yMJXs0a625OPc"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:41:32.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 1,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "Arje7y7v6KtKvjmZwoR2"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:41:32.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 0,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "MZEuz4YRW9NzDqpmyoyI"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:41:32.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "RWP1vQlANzINQbfFDc8y"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:41:32.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "T9O40wJfvfoPgndI2Go7"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:41:32.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "Vzxoj1KEPsVdLX6t6ooN"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:41:32.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 7,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "hfvUVM9Jd6MqB2fCHCDk"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:41:32.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "jFMiWqgQtysS6eY4U5bX"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:41:32.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 4,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "lxZclAui35h1Nrj4GPri"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:41:32.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 6,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "lzX8ARLfVWO0pUBp5Mow"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:41:32.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 5,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "mOyqGrQyObJnHYxBVT27"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:41:32.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 2,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "swo3nPJmILYD3Dgbowfj"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:41:32.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "vc40jUGS7Y35VAPTSDGR"
    },
    {
        "event": "toggle_section",
        "timestamp": "2025-08-22 22:41:33.000",
        "source": "frontend",
        "data": {
            "before_section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "after_section_id": "4978fc9b-b49f-4a05-89ac-83316533133b"
        },
        "id": "qQjwgu7LDMG4K2FIykgi"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:41:34.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "jTPerIqtk0RlUtuZc9Wp"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:41:34.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 0,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "rkQAUKCwoiFg663nIe4F"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:41:34.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 1,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "s93xcuE70E3vlhV0GySx"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:41:35.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "1oZOXWMpp0CbFwFa3i0b"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:41:35.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 4,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "I8h1VnnQEHn5oJHwULFO"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:41:35.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 2,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "Jan3tBNVUtLoaQx6Fm3h"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:41:35.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "KcC9g0newsayHDNepI0i"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:41:35.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 3,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "Tik86zjSy41GfkQH25vQ"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:41:35.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "ogrteQTw9zRWSpxhPPg5"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:41:35.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "xEh7yJVxWeq3Gs09mO3H"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:41:36.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 4,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "LH2gdLMCSn7mwyuTeUyL"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:41:36.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "n05wTG89GDR9m0ZIVVWQ"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:41:36.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 3,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "s1n1OaqmRGdiKkg1zCpA"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:41:39.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "04e4zBIkt8BSGaP59CY3"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:41:39.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 1,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "DkL124XGHYUt6D77OMmK"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:41:39.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "GfcKYUNjfaNM1sLEbKjF"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:41:39.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 4,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "M5qhp4Hc9T35SnGQOgto"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:41:39.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 3,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "OHkH9gWgdgfhoXIycha0"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:41:39.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "WdKJVbKYh0krWxaXPAAt"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:41:39.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "cDXy60Z9R8PQjZ6KYtbS"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:41:39.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "fZ9BjCgwqlQ4Qjwk5UsW"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:41:39.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 0,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "heTIYIJLwYfWkG0pzgv2"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:41:39.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 4,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "lylKW5JcVEmx9Nv9Q1mO"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:41:39.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "mRJUSfSFaiawC5WQaK4m"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:41:39.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "tCBPMkYUsBQgj6xtxtvq"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:41:39.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 2,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "v7LKTPQjk47hDKpZeC1Y"
    },
    {
        "event": "toggle_section",
        "timestamp": "2025-08-22 22:41:42.000",
        "source": "frontend",
        "data": {
            "before_section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "after_section_id": null
        },
        "id": "efN5AqQfj2FYW2tG83C8"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:41:44.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "0LRMYqUAKDa5JCtdHyOD"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:41:44.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 3,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "6swOjRBr4lOO2aQ8WzwS"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:41:44.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "Bgdk8haIDJOrvB1O6Sw1"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:41:44.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "ClspsAnNT3dIyRU19ukN"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:41:44.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 5,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "HTrl2qzFb4n6Os5Asm86"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:41:44.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 4,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "JhR6Rjkr8tfs9jyzpVIh"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:41:44.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 1,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "SeF4aPfZgbjP4GNnWL0q"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:41:44.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "WEY7zIHM5tj8hF1B5obX"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:41:44.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "gjcaaApNmD6WKSsqPCVx"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:41:44.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 2,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "qBfiNPPT0oMItP3P1q6w"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:41:44.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 0,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "xVziIFoP2z1mxOQBa9ID"
    },
    {
        "event": "toggle_section",
        "timestamp": "2025-08-22 22:41:44.000",
        "source": "frontend",
        "data": {
            "before_section_id": null,
            "after_section_id": "e6fafde9-26ab-4103-8218-ac584e313def"
        },
        "id": "yPXHPXFiBAmDlyE5dAcu"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:41:45.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "QuYVl875D9sAXgcx4rd3"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:41:48.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 2,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "3RR0BMOZw83KwPDg4EQa"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:41:48.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "8qddDAj9iTHqPg2dat56"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:41:48.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 1,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "9QZE4boBW4G1f7AppIXv"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:41:48.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 4,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "JtH4q50MJf7iKUWoi5Rl"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:41:48.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "O8tdn20gvd142oEvlOfk"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:41:48.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "OS8ANt09gcxgtVKO5cR1"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:41:48.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "Ug6X8wim1UnvNra3nwWa"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:41:48.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 0,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "dFi7CR6jOalpyDYDX4F4"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:41:48.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "f0k181YXze6pW0TX1aUS"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:41:48.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 1,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "ttTKcJ3eDhndAITvGh02"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:41:48.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 3,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "xg9tZn4HLawDnI2WuNou"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:41:48.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 0,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "y46tkMVqUMPz6wSs4esS"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:41:48.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "zB3V51aZGhockSrDzVBw"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:41:50.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 6,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "1azCrFTxCX8g7hYo1upZ"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:41:50.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "2xnp8TpR9DoTfMsa6Vm9"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:41:50.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 5,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "Dntj8h7NhdkWPrp20Bm3"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:41:50.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 7,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "PUj2wnzgjaTnoqPfOwyd"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:41:50.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "WNDf9pWGhWmDYMBdPMeU"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:41:50.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 4,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "WfZ9XJSvEb6FAxiHq7rH"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:41:50.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 3,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "ZzEtCOOlehY5TK9SE8Ku"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:41:50.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "grx2mgL2XU0uHjpYSDFt"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:41:50.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "odJXklra5erOJlb9sLuz"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:41:50.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "xO5e8rp6UBrkuP9pSBZj"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:41:50.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "ye8GBYjgzqk5XDLPKbMp"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:41:54.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "1lyWoNZEn8BQf4dwLQML"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:41:54.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 1,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "CcbUMNnhysE99hptbJYT"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:41:54.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "JWXPmMqeQpx7WX2dmtWQ"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:41:54.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "Rn7TbeaCtkQLUe0MQ5IZ"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:41:54.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 0,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "X9fFam0o1VKfXFlWK20p"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:41:54.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 6,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "YS3nQCXy9KrA9cN6oZyv"
    },
    {
        "event": "toggle_section",
        "timestamp": "2025-08-22 22:41:55.000",
        "source": "frontend",
        "data": {
            "before_section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "after_section_id": "4978fc9b-b49f-4a05-89ac-83316533133b"
        },
        "id": "pkHQfyOczgjEopLr9eWP"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:42:01.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "4mrWP9XSuXBfj42YRrZ6"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:42:01.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 1,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "5LTIphesdwsXjiBHTTmi"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:42:01.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 0,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "Z3aKG5hUQWIVq4i6o9ze"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:42:02.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 0,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "79iGVRojdFjYzrx970mY"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:42:02.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 2,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "AOxm0ksyQTMSwFujaOX0"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:42:02.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 4,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "Bl0te4GoPJdlIngb0IX3"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:42:02.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "CRULHy8pkUmxfIwgSayi"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:42:02.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "FDOlnl5LngDsKMCI1wxe"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:42:02.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "IuP3FWxW4sDirwPIjGu7"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:42:02.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "SUPK4ng3XsR5EcXIVf0f"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:42:02.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 1,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "TrapZ1b2fBOUFOOnZGzZ"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:42:02.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "WgYYffGYpJoq20IJceEJ"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:42:02.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "WsczKqUsLEXo9y2k7OKh"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:42:02.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 0,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "mZ21LjW3QPuh6PJWEmQE"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:42:02.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "wXX3j6ogcVBB56BDXeSd"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:42:02.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 3,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "xKwG45UQp8s36cIMXcwq"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:42:03.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 1,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "5u30wy7eQkQ8bP88RZlS"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:42:03.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 0,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "DS6PoT8fsSkqfVsQrXaP"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:42:03.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "E2a70YDN8PM3y5EyNegx"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:42:03.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "Ngv2xa6spGwMZBpSkuL3"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:42:03.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "Ts4kaCtxy4HCOzgdbHur"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:42:03.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "Z0YonFKrNd5Y0GgvpRmH"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:42:03.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 3,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "h1D3xtDgOHobFQDVV432"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:42:03.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "lFqgTDZA4cg333MfXYn7"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:42:03.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 4,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "r8CVeV7HhzVzdDvwxW6B"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:42:03.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 2,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "vJoaNeHtwPYF0UdAuSKt"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:42:04.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 0,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "8kIm0BbIqvcYEGPD5dwY"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:42:04.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "ljoBXnJmWKJlvx7sNOhf"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:42:04.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 1,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "pKYbSwxlXPFniwWMvwqb"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:42:05.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "0DhQfdWxtPNY4PsUYmo9"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:42:05.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "HMQjdhRNVzGCRprmf4oH"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:42:05.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 2,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "oKh8PrgFqyLOZDx6npQ1"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:42:05.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "mapping_index": 3,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "pL0kCea4FoOYNp01ivCk"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:42:05.000",
        "source": "frontend",
        "data": {
            "section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "zZvbuM1u8keYQuzksa2N"
    },
    {
        "event": "toggle_section",
        "timestamp": "2025-08-22 22:42:06.000",
        "source": "frontend",
        "data": {
            "before_section_id": "4978fc9b-b49f-4a05-89ac-83316533133b",
            "after_section_id": "e6fafde9-26ab-4103-8218-ac584e313def"
        },
        "id": "gPCg8p79GjTlM38yJPuw"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:42:24.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "6iNzjJ8tgJYUl0IgkMbI"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:42:24.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 7,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "Ine0dD810AxWjGncctM7"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:42:24.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 4,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "MgyrlSK66ZcrJ6wLBti6"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:42:24.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 5,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "cNwO1iSwCjURMZc7lDkk"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:42:24.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "nDMtknwG3kHyq8x1dlxB"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:42:24.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "rLBeshhiwdUtJ6QlzHjN"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:42:24.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 6,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "tShDqWPAeMtr7AI2Q4jY"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:42:25.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 3,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "IV8RZM4RFkIlupOTkOOx"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:42:25.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "evnM1iE2WGkcFFYJ2ZeB"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:42:25.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "yhicUt4mq7xl20dILd9R"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:42:27.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 0,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "0ApNX1WM6ym0csqUdZN5"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:42:27.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 1,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "NPAhJn7aZysAquKVwbYH"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:42:27.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "bAOrXOn42Nw6tTDB3ycr"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:42:28.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "B5XluisIUoq5MpIiuI3l"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:42:28.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "E40tCJRuEuokM07IxnrK"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:42:28.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "SUJnu8uMlrHa2G5B7FNM"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:42:28.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 5,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "b7mlrIE43IajhEx39aps"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:42:28.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 4,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "vNlyw2EibeGQpxJir169"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:42:37.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "4KE5hZp2rVhkAb2cosQ5"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:42:37.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 0,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "8mdP2hzDIIAlK2KJW82R"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:42:37.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 4,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "8pnpw4aPJzYv8bYlCHal"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:42:37.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "CwJ1sOkefp7cchhytddd"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:42:37.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 2,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "UuRWcoE2FJARL0NdiRuF"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:42:37.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "ZVxnHBRNUSBtS8muYHTX"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:42:37.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 3,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "ZYvpefMTdGoIXrFvIYmM"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:42:37.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "aPqWO5mMwmQdrEhsFdpc"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:42:37.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "atSuQH7A3o7tiaSvjaee"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:42:37.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 1,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "fGOAkDkl3cupwaGaxFvS"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:42:37.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 3,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "kE5lRh8isw6dYAxNJXAE"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:42:37.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "mhMQQBejdhB1Ujm09H8W"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:42:37.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "mwlqlLcDvpZeaGaNdJza"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:42:37.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 0,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "nt5D6n7wXYZDbLvKUYqD"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:42:37.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 2,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "pwqhXr43YJtXheMjsfZK"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:42:37.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "xbUAeI4L2tsAUCj8OUia"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:42:37.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 1,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "yeR2RjinvYlV2AvGvtwX"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:42:38.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "5gMm6K5HnGOEigekpfvK"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:42:38.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "784uKZeBoe1O8hhDCb4a"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:42:38.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "JNoXX4pl8OGXjIUdaopb"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:42:38.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "ak7HpJWnMNhnkcI9ES67"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:42:38.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 5,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "c01qHVFqJJZ9U5277v1i"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:42:38.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 6,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "lpLjpw5FTgudlgyblYz1"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:42:38.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "nlIw5LWUH9A2nu7JkWVl"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:42:38.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 4,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "nqzWEFxiHmvknNPry6z6"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:42:38.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 7,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "ogE80TJBndNkvxIyFCGQ"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:42:40.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "4eKJpPYA0TcwtSpzmKZB"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:42:40.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 6,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "5XOm8cbATZY8s7gkmujm"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:42:40.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 2,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "9MBELl8ud6flcjZ5101u"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:42:40.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 5,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "EICttx2sZditUqIBGKNa"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:42:40.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "Ez65fT9IO6XGZLCdX4RL"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:42:40.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "NOBimkcLhFo78jLTrN7p"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:42:40.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "Nw22FXGwCrhs2n4jD4yZ"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:42:40.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 4,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "Qbpy6kSw7SoGFJukX84W"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:42:40.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "Qk7VSOB94jhYgxyinrtr"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:42:40.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 0,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "RoilFWILnIludS2FIUGX"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:42:40.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "a0hPTPypUPvXy2K7byld"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:42:40.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "cmQvdvCHTWToE0iIAKDU"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:42:40.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 3,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "lFd5fkMMbcx6K6yhy9bF"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:42:40.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 1,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "ox1YyVMy2rn3zuXsATpC"
    },
    {
        "event": "click_edit_in_prompt",
        "timestamp": "2025-08-22 22:42:41.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured": "unstructured",
            "summary": "A helper function, formatDateString, is defined to extract only the date portion from an ISO datetime string by splitting at the 'T' character. The code then processes the input stock data array, mapping each item to a new object containing the original date and the closing price under the keys 'date' and 'price', respectively. This transformation is tailored for compatibility with the Recharts charting library, ensuring the data structure matches the expected input format. The result is a clean dataset ready for visualization."
        },
        "id": "s0g8c8aSmUusvZmh2O56"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:42:42.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 4,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "CoeO4yc1cjsmirLrRQum"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:42:42.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "DeD9rBNqPnizNiVLUZE6"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:42:42.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "F48zRvAH8m5sUh14rz5T"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:42:42.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 1,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "Kaqg0Z5yJOQQ9cD24zNS"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:42:42.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "N8IW9XJbdY50pTBRNCIm"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:42:42.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 7,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "yi5tqtPQmt94gelT1dJ6"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:42:45.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "5BkA8Jf09xqdYY0IFRpZ"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:42:45.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "9rSa4CRCTbbo1UCYHRP0"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:42:45.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 6,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "DUagf4sjItE3RDTxTYPD"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:42:45.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 1,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "HbAnvaicMOf2Mc1oIVrh"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:42:45.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 4,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "fp4cUOi0cHUBLdvdLGXG"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:42:45.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "n0nruvccRigz35pl4P2u"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:42:45.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 7,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "qwByvtKdTUVMoRxboOCS"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:42:45.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "taXr3EhbdZ042O0wJdiY"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:42:45.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 5,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "vNGhsOsCTZNndlJIHDwx"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:42:46.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 1,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "0hTLNfi7VDhawJUMutuC"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:42:46.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "2pAP4FRQph7x9Sc73kd0"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:42:46.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "BluCeQXoCmnDbmfUeAXg"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:42:46.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "I17ahxFTUNf2QhGnTfDm"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:42:46.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 2,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "Jw4FX63DCC7QC3Xy5dX2"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:42:46.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "MvFrWwng4Iai7ERXVrnr"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:42:46.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 6,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "TnJGyJuSQ822IyRCB6mB"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:42:46.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "g4OfQQSFRoBBJtUZp7W1"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:42:46.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 3,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "jDWPCkkmJZYeTxmpS70O"
    },
    {
        "event": "click_edit_in_prompt",
        "timestamp": "2025-08-22 22:42:46.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured": "unstructured",
            "summary": "A helper function, formatDateString, is defined to extract only the date portion from an ISO datetime string by splitting at the 'T' character. The code then processes the input stock data array, mapping each item to a new object containing the original date and the closing price under the keys 'date' and 'price', respectively. This transformation is tailored for compatibility with the Recharts charting library, ensuring the data structure matches the expected input format. The result is a clean dataset ready for visualization."
        },
        "id": "sEzcSB1bm8CJemiI7GJZ"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:42:47.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 7,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "3bmxF96VCP9oHsIN1IFY"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:42:47.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "8vbo7hEBbfghh8ZsROJX"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:42:47.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "B1WuGVxhhbCv092Hu4of"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:42:47.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "BR58cOc4poFEYkORIhNs"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:42:47.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 1,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "Ja3zIkLyeZsdiZU7z2nG"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:42:47.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 6,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "LgVeQbeOMe3wAhNNon0F"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:42:47.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 3,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "Rz7QvIu0CrcUhTnzXl1t"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:42:47.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "fQdXq4sehu2JVzOCf9ii"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:42:47.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 5,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "meAwA7axocDVFYiGWkUB"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:42:47.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "p26i6PrlYtdXEJKVemi6"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:42:48.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 3,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "5bG8VlEpTWcGe0GtHkUe"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:42:48.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "645ovfTqXkvMmYR7HBab"
    },
    {
        "event": "click_edit_in_prompt",
        "timestamp": "2025-08-22 22:42:48.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured": "unstructured",
            "summary": "A helper function, formatDateString, is defined to extract only the date portion from an ISO datetime string by splitting at the 'T' character. The code then processes the input stock data array, mapping each item to a new object containing the original date and the closing price under the keys 'date' and 'price', respectively. This transformation is tailored for compatibility with the Recharts charting library, ensuring the data structure matches the expected input format. The result is a clean dataset ready for visualization."
        },
        "id": "H4S9EK2Kt8mRq6qWOsKv"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:42:48.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 6,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "I78d8pLUZEEnMjKcz5MO"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:42:48.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "JRvaSGPfAELjMsboTmkb"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:42:48.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 2,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "WbYOfr0njgQqNCz80pZE"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:42:48.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 1,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "kN35qdK1zwXRUnZPrwDh"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:42:48.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "lbPyVmT5IL4IaYlPubmf"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:42:48.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "p9ke2nr5cldyrF3oOrH9"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:42:49.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "9bpgzVO94XpK3R70dnYU"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:42:49.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "Lzhb8Umcfxzg9FKxy8dN"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:42:49.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 6,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "otnCFbnGoqX2NXMZH758"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:42:49.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 5,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "vpqAIlsfGSDooFhEBILR"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:42:52.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 1,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "09kHSZj1erXmgkC1HiMs"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:42:52.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "1EwqJvkEBskjLbVJZuSs"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:42:52.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 0,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "21FM3Kn5kmAOCkttUzBq"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:42:52.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "B4Tsq3JlHo9ze7kuEwVJ"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:42:52.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 1,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "Cr3ZgJ70TVjgOORVATLF"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:42:52.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 3,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "GthuiXRUvOmbvw4CoP9r"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:42:52.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 5,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "Iis5axr9KVX4ExZ6iuDT"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:42:52.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "JemKUTiIkM5jioThvBBu"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:42:52.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "UGPOkFzpq2wCRORTRNgC"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:42:52.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 3,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "UK8PL39unfBBu1GEDMm5"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:42:52.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "Wh616ZcjagKDRYExQM5H"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:42:52.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "XEOpWOJ21ObEwAcdGVW5"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:42:52.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 7,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "Y0zNxskWH9DLqljYATWp"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:42:52.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "bgbxONtL0FFNEakF5adM"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:42:52.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 5,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "dWDiIzIteTxi2fuMVn9F"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:42:52.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "iD5OuJVRarvfa01haESo"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:42:52.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "iDHyH3ioJk5quqbRmqtf"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:42:52.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 6,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "k8iPy6166PniIe1AgAr1"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:42:52.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 7,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "mfeWHSPdzzkQo7J9gasx"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:42:52.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 6,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "o7xuA6xRSRInYG03ftjE"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:42:52.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "tIhjpbXsdrORf54AU84h"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:42:52.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "uu0zkDGcdEfVYdeskElB"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:42:52.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 2,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "vTlbXUXwLmbJiJu9J3qI"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:42:52.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 6,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "vmNd7PDqS8xd9GU30Te5"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:42:52.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "wBSxpif5TNN3UfxX0ssS"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:42:52.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 4,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "wLEJW7YJq4pjwRogr0yq"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:42:52.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "yQ7p5FkK8Nb8xKKcEaE2"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:42:52.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "zdg4RFe2z8d8MqnPF3Ky"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:42:53.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "Gn1cHrAdkPrxFyaGxdge"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:42:53.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 7,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "KQ0p8PaWodhRfONfZgEF"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:42:53.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "PIrPQwN7PVcvsTpi3vNG"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:42:53.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 0,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "RdUd0YG9stiItSkpVoEt"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:42:53.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 3,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "V73DqX6aPLfZMgO3t29a"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:42:53.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "VWpLhFEh8J46SWqu0vJP"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:42:53.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "WpHiyDZ20mD0z0ediIV5"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:42:53.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 6,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "esg3gLxK3THV617p3w7y"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:42:53.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 5,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "vdfJkQT6LA0sT5HkweLW"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:42:53.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "y7qoL0vgWx6qVUAAlNxo"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:43:02.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "7roJ5M2Giu17uQLOmPjM"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:43:02.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 5,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "KZ3Dzq1IYlmvtpGfjPYn"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:43:02.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 7,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "NnbA134g9R1NKFWacmeG"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:43:02.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 6,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "Z2O1OpjmUftSZDeQpEc5"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:43:02.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 6,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "ZqxI7XXjlBNrSgg652Ee"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:43:02.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "qNXiSFhfpoR7lvv1PcuA"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:43:02.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "yq5YaXLBHxJHKNE2S9l2"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:43:03.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "d5CZMxXQqayZnFLqLNbT"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:43:05.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 4,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "6tZAnX69RhvHPRfzcGC6"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:43:05.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "8gEd4NjA0dLqjOGPqjxk"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:43:05.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 5,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "9ZBJft9E8bL2qvuzz6KZ"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:43:05.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 7,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "CcAVSnWc05gAPOPCWYIl"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:43:05.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 3,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "HXtARciMA0k7zWOrcd4E"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:43:05.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 6,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "IjedK556mi17P7gVIc11"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:43:05.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "IxO3sLOE4v3J2WSV9ikS"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:43:05.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "MXgXXeEcAyz4TGOUAJCI"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:43:05.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "R4pP7ijk69n5Ax95XMKe"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:43:05.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "TeDY8kpgKhEL9vMxNq0f"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:43:05.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 0,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "bKpw2uiIwGpnwE4JAuRz"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:43:05.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 1,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "h4buE7IuFg4WYo2qnMsE"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:43:05.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "opBUMu3BrA44MeC9cWFm"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:43:05.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "sXWNFiyKy6xcWL7OPpZL"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:43:06.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 7,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "0KrDJevs0smlrrSwVvLi"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:43:07.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "6MlMp34zzPmnEsbVT2a6"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:43:07.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 5,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "DnAZXfRa3n70bC2BQyIP"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:43:07.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "F3EWTnEDzdsFUxV80y1P"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:43:07.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 0,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "FDliU7byQ5b1eZOdo3ae"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:43:07.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "FUsWheI0jx4R4qcG5uL1"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:43:07.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "RE7Q5sgnADyniOyYMdqN"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:43:07.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "Z5FDyJAzr2EVOCtaD9et"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:43:07.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "ZVLWsaUZdLsng5Vpnl0g"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:43:07.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 3,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "muQeS7gqxQmQt3rdGolT"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:43:07.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 2,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "vYzQa1U9GS2yLA06mQwE"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:43:07.000",
        "source": "frontend",
        "data": {
            "section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "mapping_index": 6,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "xhpcPydvFsGvJ204emDV"
    },
    {
        "event": "click_summarize_code",
        "timestamp": "2025-08-22 22:43:09.000",
        "source": "frontend",
        "data": {},
        "id": "QCRJiqWxaOBblIjyGCDJ"
    },
    {
        "event": "summarize_selected_code",
        "timestamp": "2025-08-22 22:43:14.000",
        "source": "backend",
        "data": {
            "selected_code": "const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));",
            "summary": {
                "low_structured": "• Formats a date string by splitting at 'T'.\n• Maps stock data to chart-friendly objects.",
                "low_unstructured": "The code formats date strings and transforms stock data for use in a chart.",
                "title": "Data Formatting and Transformation for Charting",
                "medium_unstructured": "This code defines a function to format date strings by extracting the date portion before the 'T' character. It also transforms an array of stock data into a new array of objects containing only the date and closing price, preparing the data for charting.",
                "medium_structured": "• Defines a function to format date strings:\n  ◦ Splits the input date at 'T' and returns the first part.\n• Transforms stock data for charting:\n  ◦ Maps each data item to an object with 'date' and 'price' fields.",
                "high_unstructured": "The code snippet includes a utility function, formatDateString, which takes a date string (typically in ISO format) and returns only the date portion by splitting at the 'T' character. Additionally, it processes an array of stock data objects, mapping each to a new object containing just the 'date' and the closing price ('price'), effectively restructuring the data for use in a charting component. This transformation ensures that only the relevant fields are passed to the chart, simplifying the data structure. The approach assumes that each item in the data array has 'date' and 'close' properties.",
                "high_structured": "• Defines a date formatting function:\n  ◦ formatDateString splits a date string at 'T' and returns the first part (the date).\n• Transforms stock data for charting:\n  ◦ Maps each item in the data array to a new object.\n    ◦ Each new object contains:\n      ◦ 'date': the original date string.\n      ◦ 'price': the closing price from the 'close' property.\n• Prepares the data specifically for use with Recharts by simplifying the structure.\n• Assumes each data item has 'date' and 'close' fields."
            }
        },
        "id": "j1ewZuRWny2KJW3HN95z"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-22 22:43:15.000",
        "source": "backend",
        "data": {
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "line": 19,
                            "code": "const formatDateString = (date) => {"
                        },
                        {
                            "line": 20,
                            "code": "return date.split(\"T\")[0];"
                        }
                    ],
                    "summaryComponent": "Formats a date string by splitting at 'T'."
                },
                {
                    "codeSegments": [
                        {
                            "line": 24,
                            "code": "const chartData = data.data.map((item) => ({"
                        },
                        {
                            "line": 25,
                            "code": "date: item.date,"
                        },
                        {
                            "line": 26,
                            "code": "price: item.close,"
                        },
                        {
                            "line": 27,
                            "code": "}));"
                        }
                    ],
                    "summaryComponent": "Maps stock data to chart-friendly objects."
                }
            ],
            "code": "19: const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));",
            "summary": "• Formats a date string by splitting at 'T'.\n• Maps stock data to chart-friendly objects."
        },
        "id": "p9wzjy600lUfNCsnOZOj"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-22 22:43:16.000",
        "source": "backend",
        "data": {
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "line": 19,
                            "code": "const formatDateString = (date) => {"
                        }
                    ],
                    "summaryComponent": "defines a function to format date strings"
                },
                {
                    "codeSegments": [
                        {
                            "line": 20,
                            "code": "return date.split(\"T\")[0];"
                        }
                    ],
                    "summaryComponent": "by extracting the date portion before the 'T' character"
                },
                {
                    "codeSegments": [
                        {
                            "line": 24,
                            "code": "const chartData = data.data.map((item) => ({"
                        }
                    ],
                    "summaryComponent": "transforms an array of stock data"
                },
                {
                    "codeSegments": [
                        {
                            "line": 25,
                            "code": "date: item.date,"
                        },
                        {
                            "line": 26,
                            "code": "price: item.close,"
                        }
                    ],
                    "summaryComponent": "into a new array of objects containing only the date and closing price"
                },
                {
                    "codeSegments": [
                        {
                            "line": 23,
                            "code": "// Combine labels and values into an array of objects for Recharts"
                        }
                    ],
                    "summaryComponent": "preparing the data for charting"
                }
            ],
            "code": "19: const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));",
            "summary": "This code defines a function to format date strings by extracting the date portion before the 'T' character. It also transforms an array of stock data into a new array of objects containing only the date and closing price, preparing the data for charting."
        },
        "id": "O7ntil91DY9KSQ9sKSys"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-22 22:43:16.000",
        "source": "backend",
        "data": {
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "line": 19,
                            "code": "const formatDateString = (date) => {"
                        },
                        {
                            "line": 20,
                            "code": "return date.split(\"T\")[0];"
                        }
                    ],
                    "summaryComponent": "formats date strings"
                },
                {
                    "codeSegments": [
                        {
                            "line": 24,
                            "code": "const chartData = data.data.map((item) => ({"
                        },
                        {
                            "line": 25,
                            "code": "date: item.date,"
                        },
                        {
                            "line": 26,
                            "code": "price: item.close,"
                        },
                        {
                            "line": 27,
                            "code": "}));"
                        }
                    ],
                    "summaryComponent": "transforms stock data"
                },
                {
                    "codeSegments": [
                        {
                            "line": 23,
                            "code": "// Combine labels and values into an array of objects for Recharts"
                        },
                        {
                            "line": 24,
                            "code": "const chartData = data.data.map((item) => ({"
                        }
                    ],
                    "summaryComponent": "for use in a chart"
                }
            ],
            "code": "19: const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));",
            "summary": "The code formats date strings and transforms stock data for use in a chart."
        },
        "id": "PSqT4UEKQLzbiLPNkxh9"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-22 22:43:17.000",
        "source": "backend",
        "data": {
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "line": 19,
                            "code": "const formatDateString = (date) => {"
                        },
                        {
                            "line": 20,
                            "code": "return date.split(\"T\")[0];"
                        },
                        {
                            "line": 21,
                            "code": "};"
                        }
                    ],
                    "summaryComponent": "Defines a function to format date strings"
                },
                {
                    "codeSegments": [
                        {
                            "line": 20,
                            "code": "return date.split(\"T\")[0];"
                        }
                    ],
                    "summaryComponent": "Splits the input date at 'T' and returns the first part"
                },
                {
                    "codeSegments": [
                        {
                            "line": 24,
                            "code": "const chartData = data.data.map((item) => ({"
                        },
                        {
                            "line": 25,
                            "code": "date: item.date,"
                        },
                        {
                            "line": 26,
                            "code": "price: item.close,"
                        },
                        {
                            "line": 27,
                            "code": "}));"
                        }
                    ],
                    "summaryComponent": "Transforms stock data for charting"
                },
                {
                    "codeSegments": [
                        {
                            "line": 24,
                            "code": "const chartData = data.data.map((item) => ({"
                        },
                        {
                            "line": 25,
                            "code": "date: item.date,"
                        },
                        {
                            "line": 26,
                            "code": "price: item.close,"
                        },
                        {
                            "line": 27,
                            "code": "}));"
                        }
                    ],
                    "summaryComponent": "Maps each data item to an object with 'date' and 'price' fields"
                }
            ],
            "code": "19: const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));",
            "summary": "• Defines a function to format date strings:\n  ◦ Splits the input date at 'T' and returns the first part.\n• Transforms stock data for charting:\n  ◦ Maps each data item to an object with 'date' and 'price' fields."
        },
        "id": "8sdVXHMxXu36DWRDbdH7"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-22 22:43:17.000",
        "source": "backend",
        "data": {
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "line": 19,
                            "code": "const formatDateString = (date) => {"
                        }
                    ],
                    "summaryComponent": "a utility function, formatDateString"
                },
                {
                    "codeSegments": [
                        {
                            "line": 19,
                            "code": "(date)"
                        }
                    ],
                    "summaryComponent": "takes a date string (typically in ISO format)"
                },
                {
                    "codeSegments": [
                        {
                            "line": 20,
                            "code": "return date.split(\"T\")[0];"
                        }
                    ],
                    "summaryComponent": "returns only the date portion by splitting at the 'T' character"
                },
                {
                    "codeSegments": [
                        {
                            "line": 24,
                            "code": "const chartData = data.data.map((item) => ({"
                        }
                    ],
                    "summaryComponent": "processes an array of stock data objects"
                },
                {
                    "codeSegments": [
                        {
                            "line": 25,
                            "code": "date: item.date,"
                        },
                        {
                            "line": 26,
                            "code": "price: item.close,"
                        }
                    ],
                    "summaryComponent": "mapping each to a new object containing just the 'date' and the closing price ('price')"
                },
                {
                    "codeSegments": [
                        {
                            "line": 24,
                            "code": "const chartData = data.data.map((item) => ({"
                        }
                    ],
                    "summaryComponent": "effectively restructuring the data for use in a charting component"
                },
                {
                    "codeSegments": [
                        {
                            "line": 25,
                            "code": "date: item.date,"
                        },
                        {
                            "line": 26,
                            "code": "price: item.close,"
                        }
                    ],
                    "summaryComponent": "only the relevant fields are passed to the chart"
                },
                {
                    "codeSegments": [
                        {
                            "line": 24,
                            "code": "const chartData = data.data.map((item) => ({"
                        }
                    ],
                    "summaryComponent": "simplifying the data structure"
                },
                {
                    "codeSegments": [
                        {
                            "line": 25,
                            "code": "item.date"
                        },
                        {
                            "line": 26,
                            "code": "item.close"
                        }
                    ],
                    "summaryComponent": "each item in the data array has 'date' and 'close' properties"
                }
            ],
            "code": "19: const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));",
            "summary": "The code snippet includes a utility function, formatDateString, which takes a date string (typically in ISO format) and returns only the date portion by splitting at the 'T' character. Additionally, it processes an array of stock data objects, mapping each to a new object containing just the 'date' and the closing price ('price'), effectively restructuring the data for use in a charting component. This transformation ensures that only the relevant fields are passed to the chart, simplifying the data structure. The approach assumes that each item in the data array has 'date' and 'close' properties."
        },
        "id": "RlbfGSGStNYNFniGGfSn"
    },
    {
        "event": "create_new_section",
        "timestamp": "2025-08-22 22:43:18.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "section_data": {
                "summaryData": {
                    "low_structured": "• Formats a date string by splitting at 'T'.\n• Maps stock data to chart-friendly objects.",
                    "low_unstructured": "The code formats date strings and transforms stock data for use in a chart.",
                    "title": "Data Formatting and Transformation for Charting",
                    "medium_unstructured": "This code defines a function to format date strings by extracting the date portion before the 'T' character. It also transforms an array of stock data into a new array of objects containing only the date and closing price, preparing the data for charting.",
                    "medium_structured": "• Defines a function to format date strings:\n  ◦ Splits the input date at 'T' and returns the first part.\n• Transforms stock data for charting:\n  ◦ Maps each data item to an object with 'date' and 'price' fields.",
                    "high_unstructured": "The code snippet includes a utility function, formatDateString, which takes a date string (typically in ISO format) and returns only the date portion by splitting at the 'T' character. Additionally, it processes an array of stock data objects, mapping each to a new object containing just the 'date' and the closing price ('price'), effectively restructuring the data for use in a charting component. This transformation ensures that only the relevant fields are passed to the chart, simplifying the data structure. The approach assumes that each item in the data array has 'date' and 'close' properties.",
                    "high_structured": "• Defines a date formatting function:\n  ◦ formatDateString splits a date string at 'T' and returns the first part (the date).\n• Transforms stock data for charting:\n  ◦ Maps each item in the data array to a new object.\n    ◦ Each new object contains:\n      ◦ 'date': the original date string.\n      ◦ 'price': the closing price from the 'close' property.\n• Prepares the data specifically for use with Recharts by simplifying the structure.\n• Assumes each data item has 'date' and 'close' fields."
                },
                "editPromptValue": "",
                "title": "Data Formatting and Transformation for Charting",
                "editPromptStructured": null,
                "selectedDetailLevel": "medium",
                "metadata": {
                    "filename": "StockChart.jsx",
                    "fullPath": "/project/workspace/frontend/src/StockChart.jsx",
                    "id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
                    "originalCode": "const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));",
                    "offset": 315
                },
                "createdAt": 1755888198000,
                "lines": [
                    19,
                    27
                ],
                "summaryMappings": {
                    "low_structured": [
                        {
                            "codeSegments": [
                                {
                                    "line": 19,
                                    "code": "const formatDateString = (date) => {"
                                },
                                {
                                    "line": 20,
                                    "code": "return date.split(\"T\")[0];"
                                }
                            ],
                            "summaryComponent": "Formats a date string by splitting at 'T'."
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 24,
                                    "code": "const chartData = data.data.map((item) => ({"
                                },
                                {
                                    "line": 25,
                                    "code": "date: item.date,"
                                },
                                {
                                    "line": 26,
                                    "code": "price: item.close,"
                                },
                                {
                                    "line": 27,
                                    "code": "}));"
                                }
                            ],
                            "summaryComponent": "Maps stock data to chart-friendly objects."
                        }
                    ],
                    "low_unstructured": [
                        {
                            "codeSegments": [
                                {
                                    "line": 19,
                                    "code": "const formatDateString = (date) => {"
                                },
                                {
                                    "line": 20,
                                    "code": "return date.split(\"T\")[0];"
                                }
                            ],
                            "summaryComponent": "formats date strings"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 24,
                                    "code": "const chartData = data.data.map((item) => ({"
                                },
                                {
                                    "line": 25,
                                    "code": "date: item.date,"
                                },
                                {
                                    "line": 26,
                                    "code": "price: item.close,"
                                },
                                {
                                    "line": 27,
                                    "code": "}));"
                                }
                            ],
                            "summaryComponent": "transforms stock data"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 23,
                                    "code": "// Combine labels and values into an array of objects for Recharts"
                                },
                                {
                                    "line": 24,
                                    "code": "const chartData = data.data.map((item) => ({"
                                }
                            ],
                            "summaryComponent": "for use in a chart"
                        }
                    ],
                    "medium_structured": [
                        {
                            "codeSegments": [
                                {
                                    "line": 19,
                                    "code": "const formatDateString = (date) => {"
                                },
                                {
                                    "line": 20,
                                    "code": "return date.split(\"T\")[0];"
                                },
                                {
                                    "line": 21,
                                    "code": "};"
                                }
                            ],
                            "summaryComponent": "Defines a function to format date strings"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 20,
                                    "code": "return date.split(\"T\")[0];"
                                }
                            ],
                            "summaryComponent": "Splits the input date at 'T' and returns the first part"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 24,
                                    "code": "const chartData = data.data.map((item) => ({"
                                },
                                {
                                    "line": 25,
                                    "code": "date: item.date,"
                                },
                                {
                                    "line": 26,
                                    "code": "price: item.close,"
                                },
                                {
                                    "line": 27,
                                    "code": "}));"
                                }
                            ],
                            "summaryComponent": "Transforms stock data for charting"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 24,
                                    "code": "const chartData = data.data.map((item) => ({"
                                },
                                {
                                    "line": 25,
                                    "code": "date: item.date,"
                                },
                                {
                                    "line": 26,
                                    "code": "price: item.close,"
                                },
                                {
                                    "line": 27,
                                    "code": "}));"
                                }
                            ],
                            "summaryComponent": "Maps each data item to an object with 'date' and 'price' fields"
                        }
                    ],
                    "medium_unstructured": [
                        {
                            "codeSegments": [
                                {
                                    "line": 19,
                                    "code": "const formatDateString = (date) => {"
                                }
                            ],
                            "summaryComponent": "defines a function to format date strings"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 20,
                                    "code": "return date.split(\"T\")[0];"
                                }
                            ],
                            "summaryComponent": "by extracting the date portion before the 'T' character"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 24,
                                    "code": "const chartData = data.data.map((item) => ({"
                                }
                            ],
                            "summaryComponent": "transforms an array of stock data"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 25,
                                    "code": "date: item.date,"
                                },
                                {
                                    "line": 26,
                                    "code": "price: item.close,"
                                }
                            ],
                            "summaryComponent": "into a new array of objects containing only the date and closing price"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 23,
                                    "code": "// Combine labels and values into an array of objects for Recharts"
                                }
                            ],
                            "summaryComponent": "preparing the data for charting"
                        }
                    ],
                    "high_unstructured": [
                        {
                            "codeSegments": [
                                {
                                    "line": 19,
                                    "code": "const formatDateString = (date) => {"
                                }
                            ],
                            "summaryComponent": "a utility function, formatDateString"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 19,
                                    "code": "(date)"
                                }
                            ],
                            "summaryComponent": "takes a date string (typically in ISO format)"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 20,
                                    "code": "return date.split(\"T\")[0];"
                                }
                            ],
                            "summaryComponent": "returns only the date portion by splitting at the 'T' character"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 24,
                                    "code": "const chartData = data.data.map((item) => ({"
                                }
                            ],
                            "summaryComponent": "processes an array of stock data objects"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 25,
                                    "code": "date: item.date,"
                                },
                                {
                                    "line": 26,
                                    "code": "price: item.close,"
                                }
                            ],
                            "summaryComponent": "mapping each to a new object containing just the 'date' and the closing price ('price')"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 24,
                                    "code": "const chartData = data.data.map((item) => ({"
                                }
                            ],
                            "summaryComponent": "effectively restructuring the data for use in a charting component"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 25,
                                    "code": "date: item.date,"
                                },
                                {
                                    "line": 26,
                                    "code": "price: item.close,"
                                }
                            ],
                            "summaryComponent": "only the relevant fields are passed to the chart"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 24,
                                    "code": "const chartData = data.data.map((item) => ({"
                                }
                            ],
                            "summaryComponent": "simplifying the data structure"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 25,
                                    "code": "item.date"
                                },
                                {
                                    "line": 26,
                                    "code": "item.close"
                                }
                            ],
                            "summaryComponent": "each item in the data array has 'date' and 'close' properties"
                        }
                    ],
                    "high_structured": [
                        {
                            "codeSegments": [
                                {
                                    "line": 19,
                                    "code": "const formatDateString = (date) => {"
                                }
                            ],
                            "summaryComponent": "Defines a date formatting function"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 20,
                                    "code": "return date.split(\"T\")[0];"
                                }
                            ],
                            "summaryComponent": "formatDateString splits a date string at 'T' and returns the first part (the date)"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 24,
                                    "code": "const chartData = data.data.map((item) => ({"
                                }
                            ],
                            "summaryComponent": "Transforms stock data for charting"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 24,
                                    "code": "data.data.map((item) => ({"
                                }
                            ],
                            "summaryComponent": "Maps each item in the data array to a new object"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 24,
                                    "code": "{"
                                }
                            ],
                            "summaryComponent": "Each new object contains"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 25,
                                    "code": "date: item.date,"
                                }
                            ],
                            "summaryComponent": "'date': the original date string"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 26,
                                    "code": "price: item.close,"
                                }
                            ],
                            "summaryComponent": "'price': the closing price from the 'close' property"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 23,
                                    "code": "// Combine labels and values into an array of objects for Recharts"
                                }
                            ],
                            "summaryComponent": "Prepares the data specifically for use with Recharts by simplifying the structure"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 25,
                                    "code": "item.date"
                                },
                                {
                                    "line": 26,
                                    "code": "item.close"
                                }
                            ],
                            "summaryComponent": "Assumes each data item has 'date' and 'close' fields"
                        }
                    ]
                },
                "editPromptDetailLevel": null,
                "selectedStructured": "unstructured"
            }
        },
        "id": "29lYYZPU6k7KoQK3qmI5"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-22 22:43:18.000",
        "source": "backend",
        "data": {
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "line": 19,
                            "code": "const formatDateString = (date) => {"
                        }
                    ],
                    "summaryComponent": "Defines a date formatting function"
                },
                {
                    "codeSegments": [
                        {
                            "line": 20,
                            "code": "return date.split(\"T\")[0];"
                        }
                    ],
                    "summaryComponent": "formatDateString splits a date string at 'T' and returns the first part (the date)"
                },
                {
                    "codeSegments": [
                        {
                            "line": 24,
                            "code": "const chartData = data.data.map((item) => ({"
                        }
                    ],
                    "summaryComponent": "Transforms stock data for charting"
                },
                {
                    "codeSegments": [
                        {
                            "line": 24,
                            "code": "data.data.map((item) => ({"
                        }
                    ],
                    "summaryComponent": "Maps each item in the data array to a new object"
                },
                {
                    "codeSegments": [
                        {
                            "line": 24,
                            "code": "{"
                        }
                    ],
                    "summaryComponent": "Each new object contains"
                },
                {
                    "codeSegments": [
                        {
                            "line": 25,
                            "code": "date: item.date,"
                        }
                    ],
                    "summaryComponent": "'date': the original date string"
                },
                {
                    "codeSegments": [
                        {
                            "line": 26,
                            "code": "price: item.close,"
                        }
                    ],
                    "summaryComponent": "'price': the closing price from the 'close' property"
                },
                {
                    "codeSegments": [
                        {
                            "line": 23,
                            "code": "// Combine labels and values into an array of objects for Recharts"
                        }
                    ],
                    "summaryComponent": "Prepares the data specifically for use with Recharts by simplifying the structure"
                },
                {
                    "codeSegments": [
                        {
                            "line": 25,
                            "code": "item.date"
                        },
                        {
                            "line": 26,
                            "code": "item.close"
                        }
                    ],
                    "summaryComponent": "Assumes each data item has 'date' and 'close' fields"
                }
            ],
            "code": "19: const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));",
            "summary": "• Defines a date formatting function:\n  ◦ formatDateString splits a date string at 'T' and returns the first part (the date).\n• Transforms stock data for charting:\n  ◦ Maps each item in the data array to a new object.\n    ◦ Each new object contains:\n      ◦ 'date': the original date string.\n      ◦ 'price': the closing price from the 'close' property.\n• Prepares the data specifically for use with Recharts by simplifying the structure.\n• Assumes each data item has 'date' and 'close' fields."
        },
        "id": "ZCLjIYotxJKsTK5uzpr7"
    },
    {
        "event": "autotransit_section",
        "timestamp": "2025-08-22 22:43:18.000",
        "source": "frontend",
        "data": {
            "before_section_id": "e6fafde9-26ab-4103-8218-ac584e313def",
            "after_section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612"
        },
        "id": "klJ2LcN2aOyjMXuxjvBE"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:43:19.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "mapping_index": 3,
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "3BWHP4KHvU8pmcbtjjnG"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:43:19.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "mapping_index": 1,
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "I6f0phq85eUPAPYZxiFZ"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:43:19.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "UZbytSctTCbGLv3K2MER"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:43:19.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "mapping_index": 4,
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "YB10Y75VjaYyjpAlnTET"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:43:19.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "fkiHzXk41QTKNNV2bT2p"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:43:19.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "tYVFp7UXqxn0qwQLEXXw"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:43:23.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "mapping_index": 1,
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "2yhP8oKBrBA81f9AxMB0"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:43:23.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "3kCcVoMlQV826VcHVxgc"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:43:23.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "mapping_index": 3,
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "5p8D4nSiDAT6ZhTMnp98"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:43:23.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "5paVKGdtCZxj3Qw0aszW"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:43:23.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "CReY5XIfBeVJYw8NHfnq"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:43:23.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "D9AaSRoHQbIf7U8iChaa"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:43:23.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "VxP5gyNnXfl86pyjMisj"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:43:23.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "mapping_index": 0,
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "WP2Wz7xmnIGgCTjrBytG"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:43:23.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "XFTtQGao0wPyYfanatAP"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:43:23.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "mapping_index": 4,
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "cy11TZ1ycyGzL9qkTSCI"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:43:23.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "mapping_index": 0,
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "g31TK94pFMIJltwhca8y"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:43:23.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "hZGl7xpdgPVnudJEnkhU"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:43:23.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "mapping_index": 4,
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "oEiq0r9gwArgxOrXBkjg"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:43:23.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "mapping_index": 3,
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "tZUToI6RN4KjtuNsDGJ1"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:43:25.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "5phgtvWCahBEV97uklLL"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:43:25.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "7SHeKHIJK9MAqD3lwIVw"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:43:25.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "asVhBv29Xdaks7iltFt4"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:43:25.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "mapping_index": 3,
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "eQurG0w9700pTcA17wtu"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:43:25.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "mapping_index": 4,
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "n63rRLmlfHwFgv4ZUe7Z"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:43:25.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "mapping_index": 1,
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "nGJqY3Sl3Lo1xBMGfOgS"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:43:25.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "z6jqhMZOD660VrdpWsWC"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:43:25.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "mapping_index": 0,
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "zWy3wAuO7N9iGJysLSBM"
    },
    {
        "event": "change_summary_level",
        "timestamp": "2025-08-22 22:43:26.000",
        "source": "frontend",
        "data": {
            "before_detail_level": "medium",
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "after_detail_level": "high",
            "before_structured": "unstructured",
            "after_structured": "unstructured"
        },
        "id": "WV6ACbZVM3zjVG1EhYcf"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:43:29.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "63m91QhwdTt26zPOafgy"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:43:29.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "mapping_index": 4,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "7lZQrGFxt6NrmFLxNpAN"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:43:29.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "HdGNKbIjfG0jjJ85iQnt"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:43:29.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "MNP7lMfNYX8ALcpCOqEM"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:43:29.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "mapping_index": 8,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "NkCXV3SfK3MzQocRYz8G"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:43:29.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "mapping_index": 2,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "WVeRgimEqY4QQDM2lddF"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:43:29.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "mapping_index": 6,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "WZuw983tNLxVzsWMETOw"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:43:29.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "mapping_index": 7,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "YZFwNS8NOQeVvsqlkCmS"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:43:29.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "YZOiH9WpT87HkH2Z73Ze"
    },
    {
        "event": "click_edit_in_prompt",
        "timestamp": "2025-08-22 22:43:29.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "detail_level": "high",
            "structured": "unstructured",
            "summary": "The code snippet includes a utility function, formatDateString, which takes a date string (typically in ISO format) and returns only the date portion by splitting at the 'T' character. Additionally, it processes an array of stock data objects, mapping each to a new object containing just the 'date' and the closing price ('price'), effectively restructuring the data for use in a charting component. This transformation ensures that only the relevant fields are passed to the chart, simplifying the data structure. The approach assumes that each item in the data array has 'date' and 'close' properties."
        },
        "id": "hiL0CQ0oFYDsgfVnbzEP"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:43:29.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "maErFkPwLQcx6qt5EZTz"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:43:29.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "ohzzOBrhuKHdIGVZWDOQ"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:43:29.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "mapping_index": 0,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "xrMAJwmerLb75xAknhfe"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:43:34.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "5cr0KB0X3JpX0IRC6rnO"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:43:34.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "mapping_index": 5,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "OcxcBl2yCTpVcCPmA0lv"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:43:34.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "Opn7wdMo27Ul0WGBh0Ud"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:43:34.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "QBfozrCWPwFQt1GlOkCn"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:43:34.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "QevOzarZCHFB6KLRTx8f"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:43:34.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "mapping_index": 6,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "Qv8ef1MsyJEX37yaN4DM"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:43:34.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "U0IbV1CwAUpwZQ9neBit"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:43:34.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "mapping_index": 1,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "ZcXyvw2Qh4fb5vECaHXe"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:43:34.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "mapping_index": 3,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "bfVPo4Hn6jN2UkxSv25q"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:43:34.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "ppDe3NbBrdWqJYPthjB8"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:43:34.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "mapping_index": 2,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "q75xcaO2WeiQQjassXTe"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:43:34.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "mapping_index": 4,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "vdRcbFU1zbDOvdhZM97P"
    },
    {
        "event": "change_summary_level",
        "timestamp": "2025-08-22 22:43:35.000",
        "source": "frontend",
        "data": {
            "before_detail_level": "high",
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "after_detail_level": "medium",
            "before_structured": "unstructured",
            "after_structured": "unstructured"
        },
        "id": "u0OfHnVoq6QO5wlweQ2W"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:43:37.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "LjonU0WrGl9QMS3cHEpk"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:43:37.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "mapping_index": 0,
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "YwTNoEpBleZ1GUhLwgiQ"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:43:37.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "mapping_index": 2,
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "iKXzqytEGOro9W58xcdq"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:43:38.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "mapping_index": 1,
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "HhArtUS5Vfe3zPRMopG2"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:43:38.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "mapping_index": 0,
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "MrLxE9xXAPjT2fNLReDJ"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:43:38.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "SKUCGehmDhLpHKu5mfst"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:43:38.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "mapping_index": 1,
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "StI3OgvDHHkzNm2KmKxS"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:43:38.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "qzubD38NQ8vqEvfr13yj"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:43:38.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "sYkn02m04EA6AGvrmi1a"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:43:39.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "UQAlZchosnayT6zw1oOw"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:43:39.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "mapping_index": 2,
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "vUC3nspXlhQ9peuC4VHB"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:43:40.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "8iMf1yaJpdQnvl0LIlOt"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:43:40.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "mapping_index": 0,
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "AqbT2DDR1y6KOSCoSN8O"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:43:40.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "D62DswSYOSxVkWBOEbGc"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:43:40.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "mapping_index": 1,
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "EkwaE6e1QIYVdXfFRosM"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:43:40.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "mapping_index": 4,
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "GBMHUMeumPhHlo3fFvO5"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:43:40.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "mapping_index": 3,
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "JPJyG4wNqVytBDtPot9G"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:43:40.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "Mzkl61HDMWo83wwRxke9"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:43:40.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "mapping_index": 3,
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "SQw8irGC0dt8mTZXL4bk"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:43:40.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "TVNaYxuzQ9iv8wYyKh3P"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:43:40.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "WKzKbVM0Nuwas1Mof78j"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:43:40.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "atTtnYPcjVK2ZdHwJxiC"
    },
    {
        "event": "change_summary_level",
        "timestamp": "2025-08-22 22:43:41.000",
        "source": "frontend",
        "data": {
            "before_detail_level": "medium",
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "after_detail_level": "high",
            "before_structured": "unstructured",
            "after_structured": "unstructured"
        },
        "id": "z6llGLkh0poZbj3Bz9Sc"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:44:33.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "5jr52WDO8FibxfjbhwjC"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:44:33.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "mapping_index": 7,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "9J3KM54rVVS3MI5x9g0C"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:44:33.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "mapping_index": 3,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "Bev0Ptxm9GzOt13LOCAv"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:44:33.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "ChK8d6gtB91f5Ljc0mLf"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:44:33.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "mapping_index": 1,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "G7k8Vy5KQcGwfd0EFDuH"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:44:33.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "mapping_index": 2,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "Hb0tJe02OeArvLzaJpcK"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:44:33.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "QxzMfJzxyt0wkqQOXXHg"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:44:33.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "VljYIoEzDyYYvMQUrpaX"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:44:33.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "WkMzTrWVB3L3L4LiL8DE"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:44:33.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "mapping_index": 5,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "gL5Z85vepFvAm2pGRj3b"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:44:33.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "mapping_index": 0,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "shBtZ2OJIoUlqSvSK7ZN"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:44:33.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "zuhrxfRRIx495ph2orXH"
    },
    {
        "event": "apply_instruction_summary",
        "timestamp": "2025-08-22 22:45:19.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "detail_level": "high",
            "instruction": "modify the x-axis to show the short month name like Jan, Feb. remember is to modify the \"formatDateString\" function and should let other function to call this",
            "original_summary": "The code snippet includes a utility function, formatDateString, which takes a date string (typically in ISO format) and returns only the date portion by splitting at the 'T' character. Additionally, it processes an array of stock data objects, mapping each to a new object containing just the 'date' and the closing price ('price'), effectively restructuring the data for use in a charting component. This transformation ensures that only the relevant fields are passed to the chart, simplifying the data structure. The approach assumes that each item in the data array has 'date' and 'close' properties.",
            "structured": "unstructured"
        },
        "id": "4ldZ6ouoIzPmIKxzs0tZ"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:45:19.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "AmrPAk2OGj4Xt482UaiZ"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:45:19.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "mapping_index": 8,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "bv45T1b9i8EkfLeFojFX"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:45:19.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "mapping_index": 7,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "dZlxm23ANouLBgr7Uayb"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:45:19.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "houYMUlPALCnAL0kP72u"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:45:21.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "mapping_index": 8,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "hRMfP9FpkSHmOY4uz0YS"
    },
    {
        "event": "apply_instruction_summary",
        "timestamp": "2025-08-22 22:45:21.000",
        "source": "backend",
        "data": {
            "original_code": "const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));",
            "original_summary": "The code snippet includes a utility function, formatDateString, which takes a date string (typically in ISO format) and returns only the date portion by splitting at the 'T' character. Additionally, it processes an array of stock data objects, mapping each to a new object containing just the 'date' and the closing price ('price'), effectively restructuring the data for use in a charting component. This transformation ensures that only the relevant fields are passed to the chart, simplifying the data structure. The approach assumes that each item in the data array has 'date' and 'close' properties.",
            "updated_summary": "The code snippet includes a utility function, formatDateString, which takes a date string (typically in ISO format) and now returns the short month name (e.g., Jan, Feb) by parsing the date and formatting it accordingly, instead of just splitting at the 'T' character. This modification allows other functions to call formatDateString to obtain the short month name for display purposes, such as modifying the x-axis labels in a chart to show the short month name. Additionally, it processes an array of stock data objects, mapping each to a new object containing just the 'date' and the closing price ('price'), effectively restructuring the data for use in a charting component. This transformation ensures that only the relevant fields are passed to the chart, simplifying the data structure. The approach assumes that each item in the data array has 'date' and 'close' properties.",
            "instruction": "modify the x-axis to show the short month name like Jan, Feb. remember is to modify the \"formatDateString\" function and should let other function to call this"
        },
        "id": "opQFHnXXVBLHPeJdpHlT"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:45:27.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "1HK9HdljIT80dyxpcG9A"
    },
    {
        "event": "commit_modified_summary",
        "timestamp": "2025-08-22 22:45:38.000",
        "source": "frontend",
        "data": {
            "section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "detail_level": "high",
            "original_summary": "The code snippet includes a utility function, formatDateString, which takes a date string (typically in ISO format) and returns only the date portion by splitting at the 'T' character. Additionally, it processes an array of stock data objects, mapping each to a new object containing just the 'date' and the closing price ('price'), effectively restructuring the data for use in a charting component. This transformation ensures that only the relevant fields are passed to the chart, simplifying the data structure. The approach assumes that each item in the data array has 'date' and 'close' properties.",
            "edited_summary": "The code snippet includes a utility function, formatDateString, which takes a date string (typically in ISO format) and now returns the short month name (e.g., Jan, Feb) by parsing the date and formatting it accordingly, instead of just splitting at the 'T' character. This modification allows other functions to call formatDateString to obtain the short month name for display purposes, such as modifying the x-axis labels in a chart to show the short month name. Additionally, it processes an array of stock data objects, mapping each to a new object containing just the 'date' and the closing price ('price'), effectively restructuring the data for use in a charting component. This transformation ensures that only the relevant fields are passed to the chart, simplifying the data structure. The approach assumes that each item in the data array has 'date' and 'close' properties.",
            "structured": "unstructured"
        },
        "id": "w1BC8GHmkcsw07Ao0j27"
    },
    {
        "event": "modify_summary_mediation",
        "timestamp": "2025-08-22 22:45:40.000",
        "source": "backend",
        "data": {
            "detail_level": "high",
            "original_code": "const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));",
            "original_summary": "The code snippet includes a utility function, formatDateString, which takes a date string (typically in ISO format) and returns only the date portion by splitting at the 'T' character. Additionally, it processes an array of stock data objects, mapping each to a new object containing just the 'date' and the closing price ('price'), effectively restructuring the data for use in a charting component. This transformation ensures that only the relevant fields are passed to the chart, simplifying the data structure. The approach assumes that each item in the data array has 'date' and 'close' properties.",
            "structured_type": "unstructured",
            "edited_summary": "The code snippet includes a utility function, formatDateString, which takes a date string (typically in ISO format) and now returns the short month name (e.g., Jan, Feb) by parsing the date and formatting it accordingly, instead of just splitting at the 'T' character. This modification allows other functions to call formatDateString to obtain the short month name for display purposes, such as modifying the x-axis labels in a chart to show the short month name. Additionally, it processes an array of stock data objects, mapping each to a new object containing just the 'date' and the closing price ('price'), effectively restructuring the data for use in a charting component. This transformation ensures that only the relevant fields are passed to the chart, simplifying the data structure. The approach assumes that each item in the data array has 'date' and 'close' properties.",
            "updated_code": "const formatDateString = (date) => {\n    const d = new Date(date);\n    return d.toLocaleString('en-US', { month: 'short' });\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));"
        },
        "id": "EVrLvOOT0uyR60BknWlR"
    },
    {
        "event": "summarize_modified_code",
        "timestamp": "2025-08-22 22:45:45.000",
        "source": "backend",
        "data": {
            "old_summary": {
                "low_structured": "• Formats a date string by splitting at 'T'.\n• Maps stock data to chart-friendly objects.",
                "low_unstructured": "The code formats date strings and transforms stock data for use in a chart.",
                "title": "Data Formatting and Transformation for Charting",
                "medium_unstructured": "This code defines a function to format date strings by extracting the date portion before the 'T' character. It also transforms an array of stock data into a new array of objects containing only the date and closing price, preparing the data for charting.",
                "medium_structured": "• Defines a function to format date strings:\n  ◦ Splits the input date at 'T' and returns the first part.\n• Transforms stock data for charting:\n  ◦ Maps each data item to an object with 'date' and 'price' fields.",
                "high_unstructured": "The code snippet includes a utility function, formatDateString, which takes a date string (typically in ISO format) and returns only the date portion by splitting at the 'T' character. Additionally, it processes an array of stock data objects, mapping each to a new object containing just the 'date' and the closing price ('price'), effectively restructuring the data for use in a charting component. This transformation ensures that only the relevant fields are passed to the chart, simplifying the data structure. The approach assumes that each item in the data array has 'date' and 'close' properties.",
                "high_structured": "• Defines a date formatting function:\n  ◦ formatDateString splits a date string at 'T' and returns the first part (the date).\n• Transforms stock data for charting:\n  ◦ Maps each item in the data array to a new object.\n    ◦ Each new object contains:\n      ◦ 'date': the original date string.\n      ◦ 'price': the closing price from the 'close' property.\n• Prepares the data specifically for use with Recharts by simplifying the structure.\n• Assumes each data item has 'date' and 'close' fields."
            },
            "original_code": "const formatDateString = (date) => {\n    const d = new Date(date);\n    return d.toLocaleString('en-US', { month: 'short' });\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));",
            "new_code": "const formatDateString = (date) => {\n    const d = new Date(date);\n    return d.toLocaleString('en-US', { month: 'short' });\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));",
            "new_summary": {
                "low_structured": "• Formats a date string to return the abbreviated month name using toLocaleString.\n• Maps stock data to chart-friendly objects.",
                "low_unstructured": "The code now formats date strings to return the abbreviated month name and transforms stock data for use in a chart.",
                "title": "Date Formatting Updated to Return Month Abbreviation for Charting",
                "medium_unstructured": "This code defines a function to format date strings by converting them to a Date object and returning the abbreviated month name (e.g., 'Jan', 'Feb'). It also transforms an array of stock data into a new array of objects containing only the date and closing price, preparing the data for charting.",
                "medium_structured": "• Defines a function to format date strings:\n  ◦ Converts the input string to a Date object and returns the abbreviated month name using toLocaleString.\n• Transforms stock data for charting:\n  ◦ Maps each data item to an object with 'date' and 'price' fields.",
                "high_unstructured": "The code snippet now includes a utility function, formatDateString, which takes a date string, converts it to a Date object, and returns the abbreviated month name (e.g., 'Jan', 'Feb') using toLocaleString, instead of splitting at the 'T' character. Additionally, it processes an array of stock data objects, mapping each to a new object containing just the 'date' and the closing price ('price'), effectively restructuring the data for use in a charting component. This transformation ensures that only the relevant fields are passed to the chart, simplifying the data structure. The approach assumes that each item in the data array has 'date' and 'close' properties.",
                "high_structured": "• Defines a date formatting function:\n  ◦ formatDateString converts the input string to a Date object and returns the abbreviated month name using toLocaleString, rather than splitting at 'T'.\n• Transforms stock data for charting:\n  ◦ Maps each item in the data array to a new object.\n    ◦ Each new object contains:\n      ◦ 'date': the original date string.\n      ◦ 'price': the closing price from the 'close' property.\n• Prepares the data specifically for use with Recharts by simplifying the structure.\n• Assumes each data item has 'date' and 'close' fields."
            }
        },
        "id": "3LlGFgce3caCt7mzT8q3"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-22 22:45:46.000",
        "source": "backend",
        "data": {
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "line": 19,
                            "code": "const formatDateString = (date) => {"
                        }
                    ],
                    "summaryComponent": "Defines a function to format date strings"
                },
                {
                    "codeSegments": [
                        {
                            "line": 20,
                            "code": "const d = new Date(date);"
                        }
                    ],
                    "summaryComponent": "Converts the input string to a Date object"
                },
                {
                    "codeSegments": [
                        {
                            "line": 21,
                            "code": "return d.toLocaleString('en-US', { month: 'short' });"
                        }
                    ],
                    "summaryComponent": "returns the abbreviated month name using toLocaleString"
                },
                {
                    "codeSegments": [
                        {
                            "line": 25,
                            "code": "const chartData = data.data.map((item) => ({"
                        }
                    ],
                    "summaryComponent": "Transforms stock data for charting"
                },
                {
                    "codeSegments": [
                        {
                            "line": 26,
                            "code": "date: item.date,"
                        },
                        {
                            "line": 27,
                            "code": "price: item.close,"
                        }
                    ],
                    "summaryComponent": "Maps each data item to an object with 'date' and 'price' fields"
                }
            ],
            "code": "19: const formatDateString = (date) => {\n20:     const d = new Date(date);\n21:     return d.toLocaleString('en-US', { month: 'short' });\n22:   };\n23: \n24:   // Combine labels and values into an array of objects for Recharts\n25:   const chartData = data.data.map((item) => ({\n26:     date: item.date,\n27:     price: item.close,\n28:   }));",
            "summary": "• Defines a function to format date strings:\n  ◦ Converts the input string to a Date object and returns the abbreviated month name using toLocaleString.\n• Transforms stock data for charting:\n  ◦ Maps each data item to an object with 'date' and 'price' fields."
        },
        "id": "hlHHbO309fxCANox2Ig8"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-22 22:45:47.000",
        "source": "backend",
        "data": {
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "line": 19,
                            "code": "const formatDateString = (date) => {"
                        },
                        {
                            "line": 20,
                            "code": "const d = new Date(date);"
                        },
                        {
                            "line": 21,
                            "code": "return d.toLocaleString('en-US', { month: 'short' });"
                        }
                    ],
                    "summaryComponent": "Formats a date string to return the abbreviated month name using toLocaleString."
                },
                {
                    "codeSegments": [
                        {
                            "line": 25,
                            "code": "const chartData = data.data.map((item) => ({"
                        },
                        {
                            "line": 26,
                            "code": "date: item.date,"
                        },
                        {
                            "line": 27,
                            "code": "price: item.close,"
                        },
                        {
                            "line": 28,
                            "code": "}));"
                        }
                    ],
                    "summaryComponent": "Maps stock data to chart-friendly objects."
                }
            ],
            "code": "19: const formatDateString = (date) => {\n20:     const d = new Date(date);\n21:     return d.toLocaleString('en-US', { month: 'short' });\n22:   };\n23: \n24:   // Combine labels and values into an array of objects for Recharts\n25:   const chartData = data.data.map((item) => ({\n26:     date: item.date,\n27:     price: item.close,\n28:   }));",
            "summary": "• Formats a date string to return the abbreviated month name using toLocaleString.\n• Maps stock data to chart-friendly objects."
        },
        "id": "4I6cAgqM7Ym5sVCfu97V"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-22 22:45:47.000",
        "source": "backend",
        "data": {
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "line": 19,
                            "code": "const formatDateString = (date) => {"
                        }
                    ],
                    "summaryComponent": "defines a function to format date strings"
                },
                {
                    "codeSegments": [
                        {
                            "line": 20,
                            "code": "const d = new Date(date);"
                        }
                    ],
                    "summaryComponent": "by converting them to a Date object"
                },
                {
                    "codeSegments": [
                        {
                            "line": 21,
                            "code": "return d.toLocaleString('en-US', { month: 'short' });"
                        }
                    ],
                    "summaryComponent": "returning the abbreviated month name (e.g., 'Jan', 'Feb')"
                },
                {
                    "codeSegments": [
                        {
                            "line": 25,
                            "code": "const chartData = data.data.map((item) => ({"
                        }
                    ],
                    "summaryComponent": "transforms an array of stock data"
                },
                {
                    "codeSegments": [
                        {
                            "line": 26,
                            "code": "date: item.date,"
                        },
                        {
                            "line": 27,
                            "code": "price: item.close,"
                        }
                    ],
                    "summaryComponent": "into a new array of objects containing only the date and closing price"
                },
                {
                    "codeSegments": [
                        {
                            "line": 24,
                            "code": "// Combine labels and values into an array of objects for Recharts"
                        }
                    ],
                    "summaryComponent": "preparing the data for charting"
                }
            ],
            "code": "19: const formatDateString = (date) => {\n20:     const d = new Date(date);\n21:     return d.toLocaleString('en-US', { month: 'short' });\n22:   };\n23: \n24:   // Combine labels and values into an array of objects for Recharts\n25:   const chartData = data.data.map((item) => ({\n26:     date: item.date,\n27:     price: item.close,\n28:   }));",
            "summary": "This code defines a function to format date strings by converting them to a Date object and returning the abbreviated month name (e.g., 'Jan', 'Feb'). It also transforms an array of stock data into a new array of objects containing only the date and closing price, preparing the data for charting."
        },
        "id": "WLpHxQw4VQBHTdCxVlN9"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-22 22:45:47.000",
        "source": "backend",
        "data": {
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "line": 19,
                            "code": "const formatDateString = (date) => {"
                        },
                        {
                            "line": 20,
                            "code": "const d = new Date(date);"
                        },
                        {
                            "line": 21,
                            "code": "return d.toLocaleString('en-US', { month: 'short' });"
                        }
                    ],
                    "summaryComponent": "formats date strings"
                },
                {
                    "codeSegments": [
                        {
                            "line": 21,
                            "code": "return d.toLocaleString('en-US', { month: 'short' });"
                        }
                    ],
                    "summaryComponent": "to return the abbreviated month name"
                },
                {
                    "codeSegments": [
                        {
                            "line": 25,
                            "code": "const chartData = data.data.map((item) => ({"
                        }
                    ],
                    "summaryComponent": "transforms stock data"
                },
                {
                    "codeSegments": [
                        {
                            "line": 25,
                            "code": "const chartData = data.data.map((item) => ({"
                        },
                        {
                            "line": 26,
                            "code": "date: item.date,"
                        },
                        {
                            "line": 27,
                            "code": "price: item.close,"
                        }
                    ],
                    "summaryComponent": "for use in a chart"
                }
            ],
            "code": "19: const formatDateString = (date) => {\n20:     const d = new Date(date);\n21:     return d.toLocaleString('en-US', { month: 'short' });\n22:   };\n23: \n24:   // Combine labels and values into an array of objects for Recharts\n25:   const chartData = data.data.map((item) => ({\n26:     date: item.date,\n27:     price: item.close,\n28:   }));",
            "summary": "The code now formats date strings to return the abbreviated month name and transforms stock data for use in a chart."
        },
        "id": "qhqWTyrWkcScf32zQzqD"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-22 22:45:48.000",
        "source": "backend",
        "data": {
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "line": 19,
                            "code": "const formatDateString = (date) => {"
                        }
                    ],
                    "summaryComponent": "a utility function, formatDateString"
                },
                {
                    "codeSegments": [
                        {
                            "line": 19,
                            "code": "(date)"
                        }
                    ],
                    "summaryComponent": "takes a date string"
                },
                {
                    "codeSegments": [
                        {
                            "line": 20,
                            "code": "const d = new Date(date);"
                        }
                    ],
                    "summaryComponent": "converts it to a Date object"
                },
                {
                    "codeSegments": [
                        {
                            "line": 21,
                            "code": "return d.toLocaleString('en-US', { month: 'short' });"
                        }
                    ],
                    "summaryComponent": "returns the abbreviated month name (e.g., 'Jan', 'Feb') using toLocaleString"
                },
                {
                    "codeSegments": [
                        {
                            "line": 21,
                            "code": "d.toLocaleString('en-US', { month: 'short' })"
                        }
                    ],
                    "summaryComponent": "instead of splitting at the 'T' character"
                },
                {
                    "codeSegments": [
                        {
                            "line": 25,
                            "code": "const chartData = data.data.map((item) => ({"
                        }
                    ],
                    "summaryComponent": "processes an array of stock data objects"
                },
                {
                    "codeSegments": [
                        {
                            "line": 26,
                            "code": "date: item.date,"
                        },
                        {
                            "line": 27,
                            "code": "price: item.close,"
                        }
                    ],
                    "summaryComponent": "mapping each to a new object containing just the 'date' and the closing price ('price')"
                },
                {
                    "codeSegments": [
                        {
                            "line": 25,
                            "code": "const chartData = data.data.map((item) => ({"
                        }
                    ],
                    "summaryComponent": "effectively restructuring the data for use in a charting component"
                },
                {
                    "codeSegments": [
                        {
                            "line": 26,
                            "code": "date: item.date,"
                        },
                        {
                            "line": 27,
                            "code": "price: item.close,"
                        }
                    ],
                    "summaryComponent": "only the relevant fields are passed to the chart"
                },
                {
                    "codeSegments": [
                        {
                            "line": 26,
                            "code": "item.date"
                        },
                        {
                            "line": 27,
                            "code": "item.close"
                        }
                    ],
                    "summaryComponent": "each item in the data array has 'date' and 'close' properties"
                }
            ],
            "code": "19: const formatDateString = (date) => {\n20:     const d = new Date(date);\n21:     return d.toLocaleString('en-US', { month: 'short' });\n22:   };\n23: \n24:   // Combine labels and values into an array of objects for Recharts\n25:   const chartData = data.data.map((item) => ({\n26:     date: item.date,\n27:     price: item.close,\n28:   }));",
            "summary": "The code snippet now includes a utility function, formatDateString, which takes a date string, converts it to a Date object, and returns the abbreviated month name (e.g., 'Jan', 'Feb') using toLocaleString, instead of splitting at the 'T' character. Additionally, it processes an array of stock data objects, mapping each to a new object containing just the 'date' and the closing price ('price'), effectively restructuring the data for use in a charting component. This transformation ensures that only the relevant fields are passed to the chart, simplifying the data structure. The approach assumes that each item in the data array has 'date' and 'close' properties."
        },
        "id": "5Kx9TJJkza9D1ZejyvvK"
    },
    {
        "event": "create_new_section",
        "timestamp": "2025-08-22 22:45:48.000",
        "source": "frontend",
        "data": {
            "section_id": "83a6ef7c-fc87-4769-8a35-f3f80aaf5488",
            "section_data": {
                "summaryData": {
                    "low_structured": "• Formats a date string to return the abbreviated month name using toLocaleString.\n• Maps stock data to chart-friendly objects.",
                    "low_unstructured": "The code now formats date strings to return the abbreviated month name and transforms stock data for use in a chart.",
                    "title": "Date Formatting Updated to Return Month Abbreviation for Charting",
                    "medium_unstructured": "This code defines a function to format date strings by converting them to a Date object and returning the abbreviated month name (e.g., 'Jan', 'Feb'). It also transforms an array of stock data into a new array of objects containing only the date and closing price, preparing the data for charting.",
                    "medium_structured": "• Defines a function to format date strings:\n  ◦ Converts the input string to a Date object and returns the abbreviated month name using toLocaleString.\n• Transforms stock data for charting:\n  ◦ Maps each data item to an object with 'date' and 'price' fields.",
                    "high_unstructured": "The code snippet now includes a utility function, formatDateString, which takes a date string, converts it to a Date object, and returns the abbreviated month name (e.g., 'Jan', 'Feb') using toLocaleString, instead of splitting at the 'T' character. Additionally, it processes an array of stock data objects, mapping each to a new object containing just the 'date' and the closing price ('price'), effectively restructuring the data for use in a charting component. This transformation ensures that only the relevant fields are passed to the chart, simplifying the data structure. The approach assumes that each item in the data array has 'date' and 'close' properties.",
                    "high_structured": "• Defines a date formatting function:\n  ◦ formatDateString converts the input string to a Date object and returns the abbreviated month name using toLocaleString, rather than splitting at 'T'.\n• Transforms stock data for charting:\n  ◦ Maps each item in the data array to a new object.\n    ◦ Each new object contains:\n      ◦ 'date': the original date string.\n      ◦ 'price': the closing price from the 'close' property.\n• Prepares the data specifically for use with Recharts by simplifying the structure.\n• Assumes each data item has 'date' and 'close' fields."
                },
                "editPromptValue": "",
                "title": "Date Formatting Updated to Return Month Abbreviation for Charting",
                "editPromptStructured": null,
                "selectedDetailLevel": "medium",
                "metadata": {
                    "filename": "StockChart.jsx",
                    "fullPath": "/project/workspace/frontend/src/StockChart.jsx",
                    "id": "83a6ef7c-fc87-4769-8a35-f3f80aaf5488",
                    "originalCode": "const formatDateString = (date) => {\n    const d = new Date(date);\n    return d.toLocaleString('en-US', { month: 'short' });\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));",
                    "offset": 315
                },
                "createdAt": 1755888348000,
                "lines": [
                    19,
                    28
                ],
                "oldSummaryData": {
                    "low_structured": "• Formats a date string by splitting at 'T'.\n• Maps stock data to chart-friendly objects.",
                    "low_unstructured": "The code formats date strings and transforms stock data for use in a chart.",
                    "title": "Data Formatting and Transformation for Charting",
                    "medium_unstructured": "This code defines a function to format date strings by extracting the date portion before the 'T' character. It also transforms an array of stock data into a new array of objects containing only the date and closing price, preparing the data for charting.",
                    "medium_structured": "• Defines a function to format date strings:\n  ◦ Splits the input date at 'T' and returns the first part.\n• Transforms stock data for charting:\n  ◦ Maps each data item to an object with 'date' and 'price' fields.",
                    "high_unstructured": "The code snippet includes a utility function, formatDateString, which takes a date string (typically in ISO format) and returns only the date portion by splitting at the 'T' character. Additionally, it processes an array of stock data objects, mapping each to a new object containing just the 'date' and the closing price ('price'), effectively restructuring the data for use in a charting component. This transformation ensures that only the relevant fields are passed to the chart, simplifying the data structure. The approach assumes that each item in the data array has 'date' and 'close' properties.",
                    "high_structured": "• Defines a date formatting function:\n  ◦ formatDateString splits a date string at 'T' and returns the first part (the date).\n• Transforms stock data for charting:\n  ◦ Maps each item in the data array to a new object.\n    ◦ Each new object contains:\n      ◦ 'date': the original date string.\n      ◦ 'price': the closing price from the 'close' property.\n• Prepares the data specifically for use with Recharts by simplifying the structure.\n• Assumes each data item has 'date' and 'close' fields."
                },
                "summaryMappings": {
                    "low_structured": [
                        {
                            "codeSegments": [
                                {
                                    "line": 19,
                                    "code": "const formatDateString = (date) => {"
                                },
                                {
                                    "line": 20,
                                    "code": "const d = new Date(date);"
                                },
                                {
                                    "line": 21,
                                    "code": "return d.toLocaleString('en-US', { month: 'short' });"
                                }
                            ],
                            "summaryComponent": "Formats a date string to return the abbreviated month name using toLocaleString."
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 25,
                                    "code": "const chartData = data.data.map((item) => ({"
                                },
                                {
                                    "line": 26,
                                    "code": "date: item.date,"
                                },
                                {
                                    "line": 27,
                                    "code": "price: item.close,"
                                },
                                {
                                    "line": 28,
                                    "code": "}));"
                                }
                            ],
                            "summaryComponent": "Maps stock data to chart-friendly objects."
                        }
                    ],
                    "low_unstructured": [
                        {
                            "codeSegments": [
                                {
                                    "line": 19,
                                    "code": "const formatDateString = (date) => {"
                                },
                                {
                                    "line": 20,
                                    "code": "const d = new Date(date);"
                                },
                                {
                                    "line": 21,
                                    "code": "return d.toLocaleString('en-US', { month: 'short' });"
                                }
                            ],
                            "summaryComponent": "formats date strings"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 21,
                                    "code": "return d.toLocaleString('en-US', { month: 'short' });"
                                }
                            ],
                            "summaryComponent": "to return the abbreviated month name"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 25,
                                    "code": "const chartData = data.data.map((item) => ({"
                                }
                            ],
                            "summaryComponent": "transforms stock data"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 25,
                                    "code": "const chartData = data.data.map((item) => ({"
                                },
                                {
                                    "line": 26,
                                    "code": "date: item.date,"
                                },
                                {
                                    "line": 27,
                                    "code": "price: item.close,"
                                }
                            ],
                            "summaryComponent": "for use in a chart"
                        }
                    ],
                    "medium_structured": [
                        {
                            "codeSegments": [
                                {
                                    "line": 19,
                                    "code": "const formatDateString = (date) => {"
                                }
                            ],
                            "summaryComponent": "Defines a function to format date strings"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 20,
                                    "code": "const d = new Date(date);"
                                }
                            ],
                            "summaryComponent": "Converts the input string to a Date object"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 21,
                                    "code": "return d.toLocaleString('en-US', { month: 'short' });"
                                }
                            ],
                            "summaryComponent": "returns the abbreviated month name using toLocaleString"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 25,
                                    "code": "const chartData = data.data.map((item) => ({"
                                }
                            ],
                            "summaryComponent": "Transforms stock data for charting"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 26,
                                    "code": "date: item.date,"
                                },
                                {
                                    "line": 27,
                                    "code": "price: item.close,"
                                }
                            ],
                            "summaryComponent": "Maps each data item to an object with 'date' and 'price' fields"
                        }
                    ],
                    "medium_unstructured": [
                        {
                            "codeSegments": [
                                {
                                    "line": 19,
                                    "code": "const formatDateString = (date) => {"
                                }
                            ],
                            "summaryComponent": "defines a function to format date strings"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 20,
                                    "code": "const d = new Date(date);"
                                }
                            ],
                            "summaryComponent": "by converting them to a Date object"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 21,
                                    "code": "return d.toLocaleString('en-US', { month: 'short' });"
                                }
                            ],
                            "summaryComponent": "returning the abbreviated month name (e.g., 'Jan', 'Feb')"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 25,
                                    "code": "const chartData = data.data.map((item) => ({"
                                }
                            ],
                            "summaryComponent": "transforms an array of stock data"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 26,
                                    "code": "date: item.date,"
                                },
                                {
                                    "line": 27,
                                    "code": "price: item.close,"
                                }
                            ],
                            "summaryComponent": "into a new array of objects containing only the date and closing price"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 24,
                                    "code": "// Combine labels and values into an array of objects for Recharts"
                                }
                            ],
                            "summaryComponent": "preparing the data for charting"
                        }
                    ],
                    "high_unstructured": [
                        {
                            "codeSegments": [
                                {
                                    "line": 19,
                                    "code": "const formatDateString = (date) => {"
                                }
                            ],
                            "summaryComponent": "a utility function, formatDateString"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 19,
                                    "code": "(date)"
                                }
                            ],
                            "summaryComponent": "takes a date string"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 20,
                                    "code": "const d = new Date(date);"
                                }
                            ],
                            "summaryComponent": "converts it to a Date object"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 21,
                                    "code": "return d.toLocaleString('en-US', { month: 'short' });"
                                }
                            ],
                            "summaryComponent": "returns the abbreviated month name (e.g., 'Jan', 'Feb') using toLocaleString"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 21,
                                    "code": "d.toLocaleString('en-US', { month: 'short' })"
                                }
                            ],
                            "summaryComponent": "instead of splitting at the 'T' character"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 25,
                                    "code": "const chartData = data.data.map((item) => ({"
                                }
                            ],
                            "summaryComponent": "processes an array of stock data objects"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 26,
                                    "code": "date: item.date,"
                                },
                                {
                                    "line": 27,
                                    "code": "price: item.close,"
                                }
                            ],
                            "summaryComponent": "mapping each to a new object containing just the 'date' and the closing price ('price')"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 25,
                                    "code": "const chartData = data.data.map((item) => ({"
                                }
                            ],
                            "summaryComponent": "effectively restructuring the data for use in a charting component"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 26,
                                    "code": "date: item.date,"
                                },
                                {
                                    "line": 27,
                                    "code": "price: item.close,"
                                }
                            ],
                            "summaryComponent": "only the relevant fields are passed to the chart"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 26,
                                    "code": "item.date"
                                },
                                {
                                    "line": 27,
                                    "code": "item.close"
                                }
                            ],
                            "summaryComponent": "each item in the data array has 'date' and 'close' properties"
                        }
                    ],
                    "high_structured": [
                        {
                            "codeSegments": [
                                {
                                    "line": 19,
                                    "code": "const formatDateString = (date) => {"
                                },
                                {
                                    "line": 22,
                                    "code": "};"
                                }
                            ],
                            "summaryComponent": "Defines a date formatting function"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 20,
                                    "code": "const d = new Date(date);"
                                },
                                {
                                    "line": 21,
                                    "code": "return d.toLocaleString('en-US', { month: 'short' });"
                                }
                            ],
                            "summaryComponent": "formatDateString converts the input string to a Date object and returns the abbreviated month name using toLocaleString, rather than splitting at 'T'."
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 25,
                                    "code": "const chartData = data.data.map((item) => ({"
                                },
                                {
                                    "line": 28,
                                    "code": "}));"
                                }
                            ],
                            "summaryComponent": "Transforms stock data for charting"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 25,
                                    "code": "const chartData = data.data.map((item) => ({"
                                }
                            ],
                            "summaryComponent": "Maps each item in the data array to a new object."
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 26,
                                    "code": "date: item.date,"
                                },
                                {
                                    "line": 27,
                                    "code": "price: item.close,"
                                }
                            ],
                            "summaryComponent": "Each new object contains:"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 26,
                                    "code": "date: item.date,"
                                }
                            ],
                            "summaryComponent": "'date': the original date string."
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 27,
                                    "code": "price: item.close,"
                                }
                            ],
                            "summaryComponent": "'price': the closing price from the 'close' property."
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 25,
                                    "code": "const chartData = data.data.map((item) => ({"
                                },
                                {
                                    "line": 26,
                                    "code": "date: item.date,"
                                },
                                {
                                    "line": 27,
                                    "code": "price: item.close,"
                                },
                                {
                                    "line": 28,
                                    "code": "}));"
                                }
                            ],
                            "summaryComponent": "Prepares the data specifically for use with Recharts by simplifying the structure."
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 26,
                                    "code": "date: item.date,"
                                },
                                {
                                    "line": 27,
                                    "code": "price: item.close,"
                                }
                            ],
                            "summaryComponent": "Assumes each data item has 'date' and 'close' fields."
                        }
                    ]
                },
                "editPromptDetailLevel": null,
                "selectedStructured": "unstructured"
            }
        },
        "id": "DWKq1VrjPW0qakUuk6YM"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-22 22:45:48.000",
        "source": "backend",
        "data": {
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "line": 19,
                            "code": "const formatDateString = (date) => {"
                        },
                        {
                            "line": 22,
                            "code": "};"
                        }
                    ],
                    "summaryComponent": "Defines a date formatting function"
                },
                {
                    "codeSegments": [
                        {
                            "line": 20,
                            "code": "const d = new Date(date);"
                        },
                        {
                            "line": 21,
                            "code": "return d.toLocaleString('en-US', { month: 'short' });"
                        }
                    ],
                    "summaryComponent": "formatDateString converts the input string to a Date object and returns the abbreviated month name using toLocaleString, rather than splitting at 'T'."
                },
                {
                    "codeSegments": [
                        {
                            "line": 25,
                            "code": "const chartData = data.data.map((item) => ({"
                        },
                        {
                            "line": 28,
                            "code": "}));"
                        }
                    ],
                    "summaryComponent": "Transforms stock data for charting"
                },
                {
                    "codeSegments": [
                        {
                            "line": 25,
                            "code": "const chartData = data.data.map((item) => ({"
                        }
                    ],
                    "summaryComponent": "Maps each item in the data array to a new object."
                },
                {
                    "codeSegments": [
                        {
                            "line": 26,
                            "code": "date: item.date,"
                        },
                        {
                            "line": 27,
                            "code": "price: item.close,"
                        }
                    ],
                    "summaryComponent": "Each new object contains:"
                },
                {
                    "codeSegments": [
                        {
                            "line": 26,
                            "code": "date: item.date,"
                        }
                    ],
                    "summaryComponent": "'date': the original date string."
                },
                {
                    "codeSegments": [
                        {
                            "line": 27,
                            "code": "price: item.close,"
                        }
                    ],
                    "summaryComponent": "'price': the closing price from the 'close' property."
                },
                {
                    "codeSegments": [
                        {
                            "line": 25,
                            "code": "const chartData = data.data.map((item) => ({"
                        },
                        {
                            "line": 26,
                            "code": "date: item.date,"
                        },
                        {
                            "line": 27,
                            "code": "price: item.close,"
                        },
                        {
                            "line": 28,
                            "code": "}));"
                        }
                    ],
                    "summaryComponent": "Prepares the data specifically for use with Recharts by simplifying the structure."
                },
                {
                    "codeSegments": [
                        {
                            "line": 26,
                            "code": "date: item.date,"
                        },
                        {
                            "line": 27,
                            "code": "price: item.close,"
                        }
                    ],
                    "summaryComponent": "Assumes each data item has 'date' and 'close' fields."
                }
            ],
            "code": "19: const formatDateString = (date) => {\n20:     const d = new Date(date);\n21:     return d.toLocaleString('en-US', { month: 'short' });\n22:   };\n23: \n24:   // Combine labels and values into an array of objects for Recharts\n25:   const chartData = data.data.map((item) => ({\n26:     date: item.date,\n27:     price: item.close,\n28:   }));",
            "summary": "• Defines a date formatting function:\n  ◦ formatDateString converts the input string to a Date object and returns the abbreviated month name using toLocaleString, rather than splitting at 'T'.\n• Transforms stock data for charting:\n  ◦ Maps each item in the data array to a new object.\n    ◦ Each new object contains:\n      ◦ 'date': the original date string.\n      ◦ 'price': the closing price from the 'close' property.\n• Prepares the data specifically for use with Recharts by simplifying the structure.\n• Assumes each data item has 'date' and 'close' fields."
        },
        "id": "YFP0dscURbkRDcSAgiPE"
    },
    {
        "event": "autotransit_section",
        "timestamp": "2025-08-22 22:45:48.000",
        "source": "frontend",
        "data": {
            "before_section_id": "ec5042f3-cc6a-498e-aa9c-09aafa715612",
            "after_section_id": "83a6ef7c-fc87-4769-8a35-f3f80aaf5488"
        },
        "id": "ffboyi2NineNODkHDlmh"
    },
    {
        "event": "click_summarize_code",
        "timestamp": "2025-08-22 22:46:36.000",
        "source": "frontend",
        "data": {},
        "id": "zRVvOxVeNAm3KBIj4i1t"
    },
    {
        "event": "summarize_selected_code",
        "timestamp": "2025-08-22 22:46:44.000",
        "source": "backend",
        "data": {
            "selected_code": "import React from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  ReferenceLine,\n} from \"recharts\";\n\nconst StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    const d = new Date(date);\n    return d.toLocaleString(\"en-US\", { month: \"short\" });\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;\n",
            "summary": {
                "low_structured": "• React component renders a stock price chart\n• Uses Recharts for visualization\n• Displays company name and ticker",
                "low_unstructured": "This code defines a React component that displays a line chart of stock prices using the Recharts library.",
                "title": "StockChart React Component for Rendering Stock Price Line Charts",
                "medium_unstructured": "This React component, StockChart, takes in stock data and visualizes it as a line chart using the Recharts library. It displays the company name and ticker, and formats the data for charting. The chart includes axes, a legend, and a tooltip for better readability.",
                "medium_structured": "• Defines a StockChart React component\n• Expects a data prop containing stock information\n  ◦ Extracts company name and ticker for display\n• Formats input data for Recharts\n• Renders a responsive line chart with axes, legend, and tooltip",
                "high_unstructured": "The StockChart component is a functional React component that visualizes stock price data using the Recharts library. It first checks for valid input data and extracts the company name and ticker for display. The component maps the provided data to a format suitable for Recharts, specifically extracting the date and closing price for each data point. It then renders a responsive line chart with labeled axes, a legend, and a tooltip, and styles the chart with a specific stroke color and margin. The chart is wrapped in a container with a top margin and displays the company name and ticker above the chart.",
                "high_structured": "• Implements a StockChart React component for displaying stock price trends\n• Validates input data before rendering\n  ◦ Returns null if data is missing or empty\n• Extracts and displays company name and ticker symbol\n• Prepares chart data by mapping each item to an object with date and closing price\n• Defines a helper function to format date strings (though not used in rendering)\n• Renders a responsive line chart using Recharts components\n  ◦ Includes X and Y axes, legend, and tooltip for interactivity\n  ◦ Plots the closing price as a monotone line with a custom stroke color and no dots\n  ◦ Sets chart margins and ensures 100% width and fixed height\n• Wraps chart in a styled div and displays a heading above the chart"
            }
        },
        "id": "fTAxfwU75A7EiQiwaSYe"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-22 22:46:46.000",
        "source": "backend",
        "data": {
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        }
                    ],
                    "summaryComponent": "This code defines a React component"
                },
                {
                    "codeSegments": [
                        {
                            "line": 36,
                            "code": "<LineChart"
                        },
                        {
                            "line": 44,
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                        }
                    ],
                    "summaryComponent": "that displays a line chart"
                },
                {
                    "codeSegments": [
                        {
                            "line": 27,
                            "code": "price: item.close,"
                        },
                        {
                            "line": 44,
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                        }
                    ],
                    "summaryComponent": "of stock prices"
                },
                {
                    "codeSegments": [
                        {
                            "line": 2,
                            "code": "import {"
                        },
                        {
                            "line": 11,
                            "code": "} from \"recharts\";"
                        }
                    ],
                    "summaryComponent": "using the Recharts library"
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     const d = new Date(date);\n21:     return d.toLocaleString(\"en-US\", { month: \"short\" });\n22:   };\n23: \n24:   // Combine labels and values into an array of objects for Recharts\n25:   const chartData = data.data.map((item) => ({\n26:     date: item.date,\n27:     price: item.close,\n28:   }));\n29: \n30:   return (\n31:     <div style={{ marginTop: \"2rem\" }}>\n32:       <h3>\n33:         {company} ({ticker})\n34:       </h3>\n35:       <ResponsiveContainer width=\"100%\" height={300}>\n36:         <LineChart\n37:           data={chartData}\n38:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n39:         >\n40:           <XAxis dataKey=\"date\" />\n41:           <YAxis domain={[\"auto\", \"auto\"]} />\n42:           <Tooltip />\n43:           <Legend />\n44:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n45:         </LineChart>\n46:       </ResponsiveContainer>\n47:     </div>\n48:   );\n49: };\n50: \n51: export default StockChart;\n52: ",
            "summary": "This code defines a React component that displays a line chart of stock prices using the Recharts library."
        },
        "id": "Tztf36T5om0Rs1llvoEM"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-22 22:46:46.000",
        "source": "backend",
        "data": {
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        },
                        {
                            "line": 36,
                            "code": "<LineChart"
                        }
                    ],
                    "summaryComponent": "React component renders a stock price chart"
                },
                {
                    "codeSegments": [
                        {
                            "line": 2,
                            "code": "import {"
                        },
                        {
                            "line": 3,
                            "code": "LineChart,"
                        },
                        {
                            "line": 4,
                            "code": "Line,"
                        },
                        {
                            "line": 5,
                            "code": "XAxis,"
                        },
                        {
                            "line": 6,
                            "code": "YAxis,"
                        },
                        {
                            "line": 7,
                            "code": "Tooltip,"
                        },
                        {
                            "line": 8,
                            "code": "Legend,"
                        },
                        {
                            "line": 9,
                            "code": "ResponsiveContainer,"
                        },
                        {
                            "line": 10,
                            "code": "ReferenceLine,"
                        },
                        {
                            "line": 11,
                            "code": "} from \"recharts\";"
                        }
                    ],
                    "summaryComponent": "Uses Recharts for visualization"
                },
                {
                    "codeSegments": [
                        {
                            "line": 16,
                            "code": "const company = data.name;"
                        },
                        {
                            "line": 17,
                            "code": "const ticker = data.ticker;"
                        },
                        {
                            "line": 32,
                            "code": "<h3>"
                        },
                        {
                            "line": 33,
                            "code": "{company} ({ticker})"
                        }
                    ],
                    "summaryComponent": "Displays company name and ticker"
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     const d = new Date(date);\n21:     return d.toLocaleString(\"en-US\", { month: \"short\" });\n22:   };\n23: \n24:   // Combine labels and values into an array of objects for Recharts\n25:   const chartData = data.data.map((item) => ({\n26:     date: item.date,\n27:     price: item.close,\n28:   }));\n29: \n30:   return (\n31:     <div style={{ marginTop: \"2rem\" }}>\n32:       <h3>\n33:         {company} ({ticker})\n34:       </h3>\n35:       <ResponsiveContainer width=\"100%\" height={300}>\n36:         <LineChart\n37:           data={chartData}\n38:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n39:         >\n40:           <XAxis dataKey=\"date\" />\n41:           <YAxis domain={[\"auto\", \"auto\"]} />\n42:           <Tooltip />\n43:           <Legend />\n44:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n45:         </LineChart>\n46:       </ResponsiveContainer>\n47:     </div>\n48:   );\n49: };\n50: \n51: export default StockChart;\n52: ",
            "summary": "• React component renders a stock price chart\n• Uses Recharts for visualization\n• Displays company name and ticker"
        },
        "id": "sSnprENUqp48nfcQhSO8"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-22 22:46:47.000",
        "source": "backend",
        "data": {
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        }
                    ],
                    "summaryComponent": "Defines a StockChart React component"
                },
                {
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        }
                    ],
                    "summaryComponent": "Expects a data prop containing stock information"
                },
                {
                    "codeSegments": [
                        {
                            "line": 16,
                            "code": "const company = data.name;"
                        },
                        {
                            "line": 17,
                            "code": "const ticker = data.ticker;"
                        },
                        {
                            "line": 33,
                            "code": "{company} ({ticker})"
                        }
                    ],
                    "summaryComponent": "Extracts company name and ticker for display"
                },
                {
                    "codeSegments": [
                        {
                            "line": 25,
                            "code": "const chartData = data.data.map((item) => ({"
                        },
                        {
                            "line": 26,
                            "code": "date: item.date,"
                        },
                        {
                            "line": 27,
                            "code": "price: item.close,"
                        }
                    ],
                    "summaryComponent": "Formats input data for Recharts"
                },
                {
                    "codeSegments": [
                        {
                            "line": 35,
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                        },
                        {
                            "line": 36,
                            "code": "<LineChart"
                        },
                        {
                            "line": 40,
                            "code": "<XAxis dataKey=\"date\" />"
                        },
                        {
                            "line": 41,
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                        },
                        {
                            "line": 42,
                            "code": "<Tooltip />"
                        },
                        {
                            "line": 43,
                            "code": "<Legend />"
                        },
                        {
                            "line": 44,
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                        }
                    ],
                    "summaryComponent": "Renders a responsive line chart with axes, legend, and tooltip"
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     const d = new Date(date);\n21:     return d.toLocaleString(\"en-US\", { month: \"short\" });\n22:   };\n23: \n24:   // Combine labels and values into an array of objects for Recharts\n25:   const chartData = data.data.map((item) => ({\n26:     date: item.date,\n27:     price: item.close,\n28:   }));\n29: \n30:   return (\n31:     <div style={{ marginTop: \"2rem\" }}>\n32:       <h3>\n33:         {company} ({ticker})\n34:       </h3>\n35:       <ResponsiveContainer width=\"100%\" height={300}>\n36:         <LineChart\n37:           data={chartData}\n38:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n39:         >\n40:           <XAxis dataKey=\"date\" />\n41:           <YAxis domain={[\"auto\", \"auto\"]} />\n42:           <Tooltip />\n43:           <Legend />\n44:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n45:         </LineChart>\n46:       </ResponsiveContainer>\n47:     </div>\n48:   );\n49: };\n50: \n51: export default StockChart;\n52: ",
            "summary": "• Defines a StockChart React component\n• Expects a data prop containing stock information\n  ◦ Extracts company name and ticker for display\n• Formats input data for Recharts\n• Renders a responsive line chart with axes, legend, and tooltip"
        },
        "id": "67ydPHZk9DEbTkrvWxsZ"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-22 22:46:47.000",
        "source": "backend",
        "data": {
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        }
                    ],
                    "summaryComponent": "This React component, StockChart,"
                },
                {
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        }
                    ],
                    "summaryComponent": "takes in stock data"
                },
                {
                    "codeSegments": [
                        {
                            "line": 2,
                            "code": "import {"
                        },
                        {
                            "line": 3,
                            "code": "LineChart,"
                        },
                        {
                            "line": 4,
                            "code": "Line,"
                        },
                        {
                            "line": 9,
                            "code": "ResponsiveContainer,"
                        },
                        {
                            "line": 36,
                            "code": "<LineChart"
                        },
                        {
                            "line": 44,
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                        }
                    ],
                    "summaryComponent": "visualizes it as a line chart using the Recharts library"
                },
                {
                    "codeSegments": [
                        {
                            "line": 16,
                            "code": "const company = data.name;"
                        },
                        {
                            "line": 17,
                            "code": "const ticker = data.ticker;"
                        },
                        {
                            "line": 32,
                            "code": "<h3>"
                        },
                        {
                            "line": 33,
                            "code": "{company} ({ticker})"
                        }
                    ],
                    "summaryComponent": "It displays the company name and ticker"
                },
                {
                    "codeSegments": [
                        {
                            "line": 25,
                            "code": "const chartData = data.data.map((item) => ({"
                        },
                        {
                            "line": 26,
                            "code": "date: item.date,"
                        },
                        {
                            "line": 27,
                            "code": "price: item.close,"
                        }
                    ],
                    "summaryComponent": "formats the data for charting"
                },
                {
                    "codeSegments": [
                        {
                            "line": 40,
                            "code": "<XAxis dataKey=\"date\" />"
                        },
                        {
                            "line": 41,
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                        }
                    ],
                    "summaryComponent": "The chart includes axes"
                },
                {
                    "codeSegments": [
                        {
                            "line": 43,
                            "code": "<Legend />"
                        }
                    ],
                    "summaryComponent": "a legend"
                },
                {
                    "codeSegments": [
                        {
                            "line": 42,
                            "code": "<Tooltip />"
                        }
                    ],
                    "summaryComponent": "and a tooltip for better readability"
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     const d = new Date(date);\n21:     return d.toLocaleString(\"en-US\", { month: \"short\" });\n22:   };\n23: \n24:   // Combine labels and values into an array of objects for Recharts\n25:   const chartData = data.data.map((item) => ({\n26:     date: item.date,\n27:     price: item.close,\n28:   }));\n29: \n30:   return (\n31:     <div style={{ marginTop: \"2rem\" }}>\n32:       <h3>\n33:         {company} ({ticker})\n34:       </h3>\n35:       <ResponsiveContainer width=\"100%\" height={300}>\n36:         <LineChart\n37:           data={chartData}\n38:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n39:         >\n40:           <XAxis dataKey=\"date\" />\n41:           <YAxis domain={[\"auto\", \"auto\"]} />\n42:           <Tooltip />\n43:           <Legend />\n44:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n45:         </LineChart>\n46:       </ResponsiveContainer>\n47:     </div>\n48:   );\n49: };\n50: \n51: export default StockChart;\n52: ",
            "summary": "This React component, StockChart, takes in stock data and visualizes it as a line chart using the Recharts library. It displays the company name and ticker, and formats the data for charting. The chart includes axes, a legend, and a tooltip for better readability."
        },
        "id": "Cdn4iCsIQbxOM3FxfSQE"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-22 22:46:48.000",
        "source": "backend",
        "data": {
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        },
                        {
                            "line": 51,
                            "code": "export default StockChart;"
                        }
                    ],
                    "summaryComponent": "Implements a StockChart React component for displaying stock price trends"
                },
                {
                    "codeSegments": [
                        {
                            "line": 14,
                            "code": "if (!data || !data.data || !data.data.length) return null;"
                        }
                    ],
                    "summaryComponent": "Validates input data before rendering"
                },
                {
                    "codeSegments": [
                        {
                            "line": 14,
                            "code": "if (!data || !data.data || !data.data.length) return null;"
                        }
                    ],
                    "summaryComponent": "Returns null if data is missing or empty"
                },
                {
                    "codeSegments": [
                        {
                            "line": 16,
                            "code": "const company = data.name;"
                        },
                        {
                            "line": 17,
                            "code": "const ticker = data.ticker;"
                        },
                        {
                            "line": 33,
                            "code": "{company} ({ticker})"
                        }
                    ],
                    "summaryComponent": "Extracts and displays company name and ticker symbol"
                },
                {
                    "codeSegments": [
                        {
                            "line": 25,
                            "code": "const chartData = data.data.map((item) => ({"
                        },
                        {
                            "line": 26,
                            "code": "date: item.date,"
                        },
                        {
                            "line": 27,
                            "code": "price: item.close,"
                        }
                    ],
                    "summaryComponent": "Prepares chart data by mapping each item to an object with date and closing price"
                },
                {
                    "codeSegments": [
                        {
                            "line": 19,
                            "code": "const formatDateString = (date) => {"
                        },
                        {
                            "line": 20,
                            "code": "const d = new Date(date);"
                        },
                        {
                            "line": 21,
                            "code": "return d.toLocaleString(\"en-US\", { month: \"short\" });"
                        }
                    ],
                    "summaryComponent": "Defines a helper function to format date strings (though not used in rendering)"
                },
                {
                    "codeSegments": [
                        {
                            "line": 35,
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                        },
                        {
                            "line": 36,
                            "code": "<LineChart"
                        }
                    ],
                    "summaryComponent": "Renders a responsive line chart using Recharts components"
                },
                {
                    "codeSegments": [
                        {
                            "line": 40,
                            "code": "<XAxis dataKey=\"date\" />"
                        },
                        {
                            "line": 41,
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                        },
                        {
                            "line": 42,
                            "code": "<Tooltip />"
                        },
                        {
                            "line": 43,
                            "code": "<Legend />"
                        }
                    ],
                    "summaryComponent": "Includes X and Y axes, legend, and tooltip for interactivity"
                },
                {
                    "codeSegments": [
                        {
                            "line": 44,
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                        }
                    ],
                    "summaryComponent": "Plots the closing price as a monotone line with a custom stroke color and no dots"
                },
                {
                    "codeSegments": [
                        {
                            "line": 35,
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                        },
                        {
                            "line": 38,
                            "code": "margin={{ top: 10, right: 30, left: 0, bottom: 0 }}"
                        }
                    ],
                    "summaryComponent": "Sets chart margins and ensures 100% width and fixed height"
                },
                {
                    "codeSegments": [
                        {
                            "line": 31,
                            "code": "<div style={{ marginTop: \"2rem\" }}>"
                        },
                        {
                            "line": 32,
                            "code": "<h3>"
                        }
                    ],
                    "summaryComponent": "Wraps chart in a styled div and displays a heading above the chart"
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     const d = new Date(date);\n21:     return d.toLocaleString(\"en-US\", { month: \"short\" });\n22:   };\n23: \n24:   // Combine labels and values into an array of objects for Recharts\n25:   const chartData = data.data.map((item) => ({\n26:     date: item.date,\n27:     price: item.close,\n28:   }));\n29: \n30:   return (\n31:     <div style={{ marginTop: \"2rem\" }}>\n32:       <h3>\n33:         {company} ({ticker})\n34:       </h3>\n35:       <ResponsiveContainer width=\"100%\" height={300}>\n36:         <LineChart\n37:           data={chartData}\n38:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n39:         >\n40:           <XAxis dataKey=\"date\" />\n41:           <YAxis domain={[\"auto\", \"auto\"]} />\n42:           <Tooltip />\n43:           <Legend />\n44:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n45:         </LineChart>\n46:       </ResponsiveContainer>\n47:     </div>\n48:   );\n49: };\n50: \n51: export default StockChart;\n52: ",
            "summary": "• Implements a StockChart React component for displaying stock price trends\n• Validates input data before rendering\n  ◦ Returns null if data is missing or empty\n• Extracts and displays company name and ticker symbol\n• Prepares chart data by mapping each item to an object with date and closing price\n• Defines a helper function to format date strings (though not used in rendering)\n• Renders a responsive line chart using Recharts components\n  ◦ Includes X and Y axes, legend, and tooltip for interactivity\n  ◦ Plots the closing price as a monotone line with a custom stroke color and no dots\n  ◦ Sets chart margins and ensures 100% width and fixed height\n• Wraps chart in a styled div and displays a heading above the chart"
        },
        "id": "JGtDKCmp4qm5qVtVRiXB"
    },
    {
        "event": "autotransit_section",
        "timestamp": "2025-08-22 22:46:49.000",
        "source": "frontend",
        "data": {
            "before_section_id": "83a6ef7c-fc87-4769-8a35-f3f80aaf5488",
            "after_section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4"
        },
        "id": "6jrx4mvcb4GElTClGMrY"
    },
    {
        "event": "create_new_section",
        "timestamp": "2025-08-22 22:46:49.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "section_data": {
                "summaryData": {
                    "low_structured": "• React component renders a stock price chart\n• Uses Recharts for visualization\n• Displays company name and ticker",
                    "low_unstructured": "This code defines a React component that displays a line chart of stock prices using the Recharts library.",
                    "title": "StockChart React Component for Rendering Stock Price Line Charts",
                    "medium_unstructured": "This React component, StockChart, takes in stock data and visualizes it as a line chart using the Recharts library. It displays the company name and ticker, and formats the data for charting. The chart includes axes, a legend, and a tooltip for better readability.",
                    "medium_structured": "• Defines a StockChart React component\n• Expects a data prop containing stock information\n  ◦ Extracts company name and ticker for display\n• Formats input data for Recharts\n• Renders a responsive line chart with axes, legend, and tooltip",
                    "high_unstructured": "The StockChart component is a functional React component that visualizes stock price data using the Recharts library. It first checks for valid input data and extracts the company name and ticker for display. The component maps the provided data to a format suitable for Recharts, specifically extracting the date and closing price for each data point. It then renders a responsive line chart with labeled axes, a legend, and a tooltip, and styles the chart with a specific stroke color and margin. The chart is wrapped in a container with a top margin and displays the company name and ticker above the chart.",
                    "high_structured": "• Implements a StockChart React component for displaying stock price trends\n• Validates input data before rendering\n  ◦ Returns null if data is missing or empty\n• Extracts and displays company name and ticker symbol\n• Prepares chart data by mapping each item to an object with date and closing price\n• Defines a helper function to format date strings (though not used in rendering)\n• Renders a responsive line chart using Recharts components\n  ◦ Includes X and Y axes, legend, and tooltip for interactivity\n  ◦ Plots the closing price as a monotone line with a custom stroke color and no dots\n  ◦ Sets chart margins and ensures 100% width and fixed height\n• Wraps chart in a styled div and displays a heading above the chart"
                },
                "editPromptValue": "",
                "title": "StockChart React Component for Rendering Stock Price Line Charts",
                "editPromptStructured": null,
                "selectedDetailLevel": "medium",
                "metadata": {
                    "filename": "StockChart.jsx",
                    "fullPath": "/project/workspace/frontend/src/StockChart.jsx",
                    "id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
                    "originalCode": "import React from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  ReferenceLine,\n} from \"recharts\";\n\nconst StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    const d = new Date(date);\n    return d.toLocaleString(\"en-US\", { month: \"short\" });\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;\n",
                    "offset": 0
                },
                "createdAt": 1755888409000,
                "lines": [
                    1,
                    52
                ],
                "summaryMappings": {
                    "low_structured": [
                        {
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                },
                                {
                                    "line": 36,
                                    "code": "<LineChart"
                                }
                            ],
                            "summaryComponent": "React component renders a stock price chart"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 2,
                                    "code": "import {"
                                },
                                {
                                    "line": 3,
                                    "code": "LineChart,"
                                },
                                {
                                    "line": 4,
                                    "code": "Line,"
                                },
                                {
                                    "line": 5,
                                    "code": "XAxis,"
                                },
                                {
                                    "line": 6,
                                    "code": "YAxis,"
                                },
                                {
                                    "line": 7,
                                    "code": "Tooltip,"
                                },
                                {
                                    "line": 8,
                                    "code": "Legend,"
                                },
                                {
                                    "line": 9,
                                    "code": "ResponsiveContainer,"
                                },
                                {
                                    "line": 10,
                                    "code": "ReferenceLine,"
                                },
                                {
                                    "line": 11,
                                    "code": "} from \"recharts\";"
                                }
                            ],
                            "summaryComponent": "Uses Recharts for visualization"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 16,
                                    "code": "const company = data.name;"
                                },
                                {
                                    "line": 17,
                                    "code": "const ticker = data.ticker;"
                                },
                                {
                                    "line": 32,
                                    "code": "<h3>"
                                },
                                {
                                    "line": 33,
                                    "code": "{company} ({ticker})"
                                }
                            ],
                            "summaryComponent": "Displays company name and ticker"
                        }
                    ],
                    "low_unstructured": [
                        {
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                }
                            ],
                            "summaryComponent": "This code defines a React component"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 36,
                                    "code": "<LineChart"
                                },
                                {
                                    "line": 44,
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                                }
                            ],
                            "summaryComponent": "that displays a line chart"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 27,
                                    "code": "price: item.close,"
                                },
                                {
                                    "line": 44,
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                                }
                            ],
                            "summaryComponent": "of stock prices"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 2,
                                    "code": "import {"
                                },
                                {
                                    "line": 11,
                                    "code": "} from \"recharts\";"
                                }
                            ],
                            "summaryComponent": "using the Recharts library"
                        }
                    ],
                    "medium_structured": [
                        {
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                }
                            ],
                            "summaryComponent": "Defines a StockChart React component"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                }
                            ],
                            "summaryComponent": "Expects a data prop containing stock information"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 16,
                                    "code": "const company = data.name;"
                                },
                                {
                                    "line": 17,
                                    "code": "const ticker = data.ticker;"
                                },
                                {
                                    "line": 33,
                                    "code": "{company} ({ticker})"
                                }
                            ],
                            "summaryComponent": "Extracts company name and ticker for display"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 25,
                                    "code": "const chartData = data.data.map((item) => ({"
                                },
                                {
                                    "line": 26,
                                    "code": "date: item.date,"
                                },
                                {
                                    "line": 27,
                                    "code": "price: item.close,"
                                }
                            ],
                            "summaryComponent": "Formats input data for Recharts"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 35,
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                                },
                                {
                                    "line": 36,
                                    "code": "<LineChart"
                                },
                                {
                                    "line": 40,
                                    "code": "<XAxis dataKey=\"date\" />"
                                },
                                {
                                    "line": 41,
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                                },
                                {
                                    "line": 42,
                                    "code": "<Tooltip />"
                                },
                                {
                                    "line": 43,
                                    "code": "<Legend />"
                                },
                                {
                                    "line": 44,
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                                }
                            ],
                            "summaryComponent": "Renders a responsive line chart with axes, legend, and tooltip"
                        }
                    ],
                    "medium_unstructured": [
                        {
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                }
                            ],
                            "summaryComponent": "This React component, StockChart,"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                }
                            ],
                            "summaryComponent": "takes in stock data"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 2,
                                    "code": "import {"
                                },
                                {
                                    "line": 3,
                                    "code": "LineChart,"
                                },
                                {
                                    "line": 4,
                                    "code": "Line,"
                                },
                                {
                                    "line": 9,
                                    "code": "ResponsiveContainer,"
                                },
                                {
                                    "line": 36,
                                    "code": "<LineChart"
                                },
                                {
                                    "line": 44,
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                                }
                            ],
                            "summaryComponent": "visualizes it as a line chart using the Recharts library"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 16,
                                    "code": "const company = data.name;"
                                },
                                {
                                    "line": 17,
                                    "code": "const ticker = data.ticker;"
                                },
                                {
                                    "line": 32,
                                    "code": "<h3>"
                                },
                                {
                                    "line": 33,
                                    "code": "{company} ({ticker})"
                                }
                            ],
                            "summaryComponent": "It displays the company name and ticker"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 25,
                                    "code": "const chartData = data.data.map((item) => ({"
                                },
                                {
                                    "line": 26,
                                    "code": "date: item.date,"
                                },
                                {
                                    "line": 27,
                                    "code": "price: item.close,"
                                }
                            ],
                            "summaryComponent": "formats the data for charting"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 40,
                                    "code": "<XAxis dataKey=\"date\" />"
                                },
                                {
                                    "line": 41,
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                                }
                            ],
                            "summaryComponent": "The chart includes axes"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 43,
                                    "code": "<Legend />"
                                }
                            ],
                            "summaryComponent": "a legend"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 42,
                                    "code": "<Tooltip />"
                                }
                            ],
                            "summaryComponent": "and a tooltip for better readability"
                        }
                    ],
                    "high_unstructured": [
                        {
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                }
                            ],
                            "summaryComponent": "The StockChart component is a functional React component"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 2,
                                    "code": "import {"
                                },
                                {
                                    "line": 3,
                                    "code": "LineChart,"
                                },
                                {
                                    "line": 4,
                                    "code": "Line,"
                                },
                                {
                                    "line": 5,
                                    "code": "XAxis,"
                                },
                                {
                                    "line": 6,
                                    "code": "YAxis,"
                                },
                                {
                                    "line": 7,
                                    "code": "Tooltip,"
                                },
                                {
                                    "line": 8,
                                    "code": "Legend,"
                                },
                                {
                                    "line": 9,
                                    "code": "ResponsiveContainer,"
                                },
                                {
                                    "line": 10,
                                    "code": "ReferenceLine,"
                                },
                                {
                                    "line": 11,
                                    "code": "} from \"recharts\";"
                                }
                            ],
                            "summaryComponent": "visualizes stock price data using the Recharts library"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 14,
                                    "code": "if (!data || !data.data || !data.data.length) return null;"
                                }
                            ],
                            "summaryComponent": "It first checks for valid input data"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 16,
                                    "code": "const company = data.name;"
                                },
                                {
                                    "line": 17,
                                    "code": "const ticker = data.ticker;"
                                }
                            ],
                            "summaryComponent": "extracts the company name and ticker for display"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 25,
                                    "code": "const chartData = data.data.map((item) => ({"
                                }
                            ],
                            "summaryComponent": "maps the provided data to a format suitable for Recharts"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 26,
                                    "code": "date: item.date,"
                                },
                                {
                                    "line": 27,
                                    "code": "price: item.close,"
                                }
                            ],
                            "summaryComponent": "specifically extracting the date and closing price for each data point"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 35,
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                                },
                                {
                                    "line": 36,
                                    "code": "<LineChart"
                                }
                            ],
                            "summaryComponent": "renders a responsive line chart"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 40,
                                    "code": "<XAxis dataKey=\"date\" />"
                                },
                                {
                                    "line": 41,
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                                },
                                {
                                    "line": 42,
                                    "code": "<Tooltip />"
                                },
                                {
                                    "line": 43,
                                    "code": "<Legend />"
                                }
                            ],
                            "summaryComponent": "with labeled axes, a legend, and a tooltip"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 38,
                                    "code": "margin={{ top: 10, right: 30, left: 0, bottom: 0 }}"
                                },
                                {
                                    "line": 44,
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                                }
                            ],
                            "summaryComponent": "styles the chart with a specific stroke color and margin"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 31,
                                    "code": "<div style={{ marginTop: \"2rem\" }}>"
                                },
                                {
                                    "line": 32,
                                    "code": "<h3>"
                                },
                                {
                                    "line": 33,
                                    "code": "{company} ({ticker})"
                                }
                            ],
                            "summaryComponent": "The chart is wrapped in a container with a top margin and displays the company name and ticker above the chart"
                        }
                    ],
                    "high_structured": [
                        {
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                },
                                {
                                    "line": 51,
                                    "code": "export default StockChart;"
                                }
                            ],
                            "summaryComponent": "Implements a StockChart React component for displaying stock price trends"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 14,
                                    "code": "if (!data || !data.data || !data.data.length) return null;"
                                }
                            ],
                            "summaryComponent": "Validates input data before rendering"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 14,
                                    "code": "if (!data || !data.data || !data.data.length) return null;"
                                }
                            ],
                            "summaryComponent": "Returns null if data is missing or empty"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 16,
                                    "code": "const company = data.name;"
                                },
                                {
                                    "line": 17,
                                    "code": "const ticker = data.ticker;"
                                },
                                {
                                    "line": 33,
                                    "code": "{company} ({ticker})"
                                }
                            ],
                            "summaryComponent": "Extracts and displays company name and ticker symbol"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 25,
                                    "code": "const chartData = data.data.map((item) => ({"
                                },
                                {
                                    "line": 26,
                                    "code": "date: item.date,"
                                },
                                {
                                    "line": 27,
                                    "code": "price: item.close,"
                                }
                            ],
                            "summaryComponent": "Prepares chart data by mapping each item to an object with date and closing price"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 19,
                                    "code": "const formatDateString = (date) => {"
                                },
                                {
                                    "line": 20,
                                    "code": "const d = new Date(date);"
                                },
                                {
                                    "line": 21,
                                    "code": "return d.toLocaleString(\"en-US\", { month: \"short\" });"
                                }
                            ],
                            "summaryComponent": "Defines a helper function to format date strings (though not used in rendering)"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 35,
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                                },
                                {
                                    "line": 36,
                                    "code": "<LineChart"
                                }
                            ],
                            "summaryComponent": "Renders a responsive line chart using Recharts components"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 40,
                                    "code": "<XAxis dataKey=\"date\" />"
                                },
                                {
                                    "line": 41,
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                                },
                                {
                                    "line": 42,
                                    "code": "<Tooltip />"
                                },
                                {
                                    "line": 43,
                                    "code": "<Legend />"
                                }
                            ],
                            "summaryComponent": "Includes X and Y axes, legend, and tooltip for interactivity"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 44,
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                                }
                            ],
                            "summaryComponent": "Plots the closing price as a monotone line with a custom stroke color and no dots"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 35,
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                                },
                                {
                                    "line": 38,
                                    "code": "margin={{ top: 10, right: 30, left: 0, bottom: 0 }}"
                                }
                            ],
                            "summaryComponent": "Sets chart margins and ensures 100% width and fixed height"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 31,
                                    "code": "<div style={{ marginTop: \"2rem\" }}>"
                                },
                                {
                                    "line": 32,
                                    "code": "<h3>"
                                }
                            ],
                            "summaryComponent": "Wraps chart in a styled div and displays a heading above the chart"
                        }
                    ]
                },
                "editPromptDetailLevel": null,
                "selectedStructured": "unstructured"
            }
        },
        "id": "fMoOkDCtrE1ZFRnaG7QA"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-22 22:46:49.000",
        "source": "backend",
        "data": {
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        }
                    ],
                    "summaryComponent": "The StockChart component is a functional React component"
                },
                {
                    "codeSegments": [
                        {
                            "line": 2,
                            "code": "import {"
                        },
                        {
                            "line": 3,
                            "code": "LineChart,"
                        },
                        {
                            "line": 4,
                            "code": "Line,"
                        },
                        {
                            "line": 5,
                            "code": "XAxis,"
                        },
                        {
                            "line": 6,
                            "code": "YAxis,"
                        },
                        {
                            "line": 7,
                            "code": "Tooltip,"
                        },
                        {
                            "line": 8,
                            "code": "Legend,"
                        },
                        {
                            "line": 9,
                            "code": "ResponsiveContainer,"
                        },
                        {
                            "line": 10,
                            "code": "ReferenceLine,"
                        },
                        {
                            "line": 11,
                            "code": "} from \"recharts\";"
                        }
                    ],
                    "summaryComponent": "visualizes stock price data using the Recharts library"
                },
                {
                    "codeSegments": [
                        {
                            "line": 14,
                            "code": "if (!data || !data.data || !data.data.length) return null;"
                        }
                    ],
                    "summaryComponent": "It first checks for valid input data"
                },
                {
                    "codeSegments": [
                        {
                            "line": 16,
                            "code": "const company = data.name;"
                        },
                        {
                            "line": 17,
                            "code": "const ticker = data.ticker;"
                        }
                    ],
                    "summaryComponent": "extracts the company name and ticker for display"
                },
                {
                    "codeSegments": [
                        {
                            "line": 25,
                            "code": "const chartData = data.data.map((item) => ({"
                        }
                    ],
                    "summaryComponent": "maps the provided data to a format suitable for Recharts"
                },
                {
                    "codeSegments": [
                        {
                            "line": 26,
                            "code": "date: item.date,"
                        },
                        {
                            "line": 27,
                            "code": "price: item.close,"
                        }
                    ],
                    "summaryComponent": "specifically extracting the date and closing price for each data point"
                },
                {
                    "codeSegments": [
                        {
                            "line": 35,
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                        },
                        {
                            "line": 36,
                            "code": "<LineChart"
                        }
                    ],
                    "summaryComponent": "renders a responsive line chart"
                },
                {
                    "codeSegments": [
                        {
                            "line": 40,
                            "code": "<XAxis dataKey=\"date\" />"
                        },
                        {
                            "line": 41,
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                        },
                        {
                            "line": 42,
                            "code": "<Tooltip />"
                        },
                        {
                            "line": 43,
                            "code": "<Legend />"
                        }
                    ],
                    "summaryComponent": "with labeled axes, a legend, and a tooltip"
                },
                {
                    "codeSegments": [
                        {
                            "line": 38,
                            "code": "margin={{ top: 10, right: 30, left: 0, bottom: 0 }}"
                        },
                        {
                            "line": 44,
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                        }
                    ],
                    "summaryComponent": "styles the chart with a specific stroke color and margin"
                },
                {
                    "codeSegments": [
                        {
                            "line": 31,
                            "code": "<div style={{ marginTop: \"2rem\" }}>"
                        },
                        {
                            "line": 32,
                            "code": "<h3>"
                        },
                        {
                            "line": 33,
                            "code": "{company} ({ticker})"
                        }
                    ],
                    "summaryComponent": "The chart is wrapped in a container with a top margin and displays the company name and ticker above the chart"
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     const d = new Date(date);\n21:     return d.toLocaleString(\"en-US\", { month: \"short\" });\n22:   };\n23: \n24:   // Combine labels and values into an array of objects for Recharts\n25:   const chartData = data.data.map((item) => ({\n26:     date: item.date,\n27:     price: item.close,\n28:   }));\n29: \n30:   return (\n31:     <div style={{ marginTop: \"2rem\" }}>\n32:       <h3>\n33:         {company} ({ticker})\n34:       </h3>\n35:       <ResponsiveContainer width=\"100%\" height={300}>\n36:         <LineChart\n37:           data={chartData}\n38:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n39:         >\n40:           <XAxis dataKey=\"date\" />\n41:           <YAxis domain={[\"auto\", \"auto\"]} />\n42:           <Tooltip />\n43:           <Legend />\n44:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n45:         </LineChart>\n46:       </ResponsiveContainer>\n47:     </div>\n48:   );\n49: };\n50: \n51: export default StockChart;\n52: ",
            "summary": "The StockChart component is a functional React component that visualizes stock price data using the Recharts library. It first checks for valid input data and extracts the company name and ticker for display. The component maps the provided data to a format suitable for Recharts, specifically extracting the date and closing price for each data point. It then renders a responsive line chart with labeled axes, a legend, and a tooltip, and styles the chart with a specific stroke color and margin. The chart is wrapped in a container with a top margin and displays the company name and ticker above the chart."
        },
        "id": "s5FyXsRjIeA9HSwlXv9f"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:46:51.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 0,
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "2pb0jYjvlPe3kSuY4kh8"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:46:51.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "Fl6eNlnp75F4DGr3aVk1"
    },
    {
        "event": "change_summary_level",
        "timestamp": "2025-08-22 22:46:51.000",
        "source": "frontend",
        "data": {
            "before_detail_level": "medium",
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "after_detail_level": "high",
            "before_structured": "unstructured",
            "after_structured": "unstructured"
        },
        "id": "YJ4zmEluEEyKISOlnjme"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:46:51.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "oeFU731qDc6m7s7ZbcdZ"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:46:51.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "qqFIreGcML5KJuNdFbeA"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:46:51.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 0,
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "sAJV9gaSEsIriwx1cSWs"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:46:51.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 2,
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "sOZFhYjwM67W1M1YZKAM"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:46:52.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 0,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "EmkLY7BgHsCnCQQOd714"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:46:52.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "N5LFEOVfT5cLmzBVqAaR"
    },
    {
        "event": "change_summary_level",
        "timestamp": "2025-08-22 22:46:53.000",
        "source": "frontend",
        "data": {
            "before_detail_level": "high",
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "after_detail_level": "high",
            "before_structured": "unstructured",
            "after_structured": "structured"
        },
        "id": "08Wqmbl5M3Twj7iIohRd"
    },
    {
        "event": "change_summary_level",
        "timestamp": "2025-08-22 22:46:55.000",
        "source": "frontend",
        "data": {
            "before_detail_level": "high",
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "after_detail_level": "high",
            "before_structured": "structured",
            "after_structured": "unstructured"
        },
        "id": "oQJPqCAhpzzuVv58JKoJ"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:46:57.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 0,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "wtPXAU3yLVwBakAye2AS"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:46:58.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "UiPiT3Xx5nzuzrcanOqs"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:46:59.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 0,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "iWoN19yM09go7RPHszrF"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:47:00.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 1,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "6qPIy0PxiiyyiSH2iRtB"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:47:00.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "JL47Lx7v9fxGeP60WEgB"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:47:00.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 0,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "PGe7gA0LMNoC4XtiRBtI"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:47:00.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 1,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "m5egF6VstLShDygcW59t"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:47:00.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "s1DNmL5OvBq9s4EsJeVu"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:47:00.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "tATEvB6w8cShXPGk2TKK"
    },
    {
        "event": "change_summary_level",
        "timestamp": "2025-08-22 22:47:01.000",
        "source": "frontend",
        "data": {
            "before_detail_level": "high",
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "after_detail_level": "high",
            "before_structured": "unstructured",
            "after_structured": "structured"
        },
        "id": "3Hvpopt4ApGkLAS5gDHL"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:47:01.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "AqIAjLmQVEzTIeTk1WHu"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:47:01.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 0,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "IbgFganccJ9dYqfVC7en"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:47:01.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "gM6hSXLLztHICX64n46I"
    },
    {
        "event": "change_summary_level",
        "timestamp": "2025-08-22 22:47:02.000",
        "source": "frontend",
        "data": {
            "before_detail_level": "high",
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "after_detail_level": "medium",
            "before_structured": "structured",
            "after_structured": "structured"
        },
        "id": "5YwbyQt0jF8Wsvkc4Xjy"
    },
    {
        "event": "change_summary_level",
        "timestamp": "2025-08-22 22:47:03.000",
        "source": "frontend",
        "data": {
            "before_detail_level": "medium",
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "after_detail_level": "low",
            "before_structured": "structured",
            "after_structured": "structured"
        },
        "id": "B969uNztAn2TVXJXcWbs"
    },
    {
        "event": "change_summary_level",
        "timestamp": "2025-08-22 22:47:04.000",
        "source": "frontend",
        "data": {
            "before_detail_level": "low",
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "after_detail_level": "medium",
            "before_structured": "structured",
            "after_structured": "structured"
        },
        "id": "GOzJ78ckahld9dx4aYPw"
    },
    {
        "event": "change_summary_level",
        "timestamp": "2025-08-22 22:47:04.000",
        "source": "frontend",
        "data": {
            "before_detail_level": "medium",
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "after_detail_level": "high",
            "before_structured": "structured",
            "after_structured": "structured"
        },
        "id": "lVvHdWD3UiKbcMAcMT59"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:47:05.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "Bje376idj3un6Jl0652j"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:47:05.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 1,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "Msz4EJa78dLW5MKIWKbw"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:47:05.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 0,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "dkQrO1GwyG5vNgyQKrCl"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:47:06.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "VRSvJgtsL0IhYeJeUEc6"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:47:06.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 2,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "bhsdSbPkiPuywVnC3txK"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:47:07.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 4,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "3F2D0Xya8gZShnnx2tXR"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:47:07.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "ARO5FlUCSX526Szp4UQv"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:47:07.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 5,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "bpBVbqdAzGC78eJ5ha7a"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:47:07.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "eRa4FOIXezJ4fQOPv90l"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:47:07.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "ol41gF4U3qZTwCCrD0BN"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:47:07.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 3,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "rHTUkIAsCh2THoSnFtzq"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:47:08.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 6,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "ZObEAdhAmoTH6DGPAGmi"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:47:08.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "n57i14Tjgv3TjalEYh6X"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:47:09.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "2UQDhgAXfgXEtkmVJP9w"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:47:09.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 7,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "NArfejajRWidSf3g9YUm"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:47:10.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "ujYS0uD03LcBRzD7oGs5"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:47:11.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 7,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "2CSCbNVhW1AnYYEF0GbH"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:47:11.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 6,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "Ex49uq6YXvLGpH8Pt5uJ"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:47:11.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "G4De4NB91nGWO35Aiuzi"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:47:11.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "L8OuUagPK9KmfK5etHJC"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:47:11.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 6,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "LbMRVTpQYvqW7i6VtgPj"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:47:11.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 5,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "Lbprs1Js9KQUwDip9SHa"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:47:11.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "WYs6uqG8pS1nPaewr2x8"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:47:12.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "B8qABN3oBMV8bYzHpubu"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:47:12.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 8,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "adT2GUE5V66wwNfEhncT"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:47:13.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "NHgKIXPxptjTG3e01owq"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:47:13.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 9,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "rsaYYwmEE60a8nkRSYtn"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:47:14.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 10,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "RARfpWyecj4hEltiFVwR"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:47:14.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "srT57QWk14onCnecRl9G"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:47:15.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "oUwHZNzUKsHL7kgp4sSb"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:47:15.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 9,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "vJWxAf4r4eUvIwleWS08"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:47:16.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 8,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "4UuuhMVsGUcKCqqoO27A"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:47:16.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 7,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "4elB6iNcmoXs4ygqnPaa"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:47:16.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "8f1EEZ38fqMgwHjtY6AJ"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:47:16.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "BJG84sf7Ha4sNn9Gqq1Q"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:47:16.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 6,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "Bv2bGaKuiRO4zTm6H0He"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:47:16.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 4,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "CfRQyyifcMPusOxmHBKm"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:47:16.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "D6se0V8bzNX8bugwxQGw"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:47:16.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 2,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "KwZORIMvgF2QuY29q1cW"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:47:16.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "MQC9A6qaWiFNMB7uSr98"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:47:16.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 0,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "QuZo4ivwvVj2SljTrQoz"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:47:16.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "T4DfyhKhAo87tCKuSJvf"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:47:16.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "XGFCdRwboZ1KhdNS4iA9"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:47:16.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 5,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "XJTEQYVlgTLbUvwXlzEO"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:47:16.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 3,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "hOSfqxXCDjXS9k0LBuMj"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:47:16.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "jmtY0X2mNHXHPbFkZ3oI"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:47:16.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "kaqZak0GemerW6YM8dg0"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:47:16.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 1,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "lO03vDHeiLr6bRFuJ601"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:47:16.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "lucTAeIigzZAycPnRGWA"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:47:19.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 1,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "RTRYRkMp2YLos0hFbsJ1"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:47:19.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "dVCbYTTT9cW2iC65YbfF"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:47:20.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "JSgp6xFspW0ucpyiRzOJ"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:47:20.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 2,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "urUcJSbwT1cZiHEmltRd"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:47:21.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "9UT0aexfPcgDK4EmzM1M"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:47:21.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 4,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "N8HITT5XkzFGc5KDOqsu"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:47:21.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 3,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "a9XnL6Y65Kbq57hpdJhd"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:47:21.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "bWtNO0k3vp4pbkvRBPOA"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:47:21.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "dEPaJgyzRggb8IEANys4"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:47:23.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 0,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "FjDai2AvikJp4QHHdziU"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:47:23.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "VN6fep0y9ONylrj9EyuA"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:47:23.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 0,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "fZezWLm0jaZkuuXfd7IH"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:47:24.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 1,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "FRsGUayr5vrxHvI7F7Ex"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:47:24.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "VtrKt72UNVfOSeWYDbVB"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:47:26.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "K4pvcKRHNqZ5ZbB08AbS"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:47:26.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 3,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "KkvTfDuV7D2fM1oK0YuN"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:47:26.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "f7AUcE9VXaAwPSF4Llak"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:47:26.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 2,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "o72nQkhfTLa2r77GPZni"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:47:27.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 2,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "1N40EmWDsgKVdQwM0AcT"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:47:27.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "2nJW2acMerIYfvRUc9b0"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:47:27.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "Xlo1UsGMcSJJ0VXcVoOE"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:47:27.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 1,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "YKCEGoYmCdAU9mlISZP0"
    },
    {
        "event": "change_summary_level",
        "timestamp": "2025-08-22 22:47:28.000",
        "source": "frontend",
        "data": {
            "before_detail_level": "high",
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "after_detail_level": "high",
            "before_structured": "structured",
            "after_structured": "unstructured"
        },
        "id": "BjhtYyb0I3IlZJLTygP6"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:47:28.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 0,
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "JR05QyfcXU6j7ND3O7cE"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:47:28.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "NgmMfbMtFNzimUgrLbeI"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:47:28.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "structured"
        },
        "id": "fgwWR4UpcE7jrWPlKmMk"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:47:29.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 0,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "G4vwrRotwjQwQzmLmXRN"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:47:29.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "Yhpvc3DGnn8HzByb8cuo"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:47:29.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 0,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "p644SU7jBpDK2ofegXkn"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:47:29.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "rasqkbs1KgvuS58iCUg7"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:47:29.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 1,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "zYBstES0drZrGZZKFBIp"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:47:31.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "3ehXg8k57QRJAYSkY9XA"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:47:31.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 1,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "IDKNalewPJSiCxJRNDYj"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:47:34.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 2,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "2fHatlyYFpFAT9CpFRZd"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:47:34.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "hTN6gjbjnyrGowbZnqm7"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:47:34.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 3,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "lEU554cYcPWrR2dVG4ut"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:47:34.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "otwEcEGZVnASNLaPkAci"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:47:36.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "06Mq4jdLFRHyZwIyQ5Hb"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:47:36.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "0UJ2dWFk1djShu3U0rj2"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:47:36.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 2,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "2EJUgIchqJoBtpFpOKB8"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:47:36.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 3,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "33MNXR93cLuVFRJcgQRA"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:47:36.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 1,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "IuNRRd9ujZixnPezNPOm"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:47:36.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 4,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "RFfSLNxGodEVxgWKqmo1"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:47:36.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 2,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "cq1HYHkAdim5WOm4FAMj"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:47:36.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "gDXlIp2PdvEh9LKvpuV9"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:47:36.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "jm4Yiyxm45ZAAb9gGfQV"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:47:36.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "lUxc5R8tD52hHUrNWvip"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:47:36.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 3,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "oC0SZwLWeJ0D0tvvxa7H"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:47:36.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 4,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "oSifM8ydNapwXpyogFiU"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:47:36.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "qADAxl9h6rJYeLwTlltN"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:47:36.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "zTld40CgMuGe90zDhUEq"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:47:37.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "0DDqHDhgmWaFOKFiLnvH"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:47:37.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 2,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "6aA09tSJvNP8XWQewSIK"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:47:37.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "D6qvj3c6Hr9mjnhPQNvK"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:47:37.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "bMAbogHynTvtbDJI3OLn"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:47:37.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 2,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "bw2lCMz5RGszlOszSEkD"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:47:37.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 0,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "fxaR1WwY8xO3wWB6TW3d"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:47:37.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "n4lX7h4GJyeMYQB7MTtS"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:47:37.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 1,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "nUT2RYJa4nQ5OkabDfo9"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:47:37.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 3,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "wREr8EgdrE72PJ8a36mh"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:47:37.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "yA4fRvvvQS0PnAnEewKt"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:47:38.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 2,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "1rtMh2GWg5jeK9XNbUdc"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:47:38.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 3,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "TdHKsJgp9iJm6Fr10JXV"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:47:38.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "YPbmUTo0813trraBNA3b"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:47:38.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "di7DabUggo3hLLvXVbi5"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:47:39.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "0PnQ10hCSlgWwb9u68SR"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:47:39.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "6Gf6e5sT3tGhcCq8MTwc"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:47:39.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 0,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "PLkAwaL9zrSaQiLv56Nu"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:47:39.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "TLKTCKT8zmMo362zntbk"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:47:39.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 3,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "VqcTHmyoYaDkoCU81xDB"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:47:39.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "ZoqnV0uN4MxTRbffCLBi"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:47:39.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 1,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "yHlqXZZKHlOE7Qurbcxj"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:47:40.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 3,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "vCWJgi5eXFK4dtepSGzB"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:47:41.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 2,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "VzMHf5oJTX8iAM3U3qNr"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:47:41.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "egOkO4b4oL7sXX7eLviV"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:47:41.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "wxPHctX7snzbHD91B84E"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:47:42.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "JAPvudyegbEu8b03YYI5"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:47:42.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 0,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "M8ZiaL3xt4Fno6b0svRa"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:47:42.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 0,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "pY35XOkgdmVqDNggMbhT"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:47:43.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "9u8Nlcx5zrP5dhd9CYSS"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:47:43.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 1,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "X0pdwh8Jo5aSZc6HiG7k"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:47:43.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "YGGEHsdsHeQaysNLHuBa"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:47:43.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "aHlWbXxGxgI1e9DRyQCR"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:47:43.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 2,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "b7yZe0ZIUbklhuq2N1Rc"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:47:43.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 0,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "mxrjjtpk4hpvYzPpJet9"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:47:44.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 3,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "7x2C2NXpXaXVeZl4l0IN"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:47:44.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 3,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "EH8p55AqL6UuSqz0kdA8"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:47:44.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "Kpc30TM6eeQLu3WZiJF0"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:47:44.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 4,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "MXCk8Y28ZTT3tBKxbrH6"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:47:44.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "STiGJ6jyadDVQHkZQk2u"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:47:44.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "hb97xRbRVQ8Rtcv7168N"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:47:46.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 4,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "bOFlU613z9cxp9xPFPTa"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:47:46.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "o6vzYrI0lm7W95lA17KG"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:47:48.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "4TUtg2yrI3KRWy8OMmLu"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:47:48.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 5,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "fXVjtsHohVi9kbkLVMI8"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:47:49.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "XP4UrepCHxanoNKkNp3N"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:47:49.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 6,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "z9vJZ58j9cwMiKwM0ZsD"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:47:50.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "M3GuibxVZZxFKs4tHkXK"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:47:50.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "ihy00KgEGH1bedd4ir2E"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:47:50.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 9,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "j2nxU3MI4oAS7goD1stE"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:47:50.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "ofyOOe2EGcB0EjpwPrVC"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:47:50.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 8,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "olXeTFLsO7EERxpj9UdX"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:47:52.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "2EqyE6DlWuSg9JRY8gYE"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:47:52.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 9,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "7DOsLhSNHXABgZ5dBW0D"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:47:52.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "97leVHxKQ0VH8mQp8bnb"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:47:52.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 2,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "9Ul4DGx4KZiJbvV39suk"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:47:52.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "AMrA9foHp5xNrNkrMUPQ"
    },
    {
        "event": "click_edit_in_prompt",
        "timestamp": "2025-08-22 22:47:52.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured": "unstructured",
            "summary": "The StockChart component is a functional React component that visualizes stock price data using the Recharts library. It first checks for valid input data and extracts the company name and ticker for display. The component maps the provided data to a format suitable for Recharts, specifically extracting the date and closing price for each data point. It then renders a responsive line chart with labeled axes, a legend, and a tooltip, and styles the chart with a specific stroke color and margin. The chart is wrapped in a container with a top margin and displays the company name and ticker above the chart."
        },
        "id": "IDEe8LPsEchwtqlCUPLh"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:47:52.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "NfQx5TnldjNTUO8EN8mj"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:47:52.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 4,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "cPqblpHTd3ZEbDtiJmP9"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:47:52.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "cXxEQ4qMb67yoZLwUACG"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:47:52.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 3,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "iuDmdlTTb49uBa9J3YuW"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:47:52.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 8,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "js0DmNzFZQNoMSoE9zrq"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:48:28.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 9,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "8JAIzi1UBkd7LrwlsWM5"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:48:28.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "csSMIOXAWcTAFy9gByfm"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:48:31.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "A6Nj2JmZMKoBG6I1Rq8A"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:48:31.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 4,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "ByOSG8fW6Sr5wM0PpkQi"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:48:31.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "DYeV1UFn8vfMNCyHQUGD"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:48:31.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 5,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "I76wVHkKJm1kKrOwBmQF"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:48:31.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "P0kr0TdhnDQgc8vZ4KpC"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:48:31.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 7,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "Uj08E7YirRbSwyJcZWxk"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:48:31.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "i0WJ0CNg723L3f0YKGu1"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:48:31.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "p3cw2NczhgMd5WlHwV2Q"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:48:31.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 9,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "pDm9ix2aaXWwCoMtknIU"
    },
    {
        "event": "apply_instruction_summary",
        "timestamp": "2025-08-22 22:48:31.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "instruction": "call the formatDateString function to modify the x-axis shows",
            "original_summary": "The StockChart component is a functional React component that visualizes stock price data using the Recharts library. It first checks for valid input data and extracts the company name and ticker for display. The component maps the provided data to a format suitable for Recharts, specifically extracting the date and closing price for each data point. It then renders a responsive line chart with labeled axes, a legend, and a tooltip, and styles the chart with a specific stroke color and margin. The chart is wrapped in a container with a top margin and displays the company name and ticker above the chart.",
            "structured": "unstructured"
        },
        "id": "rrxjKYmi0eKNnx2zAWwU"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:48:31.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "tUUKyTemtPt0SE2jRcM1"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:48:31.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 7,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "u9yrLb3tKb8E6LpnCs3v"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:48:31.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "mapping_index": 8,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "un8luzzLrI9aYLS4p4Qy"
    },
    {
        "event": "apply_instruction_summary",
        "timestamp": "2025-08-22 22:48:32.000",
        "source": "backend",
        "data": {
            "original_code": "import React from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  ReferenceLine,\n} from \"recharts\";\n\nconst StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    const d = new Date(date);\n    return d.toLocaleString(\"en-US\", { month: \"short\" });\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;\n",
            "original_summary": "The StockChart component is a functional React component that visualizes stock price data using the Recharts library. It first checks for valid input data and extracts the company name and ticker for display. The component maps the provided data to a format suitable for Recharts, specifically extracting the date and closing price for each data point. It then renders a responsive line chart with labeled axes, a legend, and a tooltip, and styles the chart with a specific stroke color and margin. The chart is wrapped in a container with a top margin and displays the company name and ticker above the chart.",
            "updated_summary": "The StockChart component is a functional React component that visualizes stock price data using the Recharts library. It first checks for valid input data and extracts the company name and ticker for display. The component maps the provided data to a format suitable for Recharts, specifically extracting the date and closing price for each data point. The x-axis labels are modified by calling the formatDateString function, ensuring that the dates are formatted before being displayed on the x-axis. It then renders a responsive line chart with labeled axes, a legend, and a tooltip, and styles the chart with a specific stroke color and margin. The chart is wrapped in a container with a top margin and displays the company name and ticker above the chart.",
            "instruction": "call the formatDateString function to modify the x-axis shows"
        },
        "id": "DTSZi9Vnm115sympL1Xh"
    },
    {
        "event": "commit_modified_summary",
        "timestamp": "2025-08-22 22:48:41.000",
        "source": "frontend",
        "data": {
            "section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "detail_level": "high",
            "original_summary": "The StockChart component is a functional React component that visualizes stock price data using the Recharts library. It first checks for valid input data and extracts the company name and ticker for display. The component maps the provided data to a format suitable for Recharts, specifically extracting the date and closing price for each data point. It then renders a responsive line chart with labeled axes, a legend, and a tooltip, and styles the chart with a specific stroke color and margin. The chart is wrapped in a container with a top margin and displays the company name and ticker above the chart.",
            "edited_summary": "The StockChart component is a functional React component that visualizes stock price data using the Recharts library. It first checks for valid input data and extracts the company name and ticker for display. The component maps the provided data to a format suitable for Recharts, specifically extracting the date and closing price for each data point. The x-axis labels are modified by calling the formatDateString function, ensuring that the dates are formatted before being displayed on the x-axis. It then renders a responsive line chart with labeled axes, a legend, and a tooltip, and styles the chart with a specific stroke color and margin. The chart is wrapped in a container with a top margin and displays the company name and ticker above the chart.",
            "structured": "unstructured"
        },
        "id": "H4aQSzodhKgOJgvQZk77"
    },
    {
        "event": "modify_summary_mediation",
        "timestamp": "2025-08-22 22:48:44.000",
        "source": "backend",
        "data": {
            "detail_level": "high",
            "original_code": "import React from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  ReferenceLine,\n} from \"recharts\";\n\nconst StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    const d = new Date(date);\n    return d.toLocaleString(\"en-US\", { month: \"short\" });\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;\n",
            "original_summary": "The StockChart component is a functional React component that visualizes stock price data using the Recharts library. It first checks for valid input data and extracts the company name and ticker for display. The component maps the provided data to a format suitable for Recharts, specifically extracting the date and closing price for each data point. It then renders a responsive line chart with labeled axes, a legend, and a tooltip, and styles the chart with a specific stroke color and margin. The chart is wrapped in a container with a top margin and displays the company name and ticker above the chart.",
            "structured_type": "unstructured",
            "edited_summary": "The StockChart component is a functional React component that visualizes stock price data using the Recharts library. It first checks for valid input data and extracts the company name and ticker for display. The component maps the provided data to a format suitable for Recharts, specifically extracting the date and closing price for each data point. The x-axis labels are modified by calling the formatDateString function, ensuring that the dates are formatted before being displayed on the x-axis. It then renders a responsive line chart with labeled axes, a legend, and a tooltip, and styles the chart with a specific stroke color and margin. The chart is wrapped in a container with a top margin and displays the company name and ticker above the chart.",
            "updated_code": "import React from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  ReferenceLine,\n} from \"recharts\";\n\nconst StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    const d = new Date(date);\n    return d.toLocaleString(\"en-US\", { month: \"short\" });\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatDateString} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;"
        },
        "id": "VJR4OjM558M0Jb4Z2PIk"
    },
    {
        "event": "summarize_modified_code",
        "timestamp": "2025-08-22 22:48:49.000",
        "source": "backend",
        "data": {
            "old_summary": {
                "low_structured": "• React component renders a stock price chart\n• Uses Recharts for visualization\n• Displays company name and ticker",
                "low_unstructured": "This code defines a React component that displays a line chart of stock prices using the Recharts library.",
                "title": "StockChart React Component for Rendering Stock Price Line Charts",
                "medium_unstructured": "This React component, StockChart, takes in stock data and visualizes it as a line chart using the Recharts library. It displays the company name and ticker, and formats the data for charting. The chart includes axes, a legend, and a tooltip for better readability.",
                "medium_structured": "• Defines a StockChart React component\n• Expects a data prop containing stock information\n  ◦ Extracts company name and ticker for display\n• Formats input data for Recharts\n• Renders a responsive line chart with axes, legend, and tooltip",
                "high_unstructured": "The StockChart component is a functional React component that visualizes stock price data using the Recharts library. It first checks for valid input data and extracts the company name and ticker for display. The component maps the provided data to a format suitable for Recharts, specifically extracting the date and closing price for each data point. It then renders a responsive line chart with labeled axes, a legend, and a tooltip, and styles the chart with a specific stroke color and margin. The chart is wrapped in a container with a top margin and displays the company name and ticker above the chart.",
                "high_structured": "• Implements a StockChart React component for displaying stock price trends\n• Validates input data before rendering\n  ◦ Returns null if data is missing or empty\n• Extracts and displays company name and ticker symbol\n• Prepares chart data by mapping each item to an object with date and closing price\n• Defines a helper function to format date strings (though not used in rendering)\n• Renders a responsive line chart using Recharts components\n  ◦ Includes X and Y axes, legend, and tooltip for interactivity\n  ◦ Plots the closing price as a monotone line with a custom stroke color and no dots\n  ◦ Sets chart margins and ensures 100% width and fixed height\n• Wraps chart in a styled div and displays a heading above the chart"
            },
            "original_code": "import React from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  ReferenceLine,\n} from \"recharts\";\n\nconst StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    const d = new Date(date);\n    return d.toLocaleString(\"en-US\", { month: \"short\" });\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatDateString} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;",
            "new_code": "import React from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  ReferenceLine,\n} from \"recharts\";\n\nconst StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    const d = new Date(date);\n    return d.toLocaleString(\"en-US\", { month: \"short\" });\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatDateString} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;",
            "new_summary": {
                "low_structured": "• React component renders a stock price chart\n• Uses Recharts for visualization\n• Displays company name and ticker\n• X-axis ticks are now formatted to show abbreviated month names",
                "low_unstructured": "This code defines a React component that displays a line chart of stock prices using the Recharts library, now formatting the X-axis ticks to show abbreviated month names.",
                "title": "StockChart React Component with Formatted X-Axis Ticks for Stock Price Line Charts",
                "medium_unstructured": "This React component, StockChart, takes in stock data and visualizes it as a line chart using the Recharts library. It displays the company name and ticker, and formats the data for charting. The chart includes axes, a legend, and a tooltip for better readability, and now formats the X-axis ticks to display abbreviated month names using a custom formatter.",
                "medium_structured": "• Defines a StockChart React component\n• Expects a data prop containing stock information\n  ◦ Extracts company name and ticker for display\n• Formats input data for Recharts\n• Renders a responsive line chart with axes, legend, and tooltip\n• X-axis now uses a tick formatter to display abbreviated month names",
                "high_unstructured": "The StockChart component is a functional React component that visualizes stock price data using the Recharts library. It first checks for valid input data and extracts the company name and ticker for display. The component maps the provided data to a format suitable for Recharts, specifically extracting the date and closing price for each data point. It then renders a responsive line chart with labeled axes, a legend, and a tooltip, and styles the chart with a specific stroke color and margin. The X-axis now uses a tickFormatter prop to display abbreviated month names, utilizing the defined date formatting helper. The chart is wrapped in a container with a top margin and displays the company name and ticker above the chart.",
                "high_structured": "• Implements a StockChart React component for displaying stock price trends\n• Validates input data before rendering\n  ◦ Returns null if data is missing or empty\n• Extracts and displays company name and ticker symbol\n• Prepares chart data by mapping each item to an object with date and closing price\n• Defines a helper function to format date strings\n• Renders a responsive line chart using Recharts components\n  ◦ Includes X and Y axes, legend, and tooltip for interactivity\n  ◦ Plots the closing price as a monotone line with a custom stroke color and no dots\n  ◦ Sets chart margins and ensures 100% width and fixed height\n  ◦ X-axis now uses the tickFormatter prop to display abbreviated month names using the helper function\n• Wraps chart in a styled div and displays a heading above the chart"
            }
        },
        "id": "1tJn9Xm6NrZvJp3TONyf"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-22 22:48:52.000",
        "source": "backend",
        "data": {
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        },
                        {
                            "line": 36,
                            "code": "<LineChart"
                        }
                    ],
                    "summaryComponent": "React component renders a stock price chart"
                },
                {
                    "codeSegments": [
                        {
                            "line": 2,
                            "code": "import {"
                        },
                        {
                            "line": 3,
                            "code": "LineChart,"
                        },
                        {
                            "line": 4,
                            "code": "Line,"
                        },
                        {
                            "line": 5,
                            "code": "XAxis,"
                        },
                        {
                            "line": 6,
                            "code": "YAxis,"
                        },
                        {
                            "line": 7,
                            "code": "Tooltip,"
                        },
                        {
                            "line": 8,
                            "code": "Legend,"
                        },
                        {
                            "line": 9,
                            "code": "ResponsiveContainer,"
                        },
                        {
                            "line": 10,
                            "code": "ReferenceLine,"
                        },
                        {
                            "line": 11,
                            "code": "} from \"recharts\";"
                        }
                    ],
                    "summaryComponent": "Uses Recharts for visualization"
                },
                {
                    "codeSegments": [
                        {
                            "line": 16,
                            "code": "const company = data.name;"
                        },
                        {
                            "line": 17,
                            "code": "const ticker = data.ticker;"
                        },
                        {
                            "line": 32,
                            "code": "<h3>"
                        },
                        {
                            "line": 33,
                            "code": "{company} ({ticker})"
                        }
                    ],
                    "summaryComponent": "Displays company name and ticker"
                },
                {
                    "codeSegments": [
                        {
                            "line": 19,
                            "code": "const formatDateString = (date) => {"
                        },
                        {
                            "line": 21,
                            "code": "return d.toLocaleString(\"en-US\", { month: \"short\" });"
                        },
                        {
                            "line": 40,
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />"
                        }
                    ],
                    "summaryComponent": "X-axis ticks are now formatted to show abbreviated month names"
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     const d = new Date(date);\n21:     return d.toLocaleString(\"en-US\", { month: \"short\" });\n22:   };\n23: \n24:   // Combine labels and values into an array of objects for Recharts\n25:   const chartData = data.data.map((item) => ({\n26:     date: item.date,\n27:     price: item.close,\n28:   }));\n29: \n30:   return (\n31:     <div style={{ marginTop: \"2rem\" }}>\n32:       <h3>\n33:         {company} ({ticker})\n34:       </h3>\n35:       <ResponsiveContainer width=\"100%\" height={300}>\n36:         <LineChart\n37:           data={chartData}\n38:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n39:         >\n40:           <XAxis dataKey=\"date\" tickFormatter={formatDateString} />\n41:           <YAxis domain={[\"auto\", \"auto\"]} />\n42:           <Tooltip />\n43:           <Legend />\n44:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n45:         </LineChart>\n46:       </ResponsiveContainer>\n47:     </div>\n48:   );\n49: };\n50: \n51: export default StockChart;",
            "summary": "• React component renders a stock price chart\n• Uses Recharts for visualization\n• Displays company name and ticker\n• X-axis ticks are now formatted to show abbreviated month names"
        },
        "id": "0LFKZVqY1luZ6aL3ORJY"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-22 22:48:52.000",
        "source": "backend",
        "data": {
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        }
                    ],
                    "summaryComponent": "defines a React component"
                },
                {
                    "codeSegments": [
                        {
                            "line": 36,
                            "code": "<LineChart"
                        },
                        {
                            "line": 44,
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                        }
                    ],
                    "summaryComponent": "displays a line chart of stock prices"
                },
                {
                    "codeSegments": [
                        {
                            "line": 2,
                            "code": "import {"
                        },
                        {
                            "line": 11,
                            "code": "} from \"recharts\";"
                        }
                    ],
                    "summaryComponent": "using the Recharts library"
                },
                {
                    "codeSegments": [
                        {
                            "line": 19,
                            "code": "const formatDateString = (date) => {"
                        },
                        {
                            "line": 21,
                            "code": "return d.toLocaleString(\"en-US\", { month: \"short\" });"
                        },
                        {
                            "line": 40,
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />"
                        }
                    ],
                    "summaryComponent": "now formatting the X-axis ticks to show abbreviated month names"
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     const d = new Date(date);\n21:     return d.toLocaleString(\"en-US\", { month: \"short\" });\n22:   };\n23: \n24:   // Combine labels and values into an array of objects for Recharts\n25:   const chartData = data.data.map((item) => ({\n26:     date: item.date,\n27:     price: item.close,\n28:   }));\n29: \n30:   return (\n31:     <div style={{ marginTop: \"2rem\" }}>\n32:       <h3>\n33:         {company} ({ticker})\n34:       </h3>\n35:       <ResponsiveContainer width=\"100%\" height={300}>\n36:         <LineChart\n37:           data={chartData}\n38:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n39:         >\n40:           <XAxis dataKey=\"date\" tickFormatter={formatDateString} />\n41:           <YAxis domain={[\"auto\", \"auto\"]} />\n42:           <Tooltip />\n43:           <Legend />\n44:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n45:         </LineChart>\n46:       </ResponsiveContainer>\n47:     </div>\n48:   );\n49: };\n50: \n51: export default StockChart;",
            "summary": "This code defines a React component that displays a line chart of stock prices using the Recharts library, now formatting the X-axis ticks to show abbreviated month names."
        },
        "id": "RAVGEGUL9yoAyLp393di"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-22 22:48:53.000",
        "source": "backend",
        "data": {
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        }
                    ],
                    "summaryComponent": "Defines a StockChart React component"
                },
                {
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        }
                    ],
                    "summaryComponent": "Expects a data prop containing stock information"
                },
                {
                    "codeSegments": [
                        {
                            "line": 16,
                            "code": "const company = data.name;"
                        },
                        {
                            "line": 17,
                            "code": "const ticker = data.ticker;"
                        },
                        {
                            "line": 33,
                            "code": "{company} ({ticker})"
                        }
                    ],
                    "summaryComponent": "Extracts company name and ticker for display"
                },
                {
                    "codeSegments": [
                        {
                            "line": 25,
                            "code": "const chartData = data.data.map((item) => ({"
                        },
                        {
                            "line": 26,
                            "code": "date: item.date,"
                        },
                        {
                            "line": 27,
                            "code": "price: item.close,"
                        }
                    ],
                    "summaryComponent": "Formats input data for Recharts"
                },
                {
                    "codeSegments": [
                        {
                            "line": 35,
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                        },
                        {
                            "line": 36,
                            "code": "<LineChart"
                        },
                        {
                            "line": 40,
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />"
                        },
                        {
                            "line": 41,
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                        },
                        {
                            "line": 42,
                            "code": "<Tooltip />"
                        },
                        {
                            "line": 43,
                            "code": "<Legend />"
                        },
                        {
                            "line": 44,
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                        }
                    ],
                    "summaryComponent": "Renders a responsive line chart with axes, legend, and tooltip"
                },
                {
                    "codeSegments": [
                        {
                            "line": 40,
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />"
                        },
                        {
                            "line": 19,
                            "code": "const formatDateString = (date) => {"
                        },
                        {
                            "line": 21,
                            "code": "return d.toLocaleString(\"en-US\", { month: \"short\" });"
                        }
                    ],
                    "summaryComponent": "X-axis now uses a tick formatter to display abbreviated month names"
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     const d = new Date(date);\n21:     return d.toLocaleString(\"en-US\", { month: \"short\" });\n22:   };\n23: \n24:   // Combine labels and values into an array of objects for Recharts\n25:   const chartData = data.data.map((item) => ({\n26:     date: item.date,\n27:     price: item.close,\n28:   }));\n29: \n30:   return (\n31:     <div style={{ marginTop: \"2rem\" }}>\n32:       <h3>\n33:         {company} ({ticker})\n34:       </h3>\n35:       <ResponsiveContainer width=\"100%\" height={300}>\n36:         <LineChart\n37:           data={chartData}\n38:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n39:         >\n40:           <XAxis dataKey=\"date\" tickFormatter={formatDateString} />\n41:           <YAxis domain={[\"auto\", \"auto\"]} />\n42:           <Tooltip />\n43:           <Legend />\n44:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n45:         </LineChart>\n46:       </ResponsiveContainer>\n47:     </div>\n48:   );\n49: };\n50: \n51: export default StockChart;",
            "summary": "• Defines a StockChart React component\n• Expects a data prop containing stock information\n  ◦ Extracts company name and ticker for display\n• Formats input data for Recharts\n• Renders a responsive line chart with axes, legend, and tooltip\n• X-axis now uses a tick formatter to display abbreviated month names"
        },
        "id": "BN9TddUKSbHrMZmnsklr"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-22 22:48:53.000",
        "source": "backend",
        "data": {
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        }
                    ],
                    "summaryComponent": "This React component, StockChart,"
                },
                {
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        }
                    ],
                    "summaryComponent": "takes in stock data"
                },
                {
                    "codeSegments": [
                        {
                            "line": 2,
                            "code": "import {"
                        },
                        {
                            "line": 3,
                            "code": "LineChart,"
                        },
                        {
                            "line": 36,
                            "code": "<LineChart"
                        }
                    ],
                    "summaryComponent": "visualizes it as a line chart using the Recharts library"
                },
                {
                    "codeSegments": [
                        {
                            "line": 32,
                            "code": "<h3>"
                        },
                        {
                            "line": 33,
                            "code": "{company} ({ticker})"
                        }
                    ],
                    "summaryComponent": "It displays the company name and ticker"
                },
                {
                    "codeSegments": [
                        {
                            "line": 25,
                            "code": "const chartData = data.data.map((item) => ({"
                        }
                    ],
                    "summaryComponent": "formats the data for charting"
                },
                {
                    "codeSegments": [
                        {
                            "line": 40,
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />"
                        },
                        {
                            "line": 41,
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                        }
                    ],
                    "summaryComponent": "The chart includes axes"
                },
                {
                    "codeSegments": [
                        {
                            "line": 43,
                            "code": "<Legend />"
                        }
                    ],
                    "summaryComponent": "a legend"
                },
                {
                    "codeSegments": [
                        {
                            "line": 42,
                            "code": "<Tooltip />"
                        }
                    ],
                    "summaryComponent": "and a tooltip for better readability"
                },
                {
                    "codeSegments": [
                        {
                            "line": 19,
                            "code": "const formatDateString = (date) => {"
                        },
                        {
                            "line": 21,
                            "code": "return d.toLocaleString(\"en-US\", { month: \"short\" });"
                        },
                        {
                            "line": 40,
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />"
                        }
                    ],
                    "summaryComponent": "formats the X-axis ticks to display abbreviated month names using a custom formatter"
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     const d = new Date(date);\n21:     return d.toLocaleString(\"en-US\", { month: \"short\" });\n22:   };\n23: \n24:   // Combine labels and values into an array of objects for Recharts\n25:   const chartData = data.data.map((item) => ({\n26:     date: item.date,\n27:     price: item.close,\n28:   }));\n29: \n30:   return (\n31:     <div style={{ marginTop: \"2rem\" }}>\n32:       <h3>\n33:         {company} ({ticker})\n34:       </h3>\n35:       <ResponsiveContainer width=\"100%\" height={300}>\n36:         <LineChart\n37:           data={chartData}\n38:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n39:         >\n40:           <XAxis dataKey=\"date\" tickFormatter={formatDateString} />\n41:           <YAxis domain={[\"auto\", \"auto\"]} />\n42:           <Tooltip />\n43:           <Legend />\n44:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n45:         </LineChart>\n46:       </ResponsiveContainer>\n47:     </div>\n48:   );\n49: };\n50: \n51: export default StockChart;",
            "summary": "This React component, StockChart, takes in stock data and visualizes it as a line chart using the Recharts library. It displays the company name and ticker, and formats the data for charting. The chart includes axes, a legend, and a tooltip for better readability, and now formats the X-axis ticks to display abbreviated month names using a custom formatter."
        },
        "id": "uMvdFD7d0xV6ifBdVWhy"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-22 22:48:54.000",
        "source": "backend",
        "data": {
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        },
                        {
                            "line": 51,
                            "code": "export default StockChart;"
                        }
                    ],
                    "summaryComponent": "Implements a StockChart React component for displaying stock price trends"
                },
                {
                    "codeSegments": [
                        {
                            "line": 14,
                            "code": "if (!data || !data.data || !data.data.length) return null;"
                        }
                    ],
                    "summaryComponent": "Validates input data before rendering"
                },
                {
                    "codeSegments": [
                        {
                            "line": 14,
                            "code": "if (!data || !data.data || !data.data.length) return null;"
                        }
                    ],
                    "summaryComponent": "Returns null if data is missing or empty"
                },
                {
                    "codeSegments": [
                        {
                            "line": 16,
                            "code": "const company = data.name;"
                        },
                        {
                            "line": 17,
                            "code": "const ticker = data.ticker;"
                        },
                        {
                            "line": 32,
                            "code": "<h3>"
                        },
                        {
                            "line": 33,
                            "code": "{company} ({ticker})"
                        }
                    ],
                    "summaryComponent": "Extracts and displays company name and ticker symbol"
                },
                {
                    "codeSegments": [
                        {
                            "line": 25,
                            "code": "const chartData = data.data.map((item) => ({"
                        },
                        {
                            "line": 26,
                            "code": "date: item.date,"
                        },
                        {
                            "line": 27,
                            "code": "price: item.close,"
                        }
                    ],
                    "summaryComponent": "Prepares chart data by mapping each item to an object with date and closing price"
                },
                {
                    "codeSegments": [
                        {
                            "line": 19,
                            "code": "const formatDateString = (date) => {"
                        },
                        {
                            "line": 20,
                            "code": "const d = new Date(date);"
                        },
                        {
                            "line": 21,
                            "code": "return d.toLocaleString(\"en-US\", { month: \"short\" });"
                        }
                    ],
                    "summaryComponent": "Defines a helper function to format date strings"
                },
                {
                    "codeSegments": [
                        {
                            "line": 35,
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                        },
                        {
                            "line": 36,
                            "code": "<LineChart"
                        }
                    ],
                    "summaryComponent": "Renders a responsive line chart using Recharts components"
                },
                {
                    "codeSegments": [
                        {
                            "line": 40,
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />"
                        },
                        {
                            "line": 41,
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                        },
                        {
                            "line": 42,
                            "code": "<Tooltip />"
                        },
                        {
                            "line": 43,
                            "code": "<Legend />"
                        }
                    ],
                    "summaryComponent": "Includes X and Y axes, legend, and tooltip for interactivity"
                },
                {
                    "codeSegments": [
                        {
                            "line": 44,
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                        }
                    ],
                    "summaryComponent": "Plots the closing price as a monotone line with a custom stroke color and no dots"
                },
                {
                    "codeSegments": [
                        {
                            "line": 35,
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                        },
                        {
                            "line": 38,
                            "code": "margin={{ top: 10, right: 30, left: 0, bottom: 0 }}"
                        }
                    ],
                    "summaryComponent": "Sets chart margins and ensures 100% width and fixed height"
                },
                {
                    "codeSegments": [
                        {
                            "line": 40,
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />"
                        }
                    ],
                    "summaryComponent": "X-axis now uses the tickFormatter prop to display abbreviated month names using the helper function"
                },
                {
                    "codeSegments": [
                        {
                            "line": 31,
                            "code": "<div style={{ marginTop: \"2rem\" }}>"
                        },
                        {
                            "line": 32,
                            "code": "<h3>"
                        }
                    ],
                    "summaryComponent": "Wraps chart in a styled div and displays a heading above the chart"
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     const d = new Date(date);\n21:     return d.toLocaleString(\"en-US\", { month: \"short\" });\n22:   };\n23: \n24:   // Combine labels and values into an array of objects for Recharts\n25:   const chartData = data.data.map((item) => ({\n26:     date: item.date,\n27:     price: item.close,\n28:   }));\n29: \n30:   return (\n31:     <div style={{ marginTop: \"2rem\" }}>\n32:       <h3>\n33:         {company} ({ticker})\n34:       </h3>\n35:       <ResponsiveContainer width=\"100%\" height={300}>\n36:         <LineChart\n37:           data={chartData}\n38:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n39:         >\n40:           <XAxis dataKey=\"date\" tickFormatter={formatDateString} />\n41:           <YAxis domain={[\"auto\", \"auto\"]} />\n42:           <Tooltip />\n43:           <Legend />\n44:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n45:         </LineChart>\n46:       </ResponsiveContainer>\n47:     </div>\n48:   );\n49: };\n50: \n51: export default StockChart;",
            "summary": "• Implements a StockChart React component for displaying stock price trends\n• Validates input data before rendering\n  ◦ Returns null if data is missing or empty\n• Extracts and displays company name and ticker symbol\n• Prepares chart data by mapping each item to an object with date and closing price\n• Defines a helper function to format date strings\n• Renders a responsive line chart using Recharts components\n  ◦ Includes X and Y axes, legend, and tooltip for interactivity\n  ◦ Plots the closing price as a monotone line with a custom stroke color and no dots\n  ◦ Sets chart margins and ensures 100% width and fixed height\n  ◦ X-axis now uses the tickFormatter prop to display abbreviated month names using the helper function\n• Wraps chart in a styled div and displays a heading above the chart"
        },
        "id": "9LJNCXorFtOdbuUIpsFN"
    },
    {
        "event": "autotransit_section",
        "timestamp": "2025-08-22 22:48:55.000",
        "source": "frontend",
        "data": {
            "before_section_id": "de773491-5fe4-48d4-982f-8358ea44a8d4",
            "after_section_id": "1b4fdd55-3884-4428-be73-d5faf989ccbe"
        },
        "id": "5jru54lFAx1BHDilsQzD"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-22 22:48:55.000",
        "source": "backend",
        "data": {
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "line": 13,
                            "code": "const StockChart = ({ data }) => {"
                        }
                    ],
                    "summaryComponent": "The StockChart component is a functional React component"
                },
                {
                    "codeSegments": [
                        {
                            "line": 2,
                            "code": "import {"
                        },
                        {
                            "line": 3,
                            "code": "LineChart,"
                        },
                        {
                            "line": 4,
                            "code": "Line,"
                        },
                        {
                            "line": 5,
                            "code": "XAxis,"
                        },
                        {
                            "line": 6,
                            "code": "YAxis,"
                        },
                        {
                            "line": 7,
                            "code": "Tooltip,"
                        },
                        {
                            "line": 8,
                            "code": "Legend,"
                        },
                        {
                            "line": 9,
                            "code": "ResponsiveContainer,"
                        },
                        {
                            "line": 10,
                            "code": "ReferenceLine,"
                        },
                        {
                            "line": 11,
                            "code": "} from \"recharts\";"
                        }
                    ],
                    "summaryComponent": "visualizes stock price data using the Recharts library"
                },
                {
                    "codeSegments": [
                        {
                            "line": 14,
                            "code": "if (!data || !data.data || !data.data.length) return null;"
                        }
                    ],
                    "summaryComponent": "It first checks for valid input data"
                },
                {
                    "codeSegments": [
                        {
                            "line": 16,
                            "code": "const company = data.name;"
                        },
                        {
                            "line": 17,
                            "code": "const ticker = data.ticker;"
                        },
                        {
                            "line": 33,
                            "code": "{company} ({ticker})"
                        }
                    ],
                    "summaryComponent": "extracts the company name and ticker for display"
                },
                {
                    "codeSegments": [
                        {
                            "line": 25,
                            "code": "const chartData = data.data.map((item) => ({"
                        }
                    ],
                    "summaryComponent": "maps the provided data to a format suitable for Recharts"
                },
                {
                    "codeSegments": [
                        {
                            "line": 26,
                            "code": "date: item.date,"
                        },
                        {
                            "line": 27,
                            "code": "price: item.close,"
                        }
                    ],
                    "summaryComponent": "specifically extracting the date and closing price for each data point"
                },
                {
                    "codeSegments": [
                        {
                            "line": 35,
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                        },
                        {
                            "line": 36,
                            "code": "<LineChart"
                        },
                        {
                            "line": 40,
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />"
                        },
                        {
                            "line": 41,
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                        },
                        {
                            "line": 42,
                            "code": "<Tooltip />"
                        },
                        {
                            "line": 43,
                            "code": "<Legend />"
                        },
                        {
                            "line": 44,
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                        }
                    ],
                    "summaryComponent": "renders a responsive line chart with labeled axes, a legend, and a tooltip"
                },
                {
                    "codeSegments": [
                        {
                            "line": 44,
                            "code": "stroke=\"#8884d8\""
                        },
                        {
                            "line": 38,
                            "code": "margin={{ top: 10, right: 30, left: 0, bottom: 0 }}"
                        }
                    ],
                    "summaryComponent": "styles the chart with a specific stroke color and margin"
                },
                {
                    "codeSegments": [
                        {
                            "line": 40,
                            "code": "tickFormatter={formatDateString}"
                        }
                    ],
                    "summaryComponent": "The X-axis now uses a tickFormatter prop to display abbreviated month names"
                },
                {
                    "codeSegments": [
                        {
                            "line": 19,
                            "code": "const formatDateString = (date) => {"
                        },
                        {
                            "line": 21,
                            "code": "return d.toLocaleString(\"en-US\", { month: \"short\" });"
                        }
                    ],
                    "summaryComponent": "utilizing the defined date formatting helper"
                },
                {
                    "codeSegments": [
                        {
                            "line": 31,
                            "code": "<div style={{ marginTop: \"2rem\" }}>"
                        }
                    ],
                    "summaryComponent": "The chart is wrapped in a container with a top margin"
                },
                {
                    "codeSegments": [
                        {
                            "line": 32,
                            "code": "<h3>"
                        },
                        {
                            "line": 33,
                            "code": "{company} ({ticker})"
                        }
                    ],
                    "summaryComponent": "displays the company name and ticker above the chart"
                }
            ],
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     const d = new Date(date);\n21:     return d.toLocaleString(\"en-US\", { month: \"short\" });\n22:   };\n23: \n24:   // Combine labels and values into an array of objects for Recharts\n25:   const chartData = data.data.map((item) => ({\n26:     date: item.date,\n27:     price: item.close,\n28:   }));\n29: \n30:   return (\n31:     <div style={{ marginTop: \"2rem\" }}>\n32:       <h3>\n33:         {company} ({ticker})\n34:       </h3>\n35:       <ResponsiveContainer width=\"100%\" height={300}>\n36:         <LineChart\n37:           data={chartData}\n38:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n39:         >\n40:           <XAxis dataKey=\"date\" tickFormatter={formatDateString} />\n41:           <YAxis domain={[\"auto\", \"auto\"]} />\n42:           <Tooltip />\n43:           <Legend />\n44:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n45:         </LineChart>\n46:       </ResponsiveContainer>\n47:     </div>\n48:   );\n49: };\n50: \n51: export default StockChart;",
            "summary": "The StockChart component is a functional React component that visualizes stock price data using the Recharts library. It first checks for valid input data and extracts the company name and ticker for display. The component maps the provided data to a format suitable for Recharts, specifically extracting the date and closing price for each data point. It then renders a responsive line chart with labeled axes, a legend, and a tooltip, and styles the chart with a specific stroke color and margin. The X-axis now uses a tickFormatter prop to display abbreviated month names, utilizing the defined date formatting helper. The chart is wrapped in a container with a top margin and displays the company name and ticker above the chart."
        },
        "id": "WogzaoSoIKZdhP23VKWC"
    },
    {
        "event": "create_new_section",
        "timestamp": "2025-08-22 22:48:55.000",
        "source": "frontend",
        "data": {
            "section_id": "1b4fdd55-3884-4428-be73-d5faf989ccbe",
            "section_data": {
                "summaryData": {
                    "low_structured": "• React component renders a stock price chart\n• Uses Recharts for visualization\n• Displays company name and ticker\n• X-axis ticks are now formatted to show abbreviated month names",
                    "low_unstructured": "This code defines a React component that displays a line chart of stock prices using the Recharts library, now formatting the X-axis ticks to show abbreviated month names.",
                    "title": "StockChart React Component with Formatted X-Axis Ticks for Stock Price Line Charts",
                    "medium_unstructured": "This React component, StockChart, takes in stock data and visualizes it as a line chart using the Recharts library. It displays the company name and ticker, and formats the data for charting. The chart includes axes, a legend, and a tooltip for better readability, and now formats the X-axis ticks to display abbreviated month names using a custom formatter.",
                    "medium_structured": "• Defines a StockChart React component\n• Expects a data prop containing stock information\n  ◦ Extracts company name and ticker for display\n• Formats input data for Recharts\n• Renders a responsive line chart with axes, legend, and tooltip\n• X-axis now uses a tick formatter to display abbreviated month names",
                    "high_unstructured": "The StockChart component is a functional React component that visualizes stock price data using the Recharts library. It first checks for valid input data and extracts the company name and ticker for display. The component maps the provided data to a format suitable for Recharts, specifically extracting the date and closing price for each data point. It then renders a responsive line chart with labeled axes, a legend, and a tooltip, and styles the chart with a specific stroke color and margin. The X-axis now uses a tickFormatter prop to display abbreviated month names, utilizing the defined date formatting helper. The chart is wrapped in a container with a top margin and displays the company name and ticker above the chart.",
                    "high_structured": "• Implements a StockChart React component for displaying stock price trends\n• Validates input data before rendering\n  ◦ Returns null if data is missing or empty\n• Extracts and displays company name and ticker symbol\n• Prepares chart data by mapping each item to an object with date and closing price\n• Defines a helper function to format date strings\n• Renders a responsive line chart using Recharts components\n  ◦ Includes X and Y axes, legend, and tooltip for interactivity\n  ◦ Plots the closing price as a monotone line with a custom stroke color and no dots\n  ◦ Sets chart margins and ensures 100% width and fixed height\n  ◦ X-axis now uses the tickFormatter prop to display abbreviated month names using the helper function\n• Wraps chart in a styled div and displays a heading above the chart"
                },
                "editPromptValue": "",
                "title": "StockChart React Component with Formatted X-Axis Ticks for Stock Price Line Charts",
                "editPromptStructured": null,
                "selectedDetailLevel": "medium",
                "metadata": {
                    "filename": "StockChart.jsx",
                    "fullPath": "/project/workspace/frontend/src/StockChart.jsx",
                    "id": "1b4fdd55-3884-4428-be73-d5faf989ccbe",
                    "originalCode": "import React from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  ReferenceLine,\n} from \"recharts\";\n\nconst StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    const d = new Date(date);\n    return d.toLocaleString(\"en-US\", { month: \"short\" });\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatDateString} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;",
                    "offset": 0
                },
                "createdAt": 1755888535000,
                "lines": [
                    1,
                    51
                ],
                "oldSummaryData": {
                    "low_structured": "• React component renders a stock price chart\n• Uses Recharts for visualization\n• Displays company name and ticker",
                    "low_unstructured": "This code defines a React component that displays a line chart of stock prices using the Recharts library.",
                    "title": "StockChart React Component for Rendering Stock Price Line Charts",
                    "medium_unstructured": "This React component, StockChart, takes in stock data and visualizes it as a line chart using the Recharts library. It displays the company name and ticker, and formats the data for charting. The chart includes axes, a legend, and a tooltip for better readability.",
                    "medium_structured": "• Defines a StockChart React component\n• Expects a data prop containing stock information\n  ◦ Extracts company name and ticker for display\n• Formats input data for Recharts\n• Renders a responsive line chart with axes, legend, and tooltip",
                    "high_unstructured": "The StockChart component is a functional React component that visualizes stock price data using the Recharts library. It first checks for valid input data and extracts the company name and ticker for display. The component maps the provided data to a format suitable for Recharts, specifically extracting the date and closing price for each data point. It then renders a responsive line chart with labeled axes, a legend, and a tooltip, and styles the chart with a specific stroke color and margin. The chart is wrapped in a container with a top margin and displays the company name and ticker above the chart.",
                    "high_structured": "• Implements a StockChart React component for displaying stock price trends\n• Validates input data before rendering\n  ◦ Returns null if data is missing or empty\n• Extracts and displays company name and ticker symbol\n• Prepares chart data by mapping each item to an object with date and closing price\n• Defines a helper function to format date strings (though not used in rendering)\n• Renders a responsive line chart using Recharts components\n  ◦ Includes X and Y axes, legend, and tooltip for interactivity\n  ◦ Plots the closing price as a monotone line with a custom stroke color and no dots\n  ◦ Sets chart margins and ensures 100% width and fixed height\n• Wraps chart in a styled div and displays a heading above the chart"
                },
                "summaryMappings": {
                    "low_structured": [
                        {
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                },
                                {
                                    "line": 36,
                                    "code": "<LineChart"
                                }
                            ],
                            "summaryComponent": "React component renders a stock price chart"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 2,
                                    "code": "import {"
                                },
                                {
                                    "line": 3,
                                    "code": "LineChart,"
                                },
                                {
                                    "line": 4,
                                    "code": "Line,"
                                },
                                {
                                    "line": 5,
                                    "code": "XAxis,"
                                },
                                {
                                    "line": 6,
                                    "code": "YAxis,"
                                },
                                {
                                    "line": 7,
                                    "code": "Tooltip,"
                                },
                                {
                                    "line": 8,
                                    "code": "Legend,"
                                },
                                {
                                    "line": 9,
                                    "code": "ResponsiveContainer,"
                                },
                                {
                                    "line": 10,
                                    "code": "ReferenceLine,"
                                },
                                {
                                    "line": 11,
                                    "code": "} from \"recharts\";"
                                }
                            ],
                            "summaryComponent": "Uses Recharts for visualization"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 16,
                                    "code": "const company = data.name;"
                                },
                                {
                                    "line": 17,
                                    "code": "const ticker = data.ticker;"
                                },
                                {
                                    "line": 32,
                                    "code": "<h3>"
                                },
                                {
                                    "line": 33,
                                    "code": "{company} ({ticker})"
                                }
                            ],
                            "summaryComponent": "Displays company name and ticker"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 19,
                                    "code": "const formatDateString = (date) => {"
                                },
                                {
                                    "line": 21,
                                    "code": "return d.toLocaleString(\"en-US\", { month: \"short\" });"
                                },
                                {
                                    "line": 40,
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />"
                                }
                            ],
                            "summaryComponent": "X-axis ticks are now formatted to show abbreviated month names"
                        }
                    ],
                    "low_unstructured": [
                        {
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                }
                            ],
                            "summaryComponent": "defines a React component"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 36,
                                    "code": "<LineChart"
                                },
                                {
                                    "line": 44,
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                                }
                            ],
                            "summaryComponent": "displays a line chart of stock prices"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 2,
                                    "code": "import {"
                                },
                                {
                                    "line": 11,
                                    "code": "} from \"recharts\";"
                                }
                            ],
                            "summaryComponent": "using the Recharts library"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 19,
                                    "code": "const formatDateString = (date) => {"
                                },
                                {
                                    "line": 21,
                                    "code": "return d.toLocaleString(\"en-US\", { month: \"short\" });"
                                },
                                {
                                    "line": 40,
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />"
                                }
                            ],
                            "summaryComponent": "now formatting the X-axis ticks to show abbreviated month names"
                        }
                    ],
                    "medium_structured": [
                        {
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                }
                            ],
                            "summaryComponent": "Defines a StockChart React component"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                }
                            ],
                            "summaryComponent": "Expects a data prop containing stock information"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 16,
                                    "code": "const company = data.name;"
                                },
                                {
                                    "line": 17,
                                    "code": "const ticker = data.ticker;"
                                },
                                {
                                    "line": 33,
                                    "code": "{company} ({ticker})"
                                }
                            ],
                            "summaryComponent": "Extracts company name and ticker for display"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 25,
                                    "code": "const chartData = data.data.map((item) => ({"
                                },
                                {
                                    "line": 26,
                                    "code": "date: item.date,"
                                },
                                {
                                    "line": 27,
                                    "code": "price: item.close,"
                                }
                            ],
                            "summaryComponent": "Formats input data for Recharts"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 35,
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                                },
                                {
                                    "line": 36,
                                    "code": "<LineChart"
                                },
                                {
                                    "line": 40,
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />"
                                },
                                {
                                    "line": 41,
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                                },
                                {
                                    "line": 42,
                                    "code": "<Tooltip />"
                                },
                                {
                                    "line": 43,
                                    "code": "<Legend />"
                                },
                                {
                                    "line": 44,
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                                }
                            ],
                            "summaryComponent": "Renders a responsive line chart with axes, legend, and tooltip"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 40,
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />"
                                },
                                {
                                    "line": 19,
                                    "code": "const formatDateString = (date) => {"
                                },
                                {
                                    "line": 21,
                                    "code": "return d.toLocaleString(\"en-US\", { month: \"short\" });"
                                }
                            ],
                            "summaryComponent": "X-axis now uses a tick formatter to display abbreviated month names"
                        }
                    ],
                    "medium_unstructured": [
                        {
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                }
                            ],
                            "summaryComponent": "This React component, StockChart,"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                }
                            ],
                            "summaryComponent": "takes in stock data"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 2,
                                    "code": "import {"
                                },
                                {
                                    "line": 3,
                                    "code": "LineChart,"
                                },
                                {
                                    "line": 36,
                                    "code": "<LineChart"
                                }
                            ],
                            "summaryComponent": "visualizes it as a line chart using the Recharts library"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 32,
                                    "code": "<h3>"
                                },
                                {
                                    "line": 33,
                                    "code": "{company} ({ticker})"
                                }
                            ],
                            "summaryComponent": "It displays the company name and ticker"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 25,
                                    "code": "const chartData = data.data.map((item) => ({"
                                }
                            ],
                            "summaryComponent": "formats the data for charting"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 40,
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />"
                                },
                                {
                                    "line": 41,
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                                }
                            ],
                            "summaryComponent": "The chart includes axes"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 43,
                                    "code": "<Legend />"
                                }
                            ],
                            "summaryComponent": "a legend"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 42,
                                    "code": "<Tooltip />"
                                }
                            ],
                            "summaryComponent": "and a tooltip for better readability"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 19,
                                    "code": "const formatDateString = (date) => {"
                                },
                                {
                                    "line": 21,
                                    "code": "return d.toLocaleString(\"en-US\", { month: \"short\" });"
                                },
                                {
                                    "line": 40,
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />"
                                }
                            ],
                            "summaryComponent": "formats the X-axis ticks to display abbreviated month names using a custom formatter"
                        }
                    ],
                    "high_unstructured": [
                        {
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                }
                            ],
                            "summaryComponent": "The StockChart component is a functional React component"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 2,
                                    "code": "import {"
                                },
                                {
                                    "line": 3,
                                    "code": "LineChart,"
                                },
                                {
                                    "line": 4,
                                    "code": "Line,"
                                },
                                {
                                    "line": 5,
                                    "code": "XAxis,"
                                },
                                {
                                    "line": 6,
                                    "code": "YAxis,"
                                },
                                {
                                    "line": 7,
                                    "code": "Tooltip,"
                                },
                                {
                                    "line": 8,
                                    "code": "Legend,"
                                },
                                {
                                    "line": 9,
                                    "code": "ResponsiveContainer,"
                                },
                                {
                                    "line": 10,
                                    "code": "ReferenceLine,"
                                },
                                {
                                    "line": 11,
                                    "code": "} from \"recharts\";"
                                }
                            ],
                            "summaryComponent": "visualizes stock price data using the Recharts library"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 14,
                                    "code": "if (!data || !data.data || !data.data.length) return null;"
                                }
                            ],
                            "summaryComponent": "It first checks for valid input data"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 16,
                                    "code": "const company = data.name;"
                                },
                                {
                                    "line": 17,
                                    "code": "const ticker = data.ticker;"
                                },
                                {
                                    "line": 33,
                                    "code": "{company} ({ticker})"
                                }
                            ],
                            "summaryComponent": "extracts the company name and ticker for display"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 25,
                                    "code": "const chartData = data.data.map((item) => ({"
                                }
                            ],
                            "summaryComponent": "maps the provided data to a format suitable for Recharts"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 26,
                                    "code": "date: item.date,"
                                },
                                {
                                    "line": 27,
                                    "code": "price: item.close,"
                                }
                            ],
                            "summaryComponent": "specifically extracting the date and closing price for each data point"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 35,
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                                },
                                {
                                    "line": 36,
                                    "code": "<LineChart"
                                },
                                {
                                    "line": 40,
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />"
                                },
                                {
                                    "line": 41,
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                                },
                                {
                                    "line": 42,
                                    "code": "<Tooltip />"
                                },
                                {
                                    "line": 43,
                                    "code": "<Legend />"
                                },
                                {
                                    "line": 44,
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                                }
                            ],
                            "summaryComponent": "renders a responsive line chart with labeled axes, a legend, and a tooltip"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 44,
                                    "code": "stroke=\"#8884d8\""
                                },
                                {
                                    "line": 38,
                                    "code": "margin={{ top: 10, right: 30, left: 0, bottom: 0 }}"
                                }
                            ],
                            "summaryComponent": "styles the chart with a specific stroke color and margin"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 40,
                                    "code": "tickFormatter={formatDateString}"
                                }
                            ],
                            "summaryComponent": "The X-axis now uses a tickFormatter prop to display abbreviated month names"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 19,
                                    "code": "const formatDateString = (date) => {"
                                },
                                {
                                    "line": 21,
                                    "code": "return d.toLocaleString(\"en-US\", { month: \"short\" });"
                                }
                            ],
                            "summaryComponent": "utilizing the defined date formatting helper"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 31,
                                    "code": "<div style={{ marginTop: \"2rem\" }}>"
                                }
                            ],
                            "summaryComponent": "The chart is wrapped in a container with a top margin"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 32,
                                    "code": "<h3>"
                                },
                                {
                                    "line": 33,
                                    "code": "{company} ({ticker})"
                                }
                            ],
                            "summaryComponent": "displays the company name and ticker above the chart"
                        }
                    ],
                    "high_structured": [
                        {
                            "codeSegments": [
                                {
                                    "line": 13,
                                    "code": "const StockChart = ({ data }) => {"
                                },
                                {
                                    "line": 51,
                                    "code": "export default StockChart;"
                                }
                            ],
                            "summaryComponent": "Implements a StockChart React component for displaying stock price trends"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 14,
                                    "code": "if (!data || !data.data || !data.data.length) return null;"
                                }
                            ],
                            "summaryComponent": "Validates input data before rendering"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 14,
                                    "code": "if (!data || !data.data || !data.data.length) return null;"
                                }
                            ],
                            "summaryComponent": "Returns null if data is missing or empty"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 16,
                                    "code": "const company = data.name;"
                                },
                                {
                                    "line": 17,
                                    "code": "const ticker = data.ticker;"
                                },
                                {
                                    "line": 32,
                                    "code": "<h3>"
                                },
                                {
                                    "line": 33,
                                    "code": "{company} ({ticker})"
                                }
                            ],
                            "summaryComponent": "Extracts and displays company name and ticker symbol"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 25,
                                    "code": "const chartData = data.data.map((item) => ({"
                                },
                                {
                                    "line": 26,
                                    "code": "date: item.date,"
                                },
                                {
                                    "line": 27,
                                    "code": "price: item.close,"
                                }
                            ],
                            "summaryComponent": "Prepares chart data by mapping each item to an object with date and closing price"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 19,
                                    "code": "const formatDateString = (date) => {"
                                },
                                {
                                    "line": 20,
                                    "code": "const d = new Date(date);"
                                },
                                {
                                    "line": 21,
                                    "code": "return d.toLocaleString(\"en-US\", { month: \"short\" });"
                                }
                            ],
                            "summaryComponent": "Defines a helper function to format date strings"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 35,
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                                },
                                {
                                    "line": 36,
                                    "code": "<LineChart"
                                }
                            ],
                            "summaryComponent": "Renders a responsive line chart using Recharts components"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 40,
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />"
                                },
                                {
                                    "line": 41,
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />"
                                },
                                {
                                    "line": 42,
                                    "code": "<Tooltip />"
                                },
                                {
                                    "line": 43,
                                    "code": "<Legend />"
                                }
                            ],
                            "summaryComponent": "Includes X and Y axes, legend, and tooltip for interactivity"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 44,
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />"
                                }
                            ],
                            "summaryComponent": "Plots the closing price as a monotone line with a custom stroke color and no dots"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 35,
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>"
                                },
                                {
                                    "line": 38,
                                    "code": "margin={{ top: 10, right: 30, left: 0, bottom: 0 }}"
                                }
                            ],
                            "summaryComponent": "Sets chart margins and ensures 100% width and fixed height"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 40,
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />"
                                }
                            ],
                            "summaryComponent": "X-axis now uses the tickFormatter prop to display abbreviated month names using the helper function"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 31,
                                    "code": "<div style={{ marginTop: \"2rem\" }}>"
                                },
                                {
                                    "line": 32,
                                    "code": "<h3>"
                                }
                            ],
                            "summaryComponent": "Wraps chart in a styled div and displays a heading above the chart"
                        }
                    ]
                },
                "editPromptDetailLevel": null,
                "selectedStructured": "unstructured"
            }
        },
        "id": "kiL9r0OUpJU9wPkUK8jV"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:49:42.000",
        "source": "frontend",
        "data": {
            "section_id": "1b4fdd55-3884-4428-be73-d5faf989ccbe",
            "mapping_index": 8,
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "1Ul1NFRL8UpxjTlUNBRf"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:49:42.000",
        "source": "frontend",
        "data": {
            "section_id": "1b4fdd55-3884-4428-be73-d5faf989ccbe",
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "6tWfTCHl66MRrHkc7ddf"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:49:42.000",
        "source": "frontend",
        "data": {
            "section_id": "1b4fdd55-3884-4428-be73-d5faf989ccbe",
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "B335bW6AouCDu8pKR2Wh"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:49:42.000",
        "source": "frontend",
        "data": {
            "section_id": "1b4fdd55-3884-4428-be73-d5faf989ccbe",
            "mapping_index": 2,
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "NbGNgZwJiDW1l0kgZsFY"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:49:42.000",
        "source": "frontend",
        "data": {
            "section_id": "1b4fdd55-3884-4428-be73-d5faf989ccbe",
            "mapping_index": 0,
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "TUbKteTQKuIwg5ru6rJQ"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:49:43.000",
        "source": "frontend",
        "data": {
            "section_id": "1b4fdd55-3884-4428-be73-d5faf989ccbe",
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "pQmar8o5orCRvTgf8nZz"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:50:23.000",
        "source": "frontend",
        "data": {
            "section_id": "1b4fdd55-3884-4428-be73-d5faf989ccbe",
            "mapping_index": 0,
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "HnWOhhEh24n1Am8ZXr3D"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:50:24.000",
        "source": "frontend",
        "data": {
            "section_id": "1b4fdd55-3884-4428-be73-d5faf989ccbe",
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "97LTUaqWxH64mbjRgIAI"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:50:25.000",
        "source": "frontend",
        "data": {
            "section_id": "1b4fdd55-3884-4428-be73-d5faf989ccbe",
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "6dedAJ3dsYi38qDtqBGc"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:50:25.000",
        "source": "frontend",
        "data": {
            "section_id": "1b4fdd55-3884-4428-be73-d5faf989ccbe",
            "mapping_index": 8,
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "7E9yyba9vwk9QfNEVCFL"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:50:25.000",
        "source": "frontend",
        "data": {
            "section_id": "1b4fdd55-3884-4428-be73-d5faf989ccbe",
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "DP8ZQSbVDWVMG73J0jcw"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:50:25.000",
        "source": "frontend",
        "data": {
            "section_id": "1b4fdd55-3884-4428-be73-d5faf989ccbe",
            "mapping_index": 5,
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "E08MwUwrjANcWcKTrX14"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:50:25.000",
        "source": "frontend",
        "data": {
            "section_id": "1b4fdd55-3884-4428-be73-d5faf989ccbe",
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "Fw9tKBbdIcfIHyx2fiUi"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:50:25.000",
        "source": "frontend",
        "data": {
            "section_id": "1b4fdd55-3884-4428-be73-d5faf989ccbe",
            "mapping_index": 0,
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "oPtRlPrs3cg034Xao41j"
    },
    {
        "event": "click_summarize_code",
        "timestamp": "2025-08-22 22:50:26.000",
        "source": "frontend",
        "data": {},
        "id": "nUG2kjdqU4pUrOR3IjxU"
    },
    {
        "event": "summarize_selected_code",
        "timestamp": "2025-08-22 22:50:32.000",
        "source": "backend",
        "data": {
            "selected_code": "app.get(\"/api/stock/:symbol\", async (req, res) => {\n  try {\n    const symbol = req.params.symbol.toUpperCase();\n    const data = await yahooFinance.chart(symbol, {\n      period1: \"2024-01-01\",\n      interval: \"1d\",\n    });\n    const quotes = data.quotes;\n\n    const companyName = data.meta?.shortName || symbol;\n\n    const response = {\n      ticker: symbol,\n      name: companyName,\n      data: quotes.map((q) => ({\n        date: q.date,\n        close: q.close,\n        volume: q.volume,\n      })),\n    };\n\n    console.log(response);\n    res.json(response);\n  } catch (err) {\n    console.error(err);\n    res.status(500).send(\"Error fetching stock data\");\n  }\n});",
            "summary": {
                "low_structured": "• Defines a GET endpoint for stock data\n• Fetches and returns basic stock information",
                "low_unstructured": "This code defines an Express route that returns stock data for a given symbol.",
                "title": "Express Route for Fetching Stock Data from Yahoo Finance",
                "medium_unstructured": "This Express route handles GET requests to '/api/stock/:symbol' by fetching stock chart data for the given symbol from Yahoo Finance. It processes the data to extract date, close price, and volume, then returns this information in a JSON response. Errors are caught and result in a 500 status response.",
                "medium_structured": "• Handles GET requests at '/api/stock/:symbol'\n• Fetches daily stock chart data from Yahoo Finance starting from 2024-01-01\n• Processes and returns a JSON response with:\n  ◦ Ticker symbol and company name\n  ◦ An array of objects containing date, close price, and volume\n• Sends a 500 error response if data fetching fails",
                "high_unstructured": "This code defines an asynchronous Express GET endpoint at '/api/stock/:symbol' that retrieves daily stock chart data for the specified symbol from Yahoo Finance, starting from January 1, 2024. It converts the symbol to uppercase, fetches the chart data, and extracts the company's short name if available. The endpoint constructs a response object containing the ticker, company name, and an array of daily records with date, closing price, and volume, then sends this as a JSON response. If an error occurs during data retrieval or processing, it logs the error and responds with a 500 status and an error message.",
                "high_structured": "• Defines an async GET endpoint at '/api/stock/:symbol'\n• Processes the request as follows:\n  ◦ Converts the provided symbol to uppercase\n  ◦ Fetches stock chart data from Yahoo Finance with daily intervals starting from 2024-01-01\n• Extracts relevant information from the fetched data:\n  ◦ Retrieves the company's short name (if available) or defaults to the symbol\n  ◦ Maps the quotes to an array of objects containing date, close price, and volume\n• Constructs a response object with:\n  ◦ 'ticker' (symbol), 'name' (company name), and 'data' (array of daily records)\n• Logs the response and sends it as JSON\n• Handles errors by logging and returning a 500 error response with an error message"
            }
        },
        "id": "k8Mt1zA4M0Tii8E3iRVv"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-22 22:50:34.000",
        "source": "backend",
        "data": {
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "line": 15,
                            "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                        }
                    ],
                    "summaryComponent": "defines an Express route"
                },
                {
                    "codeSegments": [
                        {
                            "line": 37,
                            "code": "res.json(response);"
                        }
                    ],
                    "summaryComponent": "returns stock data"
                },
                {
                    "codeSegments": [
                        {
                            "line": 17,
                            "code": "const symbol = req.params.symbol.toUpperCase();"
                        }
                    ],
                    "summaryComponent": "for a given symbol"
                }
            ],
            "code": "15: app.get(\"/api/stock/:symbol\", async (req, res) => {\n16:   try {\n17:     const symbol = req.params.symbol.toUpperCase();\n18:     const data = await yahooFinance.chart(symbol, {\n19:       period1: \"2024-01-01\",\n20:       interval: \"1d\",\n21:     });\n22:     const quotes = data.quotes;\n23: \n24:     const companyName = data.meta?.shortName || symbol;\n25: \n26:     const response = {\n27:       ticker: symbol,\n28:       name: companyName,\n29:       data: quotes.map((q) => ({\n30:         date: q.date,\n31:         close: q.close,\n32:         volume: q.volume,\n33:       })),\n34:     };\n35: \n36:     console.log(response);\n37:     res.json(response);\n38:   } catch (err) {\n39:     console.error(err);\n40:     res.status(500).send(\"Error fetching stock data\");\n41:   }\n42: });",
            "summary": "This code defines an Express route that returns stock data for a given symbol."
        },
        "id": "galUcMwkhV7btzlmEG1l"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-22 22:50:34.000",
        "source": "backend",
        "data": {
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "line": 15,
                            "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                        }
                    ],
                    "summaryComponent": "Defines a GET endpoint for stock data"
                },
                {
                    "codeSegments": [
                        {
                            "line": 18,
                            "code": "const data = await yahooFinance.chart(symbol, {"
                        },
                        {
                            "line": 37,
                            "code": "res.json(response);"
                        }
                    ],
                    "summaryComponent": "Fetches and returns basic stock information"
                }
            ],
            "code": "15: app.get(\"/api/stock/:symbol\", async (req, res) => {\n16:   try {\n17:     const symbol = req.params.symbol.toUpperCase();\n18:     const data = await yahooFinance.chart(symbol, {\n19:       period1: \"2024-01-01\",\n20:       interval: \"1d\",\n21:     });\n22:     const quotes = data.quotes;\n23: \n24:     const companyName = data.meta?.shortName || symbol;\n25: \n26:     const response = {\n27:       ticker: symbol,\n28:       name: companyName,\n29:       data: quotes.map((q) => ({\n30:         date: q.date,\n31:         close: q.close,\n32:         volume: q.volume,\n33:       })),\n34:     };\n35: \n36:     console.log(response);\n37:     res.json(response);\n38:   } catch (err) {\n39:     console.error(err);\n40:     res.status(500).send(\"Error fetching stock data\");\n41:   }\n42: });",
            "summary": "• Defines a GET endpoint for stock data\n• Fetches and returns basic stock information"
        },
        "id": "mcCc4agruuuUb3apHFyc"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-22 22:50:35.000",
        "source": "backend",
        "data": {
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "line": 15,
                            "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                        }
                    ],
                    "summaryComponent": "This Express route handles GET requests to '/api/stock/:symbol'"
                },
                {
                    "codeSegments": [
                        {
                            "line": 17,
                            "code": "const symbol = req.params.symbol.toUpperCase();"
                        },
                        {
                            "line": 18,
                            "code": "const data = await yahooFinance.chart(symbol, {"
                        }
                    ],
                    "summaryComponent": "by fetching stock chart data for the given symbol from Yahoo Finance"
                },
                {
                    "codeSegments": [
                        {
                            "line": 22,
                            "code": "data.quotes;"
                        },
                        {
                            "line": 29,
                            "code": "data: quotes.map((q) => ({"
                        },
                        {
                            "line": 30,
                            "code": "date: q.date,"
                        },
                        {
                            "line": 31,
                            "code": "close: q.close,"
                        },
                        {
                            "line": 32,
                            "code": "volume: q.volume,"
                        }
                    ],
                    "summaryComponent": "It processes the data to extract date, close price, and volume"
                },
                {
                    "codeSegments": [
                        {
                            "line": 37,
                            "code": "res.json(response);"
                        }
                    ],
                    "summaryComponent": "then returns this information in a JSON response"
                },
                {
                    "codeSegments": [
                        {
                            "line": 38,
                            "code": "catch (err) {"
                        },
                        {
                            "line": 40,
                            "code": "res.status(500).send(\"Error fetching stock data\");"
                        }
                    ],
                    "summaryComponent": "Errors are caught and result in a 500 status response"
                }
            ],
            "code": "15: app.get(\"/api/stock/:symbol\", async (req, res) => {\n16:   try {\n17:     const symbol = req.params.symbol.toUpperCase();\n18:     const data = await yahooFinance.chart(symbol, {\n19:       period1: \"2024-01-01\",\n20:       interval: \"1d\",\n21:     });\n22:     const quotes = data.quotes;\n23: \n24:     const companyName = data.meta?.shortName || symbol;\n25: \n26:     const response = {\n27:       ticker: symbol,\n28:       name: companyName,\n29:       data: quotes.map((q) => ({\n30:         date: q.date,\n31:         close: q.close,\n32:         volume: q.volume,\n33:       })),\n34:     };\n35: \n36:     console.log(response);\n37:     res.json(response);\n38:   } catch (err) {\n39:     console.error(err);\n40:     res.status(500).send(\"Error fetching stock data\");\n41:   }\n42: });",
            "summary": "This Express route handles GET requests to '/api/stock/:symbol' by fetching stock chart data for the given symbol from Yahoo Finance. It processes the data to extract date, close price, and volume, then returns this information in a JSON response. Errors are caught and result in a 500 status response."
        },
        "id": "NOy2O1zSriJYldxr3wnv"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-22 22:50:35.000",
        "source": "backend",
        "data": {
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "line": 15,
                            "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                        }
                    ],
                    "summaryComponent": "Handles GET requests at '/api/stock/:symbol'"
                },
                {
                    "codeSegments": [
                        {
                            "line": 18,
                            "code": "const data = await yahooFinance.chart(symbol, {"
                        },
                        {
                            "line": 19,
                            "code": "period1: \"2024-01-01\","
                        },
                        {
                            "line": 20,
                            "code": "interval: \"1d\","
                        }
                    ],
                    "summaryComponent": "Fetches daily stock chart data from Yahoo Finance starting from 2024-01-01"
                },
                {
                    "codeSegments": [
                        {
                            "line": 26,
                            "code": "const response = {"
                        },
                        {
                            "line": 37,
                            "code": "res.json(response);"
                        }
                    ],
                    "summaryComponent": "Processes and returns a JSON response with:"
                },
                {
                    "codeSegments": [
                        {
                            "line": 27,
                            "code": "ticker: symbol,"
                        },
                        {
                            "line": 28,
                            "code": "name: companyName,"
                        }
                    ],
                    "summaryComponent": "Ticker symbol and company name"
                },
                {
                    "codeSegments": [
                        {
                            "line": 29,
                            "code": "data: quotes.map((q) => ({"
                        },
                        {
                            "line": 30,
                            "code": "date: q.date,"
                        },
                        {
                            "line": 31,
                            "code": "close: q.close,"
                        },
                        {
                            "line": 32,
                            "code": "volume: q.volume,"
                        }
                    ],
                    "summaryComponent": "An array of objects containing date, close price, and volume"
                },
                {
                    "codeSegments": [
                        {
                            "line": 40,
                            "code": "res.status(500).send(\"Error fetching stock data\");"
                        }
                    ],
                    "summaryComponent": "Sends a 500 error response if data fetching fails"
                }
            ],
            "code": "15: app.get(\"/api/stock/:symbol\", async (req, res) => {\n16:   try {\n17:     const symbol = req.params.symbol.toUpperCase();\n18:     const data = await yahooFinance.chart(symbol, {\n19:       period1: \"2024-01-01\",\n20:       interval: \"1d\",\n21:     });\n22:     const quotes = data.quotes;\n23: \n24:     const companyName = data.meta?.shortName || symbol;\n25: \n26:     const response = {\n27:       ticker: symbol,\n28:       name: companyName,\n29:       data: quotes.map((q) => ({\n30:         date: q.date,\n31:         close: q.close,\n32:         volume: q.volume,\n33:       })),\n34:     };\n35: \n36:     console.log(response);\n37:     res.json(response);\n38:   } catch (err) {\n39:     console.error(err);\n40:     res.status(500).send(\"Error fetching stock data\");\n41:   }\n42: });",
            "summary": "• Handles GET requests at '/api/stock/:symbol'\n• Fetches daily stock chart data from Yahoo Finance starting from 2024-01-01\n• Processes and returns a JSON response with:\n  ◦ Ticker symbol and company name\n  ◦ An array of objects containing date, close price, and volume\n• Sends a 500 error response if data fetching fails"
        },
        "id": "ZrxnzwhbH74r0cS1Jo4P"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-22 22:50:36.000",
        "source": "backend",
        "data": {
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "line": 15,
                            "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                        }
                    ],
                    "summaryComponent": "Defines an async GET endpoint at '/api/stock/:symbol'"
                },
                {
                    "codeSegments": [
                        {
                            "line": 17,
                            "code": "const symbol = req.params.symbol.toUpperCase();"
                        }
                    ],
                    "summaryComponent": "Converts the provided symbol to uppercase"
                },
                {
                    "codeSegments": [
                        {
                            "line": 18,
                            "code": "const data = await yahooFinance.chart(symbol, {"
                        },
                        {
                            "line": 19,
                            "code": "period1: \"2024-01-01\","
                        },
                        {
                            "line": 20,
                            "code": "interval: \"1d\","
                        }
                    ],
                    "summaryComponent": "Fetches stock chart data from Yahoo Finance with daily intervals starting from 2024-01-01"
                },
                {
                    "codeSegments": [
                        {
                            "line": 24,
                            "code": "const companyName = data.meta?.shortName || symbol;"
                        }
                    ],
                    "summaryComponent": "Retrieves the company's short name (if available) or defaults to the symbol"
                },
                {
                    "codeSegments": [
                        {
                            "line": 29,
                            "code": "data: quotes.map((q) => ({"
                        },
                        {
                            "line": 30,
                            "code": "date: q.date,"
                        },
                        {
                            "line": 31,
                            "code": "close: q.close,"
                        },
                        {
                            "line": 32,
                            "code": "volume: q.volume,"
                        }
                    ],
                    "summaryComponent": "Maps the quotes to an array of objects containing date, close price, and volume"
                },
                {
                    "codeSegments": [
                        {
                            "line": 26,
                            "code": "const response = {"
                        }
                    ],
                    "summaryComponent": "Constructs a response object with:"
                },
                {
                    "codeSegments": [
                        {
                            "line": 27,
                            "code": "ticker: symbol,"
                        },
                        {
                            "line": 28,
                            "code": "name: companyName,"
                        },
                        {
                            "line": 29,
                            "code": "data: quotes.map((q) => ({"
                        }
                    ],
                    "summaryComponent": "'ticker' (symbol), 'name' (company name), and 'data' (array of daily records)"
                },
                {
                    "codeSegments": [
                        {
                            "line": 36,
                            "code": "console.log(response);"
                        },
                        {
                            "line": 37,
                            "code": "res.json(response);"
                        }
                    ],
                    "summaryComponent": "Logs the response and sends it as JSON"
                },
                {
                    "codeSegments": [
                        {
                            "line": 39,
                            "code": "console.error(err);"
                        },
                        {
                            "line": 40,
                            "code": "res.status(500).send(\"Error fetching stock data\");"
                        }
                    ],
                    "summaryComponent": "Handles errors by logging and returning a 500 error response with an error message"
                }
            ],
            "code": "15: app.get(\"/api/stock/:symbol\", async (req, res) => {\n16:   try {\n17:     const symbol = req.params.symbol.toUpperCase();\n18:     const data = await yahooFinance.chart(symbol, {\n19:       period1: \"2024-01-01\",\n20:       interval: \"1d\",\n21:     });\n22:     const quotes = data.quotes;\n23: \n24:     const companyName = data.meta?.shortName || symbol;\n25: \n26:     const response = {\n27:       ticker: symbol,\n28:       name: companyName,\n29:       data: quotes.map((q) => ({\n30:         date: q.date,\n31:         close: q.close,\n32:         volume: q.volume,\n33:       })),\n34:     };\n35: \n36:     console.log(response);\n37:     res.json(response);\n38:   } catch (err) {\n39:     console.error(err);\n40:     res.status(500).send(\"Error fetching stock data\");\n41:   }\n42: });",
            "summary": "• Defines an async GET endpoint at '/api/stock/:symbol'\n• Processes the request as follows:\n  ◦ Converts the provided symbol to uppercase\n  ◦ Fetches stock chart data from Yahoo Finance with daily intervals starting from 2024-01-01\n• Extracts relevant information from the fetched data:\n  ◦ Retrieves the company's short name (if available) or defaults to the symbol\n  ◦ Maps the quotes to an array of objects containing date, close price, and volume\n• Constructs a response object with:\n  ◦ 'ticker' (symbol), 'name' (company name), and 'data' (array of daily records)\n• Logs the response and sends it as JSON\n• Handles errors by logging and returning a 500 error response with an error message"
        },
        "id": "1LbiREfA4ZggQS6maB2d"
    },
    {
        "event": "create_new_section",
        "timestamp": "2025-08-22 22:50:37.000",
        "source": "frontend",
        "data": {
            "section_id": "dfb42152-242a-455d-a947-652e222b8149",
            "section_data": {
                "summaryData": {
                    "low_structured": "• Defines a GET endpoint for stock data\n• Fetches and returns basic stock information",
                    "low_unstructured": "This code defines an Express route that returns stock data for a given symbol.",
                    "title": "Express Route for Fetching Stock Data from Yahoo Finance",
                    "medium_unstructured": "This Express route handles GET requests to '/api/stock/:symbol' by fetching stock chart data for the given symbol from Yahoo Finance. It processes the data to extract date, close price, and volume, then returns this information in a JSON response. Errors are caught and result in a 500 status response.",
                    "medium_structured": "• Handles GET requests at '/api/stock/:symbol'\n• Fetches daily stock chart data from Yahoo Finance starting from 2024-01-01\n• Processes and returns a JSON response with:\n  ◦ Ticker symbol and company name\n  ◦ An array of objects containing date, close price, and volume\n• Sends a 500 error response if data fetching fails",
                    "high_unstructured": "This code defines an asynchronous Express GET endpoint at '/api/stock/:symbol' that retrieves daily stock chart data for the specified symbol from Yahoo Finance, starting from January 1, 2024. It converts the symbol to uppercase, fetches the chart data, and extracts the company's short name if available. The endpoint constructs a response object containing the ticker, company name, and an array of daily records with date, closing price, and volume, then sends this as a JSON response. If an error occurs during data retrieval or processing, it logs the error and responds with a 500 status and an error message.",
                    "high_structured": "• Defines an async GET endpoint at '/api/stock/:symbol'\n• Processes the request as follows:\n  ◦ Converts the provided symbol to uppercase\n  ◦ Fetches stock chart data from Yahoo Finance with daily intervals starting from 2024-01-01\n• Extracts relevant information from the fetched data:\n  ◦ Retrieves the company's short name (if available) or defaults to the symbol\n  ◦ Maps the quotes to an array of objects containing date, close price, and volume\n• Constructs a response object with:\n  ◦ 'ticker' (symbol), 'name' (company name), and 'data' (array of daily records)\n• Logs the response and sends it as JSON\n• Handles errors by logging and returning a 500 error response with an error message"
                },
                "editPromptValue": "",
                "title": "Express Route for Fetching Stock Data from Yahoo Finance",
                "editPromptStructured": null,
                "selectedDetailLevel": "medium",
                "metadata": {
                    "filename": "index.js",
                    "fullPath": "/project/workspace/server/index.js",
                    "id": "dfb42152-242a-455d-a947-652e222b8149",
                    "originalCode": "app.get(\"/api/stock/:symbol\", async (req, res) => {\n  try {\n    const symbol = req.params.symbol.toUpperCase();\n    const data = await yahooFinance.chart(symbol, {\n      period1: \"2024-01-01\",\n      interval: \"1d\",\n    });\n    const quotes = data.quotes;\n\n    const companyName = data.meta?.shortName || symbol;\n\n    const response = {\n      ticker: symbol,\n      name: companyName,\n      data: quotes.map((q) => ({\n        date: q.date,\n        close: q.close,\n        volume: q.volume,\n      })),\n    };\n\n    console.log(response);\n    res.json(response);\n  } catch (err) {\n    console.error(err);\n    res.status(500).send(\"Error fetching stock data\");\n  }\n});",
                    "offset": 304
                },
                "createdAt": 1755888637000,
                "lines": [
                    15,
                    42
                ],
                "summaryMappings": {
                    "low_structured": [
                        {
                            "codeSegments": [
                                {
                                    "line": 15,
                                    "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                                }
                            ],
                            "summaryComponent": "Defines a GET endpoint for stock data"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 18,
                                    "code": "const data = await yahooFinance.chart(symbol, {"
                                },
                                {
                                    "line": 37,
                                    "code": "res.json(response);"
                                }
                            ],
                            "summaryComponent": "Fetches and returns basic stock information"
                        }
                    ],
                    "low_unstructured": [
                        {
                            "codeSegments": [
                                {
                                    "line": 15,
                                    "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                                }
                            ],
                            "summaryComponent": "defines an Express route"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 37,
                                    "code": "res.json(response);"
                                }
                            ],
                            "summaryComponent": "returns stock data"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 17,
                                    "code": "const symbol = req.params.symbol.toUpperCase();"
                                }
                            ],
                            "summaryComponent": "for a given symbol"
                        }
                    ],
                    "medium_structured": [
                        {
                            "codeSegments": [
                                {
                                    "line": 15,
                                    "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                                }
                            ],
                            "summaryComponent": "Handles GET requests at '/api/stock/:symbol'"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 18,
                                    "code": "const data = await yahooFinance.chart(symbol, {"
                                },
                                {
                                    "line": 19,
                                    "code": "period1: \"2024-01-01\","
                                },
                                {
                                    "line": 20,
                                    "code": "interval: \"1d\","
                                }
                            ],
                            "summaryComponent": "Fetches daily stock chart data from Yahoo Finance starting from 2024-01-01"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 26,
                                    "code": "const response = {"
                                },
                                {
                                    "line": 37,
                                    "code": "res.json(response);"
                                }
                            ],
                            "summaryComponent": "Processes and returns a JSON response with:"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 27,
                                    "code": "ticker: symbol,"
                                },
                                {
                                    "line": 28,
                                    "code": "name: companyName,"
                                }
                            ],
                            "summaryComponent": "Ticker symbol and company name"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 29,
                                    "code": "data: quotes.map((q) => ({"
                                },
                                {
                                    "line": 30,
                                    "code": "date: q.date,"
                                },
                                {
                                    "line": 31,
                                    "code": "close: q.close,"
                                },
                                {
                                    "line": 32,
                                    "code": "volume: q.volume,"
                                }
                            ],
                            "summaryComponent": "An array of objects containing date, close price, and volume"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 40,
                                    "code": "res.status(500).send(\"Error fetching stock data\");"
                                }
                            ],
                            "summaryComponent": "Sends a 500 error response if data fetching fails"
                        }
                    ],
                    "medium_unstructured": [
                        {
                            "codeSegments": [
                                {
                                    "line": 15,
                                    "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                                }
                            ],
                            "summaryComponent": "This Express route handles GET requests to '/api/stock/:symbol'"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 17,
                                    "code": "const symbol = req.params.symbol.toUpperCase();"
                                },
                                {
                                    "line": 18,
                                    "code": "const data = await yahooFinance.chart(symbol, {"
                                }
                            ],
                            "summaryComponent": "by fetching stock chart data for the given symbol from Yahoo Finance"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 22,
                                    "code": "data.quotes;"
                                },
                                {
                                    "line": 29,
                                    "code": "data: quotes.map((q) => ({"
                                },
                                {
                                    "line": 30,
                                    "code": "date: q.date,"
                                },
                                {
                                    "line": 31,
                                    "code": "close: q.close,"
                                },
                                {
                                    "line": 32,
                                    "code": "volume: q.volume,"
                                }
                            ],
                            "summaryComponent": "It processes the data to extract date, close price, and volume"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 37,
                                    "code": "res.json(response);"
                                }
                            ],
                            "summaryComponent": "then returns this information in a JSON response"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 38,
                                    "code": "catch (err) {"
                                },
                                {
                                    "line": 40,
                                    "code": "res.status(500).send(\"Error fetching stock data\");"
                                }
                            ],
                            "summaryComponent": "Errors are caught and result in a 500 status response"
                        }
                    ],
                    "high_unstructured": [
                        {
                            "codeSegments": [
                                {
                                    "line": 15,
                                    "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                                }
                            ],
                            "summaryComponent": "an asynchronous Express GET endpoint at '/api/stock/:symbol'"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 17,
                                    "code": "const symbol = req.params.symbol.toUpperCase();"
                                },
                                {
                                    "line": 18,
                                    "code": "const data = await yahooFinance.chart(symbol, {"
                                }
                            ],
                            "summaryComponent": "retrieves daily stock chart data for the specified symbol from Yahoo Finance"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 19,
                                    "code": "period1: \"2024-01-01\","
                                }
                            ],
                            "summaryComponent": "starting from January 1, 2024"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 17,
                                    "code": "const symbol = req.params.symbol.toUpperCase();"
                                }
                            ],
                            "summaryComponent": "It converts the symbol to uppercase"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 18,
                                    "code": "const data = await yahooFinance.chart(symbol, {"
                                }
                            ],
                            "summaryComponent": "fetches the chart data"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 24,
                                    "code": "const companyName = data.meta?.shortName || symbol;"
                                }
                            ],
                            "summaryComponent": "extracts the company's short name if available"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 26,
                                    "code": "const response = {"
                                },
                                {
                                    "line": 27,
                                    "code": "ticker: symbol,"
                                },
                                {
                                    "line": 28,
                                    "code": "name: companyName,"
                                },
                                {
                                    "line": 29,
                                    "code": "data: quotes.map((q) => ({"
                                },
                                {
                                    "line": 30,
                                    "code": "date: q.date,"
                                },
                                {
                                    "line": 31,
                                    "code": "close: q.close,"
                                },
                                {
                                    "line": 32,
                                    "code": "volume: q.volume,"
                                }
                            ],
                            "summaryComponent": "constructs a response object containing the ticker, company name, and an array of daily records with date, closing price, and volume"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 37,
                                    "code": "res.json(response);"
                                }
                            ],
                            "summaryComponent": "sends this as a JSON response"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 38,
                                    "code": "catch (err) {"
                                }
                            ],
                            "summaryComponent": "If an error occurs during data retrieval or processing"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 39,
                                    "code": "console.error(err);"
                                },
                                {
                                    "line": 40,
                                    "code": "res.status(500).send(\"Error fetching stock data\");"
                                }
                            ],
                            "summaryComponent": "logs the error and responds with a 500 status and an error message"
                        }
                    ],
                    "high_structured": [
                        {
                            "codeSegments": [
                                {
                                    "line": 15,
                                    "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                                }
                            ],
                            "summaryComponent": "Defines an async GET endpoint at '/api/stock/:symbol'"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 17,
                                    "code": "const symbol = req.params.symbol.toUpperCase();"
                                }
                            ],
                            "summaryComponent": "Converts the provided symbol to uppercase"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 18,
                                    "code": "const data = await yahooFinance.chart(symbol, {"
                                },
                                {
                                    "line": 19,
                                    "code": "period1: \"2024-01-01\","
                                },
                                {
                                    "line": 20,
                                    "code": "interval: \"1d\","
                                }
                            ],
                            "summaryComponent": "Fetches stock chart data from Yahoo Finance with daily intervals starting from 2024-01-01"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 24,
                                    "code": "const companyName = data.meta?.shortName || symbol;"
                                }
                            ],
                            "summaryComponent": "Retrieves the company's short name (if available) or defaults to the symbol"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 29,
                                    "code": "data: quotes.map((q) => ({"
                                },
                                {
                                    "line": 30,
                                    "code": "date: q.date,"
                                },
                                {
                                    "line": 31,
                                    "code": "close: q.close,"
                                },
                                {
                                    "line": 32,
                                    "code": "volume: q.volume,"
                                }
                            ],
                            "summaryComponent": "Maps the quotes to an array of objects containing date, close price, and volume"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 26,
                                    "code": "const response = {"
                                }
                            ],
                            "summaryComponent": "Constructs a response object with:"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 27,
                                    "code": "ticker: symbol,"
                                },
                                {
                                    "line": 28,
                                    "code": "name: companyName,"
                                },
                                {
                                    "line": 29,
                                    "code": "data: quotes.map((q) => ({"
                                }
                            ],
                            "summaryComponent": "'ticker' (symbol), 'name' (company name), and 'data' (array of daily records)"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 36,
                                    "code": "console.log(response);"
                                },
                                {
                                    "line": 37,
                                    "code": "res.json(response);"
                                }
                            ],
                            "summaryComponent": "Logs the response and sends it as JSON"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 39,
                                    "code": "console.error(err);"
                                },
                                {
                                    "line": 40,
                                    "code": "res.status(500).send(\"Error fetching stock data\");"
                                }
                            ],
                            "summaryComponent": "Handles errors by logging and returning a 500 error response with an error message"
                        }
                    ]
                },
                "editPromptDetailLevel": null,
                "selectedStructured": "unstructured"
            }
        },
        "id": "FFcM5AWMz0pB2uXjheHv"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-22 22:50:37.000",
        "source": "backend",
        "data": {
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "line": 15,
                            "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                        }
                    ],
                    "summaryComponent": "an asynchronous Express GET endpoint at '/api/stock/:symbol'"
                },
                {
                    "codeSegments": [
                        {
                            "line": 17,
                            "code": "const symbol = req.params.symbol.toUpperCase();"
                        },
                        {
                            "line": 18,
                            "code": "const data = await yahooFinance.chart(symbol, {"
                        }
                    ],
                    "summaryComponent": "retrieves daily stock chart data for the specified symbol from Yahoo Finance"
                },
                {
                    "codeSegments": [
                        {
                            "line": 19,
                            "code": "period1: \"2024-01-01\","
                        }
                    ],
                    "summaryComponent": "starting from January 1, 2024"
                },
                {
                    "codeSegments": [
                        {
                            "line": 17,
                            "code": "const symbol = req.params.symbol.toUpperCase();"
                        }
                    ],
                    "summaryComponent": "It converts the symbol to uppercase"
                },
                {
                    "codeSegments": [
                        {
                            "line": 18,
                            "code": "const data = await yahooFinance.chart(symbol, {"
                        }
                    ],
                    "summaryComponent": "fetches the chart data"
                },
                {
                    "codeSegments": [
                        {
                            "line": 24,
                            "code": "const companyName = data.meta?.shortName || symbol;"
                        }
                    ],
                    "summaryComponent": "extracts the company's short name if available"
                },
                {
                    "codeSegments": [
                        {
                            "line": 26,
                            "code": "const response = {"
                        },
                        {
                            "line": 27,
                            "code": "ticker: symbol,"
                        },
                        {
                            "line": 28,
                            "code": "name: companyName,"
                        },
                        {
                            "line": 29,
                            "code": "data: quotes.map((q) => ({"
                        },
                        {
                            "line": 30,
                            "code": "date: q.date,"
                        },
                        {
                            "line": 31,
                            "code": "close: q.close,"
                        },
                        {
                            "line": 32,
                            "code": "volume: q.volume,"
                        }
                    ],
                    "summaryComponent": "constructs a response object containing the ticker, company name, and an array of daily records with date, closing price, and volume"
                },
                {
                    "codeSegments": [
                        {
                            "line": 37,
                            "code": "res.json(response);"
                        }
                    ],
                    "summaryComponent": "sends this as a JSON response"
                },
                {
                    "codeSegments": [
                        {
                            "line": 38,
                            "code": "catch (err) {"
                        }
                    ],
                    "summaryComponent": "If an error occurs during data retrieval or processing"
                },
                {
                    "codeSegments": [
                        {
                            "line": 39,
                            "code": "console.error(err);"
                        },
                        {
                            "line": 40,
                            "code": "res.status(500).send(\"Error fetching stock data\");"
                        }
                    ],
                    "summaryComponent": "logs the error and responds with a 500 status and an error message"
                }
            ],
            "code": "15: app.get(\"/api/stock/:symbol\", async (req, res) => {\n16:   try {\n17:     const symbol = req.params.symbol.toUpperCase();\n18:     const data = await yahooFinance.chart(symbol, {\n19:       period1: \"2024-01-01\",\n20:       interval: \"1d\",\n21:     });\n22:     const quotes = data.quotes;\n23: \n24:     const companyName = data.meta?.shortName || symbol;\n25: \n26:     const response = {\n27:       ticker: symbol,\n28:       name: companyName,\n29:       data: quotes.map((q) => ({\n30:         date: q.date,\n31:         close: q.close,\n32:         volume: q.volume,\n33:       })),\n34:     };\n35: \n36:     console.log(response);\n37:     res.json(response);\n38:   } catch (err) {\n39:     console.error(err);\n40:     res.status(500).send(\"Error fetching stock data\");\n41:   }\n42: });",
            "summary": "This code defines an asynchronous Express GET endpoint at '/api/stock/:symbol' that retrieves daily stock chart data for the specified symbol from Yahoo Finance, starting from January 1, 2024. It converts the symbol to uppercase, fetches the chart data, and extracts the company's short name if available. The endpoint constructs a response object containing the ticker, company name, and an array of daily records with date, closing price, and volume, then sends this as a JSON response. If an error occurs during data retrieval or processing, it logs the error and responds with a 500 status and an error message."
        },
        "id": "M8jfEHqwFHpIseUhEfH9"
    },
    {
        "event": "autotransit_section",
        "timestamp": "2025-08-22 22:50:37.000",
        "source": "frontend",
        "data": {
            "before_section_id": "1b4fdd55-3884-4428-be73-d5faf989ccbe",
            "after_section_id": "dfb42152-242a-455d-a947-652e222b8149"
        },
        "id": "UyCoAufPddDx1xXPdFag"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:50:39.000",
        "source": "frontend",
        "data": {
            "section_id": "dfb42152-242a-455d-a947-652e222b8149",
            "mapping_index": 0,
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "GBWZ02IXwaJB2nt8VTmx"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:50:39.000",
        "source": "frontend",
        "data": {
            "section_id": "dfb42152-242a-455d-a947-652e222b8149",
            "mapping_index": 1,
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "TbfG0So60tB0TSHm5lyo"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:50:39.000",
        "source": "frontend",
        "data": {
            "section_id": "dfb42152-242a-455d-a947-652e222b8149",
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "yrb6U87cfbNsc4LUVs0L"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:50:39.000",
        "source": "frontend",
        "data": {
            "section_id": "dfb42152-242a-455d-a947-652e222b8149",
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "zqOubTD4yoilfPzOo3I6"
    },
    {
        "event": "change_summary_level",
        "timestamp": "2025-08-22 22:50:40.000",
        "source": "frontend",
        "data": {
            "before_detail_level": "medium",
            "section_id": "dfb42152-242a-455d-a947-652e222b8149",
            "after_detail_level": "high",
            "before_structured": "unstructured",
            "after_structured": "unstructured"
        },
        "id": "n81gGslTjBzP1RkTi4dH"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:52:58.000",
        "source": "frontend",
        "data": {
            "section_id": "dfb42152-242a-455d-a947-652e222b8149",
            "mapping_index": 1,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "2KbMSjSD9xmrEBeXAhl5"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:52:58.000",
        "source": "frontend",
        "data": {
            "section_id": "dfb42152-242a-455d-a947-652e222b8149",
            "mapping_index": 2,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "7Yem0SCFbS96I84WT6fu"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:52:58.000",
        "source": "frontend",
        "data": {
            "section_id": "dfb42152-242a-455d-a947-652e222b8149",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "JV1TYGEMKMIlBrozxFkx"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:52:58.000",
        "source": "frontend",
        "data": {
            "section_id": "dfb42152-242a-455d-a947-652e222b8149",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "LNjupMeoimig4IBRFaSu"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:52:58.000",
        "source": "frontend",
        "data": {
            "section_id": "dfb42152-242a-455d-a947-652e222b8149",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "oqrPBx1qVEJtwOAakm04"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:52:58.000",
        "source": "frontend",
        "data": {
            "section_id": "dfb42152-242a-455d-a947-652e222b8149",
            "mapping_index": 0,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "pTtRiKxlwTGd8O8Z31Fr"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:52:58.000",
        "source": "frontend",
        "data": {
            "section_id": "dfb42152-242a-455d-a947-652e222b8149",
            "mapping_index": 4,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "uVpLR8Yxpbklbo6GukwS"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:52:59.000",
        "source": "frontend",
        "data": {
            "section_id": "dfb42152-242a-455d-a947-652e222b8149",
            "mapping_index": 2,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "0enyust18eB2rZgICrnG"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:52:59.000",
        "source": "frontend",
        "data": {
            "section_id": "dfb42152-242a-455d-a947-652e222b8149",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "3F5Zitg2hghnPs51U0JZ"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:52:59.000",
        "source": "frontend",
        "data": {
            "section_id": "dfb42152-242a-455d-a947-652e222b8149",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "AWPUDyj3HKOshJug29Rm"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:52:59.000",
        "source": "frontend",
        "data": {
            "section_id": "dfb42152-242a-455d-a947-652e222b8149",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "B8ij9QexHvBQAX00uc7X"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:52:59.000",
        "source": "frontend",
        "data": {
            "section_id": "dfb42152-242a-455d-a947-652e222b8149",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "EYXYaN27kuAz99rRYuaF"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:52:59.000",
        "source": "frontend",
        "data": {
            "section_id": "dfb42152-242a-455d-a947-652e222b8149",
            "mapping_index": 8,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "VzpXAZlcRj3bk1a7222O"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:52:59.000",
        "source": "frontend",
        "data": {
            "section_id": "dfb42152-242a-455d-a947-652e222b8149",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "WWA9RVaUsZzbEvEUDMDu"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:52:59.000",
        "source": "frontend",
        "data": {
            "section_id": "dfb42152-242a-455d-a947-652e222b8149",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "fbvm8QEBl0zQVoiHu0C5"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:52:59.000",
        "source": "frontend",
        "data": {
            "section_id": "dfb42152-242a-455d-a947-652e222b8149",
            "mapping_index": 4,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "isX0chUb6Lm0wNJnvZGI"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:52:59.000",
        "source": "frontend",
        "data": {
            "section_id": "dfb42152-242a-455d-a947-652e222b8149",
            "mapping_index": 6,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "oeNiET11XY76VWGLFVI8"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:52:59.000",
        "source": "frontend",
        "data": {
            "section_id": "dfb42152-242a-455d-a947-652e222b8149",
            "mapping_index": 8,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "vfw1TiyAGQC4iASD9sV4"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:52:59.000",
        "source": "frontend",
        "data": {
            "section_id": "dfb42152-242a-455d-a947-652e222b8149",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "vmcbbVCt1BTLQ0NoPK8f"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:52:59.000",
        "source": "frontend",
        "data": {
            "section_id": "dfb42152-242a-455d-a947-652e222b8149",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "x06i6vDxX242u81By3qj"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:52:59.000",
        "source": "frontend",
        "data": {
            "section_id": "dfb42152-242a-455d-a947-652e222b8149",
            "mapping_index": 9,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "x9FbttCdfQE5trCJu730"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:52:59.000",
        "source": "frontend",
        "data": {
            "section_id": "dfb42152-242a-455d-a947-652e222b8149",
            "mapping_index": 9,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "zVa4akwj5Sb3gUGYtrLR"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:53:00.000",
        "source": "frontend",
        "data": {
            "section_id": "dfb42152-242a-455d-a947-652e222b8149",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "1sYN7fLCTadpUfEMVUJh"
    },
    {
        "event": "click_edit_in_prompt",
        "timestamp": "2025-08-22 22:53:00.000",
        "source": "frontend",
        "data": {
            "section_id": "dfb42152-242a-455d-a947-652e222b8149",
            "detail_level": "high",
            "structured": "unstructured",
            "summary": "This code defines an asynchronous Express GET endpoint at '/api/stock/:symbol' that retrieves daily stock chart data for the specified symbol from Yahoo Finance, starting from January 1, 2024. It converts the symbol to uppercase, fetches the chart data, and extracts the company's short name if available. The endpoint constructs a response object containing the ticker, company name, and an array of daily records with date, closing price, and volume, then sends this as a JSON response. If an error occurs during data retrieval or processing, it logs the error and responds with a 500 status and an error message."
        },
        "id": "9PpXaonJ2Skb7p339tRG"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:53:00.000",
        "source": "frontend",
        "data": {
            "section_id": "dfb42152-242a-455d-a947-652e222b8149",
            "mapping_index": 6,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "9dPsytYsjFHKeGmSllzN"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:53:00.000",
        "source": "frontend",
        "data": {
            "section_id": "dfb42152-242a-455d-a947-652e222b8149",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "9nr66D8XTDIAJ3WqXW4S"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:53:00.000",
        "source": "frontend",
        "data": {
            "section_id": "dfb42152-242a-455d-a947-652e222b8149",
            "mapping_index": 8,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "EUCVsKQ6T7BPNQHhZ7oe"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:53:00.000",
        "source": "frontend",
        "data": {
            "section_id": "dfb42152-242a-455d-a947-652e222b8149",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "Lp3kC8s1pnooKI6IuXNT"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:53:00.000",
        "source": "frontend",
        "data": {
            "section_id": "dfb42152-242a-455d-a947-652e222b8149",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "Rzdw9XRTPI5Virv09Gex"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:53:00.000",
        "source": "frontend",
        "data": {
            "section_id": "dfb42152-242a-455d-a947-652e222b8149",
            "mapping_index": 9,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "WnOMPCAaPgaOhjSPbvJN"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:53:00.000",
        "source": "frontend",
        "data": {
            "section_id": "dfb42152-242a-455d-a947-652e222b8149",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "lo8e5aaVEfH2JgBxS4VX"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:53:00.000",
        "source": "frontend",
        "data": {
            "section_id": "dfb42152-242a-455d-a947-652e222b8149",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "mjSNCWGFhSdRupsKiEwe"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:53:00.000",
        "source": "frontend",
        "data": {
            "section_id": "dfb42152-242a-455d-a947-652e222b8149",
            "mapping_index": 1,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "oNfjTENeFxd6vkx6sZP6"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:53:00.000",
        "source": "frontend",
        "data": {
            "section_id": "dfb42152-242a-455d-a947-652e222b8149",
            "mapping_index": 4,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "x06toXzd9OBCv7CTdGMf"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:53:00.000",
        "source": "frontend",
        "data": {
            "section_id": "dfb42152-242a-455d-a947-652e222b8149",
            "mapping_index": 2,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "zLshPvclBRDWeCCJisq8"
    },
    {
        "event": "apply_instruction_summary",
        "timestamp": "2025-08-22 22:53:21.000",
        "source": "frontend",
        "data": {
            "section_id": "dfb42152-242a-455d-a947-652e222b8149",
            "detail_level": "high",
            "instruction": "modify the code to fetch the stock price until today",
            "original_summary": "This code defines an asynchronous Express GET endpoint at '/api/stock/:symbol' that retrieves daily stock chart data for the specified symbol from Yahoo Finance, starting from January 1, 2024. It converts the symbol to uppercase, fetches the chart data, and extracts the company's short name if available. The endpoint constructs a response object containing the ticker, company name, and an array of daily records with date, closing price, and volume, then sends this as a JSON response. If an error occurs during data retrieval or processing, it logs the error and responds with a 500 status and an error message.",
            "structured": "unstructured"
        },
        "id": "56CvM2shuLlcp5K5Apeb"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 22:53:21.000",
        "source": "frontend",
        "data": {
            "section_id": "dfb42152-242a-455d-a947-652e222b8149",
            "mapping_index": 9,
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "fV4uaZVlrelLS1t44kIU"
    },
    {
        "event": "apply_instruction_summary",
        "timestamp": "2025-08-22 22:53:22.000",
        "source": "backend",
        "data": {
            "original_code": "app.get(\"/api/stock/:symbol\", async (req, res) => {\n  try {\n    const symbol = req.params.symbol.toUpperCase();\n    const data = await yahooFinance.chart(symbol, {\n      period1: \"2024-01-01\",\n      interval: \"1d\",\n    });\n    const quotes = data.quotes;\n\n    const companyName = data.meta?.shortName || symbol;\n\n    const response = {\n      ticker: symbol,\n      name: companyName,\n      data: quotes.map((q) => ({\n        date: q.date,\n        close: q.close,\n        volume: q.volume,\n      })),\n    };\n\n    console.log(response);\n    res.json(response);\n  } catch (err) {\n    console.error(err);\n    res.status(500).send(\"Error fetching stock data\");\n  }\n});",
            "original_summary": "This code defines an asynchronous Express GET endpoint at '/api/stock/:symbol' that retrieves daily stock chart data for the specified symbol from Yahoo Finance, starting from January 1, 2024. It converts the symbol to uppercase, fetches the chart data, and extracts the company's short name if available. The endpoint constructs a response object containing the ticker, company name, and an array of daily records with date, closing price, and volume, then sends this as a JSON response. If an error occurs during data retrieval or processing, it logs the error and responds with a 500 status and an error message.",
            "updated_summary": "This code defines an asynchronous Express GET endpoint at '/api/stock/:symbol' that retrieves daily stock chart data for the specified symbol from Yahoo Finance, starting from January 1, 2024 and continuing up to the current date. It converts the symbol to uppercase, fetches the chart data, and extracts the company's short name if available. The endpoint constructs a response object containing the ticker, company name, and an array of daily records with date, closing price, and volume, then sends this as a JSON response. If an error occurs during data retrieval or processing, it logs the error and responds with a 500 status and an error message.",
            "instruction": "modify the code to fetch the stock price until today"
        },
        "id": "1e6uQsZWXzPceo4boq6g"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 22:53:22.000",
        "source": "frontend",
        "data": {
            "section_id": "dfb42152-242a-455d-a947-652e222b8149",
            "detail_level": "high",
            "structured_type": "unstructured"
        },
        "id": "rQ0UTJnpT9cC72QnzbJf"
    },
    {
        "event": "apply_instruction_summary",
        "timestamp": "2025-08-22 22:54:36.000",
        "source": "frontend",
        "data": {
            "section_id": "dfb42152-242a-455d-a947-652e222b8149",
            "detail_level": "high",
            "instruction": "modify the code to fetch the stock price of today",
            "original_summary": "This code defines an asynchronous Express GET endpoint at '/api/stock/:symbol' that retrieves daily stock chart data for the specified symbol from Yahoo Finance, starting from January 1, 2024. It converts the symbol to uppercase, fetches the chart data, and extracts the company's short name if available. The endpoint constructs a response object containing the ticker, company name, and an array of daily records with date, closing price, and volume, then sends this as a JSON response. If an error occurs during data retrieval or processing, it logs the error and responds with a 500 status and an error message.",
            "structured": "unstructured"
        },
        "id": "iP9cdN0Yg5baedgOuxNR"
    },
    {
        "event": "apply_instruction_summary",
        "timestamp": "2025-08-22 22:54:37.000",
        "source": "backend",
        "data": {
            "original_code": "app.get(\"/api/stock/:symbol\", async (req, res) => {\n  try {\n    const symbol = req.params.symbol.toUpperCase();\n    const data = await yahooFinance.chart(symbol, {\n      period1: \"2024-01-01\",\n      interval: \"1d\",\n    });\n    const quotes = data.quotes;\n\n    const companyName = data.meta?.shortName || symbol;\n\n    const response = {\n      ticker: symbol,\n      name: companyName,\n      data: quotes.map((q) => ({\n        date: q.date,\n        close: q.close,\n        volume: q.volume,\n      })),\n    };\n\n    console.log(response);\n    res.json(response);\n  } catch (err) {\n    console.error(err);\n    res.status(500).send(\"Error fetching stock data\");\n  }\n});",
            "original_summary": "This code defines an asynchronous Express GET endpoint at '/api/stock/:symbol' that retrieves daily stock chart data for the specified symbol from Yahoo Finance, starting from January 1, 2024. It converts the symbol to uppercase, fetches the chart data, and extracts the company's short name if available. The endpoint constructs a response object containing the ticker, company name, and an array of daily records with date, closing price, and volume, then sends this as a JSON response. If an error occurs during data retrieval or processing, it logs the error and responds with a 500 status and an error message.",
            "updated_summary": "This code defines an asynchronous Express GET endpoint at '/api/stock/:symbol' that retrieves daily stock chart data for the specified symbol from Yahoo Finance, starting from January 1, 2024. It converts the symbol to uppercase, fetches the chart data, and extracts the company's short name if available. The endpoint constructs a response object containing the ticker, company name, and an array of daily records with date, closing price, and volume, then sends this as a JSON response. The code is modified to fetch and include the stock price for today in the response. If an error occurs during data retrieval or processing, it logs the error and responds with a 500 status and an error message.",
            "instruction": "modify the code to fetch the stock price of today"
        },
        "id": "AURDTadxv964xtHQrDNm"
    },
    {
        "event": "commit_modified_summary",
        "timestamp": "2025-08-22 22:54:42.000",
        "source": "frontend",
        "data": {
            "section_id": "dfb42152-242a-455d-a947-652e222b8149",
            "detail_level": "high",
            "original_summary": "This code defines an asynchronous Express GET endpoint at '/api/stock/:symbol' that retrieves daily stock chart data for the specified symbol from Yahoo Finance, starting from January 1, 2024. It converts the symbol to uppercase, fetches the chart data, and extracts the company's short name if available. The endpoint constructs a response object containing the ticker, company name, and an array of daily records with date, closing price, and volume, then sends this as a JSON response. If an error occurs during data retrieval or processing, it logs the error and responds with a 500 status and an error message.",
            "edited_summary": "This code defines an asynchronous Express GET endpoint at '/api/stock/:symbol' that retrieves daily stock chart data for the specified symbol from Yahoo Finance, starting from January 1, 2024. It converts the symbol to uppercase, fetches the chart data, and extracts the company's short name if available. The endpoint constructs a response object containing the ticker, company name, and an array of daily records with date, closing price, and volume, then sends this as a JSON response. The code is modified to fetch and include the stock price for today in the response. If an error occurs during data retrieval or processing, it logs the error and responds with a 500 status and an error message.",
            "structured": "unstructured"
        },
        "id": "x91b3eIVpMRGBWsDBIBD"
    },
    {
        "event": "modify_summary_mediation",
        "timestamp": "2025-08-22 22:54:45.000",
        "source": "backend",
        "data": {
            "detail_level": "high",
            "original_code": "app.get(\"/api/stock/:symbol\", async (req, res) => {\n  try {\n    const symbol = req.params.symbol.toUpperCase();\n    const data = await yahooFinance.chart(symbol, {\n      period1: \"2024-01-01\",\n      interval: \"1d\",\n    });\n    const quotes = data.quotes;\n\n    const companyName = data.meta?.shortName || symbol;\n\n    const response = {\n      ticker: symbol,\n      name: companyName,\n      data: quotes.map((q) => ({\n        date: q.date,\n        close: q.close,\n        volume: q.volume,\n      })),\n    };\n\n    console.log(response);\n    res.json(response);\n  } catch (err) {\n    console.error(err);\n    res.status(500).send(\"Error fetching stock data\");\n  }\n});",
            "original_summary": "This code defines an asynchronous Express GET endpoint at '/api/stock/:symbol' that retrieves daily stock chart data for the specified symbol from Yahoo Finance, starting from January 1, 2024. It converts the symbol to uppercase, fetches the chart data, and extracts the company's short name if available. The endpoint constructs a response object containing the ticker, company name, and an array of daily records with date, closing price, and volume, then sends this as a JSON response. If an error occurs during data retrieval or processing, it logs the error and responds with a 500 status and an error message.",
            "structured_type": "unstructured",
            "edited_summary": "This code defines an asynchronous Express GET endpoint at '/api/stock/:symbol' that retrieves daily stock chart data for the specified symbol from Yahoo Finance, starting from January 1, 2024. It converts the symbol to uppercase, fetches the chart data, and extracts the company's short name if available. The endpoint constructs a response object containing the ticker, company name, and an array of daily records with date, closing price, and volume, then sends this as a JSON response. The code is modified to fetch and include the stock price for today in the response. If an error occurs during data retrieval or processing, it logs the error and responds with a 500 status and an error message.",
            "updated_code": "app.get(\"/api/stock/:symbol\", async (req, res) => {\n  try {\n    const symbol = req.params.symbol.toUpperCase();\n    const data = await yahooFinance.chart(symbol, {\n      period1: \"2024-01-01\",\n      interval: \"1d\",\n    });\n    const quotes = data.quotes;\n\n    const companyName = data.meta?.shortName || symbol;\n\n    // Fetch today's price\n    let todayPrice = null;\n    try {\n      const quoteData = await yahooFinance.quote(symbol);\n      todayPrice = quoteData.regularMarketPrice;\n    } catch (priceErr) {\n      console.error(\"Error fetching today's price:\", priceErr);\n    }\n\n    const response = {\n      ticker: symbol,\n      name: companyName,\n      todayPrice: todayPrice,\n      data: quotes.map((q) => ({\n        date: q.date,\n        close: q.close,\n        volume: q.volume,\n      })),\n    };\n\n    console.log(response);\n    res.json(response);\n  } catch (err) {\n    console.error(err);\n    res.status(500).send(\"Error fetching stock data\");\n  }\n});"
        },
        "id": "xfmeTMgh0WnbXq3tfhZJ"
    },
    {
        "event": "summarize_modified_code",
        "timestamp": "2025-08-22 22:54:49.000",
        "source": "backend",
        "data": {
            "old_summary": {
                "low_structured": "• Defines a GET endpoint for stock data\n• Fetches and returns basic stock information",
                "low_unstructured": "This code defines an Express route that returns stock data for a given symbol.",
                "title": "Express Route for Fetching Stock Data from Yahoo Finance",
                "medium_unstructured": "This Express route handles GET requests to '/api/stock/:symbol' by fetching stock chart data for the given symbol from Yahoo Finance. It processes the data to extract date, close price, and volume, then returns this information in a JSON response. Errors are caught and result in a 500 status response.",
                "medium_structured": "• Handles GET requests at '/api/stock/:symbol'\n• Fetches daily stock chart data from Yahoo Finance starting from 2024-01-01\n• Processes and returns a JSON response with:\n  ◦ Ticker symbol and company name\n  ◦ An array of objects containing date, close price, and volume\n• Sends a 500 error response if data fetching fails",
                "high_unstructured": "This code defines an asynchronous Express GET endpoint at '/api/stock/:symbol' that retrieves daily stock chart data for the specified symbol from Yahoo Finance, starting from January 1, 2024. It converts the symbol to uppercase, fetches the chart data, and extracts the company's short name if available. The endpoint constructs a response object containing the ticker, company name, and an array of daily records with date, closing price, and volume, then sends this as a JSON response. If an error occurs during data retrieval or processing, it logs the error and responds with a 500 status and an error message.",
                "high_structured": "• Defines an async GET endpoint at '/api/stock/:symbol'\n• Processes the request as follows:\n  ◦ Converts the provided symbol to uppercase\n  ◦ Fetches stock chart data from Yahoo Finance with daily intervals starting from 2024-01-01\n• Extracts relevant information from the fetched data:\n  ◦ Retrieves the company's short name (if available) or defaults to the symbol\n  ◦ Maps the quotes to an array of objects containing date, close price, and volume\n• Constructs a response object with:\n  ◦ 'ticker' (symbol), 'name' (company name), and 'data' (array of daily records)\n• Logs the response and sends it as JSON\n• Handles errors by logging and returning a 500 error response with an error message"
            },
            "original_code": "app.get(\"/api/stock/:symbol\", async (req, res) => {\n  try {\n    const symbol = req.params.symbol.toUpperCase();\n    const data = await yahooFinance.chart(symbol, {\n      period1: \"2024-01-01\",\n      interval: \"1d\",\n    });\n    const quotes = data.quotes;\n\n    const companyName = data.meta?.shortName || symbol;\n\n    // Fetch today's price\n    let todayPrice = null;\n    try {\n      const quoteData = await yahooFinance.quote(symbol);\n      todayPrice = quoteData.regularMarketPrice;\n    } catch (priceErr) {\n      console.error(\"Error fetching today's price:\", priceErr);\n    }\n\n    const response = {\n      ticker: symbol,\n      name: companyName,\n      todayPrice: todayPrice,\n      data: quotes.map((q) => ({\n        date: q.date,\n        close: q.close,\n        volume: q.volume,\n      })),\n    };\n\n    console.log(response);\n    res.json(response);\n  } catch (err) {\n    console.error(err);\n    res.status(500).send(\"Error fetching stock data\");\n  }\n});",
            "new_code": "app.get(\"/api/stock/:symbol\", async (req, res) => {\n  try {\n    const symbol = req.params.symbol.toUpperCase();\n    const data = await yahooFinance.chart(symbol, {\n      period1: \"2024-01-01\",\n      interval: \"1d\",\n    });\n    const quotes = data.quotes;\n\n    const companyName = data.meta?.shortName || symbol;\n\n    // Fetch today's price\n    let todayPrice = null;\n    try {\n      const quoteData = await yahooFinance.quote(symbol);\n      todayPrice = quoteData.regularMarketPrice;\n    } catch (priceErr) {\n      console.error(\"Error fetching today's price:\", priceErr);\n    }\n\n    const response = {\n      ticker: symbol,\n      name: companyName,\n      todayPrice: todayPrice,\n      data: quotes.map((q) => ({\n        date: q.date,\n        close: q.close,\n        volume: q.volume,\n      })),\n    };\n\n    console.log(response);\n    res.json(response);\n  } catch (err) {\n    console.error(err);\n    res.status(500).send(\"Error fetching stock data\");\n  }\n});",
            "new_summary": {
                "low_structured": "• Defines a GET endpoint for stock data\n• Fetches and returns basic stock information along with today's price",
                "low_unstructured": "This code defines an Express route that returns stock data and today's price for a given symbol.",
                "title": "Express Route for Fetching Stock Data and Today's Price from Yahoo Finance",
                "medium_unstructured": "This Express route handles GET requests to '/api/stock/:symbol' by fetching stock chart data for the given symbol from Yahoo Finance, and additionally retrieves today's price for the symbol. It processes the data to extract date, close price, volume, and today's price, then returns this information in a JSON response. Errors are caught and result in a 500 status response.",
                "medium_structured": "• Handles GET requests at '/api/stock/:symbol'\n• Fetches daily stock chart data from Yahoo Finance starting from 2024-01-01\n• Also fetches today's price for the given symbol\n• Processes and returns a JSON response with:\n  ◦ Ticker symbol and company name\n  ◦ Today's price\n  ◦ An array of objects containing date, close price, and volume\n• Sends a 500 error response if data fetching fails",
                "high_unstructured": "This code defines an asynchronous Express GET endpoint at '/api/stock/:symbol' that retrieves daily stock chart data for the specified symbol from Yahoo Finance, starting from January 1, 2024, and also fetches today's price for the symbol. It converts the symbol to uppercase, fetches the chart data, extracts the company's short name if available, and attempts to retrieve the current regular market price. The endpoint constructs a response object containing the ticker, company name, today's price, and an array of daily records with date, closing price, and volume, then sends this as a JSON response. If an error occurs during data retrieval or processing, it logs the error and responds with a 500 status and an error message.",
                "high_structured": "• Defines an async GET endpoint at '/api/stock/:symbol'\n• Processes the request as follows:\n  ◦ Converts the provided symbol to uppercase\n  ◦ Fetches stock chart data from Yahoo Finance with daily intervals starting from 2024-01-01\n  ◦ Additionally fetches today's price for the symbol using Yahoo Finance's quote API\n• Extracts relevant information from the fetched data:\n  ◦ Retrieves the company's short name (if available) or defaults to the symbol\n  ◦ Maps the quotes to an array of objects containing date, close price, and volume\n• Constructs a response object with:\n  ◦ 'ticker' (symbol), 'name' (company name), 'todayPrice' (current price), and 'data' (array of daily records)\n• Logs the response and sends it as JSON\n• Handles errors by logging and returning a 500 error response with an error message"
            }
        },
        "id": "NI1m4z6LKSXTCqtZ1XIM"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-22 22:54:51.000",
        "source": "backend",
        "data": {
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "line": 15,
                            "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                        }
                    ],
                    "summaryComponent": "defines an Express route"
                },
                {
                    "codeSegments": [
                        {
                            "line": 47,
                            "code": "res.json(response);"
                        },
                        {
                            "line": 39,
                            "code": "data: quotes.map((q) => ({"
                        }
                    ],
                    "summaryComponent": "returns stock data"
                },
                {
                    "codeSegments": [
                        {
                            "line": 30,
                            "code": "todayPrice = quoteData.regularMarketPrice;"
                        },
                        {
                            "line": 38,
                            "code": "todayPrice: todayPrice,"
                        }
                    ],
                    "summaryComponent": "today's price"
                },
                {
                    "codeSegments": [
                        {
                            "line": 17,
                            "code": "const symbol = req.params.symbol.toUpperCase();"
                        }
                    ],
                    "summaryComponent": "for a given symbol"
                }
            ],
            "code": "15: app.get(\"/api/stock/:symbol\", async (req, res) => {\n16:   try {\n17:     const symbol = req.params.symbol.toUpperCase();\n18:     const data = await yahooFinance.chart(symbol, {\n19:       period1: \"2024-01-01\",\n20:       interval: \"1d\",\n21:     });\n22:     const quotes = data.quotes;\n23: \n24:     const companyName = data.meta?.shortName || symbol;\n25: \n26:     // Fetch today's price\n27:     let todayPrice = null;\n28:     try {\n29:       const quoteData = await yahooFinance.quote(symbol);\n30:       todayPrice = quoteData.regularMarketPrice;\n31:     } catch (priceErr) {\n32:       console.error(\"Error fetching today's price:\", priceErr);\n33:     }\n34: \n35:     const response = {\n36:       ticker: symbol,\n37:       name: companyName,\n38:       todayPrice: todayPrice,\n39:       data: quotes.map((q) => ({\n40:         date: q.date,\n41:         close: q.close,\n42:         volume: q.volume,\n43:       })),\n44:     };\n45: \n46:     console.log(response);\n47:     res.json(response);\n48:   } catch (err) {\n49:     console.error(err);\n50:     res.status(500).send(\"Error fetching stock data\");\n51:   }\n52: });",
            "summary": "This code defines an Express route that returns stock data and today's price for a given symbol."
        },
        "id": "oAfA6n6mn6Lel5KjUcAz"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-22 22:54:52.000",
        "source": "backend",
        "data": {
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "line": 15,
                            "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                        }
                    ],
                    "summaryComponent": "Defines a GET endpoint for stock data"
                },
                {
                    "codeSegments": [
                        {
                            "line": 18,
                            "code": "const data = await yahooFinance.chart(symbol, {"
                        },
                        {
                            "line": 22,
                            "code": "const quotes = data.quotes;"
                        },
                        {
                            "line": 24,
                            "code": "const companyName = data.meta?.shortName || symbol;"
                        },
                        {
                            "line": 35,
                            "code": "const response = {"
                        },
                        {
                            "line": 36,
                            "code": "ticker: symbol,"
                        },
                        {
                            "line": 37,
                            "code": "name: companyName,"
                        },
                        {
                            "line": 39,
                            "code": "data: quotes.map((q) => ({"
                        }
                    ],
                    "summaryComponent": "Fetches and returns basic stock information"
                },
                {
                    "codeSegments": [
                        {
                            "line": 29,
                            "code": "const quoteData = await yahooFinance.quote(symbol);"
                        },
                        {
                            "line": 30,
                            "code": "todayPrice = quoteData.regularMarketPrice;"
                        },
                        {
                            "line": 38,
                            "code": "todayPrice: todayPrice,"
                        }
                    ],
                    "summaryComponent": "along with today's price"
                }
            ],
            "code": "15: app.get(\"/api/stock/:symbol\", async (req, res) => {\n16:   try {\n17:     const symbol = req.params.symbol.toUpperCase();\n18:     const data = await yahooFinance.chart(symbol, {\n19:       period1: \"2024-01-01\",\n20:       interval: \"1d\",\n21:     });\n22:     const quotes = data.quotes;\n23: \n24:     const companyName = data.meta?.shortName || symbol;\n25: \n26:     // Fetch today's price\n27:     let todayPrice = null;\n28:     try {\n29:       const quoteData = await yahooFinance.quote(symbol);\n30:       todayPrice = quoteData.regularMarketPrice;\n31:     } catch (priceErr) {\n32:       console.error(\"Error fetching today's price:\", priceErr);\n33:     }\n34: \n35:     const response = {\n36:       ticker: symbol,\n37:       name: companyName,\n38:       todayPrice: todayPrice,\n39:       data: quotes.map((q) => ({\n40:         date: q.date,\n41:         close: q.close,\n42:         volume: q.volume,\n43:       })),\n44:     };\n45: \n46:     console.log(response);\n47:     res.json(response);\n48:   } catch (err) {\n49:     console.error(err);\n50:     res.status(500).send(\"Error fetching stock data\");\n51:   }\n52: });",
            "summary": "• Defines a GET endpoint for stock data\n• Fetches and returns basic stock information along with today's price"
        },
        "id": "B97VyZlQpcTJ3XSr0v7X"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-22 22:54:53.000",
        "source": "backend",
        "data": {
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "line": 15,
                            "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                        }
                    ],
                    "summaryComponent": "This Express route handles GET requests to '/api/stock/:symbol'"
                },
                {
                    "codeSegments": [
                        {
                            "line": 17,
                            "code": "const symbol = req.params.symbol.toUpperCase();"
                        },
                        {
                            "line": 18,
                            "code": "const data = await yahooFinance.chart(symbol, {"
                        }
                    ],
                    "summaryComponent": "by fetching stock chart data for the given symbol from Yahoo Finance"
                },
                {
                    "codeSegments": [
                        {
                            "line": 29,
                            "code": "const quoteData = await yahooFinance.quote(symbol);"
                        },
                        {
                            "line": 30,
                            "code": "todayPrice = quoteData.regularMarketPrice;"
                        }
                    ],
                    "summaryComponent": "and additionally retrieves today's price for the symbol"
                },
                {
                    "codeSegments": [
                        {
                            "line": 39,
                            "code": "data: quotes.map((q) => ({"
                        },
                        {
                            "line": 40,
                            "code": "date: q.date,"
                        },
                        {
                            "line": 41,
                            "code": "close: q.close,"
                        },
                        {
                            "line": 42,
                            "code": "volume: q.volume,"
                        },
                        {
                            "line": 38,
                            "code": "todayPrice: todayPrice,"
                        }
                    ],
                    "summaryComponent": "It processes the data to extract date, close price, volume, and today's price"
                },
                {
                    "codeSegments": [
                        {
                            "line": 47,
                            "code": "res.json(response);"
                        }
                    ],
                    "summaryComponent": "then returns this information in a JSON response"
                },
                {
                    "codeSegments": [
                        {
                            "line": 48,
                            "code": "catch (err) {"
                        },
                        {
                            "line": 50,
                            "code": "res.status(500).send(\"Error fetching stock data\");"
                        }
                    ],
                    "summaryComponent": "Errors are caught and result in a 500 status response"
                }
            ],
            "code": "15: app.get(\"/api/stock/:symbol\", async (req, res) => {\n16:   try {\n17:     const symbol = req.params.symbol.toUpperCase();\n18:     const data = await yahooFinance.chart(symbol, {\n19:       period1: \"2024-01-01\",\n20:       interval: \"1d\",\n21:     });\n22:     const quotes = data.quotes;\n23: \n24:     const companyName = data.meta?.shortName || symbol;\n25: \n26:     // Fetch today's price\n27:     let todayPrice = null;\n28:     try {\n29:       const quoteData = await yahooFinance.quote(symbol);\n30:       todayPrice = quoteData.regularMarketPrice;\n31:     } catch (priceErr) {\n32:       console.error(\"Error fetching today's price:\", priceErr);\n33:     }\n34: \n35:     const response = {\n36:       ticker: symbol,\n37:       name: companyName,\n38:       todayPrice: todayPrice,\n39:       data: quotes.map((q) => ({\n40:         date: q.date,\n41:         close: q.close,\n42:         volume: q.volume,\n43:       })),\n44:     };\n45: \n46:     console.log(response);\n47:     res.json(response);\n48:   } catch (err) {\n49:     console.error(err);\n50:     res.status(500).send(\"Error fetching stock data\");\n51:   }\n52: });",
            "summary": "This Express route handles GET requests to '/api/stock/:symbol' by fetching stock chart data for the given symbol from Yahoo Finance, and additionally retrieves today's price for the symbol. It processes the data to extract date, close price, volume, and today's price, then returns this information in a JSON response. Errors are caught and result in a 500 status response."
        },
        "id": "2Obx614CmHljbrVZyazA"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-22 22:54:53.000",
        "source": "backend",
        "data": {
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "line": 15,
                            "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                        }
                    ],
                    "summaryComponent": "an asynchronous Express GET endpoint at '/api/stock/:symbol'"
                },
                {
                    "codeSegments": [
                        {
                            "line": 18,
                            "code": "const data = await yahooFinance.chart(symbol, {"
                        }
                    ],
                    "summaryComponent": "retrieves daily stock chart data for the specified symbol from Yahoo Finance"
                },
                {
                    "codeSegments": [
                        {
                            "line": 19,
                            "code": "period1: \"2024-01-01\","
                        }
                    ],
                    "summaryComponent": "starting from January 1, 2024"
                },
                {
                    "codeSegments": [
                        {
                            "line": 29,
                            "code": "const quoteData = await yahooFinance.quote(symbol);"
                        }
                    ],
                    "summaryComponent": "also fetches today's price for the symbol"
                },
                {
                    "codeSegments": [
                        {
                            "line": 17,
                            "code": "const symbol = req.params.symbol.toUpperCase();"
                        }
                    ],
                    "summaryComponent": "converts the symbol to uppercase"
                },
                {
                    "codeSegments": [
                        {
                            "line": 24,
                            "code": "const companyName = data.meta?.shortName || symbol;"
                        }
                    ],
                    "summaryComponent": "extracts the company's short name if available"
                },
                {
                    "codeSegments": [
                        {
                            "line": 30,
                            "code": "todayPrice = quoteData.regularMarketPrice;"
                        }
                    ],
                    "summaryComponent": "attempts to retrieve the current regular market price"
                },
                {
                    "codeSegments": [
                        {
                            "line": 35,
                            "code": "const response = {"
                        },
                        {
                            "line": 36,
                            "code": "ticker: symbol,"
                        },
                        {
                            "line": 37,
                            "code": "name: companyName,"
                        },
                        {
                            "line": 38,
                            "code": "todayPrice: todayPrice,"
                        },
                        {
                            "line": 39,
                            "code": "data: quotes.map((q) => ({"
                        },
                        {
                            "line": 40,
                            "code": "date: q.date,"
                        },
                        {
                            "line": 41,
                            "code": "close: q.close,"
                        },
                        {
                            "line": 42,
                            "code": "volume: q.volume,"
                        }
                    ],
                    "summaryComponent": "constructs a response object containing the ticker, company name, today's price, and an array of daily records with date, closing price, and volume"
                },
                {
                    "codeSegments": [
                        {
                            "line": 47,
                            "code": "res.json(response);"
                        }
                    ],
                    "summaryComponent": "sends this as a JSON response"
                },
                {
                    "codeSegments": [
                        {
                            "line": 49,
                            "code": "console.error(err);"
                        },
                        {
                            "line": 50,
                            "code": "res.status(500).send(\"Error fetching stock data\");"
                        }
                    ],
                    "summaryComponent": "If an error occurs during data retrieval or processing, it logs the error and responds with a 500 status and an error message"
                }
            ],
            "code": "15: app.get(\"/api/stock/:symbol\", async (req, res) => {\n16:   try {\n17:     const symbol = req.params.symbol.toUpperCase();\n18:     const data = await yahooFinance.chart(symbol, {\n19:       period1: \"2024-01-01\",\n20:       interval: \"1d\",\n21:     });\n22:     const quotes = data.quotes;\n23: \n24:     const companyName = data.meta?.shortName || symbol;\n25: \n26:     // Fetch today's price\n27:     let todayPrice = null;\n28:     try {\n29:       const quoteData = await yahooFinance.quote(symbol);\n30:       todayPrice = quoteData.regularMarketPrice;\n31:     } catch (priceErr) {\n32:       console.error(\"Error fetching today's price:\", priceErr);\n33:     }\n34: \n35:     const response = {\n36:       ticker: symbol,\n37:       name: companyName,\n38:       todayPrice: todayPrice,\n39:       data: quotes.map((q) => ({\n40:         date: q.date,\n41:         close: q.close,\n42:         volume: q.volume,\n43:       })),\n44:     };\n45: \n46:     console.log(response);\n47:     res.json(response);\n48:   } catch (err) {\n49:     console.error(err);\n50:     res.status(500).send(\"Error fetching stock data\");\n51:   }\n52: });",
            "summary": "This code defines an asynchronous Express GET endpoint at '/api/stock/:symbol' that retrieves daily stock chart data for the specified symbol from Yahoo Finance, starting from January 1, 2024, and also fetches today's price for the symbol. It converts the symbol to uppercase, fetches the chart data, extracts the company's short name if available, and attempts to retrieve the current regular market price. The endpoint constructs a response object containing the ticker, company name, today's price, and an array of daily records with date, closing price, and volume, then sends this as a JSON response. If an error occurs during data retrieval or processing, it logs the error and responds with a 500 status and an error message."
        },
        "id": "CX8gJHAdfHuPNQOmU3C3"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-22 22:54:54.000",
        "source": "backend",
        "data": {
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "line": 15,
                            "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                        }
                    ],
                    "summaryComponent": "Defines an async GET endpoint at '/api/stock/:symbol'"
                },
                {
                    "codeSegments": [
                        {
                            "line": 17,
                            "code": "const symbol = req.params.symbol.toUpperCase();"
                        }
                    ],
                    "summaryComponent": "Converts the provided symbol to uppercase"
                },
                {
                    "codeSegments": [
                        {
                            "line": 18,
                            "code": "const data = await yahooFinance.chart(symbol, {"
                        },
                        {
                            "line": 19,
                            "code": "period1: \"2024-01-01\","
                        },
                        {
                            "line": 20,
                            "code": "interval: \"1d\","
                        }
                    ],
                    "summaryComponent": "Fetches stock chart data from Yahoo Finance with daily intervals starting from 2024-01-01"
                },
                {
                    "codeSegments": [
                        {
                            "line": 29,
                            "code": "const quoteData = await yahooFinance.quote(symbol);"
                        }
                    ],
                    "summaryComponent": "Additionally fetches today's price for the symbol using Yahoo Finance's quote API"
                },
                {
                    "codeSegments": [
                        {
                            "line": 24,
                            "code": "const companyName = data.meta?.shortName || symbol;"
                        }
                    ],
                    "summaryComponent": "Retrieves the company's short name (if available) or defaults to the symbol"
                },
                {
                    "codeSegments": [
                        {
                            "line": 39,
                            "code": "data: quotes.map((q) => ({"
                        },
                        {
                            "line": 40,
                            "code": "date: q.date,"
                        },
                        {
                            "line": 41,
                            "code": "close: q.close,"
                        },
                        {
                            "line": 42,
                            "code": "volume: q.volume,"
                        }
                    ],
                    "summaryComponent": "Maps the quotes to an array of objects containing date, close price, and volume"
                },
                {
                    "codeSegments": [
                        {
                            "line": 35,
                            "code": "const response = {"
                        }
                    ],
                    "summaryComponent": "Constructs a response object with:"
                },
                {
                    "codeSegments": [
                        {
                            "line": 36,
                            "code": "ticker: symbol,"
                        },
                        {
                            "line": 37,
                            "code": "name: companyName,"
                        },
                        {
                            "line": 38,
                            "code": "todayPrice: todayPrice,"
                        },
                        {
                            "line": 39,
                            "code": "data: quotes.map((q) => ({"
                        }
                    ],
                    "summaryComponent": "'ticker' (symbol), 'name' (company name), 'todayPrice' (current price), and 'data' (array of daily records)"
                },
                {
                    "codeSegments": [
                        {
                            "line": 46,
                            "code": "console.log(response);"
                        },
                        {
                            "line": 47,
                            "code": "res.json(response);"
                        }
                    ],
                    "summaryComponent": "Logs the response and sends it as JSON"
                },
                {
                    "codeSegments": [
                        {
                            "line": 49,
                            "code": "console.error(err);"
                        },
                        {
                            "line": 50,
                            "code": "res.status(500).send(\"Error fetching stock data\");"
                        }
                    ],
                    "summaryComponent": "Handles errors by logging and returning a 500 error response with an error message"
                }
            ],
            "code": "15: app.get(\"/api/stock/:symbol\", async (req, res) => {\n16:   try {\n17:     const symbol = req.params.symbol.toUpperCase();\n18:     const data = await yahooFinance.chart(symbol, {\n19:       period1: \"2024-01-01\",\n20:       interval: \"1d\",\n21:     });\n22:     const quotes = data.quotes;\n23: \n24:     const companyName = data.meta?.shortName || symbol;\n25: \n26:     // Fetch today's price\n27:     let todayPrice = null;\n28:     try {\n29:       const quoteData = await yahooFinance.quote(symbol);\n30:       todayPrice = quoteData.regularMarketPrice;\n31:     } catch (priceErr) {\n32:       console.error(\"Error fetching today's price:\", priceErr);\n33:     }\n34: \n35:     const response = {\n36:       ticker: symbol,\n37:       name: companyName,\n38:       todayPrice: todayPrice,\n39:       data: quotes.map((q) => ({\n40:         date: q.date,\n41:         close: q.close,\n42:         volume: q.volume,\n43:       })),\n44:     };\n45: \n46:     console.log(response);\n47:     res.json(response);\n48:   } catch (err) {\n49:     console.error(err);\n50:     res.status(500).send(\"Error fetching stock data\");\n51:   }\n52: });",
            "summary": "• Defines an async GET endpoint at '/api/stock/:symbol'\n• Processes the request as follows:\n  ◦ Converts the provided symbol to uppercase\n  ◦ Fetches stock chart data from Yahoo Finance with daily intervals starting from 2024-01-01\n  ◦ Additionally fetches today's price for the symbol using Yahoo Finance's quote API\n• Extracts relevant information from the fetched data:\n  ◦ Retrieves the company's short name (if available) or defaults to the symbol\n  ◦ Maps the quotes to an array of objects containing date, close price, and volume\n• Constructs a response object with:\n  ◦ 'ticker' (symbol), 'name' (company name), 'todayPrice' (current price), and 'data' (array of daily records)\n• Logs the response and sends it as JSON\n• Handles errors by logging and returning a 500 error response with an error message"
        },
        "id": "jHwu3i5AghIDo7aF6fxa"
    },
    {
        "event": "create_new_section",
        "timestamp": "2025-08-22 22:54:55.000",
        "source": "frontend",
        "data": {
            "section_id": "1f6854a4-0cee-441e-8d05-8d84d0d2ae10",
            "section_data": {
                "summaryData": {
                    "low_structured": "• Defines a GET endpoint for stock data\n• Fetches and returns basic stock information along with today's price",
                    "low_unstructured": "This code defines an Express route that returns stock data and today's price for a given symbol.",
                    "title": "Express Route for Fetching Stock Data and Today's Price from Yahoo Finance",
                    "medium_unstructured": "This Express route handles GET requests to '/api/stock/:symbol' by fetching stock chart data for the given symbol from Yahoo Finance, and additionally retrieves today's price for the symbol. It processes the data to extract date, close price, volume, and today's price, then returns this information in a JSON response. Errors are caught and result in a 500 status response.",
                    "medium_structured": "• Handles GET requests at '/api/stock/:symbol'\n• Fetches daily stock chart data from Yahoo Finance starting from 2024-01-01\n• Also fetches today's price for the given symbol\n• Processes and returns a JSON response with:\n  ◦ Ticker symbol and company name\n  ◦ Today's price\n  ◦ An array of objects containing date, close price, and volume\n• Sends a 500 error response if data fetching fails",
                    "high_unstructured": "This code defines an asynchronous Express GET endpoint at '/api/stock/:symbol' that retrieves daily stock chart data for the specified symbol from Yahoo Finance, starting from January 1, 2024, and also fetches today's price for the symbol. It converts the symbol to uppercase, fetches the chart data, extracts the company's short name if available, and attempts to retrieve the current regular market price. The endpoint constructs a response object containing the ticker, company name, today's price, and an array of daily records with date, closing price, and volume, then sends this as a JSON response. If an error occurs during data retrieval or processing, it logs the error and responds with a 500 status and an error message.",
                    "high_structured": "• Defines an async GET endpoint at '/api/stock/:symbol'\n• Processes the request as follows:\n  ◦ Converts the provided symbol to uppercase\n  ◦ Fetches stock chart data from Yahoo Finance with daily intervals starting from 2024-01-01\n  ◦ Additionally fetches today's price for the symbol using Yahoo Finance's quote API\n• Extracts relevant information from the fetched data:\n  ◦ Retrieves the company's short name (if available) or defaults to the symbol\n  ◦ Maps the quotes to an array of objects containing date, close price, and volume\n• Constructs a response object with:\n  ◦ 'ticker' (symbol), 'name' (company name), 'todayPrice' (current price), and 'data' (array of daily records)\n• Logs the response and sends it as JSON\n• Handles errors by logging and returning a 500 error response with an error message"
                },
                "editPromptValue": "",
                "title": "Express Route for Fetching Stock Data and Today's Price from Yahoo Finance",
                "editPromptStructured": null,
                "selectedDetailLevel": "medium",
                "metadata": {
                    "filename": "index.js",
                    "fullPath": "/project/workspace/server/index.js",
                    "id": "1f6854a4-0cee-441e-8d05-8d84d0d2ae10",
                    "originalCode": "app.get(\"/api/stock/:symbol\", async (req, res) => {\n  try {\n    const symbol = req.params.symbol.toUpperCase();\n    const data = await yahooFinance.chart(symbol, {\n      period1: \"2024-01-01\",\n      interval: \"1d\",\n    });\n    const quotes = data.quotes;\n\n    const companyName = data.meta?.shortName || symbol;\n\n    // Fetch today's price\n    let todayPrice = null;\n    try {\n      const quoteData = await yahooFinance.quote(symbol);\n      todayPrice = quoteData.regularMarketPrice;\n    } catch (priceErr) {\n      console.error(\"Error fetching today's price:\", priceErr);\n    }\n\n    const response = {\n      ticker: symbol,\n      name: companyName,\n      todayPrice: todayPrice,\n      data: quotes.map((q) => ({\n        date: q.date,\n        close: q.close,\n        volume: q.volume,\n      })),\n    };\n\n    console.log(response);\n    res.json(response);\n  } catch (err) {\n    console.error(err);\n    res.status(500).send(\"Error fetching stock data\");\n  }\n});",
                    "offset": 304
                },
                "createdAt": 1755888895000,
                "lines": [
                    15,
                    52
                ],
                "oldSummaryData": {
                    "low_structured": "• Defines a GET endpoint for stock data\n• Fetches and returns basic stock information",
                    "low_unstructured": "This code defines an Express route that returns stock data for a given symbol.",
                    "title": "Express Route for Fetching Stock Data from Yahoo Finance",
                    "medium_unstructured": "This Express route handles GET requests to '/api/stock/:symbol' by fetching stock chart data for the given symbol from Yahoo Finance. It processes the data to extract date, close price, and volume, then returns this information in a JSON response. Errors are caught and result in a 500 status response.",
                    "medium_structured": "• Handles GET requests at '/api/stock/:symbol'\n• Fetches daily stock chart data from Yahoo Finance starting from 2024-01-01\n• Processes and returns a JSON response with:\n  ◦ Ticker symbol and company name\n  ◦ An array of objects containing date, close price, and volume\n• Sends a 500 error response if data fetching fails",
                    "high_unstructured": "This code defines an asynchronous Express GET endpoint at '/api/stock/:symbol' that retrieves daily stock chart data for the specified symbol from Yahoo Finance, starting from January 1, 2024. It converts the symbol to uppercase, fetches the chart data, and extracts the company's short name if available. The endpoint constructs a response object containing the ticker, company name, and an array of daily records with date, closing price, and volume, then sends this as a JSON response. If an error occurs during data retrieval or processing, it logs the error and responds with a 500 status and an error message.",
                    "high_structured": "• Defines an async GET endpoint at '/api/stock/:symbol'\n• Processes the request as follows:\n  ◦ Converts the provided symbol to uppercase\n  ◦ Fetches stock chart data from Yahoo Finance with daily intervals starting from 2024-01-01\n• Extracts relevant information from the fetched data:\n  ◦ Retrieves the company's short name (if available) or defaults to the symbol\n  ◦ Maps the quotes to an array of objects containing date, close price, and volume\n• Constructs a response object with:\n  ◦ 'ticker' (symbol), 'name' (company name), and 'data' (array of daily records)\n• Logs the response and sends it as JSON\n• Handles errors by logging and returning a 500 error response with an error message"
                },
                "summaryMappings": {
                    "low_structured": [
                        {
                            "codeSegments": [
                                {
                                    "line": 15,
                                    "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                                }
                            ],
                            "summaryComponent": "Defines a GET endpoint for stock data"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 18,
                                    "code": "const data = await yahooFinance.chart(symbol, {"
                                },
                                {
                                    "line": 22,
                                    "code": "const quotes = data.quotes;"
                                },
                                {
                                    "line": 24,
                                    "code": "const companyName = data.meta?.shortName || symbol;"
                                },
                                {
                                    "line": 35,
                                    "code": "const response = {"
                                },
                                {
                                    "line": 36,
                                    "code": "ticker: symbol,"
                                },
                                {
                                    "line": 37,
                                    "code": "name: companyName,"
                                },
                                {
                                    "line": 39,
                                    "code": "data: quotes.map((q) => ({"
                                }
                            ],
                            "summaryComponent": "Fetches and returns basic stock information"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 29,
                                    "code": "const quoteData = await yahooFinance.quote(symbol);"
                                },
                                {
                                    "line": 30,
                                    "code": "todayPrice = quoteData.regularMarketPrice;"
                                },
                                {
                                    "line": 38,
                                    "code": "todayPrice: todayPrice,"
                                }
                            ],
                            "summaryComponent": "along with today's price"
                        }
                    ],
                    "low_unstructured": [
                        {
                            "codeSegments": [
                                {
                                    "line": 15,
                                    "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                                }
                            ],
                            "summaryComponent": "defines an Express route"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 47,
                                    "code": "res.json(response);"
                                },
                                {
                                    "line": 39,
                                    "code": "data: quotes.map((q) => ({"
                                }
                            ],
                            "summaryComponent": "returns stock data"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 30,
                                    "code": "todayPrice = quoteData.regularMarketPrice;"
                                },
                                {
                                    "line": 38,
                                    "code": "todayPrice: todayPrice,"
                                }
                            ],
                            "summaryComponent": "today's price"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 17,
                                    "code": "const symbol = req.params.symbol.toUpperCase();"
                                }
                            ],
                            "summaryComponent": "for a given symbol"
                        }
                    ],
                    "medium_structured": [
                        {
                            "codeSegments": [
                                {
                                    "line": 15,
                                    "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                                }
                            ],
                            "summaryComponent": "Handles GET requests at '/api/stock/:symbol'"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 18,
                                    "code": "const data = await yahooFinance.chart(symbol, {"
                                },
                                {
                                    "line": 19,
                                    "code": "period1: \"2024-01-01\","
                                },
                                {
                                    "line": 20,
                                    "code": "interval: \"1d\","
                                }
                            ],
                            "summaryComponent": "Fetches daily stock chart data from Yahoo Finance starting from 2024-01-01"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 29,
                                    "code": "const quoteData = await yahooFinance.quote(symbol);"
                                },
                                {
                                    "line": 30,
                                    "code": "todayPrice = quoteData.regularMarketPrice;"
                                }
                            ],
                            "summaryComponent": "Also fetches today's price for the given symbol"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 35,
                                    "code": "const response = {"
                                },
                                {
                                    "line": 47,
                                    "code": "res.json(response);"
                                }
                            ],
                            "summaryComponent": "Processes and returns a JSON response with:"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 36,
                                    "code": "ticker: symbol,"
                                },
                                {
                                    "line": 37,
                                    "code": "name: companyName,"
                                }
                            ],
                            "summaryComponent": "Ticker symbol and company name"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 38,
                                    "code": "todayPrice: todayPrice,"
                                }
                            ],
                            "summaryComponent": "Today's price"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 39,
                                    "code": "data: quotes.map((q) => ({"
                                },
                                {
                                    "line": 40,
                                    "code": "date: q.date,"
                                },
                                {
                                    "line": 41,
                                    "code": "close: q.close,"
                                },
                                {
                                    "line": 42,
                                    "code": "volume: q.volume,"
                                }
                            ],
                            "summaryComponent": "An array of objects containing date, close price, and volume"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 50,
                                    "code": "res.status(500).send(\"Error fetching stock data\");"
                                }
                            ],
                            "summaryComponent": "Sends a 500 error response if data fetching fails"
                        }
                    ],
                    "medium_unstructured": [
                        {
                            "codeSegments": [
                                {
                                    "line": 15,
                                    "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                                }
                            ],
                            "summaryComponent": "This Express route handles GET requests to '/api/stock/:symbol'"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 17,
                                    "code": "const symbol = req.params.symbol.toUpperCase();"
                                },
                                {
                                    "line": 18,
                                    "code": "const data = await yahooFinance.chart(symbol, {"
                                }
                            ],
                            "summaryComponent": "by fetching stock chart data for the given symbol from Yahoo Finance"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 29,
                                    "code": "const quoteData = await yahooFinance.quote(symbol);"
                                },
                                {
                                    "line": 30,
                                    "code": "todayPrice = quoteData.regularMarketPrice;"
                                }
                            ],
                            "summaryComponent": "and additionally retrieves today's price for the symbol"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 39,
                                    "code": "data: quotes.map((q) => ({"
                                },
                                {
                                    "line": 40,
                                    "code": "date: q.date,"
                                },
                                {
                                    "line": 41,
                                    "code": "close: q.close,"
                                },
                                {
                                    "line": 42,
                                    "code": "volume: q.volume,"
                                },
                                {
                                    "line": 38,
                                    "code": "todayPrice: todayPrice,"
                                }
                            ],
                            "summaryComponent": "It processes the data to extract date, close price, volume, and today's price"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 47,
                                    "code": "res.json(response);"
                                }
                            ],
                            "summaryComponent": "then returns this information in a JSON response"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 48,
                                    "code": "catch (err) {"
                                },
                                {
                                    "line": 50,
                                    "code": "res.status(500).send(\"Error fetching stock data\");"
                                }
                            ],
                            "summaryComponent": "Errors are caught and result in a 500 status response"
                        }
                    ],
                    "high_unstructured": [
                        {
                            "codeSegments": [
                                {
                                    "line": 15,
                                    "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                                }
                            ],
                            "summaryComponent": "an asynchronous Express GET endpoint at '/api/stock/:symbol'"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 18,
                                    "code": "const data = await yahooFinance.chart(symbol, {"
                                }
                            ],
                            "summaryComponent": "retrieves daily stock chart data for the specified symbol from Yahoo Finance"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 19,
                                    "code": "period1: \"2024-01-01\","
                                }
                            ],
                            "summaryComponent": "starting from January 1, 2024"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 29,
                                    "code": "const quoteData = await yahooFinance.quote(symbol);"
                                }
                            ],
                            "summaryComponent": "also fetches today's price for the symbol"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 17,
                                    "code": "const symbol = req.params.symbol.toUpperCase();"
                                }
                            ],
                            "summaryComponent": "converts the symbol to uppercase"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 24,
                                    "code": "const companyName = data.meta?.shortName || symbol;"
                                }
                            ],
                            "summaryComponent": "extracts the company's short name if available"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 30,
                                    "code": "todayPrice = quoteData.regularMarketPrice;"
                                }
                            ],
                            "summaryComponent": "attempts to retrieve the current regular market price"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 35,
                                    "code": "const response = {"
                                },
                                {
                                    "line": 36,
                                    "code": "ticker: symbol,"
                                },
                                {
                                    "line": 37,
                                    "code": "name: companyName,"
                                },
                                {
                                    "line": 38,
                                    "code": "todayPrice: todayPrice,"
                                },
                                {
                                    "line": 39,
                                    "code": "data: quotes.map((q) => ({"
                                },
                                {
                                    "line": 40,
                                    "code": "date: q.date,"
                                },
                                {
                                    "line": 41,
                                    "code": "close: q.close,"
                                },
                                {
                                    "line": 42,
                                    "code": "volume: q.volume,"
                                }
                            ],
                            "summaryComponent": "constructs a response object containing the ticker, company name, today's price, and an array of daily records with date, closing price, and volume"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 47,
                                    "code": "res.json(response);"
                                }
                            ],
                            "summaryComponent": "sends this as a JSON response"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 49,
                                    "code": "console.error(err);"
                                },
                                {
                                    "line": 50,
                                    "code": "res.status(500).send(\"Error fetching stock data\");"
                                }
                            ],
                            "summaryComponent": "If an error occurs during data retrieval or processing, it logs the error and responds with a 500 status and an error message"
                        }
                    ],
                    "high_structured": [
                        {
                            "codeSegments": [
                                {
                                    "line": 15,
                                    "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                                }
                            ],
                            "summaryComponent": "Defines an async GET endpoint at '/api/stock/:symbol'"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 17,
                                    "code": "const symbol = req.params.symbol.toUpperCase();"
                                }
                            ],
                            "summaryComponent": "Converts the provided symbol to uppercase"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 18,
                                    "code": "const data = await yahooFinance.chart(symbol, {"
                                },
                                {
                                    "line": 19,
                                    "code": "period1: \"2024-01-01\","
                                },
                                {
                                    "line": 20,
                                    "code": "interval: \"1d\","
                                }
                            ],
                            "summaryComponent": "Fetches stock chart data from Yahoo Finance with daily intervals starting from 2024-01-01"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 29,
                                    "code": "const quoteData = await yahooFinance.quote(symbol);"
                                }
                            ],
                            "summaryComponent": "Additionally fetches today's price for the symbol using Yahoo Finance's quote API"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 24,
                                    "code": "const companyName = data.meta?.shortName || symbol;"
                                }
                            ],
                            "summaryComponent": "Retrieves the company's short name (if available) or defaults to the symbol"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 39,
                                    "code": "data: quotes.map((q) => ({"
                                },
                                {
                                    "line": 40,
                                    "code": "date: q.date,"
                                },
                                {
                                    "line": 41,
                                    "code": "close: q.close,"
                                },
                                {
                                    "line": 42,
                                    "code": "volume: q.volume,"
                                }
                            ],
                            "summaryComponent": "Maps the quotes to an array of objects containing date, close price, and volume"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 35,
                                    "code": "const response = {"
                                }
                            ],
                            "summaryComponent": "Constructs a response object with:"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 36,
                                    "code": "ticker: symbol,"
                                },
                                {
                                    "line": 37,
                                    "code": "name: companyName,"
                                },
                                {
                                    "line": 38,
                                    "code": "todayPrice: todayPrice,"
                                },
                                {
                                    "line": 39,
                                    "code": "data: quotes.map((q) => ({"
                                }
                            ],
                            "summaryComponent": "'ticker' (symbol), 'name' (company name), 'todayPrice' (current price), and 'data' (array of daily records)"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 46,
                                    "code": "console.log(response);"
                                },
                                {
                                    "line": 47,
                                    "code": "res.json(response);"
                                }
                            ],
                            "summaryComponent": "Logs the response and sends it as JSON"
                        },
                        {
                            "codeSegments": [
                                {
                                    "line": 49,
                                    "code": "console.error(err);"
                                },
                                {
                                    "line": 50,
                                    "code": "res.status(500).send(\"Error fetching stock data\");"
                                }
                            ],
                            "summaryComponent": "Handles errors by logging and returning a 500 error response with an error message"
                        }
                    ]
                },
                "editPromptDetailLevel": null,
                "selectedStructured": "unstructured"
            }
        },
        "id": "08TY0CzqesF0OqlXmB8e"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-22 22:54:55.000",
        "source": "backend",
        "data": {
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "line": 15,
                            "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {"
                        }
                    ],
                    "summaryComponent": "Handles GET requests at '/api/stock/:symbol'"
                },
                {
                    "codeSegments": [
                        {
                            "line": 18,
                            "code": "const data = await yahooFinance.chart(symbol, {"
                        },
                        {
                            "line": 19,
                            "code": "period1: \"2024-01-01\","
                        },
                        {
                            "line": 20,
                            "code": "interval: \"1d\","
                        }
                    ],
                    "summaryComponent": "Fetches daily stock chart data from Yahoo Finance starting from 2024-01-01"
                },
                {
                    "codeSegments": [
                        {
                            "line": 29,
                            "code": "const quoteData = await yahooFinance.quote(symbol);"
                        },
                        {
                            "line": 30,
                            "code": "todayPrice = quoteData.regularMarketPrice;"
                        }
                    ],
                    "summaryComponent": "Also fetches today's price for the given symbol"
                },
                {
                    "codeSegments": [
                        {
                            "line": 35,
                            "code": "const response = {"
                        },
                        {
                            "line": 47,
                            "code": "res.json(response);"
                        }
                    ],
                    "summaryComponent": "Processes and returns a JSON response with:"
                },
                {
                    "codeSegments": [
                        {
                            "line": 36,
                            "code": "ticker: symbol,"
                        },
                        {
                            "line": 37,
                            "code": "name: companyName,"
                        }
                    ],
                    "summaryComponent": "Ticker symbol and company name"
                },
                {
                    "codeSegments": [
                        {
                            "line": 38,
                            "code": "todayPrice: todayPrice,"
                        }
                    ],
                    "summaryComponent": "Today's price"
                },
                {
                    "codeSegments": [
                        {
                            "line": 39,
                            "code": "data: quotes.map((q) => ({"
                        },
                        {
                            "line": 40,
                            "code": "date: q.date,"
                        },
                        {
                            "line": 41,
                            "code": "close: q.close,"
                        },
                        {
                            "line": 42,
                            "code": "volume: q.volume,"
                        }
                    ],
                    "summaryComponent": "An array of objects containing date, close price, and volume"
                },
                {
                    "codeSegments": [
                        {
                            "line": 50,
                            "code": "res.status(500).send(\"Error fetching stock data\");"
                        }
                    ],
                    "summaryComponent": "Sends a 500 error response if data fetching fails"
                }
            ],
            "code": "15: app.get(\"/api/stock/:symbol\", async (req, res) => {\n16:   try {\n17:     const symbol = req.params.symbol.toUpperCase();\n18:     const data = await yahooFinance.chart(symbol, {\n19:       period1: \"2024-01-01\",\n20:       interval: \"1d\",\n21:     });\n22:     const quotes = data.quotes;\n23: \n24:     const companyName = data.meta?.shortName || symbol;\n25: \n26:     // Fetch today's price\n27:     let todayPrice = null;\n28:     try {\n29:       const quoteData = await yahooFinance.quote(symbol);\n30:       todayPrice = quoteData.regularMarketPrice;\n31:     } catch (priceErr) {\n32:       console.error(\"Error fetching today's price:\", priceErr);\n33:     }\n34: \n35:     const response = {\n36:       ticker: symbol,\n37:       name: companyName,\n38:       todayPrice: todayPrice,\n39:       data: quotes.map((q) => ({\n40:         date: q.date,\n41:         close: q.close,\n42:         volume: q.volume,\n43:       })),\n44:     };\n45: \n46:     console.log(response);\n47:     res.json(response);\n48:   } catch (err) {\n49:     console.error(err);\n50:     res.status(500).send(\"Error fetching stock data\");\n51:   }\n52: });",
            "summary": "• Handles GET requests at '/api/stock/:symbol'\n• Fetches daily stock chart data from Yahoo Finance starting from 2024-01-01\n• Also fetches today's price for the given symbol\n• Processes and returns a JSON response with:\n  ◦ Ticker symbol and company name\n  ◦ Today's price\n  ◦ An array of objects containing date, close price, and volume\n• Sends a 500 error response if data fetching fails"
        },
        "id": "Jd0wZJUxTKXs5yIGfUrn"
    },
    {
        "event": "autotransit_section",
        "timestamp": "2025-08-22 22:54:55.000",
        "source": "frontend",
        "data": {
            "before_section_id": "dfb42152-242a-455d-a947-652e222b8149",
            "after_section_id": "1f6854a4-0cee-441e-8d05-8d84d0d2ae10"
        },
        "id": "UGOeVenGp5CrGOS7vhXC"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 23:01:03.000",
        "source": "frontend",
        "data": {
            "section_id": "1f6854a4-0cee-441e-8d05-8d84d0d2ae10",
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "1KX86WeosPhMMkm89Zf2"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 23:01:03.000",
        "source": "frontend",
        "data": {
            "section_id": "1f6854a4-0cee-441e-8d05-8d84d0d2ae10",
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "8M7zdB7r9Axc5K4ImuuT"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 23:01:03.000",
        "source": "frontend",
        "data": {
            "section_id": "1f6854a4-0cee-441e-8d05-8d84d0d2ae10",
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "9BC2TC3kiqPDWE5sL4Mv"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 23:01:03.000",
        "source": "frontend",
        "data": {
            "section_id": "1f6854a4-0cee-441e-8d05-8d84d0d2ae10",
            "mapping_index": 2,
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "APChbSqGBOmu4sAXgDo0"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 23:01:03.000",
        "source": "frontend",
        "data": {
            "section_id": "1f6854a4-0cee-441e-8d05-8d84d0d2ae10",
            "mapping_index": 1,
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "am4eWIbvgzbNVEztkNs8"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 23:01:03.000",
        "source": "frontend",
        "data": {
            "section_id": "1f6854a4-0cee-441e-8d05-8d84d0d2ae10",
            "mapping_index": 5,
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "sEPIUCTco9FrkY6qWugx"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 23:01:06.000",
        "source": "frontend",
        "data": {
            "section_id": "1f6854a4-0cee-441e-8d05-8d84d0d2ae10",
            "mapping_index": 2,
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "GzHtlOW4caLci9SIEnOZ"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 23:01:06.000",
        "source": "frontend",
        "data": {
            "section_id": "1f6854a4-0cee-441e-8d05-8d84d0d2ae10",
            "mapping_index": 1,
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "ki2rw4O5lk5MrtCyrGn6"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 23:01:06.000",
        "source": "frontend",
        "data": {
            "section_id": "1f6854a4-0cee-441e-8d05-8d84d0d2ae10",
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "qKLeSQpoVc9bEvYbcjL3"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 23:01:06.000",
        "source": "frontend",
        "data": {
            "section_id": "1f6854a4-0cee-441e-8d05-8d84d0d2ae10",
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "uG1gwEnSyxlI5GwHxlZv"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 23:01:08.000",
        "source": "frontend",
        "data": {
            "section_id": "1f6854a4-0cee-441e-8d05-8d84d0d2ae10",
            "mapping_index": 4,
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "HmZ65Pgh2gW1GwidL0M4"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 23:01:08.000",
        "source": "frontend",
        "data": {
            "section_id": "1f6854a4-0cee-441e-8d05-8d84d0d2ae10",
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "Tg0NaDhyLsuIT5pEgea5"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-22 23:01:08.000",
        "source": "frontend",
        "data": {
            "section_id": "1f6854a4-0cee-441e-8d05-8d84d0d2ae10",
            "mapping_index": 5,
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "fy7V3sT9gzUSoXLanIk7"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-22 23:01:08.000",
        "source": "frontend",
        "data": {
            "section_id": "1f6854a4-0cee-441e-8d05-8d84d0d2ae10",
            "detail_level": "medium",
            "structured_type": "unstructured"
        },
        "id": "uGUYkqOAPYlajCES0ha3"
    }
]