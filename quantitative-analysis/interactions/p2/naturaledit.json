[
    {
        "event": "click_summarize_code",
        "timestamp": "2025-08-17 11:12:42.000",
        "source": "frontend",
        "data": {},
        "id": "Sl8IJt3jn509P9gZNuQ5"
    },
    {
        "event": "summarize_selected_code",
        "timestamp": "2025-08-17 11:12:49.000",
        "source": "backend",
        "data": {
            "selected_code": "const StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;\n",
            "summary": {
                "high_structured": "• Defines a React functional component called StockChart.\n• Validates input data:\n  ◦ Checks if the data prop and its 'data' field exist and are non-empty.\n  ◦ Returns null if data is missing.\n• Extracts company name and ticker symbol from the data prop.\n• Prepares chart data:\n  ◦ Maps each data point to an object with 'date' and 'price' (from 'close').\n• Contains a helper function to format date strings (though not used in rendering).\n• Renders a styled container with:\n  ◦ A header displaying the company name and ticker.\n  ◦ A responsive LineChart (from Recharts) showing price over date.\n    ◦ Includes X and Y axes, tooltip, legend, and a monotone line without dots.",
                "low_structured": "• Defines a React component for a stock chart.\n• Displays a line chart with stock data.\n• Returns nothing if data is missing.",
                "title": "StockChart Component Summary",
                "medium_structured": "• Receives stock data as a prop and checks for its presence.\n• Extracts company name and ticker symbol from the data.\n• Formats the data into date and price pairs for charting.\n• Renders a responsive line chart with axes, tooltips, and legend.",
                "medium_unstructured": "The StockChart component takes stock data as a prop and renders a line chart of closing prices over time. It checks for valid data, extracts the company name and ticker, and formats the data for charting. The chart is displayed with axes, tooltips, and a legend.",
                "high_unstructured": "The StockChart component is a React functional component that visualizes stock price data as a line chart using the Recharts library. It first verifies the presence and validity of the input data, extracting the company name and ticker for display. The component transforms the raw data into an array of objects containing date and closing price, suitable for the chart. It then renders a responsive chart with labeled axes, a tooltip, a legend, and a styled line representing the stock's closing prices over time.",
                "low_unstructured": "This code defines a React component that displays a stock price line chart using provided data."
            }
        },
        "id": "xZ6sxZfuIQi7s96FUXdg"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-17 11:12:50.000",
        "source": "backend",
        "data": {
            "code": "13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));\n28: \n29:   return (\n30:     <div style={{ marginTop: \"2rem\" }}>\n31:       <h3>\n32:         {company} ({ticker})\n33:       </h3>\n34:       <ResponsiveContainer width=\"100%\" height={300}>\n35:         <LineChart\n36:           data={chartData}\n37:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n38:         >\n39:           <XAxis dataKey=\"date\" />\n40:           <YAxis domain={[\"auto\", \"auto\"]} />\n41:           <Tooltip />\n42:           <Legend />\n43:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n44:         </LineChart>\n45:       </ResponsiveContainer>\n46:     </div>\n47:   );\n48: };\n49: \n50: export default StockChart;\n51: ",
            "mapping": [
                {
                    "summaryComponent": "Defines a React component for a stock chart.",
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        },
                        {
                            "code": "export default StockChart;",
                            "line": 50
                        }
                    ]
                },
                {
                    "summaryComponent": "Displays a line chart with stock data.",
                    "codeSegments": [
                        {
                            "code": "<LineChart",
                            "line": 35
                        },
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 43
                        }
                    ]
                },
                {
                    "summaryComponent": "Returns nothing if data is missing.",
                    "codeSegments": [
                        {
                            "code": "if (!data || !data.data || !data.data.length) return null;",
                            "line": 14
                        }
                    ]
                }
            ],
            "summary": "• Defines a React component for a stock chart.\n• Displays a line chart with stock data.\n• Returns nothing if data is missing."
        },
        "id": "Z8UQE1aXNgDpMD3griy5"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-17 11:12:51.000",
        "source": "backend",
        "data": {
            "code": "13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));\n28: \n29:   return (\n30:     <div style={{ marginTop: \"2rem\" }}>\n31:       <h3>\n32:         {company} ({ticker})\n33:       </h3>\n34:       <ResponsiveContainer width=\"100%\" height={300}>\n35:         <LineChart\n36:           data={chartData}\n37:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n38:         >\n39:           <XAxis dataKey=\"date\" />\n40:           <YAxis domain={[\"auto\", \"auto\"]} />\n41:           <Tooltip />\n42:           <Legend />\n43:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n44:         </LineChart>\n45:       </ResponsiveContainer>\n46:     </div>\n47:   );\n48: };\n49: \n50: export default StockChart;\n51: ",
            "mapping": [
                {
                    "summaryComponent": "This code defines a React component",
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        },
                        {
                            "code": "export default StockChart;",
                            "line": 50
                        }
                    ]
                },
                {
                    "summaryComponent": "that displays a stock price line chart",
                    "codeSegments": [
                        {
                            "code": "<LineChart",
                            "line": 35
                        },
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 43
                        }
                    ]
                },
                {
                    "summaryComponent": "using provided data",
                    "codeSegments": [
                        {
                            "code": "const chartData = data.data.map((item) => ({",
                            "line": 24
                        },
                        {
                            "code": "data={chartData}",
                            "line": 36
                        }
                    ]
                }
            ],
            "summary": "This code defines a React component that displays a stock price line chart using provided data."
        },
        "id": "wRvhDa9hhipWs99AJwrN"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-17 11:12:52.000",
        "source": "backend",
        "data": {
            "code": "13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));\n28: \n29:   return (\n30:     <div style={{ marginTop: \"2rem\" }}>\n31:       <h3>\n32:         {company} ({ticker})\n33:       </h3>\n34:       <ResponsiveContainer width=\"100%\" height={300}>\n35:         <LineChart\n36:           data={chartData}\n37:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n38:         >\n39:           <XAxis dataKey=\"date\" />\n40:           <YAxis domain={[\"auto\", \"auto\"]} />\n41:           <Tooltip />\n42:           <Legend />\n43:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n44:         </LineChart>\n45:       </ResponsiveContainer>\n46:     </div>\n47:   );\n48: };\n49: \n50: export default StockChart;\n51: ",
            "mapping": [
                {
                    "summaryComponent": "The StockChart component",
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        }
                    ]
                },
                {
                    "summaryComponent": "takes stock data as a prop",
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        }
                    ]
                },
                {
                    "summaryComponent": "renders a line chart of closing prices over time",
                    "codeSegments": [
                        {
                            "code": "<LineChart",
                            "line": 35
                        },
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 43
                        }
                    ]
                },
                {
                    "summaryComponent": "checks for valid data",
                    "codeSegments": [
                        {
                            "code": "if (!data || !data.data || !data.data.length) return null;",
                            "line": 14
                        }
                    ]
                },
                {
                    "summaryComponent": "extracts the company name and ticker",
                    "codeSegments": [
                        {
                            "code": "const company = data.name;",
                            "line": 16
                        },
                        {
                            "code": "const ticker = data.ticker;",
                            "line": 17
                        }
                    ]
                },
                {
                    "summaryComponent": "formats the data for charting",
                    "codeSegments": [
                        {
                            "code": "const chartData = data.data.map((item) => ({",
                            "line": 24
                        },
                        {
                            "code": "date: item.date,",
                            "line": 25
                        },
                        {
                            "code": "price: item.close,",
                            "line": 26
                        }
                    ]
                },
                {
                    "summaryComponent": "The chart is displayed",
                    "codeSegments": [
                        {
                            "code": "return (",
                            "line": 29
                        },
                        {
                            "code": "<div style={{ marginTop: \"2rem\" }}>",
                            "line": 30
                        },
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 34
                        },
                        {
                            "code": "<LineChart",
                            "line": 35
                        }
                    ]
                },
                {
                    "summaryComponent": "with axes",
                    "codeSegments": [
                        {
                            "code": "<XAxis dataKey=\"date\" />",
                            "line": 39
                        },
                        {
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                            "line": 40
                        }
                    ]
                },
                {
                    "summaryComponent": "tooltips",
                    "codeSegments": [
                        {
                            "code": "<Tooltip />",
                            "line": 41
                        }
                    ]
                },
                {
                    "summaryComponent": "and a legend",
                    "codeSegments": [
                        {
                            "code": "<Legend />",
                            "line": 42
                        }
                    ]
                }
            ],
            "summary": "The StockChart component takes stock data as a prop and renders a line chart of closing prices over time. It checks for valid data, extracts the company name and ticker, and formats the data for charting. The chart is displayed with axes, tooltips, and a legend."
        },
        "id": "Nahzr5xzEfpTz0obupGT"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-17 11:12:52.000",
        "source": "backend",
        "data": {
            "code": "13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));\n28: \n29:   return (\n30:     <div style={{ marginTop: \"2rem\" }}>\n31:       <h3>\n32:         {company} ({ticker})\n33:       </h3>\n34:       <ResponsiveContainer width=\"100%\" height={300}>\n35:         <LineChart\n36:           data={chartData}\n37:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n38:         >\n39:           <XAxis dataKey=\"date\" />\n40:           <YAxis domain={[\"auto\", \"auto\"]} />\n41:           <Tooltip />\n42:           <Legend />\n43:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n44:         </LineChart>\n45:       </ResponsiveContainer>\n46:     </div>\n47:   );\n48: };\n49: \n50: export default StockChart;\n51: ",
            "mapping": [
                {
                    "summaryComponent": "Receives stock data as a prop and checks for its presence.",
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        },
                        {
                            "code": "if (!data || !data.data || !data.data.length) return null;",
                            "line": 14
                        }
                    ]
                },
                {
                    "summaryComponent": "Extracts company name and ticker symbol from the data.",
                    "codeSegments": [
                        {
                            "code": "const company = data.name;",
                            "line": 16
                        },
                        {
                            "code": "const ticker = data.ticker;",
                            "line": 17
                        }
                    ]
                },
                {
                    "summaryComponent": "Formats the data into date and price pairs for charting.",
                    "codeSegments": [
                        {
                            "code": "const chartData = data.data.map((item) => ({",
                            "line": 24
                        },
                        {
                            "code": "date: item.date,",
                            "line": 25
                        },
                        {
                            "code": "price: item.close,",
                            "line": 26
                        },
                        {
                            "code": "}));",
                            "line": 27
                        }
                    ]
                },
                {
                    "summaryComponent": "Renders a responsive line chart with axes, tooltips, and legend.",
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 34
                        },
                        {
                            "code": "<LineChart",
                            "line": 35
                        },
                        {
                            "code": "<XAxis dataKey=\"date\" />",
                            "line": 39
                        },
                        {
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                            "line": 40
                        },
                        {
                            "code": "<Tooltip />",
                            "line": 41
                        },
                        {
                            "code": "<Legend />",
                            "line": 42
                        },
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 43
                        }
                    ]
                }
            ],
            "summary": "• Receives stock data as a prop and checks for its presence.\n• Extracts company name and ticker symbol from the data.\n• Formats the data into date and price pairs for charting.\n• Renders a responsive line chart with axes, tooltips, and legend."
        },
        "id": "c6d8sdaeoXU1g2kM9JlP"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-17 11:12:53.000",
        "source": "backend",
        "data": {
            "code": "13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));\n28: \n29:   return (\n30:     <div style={{ marginTop: \"2rem\" }}>\n31:       <h3>\n32:         {company} ({ticker})\n33:       </h3>\n34:       <ResponsiveContainer width=\"100%\" height={300}>\n35:         <LineChart\n36:           data={chartData}\n37:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n38:         >\n39:           <XAxis dataKey=\"date\" />\n40:           <YAxis domain={[\"auto\", \"auto\"]} />\n41:           <Tooltip />\n42:           <Legend />\n43:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n44:         </LineChart>\n45:       </ResponsiveContainer>\n46:     </div>\n47:   );\n48: };\n49: \n50: export default StockChart;\n51: ",
            "mapping": [
                {
                    "summaryComponent": "Defines a React functional component called StockChart.",
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        }
                    ]
                },
                {
                    "summaryComponent": "Validates input data:",
                    "codeSegments": [
                        {
                            "code": "if (!data || !data.data || !data.data.length) return null;",
                            "line": 14
                        }
                    ]
                },
                {
                    "summaryComponent": "Checks if the data prop and its 'data' field exist and are non-empty.",
                    "codeSegments": [
                        {
                            "code": "if (!data || !data.data || !data.data.length) return null;",
                            "line": 14
                        }
                    ]
                },
                {
                    "summaryComponent": "Returns null if data is missing.",
                    "codeSegments": [
                        {
                            "code": "if (!data || !data.data || !data.data.length) return null;",
                            "line": 14
                        }
                    ]
                },
                {
                    "summaryComponent": "Extracts company name and ticker symbol from the data prop.",
                    "codeSegments": [
                        {
                            "code": "const company = data.name;",
                            "line": 16
                        },
                        {
                            "code": "const ticker = data.ticker;",
                            "line": 17
                        }
                    ]
                },
                {
                    "summaryComponent": "Prepares chart data:",
                    "codeSegments": [
                        {
                            "code": "const chartData = data.data.map((item) => ({",
                            "line": 24
                        },
                        {
                            "code": "  date: item.date,",
                            "line": 25
                        },
                        {
                            "code": "  price: item.close,",
                            "line": 26
                        },
                        {
                            "code": "}));",
                            "line": 27
                        }
                    ]
                },
                {
                    "summaryComponent": "Maps each data point to an object with 'date' and 'price' (from 'close').",
                    "codeSegments": [
                        {
                            "code": "const chartData = data.data.map((item) => ({",
                            "line": 24
                        },
                        {
                            "code": "  date: item.date,",
                            "line": 25
                        },
                        {
                            "code": "  price: item.close,",
                            "line": 26
                        },
                        {
                            "code": "}));",
                            "line": 27
                        }
                    ]
                },
                {
                    "summaryComponent": "Contains a helper function to format date strings (though not used in rendering).",
                    "codeSegments": [
                        {
                            "code": "const formatDateString = (date) => {",
                            "line": 19
                        },
                        {
                            "code": "  return date.split(\"T\")[0];",
                            "line": 20
                        },
                        {
                            "code": "};",
                            "line": 21
                        }
                    ]
                },
                {
                    "summaryComponent": "Renders a styled container with:",
                    "codeSegments": [
                        {
                            "code": "<div style={{ marginTop: \"2rem\" }}>",
                            "line": 30
                        }
                    ]
                },
                {
                    "summaryComponent": "A header displaying the company name and ticker.",
                    "codeSegments": [
                        {
                            "code": "<h3>",
                            "line": 31
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 32
                        },
                        {
                            "code": "</h3>",
                            "line": 33
                        }
                    ]
                },
                {
                    "summaryComponent": "A responsive LineChart (from Recharts) showing price over date.",
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 34
                        },
                        {
                            "code": "<LineChart",
                            "line": 35
                        },
                        {
                            "code": "  data={chartData}",
                            "line": 36
                        }
                    ]
                },
                {
                    "summaryComponent": "Includes X and Y axes, tooltip, legend, and a monotone line without dots.",
                    "codeSegments": [
                        {
                            "code": "<XAxis dataKey=\"date\" />",
                            "line": 39
                        },
                        {
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                            "line": 40
                        },
                        {
                            "code": "<Tooltip />",
                            "line": 41
                        },
                        {
                            "code": "<Legend />",
                            "line": 42
                        },
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 43
                        }
                    ]
                }
            ],
            "summary": "• Defines a React functional component called StockChart.\n• Validates input data:\n  ◦ Checks if the data prop and its 'data' field exist and are non-empty.\n  ◦ Returns null if data is missing.\n• Extracts company name and ticker symbol from the data prop.\n• Prepares chart data:\n  ◦ Maps each data point to an object with 'date' and 'price' (from 'close').\n• Contains a helper function to format date strings (though not used in rendering).\n• Renders a styled container with:\n  ◦ A header displaying the company name and ticker.\n  ◦ A responsive LineChart (from Recharts) showing price over date.\n    ◦ Includes X and Y axes, tooltip, legend, and a monotone line without dots."
        },
        "id": "7Wp58jfjMkfYghGSGkIQ"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-17 11:12:53.000",
        "source": "backend",
        "data": {
            "code": "13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));\n28: \n29:   return (\n30:     <div style={{ marginTop: \"2rem\" }}>\n31:       <h3>\n32:         {company} ({ticker})\n33:       </h3>\n34:       <ResponsiveContainer width=\"100%\" height={300}>\n35:         <LineChart\n36:           data={chartData}\n37:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n38:         >\n39:           <XAxis dataKey=\"date\" />\n40:           <YAxis domain={[\"auto\", \"auto\"]} />\n41:           <Tooltip />\n42:           <Legend />\n43:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n44:         </LineChart>\n45:       </ResponsiveContainer>\n46:     </div>\n47:   );\n48: };\n49: \n50: export default StockChart;\n51: ",
            "mapping": [
                {
                    "summaryComponent": "The StockChart component is a React functional component",
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        }
                    ]
                },
                {
                    "summaryComponent": "visualizes stock price data as a line chart using the Recharts library",
                    "codeSegments": [
                        {
                            "code": "<LineChart",
                            "line": 35
                        },
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 43
                        }
                    ]
                },
                {
                    "summaryComponent": "It first verifies the presence and validity of the input data",
                    "codeSegments": [
                        {
                            "code": "if (!data || !data.data || !data.data.length) return null;",
                            "line": 14
                        }
                    ]
                },
                {
                    "summaryComponent": "extracting the company name and ticker for display",
                    "codeSegments": [
                        {
                            "code": "const company = data.name;",
                            "line": 16
                        },
                        {
                            "code": "const ticker = data.ticker;",
                            "line": 17
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 32
                        }
                    ]
                },
                {
                    "summaryComponent": "The component transforms the raw data into an array of objects containing date and closing price, suitable for the chart",
                    "codeSegments": [
                        {
                            "code": "const chartData = data.data.map((item) => ({",
                            "line": 24
                        },
                        {
                            "code": "date: item.date,",
                            "line": 25
                        },
                        {
                            "code": "price: item.close,",
                            "line": 26
                        }
                    ]
                },
                {
                    "summaryComponent": "It then renders a responsive chart",
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 34
                        }
                    ]
                },
                {
                    "summaryComponent": "with labeled axes",
                    "codeSegments": [
                        {
                            "code": "<XAxis dataKey=\"date\" />",
                            "line": 39
                        },
                        {
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                            "line": 40
                        }
                    ]
                },
                {
                    "summaryComponent": "a tooltip",
                    "codeSegments": [
                        {
                            "code": "<Tooltip />",
                            "line": 41
                        }
                    ]
                },
                {
                    "summaryComponent": "a legend",
                    "codeSegments": [
                        {
                            "code": "<Legend />",
                            "line": 42
                        }
                    ]
                },
                {
                    "summaryComponent": "and a styled line representing the stock's closing prices over time",
                    "codeSegments": [
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 43
                        }
                    ]
                }
            ],
            "summary": "The StockChart component is a React functional component that visualizes stock price data as a line chart using the Recharts library. It first verifies the presence and validity of the input data, extracting the company name and ticker for display. The component transforms the raw data into an array of objects containing date and closing price, suitable for the chart. It then renders a responsive chart with labeled axes, a tooltip, a legend, and a styled line representing the stock's closing prices over time."
        },
        "id": "ozEVRv9gA8LNX9oruSS7"
    },
    {
        "event": "autotransit_section",
        "timestamp": "2025-08-17 11:12:54.000",
        "source": "frontend",
        "data": {
            "after_section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "before_section_id": null
        },
        "id": "bZouIc7YUbmc3Qf7JHum"
    },
    {
        "event": "create_new_section",
        "timestamp": "2025-08-17 11:12:54.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "section_data": {
                "metadata": {
                    "id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
                    "fullPath": "/project/workspace/frontend/src/StockChart.jsx",
                    "offset": 156,
                    "filename": "StockChart.jsx",
                    "originalCode": "const StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;\n"
                },
                "summaryMappings": {
                    "high_structured": [
                        {
                            "summaryComponent": "Defines a React functional component called StockChart.",
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Validates input data:",
                            "codeSegments": [
                                {
                                    "code": "if (!data || !data.data || !data.data.length) return null;",
                                    "line": 14
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Checks if the data prop and its 'data' field exist and are non-empty.",
                            "codeSegments": [
                                {
                                    "code": "if (!data || !data.data || !data.data.length) return null;",
                                    "line": 14
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Returns null if data is missing.",
                            "codeSegments": [
                                {
                                    "code": "if (!data || !data.data || !data.data.length) return null;",
                                    "line": 14
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Extracts company name and ticker symbol from the data prop.",
                            "codeSegments": [
                                {
                                    "code": "const company = data.name;",
                                    "line": 16
                                },
                                {
                                    "code": "const ticker = data.ticker;",
                                    "line": 17
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Prepares chart data:",
                            "codeSegments": [
                                {
                                    "code": "const chartData = data.data.map((item) => ({",
                                    "line": 24
                                },
                                {
                                    "code": "  date: item.date,",
                                    "line": 25
                                },
                                {
                                    "code": "  price: item.close,",
                                    "line": 26
                                },
                                {
                                    "code": "}));",
                                    "line": 27
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Maps each data point to an object with 'date' and 'price' (from 'close').",
                            "codeSegments": [
                                {
                                    "code": "const chartData = data.data.map((item) => ({",
                                    "line": 24
                                },
                                {
                                    "code": "  date: item.date,",
                                    "line": 25
                                },
                                {
                                    "code": "  price: item.close,",
                                    "line": 26
                                },
                                {
                                    "code": "}));",
                                    "line": 27
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Contains a helper function to format date strings (though not used in rendering).",
                            "codeSegments": [
                                {
                                    "code": "const formatDateString = (date) => {",
                                    "line": 19
                                },
                                {
                                    "code": "  return date.split(\"T\")[0];",
                                    "line": 20
                                },
                                {
                                    "code": "};",
                                    "line": 21
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Renders a styled container with:",
                            "codeSegments": [
                                {
                                    "code": "<div style={{ marginTop: \"2rem\" }}>",
                                    "line": 30
                                }
                            ]
                        },
                        {
                            "summaryComponent": "A header displaying the company name and ticker.",
                            "codeSegments": [
                                {
                                    "code": "<h3>",
                                    "line": 31
                                },
                                {
                                    "code": "{company} ({ticker})",
                                    "line": 32
                                },
                                {
                                    "code": "</h3>",
                                    "line": 33
                                }
                            ]
                        },
                        {
                            "summaryComponent": "A responsive LineChart (from Recharts) showing price over date.",
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 34
                                },
                                {
                                    "code": "<LineChart",
                                    "line": 35
                                },
                                {
                                    "code": "  data={chartData}",
                                    "line": 36
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Includes X and Y axes, tooltip, legend, and a monotone line without dots.",
                            "codeSegments": [
                                {
                                    "code": "<XAxis dataKey=\"date\" />",
                                    "line": 39
                                },
                                {
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                                    "line": 40
                                },
                                {
                                    "code": "<Tooltip />",
                                    "line": 41
                                },
                                {
                                    "code": "<Legend />",
                                    "line": 42
                                },
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 43
                                }
                            ]
                        }
                    ],
                    "low_structured": [
                        {
                            "summaryComponent": "Defines a React component for a stock chart.",
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                },
                                {
                                    "code": "export default StockChart;",
                                    "line": 50
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Displays a line chart with stock data.",
                            "codeSegments": [
                                {
                                    "code": "<LineChart",
                                    "line": 35
                                },
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 43
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Returns nothing if data is missing.",
                            "codeSegments": [
                                {
                                    "code": "if (!data || !data.data || !data.data.length) return null;",
                                    "line": 14
                                }
                            ]
                        }
                    ],
                    "medium_structured": [
                        {
                            "summaryComponent": "Receives stock data as a prop and checks for its presence.",
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                },
                                {
                                    "code": "if (!data || !data.data || !data.data.length) return null;",
                                    "line": 14
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Extracts company name and ticker symbol from the data.",
                            "codeSegments": [
                                {
                                    "code": "const company = data.name;",
                                    "line": 16
                                },
                                {
                                    "code": "const ticker = data.ticker;",
                                    "line": 17
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Formats the data into date and price pairs for charting.",
                            "codeSegments": [
                                {
                                    "code": "const chartData = data.data.map((item) => ({",
                                    "line": 24
                                },
                                {
                                    "code": "date: item.date,",
                                    "line": 25
                                },
                                {
                                    "code": "price: item.close,",
                                    "line": 26
                                },
                                {
                                    "code": "}));",
                                    "line": 27
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Renders a responsive line chart with axes, tooltips, and legend.",
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 34
                                },
                                {
                                    "code": "<LineChart",
                                    "line": 35
                                },
                                {
                                    "code": "<XAxis dataKey=\"date\" />",
                                    "line": 39
                                },
                                {
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                                    "line": 40
                                },
                                {
                                    "code": "<Tooltip />",
                                    "line": 41
                                },
                                {
                                    "code": "<Legend />",
                                    "line": 42
                                },
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 43
                                }
                            ]
                        }
                    ],
                    "medium_unstructured": [
                        {
                            "summaryComponent": "The StockChart component",
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                }
                            ]
                        },
                        {
                            "summaryComponent": "takes stock data as a prop",
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                }
                            ]
                        },
                        {
                            "summaryComponent": "renders a line chart of closing prices over time",
                            "codeSegments": [
                                {
                                    "code": "<LineChart",
                                    "line": 35
                                },
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 43
                                }
                            ]
                        },
                        {
                            "summaryComponent": "checks for valid data",
                            "codeSegments": [
                                {
                                    "code": "if (!data || !data.data || !data.data.length) return null;",
                                    "line": 14
                                }
                            ]
                        },
                        {
                            "summaryComponent": "extracts the company name and ticker",
                            "codeSegments": [
                                {
                                    "code": "const company = data.name;",
                                    "line": 16
                                },
                                {
                                    "code": "const ticker = data.ticker;",
                                    "line": 17
                                }
                            ]
                        },
                        {
                            "summaryComponent": "formats the data for charting",
                            "codeSegments": [
                                {
                                    "code": "const chartData = data.data.map((item) => ({",
                                    "line": 24
                                },
                                {
                                    "code": "date: item.date,",
                                    "line": 25
                                },
                                {
                                    "code": "price: item.close,",
                                    "line": 26
                                }
                            ]
                        },
                        {
                            "summaryComponent": "The chart is displayed",
                            "codeSegments": [
                                {
                                    "code": "return (",
                                    "line": 29
                                },
                                {
                                    "code": "<div style={{ marginTop: \"2rem\" }}>",
                                    "line": 30
                                },
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 34
                                },
                                {
                                    "code": "<LineChart",
                                    "line": 35
                                }
                            ]
                        },
                        {
                            "summaryComponent": "with axes",
                            "codeSegments": [
                                {
                                    "code": "<XAxis dataKey=\"date\" />",
                                    "line": 39
                                },
                                {
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                                    "line": 40
                                }
                            ]
                        },
                        {
                            "summaryComponent": "tooltips",
                            "codeSegments": [
                                {
                                    "code": "<Tooltip />",
                                    "line": 41
                                }
                            ]
                        },
                        {
                            "summaryComponent": "and a legend",
                            "codeSegments": [
                                {
                                    "code": "<Legend />",
                                    "line": 42
                                }
                            ]
                        }
                    ],
                    "high_unstructured": [
                        {
                            "summaryComponent": "The StockChart component is a React functional component",
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                }
                            ]
                        },
                        {
                            "summaryComponent": "visualizes stock price data as a line chart using the Recharts library",
                            "codeSegments": [
                                {
                                    "code": "<LineChart",
                                    "line": 35
                                },
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 43
                                }
                            ]
                        },
                        {
                            "summaryComponent": "It first verifies the presence and validity of the input data",
                            "codeSegments": [
                                {
                                    "code": "if (!data || !data.data || !data.data.length) return null;",
                                    "line": 14
                                }
                            ]
                        },
                        {
                            "summaryComponent": "extracting the company name and ticker for display",
                            "codeSegments": [
                                {
                                    "code": "const company = data.name;",
                                    "line": 16
                                },
                                {
                                    "code": "const ticker = data.ticker;",
                                    "line": 17
                                },
                                {
                                    "code": "{company} ({ticker})",
                                    "line": 32
                                }
                            ]
                        },
                        {
                            "summaryComponent": "The component transforms the raw data into an array of objects containing date and closing price, suitable for the chart",
                            "codeSegments": [
                                {
                                    "code": "const chartData = data.data.map((item) => ({",
                                    "line": 24
                                },
                                {
                                    "code": "date: item.date,",
                                    "line": 25
                                },
                                {
                                    "code": "price: item.close,",
                                    "line": 26
                                }
                            ]
                        },
                        {
                            "summaryComponent": "It then renders a responsive chart",
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 34
                                }
                            ]
                        },
                        {
                            "summaryComponent": "with labeled axes",
                            "codeSegments": [
                                {
                                    "code": "<XAxis dataKey=\"date\" />",
                                    "line": 39
                                },
                                {
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                                    "line": 40
                                }
                            ]
                        },
                        {
                            "summaryComponent": "a tooltip",
                            "codeSegments": [
                                {
                                    "code": "<Tooltip />",
                                    "line": 41
                                }
                            ]
                        },
                        {
                            "summaryComponent": "a legend",
                            "codeSegments": [
                                {
                                    "code": "<Legend />",
                                    "line": 42
                                }
                            ]
                        },
                        {
                            "summaryComponent": "and a styled line representing the stock's closing prices over time",
                            "codeSegments": [
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 43
                                }
                            ]
                        }
                    ],
                    "low_unstructured": [
                        {
                            "summaryComponent": "This code defines a React component",
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                },
                                {
                                    "code": "export default StockChart;",
                                    "line": 50
                                }
                            ]
                        },
                        {
                            "summaryComponent": "that displays a stock price line chart",
                            "codeSegments": [
                                {
                                    "code": "<LineChart",
                                    "line": 35
                                },
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 43
                                }
                            ]
                        },
                        {
                            "summaryComponent": "using provided data",
                            "codeSegments": [
                                {
                                    "code": "const chartData = data.data.map((item) => ({",
                                    "line": 24
                                },
                                {
                                    "code": "data={chartData}",
                                    "line": 36
                                }
                            ]
                        }
                    ]
                },
                "summaryData": {
                    "high_structured": "• Defines a React functional component called StockChart.\n• Validates input data:\n  ◦ Checks if the data prop and its 'data' field exist and are non-empty.\n  ◦ Returns null if data is missing.\n• Extracts company name and ticker symbol from the data prop.\n• Prepares chart data:\n  ◦ Maps each data point to an object with 'date' and 'price' (from 'close').\n• Contains a helper function to format date strings (though not used in rendering).\n• Renders a styled container with:\n  ◦ A header displaying the company name and ticker.\n  ◦ A responsive LineChart (from Recharts) showing price over date.\n    ◦ Includes X and Y axes, tooltip, legend, and a monotone line without dots.",
                    "low_structured": "• Defines a React component for a stock chart.\n• Displays a line chart with stock data.\n• Returns nothing if data is missing.",
                    "title": "StockChart Component Summary",
                    "medium_structured": "• Receives stock data as a prop and checks for its presence.\n• Extracts company name and ticker symbol from the data.\n• Formats the data into date and price pairs for charting.\n• Renders a responsive line chart with axes, tooltips, and legend.",
                    "medium_unstructured": "The StockChart component takes stock data as a prop and renders a line chart of closing prices over time. It checks for valid data, extracts the company name and ticker, and formats the data for charting. The chart is displayed with axes, tooltips, and a legend.",
                    "high_unstructured": "The StockChart component is a React functional component that visualizes stock price data as a line chart using the Recharts library. It first verifies the presence and validity of the input data, extracting the company name and ticker for display. The component transforms the raw data into an array of objects containing date and closing price, suitable for the chart. It then renders a responsive chart with labeled axes, a tooltip, a legend, and a styled line representing the stock's closing prices over time.",
                    "low_unstructured": "This code defines a React component that displays a stock price line chart using provided data."
                },
                "lines": [
                    13,
                    51
                ],
                "selectedDetailLevel": "medium",
                "editPromptValue": "",
                "selectedStructured": "unstructured",
                "title": "StockChart Component Summary",
                "createdAt": 1755414773000,
                "editPromptDetailLevel": null,
                "editPromptStructured": null
            }
        },
        "id": "pcP16pFu7DfqO2xDvcWQ"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:13:00.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 4,
            "detail_level": "medium"
        },
        "id": "5IfBguJ6rAXx9NYqYjcH"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:13:00.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 1,
            "detail_level": "medium"
        },
        "id": "akpLgi3gkTAUj0FPVzYt"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:13:00.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "ipYBZL7bbvlFf1nHNjS7"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:13:01.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 5,
            "detail_level": "medium"
        },
        "id": "1OMLNVMFl4fgRf2Pqjo8"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:13:01.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "1lv4uQR1si11jkHii11C"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:13:01.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "4oVSiDg3lrkJ6b4GHNWR"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:13:01.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 2,
            "detail_level": "medium"
        },
        "id": "DEyFMnzhh9IF3ZQTbRNU"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:13:01.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "FwPpHZ5bXB5zIcIez0uv"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:13:01.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 5,
            "detail_level": "medium"
        },
        "id": "LXUFtIPFfjZ8zskIuFxT"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:13:01.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 3,
            "detail_level": "medium"
        },
        "id": "W8tGXEKgPUPtkJ7RLqXV"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:13:01.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "XQEvib2uouhLgPAkliZZ"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:13:01.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 3,
            "detail_level": "medium"
        },
        "id": "Z3pHn2INroiGKPsxU01y"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:13:01.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "dS9mhMWe5y4fbZUvj2tO"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:13:01.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 0,
            "detail_level": "medium"
        },
        "id": "pFgFqVks8QB2bQ6MUvLm"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:13:01.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "q1zEWjAIRGsh2CV8tWlV"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:13:04.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "8ID3HhFHAnjPwTnJwhxz"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:13:04.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 2,
            "detail_level": "medium"
        },
        "id": "d1H918bjUzgaT6rP7JRp"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:13:04.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "gH9KuuMMLyQ91X6IU128"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:13:09.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 2,
            "detail_level": "medium"
        },
        "id": "6Jhfg575GbgFBIde1iQn"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:13:09.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 0,
            "detail_level": "medium"
        },
        "id": "EgFJVAZbvZtnVoYmevS2"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:13:09.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 4,
            "detail_level": "medium"
        },
        "id": "R9EtvWixT93bVg40yV3c"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:13:09.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 2,
            "detail_level": "medium"
        },
        "id": "Rsih0ItmGlLnV1xLDQEK"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:13:09.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "eo4q9N8b02LKYE83qDeb"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:13:09.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 0,
            "detail_level": "medium"
        },
        "id": "jglxvHlhR7vZChtljVRU"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:13:09.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "ohTqSZJVWecMoTG5frxt"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:13:09.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "pZsNZIeWjCL2D6aKwd6n"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:13:09.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "wYPcUhBjjkOV5GoFERZr"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:13:11.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "khkmaIfiFdWZH7SzZuNs"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:13:11.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 1,
            "detail_level": "medium"
        },
        "id": "xBTIXCLqlr6gzcWRPr22"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:13:15.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 2,
            "detail_level": "medium"
        },
        "id": "DJ4IpEpRG9E4yaR0tADU"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:13:15.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "nhKL4O5YiAsAPOrN7l1g"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:13:17.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 4,
            "detail_level": "medium"
        },
        "id": "4nCcfcvjgyUvvR1wPjFG"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:13:17.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "9eoYfJ3wis2htw0O5x9F"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:13:17.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 3,
            "detail_level": "medium"
        },
        "id": "BdQYLzz44WwCAu6oKdZI"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:13:17.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 2,
            "detail_level": "medium"
        },
        "id": "NNOoZpXjksGkValKJfgh"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:13:17.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "U6DR32iUqv3Yiy957cUE"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:13:17.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "Z9wIWrEQ8fdEAckdxgNN"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:13:17.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "kKy3ghmwqRxxZXDzxAOU"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:13:17.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "qyIjXHYDWkmYTCqNj0At"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:13:17.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 0,
            "detail_level": "medium"
        },
        "id": "w2GDlvqK3RzMcsUeaLN2"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:13:17.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 1,
            "detail_level": "medium"
        },
        "id": "wVwLMCkh17m3z10nkvMX"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:13:18.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 2,
            "detail_level": "medium"
        },
        "id": "TeJxAIlYlVYjQeNPD8W2"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:13:18.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "VYUerVZ94mEyPV0GtSLo"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:13:19.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 4,
            "detail_level": "medium"
        },
        "id": "HuST3tCNpEVljiyAPkga"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:13:19.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "NsIoWxKLFOxXkCMtK0yJ"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:13:19.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "dTkncZiXXzPusWa2tkoe"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:13:19.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 2,
            "detail_level": "medium"
        },
        "id": "xD92TOVy9G9UhaFICvb7"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:13:20.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 3,
            "detail_level": "medium"
        },
        "id": "PUiCHENov0VIrnwPpeNA"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:13:20.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "q6MZzUx6dlyaI4p0Trop"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:13:23.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 4,
            "detail_level": "medium"
        },
        "id": "HL0MSaXDtvkre6bedFlo"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:13:23.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 4,
            "detail_level": "medium"
        },
        "id": "hR5m6t0tk4k5QaTXU9pU"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:13:23.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "ri2bQeTxksvCcHNG8DiK"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:13:23.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "w63yhZ8n6j8Xmyl5iRgr"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:13:25.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 5,
            "detail_level": "medium"
        },
        "id": "iLWzxrC8fBeD4POtTg29"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:13:25.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "y0sN1HEWUgqO8LAInseI"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:13:32.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "7dhky7M7IUhFMRnpPxq9"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:13:32.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "FNQat2jJV6kB47gmRXKw"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:13:32.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 3,
            "detail_level": "medium"
        },
        "id": "T3h82zqq19B6yniGcKsP"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:13:33.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 5,
            "detail_level": "medium"
        },
        "id": "3U7lClXfsmySXUPpvx1h"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:13:33.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "KQSUaAJQRouuRbzVIWkr"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:13:33.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 9,
            "detail_level": "medium"
        },
        "id": "LHTASMAcXOwRuGacFdCu"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:13:33.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 5,
            "detail_level": "medium"
        },
        "id": "ZBjuNqHbbKFU89FfNkmD"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:13:33.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "ym8euIMACcJYGvPKB3Xw"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:13:35.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "H4NnaJnqJNEcEJ7N6Gfe"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:13:35.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 6,
            "detail_level": "medium"
        },
        "id": "sPGLNF5gV0vePJcGMblv"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:13:37.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 6,
            "detail_level": "medium"
        },
        "id": "0D6H6TczcLzCWuBmqQZA"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:13:37.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "0SO3n3Z7vK1zJHGEy0bc"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:13:38.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "tRfsTBraBu4Pc8G86T06"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:13:40.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 6,
            "detail_level": "medium"
        },
        "id": "Dh0ZYUtGDk7Gcvrd0exK"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:13:40.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 5,
            "detail_level": "medium"
        },
        "id": "ZM16QiLX5ybvNOGQS3Dv"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:13:40.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "f6Ex4TFjjuzteZplfUbs"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:13:48.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 8,
            "detail_level": "medium"
        },
        "id": "CY0cd0MuRxsaZSNWuUuW"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:13:48.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 7,
            "detail_level": "medium"
        },
        "id": "ETP030WuCF3r9oIbhYHD"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:13:48.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "PfYjsUKXEHxV2sGB9hlC"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:13:48.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "h3F5kbeT7C1QCs8Grxbt"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:13:48.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 9,
            "detail_level": "medium"
        },
        "id": "p7m3XbTzNkCi2Lt4iKP9"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:13:48.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "q3QJuDr2MRCP24FYaH9Y"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:13:54.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 8,
            "detail_level": "medium"
        },
        "id": "8IsSex63hnJireL1Y2gc"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:13:54.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "aOld7wG3leEG9c8pb47p"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:13:59.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 9,
            "detail_level": "medium"
        },
        "id": "whLY3capqfFYi7zYxxXT"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:13:59.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "xmH5sSmKjWxQegOzSKF0"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:14:01.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "yDFcGAxrk7oLidGZpDIm"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:14:02.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 9,
            "detail_level": "medium"
        },
        "id": "jZXVGHX8IbYB99hlbwRr"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:14:04.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 5,
            "detail_level": "medium"
        },
        "id": "7zphU3b6nSASyFL5oXdu"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:14:04.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "8bu625fQ6dBaDQaDD8dC"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:14:05.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "9svXCWEHC3CNzF3AGUBF"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:14:05.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "BPjae4hkTNNf63F0EEiI"
    },
    {
        "event": "change_summary_level",
        "timestamp": "2025-08-17 11:14:05.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "after_structured": "unstructured",
            "before_structured": "unstructured",
            "after_detail_level": "high",
            "before_detail_level": "medium"
        },
        "id": "V7lw2Md66Iqj7OVZSE7H"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:14:05.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 3,
            "detail_level": "medium"
        },
        "id": "f6zLUXH3GDHOxyI05puT"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:14:05.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "fSyBFxH8EN5nK6KpfPK2"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:14:05.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 1,
            "detail_level": "medium"
        },
        "id": "sKTHUTWbjOIIHfL0rOyE"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:14:06.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 0,
            "detail_level": "high"
        },
        "id": "tzdRBueBv7lk0DoWX1H2"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:14:07.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "high"
        },
        "id": "0GMKhv0im9K5lfwqFcIg"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:14:07.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "high"
        },
        "id": "F5zJlIEb3UtsueX4Lorz"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:14:07.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 2,
            "detail_level": "high"
        },
        "id": "KoPwxOccNx1df0EINy5E"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:14:07.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "high"
        },
        "id": "Xigwt1BgYGN4AdiFu1l0"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:14:07.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 3,
            "detail_level": "high"
        },
        "id": "s537qvMO8eSg2A89rCRo"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:14:07.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "high"
        },
        "id": "u21c3yL5gQpdHl9frIX9"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:14:07.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 1,
            "detail_level": "high"
        },
        "id": "zixvpucIZX8reFmP8Bp8"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:14:09.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "high"
        },
        "id": "0qsDbDbXWjzuN3Vd1ex6"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:14:09.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "high"
        },
        "id": "2mMhAn2SfFBPUoN9kZ2N"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:14:09.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 1,
            "detail_level": "high"
        },
        "id": "Nriq80kDFEKINRLOhdZu"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:14:09.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 3,
            "detail_level": "high"
        },
        "id": "UOIpLoqNObuqVOlDgvC9"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:14:09.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 0,
            "detail_level": "high"
        },
        "id": "lHnC4jCPVtWSm6PWv04q"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:14:10.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "high"
        },
        "id": "JIplS8bwvk5ywOEke1SR"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:14:10.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 9,
            "detail_level": "high"
        },
        "id": "R0AVhbr1GJMuBWhNDYu2"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:14:10.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 6,
            "detail_level": "high"
        },
        "id": "f2D4xhb1dwNpsyty0nfz"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:14:10.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 4,
            "detail_level": "high"
        },
        "id": "jlLMnLMr04JhdCt6ghqW"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:14:10.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "high"
        },
        "id": "jmHaP0Au7wgtE4kKGAZg"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:14:10.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "high"
        },
        "id": "puHz8JCWPUh3wocVJEo6"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:14:14.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 7,
            "detail_level": "high"
        },
        "id": "7C41OG1jXQRUxSLYmLw2"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:14:14.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "high"
        },
        "id": "ZkUPFiWp1nhvIAcyUeP5"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:14:14.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "high"
        },
        "id": "ff4l1FKJ7YUXr8MKo4ll"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:14:14.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 8,
            "detail_level": "high"
        },
        "id": "xGzkVCLoLYUQKDLPP2ZD"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:14:15.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "high"
        },
        "id": "BcSU6PZoDz3glsEHI4hD"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:14:15.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 9,
            "detail_level": "high"
        },
        "id": "LndfNGsweyy77IbvLE4B"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:14:17.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "high"
        },
        "id": "tTC9Odmb8bzmhMxZmm1A"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:14:18.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 5,
            "detail_level": "high"
        },
        "id": "9LbI2e06NkSZfntX9G4K"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:14:18.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 3,
            "detail_level": "high"
        },
        "id": "LtgRBb77QFKb3kKuzEyE"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:14:18.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "high"
        },
        "id": "RRVPLgGCOK0bFRRooKlW"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:14:18.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "high"
        },
        "id": "a1fF4ScYu7dv79zzOhCK"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:14:18.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 9,
            "detail_level": "high"
        },
        "id": "aeExeK5nQJs83552GE6r"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:14:18.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 8,
            "detail_level": "high"
        },
        "id": "bB9rc8P4bvtRfngJs5rY"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:14:18.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 5,
            "detail_level": "high"
        },
        "id": "cc5jajNVpDgLxhn4Juh8"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:14:18.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 4,
            "detail_level": "high"
        },
        "id": "h8qfWEM4MiHmaQLAPx4R"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:14:18.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "high"
        },
        "id": "hBSJz6c68M1RTxmBFdn5"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:14:18.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "high"
        },
        "id": "hrp7OMArXWDOYWXR7DPM"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:14:18.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "high"
        },
        "id": "pmA4SXWcUipuqAXjFKnJ"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:14:21.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "high"
        },
        "id": "0znVhFxn83D8sOskBsK6"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:14:21.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 4,
            "detail_level": "high"
        },
        "id": "5UuUo9RyZIoX1pQrYfUB"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:14:21.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 0,
            "detail_level": "high"
        },
        "id": "9hHykdkIfzk0OlBSh5ZF"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:14:21.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "high"
        },
        "id": "KXMhZFzDSeyNwYZUBCCX"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:14:21.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "high"
        },
        "id": "Od9zHqG87w0AdkgS12Xa"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:14:21.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "high"
        },
        "id": "pVFM8ZneTtHRHrjm4GVL"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:14:21.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 1,
            "detail_level": "high"
        },
        "id": "v7naNd4RFcrBC9bf9oAW"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:14:22.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "1ImDSeG2RBVj5VVGJ7ac"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:14:22.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 2,
            "detail_level": "medium"
        },
        "id": "6sQ6zKVR4moRKLBlqnyN"
    },
    {
        "event": "change_summary_level",
        "timestamp": "2025-08-17 11:14:22.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "after_structured": "unstructured",
            "before_structured": "unstructured",
            "after_detail_level": "medium",
            "before_detail_level": "high"
        },
        "id": "9EKRFBcAljKqKchLgq0E"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:14:22.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "XDrtf0umHzLNPD4nxLXJ"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:14:22.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 2,
            "detail_level": "medium"
        },
        "id": "ZVyMlxMhQR1b4gAsL7NO"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:14:22.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "fa272dJmfraAvr6cFsHw"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:14:22.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 1,
            "detail_level": "medium"
        },
        "id": "kfP3ND7dU5nzIlMLVFLE"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:14:22.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 0,
            "detail_level": "medium"
        },
        "id": "uYR1DA7w7fjO4tjCv6Sp"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:14:23.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "low"
        },
        "id": "DUYSmUeplCq0PApMTXNx"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:14:23.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 0,
            "detail_level": "low"
        },
        "id": "UBxcNhe8VxWvyIT6BKCk"
    },
    {
        "event": "change_summary_level",
        "timestamp": "2025-08-17 11:14:23.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "after_structured": "unstructured",
            "before_structured": "unstructured",
            "after_detail_level": "low",
            "before_detail_level": "medium"
        },
        "id": "m39AItlBMluNdgajFPwA"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:14:23.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "ohBr3YFWMN3cDSngmZbr"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:14:24.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 0,
            "detail_level": "low"
        },
        "id": "U7jjuXJZk2QuH4Wn63oH"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:14:24.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "low"
        },
        "id": "c99RYf0OfdQQHmWDUeDh"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:14:24.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 2,
            "detail_level": "low"
        },
        "id": "mNHvuwGpujFMSEcmpY69"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:14:24.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "low"
        },
        "id": "uJEBIPFCCdaEc8hXFlAf"
    },
    {
        "event": "change_summary_level",
        "timestamp": "2025-08-17 11:14:25.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "after_structured": "unstructured",
            "before_structured": "unstructured",
            "after_detail_level": "medium",
            "before_detail_level": "low"
        },
        "id": "Q2lGPji4xHej6Dr2ZuUk"
    },
    {
        "event": "change_summary_level",
        "timestamp": "2025-08-17 11:14:25.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "after_structured": "unstructured",
            "before_structured": "unstructured",
            "after_detail_level": "high",
            "before_detail_level": "medium"
        },
        "id": "sNq12SaLftqMvjLbKdlU"
    },
    {
        "event": "change_summary_level",
        "timestamp": "2025-08-17 11:14:26.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "after_structured": "unstructured",
            "before_structured": "unstructured",
            "after_detail_level": "low",
            "before_detail_level": "high"
        },
        "id": "43CCOOiz74TftbkQ8TLA"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:14:26.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 2,
            "detail_level": "high"
        },
        "id": "53eiEcnifEVnJoWJvBnw"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:14:26.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "high"
        },
        "id": "8M3r9zPWSGWRka1wnBTo"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:14:26.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 4,
            "detail_level": "high"
        },
        "id": "OlnLF65uoEHi8ylFS9rH"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:14:26.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 0,
            "detail_level": "high"
        },
        "id": "P3D3624AWtwn7m0SHa8O"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:14:26.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 1,
            "detail_level": "high"
        },
        "id": "TL3Ohn0YbBiXDFTjBC75"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:14:26.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "high"
        },
        "id": "TjKEEVjklbsr3vmR0H8T"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:14:26.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "high"
        },
        "id": "V6H3RyZZzr8QBQ8Ufnt3"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:14:26.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 1,
            "detail_level": "high"
        },
        "id": "YnQ4bxtOk2HAXxl0fsfH"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:14:26.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 2,
            "detail_level": "high"
        },
        "id": "Z9nu4Tm5Z20KPjuaQF7e"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:14:26.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "high"
        },
        "id": "rgXpzraAtAXGgw3N8zZd"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:14:26.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "high"
        },
        "id": "ufcJL5mwvRhL6Wno6e40"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:14:26.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "high"
        },
        "id": "wX3AJ1qfEiRMQXTKqYlR"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:14:27.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 1,
            "detail_level": "low"
        },
        "id": "EADFw7vxtoTI0xo41iBl"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:14:27.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "low"
        },
        "id": "IdSfyS8TTfUl2obGAWzQ"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:14:27.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "low"
        },
        "id": "KcOc8REuEcEoGnTN7NKx"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:14:27.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 0,
            "detail_level": "low"
        },
        "id": "UFrre2kwY2GLfrxlyAt4"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:14:27.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 0,
            "detail_level": "low"
        },
        "id": "ldCq18ykI84PkNAcrdIG"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:14:28.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "low"
        },
        "id": "UAmDVabq77Mke6T8a8P7"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:14:29.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 2,
            "detail_level": "low"
        },
        "id": "5Zzko3KIriZWL4eSZW1P"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:14:29.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 0,
            "detail_level": "low"
        },
        "id": "W7tMePrBB85lcra8EfGn"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:14:29.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "low"
        },
        "id": "kYnuw9vb5Ie39yqv4E3q"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:14:29.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "low"
        },
        "id": "mbpfnYxoQLm8DZq3ydM7"
    },
    {
        "event": "change_summary_level",
        "timestamp": "2025-08-17 11:14:30.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "after_structured": "structured",
            "before_structured": "unstructured",
            "after_detail_level": "low",
            "before_detail_level": "low"
        },
        "id": "8I1UP6ShgAcsQWoR4v8q"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:14:30.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 0,
            "detail_level": "low"
        },
        "id": "KgsCp91p5K2JP1i5V7G7"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:14:30.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "low"
        },
        "id": "ZxlZ7yMbkR9YoVSJcLWq"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:14:30.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 1,
            "detail_level": "low"
        },
        "id": "yXPigssu0ATfzpzJaxYS"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:14:31.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 2,
            "detail_level": "low"
        },
        "id": "n7MCEovDVo6lA210gwGK"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:14:31.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "low"
        },
        "id": "nQ4Hj1rw9SP7jn0YGHmd"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:14:32.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "low"
        },
        "id": "DfLCf1x6cnVSVTInSBga"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:14:32.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "low"
        },
        "id": "JilwIXcKFUP4cqfnbVLk"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:14:32.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 1,
            "detail_level": "low"
        },
        "id": "XuT1yWBmUYXXSJuYJsHi"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:14:32.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 0,
            "detail_level": "low"
        },
        "id": "bQTgPJi7axTOjENZDDse"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:14:32.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "low"
        },
        "id": "l4gQWH2vO0RcOGyCSDoS"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:14:33.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 1,
            "detail_level": "low"
        },
        "id": "4Vzux9hMBnbeVhar0sw8"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:14:33.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "low"
        },
        "id": "6g9Bt60joYkBKycgosD5"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:14:33.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 1,
            "detail_level": "low"
        },
        "id": "M4OH6RQt2sccLi5cGzEk"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:14:33.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 0,
            "detail_level": "low"
        },
        "id": "Xe97VlKMKn2oWu00gzx7"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:14:33.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "low"
        },
        "id": "pn6eaB65hlhu9CW5mo7q"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:14:33.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 0,
            "detail_level": "low"
        },
        "id": "uwmkcQwWKuqli2dDjHLO"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:14:33.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "low"
        },
        "id": "wZcT8wLEepw2pHtkiAJA"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:14:34.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "low"
        },
        "id": "i96trtUcs4UoUNvjvyHR"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:14:34.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 2,
            "detail_level": "low"
        },
        "id": "oCpUJPgcepfCIFwTeikR"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:14:35.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "low"
        },
        "id": "crllrYyxeI4Bz55Ax3jT"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:14:37.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 2,
            "detail_level": "medium"
        },
        "id": "3uybhVbwOELcZ2vZQ4bQ"
    },
    {
        "event": "change_summary_level",
        "timestamp": "2025-08-17 11:14:37.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "after_structured": "structured",
            "before_structured": "structured",
            "after_detail_level": "medium",
            "before_detail_level": "low"
        },
        "id": "DJ1ZGeIDTuOMHqJNaAI0"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:14:37.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 0,
            "detail_level": "medium"
        },
        "id": "Nkz7FNqlQNszNsFbinAG"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:14:37.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 1,
            "detail_level": "medium"
        },
        "id": "NraCL1OkJj1scXTiQBKQ"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:14:37.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "id": "cFHDz8WhmJrXEHboxyO3"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:14:37.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 3,
            "detail_level": "medium"
        },
        "id": "eVODEupI0LM3ssYk9dso"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:14:37.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "id": "k92fr0FgpNRMlfIBs6H5"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:14:37.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "id": "s8OC2le9beaYpcQhJscB"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:14:37.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "id": "y5bqCfFiTY9mHTfRyE4n"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:14:38.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "id": "0jHwlboncGAy33rg0UA2"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:14:38.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "id": "2nAr26gOZef5qiBI8uSL"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:14:38.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 3,
            "detail_level": "medium"
        },
        "id": "3ljnL8vaLvoIK2sPCMYt"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:14:38.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 1,
            "detail_level": "medium"
        },
        "id": "5gGB8ie8aYtkKLr0KeVi"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:14:38.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 2,
            "detail_level": "medium"
        },
        "id": "6RqQjkOTruQHbqxbuWT3"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:14:38.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "id": "7NX2vliy4ZppnyQoGnDV"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:14:38.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 2,
            "detail_level": "medium"
        },
        "id": "96z3PbkBdEfzG60Rni6E"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:14:38.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "id": "9D37isgKYFXkxfg5usgd"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:14:38.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "id": "Dnyp53KPvZI0G6eVlori"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:14:38.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 1,
            "detail_level": "medium"
        },
        "id": "WuNN6cRYarXTRbxN1aoP"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:14:38.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 0,
            "detail_level": "medium"
        },
        "id": "ZOt4ImlOpkHbdABd3LVm"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:14:39.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "id": "7rjWwx5yi0VbBmq6wryq"
    },
    {
        "event": "change_summary_level",
        "timestamp": "2025-08-17 11:14:39.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "after_structured": "structured",
            "before_structured": "structured",
            "after_detail_level": "high",
            "before_detail_level": "medium"
        },
        "id": "sRSnlRssgNS7geFkOgj9"
    },
    {
        "event": "change_summary_level",
        "timestamp": "2025-08-17 11:14:40.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "after_structured": "structured",
            "before_structured": "structured",
            "after_detail_level": "medium",
            "before_detail_level": "high"
        },
        "id": "tSXFuzXDTwTl4ZkxkXql"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:14:41.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "id": "5f5Aj9YaiInafy0XBbRz"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:14:41.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 7,
            "detail_level": "high"
        },
        "id": "6jI0GkyL3kjRKBLTZyfn"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:14:41.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "id": "6ss8IWJiLZGf49yyzBxw"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:14:41.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 11,
            "detail_level": "high"
        },
        "id": "8qx8oZSxhEoSpPeX3igw"
    },
    {
        "event": "change_summary_level",
        "timestamp": "2025-08-17 11:14:41.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "after_structured": "structured",
            "before_structured": "structured",
            "after_detail_level": "high",
            "before_detail_level": "medium"
        },
        "id": "ELj2e4U2B5nN8RhkvTu8"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:14:41.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "id": "PKnpNI7vnuaHtOeCXFZY"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:14:41.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "id": "U1DRf8qpw3w2S3jVwWxZ"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:14:41.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "id": "gIbwsgBnUfFkWyVGJjHd"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:14:41.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 9,
            "detail_level": "high"
        },
        "id": "i1E4SiaczU5uDN12cbIE"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:14:41.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 2,
            "detail_level": "high"
        },
        "id": "k7Ga3tNoirPJEVZeBmpa"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:14:41.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 10,
            "detail_level": "high"
        },
        "id": "lqHlcYmEv8oD2ZYKZrvh"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:14:41.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "id": "sjYkHu4KGcE0CPkkxWCa"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:14:41.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 4,
            "detail_level": "high"
        },
        "id": "tA82do6F6pwA3bkk8q0n"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:14:41.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 8,
            "detail_level": "high"
        },
        "id": "zFnP2TwIpvspzKAGhZ5o"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:14:42.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "id": "u7F8Lr8DvfCWF9Wi7kcE"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:14:43.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 11,
            "detail_level": "high"
        },
        "id": "zUH4DAQzlGS4SeumM4R3"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:14:44.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 10,
            "detail_level": "high"
        },
        "id": "E54IVOY4ByXV0aZDybJ9"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:14:44.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "id": "XyHIAcnYYsNzmvrKAE9V"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:14:44.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 11,
            "detail_level": "high"
        },
        "id": "aqN6si7zd6mHDQD8FXgp"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:14:44.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "id": "iLpEA9Y3QJpZU8nwl3mX"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:14:45.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 9,
            "detail_level": "high"
        },
        "id": "Xtr2iTgHCM7oUIB2AKoL"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:14:45.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "id": "gPLWLcfiOPBJULY2XLnC"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:14:46.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "id": "0RJZt0cnV4X6a71jDBx1"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:14:47.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "id": "1ZwR6CuCF8jkBLASRtqq"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:14:47.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 8,
            "detail_level": "high"
        },
        "id": "9NIn4I9BUUWC3l9L2CrH"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:14:47.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 7,
            "detail_level": "high"
        },
        "id": "NJaGQVBKFZnNv5c6Fg8G"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:14:47.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 4,
            "detail_level": "high"
        },
        "id": "YJCYNHaCWhKE3awEOI6C"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:14:47.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 6,
            "detail_level": "high"
        },
        "id": "bSIqRE2k1ug4OWeX98CF"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:14:47.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "id": "lH2sIDvjXTh4PqRTrm6R"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:14:47.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "id": "rjlMG61tPoY7vCN5LyUl"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:14:48.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "id": "5NztEfL7U52A1pGdH0Cm"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:14:48.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 9,
            "detail_level": "high"
        },
        "id": "70Fjv00tyZULlEFv0mzx"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:14:48.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "id": "EKq5wfKnng3ixdpqKa0I"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:14:48.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 8,
            "detail_level": "high"
        },
        "id": "ZojgGjyxSLLxtrERYcoI"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:14:54.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "id": "RshLfh3X67afUPZOw4YB"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:14:54.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 7,
            "detail_level": "high"
        },
        "id": "fYxYV6IAuRQJ89i5m6Y2"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:14:55.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 6,
            "detail_level": "high"
        },
        "id": "K8RcIryZPQznui35g3bA"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:14:55.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "id": "mTnEjFg9RIuEdPROqaq8"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:14:56.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 7,
            "detail_level": "high"
        },
        "id": "Kl1XIWOfJ86omDt3m66q"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:14:56.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "id": "WJDsWiA5aAG4ZyoqroXh"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:14:56.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 6,
            "detail_level": "high"
        },
        "id": "XGYodIAgGqC0rYwCPjCM"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:14:56.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "id": "ZIKmLFCVcT3RQ4mQ4nil"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:14:58.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 5,
            "detail_level": "high"
        },
        "id": "Khjovs8LuKi9EYMJtlG6"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:14:58.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "id": "ap8v8khkrYQZ5Q7RPKqk"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:14:59.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 4,
            "detail_level": "high"
        },
        "id": "Ysj8xseCKsbjPwcPypCP"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:14:59.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "id": "cNStir3OcjTq2O0AgqYE"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:15:01.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "id": "PD8BHSnKAgNd27fhS7ev"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:15:02.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 6,
            "detail_level": "high"
        },
        "id": "8mbptmfwzaKVHtH8QEHf"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:15:02.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "id": "I6Odvp7TdIZcsOyWC54E"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:15:02.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 7,
            "detail_level": "high"
        },
        "id": "K2JVzTngNbSejnHdgYm2"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:15:02.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 9,
            "detail_level": "high"
        },
        "id": "Uo4k3NSvflp4q8RNVGk2"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:15:02.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "id": "df18EpNk3kMPtn8NErG8"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:15:02.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "id": "gj9wx8CicAXemSLkkvzX"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:15:02.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 7,
            "detail_level": "high"
        },
        "id": "nsMhAZZfpv8a1EQK5Iek"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:15:02.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "id": "pmltL3Xp4FpxV40sOI8C"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:15:02.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 6,
            "detail_level": "high"
        },
        "id": "zELnTXE390geZ05XnbEd"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:15:03.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 7,
            "detail_level": "high"
        },
        "id": "bOL81A87NtWP3crDsaj2"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:15:03.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "id": "qsIWKXt4TK8YWwjCy0bN"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:15:04.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "id": "5aeo2kyXnzyYWLcphgv5"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:15:04.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 6,
            "detail_level": "high"
        },
        "id": "KDVxA9k4LeOvUzUrNQxi"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:15:05.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 2,
            "detail_level": "high"
        },
        "id": "1ifemqpSaNMQ12oWo7WU"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:15:05.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "id": "4K2mCEUHMI4cLXxAjxQW"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:15:05.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 4,
            "detail_level": "high"
        },
        "id": "KhyLmcWhj1sIBxLWh7ce"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:15:05.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 0,
            "detail_level": "high"
        },
        "id": "RKeSnKi3eIJKpGYuvhKj"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:15:05.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "id": "XUBZjKjI8iaTn27lM1Sg"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:15:05.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 5,
            "detail_level": "high"
        },
        "id": "XY9dgh3caw5R7EB0L4Qd"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:15:05.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "id": "fRh0zQXZkxojU6Qqo2JG"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:15:05.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "id": "kh6TTlcNmx6EKfidxdLF"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:15:05.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 3,
            "detail_level": "high"
        },
        "id": "tfkcvkfN7dwNivsFtEV6"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:15:05.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "id": "wOyobaLDuTNLS3y6pR3Q"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:15:05.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "id": "zJQB082NqzsgZSwebTX8"
    },
    {
        "event": "change_summary_level",
        "timestamp": "2025-08-17 11:15:06.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "after_structured": "structured",
            "before_structured": "structured",
            "after_detail_level": "medium",
            "before_detail_level": "high"
        },
        "id": "62103dot4Me6UZd9dxEF"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:15:06.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "id": "HwbQrxiXmtc9U7P3b5YX"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:15:06.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 1,
            "detail_level": "medium"
        },
        "id": "PLSJ9Cz7DeEOG6qvzEWy"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:15:06.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 3,
            "detail_level": "medium"
        },
        "id": "Uy1Vrj3KhMqUnbn1JGXO"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:15:06.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 2,
            "detail_level": "medium"
        },
        "id": "VJ1CPBJeirR0KvrYHyJH"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:15:06.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 2,
            "detail_level": "medium"
        },
        "id": "Y6VIMez3gmDU4GdelTP6"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:15:06.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "id": "emScpcppOIuw0V6bwJDY"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:15:06.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "id": "f3PGU4XqjBYM8jITMiDp"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:15:06.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "id": "jMwpP31evQSOgODD798P"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:15:06.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 0,
            "detail_level": "medium"
        },
        "id": "rFtWLDSADnSnJvYmbEFf"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:15:08.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "id": "3uXlJFpJpU0lBQR5jVIw"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:15:08.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 0,
            "detail_level": "medium"
        },
        "id": "QtVS8nyaTaFlftWP7bPY"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:15:08.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "id": "SglkvWCuC1qZxB4AFjqT"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:15:08.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 1,
            "detail_level": "medium"
        },
        "id": "uwg5OVHdXrPojOLp7rW3"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:15:09.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 1,
            "detail_level": "medium"
        },
        "id": "R0V9M9E3UjHfNxJEx81P"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:15:09.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "id": "iU1tHEq2VrWFu2cSdlKN"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:15:10.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "id": "AJBIWOMmAvWUGL3IhKt4"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:15:10.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 0,
            "detail_level": "medium"
        },
        "id": "BLXsebc4Zb4W1bcm4sd4"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:15:12.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 1,
            "detail_level": "medium"
        },
        "id": "XOXwAG8b0BZRg7iLrfAc"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:15:12.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "id": "p9VV6XI8ifuD2H0hZqRX"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:15:14.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 0,
            "detail_level": "medium"
        },
        "id": "Q0ZSD5LDDbSm8kiQsnxo"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:15:14.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "id": "jBPgkzD1aUBzBGQgZdGg"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:15:14.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "id": "mMDrdyrdi7VBAoijpNan"
    },
    {
        "event": "change_summary_level",
        "timestamp": "2025-08-17 11:15:15.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "after_structured": "structured",
            "before_structured": "structured",
            "after_detail_level": "low",
            "before_detail_level": "medium"
        },
        "id": "DFK6KUWGYFc3WozeP2Ck"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:15:16.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 0,
            "detail_level": "low"
        },
        "id": "0VPZOIhAPTWfwyf3RUW1"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:15:16.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "low"
        },
        "id": "204oodIuzimjyKmlDNrh"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:15:16.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 1,
            "detail_level": "low"
        },
        "id": "3ADBJcjgJKPaHi4Q8n8A"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:15:16.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "low"
        },
        "id": "GjGc97MP9hD1sEeGCs2b"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:15:16.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 0,
            "detail_level": "low"
        },
        "id": "RShi3WJALhSjNkIo24Rh"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:15:17.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 1,
            "detail_level": "low"
        },
        "id": "2umW0rFJEK6iSj8Wzbzd"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:15:17.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "low"
        },
        "id": "MLNupkGIYXZqbEUr024V"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:15:17.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "low"
        },
        "id": "VOixAN3tauypiYAVRQnz"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:15:17.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 0,
            "detail_level": "low"
        },
        "id": "vZTd45XRFP9Meu0BSb8p"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:15:18.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 1,
            "detail_level": "low"
        },
        "id": "7q6nD47NvBmS4XV4jiDq"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:15:18.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "low"
        },
        "id": "8azRwJe0iOZ5Lfh5JhmC"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:15:19.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "low"
        },
        "id": "7xyNEEr1XZfDRM0cIacY"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:15:19.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 0,
            "detail_level": "low"
        },
        "id": "QXvZ3qKUj0BgRKlb1tuK"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:15:19.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 1,
            "detail_level": "low"
        },
        "id": "riwOm8Fk3cHClIoh9H2K"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:15:19.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "low"
        },
        "id": "sGQgVD6QRsWtCeKyduRn"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:15:21.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 0,
            "detail_level": "low"
        },
        "id": "ExI1zScSzSnJ7FCP7zzM"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:15:21.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "low"
        },
        "id": "IQffxQfhG9jVme0VB1nE"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:15:22.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 1,
            "detail_level": "low"
        },
        "id": "IeFAfoWQUnq9aGEQrPKL"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:15:22.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "low"
        },
        "id": "XqpgutYRgjgvM17p6ytC"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:15:22.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "low"
        },
        "id": "YqTQ06iA61rTqJyg499Z"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:15:22.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 0,
            "detail_level": "low"
        },
        "id": "wvCi9N4RqPZ8hFLxzype"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:15:23.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "low"
        },
        "id": "ek0ZYLjB8WJlwKdF4jwH"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:15:24.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 0,
            "detail_level": "low"
        },
        "id": "bE9BH1aWXxpQxkr40w7E"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:15:24.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "low"
        },
        "id": "uG5q3qxD8CEGqy7oTwTu"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:15:25.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 0,
            "detail_level": "low"
        },
        "id": "NpGGEDwiiRT30IR3YyBp"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:15:25.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "low"
        },
        "id": "jpz0Wwqwcfi91aHHik3O"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:15:30.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "id": "6Rq11i5RfmH57oeo16uP"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:15:30.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 1,
            "detail_level": "low"
        },
        "id": "7BNRlVlzSPxo92BQRdGc"
    },
    {
        "event": "change_summary_level",
        "timestamp": "2025-08-17 11:15:30.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "after_structured": "structured",
            "before_structured": "structured",
            "after_detail_level": "high",
            "before_detail_level": "low"
        },
        "id": "ABz4z3xBZQVPL5HEbZSq"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:15:30.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 2,
            "detail_level": "low"
        },
        "id": "C1bxf7o2mZshFi5uPltY"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:15:30.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 0,
            "detail_level": "high"
        },
        "id": "Qlr5VBqxKPVPLEVAEN6I"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:15:30.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "low"
        },
        "id": "UTpb6K61bFMAkyW7qKjw"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:15:30.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "id": "oRkXhHVRBgLkEXgnaBfM"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:15:30.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 0,
            "detail_level": "low"
        },
        "id": "sSdT3akiBs0DMlByRh4E"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:15:30.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "low"
        },
        "id": "u6AY1Cdb60rluCjUK1CW"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:15:30.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 1,
            "detail_level": "high"
        },
        "id": "zPEg11Uu142F8WFHbmAd"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:15:30.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "low"
        },
        "id": "zPXHR0dHshBddHbPS5UR"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:15:37.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "id": "8xzKWZYpajmkAdSybVrM"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:15:37.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 5,
            "detail_level": "high"
        },
        "id": "AD06bUzNG2XGM7FzRuqw"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:15:37.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "id": "ByBTF5JAkTqSHiz0Lb1i"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:15:37.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 5,
            "detail_level": "high"
        },
        "id": "NqsLZah62LkZvwxzkpua"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:15:37.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "high"
        },
        "id": "ZtEYI2Vm43dXmBuo3M3e"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:15:37.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 6,
            "detail_level": "high"
        },
        "id": "g23mz2OMMJ1wmtrMtQ6E"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:15:44.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 3,
            "detail_level": "medium"
        },
        "id": "01n1hIX0EQoQf5JgFmfJ"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:15:44.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 1,
            "detail_level": "medium"
        },
        "id": "51Jel5LD6QlMsae9uwC1"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:15:44.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "id": "DUHQSQrtyILRK94mjnLc"
    },
    {
        "event": "change_summary_level",
        "timestamp": "2025-08-17 11:15:44.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "after_structured": "structured",
            "before_structured": "structured",
            "after_detail_level": "medium",
            "before_detail_level": "high"
        },
        "id": "I5z5pfuz973uDuptgNvD"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:15:44.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "id": "MMJpHow3q1nfk5671svV"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:15:44.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 0,
            "detail_level": "medium"
        },
        "id": "NxFyBCJFgcv6Z7dOKZqC"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:15:44.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "id": "XvOoZnMxkAHGaqQcZZS5"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:15:44.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 2,
            "detail_level": "medium"
        },
        "id": "rpUcgPaJ4A7QqBTf5R1r"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:15:44.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "id": "yJZ0zUyRWjlpeHE97K1U"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:15:45.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "id": "0sPL6NcAg8S5hAxscP2x"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:15:45.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 2,
            "detail_level": "medium"
        },
        "id": "2qUvQCqwPjHftJ9FUDY0"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:15:45.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "id": "F9Oy29GQyfWSiqjluaRM"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:15:45.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "id": "JZYEpqVpLMuWX6OLRRsy"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:15:45.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "id": "QSfxwmOl7jCmzRUZnh05"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:15:45.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 1,
            "detail_level": "medium"
        },
        "id": "UbQ60tkQ6657MinFglWN"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:15:45.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "id": "Ul0kzSk6b5UEjfCAIpeE"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:15:45.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "detail_level": "medium"
        },
        "id": "hPRo2EkDjpaMjy9LJ2qE"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:15:45.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 3,
            "detail_level": "medium"
        },
        "id": "jlN7onGV16ndX68ImtpI"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:15:45.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 2,
            "detail_level": "medium"
        },
        "id": "qNWlt2iRl0elDcHGXSrI"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:15:45.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 0,
            "detail_level": "medium"
        },
        "id": "qaXz2SWqFNsBjqJxgD6Y"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:15:45.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "structured",
            "mapping_index": 1,
            "detail_level": "medium"
        },
        "id": "w0MWDIpoErL2yEKVhaOY"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:15:47.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "66IXKTXHgPb6sRLev3sa"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:15:47.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 2,
            "detail_level": "medium"
        },
        "id": "Fvo4pRImIdLs0c1C2ksW"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:15:47.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 5,
            "detail_level": "medium"
        },
        "id": "I6WOyCI4rBedn8msRSxn"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:15:47.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 0,
            "detail_level": "medium"
        },
        "id": "N3xHrOzmQydJsUleVH9w"
    },
    {
        "event": "change_summary_level",
        "timestamp": "2025-08-17 11:15:47.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "after_structured": "unstructured",
            "before_structured": "structured",
            "after_detail_level": "medium",
            "before_detail_level": "medium"
        },
        "id": "PRUlM5TI1kbv7ed0CxYW"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:15:47.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "qBlb7s4msjgkaGtbboiX"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:15:48.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "2MsmogTaprxf2pYFqeao"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:15:48.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "2qo67BBLA36EPXEMiiyI"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:15:48.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 3,
            "detail_level": "medium"
        },
        "id": "6jQpdvWGfwXNDqXuen9k"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:15:48.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "KG3wni3WLGDWocW66CCw"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:15:48.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 5,
            "detail_level": "medium"
        },
        "id": "saYNyJJnHNp9rA3oaUEX"
    },
    {
        "event": "click_summarize_code",
        "timestamp": "2025-08-17 11:15:52.000",
        "source": "frontend",
        "data": {},
        "id": "RHGaFb47PKg8kcNwyEfv"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:15:53.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 1,
            "detail_level": "medium"
        },
        "id": "3JAjzG1qTGLSSgdFTbG8"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:15:53.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "mQtudtzyY3CesKslyoNz"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:15:54.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 1,
            "detail_level": "medium"
        },
        "id": "8BWvGtjINnJ2ioopGWgm"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:15:54.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "A3T64mcYYYlhyX6MBW6I"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:15:54.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "Cke63xcanv68ztJ8GmT9"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:15:54.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 8,
            "detail_level": "medium"
        },
        "id": "IuY627G7peRiM42ozxgg"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:15:54.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "XqTrNjLyqf7Fzg3WuqPH"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:15:54.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 2,
            "detail_level": "medium"
        },
        "id": "kBo9SQkroOGpI4p0ZSRv"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:15:55.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 1,
            "detail_level": "medium"
        },
        "id": "Av2AawLGLxC3T4WSxjXM"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:15:55.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "e66A8sm9beNoXrSzAaHW"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:15:55.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 2,
            "detail_level": "medium"
        },
        "id": "iZep5Hqzg43LDLQZYRbP"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:15:56.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 9,
            "detail_level": "medium"
        },
        "id": "06a0E1lJql4nyGg8RG7J"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:15:56.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "p6tvc9AIfsuKYrTD9Zrp"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:15:56.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "uvNzIH1vTWhdHbsR2Ac5"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:15:57.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 9,
            "detail_level": "medium"
        },
        "id": "3sVwhZqRcRbpJpcmFBBU"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:15:57.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 5,
            "detail_level": "medium"
        },
        "id": "mRaB4HvpFJ3buXLpamyp"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:15:57.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "yG0djIhuldtMtRM8utU0"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:15:58.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "8qy1nFWLvTgcfapKyfqs"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:15:58.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "mapping_index": 3,
            "detail_level": "medium"
        },
        "id": "DcvI5KwcMYw9Occo6kSF"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:15:58.000",
        "source": "frontend",
        "data": {
            "section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "p6AfblRHap7oeklF0aUk"
    },
    {
        "event": "summarize_selected_code",
        "timestamp": "2025-08-17 11:15:59.000",
        "source": "backend",
        "data": {
            "selected_code": "const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };\n",
            "summary": {
                "high_structured": "• Processes a date-time string input, usually in ISO 8601 format\n• Splits the input string at the 'T' character\n  ◦ The 'T' typically separates the date and time components\n• Returns the first part of the split, which corresponds to the date (e.g., 'YYYY-MM-DD')\n• Discards any time information present in the original string\n• Useful for simplifying date displays in UI components\n• Helps ensure consistent date formatting throughout the application",
                "low_structured": "• Extracts date from a date-time string\n• Returns only the date part",
                "title": "Summary of formatDateString Function",
                "medium_structured": "• Accepts a date string as input\n• Splits the string at the 'T' character\n  ◦ Returns the first segment, which is the date\n• Useful for formatting ISO date-time strings",
                "medium_unstructured": "The formatDateString function takes a date string as input and returns only the date portion. It does this by splitting the input string at the 'T' character and returning the first part. This is useful for formatting ISO date-time strings to display just the date.",
                "high_unstructured": "The formatDateString function is designed to process a date-time string, typically in ISO 8601 format, and extract only the date component. It achieves this by splitting the input string at the 'T' character, which separates the date from the time, and returning the first element of the resulting array. This approach ensures that any time information is discarded, leaving just the date in 'YYYY-MM-DD' format. Such formatting is often used to simplify date displays in user interfaces.",
                "low_unstructured": "This function extracts the date portion from a date-time string."
            }
        },
        "id": "QvMUoLFZcCen0M6xUkbo"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-17 11:16:00.000",
        "source": "backend",
        "data": {
            "code": "19: const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: ",
            "mapping": [
                {
                    "summaryComponent": "This function",
                    "codeSegments": [
                        {
                            "code": "const formatDateString = (date) => {",
                            "line": 19
                        }
                    ]
                },
                {
                    "summaryComponent": "extracts the date portion",
                    "codeSegments": [
                        {
                            "code": "return date.split(\"T\")[0];",
                            "line": 20
                        }
                    ]
                },
                {
                    "summaryComponent": "from a date-time string",
                    "codeSegments": [
                        {
                            "code": "(date)",
                            "line": 19
                        }
                    ]
                }
            ],
            "summary": "This function extracts the date portion from a date-time string."
        },
        "id": "3xj1a09UabdKbFgxCBFg"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-17 11:16:00.000",
        "source": "backend",
        "data": {
            "code": "19: const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: ",
            "mapping": [
                {
                    "summaryComponent": "Extracts date from a date-time string",
                    "codeSegments": [
                        {
                            "code": "date.split(\"T\")[0]",
                            "line": 20
                        }
                    ]
                },
                {
                    "summaryComponent": "Returns only the date part",
                    "codeSegments": [
                        {
                            "code": "return date.split(\"T\")[0];",
                            "line": 20
                        }
                    ]
                }
            ],
            "summary": "• Extracts date from a date-time string\n• Returns only the date part"
        },
        "id": "g9t5bh2Rcjr9jvjKhTlF"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-17 11:16:01.000",
        "source": "backend",
        "data": {
            "code": "19: const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: ",
            "mapping": [
                {
                    "summaryComponent": "Accepts a date string as input",
                    "codeSegments": [
                        {
                            "code": "const formatDateString = (date) => {",
                            "line": 19
                        }
                    ]
                },
                {
                    "summaryComponent": "Splits the string at the 'T' character",
                    "codeSegments": [
                        {
                            "code": "date.split(\"T\")",
                            "line": 20
                        }
                    ]
                },
                {
                    "summaryComponent": "Returns the first segment, which is the date",
                    "codeSegments": [
                        {
                            "code": "return date.split(\"T\")[0];",
                            "line": 20
                        }
                    ]
                },
                {
                    "summaryComponent": "Useful for formatting ISO date-time strings",
                    "codeSegments": [
                        {
                            "code": "const formatDateString = (date) => {",
                            "line": 19
                        },
                        {
                            "code": "return date.split(\"T\")[0];",
                            "line": 20
                        }
                    ]
                }
            ],
            "summary": "• Accepts a date string as input\n• Splits the string at the 'T' character\n  ◦ Returns the first segment, which is the date\n• Useful for formatting ISO date-time strings"
        },
        "id": "QNc230W23Ut47YUY9jrZ"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-17 11:16:01.000",
        "source": "backend",
        "data": {
            "code": "19: const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: ",
            "mapping": [
                {
                    "summaryComponent": "Processes a date-time string input, usually in ISO 8601 format",
                    "codeSegments": [
                        {
                            "code": "const formatDateString = (date) => {",
                            "line": 19
                        }
                    ]
                },
                {
                    "summaryComponent": "Splits the input string at the 'T' character",
                    "codeSegments": [
                        {
                            "code": "date.split(\"T\")",
                            "line": 20
                        }
                    ]
                },
                {
                    "summaryComponent": "Returns the first part of the split, which corresponds to the date (e.g., 'YYYY-MM-DD')",
                    "codeSegments": [
                        {
                            "code": "return date.split(\"T\")[0];",
                            "line": 20
                        }
                    ]
                },
                {
                    "summaryComponent": "Discards any time information present in the original string",
                    "codeSegments": [
                        {
                            "code": "date.split(\"T\")[0]",
                            "line": 20
                        }
                    ]
                },
                {
                    "summaryComponent": "Useful for simplifying date displays in UI components",
                    "codeSegments": [
                        {
                            "code": "const formatDateString = (date) => {",
                            "line": 19
                        }
                    ]
                },
                {
                    "summaryComponent": "Helps ensure consistent date formatting throughout the application",
                    "codeSegments": [
                        {
                            "code": "const formatDateString = (date) => {",
                            "line": 19
                        }
                    ]
                }
            ],
            "summary": "• Processes a date-time string input, usually in ISO 8601 format\n• Splits the input string at the 'T' character\n  ◦ The 'T' typically separates the date and time components\n• Returns the first part of the split, which corresponds to the date (e.g., 'YYYY-MM-DD')\n• Discards any time information present in the original string\n• Useful for simplifying date displays in UI components\n• Helps ensure consistent date formatting throughout the application"
        },
        "id": "qBfn5sFQyogFkQ1HBb7w"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-17 11:16:02.000",
        "source": "backend",
        "data": {
            "code": "19: const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: ",
            "mapping": [
                {
                    "summaryComponent": "The formatDateString function",
                    "codeSegments": [
                        {
                            "code": "const formatDateString = (date) => {",
                            "line": 19
                        }
                    ]
                },
                {
                    "summaryComponent": "takes a date string as input",
                    "codeSegments": [
                        {
                            "code": "(date)",
                            "line": 19
                        }
                    ]
                },
                {
                    "summaryComponent": "returns only the date portion",
                    "codeSegments": [
                        {
                            "code": "return date.split(\"T\")[0];",
                            "line": 20
                        }
                    ]
                },
                {
                    "summaryComponent": "splitting the input string at the 'T' character",
                    "codeSegments": [
                        {
                            "code": "date.split(\"T\")",
                            "line": 20
                        }
                    ]
                },
                {
                    "summaryComponent": "returning the first part",
                    "codeSegments": [
                        {
                            "code": "[0]",
                            "line": 20
                        }
                    ]
                },
                {
                    "summaryComponent": "formatting ISO date-time strings to display just the date",
                    "codeSegments": [
                        {
                            "code": "date.split(\"T\")[0];",
                            "line": 20
                        }
                    ]
                }
            ],
            "summary": "The formatDateString function takes a date string as input and returns only the date portion. It does this by splitting the input string at the 'T' character and returning the first part. This is useful for formatting ISO date-time strings to display just the date."
        },
        "id": "NiL1RmNCjAP4QOrKOGtQ"
    },
    {
        "event": "autotransit_section",
        "timestamp": "2025-08-17 11:16:03.000",
        "source": "frontend",
        "data": {
            "after_section_id": "cb999e28-70f4-4954-b70b-2dbbd7d7b3f2",
            "before_section_id": "dae2ec39-ddac-4a3f-87ee-d8e906f9fd54"
        },
        "id": "9uQIYVfBbSENy1o9r8yY"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-17 11:16:03.000",
        "source": "backend",
        "data": {
            "code": "19: const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: ",
            "mapping": [
                {
                    "summaryComponent": "The formatDateString function",
                    "codeSegments": [
                        {
                            "code": "const formatDateString = (date) => {",
                            "line": 19
                        }
                    ]
                },
                {
                    "summaryComponent": "is designed to process a date-time string",
                    "codeSegments": [
                        {
                            "code": "(date)",
                            "line": 19
                        }
                    ]
                },
                {
                    "summaryComponent": "typically in ISO 8601 format",
                    "codeSegments": [
                        {
                            "code": "(date)",
                            "line": 19
                        }
                    ]
                },
                {
                    "summaryComponent": "and extract only the date component",
                    "codeSegments": [
                        {
                            "code": "return date.split(\"T\")[0];",
                            "line": 20
                        }
                    ]
                },
                {
                    "summaryComponent": "It achieves this by splitting the input string at the 'T' character",
                    "codeSegments": [
                        {
                            "code": "date.split(\"T\")",
                            "line": 20
                        }
                    ]
                },
                {
                    "summaryComponent": "which separates the date from the time",
                    "codeSegments": [
                        {
                            "code": "date.split(\"T\")",
                            "line": 20
                        }
                    ]
                },
                {
                    "summaryComponent": "and returning the first element of the resulting array",
                    "codeSegments": [
                        {
                            "code": "date.split(\"T\")[0]",
                            "line": 20
                        }
                    ]
                },
                {
                    "summaryComponent": "This approach ensures that any time information is discarded",
                    "codeSegments": [
                        {
                            "code": "date.split(\"T\")[0]",
                            "line": 20
                        }
                    ]
                },
                {
                    "summaryComponent": "leaving just the date in 'YYYY-MM-DD' format",
                    "codeSegments": [
                        {
                            "code": "date.split(\"T\")[0]",
                            "line": 20
                        }
                    ]
                },
                {
                    "summaryComponent": "Such formatting is often used to simplify date displays in user interfaces",
                    "codeSegments": [
                        {
                            "code": "const formatDateString = (date) => {",
                            "line": 19
                        }
                    ]
                }
            ],
            "summary": "The formatDateString function is designed to process a date-time string, typically in ISO 8601 format, and extract only the date component. It achieves this by splitting the input string at the 'T' character, which separates the date from the time, and returning the first element of the resulting array. This approach ensures that any time information is discarded, leaving just the date in 'YYYY-MM-DD' format. Such formatting is often used to simplify date displays in user interfaces."
        },
        "id": "L0U1mO2YSrSEOnbHG0My"
    },
    {
        "event": "create_new_section",
        "timestamp": "2025-08-17 11:16:03.000",
        "source": "frontend",
        "data": {
            "section_id": "cb999e28-70f4-4954-b70b-2dbbd7d7b3f2",
            "section_data": {
                "metadata": {
                    "id": "cb999e28-70f4-4954-b70b-2dbbd7d7b3f2",
                    "fullPath": "/project/workspace/frontend/src/StockChart.jsx",
                    "offset": 315,
                    "filename": "StockChart.jsx",
                    "originalCode": "const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };\n"
                },
                "summaryMappings": {
                    "high_structured": [
                        {
                            "summaryComponent": "Processes a date-time string input, usually in ISO 8601 format",
                            "codeSegments": [
                                {
                                    "code": "const formatDateString = (date) => {",
                                    "line": 19
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Splits the input string at the 'T' character",
                            "codeSegments": [
                                {
                                    "code": "date.split(\"T\")",
                                    "line": 20
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Returns the first part of the split, which corresponds to the date (e.g., 'YYYY-MM-DD')",
                            "codeSegments": [
                                {
                                    "code": "return date.split(\"T\")[0];",
                                    "line": 20
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Discards any time information present in the original string",
                            "codeSegments": [
                                {
                                    "code": "date.split(\"T\")[0]",
                                    "line": 20
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Useful for simplifying date displays in UI components",
                            "codeSegments": [
                                {
                                    "code": "const formatDateString = (date) => {",
                                    "line": 19
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Helps ensure consistent date formatting throughout the application",
                            "codeSegments": [
                                {
                                    "code": "const formatDateString = (date) => {",
                                    "line": 19
                                }
                            ]
                        }
                    ],
                    "low_structured": [
                        {
                            "summaryComponent": "Extracts date from a date-time string",
                            "codeSegments": [
                                {
                                    "code": "date.split(\"T\")[0]",
                                    "line": 20
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Returns only the date part",
                            "codeSegments": [
                                {
                                    "code": "return date.split(\"T\")[0];",
                                    "line": 20
                                }
                            ]
                        }
                    ],
                    "medium_structured": [
                        {
                            "summaryComponent": "Accepts a date string as input",
                            "codeSegments": [
                                {
                                    "code": "const formatDateString = (date) => {",
                                    "line": 19
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Splits the string at the 'T' character",
                            "codeSegments": [
                                {
                                    "code": "date.split(\"T\")",
                                    "line": 20
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Returns the first segment, which is the date",
                            "codeSegments": [
                                {
                                    "code": "return date.split(\"T\")[0];",
                                    "line": 20
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Useful for formatting ISO date-time strings",
                            "codeSegments": [
                                {
                                    "code": "const formatDateString = (date) => {",
                                    "line": 19
                                },
                                {
                                    "code": "return date.split(\"T\")[0];",
                                    "line": 20
                                }
                            ]
                        }
                    ],
                    "medium_unstructured": [
                        {
                            "summaryComponent": "The formatDateString function",
                            "codeSegments": [
                                {
                                    "code": "const formatDateString = (date) => {",
                                    "line": 19
                                }
                            ]
                        },
                        {
                            "summaryComponent": "takes a date string as input",
                            "codeSegments": [
                                {
                                    "code": "(date)",
                                    "line": 19
                                }
                            ]
                        },
                        {
                            "summaryComponent": "returns only the date portion",
                            "codeSegments": [
                                {
                                    "code": "return date.split(\"T\")[0];",
                                    "line": 20
                                }
                            ]
                        },
                        {
                            "summaryComponent": "splitting the input string at the 'T' character",
                            "codeSegments": [
                                {
                                    "code": "date.split(\"T\")",
                                    "line": 20
                                }
                            ]
                        },
                        {
                            "summaryComponent": "returning the first part",
                            "codeSegments": [
                                {
                                    "code": "[0]",
                                    "line": 20
                                }
                            ]
                        },
                        {
                            "summaryComponent": "formatting ISO date-time strings to display just the date",
                            "codeSegments": [
                                {
                                    "code": "date.split(\"T\")[0];",
                                    "line": 20
                                }
                            ]
                        }
                    ],
                    "high_unstructured": [
                        {
                            "summaryComponent": "The formatDateString function",
                            "codeSegments": [
                                {
                                    "code": "const formatDateString = (date) => {",
                                    "line": 19
                                }
                            ]
                        },
                        {
                            "summaryComponent": "is designed to process a date-time string",
                            "codeSegments": [
                                {
                                    "code": "(date)",
                                    "line": 19
                                }
                            ]
                        },
                        {
                            "summaryComponent": "typically in ISO 8601 format",
                            "codeSegments": [
                                {
                                    "code": "(date)",
                                    "line": 19
                                }
                            ]
                        },
                        {
                            "summaryComponent": "and extract only the date component",
                            "codeSegments": [
                                {
                                    "code": "return date.split(\"T\")[0];",
                                    "line": 20
                                }
                            ]
                        },
                        {
                            "summaryComponent": "It achieves this by splitting the input string at the 'T' character",
                            "codeSegments": [
                                {
                                    "code": "date.split(\"T\")",
                                    "line": 20
                                }
                            ]
                        },
                        {
                            "summaryComponent": "which separates the date from the time",
                            "codeSegments": [
                                {
                                    "code": "date.split(\"T\")",
                                    "line": 20
                                }
                            ]
                        },
                        {
                            "summaryComponent": "and returning the first element of the resulting array",
                            "codeSegments": [
                                {
                                    "code": "date.split(\"T\")[0]",
                                    "line": 20
                                }
                            ]
                        },
                        {
                            "summaryComponent": "This approach ensures that any time information is discarded",
                            "codeSegments": [
                                {
                                    "code": "date.split(\"T\")[0]",
                                    "line": 20
                                }
                            ]
                        },
                        {
                            "summaryComponent": "leaving just the date in 'YYYY-MM-DD' format",
                            "codeSegments": [
                                {
                                    "code": "date.split(\"T\")[0]",
                                    "line": 20
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Such formatting is often used to simplify date displays in user interfaces",
                            "codeSegments": [
                                {
                                    "code": "const formatDateString = (date) => {",
                                    "line": 19
                                }
                            ]
                        }
                    ],
                    "low_unstructured": [
                        {
                            "summaryComponent": "This function",
                            "codeSegments": [
                                {
                                    "code": "const formatDateString = (date) => {",
                                    "line": 19
                                }
                            ]
                        },
                        {
                            "summaryComponent": "extracts the date portion",
                            "codeSegments": [
                                {
                                    "code": "return date.split(\"T\")[0];",
                                    "line": 20
                                }
                            ]
                        },
                        {
                            "summaryComponent": "from a date-time string",
                            "codeSegments": [
                                {
                                    "code": "(date)",
                                    "line": 19
                                }
                            ]
                        }
                    ]
                },
                "summaryData": {
                    "high_structured": "• Processes a date-time string input, usually in ISO 8601 format\n• Splits the input string at the 'T' character\n  ◦ The 'T' typically separates the date and time components\n• Returns the first part of the split, which corresponds to the date (e.g., 'YYYY-MM-DD')\n• Discards any time information present in the original string\n• Useful for simplifying date displays in UI components\n• Helps ensure consistent date formatting throughout the application",
                    "low_structured": "• Extracts date from a date-time string\n• Returns only the date part",
                    "title": "Summary of formatDateString Function",
                    "medium_structured": "• Accepts a date string as input\n• Splits the string at the 'T' character\n  ◦ Returns the first segment, which is the date\n• Useful for formatting ISO date-time strings",
                    "medium_unstructured": "The formatDateString function takes a date string as input and returns only the date portion. It does this by splitting the input string at the 'T' character and returning the first part. This is useful for formatting ISO date-time strings to display just the date.",
                    "high_unstructured": "The formatDateString function is designed to process a date-time string, typically in ISO 8601 format, and extract only the date component. It achieves this by splitting the input string at the 'T' character, which separates the date from the time, and returning the first element of the resulting array. This approach ensures that any time information is discarded, leaving just the date in 'YYYY-MM-DD' format. Such formatting is often used to simplify date displays in user interfaces.",
                    "low_unstructured": "This function extracts the date portion from a date-time string."
                },
                "lines": [
                    19,
                    22
                ],
                "selectedDetailLevel": "medium",
                "editPromptValue": "",
                "selectedStructured": "unstructured",
                "title": "Summary of formatDateString Function",
                "createdAt": 1755414963000,
                "editPromptDetailLevel": null,
                "editPromptStructured": null
            }
        },
        "id": "b7zrsmFkkgcXWxJomxJb"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:16:04.000",
        "source": "frontend",
        "data": {
            "section_id": "cb999e28-70f4-4954-b70b-2dbbd7d7b3f2",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "bxK8IZupJjCdU9BrXsPg"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:16:04.000",
        "source": "frontend",
        "data": {
            "section_id": "cb999e28-70f4-4954-b70b-2dbbd7d7b3f2",
            "structured_type": "unstructured",
            "mapping_index": 3,
            "detail_level": "medium"
        },
        "id": "n1F8HWiDuvrgnalfM2q6"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:16:05.000",
        "source": "frontend",
        "data": {
            "section_id": "cb999e28-70f4-4954-b70b-2dbbd7d7b3f2",
            "structured_type": "unstructured",
            "mapping_index": 1,
            "detail_level": "medium"
        },
        "id": "49NqWWLGdBlUkk4M1T3K"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:16:05.000",
        "source": "frontend",
        "data": {
            "section_id": "cb999e28-70f4-4954-b70b-2dbbd7d7b3f2",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "Nqhbzy7FTPJo2dKbuzQx"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:16:05.000",
        "source": "frontend",
        "data": {
            "section_id": "cb999e28-70f4-4954-b70b-2dbbd7d7b3f2",
            "structured_type": "unstructured",
            "mapping_index": 5,
            "detail_level": "medium"
        },
        "id": "PAtzVPlLtRfrU9cygaCq"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:16:05.000",
        "source": "frontend",
        "data": {
            "section_id": "cb999e28-70f4-4954-b70b-2dbbd7d7b3f2",
            "structured_type": "unstructured",
            "mapping_index": 4,
            "detail_level": "medium"
        },
        "id": "eGyOKSSBd6n4PUPwMsqK"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:16:05.000",
        "source": "frontend",
        "data": {
            "section_id": "cb999e28-70f4-4954-b70b-2dbbd7d7b3f2",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "kZiaeprKcF2XjCQaHCl4"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:16:06.000",
        "source": "frontend",
        "data": {
            "section_id": "cb999e28-70f4-4954-b70b-2dbbd7d7b3f2",
            "structured_type": "unstructured",
            "mapping_index": 1,
            "detail_level": "medium"
        },
        "id": "28XbgbPQAqtiY2PuEv9h"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:16:06.000",
        "source": "frontend",
        "data": {
            "section_id": "cb999e28-70f4-4954-b70b-2dbbd7d7b3f2",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "7Bd98ClYAHDrA0aspMB6"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:16:06.000",
        "source": "frontend",
        "data": {
            "section_id": "cb999e28-70f4-4954-b70b-2dbbd7d7b3f2",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "Ip6EA4jnkWnicEqR38Wo"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:16:06.000",
        "source": "frontend",
        "data": {
            "section_id": "cb999e28-70f4-4954-b70b-2dbbd7d7b3f2",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "mu7qXGR9B2h0vrRtgxSe"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:16:06.000",
        "source": "frontend",
        "data": {
            "section_id": "cb999e28-70f4-4954-b70b-2dbbd7d7b3f2",
            "structured_type": "unstructured",
            "mapping_index": 3,
            "detail_level": "medium"
        },
        "id": "ub7zupp6L8dUfUCaq4mG"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:16:06.000",
        "source": "frontend",
        "data": {
            "section_id": "cb999e28-70f4-4954-b70b-2dbbd7d7b3f2",
            "structured_type": "unstructured",
            "mapping_index": 3,
            "detail_level": "medium"
        },
        "id": "z55Xe5NeJ0F8MWfgY8G5"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:16:07.000",
        "source": "frontend",
        "data": {
            "section_id": "cb999e28-70f4-4954-b70b-2dbbd7d7b3f2",
            "structured_type": "unstructured",
            "mapping_index": 1,
            "detail_level": "medium"
        },
        "id": "3BbJKqmFEiYpq2ktGsMw"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:16:07.000",
        "source": "frontend",
        "data": {
            "section_id": "cb999e28-70f4-4954-b70b-2dbbd7d7b3f2",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "3EDehe2j4m4NuISg80NV"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:16:07.000",
        "source": "frontend",
        "data": {
            "section_id": "cb999e28-70f4-4954-b70b-2dbbd7d7b3f2",
            "structured_type": "unstructured",
            "mapping_index": 5,
            "detail_level": "medium"
        },
        "id": "DoW2PzqbCJWdPfV1zG2P"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:16:07.000",
        "source": "frontend",
        "data": {
            "section_id": "cb999e28-70f4-4954-b70b-2dbbd7d7b3f2",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "Swy5DKQAhODoT8ipWjux"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:16:07.000",
        "source": "frontend",
        "data": {
            "section_id": "cb999e28-70f4-4954-b70b-2dbbd7d7b3f2",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "ZZ9GAutSa48ednquj3eh"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:16:07.000",
        "source": "frontend",
        "data": {
            "section_id": "cb999e28-70f4-4954-b70b-2dbbd7d7b3f2",
            "structured_type": "unstructured",
            "mapping_index": 5,
            "detail_level": "medium"
        },
        "id": "ZvnpUW8zF2r5tjPcuaK6"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:16:07.000",
        "source": "frontend",
        "data": {
            "section_id": "cb999e28-70f4-4954-b70b-2dbbd7d7b3f2",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "iGCj84lgUf0D1MQUgks7"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:16:07.000",
        "source": "frontend",
        "data": {
            "section_id": "cb999e28-70f4-4954-b70b-2dbbd7d7b3f2",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "oZR7Hizk213BI6eafG6i"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:16:07.000",
        "source": "frontend",
        "data": {
            "section_id": "cb999e28-70f4-4954-b70b-2dbbd7d7b3f2",
            "structured_type": "unstructured",
            "mapping_index": 3,
            "detail_level": "medium"
        },
        "id": "tKqaAbfqP2xtwo31k2pY"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:16:08.000",
        "source": "frontend",
        "data": {
            "section_id": "cb999e28-70f4-4954-b70b-2dbbd7d7b3f2",
            "structured_type": "unstructured",
            "mapping_index": 1,
            "detail_level": "medium"
        },
        "id": "BlGLFMVuD1xkfgkPg7xG"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:16:08.000",
        "source": "frontend",
        "data": {
            "section_id": "cb999e28-70f4-4954-b70b-2dbbd7d7b3f2",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "IApKNC8FqSiwzahEaBnd"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:16:08.000",
        "source": "frontend",
        "data": {
            "section_id": "cb999e28-70f4-4954-b70b-2dbbd7d7b3f2",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "PKkFbpMO9wjIr486FPWQ"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:16:08.000",
        "source": "frontend",
        "data": {
            "section_id": "cb999e28-70f4-4954-b70b-2dbbd7d7b3f2",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "RmVseLjRiLsNPXx6lUaz"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:16:08.000",
        "source": "frontend",
        "data": {
            "section_id": "cb999e28-70f4-4954-b70b-2dbbd7d7b3f2",
            "structured_type": "unstructured",
            "mapping_index": 0,
            "detail_level": "medium"
        },
        "id": "faM08JZ3U83unc9DhNdp"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:16:08.000",
        "source": "frontend",
        "data": {
            "section_id": "cb999e28-70f4-4954-b70b-2dbbd7d7b3f2",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "gCQciQsMW7dXDGvqZKV0"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:16:08.000",
        "source": "frontend",
        "data": {
            "section_id": "cb999e28-70f4-4954-b70b-2dbbd7d7b3f2",
            "structured_type": "unstructured",
            "mapping_index": 1,
            "detail_level": "medium"
        },
        "id": "jARXXqXyxFJMLZ0wdLfK"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:16:08.000",
        "source": "frontend",
        "data": {
            "section_id": "cb999e28-70f4-4954-b70b-2dbbd7d7b3f2",
            "structured_type": "unstructured",
            "mapping_index": 3,
            "detail_level": "medium"
        },
        "id": "mVOu5xepdFDsOWaWDgAj"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:16:08.000",
        "source": "frontend",
        "data": {
            "section_id": "cb999e28-70f4-4954-b70b-2dbbd7d7b3f2",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "psifrdLE7ugt2FrLTOtj"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:16:08.000",
        "source": "frontend",
        "data": {
            "section_id": "cb999e28-70f4-4954-b70b-2dbbd7d7b3f2",
            "structured_type": "unstructured",
            "mapping_index": 3,
            "detail_level": "medium"
        },
        "id": "q2OJ3qhrD4tnyeAra9it"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:16:08.000",
        "source": "frontend",
        "data": {
            "section_id": "cb999e28-70f4-4954-b70b-2dbbd7d7b3f2",
            "structured_type": "unstructured",
            "mapping_index": 5,
            "detail_level": "medium"
        },
        "id": "tmTEB2ewhM9hzTYSI2ty"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:16:09.000",
        "source": "frontend",
        "data": {
            "section_id": "cb999e28-70f4-4954-b70b-2dbbd7d7b3f2",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "6V2KgB48WQPnldc2FXRv"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:16:09.000",
        "source": "frontend",
        "data": {
            "section_id": "cb999e28-70f4-4954-b70b-2dbbd7d7b3f2",
            "structured_type": "unstructured",
            "mapping_index": 4,
            "detail_level": "medium"
        },
        "id": "BmfssdGBXGnVSWm3HOOH"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:16:09.000",
        "source": "frontend",
        "data": {
            "section_id": "cb999e28-70f4-4954-b70b-2dbbd7d7b3f2",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "K0YxiaAeTAJmEGFWI9sv"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:16:09.000",
        "source": "frontend",
        "data": {
            "section_id": "cb999e28-70f4-4954-b70b-2dbbd7d7b3f2",
            "structured_type": "unstructured",
            "mapping_index": 5,
            "detail_level": "medium"
        },
        "id": "YChSqSINxNS4uH2MBd2X"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:16:09.000",
        "source": "frontend",
        "data": {
            "section_id": "cb999e28-70f4-4954-b70b-2dbbd7d7b3f2",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "nKqe6BTQFpCGq0tJXrWv"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:16:09.000",
        "source": "frontend",
        "data": {
            "section_id": "cb999e28-70f4-4954-b70b-2dbbd7d7b3f2",
            "structured_type": "unstructured",
            "mapping_index": 3,
            "detail_level": "medium"
        },
        "id": "wrzlLVcX73DLlCVzADEb"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:16:09.000",
        "source": "frontend",
        "data": {
            "section_id": "cb999e28-70f4-4954-b70b-2dbbd7d7b3f2",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "yI0oukjVddbolLnY1nwD"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:16:11.000",
        "source": "frontend",
        "data": {
            "section_id": "cb999e28-70f4-4954-b70b-2dbbd7d7b3f2",
            "structured_type": "unstructured",
            "mapping_index": 2,
            "detail_level": "medium"
        },
        "id": "0ojHf6MpBVfoTSJg4dEA"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:16:11.000",
        "source": "frontend",
        "data": {
            "section_id": "cb999e28-70f4-4954-b70b-2dbbd7d7b3f2",
            "structured_type": "unstructured",
            "mapping_index": 3,
            "detail_level": "medium"
        },
        "id": "O0Ml4TGEqvGMHTv39z7f"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:16:11.000",
        "source": "frontend",
        "data": {
            "section_id": "cb999e28-70f4-4954-b70b-2dbbd7d7b3f2",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "PqbR11IxTh0HQmBaB4SG"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:16:11.000",
        "source": "frontend",
        "data": {
            "section_id": "cb999e28-70f4-4954-b70b-2dbbd7d7b3f2",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "VGR9bKtqbHxRMeCSlOid"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:16:12.000",
        "source": "frontend",
        "data": {
            "section_id": "cb999e28-70f4-4954-b70b-2dbbd7d7b3f2",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "Cqq6IlRluyTryFarxoXf"
    },
    {
        "event": "click_edit_in_prompt",
        "timestamp": "2025-08-17 11:16:12.000",
        "source": "frontend",
        "data": {
            "section_id": "cb999e28-70f4-4954-b70b-2dbbd7d7b3f2",
            "structured": "unstructured",
            "summary": "The formatDateString function takes a date string as input and returns only the date portion. It does this by splitting the input string at the 'T' character and returning the first part. This is useful for formatting ISO date-time strings to display just the date.",
            "detail_level": "medium"
        },
        "id": "rwiqqKjMPIy27Yq52aRs"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:16:12.000",
        "source": "frontend",
        "data": {
            "section_id": "cb999e28-70f4-4954-b70b-2dbbd7d7b3f2",
            "structured_type": "unstructured",
            "mapping_index": 3,
            "detail_level": "medium"
        },
        "id": "sn7MdRoDiUqjhYl8XJ10"
    },
    {
        "event": "apply_instruction_summary",
        "timestamp": "2025-08-17 11:16:35.000",
        "source": "frontend",
        "data": {
            "section_id": "cb999e28-70f4-4954-b70b-2dbbd7d7b3f2",
            "structured": "unstructured",
            "instruction": "I want to change the date format to something like `Jan`, `Feb`...",
            "original_summary": "The formatDateString function takes a date string as input and returns only the date portion. It does this by splitting the input string at the 'T' character and returning the first part. This is useful for formatting ISO date-time strings to display just the date.",
            "detail_level": "medium"
        },
        "id": "XStf9remYmaEuEeHDrmc"
    },
    {
        "event": "apply_instruction_summary",
        "timestamp": "2025-08-17 11:16:36.000",
        "source": "backend",
        "data": {
            "instruction": "I want to change the date format to something like `Jan`, `Feb`...",
            "original_code": "const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };\n",
            "updated_summary": "The formatDateString function takes a date string as input and returns only the date portion. It does this by splitting the input string at the 'T' character and returning the first part. This is useful for formatting ISO date-time strings to display just the date. Instead of returning the date in numeric format, the function should now return the month as a three-letter abbreviation (e.g., 'Jan', 'Feb', etc.) corresponding to the input date.",
            "original_summary": "The formatDateString function takes a date string as input and returns only the date portion. It does this by splitting the input string at the 'T' character and returning the first part. This is useful for formatting ISO date-time strings to display just the date."
        },
        "id": "xqXbQbUox3GK0qzvm2hh"
    },
    {
        "event": "commit_modified_summary",
        "timestamp": "2025-08-17 11:16:42.000",
        "source": "frontend",
        "data": {
            "section_id": "cb999e28-70f4-4954-b70b-2dbbd7d7b3f2",
            "structured": "unstructured",
            "edited_summary": "The formatDateString function takes a date string as input and returns only the date portion. It does this by splitting the input string at the 'T' character and returning the first part. This is useful for formatting ISO date-time strings to display just the date. Instead of returning the date in numeric format, the function should now return the month as a three-letter abbreviation (e.g., 'Jan', 'Feb', etc.) corresponding to the input date.",
            "original_summary": "The formatDateString function takes a date string as input and returns only the date portion. It does this by splitting the input string at the 'T' character and returning the first part. This is useful for formatting ISO date-time strings to display just the date.",
            "detail_level": "medium"
        },
        "id": "5A6ttLhZiLRFqVskJ8Ap"
    },
    {
        "event": "modify_summary_mediation",
        "timestamp": "2025-08-17 11:16:44.000",
        "source": "backend",
        "data": {
            "structured_type": "unstructured",
            "original_code": "const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };\n",
            "edited_summary": "The formatDateString function takes a date string as input and returns only the date portion. It does this by splitting the input string at the 'T' character and returning the first part. This is useful for formatting ISO date-time strings to display just the date. Instead of returning the date in numeric format, the function should now return the month as a three-letter abbreviation (e.g., 'Jan', 'Feb', etc.) corresponding to the input date.",
            "original_summary": "The formatDateString function takes a date string as input and returns only the date portion. It does this by splitting the input string at the 'T' character and returning the first part. This is useful for formatting ISO date-time strings to display just the date.",
            "updated_code": "const formatDateString = (date) => {\n    const monthAbbr = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n    const datePart = date.split(\"T\")[0];\n    const [year, month, day] = datePart.split(\"-\");\n    return monthAbbr[parseInt(month, 10) - 1];\n  };",
            "detail_level": "medium"
        },
        "id": "x7kBxYO09CvxU35L0uY4"
    },
    {
        "event": "summarize_modified_code",
        "timestamp": "2025-08-17 11:16:50.000",
        "source": "backend",
        "data": {
            "new_code": "const formatDateString = (date) => {\n    const monthAbbr = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n    const datePart = date.split(\"T\")[0];\n    const [year, month, day] = datePart.split(\"-\");\n    return monthAbbr[parseInt(month, 10) - 1];\n  };",
            "original_code": "const formatDateString = (date) => {\n    const monthAbbr = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n    const datePart = date.split(\"T\")[0];\n    const [year, month, day] = datePart.split(\"-\");\n    return monthAbbr[parseInt(month, 10) - 1];\n  };",
            "new_summary": {
                "high_structured": "• Processes a date-time string input, usually in ISO 8601 format\n• Splits the input string at the 'T' character\n  ◦ The 'T' typically separates the date and time components\n• Extracts the date part and splits it into year, month, and day\n• Maps the numeric month to its three-letter abbreviation (e.g., 'Jan', 'Feb')\n• Returns only the month abbreviation\n• Useful for simplifying date displays in UI components by showing just the month\n• Helps ensure consistent and concise month formatting throughout the application",
                "low_structured": "• Extracts date from a date-time string\n• Returns the three-letter month abbreviation from the date",
                "title": "Summary of Modified formatDateString Function",
                "medium_structured": "• Accepts a date string as input\n• Splits the string at the 'T' character\n  ◦ Extracts the date segment\n• Splits the date into year, month, and day\n• Maps the month number to its three-letter abbreviation\n• Useful for formatting ISO date-time strings to show month abbreviations",
                "medium_unstructured": "The formatDateString function takes a date string as input, extracts the date portion, and then returns the three-letter abbreviation of the month. It does this by splitting the input string at the 'T' character, further splitting the date into year, month, and day, and mapping the month number to its abbreviation. This is useful for formatting ISO date-time strings to display just the month abbreviation.",
                "high_unstructured": "The formatDateString function is designed to process a date-time string, typically in ISO 8601 format, by extracting the date component, splitting it into year, month, and day, and returning only the three-letter abbreviation of the month. It achieves this by splitting the input string at the 'T' character, parsing the month from the resulting date, and mapping it to a predefined array of month abbreviations. This approach ensures that only the month abbreviation (e.g., 'Jan', 'Feb') is returned, which is useful for concise date displays in user interfaces.",
                "low_unstructured": "This function extracts the month from a date-time string and returns its three-letter abbreviation."
            },
            "old_summary": {
                "high_structured": "• Processes a date-time string input, usually in ISO 8601 format\n• Splits the input string at the 'T' character\n  ◦ The 'T' typically separates the date and time components\n• Returns the first part of the split, which corresponds to the date (e.g., 'YYYY-MM-DD')\n• Discards any time information present in the original string\n• Useful for simplifying date displays in UI components\n• Helps ensure consistent date formatting throughout the application",
                "low_structured": "• Extracts date from a date-time string\n• Returns only the date part",
                "title": "Summary of formatDateString Function",
                "medium_structured": "• Accepts a date string as input\n• Splits the string at the 'T' character\n  ◦ Returns the first segment, which is the date\n• Useful for formatting ISO date-time strings",
                "medium_unstructured": "The formatDateString function takes a date string as input and returns only the date portion. It does this by splitting the input string at the 'T' character and returning the first part. This is useful for formatting ISO date-time strings to display just the date.",
                "high_unstructured": "The formatDateString function is designed to process a date-time string, typically in ISO 8601 format, and extract only the date component. It achieves this by splitting the input string at the 'T' character, which separates the date from the time, and returning the first element of the resulting array. This approach ensures that any time information is discarded, leaving just the date in 'YYYY-MM-DD' format. Such formatting is often used to simplify date displays in user interfaces.",
                "low_unstructured": "This function extracts the date portion from a date-time string."
            }
        },
        "id": "RKo8g5oFj53kZqe8z1A6"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-17 11:16:52.000",
        "source": "backend",
        "data": {
            "code": "19: const formatDateString = (date) => {\n20:     const monthAbbr = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n21:     const datePart = date.split(\"T\")[0];\n22:     const [year, month, day] = datePart.split(\"-\");\n23:     return monthAbbr[parseInt(month, 10) - 1];\n24:   };",
            "mapping": [
                {
                    "summaryComponent": "Extracts date from a date-time string",
                    "codeSegments": [
                        {
                            "code": "const datePart = date.split(\"T\")[0];",
                            "line": 21
                        }
                    ]
                },
                {
                    "summaryComponent": "Returns the three-letter month abbreviation from the date",
                    "codeSegments": [
                        {
                            "code": "const monthAbbr = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];",
                            "line": 20
                        },
                        {
                            "code": "const [year, month, day] = datePart.split(\"-\");",
                            "line": 22
                        },
                        {
                            "code": "return monthAbbr[parseInt(month, 10) - 1];",
                            "line": 23
                        }
                    ]
                }
            ],
            "summary": "• Extracts date from a date-time string\n• Returns the three-letter month abbreviation from the date"
        },
        "id": "R9eJPDizCH6qiJRw8wBW"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-17 11:16:52.000",
        "source": "backend",
        "data": {
            "code": "19: const formatDateString = (date) => {\n20:     const monthAbbr = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n21:     const datePart = date.split(\"T\")[0];\n22:     const [year, month, day] = datePart.split(\"-\");\n23:     return monthAbbr[parseInt(month, 10) - 1];\n24:   };",
            "mapping": [
                {
                    "summaryComponent": "extracts the month",
                    "codeSegments": [
                        {
                            "code": "const [year, month, day] = datePart.split(\"-\");",
                            "line": 22
                        }
                    ]
                },
                {
                    "summaryComponent": "from a date-time string",
                    "codeSegments": [
                        {
                            "code": "const formatDateString = (date) => {",
                            "line": 19
                        },
                        {
                            "code": "const datePart = date.split(\"T\")[0];",
                            "line": 21
                        }
                    ]
                },
                {
                    "summaryComponent": "returns its three-letter abbreviation",
                    "codeSegments": [
                        {
                            "code": "const monthAbbr = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];",
                            "line": 20
                        },
                        {
                            "code": "return monthAbbr[parseInt(month, 10) - 1];",
                            "line": 23
                        }
                    ]
                }
            ],
            "summary": "This function extracts the month from a date-time string and returns its three-letter abbreviation."
        },
        "id": "xiQvvIk4m4oFxFzFyeVY"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-17 11:16:53.000",
        "source": "backend",
        "data": {
            "code": "19: const formatDateString = (date) => {\n20:     const monthAbbr = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n21:     const datePart = date.split(\"T\")[0];\n22:     const [year, month, day] = datePart.split(\"-\");\n23:     return monthAbbr[parseInt(month, 10) - 1];\n24:   };",
            "mapping": [
                {
                    "summaryComponent": "Accepts a date string as input",
                    "codeSegments": [
                        {
                            "code": "const formatDateString = (date) => {",
                            "line": 19
                        }
                    ]
                },
                {
                    "summaryComponent": "Splits the string at the 'T' character",
                    "codeSegments": [
                        {
                            "code": "const datePart = date.split(\"T\")[0];",
                            "line": 21
                        }
                    ]
                },
                {
                    "summaryComponent": "Extracts the date segment",
                    "codeSegments": [
                        {
                            "code": "const datePart = date.split(\"T\")[0];",
                            "line": 21
                        }
                    ]
                },
                {
                    "summaryComponent": "Splits the date into year, month, and day",
                    "codeSegments": [
                        {
                            "code": "const [year, month, day] = datePart.split(\"-\");",
                            "line": 22
                        }
                    ]
                },
                {
                    "summaryComponent": "Maps the month number to its three-letter abbreviation",
                    "codeSegments": [
                        {
                            "code": "const monthAbbr = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];",
                            "line": 20
                        },
                        {
                            "code": "return monthAbbr[parseInt(month, 10) - 1];",
                            "line": 23
                        }
                    ]
                },
                {
                    "summaryComponent": "Useful for formatting ISO date-time strings to show month abbreviations",
                    "codeSegments": [
                        {
                            "code": "const formatDateString = (date) => {",
                            "line": 19
                        },
                        {
                            "code": "const datePart = date.split(\"T\")[0];",
                            "line": 21
                        },
                        {
                            "code": "const [year, month, day] = datePart.split(\"-\");",
                            "line": 22
                        },
                        {
                            "code": "return monthAbbr[parseInt(month, 10) - 1];",
                            "line": 23
                        }
                    ]
                }
            ],
            "summary": "• Accepts a date string as input\n• Splits the string at the 'T' character\n  ◦ Extracts the date segment\n• Splits the date into year, month, and day\n• Maps the month number to its three-letter abbreviation\n• Useful for formatting ISO date-time strings to show month abbreviations"
        },
        "id": "2KbldB4r4EMtoaHn6HDo"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-17 11:16:54.000",
        "source": "backend",
        "data": {
            "code": "19: const formatDateString = (date) => {\n20:     const monthAbbr = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n21:     const datePart = date.split(\"T\")[0];\n22:     const [year, month, day] = datePart.split(\"-\");\n23:     return monthAbbr[parseInt(month, 10) - 1];\n24:   };",
            "mapping": [
                {
                    "summaryComponent": "The formatDateString function",
                    "codeSegments": [
                        {
                            "code": "const formatDateString = (date) => {",
                            "line": 19
                        }
                    ]
                },
                {
                    "summaryComponent": "takes a date string as input",
                    "codeSegments": [
                        {
                            "code": "(date)",
                            "line": 19
                        }
                    ]
                },
                {
                    "summaryComponent": "extracts the date portion",
                    "codeSegments": [
                        {
                            "code": "const datePart = date.split(\"T\")[0];",
                            "line": 21
                        }
                    ]
                },
                {
                    "summaryComponent": "returns the three-letter abbreviation of the month",
                    "codeSegments": [
                        {
                            "code": "return monthAbbr[parseInt(month, 10) - 1];",
                            "line": 23
                        }
                    ]
                },
                {
                    "summaryComponent": "splitting the input string at the 'T' character",
                    "codeSegments": [
                        {
                            "code": "date.split(\"T\")",
                            "line": 21
                        }
                    ]
                },
                {
                    "summaryComponent": "further splitting the date into year, month, and day",
                    "codeSegments": [
                        {
                            "code": "const [year, month, day] = datePart.split(\"-\");",
                            "line": 22
                        }
                    ]
                },
                {
                    "summaryComponent": "mapping the month number to its abbreviation",
                    "codeSegments": [
                        {
                            "code": "monthAbbr[parseInt(month, 10) - 1]",
                            "line": 23
                        }
                    ]
                },
                {
                    "summaryComponent": "formatting ISO date-time strings",
                    "codeSegments": [
                        {
                            "code": "date.split(\"T\")",
                            "line": 21
                        }
                    ]
                },
                {
                    "summaryComponent": "display just the month abbreviation",
                    "codeSegments": [
                        {
                            "code": "return monthAbbr[parseInt(month, 10) - 1];",
                            "line": 23
                        }
                    ]
                }
            ],
            "summary": "The formatDateString function takes a date string as input, extracts the date portion, and then returns the three-letter abbreviation of the month. It does this by splitting the input string at the 'T' character, further splitting the date into year, month, and day, and mapping the month number to its abbreviation. This is useful for formatting ISO date-time strings to display just the month abbreviation."
        },
        "id": "bXYixFkkLWBwNnq94jag"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-17 11:16:54.000",
        "source": "backend",
        "data": {
            "code": "19: const formatDateString = (date) => {\n20:     const monthAbbr = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n21:     const datePart = date.split(\"T\")[0];\n22:     const [year, month, day] = datePart.split(\"-\");\n23:     return monthAbbr[parseInt(month, 10) - 1];\n24:   };",
            "mapping": [
                {
                    "summaryComponent": "Processes a date-time string input, usually in ISO 8601 format",
                    "codeSegments": [
                        {
                            "code": "const formatDateString = (date) => {",
                            "line": 19
                        }
                    ]
                },
                {
                    "summaryComponent": "Splits the input string at the 'T' character",
                    "codeSegments": [
                        {
                            "code": "const datePart = date.split(\"T\")[0];",
                            "line": 21
                        }
                    ]
                },
                {
                    "summaryComponent": "The 'T' typically separates the date and time components",
                    "codeSegments": [
                        {
                            "code": "date.split(\"T\")",
                            "line": 21
                        }
                    ]
                },
                {
                    "summaryComponent": "Extracts the date part and splits it into year, month, and day",
                    "codeSegments": [
                        {
                            "code": "const [year, month, day] = datePart.split(\"-\");",
                            "line": 22
                        }
                    ]
                },
                {
                    "summaryComponent": "Maps the numeric month to its three-letter abbreviation (e.g., 'Jan', 'Feb')",
                    "codeSegments": [
                        {
                            "code": "const monthAbbr = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];",
                            "line": 20
                        },
                        {
                            "code": "monthAbbr[parseInt(month, 10) - 1]",
                            "line": 23
                        }
                    ]
                },
                {
                    "summaryComponent": "Returns only the month abbreviation",
                    "codeSegments": [
                        {
                            "code": "return monthAbbr[parseInt(month, 10) - 1];",
                            "line": 23
                        }
                    ]
                }
            ],
            "summary": "• Processes a date-time string input, usually in ISO 8601 format\n• Splits the input string at the 'T' character\n  ◦ The 'T' typically separates the date and time components\n• Extracts the date part and splits it into year, month, and day\n• Maps the numeric month to its three-letter abbreviation (e.g., 'Jan', 'Feb')\n• Returns only the month abbreviation\n• Useful for simplifying date displays in UI components by showing just the month\n• Helps ensure consistent and concise month formatting throughout the application"
        },
        "id": "kmCjFcRGqj1oqeYEBKpv"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-17 11:16:55.000",
        "source": "backend",
        "data": {
            "code": "19: const formatDateString = (date) => {\n20:     const monthAbbr = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n21:     const datePart = date.split(\"T\")[0];\n22:     const [year, month, day] = datePart.split(\"-\");\n23:     return monthAbbr[parseInt(month, 10) - 1];\n24:   };",
            "mapping": [
                {
                    "summaryComponent": "The formatDateString function",
                    "codeSegments": [
                        {
                            "code": "const formatDateString = (date) => {",
                            "line": 19
                        }
                    ]
                },
                {
                    "summaryComponent": "process a date-time string",
                    "codeSegments": [
                        {
                            "code": "(date)",
                            "line": 19
                        }
                    ]
                },
                {
                    "summaryComponent": "extracting the date component",
                    "codeSegments": [
                        {
                            "code": "const datePart = date.split(\"T\")[0];",
                            "line": 21
                        }
                    ]
                },
                {
                    "summaryComponent": "splitting it into year, month, and day",
                    "codeSegments": [
                        {
                            "code": "const [year, month, day] = datePart.split(\"-\");",
                            "line": 22
                        }
                    ]
                },
                {
                    "summaryComponent": "returning only the three-letter abbreviation of the month",
                    "codeSegments": [
                        {
                            "code": "return monthAbbr[parseInt(month, 10) - 1];",
                            "line": 23
                        }
                    ]
                },
                {
                    "summaryComponent": "splitting the input string at the 'T' character",
                    "codeSegments": [
                        {
                            "code": "date.split(\"T\")",
                            "line": 21
                        }
                    ]
                },
                {
                    "summaryComponent": "parsing the month from the resulting date",
                    "codeSegments": [
                        {
                            "code": "parseInt(month, 10)",
                            "line": 23
                        }
                    ]
                },
                {
                    "summaryComponent": "mapping it to a predefined array of month abbreviations",
                    "codeSegments": [
                        {
                            "code": "const monthAbbr = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];",
                            "line": 20
                        }
                    ]
                },
                {
                    "summaryComponent": "only the month abbreviation (e.g., 'Jan', 'Feb') is returned",
                    "codeSegments": [
                        {
                            "code": "return monthAbbr[parseInt(month, 10) - 1];",
                            "line": 23
                        }
                    ]
                },
                {
                    "summaryComponent": "useful for concise date displays in user interfaces",
                    "codeSegments": [
                        {
                            "code": "return monthAbbr[parseInt(month, 10) - 1];",
                            "line": 23
                        }
                    ]
                }
            ],
            "summary": "The formatDateString function is designed to process a date-time string, typically in ISO 8601 format, by extracting the date component, splitting it into year, month, and day, and returning only the three-letter abbreviation of the month. It achieves this by splitting the input string at the 'T' character, parsing the month from the resulting date, and mapping it to a predefined array of month abbreviations. This approach ensures that only the month abbreviation (e.g., 'Jan', 'Feb') is returned, which is useful for concise date displays in user interfaces."
        },
        "id": "JtyiTauOejaLeR8CDQwu"
    },
    {
        "event": "autotransit_section",
        "timestamp": "2025-08-17 11:16:55.000",
        "source": "frontend",
        "data": {
            "after_section_id": "60f02e56-c1d0-42b9-aaf7-2545386142d5",
            "before_section_id": "cb999e28-70f4-4954-b70b-2dbbd7d7b3f2"
        },
        "id": "N8kMfKGf7GUXYfpas9ha"
    },
    {
        "event": "create_new_section",
        "timestamp": "2025-08-17 11:16:55.000",
        "source": "frontend",
        "data": {
            "section_id": "60f02e56-c1d0-42b9-aaf7-2545386142d5",
            "section_data": {
                "metadata": {
                    "id": "60f02e56-c1d0-42b9-aaf7-2545386142d5",
                    "fullPath": "/project/workspace/frontend/src/StockChart.jsx",
                    "offset": 315,
                    "filename": "StockChart.jsx",
                    "originalCode": "const formatDateString = (date) => {\n    const monthAbbr = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n    const datePart = date.split(\"T\")[0];\n    const [year, month, day] = datePart.split(\"-\");\n    return monthAbbr[parseInt(month, 10) - 1];\n  };"
                },
                "summaryMappings": {
                    "high_structured": [
                        {
                            "summaryComponent": "Processes a date-time string input, usually in ISO 8601 format",
                            "codeSegments": [
                                {
                                    "code": "const formatDateString = (date) => {",
                                    "line": 19
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Splits the input string at the 'T' character",
                            "codeSegments": [
                                {
                                    "code": "const datePart = date.split(\"T\")[0];",
                                    "line": 21
                                }
                            ]
                        },
                        {
                            "summaryComponent": "The 'T' typically separates the date and time components",
                            "codeSegments": [
                                {
                                    "code": "date.split(\"T\")",
                                    "line": 21
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Extracts the date part and splits it into year, month, and day",
                            "codeSegments": [
                                {
                                    "code": "const [year, month, day] = datePart.split(\"-\");",
                                    "line": 22
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Maps the numeric month to its three-letter abbreviation (e.g., 'Jan', 'Feb')",
                            "codeSegments": [
                                {
                                    "code": "const monthAbbr = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];",
                                    "line": 20
                                },
                                {
                                    "code": "monthAbbr[parseInt(month, 10) - 1]",
                                    "line": 23
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Returns only the month abbreviation",
                            "codeSegments": [
                                {
                                    "code": "return monthAbbr[parseInt(month, 10) - 1];",
                                    "line": 23
                                }
                            ]
                        }
                    ],
                    "low_structured": [
                        {
                            "summaryComponent": "Extracts date from a date-time string",
                            "codeSegments": [
                                {
                                    "code": "const datePart = date.split(\"T\")[0];",
                                    "line": 21
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Returns the three-letter month abbreviation from the date",
                            "codeSegments": [
                                {
                                    "code": "const monthAbbr = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];",
                                    "line": 20
                                },
                                {
                                    "code": "const [year, month, day] = datePart.split(\"-\");",
                                    "line": 22
                                },
                                {
                                    "code": "return monthAbbr[parseInt(month, 10) - 1];",
                                    "line": 23
                                }
                            ]
                        }
                    ],
                    "medium_structured": [
                        {
                            "summaryComponent": "Accepts a date string as input",
                            "codeSegments": [
                                {
                                    "code": "const formatDateString = (date) => {",
                                    "line": 19
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Splits the string at the 'T' character",
                            "codeSegments": [
                                {
                                    "code": "const datePart = date.split(\"T\")[0];",
                                    "line": 21
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Extracts the date segment",
                            "codeSegments": [
                                {
                                    "code": "const datePart = date.split(\"T\")[0];",
                                    "line": 21
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Splits the date into year, month, and day",
                            "codeSegments": [
                                {
                                    "code": "const [year, month, day] = datePart.split(\"-\");",
                                    "line": 22
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Maps the month number to its three-letter abbreviation",
                            "codeSegments": [
                                {
                                    "code": "const monthAbbr = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];",
                                    "line": 20
                                },
                                {
                                    "code": "return monthAbbr[parseInt(month, 10) - 1];",
                                    "line": 23
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Useful for formatting ISO date-time strings to show month abbreviations",
                            "codeSegments": [
                                {
                                    "code": "const formatDateString = (date) => {",
                                    "line": 19
                                },
                                {
                                    "code": "const datePart = date.split(\"T\")[0];",
                                    "line": 21
                                },
                                {
                                    "code": "const [year, month, day] = datePart.split(\"-\");",
                                    "line": 22
                                },
                                {
                                    "code": "return monthAbbr[parseInt(month, 10) - 1];",
                                    "line": 23
                                }
                            ]
                        }
                    ],
                    "medium_unstructured": [
                        {
                            "summaryComponent": "The formatDateString function",
                            "codeSegments": [
                                {
                                    "code": "const formatDateString = (date) => {",
                                    "line": 19
                                }
                            ]
                        },
                        {
                            "summaryComponent": "takes a date string as input",
                            "codeSegments": [
                                {
                                    "code": "(date)",
                                    "line": 19
                                }
                            ]
                        },
                        {
                            "summaryComponent": "extracts the date portion",
                            "codeSegments": [
                                {
                                    "code": "const datePart = date.split(\"T\")[0];",
                                    "line": 21
                                }
                            ]
                        },
                        {
                            "summaryComponent": "returns the three-letter abbreviation of the month",
                            "codeSegments": [
                                {
                                    "code": "return monthAbbr[parseInt(month, 10) - 1];",
                                    "line": 23
                                }
                            ]
                        },
                        {
                            "summaryComponent": "splitting the input string at the 'T' character",
                            "codeSegments": [
                                {
                                    "code": "date.split(\"T\")",
                                    "line": 21
                                }
                            ]
                        },
                        {
                            "summaryComponent": "further splitting the date into year, month, and day",
                            "codeSegments": [
                                {
                                    "code": "const [year, month, day] = datePart.split(\"-\");",
                                    "line": 22
                                }
                            ]
                        },
                        {
                            "summaryComponent": "mapping the month number to its abbreviation",
                            "codeSegments": [
                                {
                                    "code": "monthAbbr[parseInt(month, 10) - 1]",
                                    "line": 23
                                }
                            ]
                        },
                        {
                            "summaryComponent": "formatting ISO date-time strings",
                            "codeSegments": [
                                {
                                    "code": "date.split(\"T\")",
                                    "line": 21
                                }
                            ]
                        },
                        {
                            "summaryComponent": "display just the month abbreviation",
                            "codeSegments": [
                                {
                                    "code": "return monthAbbr[parseInt(month, 10) - 1];",
                                    "line": 23
                                }
                            ]
                        }
                    ],
                    "high_unstructured": [
                        {
                            "summaryComponent": "The formatDateString function",
                            "codeSegments": [
                                {
                                    "code": "const formatDateString = (date) => {",
                                    "line": 19
                                }
                            ]
                        },
                        {
                            "summaryComponent": "process a date-time string",
                            "codeSegments": [
                                {
                                    "code": "(date)",
                                    "line": 19
                                }
                            ]
                        },
                        {
                            "summaryComponent": "extracting the date component",
                            "codeSegments": [
                                {
                                    "code": "const datePart = date.split(\"T\")[0];",
                                    "line": 21
                                }
                            ]
                        },
                        {
                            "summaryComponent": "splitting it into year, month, and day",
                            "codeSegments": [
                                {
                                    "code": "const [year, month, day] = datePart.split(\"-\");",
                                    "line": 22
                                }
                            ]
                        },
                        {
                            "summaryComponent": "returning only the three-letter abbreviation of the month",
                            "codeSegments": [
                                {
                                    "code": "return monthAbbr[parseInt(month, 10) - 1];",
                                    "line": 23
                                }
                            ]
                        },
                        {
                            "summaryComponent": "splitting the input string at the 'T' character",
                            "codeSegments": [
                                {
                                    "code": "date.split(\"T\")",
                                    "line": 21
                                }
                            ]
                        },
                        {
                            "summaryComponent": "parsing the month from the resulting date",
                            "codeSegments": [
                                {
                                    "code": "parseInt(month, 10)",
                                    "line": 23
                                }
                            ]
                        },
                        {
                            "summaryComponent": "mapping it to a predefined array of month abbreviations",
                            "codeSegments": [
                                {
                                    "code": "const monthAbbr = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];",
                                    "line": 20
                                }
                            ]
                        },
                        {
                            "summaryComponent": "only the month abbreviation (e.g., 'Jan', 'Feb') is returned",
                            "codeSegments": [
                                {
                                    "code": "return monthAbbr[parseInt(month, 10) - 1];",
                                    "line": 23
                                }
                            ]
                        },
                        {
                            "summaryComponent": "useful for concise date displays in user interfaces",
                            "codeSegments": [
                                {
                                    "code": "return monthAbbr[parseInt(month, 10) - 1];",
                                    "line": 23
                                }
                            ]
                        }
                    ],
                    "low_unstructured": [
                        {
                            "summaryComponent": "extracts the month",
                            "codeSegments": [
                                {
                                    "code": "const [year, month, day] = datePart.split(\"-\");",
                                    "line": 22
                                }
                            ]
                        },
                        {
                            "summaryComponent": "from a date-time string",
                            "codeSegments": [
                                {
                                    "code": "const formatDateString = (date) => {",
                                    "line": 19
                                },
                                {
                                    "code": "const datePart = date.split(\"T\")[0];",
                                    "line": 21
                                }
                            ]
                        },
                        {
                            "summaryComponent": "returns its three-letter abbreviation",
                            "codeSegments": [
                                {
                                    "code": "const monthAbbr = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];",
                                    "line": 20
                                },
                                {
                                    "code": "return monthAbbr[parseInt(month, 10) - 1];",
                                    "line": 23
                                }
                            ]
                        }
                    ]
                },
                "summaryData": {
                    "high_structured": "• Processes a date-time string input, usually in ISO 8601 format\n• Splits the input string at the 'T' character\n  ◦ The 'T' typically separates the date and time components\n• Extracts the date part and splits it into year, month, and day\n• Maps the numeric month to its three-letter abbreviation (e.g., 'Jan', 'Feb')\n• Returns only the month abbreviation\n• Useful for simplifying date displays in UI components by showing just the month\n• Helps ensure consistent and concise month formatting throughout the application",
                    "low_structured": "• Extracts date from a date-time string\n• Returns the three-letter month abbreviation from the date",
                    "title": "Summary of Modified formatDateString Function",
                    "medium_structured": "• Accepts a date string as input\n• Splits the string at the 'T' character\n  ◦ Extracts the date segment\n• Splits the date into year, month, and day\n• Maps the month number to its three-letter abbreviation\n• Useful for formatting ISO date-time strings to show month abbreviations",
                    "medium_unstructured": "The formatDateString function takes a date string as input, extracts the date portion, and then returns the three-letter abbreviation of the month. It does this by splitting the input string at the 'T' character, further splitting the date into year, month, and day, and mapping the month number to its abbreviation. This is useful for formatting ISO date-time strings to display just the month abbreviation.",
                    "high_unstructured": "The formatDateString function is designed to process a date-time string, typically in ISO 8601 format, by extracting the date component, splitting it into year, month, and day, and returning only the three-letter abbreviation of the month. It achieves this by splitting the input string at the 'T' character, parsing the month from the resulting date, and mapping it to a predefined array of month abbreviations. This approach ensures that only the month abbreviation (e.g., 'Jan', 'Feb') is returned, which is useful for concise date displays in user interfaces.",
                    "low_unstructured": "This function extracts the month from a date-time string and returns its three-letter abbreviation."
                },
                "lines": [
                    19,
                    35
                ],
                "oldSummaryData": {
                    "high_structured": "• Processes a date-time string input, usually in ISO 8601 format\n• Splits the input string at the 'T' character\n  ◦ The 'T' typically separates the date and time components\n• Returns the first part of the split, which corresponds to the date (e.g., 'YYYY-MM-DD')\n• Discards any time information present in the original string\n• Useful for simplifying date displays in UI components\n• Helps ensure consistent date formatting throughout the application",
                    "low_structured": "• Extracts date from a date-time string\n• Returns only the date part",
                    "title": "Summary of formatDateString Function",
                    "medium_structured": "• Accepts a date string as input\n• Splits the string at the 'T' character\n  ◦ Returns the first segment, which is the date\n• Useful for formatting ISO date-time strings",
                    "medium_unstructured": "The formatDateString function takes a date string as input and returns only the date portion. It does this by splitting the input string at the 'T' character and returning the first part. This is useful for formatting ISO date-time strings to display just the date.",
                    "high_unstructured": "The formatDateString function is designed to process a date-time string, typically in ISO 8601 format, and extract only the date component. It achieves this by splitting the input string at the 'T' character, which separates the date from the time, and returning the first element of the resulting array. This approach ensures that any time information is discarded, leaving just the date in 'YYYY-MM-DD' format. Such formatting is often used to simplify date displays in user interfaces.",
                    "low_unstructured": "This function extracts the date portion from a date-time string."
                },
                "selectedDetailLevel": "medium",
                "selectedStructured": "unstructured",
                "editPromptValue": "",
                "title": "Summary of Modified formatDateString Function",
                "createdAt": 1755415015000,
                "editPromptDetailLevel": null,
                "editPromptStructured": null
            }
        },
        "id": "eyqrqPLCn18uKMCwuI01"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:17:13.000",
        "source": "frontend",
        "data": {
            "section_id": "60f02e56-c1d0-42b9-aaf7-2545386142d5",
            "structured_type": "unstructured",
            "mapping_index": 5,
            "detail_level": "medium"
        },
        "id": "cuSbqGYPS0Q8gZ470OJO"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:17:13.000",
        "source": "frontend",
        "data": {
            "section_id": "60f02e56-c1d0-42b9-aaf7-2545386142d5",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "qf1BLrxrms11FklQyMq3"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:17:13.000",
        "source": "frontend",
        "data": {
            "section_id": "60f02e56-c1d0-42b9-aaf7-2545386142d5",
            "structured_type": "unstructured",
            "mapping_index": 4,
            "detail_level": "medium"
        },
        "id": "vhbAV5sCrPdS2d20Pan1"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:17:13.000",
        "source": "frontend",
        "data": {
            "section_id": "60f02e56-c1d0-42b9-aaf7-2545386142d5",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "x6Dv7lbw1EDScPXa2FQs"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:17:14.000",
        "source": "frontend",
        "data": {
            "section_id": "60f02e56-c1d0-42b9-aaf7-2545386142d5",
            "structured_type": "unstructured",
            "mapping_index": 6,
            "detail_level": "medium"
        },
        "id": "17bAp3epK5NRtfFAJmAi"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:17:14.000",
        "source": "frontend",
        "data": {
            "section_id": "60f02e56-c1d0-42b9-aaf7-2545386142d5",
            "structured_type": "unstructured",
            "mapping_index": 7,
            "detail_level": "medium"
        },
        "id": "6pWGfWhmIQcK8gaDj0vV"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:17:14.000",
        "source": "frontend",
        "data": {
            "section_id": "60f02e56-c1d0-42b9-aaf7-2545386142d5",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "AkFzJ0uhfLkreabxG9rL"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:17:14.000",
        "source": "frontend",
        "data": {
            "section_id": "60f02e56-c1d0-42b9-aaf7-2545386142d5",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "X6kWJZMhAKS9H8MDmO5H"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:17:14.000",
        "source": "frontend",
        "data": {
            "section_id": "60f02e56-c1d0-42b9-aaf7-2545386142d5",
            "structured_type": "unstructured",
            "mapping_index": 7,
            "detail_level": "medium"
        },
        "id": "l15HMa027ypVrnEl1LNk"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:17:14.000",
        "source": "frontend",
        "data": {
            "section_id": "60f02e56-c1d0-42b9-aaf7-2545386142d5",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "se6KgfSfEZgNiZeojKSA"
    },
    {
        "event": "click_summarize_code",
        "timestamp": "2025-08-17 11:17:39.000",
        "source": "frontend",
        "data": {},
        "id": "itPkLjLBt9oRWM9ADMIk"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:17:40.000",
        "source": "frontend",
        "data": {
            "section_id": "60f02e56-c1d0-42b9-aaf7-2545386142d5",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "4o9laYlswaVmlp1sFO03"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:17:40.000",
        "source": "frontend",
        "data": {
            "section_id": "60f02e56-c1d0-42b9-aaf7-2545386142d5",
            "structured_type": "unstructured",
            "mapping_index": 4,
            "detail_level": "medium"
        },
        "id": "6SuwuW0cdEQmKOuJyrtH"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:17:40.000",
        "source": "frontend",
        "data": {
            "section_id": "60f02e56-c1d0-42b9-aaf7-2545386142d5",
            "structured_type": "unstructured",
            "mapping_index": 1,
            "detail_level": "medium"
        },
        "id": "DPQGjfCZBBsdMyZljOW9"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:17:40.000",
        "source": "frontend",
        "data": {
            "section_id": "60f02e56-c1d0-42b9-aaf7-2545386142d5",
            "structured_type": "unstructured",
            "mapping_index": 3,
            "detail_level": "medium"
        },
        "id": "FiETUHOvImftgCyj2Up5"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:17:40.000",
        "source": "frontend",
        "data": {
            "section_id": "60f02e56-c1d0-42b9-aaf7-2545386142d5",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "LhNznYFSbePU12lilIIB"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:17:40.000",
        "source": "frontend",
        "data": {
            "section_id": "60f02e56-c1d0-42b9-aaf7-2545386142d5",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "W4kOnTXOVD19jCsrMlr8"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:17:40.000",
        "source": "frontend",
        "data": {
            "section_id": "60f02e56-c1d0-42b9-aaf7-2545386142d5",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "dAGOJqsgE9j89fSBvfy6"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:17:40.000",
        "source": "frontend",
        "data": {
            "section_id": "60f02e56-c1d0-42b9-aaf7-2545386142d5",
            "structured_type": "unstructured",
            "mapping_index": 1,
            "detail_level": "medium"
        },
        "id": "vIvDGiRKwgz9mZpf4v0b"
    },
    {
        "event": "summarize_selected_code",
        "timestamp": "2025-08-17 11:17:45.000",
        "source": "backend",
        "data": {
            "selected_code": "import React from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  ReferenceLine,\n} from \"recharts\";\n\nconst StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    const monthAbbr = [\n      \"Jan\",\n      \"Feb\",\n      \"Mar\",\n      \"Apr\",\n      \"May\",\n      \"Jun\",\n      \"Jul\",\n      \"Aug\",\n      \"Sep\",\n      \"Oct\",\n      \"Nov\",\n      \"Dec\",\n    ];\n    const datePart = date.split(\"T\")[0];\n    const [year, month, day] = datePart.split(\"-\");\n    return monthAbbr[parseInt(month, 10) - 1];\n  };\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;\n",
            "summary": {
                "high_structured": "• Implements a StockChart React component for visualizing stock prices\n• Checks for valid input data before rendering\n  ◦ Ensures data, data.data, and data.data.length are present\n• Extracts company name and ticker symbol from props\n• Defines a formatDateString helper to convert date strings to month abbreviations\n  ◦ This function is defined but not used in the rendered output\n• Transforms raw stock data into an array of objects with date and closing price for charting\n• Renders a styled container with the company name and ticker\n• Uses Recharts components to display a responsive line chart\n  ◦ Includes X and Y axes, tooltip, legend, and a monotone line for price\n  ◦ The line is styled with a specific color and has no dots\n• Only renders the chart if valid data is available",
                "low_structured": "• React component for stock chart\n• Uses Recharts for visualization\n• Displays stock prices over time",
                "title": "StockChart React Component for Displaying Stock Prices",
                "medium_structured": "• Defines a StockChart React component\n• Processes input data to extract company name, ticker, and price information\n• Formats data for Recharts line chart\n• Renders a responsive line chart with axes, tooltip, and legend\n• Only displays the chart if valid data is present",
                "medium_unstructured": "The code implements a React component called StockChart that visualizes stock price data as a line chart using the Recharts library. It processes incoming data to extract company information and formats it for the chart. The component displays the chart with axes, tooltips, and a legend, and only renders if valid data is provided.",
                "high_unstructured": "This code defines a StockChart React component that renders a responsive line chart of stock closing prices using the Recharts library. It first checks for valid data, then extracts the company name and ticker, and formats the raw data into a structure suitable for the chart. The component includes a helper function to format date strings, although this function is not used in the rendering. The chart displays the company name and ticker, and features axes, tooltips, a legend, and a styled line without dots, only rendering when data is available.",
                "low_unstructured": "This code defines a React component that displays a stock price line chart using the Recharts library."
            }
        },
        "id": "xNtNdmxUakCaSEwMuEr6"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-17 11:17:46.000",
        "source": "backend",
        "data": {
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     const monthAbbr = [\n21:       \"Jan\",\n22:       \"Feb\",\n23:       \"Mar\",\n24:       \"Apr\",\n25:       \"May\",\n26:       \"Jun\",\n27:       \"Jul\",\n28:       \"Aug\",\n29:       \"Sep\",\n30:       \"Oct\",\n31:       \"Nov\",\n32:       \"Dec\",\n33:     ];\n34:     const datePart = date.split(\"T\")[0];\n35:     const [year, month, day] = datePart.split(\"-\");\n36:     return monthAbbr[parseInt(month, 10) - 1];\n37:   };\n38:   // Combine labels and values into an array of objects for Recharts\n39:   const chartData = data.data.map((item) => ({\n40:     date: item.date,\n41:     price: item.close,\n42:   }));\n43: \n44:   return (\n45:     <div style={{ marginTop: \"2rem\" }}>\n46:       <h3>\n47:         {company} ({ticker})\n48:       </h3>\n49:       <ResponsiveContainer width=\"100%\" height={300}>\n50:         <LineChart\n51:           data={chartData}\n52:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n53:         >\n54:           <XAxis dataKey=\"date\" />\n55:           <YAxis domain={[\"auto\", \"auto\"]} />\n56:           <Tooltip />\n57:           <Legend />\n58:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n59:         </LineChart>\n60:       </ResponsiveContainer>\n61:     </div>\n62:   );\n63: };\n64: \n65: export default StockChart;\n66: ",
            "mapping": [
                {
                    "summaryComponent": "This code defines a React component",
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        }
                    ]
                },
                {
                    "summaryComponent": "that displays a stock price line chart",
                    "codeSegments": [
                        {
                            "code": "<LineChart",
                            "line": 50
                        },
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 58
                        }
                    ]
                },
                {
                    "summaryComponent": "using the Recharts library",
                    "codeSegments": [
                        {
                            "code": "import {",
                            "line": 2
                        },
                        {
                            "code": "} from \"recharts\";",
                            "line": 11
                        }
                    ]
                }
            ],
            "summary": "This code defines a React component that displays a stock price line chart using the Recharts library."
        },
        "id": "m00txvNAMkBXT2wN15zv"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-17 11:17:47.000",
        "source": "backend",
        "data": {
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     const monthAbbr = [\n21:       \"Jan\",\n22:       \"Feb\",\n23:       \"Mar\",\n24:       \"Apr\",\n25:       \"May\",\n26:       \"Jun\",\n27:       \"Jul\",\n28:       \"Aug\",\n29:       \"Sep\",\n30:       \"Oct\",\n31:       \"Nov\",\n32:       \"Dec\",\n33:     ];\n34:     const datePart = date.split(\"T\")[0];\n35:     const [year, month, day] = datePart.split(\"-\");\n36:     return monthAbbr[parseInt(month, 10) - 1];\n37:   };\n38:   // Combine labels and values into an array of objects for Recharts\n39:   const chartData = data.data.map((item) => ({\n40:     date: item.date,\n41:     price: item.close,\n42:   }));\n43: \n44:   return (\n45:     <div style={{ marginTop: \"2rem\" }}>\n46:       <h3>\n47:         {company} ({ticker})\n48:       </h3>\n49:       <ResponsiveContainer width=\"100%\" height={300}>\n50:         <LineChart\n51:           data={chartData}\n52:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n53:         >\n54:           <XAxis dataKey=\"date\" />\n55:           <YAxis domain={[\"auto\", \"auto\"]} />\n56:           <Tooltip />\n57:           <Legend />\n58:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n59:         </LineChart>\n60:       </ResponsiveContainer>\n61:     </div>\n62:   );\n63: };\n64: \n65: export default StockChart;\n66: ",
            "mapping": [
                {
                    "summaryComponent": "React component for stock chart",
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        },
                        {
                            "code": "export default StockChart;",
                            "line": 65
                        }
                    ]
                },
                {
                    "summaryComponent": "Uses Recharts for visualization",
                    "codeSegments": [
                        {
                            "code": "import {",
                            "line": 2
                        },
                        {
                            "code": "LineChart,",
                            "line": 3
                        },
                        {
                            "code": "Line,",
                            "line": 4
                        },
                        {
                            "code": "XAxis,",
                            "line": 5
                        },
                        {
                            "code": "YAxis,",
                            "line": 6
                        },
                        {
                            "code": "Tooltip,",
                            "line": 7
                        },
                        {
                            "code": "Legend,",
                            "line": 8
                        },
                        {
                            "code": "ResponsiveContainer,",
                            "line": 9
                        },
                        {
                            "code": "ReferenceLine,",
                            "line": 10
                        },
                        {
                            "code": "} from \"recharts\";",
                            "line": 11
                        }
                    ]
                },
                {
                    "summaryComponent": "Displays stock prices over time",
                    "codeSegments": [
                        {
                            "code": "const chartData = data.data.map((item) => ({",
                            "line": 39
                        },
                        {
                            "code": "date: item.date,",
                            "line": 40
                        },
                        {
                            "code": "price: item.close,",
                            "line": 41
                        },
                        {
                            "code": "<LineChart",
                            "line": 50
                        },
                        {
                            "code": "data={chartData}",
                            "line": 51
                        },
                        {
                            "code": "<XAxis dataKey=\"date\" />",
                            "line": 54
                        },
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 58
                        }
                    ]
                }
            ],
            "summary": "• React component for stock chart\n• Uses Recharts for visualization\n• Displays stock prices over time"
        },
        "id": "ABZlea1V7HjTbkCy5rYb"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-17 11:17:47.000",
        "source": "backend",
        "data": {
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     const monthAbbr = [\n21:       \"Jan\",\n22:       \"Feb\",\n23:       \"Mar\",\n24:       \"Apr\",\n25:       \"May\",\n26:       \"Jun\",\n27:       \"Jul\",\n28:       \"Aug\",\n29:       \"Sep\",\n30:       \"Oct\",\n31:       \"Nov\",\n32:       \"Dec\",\n33:     ];\n34:     const datePart = date.split(\"T\")[0];\n35:     const [year, month, day] = datePart.split(\"-\");\n36:     return monthAbbr[parseInt(month, 10) - 1];\n37:   };\n38:   // Combine labels and values into an array of objects for Recharts\n39:   const chartData = data.data.map((item) => ({\n40:     date: item.date,\n41:     price: item.close,\n42:   }));\n43: \n44:   return (\n45:     <div style={{ marginTop: \"2rem\" }}>\n46:       <h3>\n47:         {company} ({ticker})\n48:       </h3>\n49:       <ResponsiveContainer width=\"100%\" height={300}>\n50:         <LineChart\n51:           data={chartData}\n52:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n53:         >\n54:           <XAxis dataKey=\"date\" />\n55:           <YAxis domain={[\"auto\", \"auto\"]} />\n56:           <Tooltip />\n57:           <Legend />\n58:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n59:         </LineChart>\n60:       </ResponsiveContainer>\n61:     </div>\n62:   );\n63: };\n64: \n65: export default StockChart;\n66: ",
            "mapping": [
                {
                    "summaryComponent": "Defines a StockChart React component",
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        },
                        {
                            "code": "export default StockChart;",
                            "line": 65
                        }
                    ]
                },
                {
                    "summaryComponent": "Processes input data to extract company name, ticker, and price information",
                    "codeSegments": [
                        {
                            "code": "const company = data.name;",
                            "line": 16
                        },
                        {
                            "code": "const ticker = data.ticker;",
                            "line": 17
                        },
                        {
                            "code": "const chartData = data.data.map((item) => ({",
                            "line": 39
                        },
                        {
                            "code": "price: item.close,",
                            "line": 41
                        }
                    ]
                },
                {
                    "summaryComponent": "Formats data for Recharts line chart",
                    "codeSegments": [
                        {
                            "code": "const chartData = data.data.map((item) => ({",
                            "line": 39
                        },
                        {
                            "code": "date: item.date,",
                            "line": 40
                        },
                        {
                            "code": "price: item.close,",
                            "line": 41
                        }
                    ]
                },
                {
                    "summaryComponent": "Renders a responsive line chart with axes, tooltip, and legend",
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 49
                        },
                        {
                            "code": "<LineChart",
                            "line": 50
                        },
                        {
                            "code": "<XAxis dataKey=\"date\" />",
                            "line": 54
                        },
                        {
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                            "line": 55
                        },
                        {
                            "code": "<Tooltip />",
                            "line": 56
                        },
                        {
                            "code": "<Legend />",
                            "line": 57
                        },
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 58
                        }
                    ]
                },
                {
                    "summaryComponent": "Only displays the chart if valid data is present",
                    "codeSegments": [
                        {
                            "code": "if (!data || !data.data || !data.data.length) return null;",
                            "line": 14
                        }
                    ]
                }
            ],
            "summary": "• Defines a StockChart React component\n• Processes input data to extract company name, ticker, and price information\n• Formats data for Recharts line chart\n• Renders a responsive line chart with axes, tooltip, and legend\n• Only displays the chart if valid data is present"
        },
        "id": "sYbEPnsO2Bk7OkBkf2v4"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-17 11:17:48.000",
        "source": "backend",
        "data": {
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     const monthAbbr = [\n21:       \"Jan\",\n22:       \"Feb\",\n23:       \"Mar\",\n24:       \"Apr\",\n25:       \"May\",\n26:       \"Jun\",\n27:       \"Jul\",\n28:       \"Aug\",\n29:       \"Sep\",\n30:       \"Oct\",\n31:       \"Nov\",\n32:       \"Dec\",\n33:     ];\n34:     const datePart = date.split(\"T\")[0];\n35:     const [year, month, day] = datePart.split(\"-\");\n36:     return monthAbbr[parseInt(month, 10) - 1];\n37:   };\n38:   // Combine labels and values into an array of objects for Recharts\n39:   const chartData = data.data.map((item) => ({\n40:     date: item.date,\n41:     price: item.close,\n42:   }));\n43: \n44:   return (\n45:     <div style={{ marginTop: \"2rem\" }}>\n46:       <h3>\n47:         {company} ({ticker})\n48:       </h3>\n49:       <ResponsiveContainer width=\"100%\" height={300}>\n50:         <LineChart\n51:           data={chartData}\n52:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n53:         >\n54:           <XAxis dataKey=\"date\" />\n55:           <YAxis domain={[\"auto\", \"auto\"]} />\n56:           <Tooltip />\n57:           <Legend />\n58:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n59:         </LineChart>\n60:       </ResponsiveContainer>\n61:     </div>\n62:   );\n63: };\n64: \n65: export default StockChart;\n66: ",
            "mapping": [
                {
                    "summaryComponent": "a React component called StockChart",
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        }
                    ]
                },
                {
                    "summaryComponent": "visualizes stock price data as a line chart",
                    "codeSegments": [
                        {
                            "code": "<LineChart",
                            "line": 50
                        },
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 58
                        }
                    ]
                },
                {
                    "summaryComponent": "using the Recharts library",
                    "codeSegments": [
                        {
                            "code": "import {",
                            "line": 2
                        },
                        {
                            "code": "} from \"recharts\";",
                            "line": 11
                        }
                    ]
                },
                {
                    "summaryComponent": "processes incoming data",
                    "codeSegments": [
                        {
                            "code": "const chartData = data.data.map((item) => ({",
                            "line": 39
                        }
                    ]
                },
                {
                    "summaryComponent": "to extract company information",
                    "codeSegments": [
                        {
                            "code": "const company = data.name;",
                            "line": 16
                        },
                        {
                            "code": "const ticker = data.ticker;",
                            "line": 17
                        }
                    ]
                },
                {
                    "summaryComponent": "and formats it for the chart",
                    "codeSegments": [
                        {
                            "code": "const chartData = data.data.map((item) => ({",
                            "line": 39
                        },
                        {
                            "code": "date: item.date,",
                            "line": 40
                        },
                        {
                            "code": "price: item.close,",
                            "line": 41
                        }
                    ]
                },
                {
                    "summaryComponent": "The component displays the chart with axes, tooltips, and a legend",
                    "codeSegments": [
                        {
                            "code": "<XAxis dataKey=\"date\" />",
                            "line": 54
                        },
                        {
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                            "line": 55
                        },
                        {
                            "code": "<Tooltip />",
                            "line": 56
                        },
                        {
                            "code": "<Legend />",
                            "line": 57
                        }
                    ]
                },
                {
                    "summaryComponent": "and only renders if valid data is provided",
                    "codeSegments": [
                        {
                            "code": "if (!data || !data.data || !data.data.length) return null;",
                            "line": 14
                        }
                    ]
                }
            ],
            "summary": "The code implements a React component called StockChart that visualizes stock price data as a line chart using the Recharts library. It processes incoming data to extract company information and formats it for the chart. The component displays the chart with axes, tooltips, and a legend, and only renders if valid data is provided."
        },
        "id": "rqgLgTij8UUHzpUORf3h"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-17 11:17:49.000",
        "source": "backend",
        "data": {
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     const monthAbbr = [\n21:       \"Jan\",\n22:       \"Feb\",\n23:       \"Mar\",\n24:       \"Apr\",\n25:       \"May\",\n26:       \"Jun\",\n27:       \"Jul\",\n28:       \"Aug\",\n29:       \"Sep\",\n30:       \"Oct\",\n31:       \"Nov\",\n32:       \"Dec\",\n33:     ];\n34:     const datePart = date.split(\"T\")[0];\n35:     const [year, month, day] = datePart.split(\"-\");\n36:     return monthAbbr[parseInt(month, 10) - 1];\n37:   };\n38:   // Combine labels and values into an array of objects for Recharts\n39:   const chartData = data.data.map((item) => ({\n40:     date: item.date,\n41:     price: item.close,\n42:   }));\n43: \n44:   return (\n45:     <div style={{ marginTop: \"2rem\" }}>\n46:       <h3>\n47:         {company} ({ticker})\n48:       </h3>\n49:       <ResponsiveContainer width=\"100%\" height={300}>\n50:         <LineChart\n51:           data={chartData}\n52:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n53:         >\n54:           <XAxis dataKey=\"date\" />\n55:           <YAxis domain={[\"auto\", \"auto\"]} />\n56:           <Tooltip />\n57:           <Legend />\n58:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n59:         </LineChart>\n60:       </ResponsiveContainer>\n61:     </div>\n62:   );\n63: };\n64: \n65: export default StockChart;\n66: ",
            "mapping": [
                {
                    "summaryComponent": "Implements a StockChart React component for visualizing stock prices",
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        }
                    ]
                },
                {
                    "summaryComponent": "Checks for valid input data before rendering",
                    "codeSegments": [
                        {
                            "code": "if (!data || !data.data || !data.data.length) return null;",
                            "line": 14
                        }
                    ]
                },
                {
                    "summaryComponent": "Ensures data, data.data, and data.data.length are present",
                    "codeSegments": [
                        {
                            "code": "if (!data || !data.data || !data.data.length) return null;",
                            "line": 14
                        }
                    ]
                },
                {
                    "summaryComponent": "Extracts company name and ticker symbol from props",
                    "codeSegments": [
                        {
                            "code": "const company = data.name;",
                            "line": 16
                        },
                        {
                            "code": "const ticker = data.ticker;",
                            "line": 17
                        }
                    ]
                },
                {
                    "summaryComponent": "Defines a formatDateString helper to convert date strings to month abbreviations",
                    "codeSegments": [
                        {
                            "code": "const formatDateString = (date) => {",
                            "line": 19
                        },
                        {
                            "code": "const monthAbbr = [",
                            "line": 20
                        },
                        {
                            "code": "const datePart = date.split(\"T\")[0];",
                            "line": 34
                        },
                        {
                            "code": "const [year, month, day] = datePart.split(\"-\");",
                            "line": 35
                        },
                        {
                            "code": "return monthAbbr[parseInt(month, 10) - 1];",
                            "line": 36
                        }
                    ]
                },
                {
                    "summaryComponent": "This function is defined but not used in the rendered output",
                    "codeSegments": [
                        {
                            "code": "const formatDateString = (date) => {",
                            "line": 19
                        }
                    ]
                },
                {
                    "summaryComponent": "Transforms raw stock data into an array of objects with date and closing price for charting",
                    "codeSegments": [
                        {
                            "code": "const chartData = data.data.map((item) => ({",
                            "line": 39
                        },
                        {
                            "code": "date: item.date,",
                            "line": 40
                        },
                        {
                            "code": "price: item.close,",
                            "line": 41
                        }
                    ]
                },
                {
                    "summaryComponent": "Renders a styled container with the company name and ticker",
                    "codeSegments": [
                        {
                            "code": "<div style={{ marginTop: \"2rem\" }}>",
                            "line": 45
                        },
                        {
                            "code": "<h3>",
                            "line": 46
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 47
                        }
                    ]
                },
                {
                    "summaryComponent": "Uses Recharts components to display a responsive line chart",
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 49
                        },
                        {
                            "code": "<LineChart",
                            "line": 50
                        }
                    ]
                },
                {
                    "summaryComponent": "Includes X and Y axes, tooltip, legend, and a monotone line for price",
                    "codeSegments": [
                        {
                            "code": "<XAxis dataKey=\"date\" />",
                            "line": 54
                        },
                        {
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                            "line": 55
                        },
                        {
                            "code": "<Tooltip />",
                            "line": 56
                        },
                        {
                            "code": "<Legend />",
                            "line": 57
                        },
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 58
                        }
                    ]
                },
                {
                    "summaryComponent": "The line is styled with a specific color and has no dots",
                    "codeSegments": [
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 58
                        }
                    ]
                },
                {
                    "summaryComponent": "Only renders the chart if valid data is available",
                    "codeSegments": [
                        {
                            "code": "if (!data || !data.data || !data.data.length) return null;",
                            "line": 14
                        }
                    ]
                }
            ],
            "summary": "• Implements a StockChart React component for visualizing stock prices\n• Checks for valid input data before rendering\n  ◦ Ensures data, data.data, and data.data.length are present\n• Extracts company name and ticker symbol from props\n• Defines a formatDateString helper to convert date strings to month abbreviations\n  ◦ This function is defined but not used in the rendered output\n• Transforms raw stock data into an array of objects with date and closing price for charting\n• Renders a styled container with the company name and ticker\n• Uses Recharts components to display a responsive line chart\n  ◦ Includes X and Y axes, tooltip, legend, and a monotone line for price\n  ◦ The line is styled with a specific color and has no dots\n• Only renders the chart if valid data is available"
        },
        "id": "7y49FxfWvL9AmkEr2wfA"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-17 11:17:49.000",
        "source": "backend",
        "data": {
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     const monthAbbr = [\n21:       \"Jan\",\n22:       \"Feb\",\n23:       \"Mar\",\n24:       \"Apr\",\n25:       \"May\",\n26:       \"Jun\",\n27:       \"Jul\",\n28:       \"Aug\",\n29:       \"Sep\",\n30:       \"Oct\",\n31:       \"Nov\",\n32:       \"Dec\",\n33:     ];\n34:     const datePart = date.split(\"T\")[0];\n35:     const [year, month, day] = datePart.split(\"-\");\n36:     return monthAbbr[parseInt(month, 10) - 1];\n37:   };\n38:   // Combine labels and values into an array of objects for Recharts\n39:   const chartData = data.data.map((item) => ({\n40:     date: item.date,\n41:     price: item.close,\n42:   }));\n43: \n44:   return (\n45:     <div style={{ marginTop: \"2rem\" }}>\n46:       <h3>\n47:         {company} ({ticker})\n48:       </h3>\n49:       <ResponsiveContainer width=\"100%\" height={300}>\n50:         <LineChart\n51:           data={chartData}\n52:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n53:         >\n54:           <XAxis dataKey=\"date\" />\n55:           <YAxis domain={[\"auto\", \"auto\"]} />\n56:           <Tooltip />\n57:           <Legend />\n58:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n59:         </LineChart>\n60:       </ResponsiveContainer>\n61:     </div>\n62:   );\n63: };\n64: \n65: export default StockChart;\n66: ",
            "mapping": [
                {
                    "summaryComponent": "defines a StockChart React component",
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        }
                    ]
                },
                {
                    "summaryComponent": "renders a responsive line chart of stock closing prices",
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 49
                        },
                        {
                            "code": "<LineChart",
                            "line": 50
                        },
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 58
                        }
                    ]
                },
                {
                    "summaryComponent": "using the Recharts library",
                    "codeSegments": [
                        {
                            "code": "import {",
                            "line": 2
                        },
                        {
                            "code": "} from \"recharts\";",
                            "line": 11
                        }
                    ]
                },
                {
                    "summaryComponent": "checks for valid data",
                    "codeSegments": [
                        {
                            "code": "if (!data || !data.data || !data.data.length) return null;",
                            "line": 14
                        }
                    ]
                },
                {
                    "summaryComponent": "extracts the company name and ticker",
                    "codeSegments": [
                        {
                            "code": "const company = data.name;",
                            "line": 16
                        },
                        {
                            "code": "const ticker = data.ticker;",
                            "line": 17
                        }
                    ]
                },
                {
                    "summaryComponent": "formats the raw data into a structure suitable for the chart",
                    "codeSegments": [
                        {
                            "code": "const chartData = data.data.map((item) => ({",
                            "line": 39
                        },
                        {
                            "code": "  date: item.date,",
                            "line": 40
                        },
                        {
                            "code": "  price: item.close,",
                            "line": 41
                        },
                        {
                            "code": "}));",
                            "line": 42
                        }
                    ]
                },
                {
                    "summaryComponent": "includes a helper function to format date strings",
                    "codeSegments": [
                        {
                            "code": "const formatDateString = (date) => {",
                            "line": 19
                        }
                    ]
                },
                {
                    "summaryComponent": "although this function is not used in the rendering",
                    "codeSegments": [
                        {
                            "code": "const formatDateString = (date) => {",
                            "line": 19
                        }
                    ]
                },
                {
                    "summaryComponent": "displays the company name and ticker",
                    "codeSegments": [
                        {
                            "code": "<h3>",
                            "line": 46
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 47
                        }
                    ]
                },
                {
                    "summaryComponent": "features axes, tooltips, a legend, and a styled line without dots",
                    "codeSegments": [
                        {
                            "code": "<XAxis dataKey=\"date\" />",
                            "line": 54
                        },
                        {
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                            "line": 55
                        },
                        {
                            "code": "<Tooltip />",
                            "line": 56
                        },
                        {
                            "code": "<Legend />",
                            "line": 57
                        },
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 58
                        }
                    ]
                },
                {
                    "summaryComponent": "only rendering when data is available",
                    "codeSegments": [
                        {
                            "code": "if (!data || !data.data || !data.data.length) return null;",
                            "line": 14
                        }
                    ]
                }
            ],
            "summary": "This code defines a StockChart React component that renders a responsive line chart of stock closing prices using the Recharts library. It first checks for valid data, then extracts the company name and ticker, and formats the raw data into a structure suitable for the chart. The component includes a helper function to format date strings, although this function is not used in the rendering. The chart displays the company name and ticker, and features axes, tooltips, a legend, and a styled line without dots, only rendering when data is available."
        },
        "id": "qcSgbUvTgagq4nyclJxI"
    },
    {
        "event": "autotransit_section",
        "timestamp": "2025-08-17 11:17:50.000",
        "source": "frontend",
        "data": {
            "after_section_id": "151b76da-c505-4d8d-b495-0d8e281160dc",
            "before_section_id": "60f02e56-c1d0-42b9-aaf7-2545386142d5"
        },
        "id": "9M6LJiQNq6459DkEWiE1"
    },
    {
        "event": "create_new_section",
        "timestamp": "2025-08-17 11:17:50.000",
        "source": "frontend",
        "data": {
            "section_id": "151b76da-c505-4d8d-b495-0d8e281160dc",
            "section_data": {
                "metadata": {
                    "id": "151b76da-c505-4d8d-b495-0d8e281160dc",
                    "fullPath": "/project/workspace/frontend/src/StockChart.jsx",
                    "offset": 0,
                    "filename": "StockChart.jsx",
                    "originalCode": "import React from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  ReferenceLine,\n} from \"recharts\";\n\nconst StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    const monthAbbr = [\n      \"Jan\",\n      \"Feb\",\n      \"Mar\",\n      \"Apr\",\n      \"May\",\n      \"Jun\",\n      \"Jul\",\n      \"Aug\",\n      \"Sep\",\n      \"Oct\",\n      \"Nov\",\n      \"Dec\",\n    ];\n    const datePart = date.split(\"T\")[0];\n    const [year, month, day] = datePart.split(\"-\");\n    return monthAbbr[parseInt(month, 10) - 1];\n  };\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;\n"
                },
                "summaryMappings": {
                    "high_structured": [
                        {
                            "summaryComponent": "Implements a StockChart React component for visualizing stock prices",
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Checks for valid input data before rendering",
                            "codeSegments": [
                                {
                                    "code": "if (!data || !data.data || !data.data.length) return null;",
                                    "line": 14
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Ensures data, data.data, and data.data.length are present",
                            "codeSegments": [
                                {
                                    "code": "if (!data || !data.data || !data.data.length) return null;",
                                    "line": 14
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Extracts company name and ticker symbol from props",
                            "codeSegments": [
                                {
                                    "code": "const company = data.name;",
                                    "line": 16
                                },
                                {
                                    "code": "const ticker = data.ticker;",
                                    "line": 17
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Defines a formatDateString helper to convert date strings to month abbreviations",
                            "codeSegments": [
                                {
                                    "code": "const formatDateString = (date) => {",
                                    "line": 19
                                },
                                {
                                    "code": "const monthAbbr = [",
                                    "line": 20
                                },
                                {
                                    "code": "const datePart = date.split(\"T\")[0];",
                                    "line": 34
                                },
                                {
                                    "code": "const [year, month, day] = datePart.split(\"-\");",
                                    "line": 35
                                },
                                {
                                    "code": "return monthAbbr[parseInt(month, 10) - 1];",
                                    "line": 36
                                }
                            ]
                        },
                        {
                            "summaryComponent": "This function is defined but not used in the rendered output",
                            "codeSegments": [
                                {
                                    "code": "const formatDateString = (date) => {",
                                    "line": 19
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Transforms raw stock data into an array of objects with date and closing price for charting",
                            "codeSegments": [
                                {
                                    "code": "const chartData = data.data.map((item) => ({",
                                    "line": 39
                                },
                                {
                                    "code": "date: item.date,",
                                    "line": 40
                                },
                                {
                                    "code": "price: item.close,",
                                    "line": 41
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Renders a styled container with the company name and ticker",
                            "codeSegments": [
                                {
                                    "code": "<div style={{ marginTop: \"2rem\" }}>",
                                    "line": 45
                                },
                                {
                                    "code": "<h3>",
                                    "line": 46
                                },
                                {
                                    "code": "{company} ({ticker})",
                                    "line": 47
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Uses Recharts components to display a responsive line chart",
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 49
                                },
                                {
                                    "code": "<LineChart",
                                    "line": 50
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Includes X and Y axes, tooltip, legend, and a monotone line for price",
                            "codeSegments": [
                                {
                                    "code": "<XAxis dataKey=\"date\" />",
                                    "line": 54
                                },
                                {
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                                    "line": 55
                                },
                                {
                                    "code": "<Tooltip />",
                                    "line": 56
                                },
                                {
                                    "code": "<Legend />",
                                    "line": 57
                                },
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 58
                                }
                            ]
                        },
                        {
                            "summaryComponent": "The line is styled with a specific color and has no dots",
                            "codeSegments": [
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 58
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Only renders the chart if valid data is available",
                            "codeSegments": [
                                {
                                    "code": "if (!data || !data.data || !data.data.length) return null;",
                                    "line": 14
                                }
                            ]
                        }
                    ],
                    "low_structured": [
                        {
                            "summaryComponent": "React component for stock chart",
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                },
                                {
                                    "code": "export default StockChart;",
                                    "line": 65
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Uses Recharts for visualization",
                            "codeSegments": [
                                {
                                    "code": "import {",
                                    "line": 2
                                },
                                {
                                    "code": "LineChart,",
                                    "line": 3
                                },
                                {
                                    "code": "Line,",
                                    "line": 4
                                },
                                {
                                    "code": "XAxis,",
                                    "line": 5
                                },
                                {
                                    "code": "YAxis,",
                                    "line": 6
                                },
                                {
                                    "code": "Tooltip,",
                                    "line": 7
                                },
                                {
                                    "code": "Legend,",
                                    "line": 8
                                },
                                {
                                    "code": "ResponsiveContainer,",
                                    "line": 9
                                },
                                {
                                    "code": "ReferenceLine,",
                                    "line": 10
                                },
                                {
                                    "code": "} from \"recharts\";",
                                    "line": 11
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Displays stock prices over time",
                            "codeSegments": [
                                {
                                    "code": "const chartData = data.data.map((item) => ({",
                                    "line": 39
                                },
                                {
                                    "code": "date: item.date,",
                                    "line": 40
                                },
                                {
                                    "code": "price: item.close,",
                                    "line": 41
                                },
                                {
                                    "code": "<LineChart",
                                    "line": 50
                                },
                                {
                                    "code": "data={chartData}",
                                    "line": 51
                                },
                                {
                                    "code": "<XAxis dataKey=\"date\" />",
                                    "line": 54
                                },
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 58
                                }
                            ]
                        }
                    ],
                    "medium_structured": [
                        {
                            "summaryComponent": "Defines a StockChart React component",
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                },
                                {
                                    "code": "export default StockChart;",
                                    "line": 65
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Processes input data to extract company name, ticker, and price information",
                            "codeSegments": [
                                {
                                    "code": "const company = data.name;",
                                    "line": 16
                                },
                                {
                                    "code": "const ticker = data.ticker;",
                                    "line": 17
                                },
                                {
                                    "code": "const chartData = data.data.map((item) => ({",
                                    "line": 39
                                },
                                {
                                    "code": "price: item.close,",
                                    "line": 41
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Formats data for Recharts line chart",
                            "codeSegments": [
                                {
                                    "code": "const chartData = data.data.map((item) => ({",
                                    "line": 39
                                },
                                {
                                    "code": "date: item.date,",
                                    "line": 40
                                },
                                {
                                    "code": "price: item.close,",
                                    "line": 41
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Renders a responsive line chart with axes, tooltip, and legend",
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 49
                                },
                                {
                                    "code": "<LineChart",
                                    "line": 50
                                },
                                {
                                    "code": "<XAxis dataKey=\"date\" />",
                                    "line": 54
                                },
                                {
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                                    "line": 55
                                },
                                {
                                    "code": "<Tooltip />",
                                    "line": 56
                                },
                                {
                                    "code": "<Legend />",
                                    "line": 57
                                },
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 58
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Only displays the chart if valid data is present",
                            "codeSegments": [
                                {
                                    "code": "if (!data || !data.data || !data.data.length) return null;",
                                    "line": 14
                                }
                            ]
                        }
                    ],
                    "medium_unstructured": [
                        {
                            "summaryComponent": "a React component called StockChart",
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                }
                            ]
                        },
                        {
                            "summaryComponent": "visualizes stock price data as a line chart",
                            "codeSegments": [
                                {
                                    "code": "<LineChart",
                                    "line": 50
                                },
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 58
                                }
                            ]
                        },
                        {
                            "summaryComponent": "using the Recharts library",
                            "codeSegments": [
                                {
                                    "code": "import {",
                                    "line": 2
                                },
                                {
                                    "code": "} from \"recharts\";",
                                    "line": 11
                                }
                            ]
                        },
                        {
                            "summaryComponent": "processes incoming data",
                            "codeSegments": [
                                {
                                    "code": "const chartData = data.data.map((item) => ({",
                                    "line": 39
                                }
                            ]
                        },
                        {
                            "summaryComponent": "to extract company information",
                            "codeSegments": [
                                {
                                    "code": "const company = data.name;",
                                    "line": 16
                                },
                                {
                                    "code": "const ticker = data.ticker;",
                                    "line": 17
                                }
                            ]
                        },
                        {
                            "summaryComponent": "and formats it for the chart",
                            "codeSegments": [
                                {
                                    "code": "const chartData = data.data.map((item) => ({",
                                    "line": 39
                                },
                                {
                                    "code": "date: item.date,",
                                    "line": 40
                                },
                                {
                                    "code": "price: item.close,",
                                    "line": 41
                                }
                            ]
                        },
                        {
                            "summaryComponent": "The component displays the chart with axes, tooltips, and a legend",
                            "codeSegments": [
                                {
                                    "code": "<XAxis dataKey=\"date\" />",
                                    "line": 54
                                },
                                {
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                                    "line": 55
                                },
                                {
                                    "code": "<Tooltip />",
                                    "line": 56
                                },
                                {
                                    "code": "<Legend />",
                                    "line": 57
                                }
                            ]
                        },
                        {
                            "summaryComponent": "and only renders if valid data is provided",
                            "codeSegments": [
                                {
                                    "code": "if (!data || !data.data || !data.data.length) return null;",
                                    "line": 14
                                }
                            ]
                        }
                    ],
                    "high_unstructured": [
                        {
                            "summaryComponent": "defines a StockChart React component",
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                }
                            ]
                        },
                        {
                            "summaryComponent": "renders a responsive line chart of stock closing prices",
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 49
                                },
                                {
                                    "code": "<LineChart",
                                    "line": 50
                                },
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 58
                                }
                            ]
                        },
                        {
                            "summaryComponent": "using the Recharts library",
                            "codeSegments": [
                                {
                                    "code": "import {",
                                    "line": 2
                                },
                                {
                                    "code": "} from \"recharts\";",
                                    "line": 11
                                }
                            ]
                        },
                        {
                            "summaryComponent": "checks for valid data",
                            "codeSegments": [
                                {
                                    "code": "if (!data || !data.data || !data.data.length) return null;",
                                    "line": 14
                                }
                            ]
                        },
                        {
                            "summaryComponent": "extracts the company name and ticker",
                            "codeSegments": [
                                {
                                    "code": "const company = data.name;",
                                    "line": 16
                                },
                                {
                                    "code": "const ticker = data.ticker;",
                                    "line": 17
                                }
                            ]
                        },
                        {
                            "summaryComponent": "formats the raw data into a structure suitable for the chart",
                            "codeSegments": [
                                {
                                    "code": "const chartData = data.data.map((item) => ({",
                                    "line": 39
                                },
                                {
                                    "code": "  date: item.date,",
                                    "line": 40
                                },
                                {
                                    "code": "  price: item.close,",
                                    "line": 41
                                },
                                {
                                    "code": "}));",
                                    "line": 42
                                }
                            ]
                        },
                        {
                            "summaryComponent": "includes a helper function to format date strings",
                            "codeSegments": [
                                {
                                    "code": "const formatDateString = (date) => {",
                                    "line": 19
                                }
                            ]
                        },
                        {
                            "summaryComponent": "although this function is not used in the rendering",
                            "codeSegments": [
                                {
                                    "code": "const formatDateString = (date) => {",
                                    "line": 19
                                }
                            ]
                        },
                        {
                            "summaryComponent": "displays the company name and ticker",
                            "codeSegments": [
                                {
                                    "code": "<h3>",
                                    "line": 46
                                },
                                {
                                    "code": "{company} ({ticker})",
                                    "line": 47
                                }
                            ]
                        },
                        {
                            "summaryComponent": "features axes, tooltips, a legend, and a styled line without dots",
                            "codeSegments": [
                                {
                                    "code": "<XAxis dataKey=\"date\" />",
                                    "line": 54
                                },
                                {
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                                    "line": 55
                                },
                                {
                                    "code": "<Tooltip />",
                                    "line": 56
                                },
                                {
                                    "code": "<Legend />",
                                    "line": 57
                                },
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 58
                                }
                            ]
                        },
                        {
                            "summaryComponent": "only rendering when data is available",
                            "codeSegments": [
                                {
                                    "code": "if (!data || !data.data || !data.data.length) return null;",
                                    "line": 14
                                }
                            ]
                        }
                    ],
                    "low_unstructured": [
                        {
                            "summaryComponent": "This code defines a React component",
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                }
                            ]
                        },
                        {
                            "summaryComponent": "that displays a stock price line chart",
                            "codeSegments": [
                                {
                                    "code": "<LineChart",
                                    "line": 50
                                },
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 58
                                }
                            ]
                        },
                        {
                            "summaryComponent": "using the Recharts library",
                            "codeSegments": [
                                {
                                    "code": "import {",
                                    "line": 2
                                },
                                {
                                    "code": "} from \"recharts\";",
                                    "line": 11
                                }
                            ]
                        }
                    ]
                },
                "summaryData": {
                    "high_structured": "• Implements a StockChart React component for visualizing stock prices\n• Checks for valid input data before rendering\n  ◦ Ensures data, data.data, and data.data.length are present\n• Extracts company name and ticker symbol from props\n• Defines a formatDateString helper to convert date strings to month abbreviations\n  ◦ This function is defined but not used in the rendered output\n• Transforms raw stock data into an array of objects with date and closing price for charting\n• Renders a styled container with the company name and ticker\n• Uses Recharts components to display a responsive line chart\n  ◦ Includes X and Y axes, tooltip, legend, and a monotone line for price\n  ◦ The line is styled with a specific color and has no dots\n• Only renders the chart if valid data is available",
                    "low_structured": "• React component for stock chart\n• Uses Recharts for visualization\n• Displays stock prices over time",
                    "title": "StockChart React Component for Displaying Stock Prices",
                    "medium_structured": "• Defines a StockChart React component\n• Processes input data to extract company name, ticker, and price information\n• Formats data for Recharts line chart\n• Renders a responsive line chart with axes, tooltip, and legend\n• Only displays the chart if valid data is present",
                    "medium_unstructured": "The code implements a React component called StockChart that visualizes stock price data as a line chart using the Recharts library. It processes incoming data to extract company information and formats it for the chart. The component displays the chart with axes, tooltips, and a legend, and only renders if valid data is provided.",
                    "high_unstructured": "This code defines a StockChart React component that renders a responsive line chart of stock closing prices using the Recharts library. It first checks for valid data, then extracts the company name and ticker, and formats the raw data into a structure suitable for the chart. The component includes a helper function to format date strings, although this function is not used in the rendering. The chart displays the company name and ticker, and features axes, tooltips, a legend, and a styled line without dots, only rendering when data is available.",
                    "low_unstructured": "This code defines a React component that displays a stock price line chart using the Recharts library."
                },
                "lines": [
                    1,
                    66
                ],
                "selectedDetailLevel": "medium",
                "editPromptValue": "",
                "selectedStructured": "unstructured",
                "title": "StockChart React Component for Displaying Stock Prices",
                "createdAt": 1755415069000,
                "editPromptDetailLevel": null,
                "editPromptStructured": null
            }
        },
        "id": "Bz4MkBFPlNvrjAZRgiZh"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:17:53.000",
        "source": "frontend",
        "data": {
            "section_id": "151b76da-c505-4d8d-b495-0d8e281160dc",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "4XQ5tv7EGiPF5VCDk5Nf"
    },
    {
        "event": "click_edit_in_prompt",
        "timestamp": "2025-08-17 11:17:53.000",
        "source": "frontend",
        "data": {
            "section_id": "151b76da-c505-4d8d-b495-0d8e281160dc",
            "structured": "unstructured",
            "summary": "The code implements a React component called StockChart that visualizes stock price data as a line chart using the Recharts library. It processes incoming data to extract company information and formats it for the chart. The component displays the chart with axes, tooltips, and a legend, and only renders if valid data is provided.",
            "detail_level": "medium"
        },
        "id": "9nt9lQbx4bPy5ix9g5G6"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:17:53.000",
        "source": "frontend",
        "data": {
            "section_id": "151b76da-c505-4d8d-b495-0d8e281160dc",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "DG1SPdcfPdNXKgUBPajM"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:17:53.000",
        "source": "frontend",
        "data": {
            "section_id": "151b76da-c505-4d8d-b495-0d8e281160dc",
            "structured_type": "unstructured",
            "mapping_index": 1,
            "detail_level": "medium"
        },
        "id": "MLUmWY5EHTtlkWj2FxSC"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:17:53.000",
        "source": "frontend",
        "data": {
            "section_id": "151b76da-c505-4d8d-b495-0d8e281160dc",
            "structured_type": "unstructured",
            "mapping_index": 1,
            "detail_level": "medium"
        },
        "id": "PeTNASP0G7VdMr9mJBNz"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:17:53.000",
        "source": "frontend",
        "data": {
            "section_id": "151b76da-c505-4d8d-b495-0d8e281160dc",
            "structured_type": "unstructured",
            "mapping_index": 5,
            "detail_level": "medium"
        },
        "id": "WV5Ag69ww3yvjO88S7RF"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:17:53.000",
        "source": "frontend",
        "data": {
            "section_id": "151b76da-c505-4d8d-b495-0d8e281160dc",
            "structured_type": "unstructured",
            "mapping_index": 5,
            "detail_level": "medium"
        },
        "id": "ZP6jftW2lO45uquSGajF"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:17:53.000",
        "source": "frontend",
        "data": {
            "section_id": "151b76da-c505-4d8d-b495-0d8e281160dc",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "aZrkjuB1uYn5syRT15OG"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:17:53.000",
        "source": "frontend",
        "data": {
            "section_id": "151b76da-c505-4d8d-b495-0d8e281160dc",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "qDFuIbpOiZX07P0XwYxQ"
    },
    {
        "event": "apply_instruction_summary",
        "timestamp": "2025-08-17 11:18:11.000",
        "source": "frontend",
        "data": {
            "section_id": "151b76da-c505-4d8d-b495-0d8e281160dc",
            "structured": "unstructured",
            "instruction": "Please apply the function `formatDateString` to format date.",
            "original_summary": "The code implements a React component called StockChart that visualizes stock price data as a line chart using the Recharts library. It processes incoming data to extract company information and formats it for the chart. The component displays the chart with axes, tooltips, and a legend, and only renders if valid data is provided.",
            "detail_level": "medium"
        },
        "id": "RMjBzETVeL2PojcWr7vR"
    },
    {
        "event": "apply_instruction_summary",
        "timestamp": "2025-08-17 11:18:13.000",
        "source": "backend",
        "data": {
            "instruction": "Please apply the function `formatDateString` to format date.",
            "original_code": "import React from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  ReferenceLine,\n} from \"recharts\";\n\nconst StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    const monthAbbr = [\n      \"Jan\",\n      \"Feb\",\n      \"Mar\",\n      \"Apr\",\n      \"May\",\n      \"Jun\",\n      \"Jul\",\n      \"Aug\",\n      \"Sep\",\n      \"Oct\",\n      \"Nov\",\n      \"Dec\",\n    ];\n    const datePart = date.split(\"T\")[0];\n    const [year, month, day] = datePart.split(\"-\");\n    return monthAbbr[parseInt(month, 10) - 1];\n  };\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;\n",
            "updated_summary": "The code implements a React component called StockChart that visualizes stock price data as a line chart using the Recharts library. It processes incoming data to extract company information and formats it for the chart. The component applies the function formatDateString to format the date values displayed on the X-axis. The component displays the chart with axes, tooltips, and a legend, and only renders if valid data is provided.",
            "original_summary": "The code implements a React component called StockChart that visualizes stock price data as a line chart using the Recharts library. It processes incoming data to extract company information and formats it for the chart. The component displays the chart with axes, tooltips, and a legend, and only renders if valid data is provided."
        },
        "id": "WeMkQk4hKPpina8KtxHQ"
    },
    {
        "event": "commit_modified_summary",
        "timestamp": "2025-08-17 11:18:18.000",
        "source": "frontend",
        "data": {
            "section_id": "151b76da-c505-4d8d-b495-0d8e281160dc",
            "structured": "unstructured",
            "edited_summary": "The code implements a React component called StockChart that visualizes stock price data as a line chart using the Recharts library. It processes incoming data to extract company information and formats it for the chart. The component applies the function formatDateString to format the date values displayed on the X-axis. The component displays the chart with axes, tooltips, and a legend, and only renders if valid data is provided.",
            "original_summary": "The code implements a React component called StockChart that visualizes stock price data as a line chart using the Recharts library. It processes incoming data to extract company information and formats it for the chart. The component displays the chart with axes, tooltips, and a legend, and only renders if valid data is provided.",
            "detail_level": "medium"
        },
        "id": "f6d3cTgA5y6LKPca41GF"
    },
    {
        "event": "modify_summary_mediation",
        "timestamp": "2025-08-17 11:18:21.000",
        "source": "backend",
        "data": {
            "structured_type": "unstructured",
            "original_code": "import React from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  ReferenceLine,\n} from \"recharts\";\n\nconst StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    const monthAbbr = [\n      \"Jan\",\n      \"Feb\",\n      \"Mar\",\n      \"Apr\",\n      \"May\",\n      \"Jun\",\n      \"Jul\",\n      \"Aug\",\n      \"Sep\",\n      \"Oct\",\n      \"Nov\",\n      \"Dec\",\n    ];\n    const datePart = date.split(\"T\")[0];\n    const [year, month, day] = datePart.split(\"-\");\n    return monthAbbr[parseInt(month, 10) - 1];\n  };\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;\n",
            "edited_summary": "The code implements a React component called StockChart that visualizes stock price data as a line chart using the Recharts library. It processes incoming data to extract company information and formats it for the chart. The component applies the function formatDateString to format the date values displayed on the X-axis. The component displays the chart with axes, tooltips, and a legend, and only renders if valid data is provided.",
            "original_summary": "The code implements a React component called StockChart that visualizes stock price data as a line chart using the Recharts library. It processes incoming data to extract company information and formats it for the chart. The component displays the chart with axes, tooltips, and a legend, and only renders if valid data is provided.",
            "updated_code": "import React from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  ReferenceLine,\n} from \"recharts\";\n\nconst StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    const monthAbbr = [\n      \"Jan\",\n      \"Feb\",\n      \"Mar\",\n      \"Apr\",\n      \"May\",\n      \"Jun\",\n      \"Jul\",\n      \"Aug\",\n      \"Sep\",\n      \"Oct\",\n      \"Nov\",\n      \"Dec\",\n    ];\n    const datePart = date.split(\"T\")[0];\n    const [year, month, day] = datePart.split(\"-\");\n    return monthAbbr[parseInt(month, 10) - 1];\n  };\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatDateString} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;",
            "detail_level": "medium"
        },
        "id": "8IvvyiTXy7EMASKC6LVb"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:18:27.000",
        "source": "frontend",
        "data": {
            "section_id": "151b76da-c505-4d8d-b495-0d8e281160dc",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "B6fV4fJoWHh2oGRbWvuY"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:18:27.000",
        "source": "frontend",
        "data": {
            "section_id": "151b76da-c505-4d8d-b495-0d8e281160dc",
            "structured_type": "unstructured",
            "mapping_index": 4,
            "detail_level": "medium"
        },
        "id": "D2aiXOmE8XhsSimAjP9K"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:18:27.000",
        "source": "frontend",
        "data": {
            "section_id": "151b76da-c505-4d8d-b495-0d8e281160dc",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "GGdbwbJpyYPbehcY6CQM"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:18:27.000",
        "source": "frontend",
        "data": {
            "section_id": "151b76da-c505-4d8d-b495-0d8e281160dc",
            "structured_type": "unstructured",
            "mapping_index": 6,
            "detail_level": "medium"
        },
        "id": "MBOPDX0ebHUgJ3Z5acaT"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:18:27.000",
        "source": "frontend",
        "data": {
            "section_id": "151b76da-c505-4d8d-b495-0d8e281160dc",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "MgvhTHCW0ymesxkx6YWG"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:18:27.000",
        "source": "frontend",
        "data": {
            "section_id": "151b76da-c505-4d8d-b495-0d8e281160dc",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "N9ERD11WEQ5el02aPPaV"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:18:27.000",
        "source": "frontend",
        "data": {
            "section_id": "151b76da-c505-4d8d-b495-0d8e281160dc",
            "structured_type": "unstructured",
            "mapping_index": 6,
            "detail_level": "medium"
        },
        "id": "dr1BOddWcOuqBG7xiEKW"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:18:27.000",
        "source": "frontend",
        "data": {
            "section_id": "151b76da-c505-4d8d-b495-0d8e281160dc",
            "structured_type": "unstructured",
            "mapping_index": 2,
            "detail_level": "medium"
        },
        "id": "icEeG4zPRunzI9F6sd3L"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:18:27.000",
        "source": "frontend",
        "data": {
            "section_id": "151b76da-c505-4d8d-b495-0d8e281160dc",
            "structured_type": "unstructured",
            "mapping_index": 7,
            "detail_level": "medium"
        },
        "id": "jHcQIyrLUSxvxATKaMUa"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:18:27.000",
        "source": "frontend",
        "data": {
            "section_id": "151b76da-c505-4d8d-b495-0d8e281160dc",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "jiUkLoDZibidlln90sJg"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:18:27.000",
        "source": "frontend",
        "data": {
            "section_id": "151b76da-c505-4d8d-b495-0d8e281160dc",
            "structured_type": "unstructured",
            "mapping_index": 4,
            "detail_level": "medium"
        },
        "id": "keZ3hoYMblOrgCNJtkkj"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:18:27.000",
        "source": "frontend",
        "data": {
            "section_id": "151b76da-c505-4d8d-b495-0d8e281160dc",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "zdx4n1CnoYG68Ud775IG"
    },
    {
        "event": "summarize_modified_code",
        "timestamp": "2025-08-17 11:18:32.000",
        "source": "backend",
        "data": {
            "new_code": "import React from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  ReferenceLine,\n} from \"recharts\";\n\nconst StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    const monthAbbr = [\n      \"Jan\",\n      \"Feb\",\n      \"Mar\",\n      \"Apr\",\n      \"May\",\n      \"Jun\",\n      \"Jul\",\n      \"Aug\",\n      \"Sep\",\n      \"Oct\",\n      \"Nov\",\n      \"Dec\",\n    ];\n    const datePart = date.split(\"T\")[0];\n    const [year, month, day] = datePart.split(\"-\");\n    return monthAbbr[parseInt(month, 10) - 1];\n  };\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatDateString} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;",
            "original_code": "import React from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  ReferenceLine,\n} from \"recharts\";\n\nconst StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    const monthAbbr = [\n      \"Jan\",\n      \"Feb\",\n      \"Mar\",\n      \"Apr\",\n      \"May\",\n      \"Jun\",\n      \"Jul\",\n      \"Aug\",\n      \"Sep\",\n      \"Oct\",\n      \"Nov\",\n      \"Dec\",\n    ];\n    const datePart = date.split(\"T\")[0];\n    const [year, month, day] = datePart.split(\"-\");\n    return monthAbbr[parseInt(month, 10) - 1];\n  };\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatDateString} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;",
            "new_summary": {
                "high_structured": "• Implements a StockChart React component for visualizing stock prices\n• Checks for valid input data before rendering\n  ◦ Ensures data, data.data, and data.data.length are present\n• Extracts company name and ticker symbol from props\n• Defines a formatDateString helper to convert date strings to month abbreviations\n  ◦ This function is now used to format X-axis labels\n• Transforms raw stock data into an array of objects with date and closing price for charting\n• Renders a styled container with the company name and ticker\n• Uses Recharts components to display a responsive line chart\n  ◦ Includes X and Y axes (with the X-axis now using the custom date formatter), tooltip, legend, and a monotone line for price\n  ◦ The line is styled with a specific color and has no dots\n• Only renders the chart if valid data is available",
                "low_structured": "• React component for stock chart\n• Uses Recharts for visualization\n• Displays stock prices over time\n• X-axis labels are now formatted using a custom month abbreviation formatter",
                "title": "StockChart React Component with Custom X-Axis Date Formatting",
                "medium_structured": "• Defines a StockChart React component\n• Processes input data to extract company name, ticker, and price information\n• Formats data for Recharts line chart\n• Renders a responsive line chart with axes, tooltip, and legend\n• Only displays the chart if valid data is present\n• The X-axis now uses the formatDateString helper to format date labels as month abbreviations",
                "medium_unstructured": "The code implements a React component called StockChart that visualizes stock price data as a line chart using the Recharts library. It processes incoming data to extract company information and formats it for the chart. The component displays the chart with axes, tooltips, and a legend, and only renders if valid data is provided. The X-axis now uses a custom date formatter to display month abbreviations.",
                "high_unstructured": "This code defines a StockChart React component that renders a responsive line chart of stock closing prices using the Recharts library. It first checks for valid data, then extracts the company name and ticker, and formats the raw data into a structure suitable for the chart. The component includes a helper function to format date strings, which is now used to format the X-axis labels as month abbreviations. The chart displays the company name and ticker, and features axes, tooltips, a legend, and a styled line without dots, only rendering when data is available.",
                "low_unstructured": "This code defines a React component that displays a stock price line chart using the Recharts library, now utilizing a custom date formatter for the X-axis."
            },
            "old_summary": {
                "high_structured": "• Implements a StockChart React component for visualizing stock prices\n• Checks for valid input data before rendering\n  ◦ Ensures data, data.data, and data.data.length are present\n• Extracts company name and ticker symbol from props\n• Defines a formatDateString helper to convert date strings to month abbreviations\n  ◦ This function is defined but not used in the rendered output\n• Transforms raw stock data into an array of objects with date and closing price for charting\n• Renders a styled container with the company name and ticker\n• Uses Recharts components to display a responsive line chart\n  ◦ Includes X and Y axes, tooltip, legend, and a monotone line for price\n  ◦ The line is styled with a specific color and has no dots\n• Only renders the chart if valid data is available",
                "low_structured": "• React component for stock chart\n• Uses Recharts for visualization\n• Displays stock prices over time",
                "title": "StockChart React Component for Displaying Stock Prices",
                "medium_structured": "• Defines a StockChart React component\n• Processes input data to extract company name, ticker, and price information\n• Formats data for Recharts line chart\n• Renders a responsive line chart with axes, tooltip, and legend\n• Only displays the chart if valid data is present",
                "medium_unstructured": "The code implements a React component called StockChart that visualizes stock price data as a line chart using the Recharts library. It processes incoming data to extract company information and formats it for the chart. The component displays the chart with axes, tooltips, and a legend, and only renders if valid data is provided.",
                "high_unstructured": "This code defines a StockChart React component that renders a responsive line chart of stock closing prices using the Recharts library. It first checks for valid data, then extracts the company name and ticker, and formats the raw data into a structure suitable for the chart. The component includes a helper function to format date strings, although this function is not used in the rendering. The chart displays the company name and ticker, and features axes, tooltips, a legend, and a styled line without dots, only rendering when data is available.",
                "low_unstructured": "This code defines a React component that displays a stock price line chart using the Recharts library."
            }
        },
        "id": "UBfaJ4sJNlL9Jw3hTcX8"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-17 11:18:33.000",
        "source": "backend",
        "data": {
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     const monthAbbr = [\n21:       \"Jan\",\n22:       \"Feb\",\n23:       \"Mar\",\n24:       \"Apr\",\n25:       \"May\",\n26:       \"Jun\",\n27:       \"Jul\",\n28:       \"Aug\",\n29:       \"Sep\",\n30:       \"Oct\",\n31:       \"Nov\",\n32:       \"Dec\",\n33:     ];\n34:     const datePart = date.split(\"T\")[0];\n35:     const [year, month, day] = datePart.split(\"-\");\n36:     return monthAbbr[parseInt(month, 10) - 1];\n37:   };\n38:   // Combine labels and values into an array of objects for Recharts\n39:   const chartData = data.data.map((item) => ({\n40:     date: item.date,\n41:     price: item.close,\n42:   }));\n43: \n44:   return (\n45:     <div style={{ marginTop: \"2rem\" }}>\n46:       <h3>\n47:         {company} ({ticker})\n48:       </h3>\n49:       <ResponsiveContainer width=\"100%\" height={300}>\n50:         <LineChart\n51:           data={chartData}\n52:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n53:         >\n54:           <XAxis dataKey=\"date\" tickFormatter={formatDateString} />\n55:           <YAxis domain={[\"auto\", \"auto\"]} />\n56:           <Tooltip />\n57:           <Legend />\n58:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n59:         </LineChart>\n60:       </ResponsiveContainer>\n61:     </div>\n62:   );\n63: };\n64: \n65: export default StockChart;",
            "mapping": [
                {
                    "summaryComponent": "defines a React component",
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        }
                    ]
                },
                {
                    "summaryComponent": "displays a stock price line chart",
                    "codeSegments": [
                        {
                            "code": "<LineChart",
                            "line": 50
                        },
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 58
                        }
                    ]
                },
                {
                    "summaryComponent": "using the Recharts library",
                    "codeSegments": [
                        {
                            "code": "import {",
                            "line": 2
                        },
                        {
                            "code": "} from \"recharts\";",
                            "line": 11
                        }
                    ]
                },
                {
                    "summaryComponent": "now utilizing a custom date formatter for the X-axis",
                    "codeSegments": [
                        {
                            "code": "const formatDateString = (date) => {",
                            "line": 19
                        },
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                            "line": 54
                        }
                    ]
                }
            ],
            "summary": "This code defines a React component that displays a stock price line chart using the Recharts library, now utilizing a custom date formatter for the X-axis."
        },
        "id": "oIoTYT76Kpb8JgGtWaXB"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-17 11:18:35.000",
        "source": "backend",
        "data": {
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     const monthAbbr = [\n21:       \"Jan\",\n22:       \"Feb\",\n23:       \"Mar\",\n24:       \"Apr\",\n25:       \"May\",\n26:       \"Jun\",\n27:       \"Jul\",\n28:       \"Aug\",\n29:       \"Sep\",\n30:       \"Oct\",\n31:       \"Nov\",\n32:       \"Dec\",\n33:     ];\n34:     const datePart = date.split(\"T\")[0];\n35:     const [year, month, day] = datePart.split(\"-\");\n36:     return monthAbbr[parseInt(month, 10) - 1];\n37:   };\n38:   // Combine labels and values into an array of objects for Recharts\n39:   const chartData = data.data.map((item) => ({\n40:     date: item.date,\n41:     price: item.close,\n42:   }));\n43: \n44:   return (\n45:     <div style={{ marginTop: \"2rem\" }}>\n46:       <h3>\n47:         {company} ({ticker})\n48:       </h3>\n49:       <ResponsiveContainer width=\"100%\" height={300}>\n50:         <LineChart\n51:           data={chartData}\n52:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n53:         >\n54:           <XAxis dataKey=\"date\" tickFormatter={formatDateString} />\n55:           <YAxis domain={[\"auto\", \"auto\"]} />\n56:           <Tooltip />\n57:           <Legend />\n58:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n59:         </LineChart>\n60:       </ResponsiveContainer>\n61:     </div>\n62:   );\n63: };\n64: \n65: export default StockChart;",
            "mapping": [
                {
                    "summaryComponent": "a React component called StockChart",
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        },
                        {
                            "code": "export default StockChart;",
                            "line": 65
                        }
                    ]
                },
                {
                    "summaryComponent": "visualizes stock price data as a line chart",
                    "codeSegments": [
                        {
                            "code": "<LineChart",
                            "line": 50
                        },
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 58
                        }
                    ]
                },
                {
                    "summaryComponent": "using the Recharts library",
                    "codeSegments": [
                        {
                            "code": "import {",
                            "line": 2
                        },
                        {
                            "code": "} from \"recharts\";",
                            "line": 11
                        }
                    ]
                },
                {
                    "summaryComponent": "processes incoming data to extract company information",
                    "codeSegments": [
                        {
                            "code": "const company = data.name;",
                            "line": 16
                        },
                        {
                            "code": "const ticker = data.ticker;",
                            "line": 17
                        }
                    ]
                },
                {
                    "summaryComponent": "formats it for the chart",
                    "codeSegments": [
                        {
                            "code": "const chartData = data.data.map((item) => ({",
                            "line": 39
                        },
                        {
                            "code": "date: item.date,",
                            "line": 40
                        },
                        {
                            "code": "price: item.close,",
                            "line": 41
                        }
                    ]
                },
                {
                    "summaryComponent": "displays the chart with axes, tooltips, and a legend",
                    "codeSegments": [
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                            "line": 54
                        },
                        {
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                            "line": 55
                        },
                        {
                            "code": "<Tooltip />",
                            "line": 56
                        },
                        {
                            "code": "<Legend />",
                            "line": 57
                        }
                    ]
                },
                {
                    "summaryComponent": "only renders if valid data is provided",
                    "codeSegments": [
                        {
                            "code": "if (!data || !data.data || !data.data.length) return null;",
                            "line": 14
                        }
                    ]
                },
                {
                    "summaryComponent": "The X-axis now uses a custom date formatter",
                    "codeSegments": [
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                            "line": 54
                        },
                        {
                            "code": "const formatDateString = (date) => {",
                            "line": 19
                        }
                    ]
                },
                {
                    "summaryComponent": "to display month abbreviations",
                    "codeSegments": [
                        {
                            "code": "const monthAbbr = [",
                            "line": 20
                        },
                        {
                            "code": "return monthAbbr[parseInt(month, 10) - 1];",
                            "line": 36
                        }
                    ]
                }
            ],
            "summary": "The code implements a React component called StockChart that visualizes stock price data as a line chart using the Recharts library. It processes incoming data to extract company information and formats it for the chart. The component displays the chart with axes, tooltips, and a legend, and only renders if valid data is provided. The X-axis now uses a custom date formatter to display month abbreviations."
        },
        "id": "QuoERGlBr62wy4Bt59eA"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-17 11:18:35.000",
        "source": "backend",
        "data": {
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     const monthAbbr = [\n21:       \"Jan\",\n22:       \"Feb\",\n23:       \"Mar\",\n24:       \"Apr\",\n25:       \"May\",\n26:       \"Jun\",\n27:       \"Jul\",\n28:       \"Aug\",\n29:       \"Sep\",\n30:       \"Oct\",\n31:       \"Nov\",\n32:       \"Dec\",\n33:     ];\n34:     const datePart = date.split(\"T\")[0];\n35:     const [year, month, day] = datePart.split(\"-\");\n36:     return monthAbbr[parseInt(month, 10) - 1];\n37:   };\n38:   // Combine labels and values into an array of objects for Recharts\n39:   const chartData = data.data.map((item) => ({\n40:     date: item.date,\n41:     price: item.close,\n42:   }));\n43: \n44:   return (\n45:     <div style={{ marginTop: \"2rem\" }}>\n46:       <h3>\n47:         {company} ({ticker})\n48:       </h3>\n49:       <ResponsiveContainer width=\"100%\" height={300}>\n50:         <LineChart\n51:           data={chartData}\n52:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n53:         >\n54:           <XAxis dataKey=\"date\" tickFormatter={formatDateString} />\n55:           <YAxis domain={[\"auto\", \"auto\"]} />\n56:           <Tooltip />\n57:           <Legend />\n58:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n59:         </LineChart>\n60:       </ResponsiveContainer>\n61:     </div>\n62:   );\n63: };\n64: \n65: export default StockChart;",
            "mapping": [
                {
                    "summaryComponent": "Defines a StockChart React component",
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        }
                    ]
                },
                {
                    "summaryComponent": "Processes input data to extract company name, ticker, and price information",
                    "codeSegments": [
                        {
                            "code": "const company = data.name;",
                            "line": 16
                        },
                        {
                            "code": "const ticker = data.ticker;",
                            "line": 17
                        },
                        {
                            "code": "const chartData = data.data.map((item) => ({",
                            "line": 39
                        },
                        {
                            "code": "price: item.close,",
                            "line": 41
                        }
                    ]
                },
                {
                    "summaryComponent": "Formats data for Recharts line chart",
                    "codeSegments": [
                        {
                            "code": "const chartData = data.data.map((item) => ({",
                            "line": 39
                        },
                        {
                            "code": "date: item.date,",
                            "line": 40
                        },
                        {
                            "code": "price: item.close,",
                            "line": 41
                        }
                    ]
                },
                {
                    "summaryComponent": "Renders a responsive line chart with axes, tooltip, and legend",
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 49
                        },
                        {
                            "code": "<LineChart",
                            "line": 50
                        },
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                            "line": 54
                        },
                        {
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                            "line": 55
                        },
                        {
                            "code": "<Tooltip />",
                            "line": 56
                        },
                        {
                            "code": "<Legend />",
                            "line": 57
                        },
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 58
                        }
                    ]
                },
                {
                    "summaryComponent": "Only displays the chart if valid data is present",
                    "codeSegments": [
                        {
                            "code": "if (!data || !data.data || !data.data.length) return null;",
                            "line": 14
                        }
                    ]
                },
                {
                    "summaryComponent": "The X-axis now uses the formatDateString helper to format date labels as month abbreviations",
                    "codeSegments": [
                        {
                            "code": "const formatDateString = (date) => {",
                            "line": 19
                        },
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                            "line": 54
                        },
                        {
                            "code": "return monthAbbr[parseInt(month, 10) - 1];",
                            "line": 36
                        }
                    ]
                }
            ],
            "summary": "• Defines a StockChart React component\n• Processes input data to extract company name, ticker, and price information\n• Formats data for Recharts line chart\n• Renders a responsive line chart with axes, tooltip, and legend\n• Only displays the chart if valid data is present\n• The X-axis now uses the formatDateString helper to format date labels as month abbreviations"
        },
        "id": "RNRJhhZZvWwnJhXBdGyZ"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-17 11:18:35.000",
        "source": "backend",
        "data": {
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     const monthAbbr = [\n21:       \"Jan\",\n22:       \"Feb\",\n23:       \"Mar\",\n24:       \"Apr\",\n25:       \"May\",\n26:       \"Jun\",\n27:       \"Jul\",\n28:       \"Aug\",\n29:       \"Sep\",\n30:       \"Oct\",\n31:       \"Nov\",\n32:       \"Dec\",\n33:     ];\n34:     const datePart = date.split(\"T\")[0];\n35:     const [year, month, day] = datePart.split(\"-\");\n36:     return monthAbbr[parseInt(month, 10) - 1];\n37:   };\n38:   // Combine labels and values into an array of objects for Recharts\n39:   const chartData = data.data.map((item) => ({\n40:     date: item.date,\n41:     price: item.close,\n42:   }));\n43: \n44:   return (\n45:     <div style={{ marginTop: \"2rem\" }}>\n46:       <h3>\n47:         {company} ({ticker})\n48:       </h3>\n49:       <ResponsiveContainer width=\"100%\" height={300}>\n50:         <LineChart\n51:           data={chartData}\n52:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n53:         >\n54:           <XAxis dataKey=\"date\" tickFormatter={formatDateString} />\n55:           <YAxis domain={[\"auto\", \"auto\"]} />\n56:           <Tooltip />\n57:           <Legend />\n58:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n59:         </LineChart>\n60:       </ResponsiveContainer>\n61:     </div>\n62:   );\n63: };\n64: \n65: export default StockChart;",
            "mapping": [
                {
                    "summaryComponent": "React component for stock chart",
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        },
                        {
                            "code": "export default StockChart;",
                            "line": 65
                        }
                    ]
                },
                {
                    "summaryComponent": "Uses Recharts for visualization",
                    "codeSegments": [
                        {
                            "code": "import {",
                            "line": 2
                        },
                        {
                            "code": "LineChart,",
                            "line": 3
                        },
                        {
                            "code": "Line,",
                            "line": 4
                        },
                        {
                            "code": "XAxis,",
                            "line": 5
                        },
                        {
                            "code": "YAxis,",
                            "line": 6
                        },
                        {
                            "code": "Tooltip,",
                            "line": 7
                        },
                        {
                            "code": "Legend,",
                            "line": 8
                        },
                        {
                            "code": "ResponsiveContainer,",
                            "line": 9
                        },
                        {
                            "code": "ReferenceLine,",
                            "line": 10
                        },
                        {
                            "code": "} from \"recharts\";",
                            "line": 11
                        }
                    ]
                },
                {
                    "summaryComponent": "Displays stock prices over time",
                    "codeSegments": [
                        {
                            "code": "const chartData = data.data.map((item) => ({",
                            "line": 39
                        },
                        {
                            "code": "date: item.date,",
                            "line": 40
                        },
                        {
                            "code": "price: item.close,",
                            "line": 41
                        },
                        {
                            "code": "<LineChart",
                            "line": 50
                        },
                        {
                            "code": "data={chartData}",
                            "line": 51
                        },
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 58
                        }
                    ]
                },
                {
                    "summaryComponent": "X-axis labels are now formatted using a custom month abbreviation formatter",
                    "codeSegments": [
                        {
                            "code": "const formatDateString = (date) => {",
                            "line": 19
                        },
                        {
                            "code": "const monthAbbr = [",
                            "line": 20
                        },
                        {
                            "code": "return monthAbbr[parseInt(month, 10) - 1];",
                            "line": 36
                        },
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                            "line": 54
                        }
                    ]
                }
            ],
            "summary": "• React component for stock chart\n• Uses Recharts for visualization\n• Displays stock prices over time\n• X-axis labels are now formatted using a custom month abbreviation formatter"
        },
        "id": "RZ8HOdsDQ5UvmhaJyxAq"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-17 11:18:38.000",
        "source": "backend",
        "data": {
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     const monthAbbr = [\n21:       \"Jan\",\n22:       \"Feb\",\n23:       \"Mar\",\n24:       \"Apr\",\n25:       \"May\",\n26:       \"Jun\",\n27:       \"Jul\",\n28:       \"Aug\",\n29:       \"Sep\",\n30:       \"Oct\",\n31:       \"Nov\",\n32:       \"Dec\",\n33:     ];\n34:     const datePart = date.split(\"T\")[0];\n35:     const [year, month, day] = datePart.split(\"-\");\n36:     return monthAbbr[parseInt(month, 10) - 1];\n37:   };\n38:   // Combine labels and values into an array of objects for Recharts\n39:   const chartData = data.data.map((item) => ({\n40:     date: item.date,\n41:     price: item.close,\n42:   }));\n43: \n44:   return (\n45:     <div style={{ marginTop: \"2rem\" }}>\n46:       <h3>\n47:         {company} ({ticker})\n48:       </h3>\n49:       <ResponsiveContainer width=\"100%\" height={300}>\n50:         <LineChart\n51:           data={chartData}\n52:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n53:         >\n54:           <XAxis dataKey=\"date\" tickFormatter={formatDateString} />\n55:           <YAxis domain={[\"auto\", \"auto\"]} />\n56:           <Tooltip />\n57:           <Legend />\n58:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n59:         </LineChart>\n60:       </ResponsiveContainer>\n61:     </div>\n62:   );\n63: };\n64: \n65: export default StockChart;",
            "mapping": [
                {
                    "summaryComponent": "StockChart React component",
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        }
                    ]
                },
                {
                    "summaryComponent": "renders a responsive line chart of stock closing prices",
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 49
                        },
                        {
                            "code": "<LineChart",
                            "line": 50
                        },
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 58
                        }
                    ]
                },
                {
                    "summaryComponent": "using the Recharts library",
                    "codeSegments": [
                        {
                            "code": "import {",
                            "line": 2
                        },
                        {
                            "code": "} from \"recharts\";",
                            "line": 11
                        }
                    ]
                },
                {
                    "summaryComponent": "checks for valid data",
                    "codeSegments": [
                        {
                            "code": "if (!data || !data.data || !data.data.length) return null;",
                            "line": 14
                        }
                    ]
                },
                {
                    "summaryComponent": "extracts the company name and ticker",
                    "codeSegments": [
                        {
                            "code": "const company = data.name;",
                            "line": 16
                        },
                        {
                            "code": "const ticker = data.ticker;",
                            "line": 17
                        }
                    ]
                },
                {
                    "summaryComponent": "formats the raw data into a structure suitable for the chart",
                    "codeSegments": [
                        {
                            "code": "const chartData = data.data.map((item) => ({",
                            "line": 39
                        },
                        {
                            "code": "  date: item.date,",
                            "line": 40
                        },
                        {
                            "code": "  price: item.close,",
                            "line": 41
                        },
                        {
                            "code": "}));",
                            "line": 42
                        }
                    ]
                },
                {
                    "summaryComponent": "includes a helper function to format date strings",
                    "codeSegments": [
                        {
                            "code": "const formatDateString = (date) => {",
                            "line": 19
                        }
                    ]
                },
                {
                    "summaryComponent": "used to format the X-axis labels as month abbreviations",
                    "codeSegments": [
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                            "line": 54
                        },
                        {
                            "code": "return monthAbbr[parseInt(month, 10) - 1];",
                            "line": 36
                        }
                    ]
                },
                {
                    "summaryComponent": "displays the company name and ticker",
                    "codeSegments": [
                        {
                            "code": "<h3>",
                            "line": 46
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 47
                        }
                    ]
                },
                {
                    "summaryComponent": "features axes, tooltips, a legend, and a styled line without dots, only rendering when data is available",
                    "codeSegments": [
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                            "line": 54
                        },
                        {
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                            "line": 55
                        },
                        {
                            "code": "<Tooltip />",
                            "line": 56
                        },
                        {
                            "code": "<Legend />",
                            "line": 57
                        },
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 58
                        },
                        {
                            "code": "if (!data || !data.data || !data.data.length) return null;",
                            "line": 14
                        }
                    ]
                }
            ],
            "summary": "This code defines a StockChart React component that renders a responsive line chart of stock closing prices using the Recharts library. It first checks for valid data, then extracts the company name and ticker, and formats the raw data into a structure suitable for the chart. The component includes a helper function to format date strings, which is now used to format the X-axis labels as month abbreviations. The chart displays the company name and ticker, and features axes, tooltips, a legend, and a styled line without dots, only rendering when data is available."
        },
        "id": "QgaOhtchBUK9vZzDRmNa"
    },
    {
        "event": "create_new_section",
        "timestamp": "2025-08-17 11:18:38.000",
        "source": "frontend",
        "data": {
            "section_id": "693a53bd-a203-47eb-bd24-452086745ee5",
            "section_data": {
                "metadata": {
                    "id": "693a53bd-a203-47eb-bd24-452086745ee5",
                    "fullPath": "/project/workspace/frontend/src/StockChart.jsx",
                    "offset": 0,
                    "filename": "StockChart.jsx",
                    "originalCode": "import React from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  ReferenceLine,\n} from \"recharts\";\n\nconst StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    const monthAbbr = [\n      \"Jan\",\n      \"Feb\",\n      \"Mar\",\n      \"Apr\",\n      \"May\",\n      \"Jun\",\n      \"Jul\",\n      \"Aug\",\n      \"Sep\",\n      \"Oct\",\n      \"Nov\",\n      \"Dec\",\n    ];\n    const datePart = date.split(\"T\")[0];\n    const [year, month, day] = datePart.split(\"-\");\n    return monthAbbr[parseInt(month, 10) - 1];\n  };\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatDateString} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;"
                },
                "summaryMappings": {
                    "high_structured": [
                        {
                            "summaryComponent": "Implements a StockChart React component for visualizing stock prices",
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Checks for valid input data before rendering",
                            "codeSegments": [
                                {
                                    "code": "if (!data || !data.data || !data.data.length) return null;",
                                    "line": 14
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Ensures data, data.data, and data.data.length are present",
                            "codeSegments": [
                                {
                                    "code": "if (!data || !data.data || !data.data.length) return null;",
                                    "line": 14
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Extracts company name and ticker symbol from props",
                            "codeSegments": [
                                {
                                    "code": "const company = data.name;",
                                    "line": 16
                                },
                                {
                                    "code": "const ticker = data.ticker;",
                                    "line": 17
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Defines a formatDateString helper to convert date strings to month abbreviations",
                            "codeSegments": [
                                {
                                    "code": "const formatDateString = (date) => {",
                                    "line": 19
                                },
                                {
                                    "code": "const monthAbbr = [",
                                    "line": 20
                                },
                                {
                                    "code": "return monthAbbr[parseInt(month, 10) - 1];",
                                    "line": 36
                                }
                            ]
                        },
                        {
                            "summaryComponent": "This function is now used to format X-axis labels",
                            "codeSegments": [
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                                    "line": 54
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Transforms raw stock data into an array of objects with date and closing price for charting",
                            "codeSegments": [
                                {
                                    "code": "const chartData = data.data.map((item) => ({",
                                    "line": 39
                                },
                                {
                                    "code": "date: item.date,",
                                    "line": 40
                                },
                                {
                                    "code": "price: item.close,",
                                    "line": 41
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Renders a styled container with the company name and ticker",
                            "codeSegments": [
                                {
                                    "code": "<div style={{ marginTop: \"2rem\" }}>",
                                    "line": 45
                                },
                                {
                                    "code": "<h3>",
                                    "line": 46
                                },
                                {
                                    "code": "{company} ({ticker})",
                                    "line": 47
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Uses Recharts components to display a responsive line chart",
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 49
                                },
                                {
                                    "code": "<LineChart",
                                    "line": 50
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Includes X and Y axes (with the X-axis now using the custom date formatter), tooltip, legend, and a monotone line for price",
                            "codeSegments": [
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                                    "line": 54
                                },
                                {
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                                    "line": 55
                                },
                                {
                                    "code": "<Tooltip />",
                                    "line": 56
                                },
                                {
                                    "code": "<Legend />",
                                    "line": 57
                                },
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 58
                                }
                            ]
                        }
                    ],
                    "low_structured": [
                        {
                            "summaryComponent": "React component for stock chart",
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                },
                                {
                                    "code": "export default StockChart;",
                                    "line": 65
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Uses Recharts for visualization",
                            "codeSegments": [
                                {
                                    "code": "import {",
                                    "line": 2
                                },
                                {
                                    "code": "LineChart,",
                                    "line": 3
                                },
                                {
                                    "code": "Line,",
                                    "line": 4
                                },
                                {
                                    "code": "XAxis,",
                                    "line": 5
                                },
                                {
                                    "code": "YAxis,",
                                    "line": 6
                                },
                                {
                                    "code": "Tooltip,",
                                    "line": 7
                                },
                                {
                                    "code": "Legend,",
                                    "line": 8
                                },
                                {
                                    "code": "ResponsiveContainer,",
                                    "line": 9
                                },
                                {
                                    "code": "ReferenceLine,",
                                    "line": 10
                                },
                                {
                                    "code": "} from \"recharts\";",
                                    "line": 11
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Displays stock prices over time",
                            "codeSegments": [
                                {
                                    "code": "const chartData = data.data.map((item) => ({",
                                    "line": 39
                                },
                                {
                                    "code": "date: item.date,",
                                    "line": 40
                                },
                                {
                                    "code": "price: item.close,",
                                    "line": 41
                                },
                                {
                                    "code": "<LineChart",
                                    "line": 50
                                },
                                {
                                    "code": "data={chartData}",
                                    "line": 51
                                },
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 58
                                }
                            ]
                        },
                        {
                            "summaryComponent": "X-axis labels are now formatted using a custom month abbreviation formatter",
                            "codeSegments": [
                                {
                                    "code": "const formatDateString = (date) => {",
                                    "line": 19
                                },
                                {
                                    "code": "const monthAbbr = [",
                                    "line": 20
                                },
                                {
                                    "code": "return monthAbbr[parseInt(month, 10) - 1];",
                                    "line": 36
                                },
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                                    "line": 54
                                }
                            ]
                        }
                    ],
                    "medium_structured": [
                        {
                            "summaryComponent": "Defines a StockChart React component",
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Processes input data to extract company name, ticker, and price information",
                            "codeSegments": [
                                {
                                    "code": "const company = data.name;",
                                    "line": 16
                                },
                                {
                                    "code": "const ticker = data.ticker;",
                                    "line": 17
                                },
                                {
                                    "code": "const chartData = data.data.map((item) => ({",
                                    "line": 39
                                },
                                {
                                    "code": "price: item.close,",
                                    "line": 41
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Formats data for Recharts line chart",
                            "codeSegments": [
                                {
                                    "code": "const chartData = data.data.map((item) => ({",
                                    "line": 39
                                },
                                {
                                    "code": "date: item.date,",
                                    "line": 40
                                },
                                {
                                    "code": "price: item.close,",
                                    "line": 41
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Renders a responsive line chart with axes, tooltip, and legend",
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 49
                                },
                                {
                                    "code": "<LineChart",
                                    "line": 50
                                },
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                                    "line": 54
                                },
                                {
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                                    "line": 55
                                },
                                {
                                    "code": "<Tooltip />",
                                    "line": 56
                                },
                                {
                                    "code": "<Legend />",
                                    "line": 57
                                },
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 58
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Only displays the chart if valid data is present",
                            "codeSegments": [
                                {
                                    "code": "if (!data || !data.data || !data.data.length) return null;",
                                    "line": 14
                                }
                            ]
                        },
                        {
                            "summaryComponent": "The X-axis now uses the formatDateString helper to format date labels as month abbreviations",
                            "codeSegments": [
                                {
                                    "code": "const formatDateString = (date) => {",
                                    "line": 19
                                },
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                                    "line": 54
                                },
                                {
                                    "code": "return monthAbbr[parseInt(month, 10) - 1];",
                                    "line": 36
                                }
                            ]
                        }
                    ],
                    "medium_unstructured": [
                        {
                            "summaryComponent": "a React component called StockChart",
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                },
                                {
                                    "code": "export default StockChart;",
                                    "line": 65
                                }
                            ]
                        },
                        {
                            "summaryComponent": "visualizes stock price data as a line chart",
                            "codeSegments": [
                                {
                                    "code": "<LineChart",
                                    "line": 50
                                },
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 58
                                }
                            ]
                        },
                        {
                            "summaryComponent": "using the Recharts library",
                            "codeSegments": [
                                {
                                    "code": "import {",
                                    "line": 2
                                },
                                {
                                    "code": "} from \"recharts\";",
                                    "line": 11
                                }
                            ]
                        },
                        {
                            "summaryComponent": "processes incoming data to extract company information",
                            "codeSegments": [
                                {
                                    "code": "const company = data.name;",
                                    "line": 16
                                },
                                {
                                    "code": "const ticker = data.ticker;",
                                    "line": 17
                                }
                            ]
                        },
                        {
                            "summaryComponent": "formats it for the chart",
                            "codeSegments": [
                                {
                                    "code": "const chartData = data.data.map((item) => ({",
                                    "line": 39
                                },
                                {
                                    "code": "date: item.date,",
                                    "line": 40
                                },
                                {
                                    "code": "price: item.close,",
                                    "line": 41
                                }
                            ]
                        },
                        {
                            "summaryComponent": "displays the chart with axes, tooltips, and a legend",
                            "codeSegments": [
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                                    "line": 54
                                },
                                {
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                                    "line": 55
                                },
                                {
                                    "code": "<Tooltip />",
                                    "line": 56
                                },
                                {
                                    "code": "<Legend />",
                                    "line": 57
                                }
                            ]
                        },
                        {
                            "summaryComponent": "only renders if valid data is provided",
                            "codeSegments": [
                                {
                                    "code": "if (!data || !data.data || !data.data.length) return null;",
                                    "line": 14
                                }
                            ]
                        },
                        {
                            "summaryComponent": "The X-axis now uses a custom date formatter",
                            "codeSegments": [
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                                    "line": 54
                                },
                                {
                                    "code": "const formatDateString = (date) => {",
                                    "line": 19
                                }
                            ]
                        },
                        {
                            "summaryComponent": "to display month abbreviations",
                            "codeSegments": [
                                {
                                    "code": "const monthAbbr = [",
                                    "line": 20
                                },
                                {
                                    "code": "return monthAbbr[parseInt(month, 10) - 1];",
                                    "line": 36
                                }
                            ]
                        }
                    ],
                    "high_unstructured": [
                        {
                            "summaryComponent": "StockChart React component",
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                }
                            ]
                        },
                        {
                            "summaryComponent": "renders a responsive line chart of stock closing prices",
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 49
                                },
                                {
                                    "code": "<LineChart",
                                    "line": 50
                                },
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 58
                                }
                            ]
                        },
                        {
                            "summaryComponent": "using the Recharts library",
                            "codeSegments": [
                                {
                                    "code": "import {",
                                    "line": 2
                                },
                                {
                                    "code": "} from \"recharts\";",
                                    "line": 11
                                }
                            ]
                        },
                        {
                            "summaryComponent": "checks for valid data",
                            "codeSegments": [
                                {
                                    "code": "if (!data || !data.data || !data.data.length) return null;",
                                    "line": 14
                                }
                            ]
                        },
                        {
                            "summaryComponent": "extracts the company name and ticker",
                            "codeSegments": [
                                {
                                    "code": "const company = data.name;",
                                    "line": 16
                                },
                                {
                                    "code": "const ticker = data.ticker;",
                                    "line": 17
                                }
                            ]
                        },
                        {
                            "summaryComponent": "formats the raw data into a structure suitable for the chart",
                            "codeSegments": [
                                {
                                    "code": "const chartData = data.data.map((item) => ({",
                                    "line": 39
                                },
                                {
                                    "code": "  date: item.date,",
                                    "line": 40
                                },
                                {
                                    "code": "  price: item.close,",
                                    "line": 41
                                },
                                {
                                    "code": "}));",
                                    "line": 42
                                }
                            ]
                        },
                        {
                            "summaryComponent": "includes a helper function to format date strings",
                            "codeSegments": [
                                {
                                    "code": "const formatDateString = (date) => {",
                                    "line": 19
                                }
                            ]
                        },
                        {
                            "summaryComponent": "used to format the X-axis labels as month abbreviations",
                            "codeSegments": [
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                                    "line": 54
                                },
                                {
                                    "code": "return monthAbbr[parseInt(month, 10) - 1];",
                                    "line": 36
                                }
                            ]
                        },
                        {
                            "summaryComponent": "displays the company name and ticker",
                            "codeSegments": [
                                {
                                    "code": "<h3>",
                                    "line": 46
                                },
                                {
                                    "code": "{company} ({ticker})",
                                    "line": 47
                                }
                            ]
                        },
                        {
                            "summaryComponent": "features axes, tooltips, a legend, and a styled line without dots, only rendering when data is available",
                            "codeSegments": [
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                                    "line": 54
                                },
                                {
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                                    "line": 55
                                },
                                {
                                    "code": "<Tooltip />",
                                    "line": 56
                                },
                                {
                                    "code": "<Legend />",
                                    "line": 57
                                },
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 58
                                },
                                {
                                    "code": "if (!data || !data.data || !data.data.length) return null;",
                                    "line": 14
                                }
                            ]
                        }
                    ],
                    "low_unstructured": [
                        {
                            "summaryComponent": "defines a React component",
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                }
                            ]
                        },
                        {
                            "summaryComponent": "displays a stock price line chart",
                            "codeSegments": [
                                {
                                    "code": "<LineChart",
                                    "line": 50
                                },
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 58
                                }
                            ]
                        },
                        {
                            "summaryComponent": "using the Recharts library",
                            "codeSegments": [
                                {
                                    "code": "import {",
                                    "line": 2
                                },
                                {
                                    "code": "} from \"recharts\";",
                                    "line": 11
                                }
                            ]
                        },
                        {
                            "summaryComponent": "now utilizing a custom date formatter for the X-axis",
                            "codeSegments": [
                                {
                                    "code": "const formatDateString = (date) => {",
                                    "line": 19
                                },
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                                    "line": 54
                                }
                            ]
                        }
                    ]
                },
                "summaryData": {
                    "high_structured": "• Implements a StockChart React component for visualizing stock prices\n• Checks for valid input data before rendering\n  ◦ Ensures data, data.data, and data.data.length are present\n• Extracts company name and ticker symbol from props\n• Defines a formatDateString helper to convert date strings to month abbreviations\n  ◦ This function is now used to format X-axis labels\n• Transforms raw stock data into an array of objects with date and closing price for charting\n• Renders a styled container with the company name and ticker\n• Uses Recharts components to display a responsive line chart\n  ◦ Includes X and Y axes (with the X-axis now using the custom date formatter), tooltip, legend, and a monotone line for price\n  ◦ The line is styled with a specific color and has no dots\n• Only renders the chart if valid data is available",
                    "low_structured": "• React component for stock chart\n• Uses Recharts for visualization\n• Displays stock prices over time\n• X-axis labels are now formatted using a custom month abbreviation formatter",
                    "title": "StockChart React Component with Custom X-Axis Date Formatting",
                    "medium_structured": "• Defines a StockChart React component\n• Processes input data to extract company name, ticker, and price information\n• Formats data for Recharts line chart\n• Renders a responsive line chart with axes, tooltip, and legend\n• Only displays the chart if valid data is present\n• The X-axis now uses the formatDateString helper to format date labels as month abbreviations",
                    "medium_unstructured": "The code implements a React component called StockChart that visualizes stock price data as a line chart using the Recharts library. It processes incoming data to extract company information and formats it for the chart. The component displays the chart with axes, tooltips, and a legend, and only renders if valid data is provided. The X-axis now uses a custom date formatter to display month abbreviations.",
                    "high_unstructured": "This code defines a StockChart React component that renders a responsive line chart of stock closing prices using the Recharts library. It first checks for valid data, then extracts the company name and ticker, and formats the raw data into a structure suitable for the chart. The component includes a helper function to format date strings, which is now used to format the X-axis labels as month abbreviations. The chart displays the company name and ticker, and features axes, tooltips, a legend, and a styled line without dots, only rendering when data is available.",
                    "low_unstructured": "This code defines a React component that displays a stock price line chart using the Recharts library, now utilizing a custom date formatter for the X-axis."
                },
                "lines": [
                    1,
                    65
                ],
                "oldSummaryData": {
                    "high_structured": "• Implements a StockChart React component for visualizing stock prices\n• Checks for valid input data before rendering\n  ◦ Ensures data, data.data, and data.data.length are present\n• Extracts company name and ticker symbol from props\n• Defines a formatDateString helper to convert date strings to month abbreviations\n  ◦ This function is defined but not used in the rendered output\n• Transforms raw stock data into an array of objects with date and closing price for charting\n• Renders a styled container with the company name and ticker\n• Uses Recharts components to display a responsive line chart\n  ◦ Includes X and Y axes, tooltip, legend, and a monotone line for price\n  ◦ The line is styled with a specific color and has no dots\n• Only renders the chart if valid data is available",
                    "low_structured": "• React component for stock chart\n• Uses Recharts for visualization\n• Displays stock prices over time",
                    "title": "StockChart React Component for Displaying Stock Prices",
                    "medium_structured": "• Defines a StockChart React component\n• Processes input data to extract company name, ticker, and price information\n• Formats data for Recharts line chart\n• Renders a responsive line chart with axes, tooltip, and legend\n• Only displays the chart if valid data is present",
                    "medium_unstructured": "The code implements a React component called StockChart that visualizes stock price data as a line chart using the Recharts library. It processes incoming data to extract company information and formats it for the chart. The component displays the chart with axes, tooltips, and a legend, and only renders if valid data is provided.",
                    "high_unstructured": "This code defines a StockChart React component that renders a responsive line chart of stock closing prices using the Recharts library. It first checks for valid data, then extracts the company name and ticker, and formats the raw data into a structure suitable for the chart. The component includes a helper function to format date strings, although this function is not used in the rendering. The chart displays the company name and ticker, and features axes, tooltips, a legend, and a styled line without dots, only rendering when data is available.",
                    "low_unstructured": "This code defines a React component that displays a stock price line chart using the Recharts library."
                },
                "selectedDetailLevel": "medium",
                "selectedStructured": "unstructured",
                "editPromptValue": "",
                "title": "StockChart React Component with Custom X-Axis Date Formatting",
                "createdAt": 1755415118000,
                "editPromptDetailLevel": null,
                "editPromptStructured": null
            }
        },
        "id": "UAAyt9yagPWADYep4yj7"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-17 11:18:38.000",
        "source": "backend",
        "data": {
            "code": "1: import React from \"react\";\n2: import {\n3:   LineChart,\n4:   Line,\n5:   XAxis,\n6:   YAxis,\n7:   Tooltip,\n8:   Legend,\n9:   ResponsiveContainer,\n10:   ReferenceLine,\n11: } from \"recharts\";\n12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     const monthAbbr = [\n21:       \"Jan\",\n22:       \"Feb\",\n23:       \"Mar\",\n24:       \"Apr\",\n25:       \"May\",\n26:       \"Jun\",\n27:       \"Jul\",\n28:       \"Aug\",\n29:       \"Sep\",\n30:       \"Oct\",\n31:       \"Nov\",\n32:       \"Dec\",\n33:     ];\n34:     const datePart = date.split(\"T\")[0];\n35:     const [year, month, day] = datePart.split(\"-\");\n36:     return monthAbbr[parseInt(month, 10) - 1];\n37:   };\n38:   // Combine labels and values into an array of objects for Recharts\n39:   const chartData = data.data.map((item) => ({\n40:     date: item.date,\n41:     price: item.close,\n42:   }));\n43: \n44:   return (\n45:     <div style={{ marginTop: \"2rem\" }}>\n46:       <h3>\n47:         {company} ({ticker})\n48:       </h3>\n49:       <ResponsiveContainer width=\"100%\" height={300}>\n50:         <LineChart\n51:           data={chartData}\n52:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n53:         >\n54:           <XAxis dataKey=\"date\" tickFormatter={formatDateString} />\n55:           <YAxis domain={[\"auto\", \"auto\"]} />\n56:           <Tooltip />\n57:           <Legend />\n58:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n59:         </LineChart>\n60:       </ResponsiveContainer>\n61:     </div>\n62:   );\n63: };\n64: \n65: export default StockChart;",
            "mapping": [
                {
                    "summaryComponent": "Implements a StockChart React component for visualizing stock prices",
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        }
                    ]
                },
                {
                    "summaryComponent": "Checks for valid input data before rendering",
                    "codeSegments": [
                        {
                            "code": "if (!data || !data.data || !data.data.length) return null;",
                            "line": 14
                        }
                    ]
                },
                {
                    "summaryComponent": "Ensures data, data.data, and data.data.length are present",
                    "codeSegments": [
                        {
                            "code": "if (!data || !data.data || !data.data.length) return null;",
                            "line": 14
                        }
                    ]
                },
                {
                    "summaryComponent": "Extracts company name and ticker symbol from props",
                    "codeSegments": [
                        {
                            "code": "const company = data.name;",
                            "line": 16
                        },
                        {
                            "code": "const ticker = data.ticker;",
                            "line": 17
                        }
                    ]
                },
                {
                    "summaryComponent": "Defines a formatDateString helper to convert date strings to month abbreviations",
                    "codeSegments": [
                        {
                            "code": "const formatDateString = (date) => {",
                            "line": 19
                        },
                        {
                            "code": "const monthAbbr = [",
                            "line": 20
                        },
                        {
                            "code": "return monthAbbr[parseInt(month, 10) - 1];",
                            "line": 36
                        }
                    ]
                },
                {
                    "summaryComponent": "This function is now used to format X-axis labels",
                    "codeSegments": [
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                            "line": 54
                        }
                    ]
                },
                {
                    "summaryComponent": "Transforms raw stock data into an array of objects with date and closing price for charting",
                    "codeSegments": [
                        {
                            "code": "const chartData = data.data.map((item) => ({",
                            "line": 39
                        },
                        {
                            "code": "date: item.date,",
                            "line": 40
                        },
                        {
                            "code": "price: item.close,",
                            "line": 41
                        }
                    ]
                },
                {
                    "summaryComponent": "Renders a styled container with the company name and ticker",
                    "codeSegments": [
                        {
                            "code": "<div style={{ marginTop: \"2rem\" }}>",
                            "line": 45
                        },
                        {
                            "code": "<h3>",
                            "line": 46
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 47
                        }
                    ]
                },
                {
                    "summaryComponent": "Uses Recharts components to display a responsive line chart",
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 49
                        },
                        {
                            "code": "<LineChart",
                            "line": 50
                        }
                    ]
                },
                {
                    "summaryComponent": "Includes X and Y axes (with the X-axis now using the custom date formatter), tooltip, legend, and a monotone line for price",
                    "codeSegments": [
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                            "line": 54
                        },
                        {
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                            "line": 55
                        },
                        {
                            "code": "<Tooltip />",
                            "line": 56
                        },
                        {
                            "code": "<Legend />",
                            "line": 57
                        },
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 58
                        }
                    ]
                }
            ],
            "summary": "• Implements a StockChart React component for visualizing stock prices\n• Checks for valid input data before rendering\n  ◦ Ensures data, data.data, and data.data.length are present\n• Extracts company name and ticker symbol from props\n• Defines a formatDateString helper to convert date strings to month abbreviations\n  ◦ This function is now used to format X-axis labels\n• Transforms raw stock data into an array of objects with date and closing price for charting\n• Renders a styled container with the company name and ticker\n• Uses Recharts components to display a responsive line chart\n  ◦ Includes X and Y axes (with the X-axis now using the custom date formatter), tooltip, legend, and a monotone line for price\n  ◦ The line is styled with a specific color and has no dots\n• Only renders the chart if valid data is available"
        },
        "id": "rUok1f9Uf9NsV7gQM66T"
    },
    {
        "event": "autotransit_section",
        "timestamp": "2025-08-17 11:18:38.000",
        "source": "frontend",
        "data": {
            "after_section_id": "693a53bd-a203-47eb-bd24-452086745ee5",
            "before_section_id": "151b76da-c505-4d8d-b495-0d8e281160dc"
        },
        "id": "wEpdYntHSuFMOsELG46c"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:18:42.000",
        "source": "frontend",
        "data": {
            "section_id": "693a53bd-a203-47eb-bd24-452086745ee5",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "dj87lYIXD7safxwZn0cE"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:18:42.000",
        "source": "frontend",
        "data": {
            "section_id": "693a53bd-a203-47eb-bd24-452086745ee5",
            "structured_type": "unstructured",
            "mapping_index": 0,
            "detail_level": "medium"
        },
        "id": "pbMYpV5AvKZzsnqnVY98"
    },
    {
        "event": "toggle_section",
        "timestamp": "2025-08-17 11:18:43.000",
        "source": "frontend",
        "data": {
            "after_section_id": null,
            "before_section_id": "693a53bd-a203-47eb-bd24-452086745ee5"
        },
        "id": "uxgcnc2HE9xKlMmsL5dV"
    },
    {
        "event": "toggle_section",
        "timestamp": "2025-08-17 11:18:47.000",
        "source": "frontend",
        "data": {
            "after_section_id": "693a53bd-a203-47eb-bd24-452086745ee5",
            "before_section_id": null
        },
        "id": "MxC1ClJGLkDtSBpMacpw"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:18:48.000",
        "source": "frontend",
        "data": {
            "section_id": "693a53bd-a203-47eb-bd24-452086745ee5",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "2iWII9zA5aqo1iMPlZUy"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:18:48.000",
        "source": "frontend",
        "data": {
            "section_id": "693a53bd-a203-47eb-bd24-452086745ee5",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "2thmUTNFyBelnuimNkno"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:18:48.000",
        "source": "frontend",
        "data": {
            "section_id": "693a53bd-a203-47eb-bd24-452086745ee5",
            "structured_type": "unstructured",
            "mapping_index": 3,
            "detail_level": "medium"
        },
        "id": "4J43vRATO580lkbPPAfy"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:18:48.000",
        "source": "frontend",
        "data": {
            "section_id": "693a53bd-a203-47eb-bd24-452086745ee5",
            "structured_type": "unstructured",
            "mapping_index": 5,
            "detail_level": "medium"
        },
        "id": "8LbnRQ6Rv8ra3BZ2IbWU"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:18:48.000",
        "source": "frontend",
        "data": {
            "section_id": "693a53bd-a203-47eb-bd24-452086745ee5",
            "structured_type": "unstructured",
            "mapping_index": 6,
            "detail_level": "medium"
        },
        "id": "DzxBIiVMIk2caZq0wNFH"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:18:48.000",
        "source": "frontend",
        "data": {
            "section_id": "693a53bd-a203-47eb-bd24-452086745ee5",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "HCsRdsfCI06ODaA4LaA3"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:18:48.000",
        "source": "frontend",
        "data": {
            "section_id": "693a53bd-a203-47eb-bd24-452086745ee5",
            "structured_type": "unstructured",
            "mapping_index": 0,
            "detail_level": "medium"
        },
        "id": "O66Xw9teGcSKBgT3V7Nf"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:18:48.000",
        "source": "frontend",
        "data": {
            "section_id": "693a53bd-a203-47eb-bd24-452086745ee5",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "SH7e5KVv3wwPavfBUwAm"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:18:48.000",
        "source": "frontend",
        "data": {
            "section_id": "693a53bd-a203-47eb-bd24-452086745ee5",
            "structured_type": "unstructured",
            "mapping_index": 8,
            "detail_level": "medium"
        },
        "id": "WTvw6hweaGTzFinAoiPV"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:18:48.000",
        "source": "frontend",
        "data": {
            "section_id": "693a53bd-a203-47eb-bd24-452086745ee5",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "XD7Tn9kaIcAkzuVpOrWF"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:18:48.000",
        "source": "frontend",
        "data": {
            "section_id": "693a53bd-a203-47eb-bd24-452086745ee5",
            "structured_type": "unstructured",
            "mapping_index": 6,
            "detail_level": "medium"
        },
        "id": "YhgS735fQ8q2djbaSEDU"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:18:48.000",
        "source": "frontend",
        "data": {
            "section_id": "693a53bd-a203-47eb-bd24-452086745ee5",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "b1NNEP3pTM14p2vr2s3x"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:18:48.000",
        "source": "frontend",
        "data": {
            "section_id": "693a53bd-a203-47eb-bd24-452086745ee5",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "b2gk4AyIDpu9pCPrcQYH"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:18:48.000",
        "source": "frontend",
        "data": {
            "section_id": "693a53bd-a203-47eb-bd24-452086745ee5",
            "structured_type": "unstructured",
            "mapping_index": 6,
            "detail_level": "medium"
        },
        "id": "cqBj0YdxcwOnZEMHmvRR"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:18:48.000",
        "source": "frontend",
        "data": {
            "section_id": "693a53bd-a203-47eb-bd24-452086745ee5",
            "structured_type": "unstructured",
            "mapping_index": 8,
            "detail_level": "medium"
        },
        "id": "f3NjVxisplFwECmAAfWK"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:18:48.000",
        "source": "frontend",
        "data": {
            "section_id": "693a53bd-a203-47eb-bd24-452086745ee5",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "zU3SN8pGvyuaxnK52DKy"
    },
    {
        "event": "toggle_section",
        "timestamp": "2025-08-17 11:18:49.000",
        "source": "frontend",
        "data": {
            "after_section_id": "151b76da-c505-4d8d-b495-0d8e281160dc",
            "before_section_id": "693a53bd-a203-47eb-bd24-452086745ee5"
        },
        "id": "vEGzorW1LSd5oPK1x1cy"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:18:56.000",
        "source": "frontend",
        "data": {
            "section_id": "151b76da-c505-4d8d-b495-0d8e281160dc",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "LENxs5G7Kq7tJsQvWLIM"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:18:56.000",
        "source": "frontend",
        "data": {
            "section_id": "151b76da-c505-4d8d-b495-0d8e281160dc",
            "structured_type": "unstructured",
            "mapping_index": 7,
            "detail_level": "medium"
        },
        "id": "pEfJqO8duHvd4PoVdxD7"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:18:56.000",
        "source": "frontend",
        "data": {
            "section_id": "151b76da-c505-4d8d-b495-0d8e281160dc",
            "structured_type": "unstructured",
            "mapping_index": 6,
            "detail_level": "medium"
        },
        "id": "rq5bd0AD7aLPasamaTjV"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:18:57.000",
        "source": "frontend",
        "data": {
            "section_id": "151b76da-c505-4d8d-b495-0d8e281160dc",
            "structured_type": "unstructured",
            "mapping_index": 3,
            "detail_level": "medium"
        },
        "id": "2IHbzsaOQmBCWSiBzIZS"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:18:57.000",
        "source": "frontend",
        "data": {
            "section_id": "151b76da-c505-4d8d-b495-0d8e281160dc",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "8kS4CqTChyKpDR12q9YP"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:18:57.000",
        "source": "frontend",
        "data": {
            "section_id": "151b76da-c505-4d8d-b495-0d8e281160dc",
            "structured_type": "unstructured",
            "mapping_index": 1,
            "detail_level": "medium"
        },
        "id": "Cz0lmvjpoHzMOhmeSPnR"
    },
    {
        "event": "toggle_section",
        "timestamp": "2025-08-17 11:18:57.000",
        "source": "frontend",
        "data": {
            "after_section_id": null,
            "before_section_id": "151b76da-c505-4d8d-b495-0d8e281160dc"
        },
        "id": "LO3rpkXtlSjeBmF8YpxX"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:18:57.000",
        "source": "frontend",
        "data": {
            "section_id": "151b76da-c505-4d8d-b495-0d8e281160dc",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "Oku1oBFgGcECKW6tCWuO"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:18:57.000",
        "source": "frontend",
        "data": {
            "section_id": "151b76da-c505-4d8d-b495-0d8e281160dc",
            "structured_type": "unstructured",
            "mapping_index": 4,
            "detail_level": "medium"
        },
        "id": "PxmQs1NqyI6K2vWR6Hpi"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:18:57.000",
        "source": "frontend",
        "data": {
            "section_id": "151b76da-c505-4d8d-b495-0d8e281160dc",
            "structured_type": "unstructured",
            "mapping_index": 1,
            "detail_level": "medium"
        },
        "id": "a2MklBDe0mxL0sbTW1Aw"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:18:57.000",
        "source": "frontend",
        "data": {
            "section_id": "151b76da-c505-4d8d-b495-0d8e281160dc",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "kAfcFJQM5z78ObhX1qqM"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:18:57.000",
        "source": "frontend",
        "data": {
            "section_id": "151b76da-c505-4d8d-b495-0d8e281160dc",
            "structured_type": "unstructured",
            "mapping_index": 3,
            "detail_level": "medium"
        },
        "id": "kCyBBGMCPLZiWrzS5nQw"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:18:57.000",
        "source": "frontend",
        "data": {
            "section_id": "151b76da-c505-4d8d-b495-0d8e281160dc",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "mCIgxJaivN93m8k0Wfki"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:18:57.000",
        "source": "frontend",
        "data": {
            "section_id": "151b76da-c505-4d8d-b495-0d8e281160dc",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "mHgCVi9XDYONtc7TzM8o"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:18:57.000",
        "source": "frontend",
        "data": {
            "section_id": "151b76da-c505-4d8d-b495-0d8e281160dc",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "nJE94hkbwdaPS0Z6wFwk"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:18:57.000",
        "source": "frontend",
        "data": {
            "section_id": "151b76da-c505-4d8d-b495-0d8e281160dc",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "sMvQ7hNZ0SxvrfshX6SM"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:18:57.000",
        "source": "frontend",
        "data": {
            "section_id": "151b76da-c505-4d8d-b495-0d8e281160dc",
            "structured_type": "unstructured",
            "mapping_index": 6,
            "detail_level": "medium"
        },
        "id": "zpDMihZriGoZ8ROPmwLK"
    },
    {
        "event": "click_summarize_code",
        "timestamp": "2025-08-17 11:19:37.000",
        "source": "frontend",
        "data": {},
        "id": "TTMZiuNvDBwPFdRPuBGG"
    },
    {
        "event": "summarize_selected_code",
        "timestamp": "2025-08-17 11:19:43.000",
        "source": "backend",
        "data": {
            "selected_code": "app.get(\"/api/stock/:symbol\", async (req, res) => {\n  try {\n    const symbol = req.params.symbol.toUpperCase();\n    const data = await yahooFinance.chart(symbol, {\n      period1: \"2024-01-01\",\n      interval: \"1d\",\n    });\n    const quotes = data.quotes;\n\n    const companyName = data.meta?.shortName || symbol;\n\n    const response = {\n      ticker: symbol,\n      name: companyName,\n      data: quotes.map((q) => ({\n        date: q.date,\n        close: q.close,\n        volume: q.volume,\n      })),\n    };\n\n    console.log(response);\n    res.json(response);\n  } catch (err) {\n    console.error(err);\n    res.status(500).send(\"Error fetching stock data\");\n  }\n});",
            "summary": {
                "high_structured": "• Defines a GET endpoint at '/api/stock/:symbol' for fetching stock data\n• Extracts the stock symbol from the request parameters and converts it to uppercase\n• Fetches daily stock chart data from Yahoo Finance starting from 2024-01-01\n• Processes the received data:\n  ◦ Retrieves the company's short name if available, otherwise uses the symbol\n  ◦ Maps each quote to an object containing date, close price, and volume\n• Constructs a response object with:\n  ◦ ticker (symbol), name (company name), and data (array of mapped quotes)\n• Logs the response object to the console\n• Sends the response as JSON to the client\n• Handles errors by logging them and returning a 500 status with an error message",
                "low_structured": "• Sets up an API endpoint for stock data\n• Fetches and returns data for a requested stock symbol",
                "title": "Express Route for Fetching Stock Data from Yahoo Finance",
                "medium_structured": "• Handles GET requests at '/api/stock/:symbol'\n• Fetches daily stock chart data from Yahoo Finance starting from 2024-01-01\n• Formats the response to include:\n  ◦ Ticker symbol and company name\n  ◦ An array of objects with date, close, and volume\n• Returns the formatted data as JSON or an error message if fetching fails",
                "medium_unstructured": "This Express route handles GET requests to '/api/stock/:symbol' by fetching historical stock data for the specified symbol from Yahoo Finance. It formats the data to include the ticker, company name, and an array of date, close, and volume values, then returns this as JSON. If an error occurs, it responds with a 500 status and an error message.",
                "high_unstructured": "This Express route listens for GET requests at '/api/stock/:symbol', where it extracts the stock symbol from the URL, converts it to uppercase, and queries Yahoo Finance for daily chart data starting from January 1, 2024. It processes the returned data to extract the company's short name (if available), and maps the quotes to an array containing the date, closing price, and volume for each entry. The response is structured as a JSON object with the ticker, company name, and the processed data array, and is logged to the console before being sent to the client. In case of any errors during the fetch or processing, the route logs the error and responds with a 500 status and an error message.",
                "low_unstructured": "This code defines an Express route that returns stock data for a given symbol."
            }
        },
        "id": "YkVGNN7ZGCVCyQ94hgLG"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-17 11:19:44.000",
        "source": "backend",
        "data": {
            "code": "15: app.get(\"/api/stock/:symbol\", async (req, res) => {\n16:   try {\n17:     const symbol = req.params.symbol.toUpperCase();\n18:     const data = await yahooFinance.chart(symbol, {\n19:       period1: \"2024-01-01\",\n20:       interval: \"1d\",\n21:     });\n22:     const quotes = data.quotes;\n23: \n24:     const companyName = data.meta?.shortName || symbol;\n25: \n26:     const response = {\n27:       ticker: symbol,\n28:       name: companyName,\n29:       data: quotes.map((q) => ({\n30:         date: q.date,\n31:         close: q.close,\n32:         volume: q.volume,\n33:       })),\n34:     };\n35: \n36:     console.log(response);\n37:     res.json(response);\n38:   } catch (err) {\n39:     console.error(err);\n40:     res.status(500).send(\"Error fetching stock data\");\n41:   }\n42: });",
            "mapping": [
                {
                    "summaryComponent": "defines an Express route",
                    "codeSegments": [
                        {
                            "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {",
                            "line": 15
                        }
                    ]
                },
                {
                    "summaryComponent": "returns stock data",
                    "codeSegments": [
                        {
                            "code": "res.json(response);",
                            "line": 37
                        }
                    ]
                },
                {
                    "summaryComponent": "for a given symbol",
                    "codeSegments": [
                        {
                            "code": "const symbol = req.params.symbol.toUpperCase();",
                            "line": 17
                        }
                    ]
                }
            ],
            "summary": "This code defines an Express route that returns stock data for a given symbol."
        },
        "id": "EnEoW1t7mme6Gm4wd1Nz"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-17 11:19:44.000",
        "source": "backend",
        "data": {
            "code": "15: app.get(\"/api/stock/:symbol\", async (req, res) => {\n16:   try {\n17:     const symbol = req.params.symbol.toUpperCase();\n18:     const data = await yahooFinance.chart(symbol, {\n19:       period1: \"2024-01-01\",\n20:       interval: \"1d\",\n21:     });\n22:     const quotes = data.quotes;\n23: \n24:     const companyName = data.meta?.shortName || symbol;\n25: \n26:     const response = {\n27:       ticker: symbol,\n28:       name: companyName,\n29:       data: quotes.map((q) => ({\n30:         date: q.date,\n31:         close: q.close,\n32:         volume: q.volume,\n33:       })),\n34:     };\n35: \n36:     console.log(response);\n37:     res.json(response);\n38:   } catch (err) {\n39:     console.error(err);\n40:     res.status(500).send(\"Error fetching stock data\");\n41:   }\n42: });",
            "mapping": [
                {
                    "summaryComponent": "Sets up an API endpoint for stock data",
                    "codeSegments": [
                        {
                            "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {",
                            "line": 15
                        }
                    ]
                },
                {
                    "summaryComponent": "Fetches and returns data for a requested stock symbol",
                    "codeSegments": [
                        {
                            "code": "const symbol = req.params.symbol.toUpperCase();",
                            "line": 17
                        },
                        {
                            "code": "const data = await yahooFinance.chart(symbol, {",
                            "line": 18
                        },
                        {
                            "code": "res.json(response);",
                            "line": 37
                        }
                    ]
                }
            ],
            "summary": "• Sets up an API endpoint for stock data\n• Fetches and returns data for a requested stock symbol"
        },
        "id": "fwRPg3pLRrQtcHPQLf9I"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-17 11:19:45.000",
        "source": "backend",
        "data": {
            "code": "15: app.get(\"/api/stock/:symbol\", async (req, res) => {\n16:   try {\n17:     const symbol = req.params.symbol.toUpperCase();\n18:     const data = await yahooFinance.chart(symbol, {\n19:       period1: \"2024-01-01\",\n20:       interval: \"1d\",\n21:     });\n22:     const quotes = data.quotes;\n23: \n24:     const companyName = data.meta?.shortName || symbol;\n25: \n26:     const response = {\n27:       ticker: symbol,\n28:       name: companyName,\n29:       data: quotes.map((q) => ({\n30:         date: q.date,\n31:         close: q.close,\n32:         volume: q.volume,\n33:       })),\n34:     };\n35: \n36:     console.log(response);\n37:     res.json(response);\n38:   } catch (err) {\n39:     console.error(err);\n40:     res.status(500).send(\"Error fetching stock data\");\n41:   }\n42: });",
            "mapping": [
                {
                    "summaryComponent": "This Express route handles GET requests to '/api/stock/:symbol'",
                    "codeSegments": [
                        {
                            "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {",
                            "line": 15
                        }
                    ]
                },
                {
                    "summaryComponent": "by fetching historical stock data for the specified symbol from Yahoo Finance",
                    "codeSegments": [
                        {
                            "code": "const symbol = req.params.symbol.toUpperCase();",
                            "line": 17
                        },
                        {
                            "code": "const data = await yahooFinance.chart(symbol, {",
                            "line": 18
                        }
                    ]
                },
                {
                    "summaryComponent": "It formats the data to include the ticker, company name, and an array of date, close, and volume values",
                    "codeSegments": [
                        {
                            "code": "const response = {",
                            "line": 26
                        },
                        {
                            "code": "ticker: symbol,",
                            "line": 27
                        },
                        {
                            "code": "name: companyName,",
                            "line": 28
                        },
                        {
                            "code": "data: quotes.map((q) => ({",
                            "line": 29
                        },
                        {
                            "code": "date: q.date,",
                            "line": 30
                        },
                        {
                            "code": "close: q.close,",
                            "line": 31
                        },
                        {
                            "code": "volume: q.volume,",
                            "line": 32
                        }
                    ]
                },
                {
                    "summaryComponent": "then returns this as JSON",
                    "codeSegments": [
                        {
                            "code": "res.json(response);",
                            "line": 37
                        }
                    ]
                },
                {
                    "summaryComponent": "If an error occurs",
                    "codeSegments": [
                        {
                            "code": "catch (err) {",
                            "line": 38
                        }
                    ]
                },
                {
                    "summaryComponent": "it responds with a 500 status and an error message",
                    "codeSegments": [
                        {
                            "code": "res.status(500).send(\"Error fetching stock data\");",
                            "line": 40
                        }
                    ]
                }
            ],
            "summary": "This Express route handles GET requests to '/api/stock/:symbol' by fetching historical stock data for the specified symbol from Yahoo Finance. It formats the data to include the ticker, company name, and an array of date, close, and volume values, then returns this as JSON. If an error occurs, it responds with a 500 status and an error message."
        },
        "id": "4cY3lFuT5w75F3DpEj1e"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-17 11:19:45.000",
        "source": "backend",
        "data": {
            "code": "15: app.get(\"/api/stock/:symbol\", async (req, res) => {\n16:   try {\n17:     const symbol = req.params.symbol.toUpperCase();\n18:     const data = await yahooFinance.chart(symbol, {\n19:       period1: \"2024-01-01\",\n20:       interval: \"1d\",\n21:     });\n22:     const quotes = data.quotes;\n23: \n24:     const companyName = data.meta?.shortName || symbol;\n25: \n26:     const response = {\n27:       ticker: symbol,\n28:       name: companyName,\n29:       data: quotes.map((q) => ({\n30:         date: q.date,\n31:         close: q.close,\n32:         volume: q.volume,\n33:       })),\n34:     };\n35: \n36:     console.log(response);\n37:     res.json(response);\n38:   } catch (err) {\n39:     console.error(err);\n40:     res.status(500).send(\"Error fetching stock data\");\n41:   }\n42: });",
            "mapping": [
                {
                    "summaryComponent": "Handles GET requests at '/api/stock/:symbol'",
                    "codeSegments": [
                        {
                            "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {",
                            "line": 15
                        }
                    ]
                },
                {
                    "summaryComponent": "Fetches daily stock chart data from Yahoo Finance starting from 2024-01-01",
                    "codeSegments": [
                        {
                            "code": "const data = await yahooFinance.chart(symbol, {",
                            "line": 18
                        },
                        {
                            "code": "period1: \"2024-01-01\",",
                            "line": 19
                        },
                        {
                            "code": "interval: \"1d\",",
                            "line": 20
                        }
                    ]
                },
                {
                    "summaryComponent": "Formats the response to include:",
                    "codeSegments": [
                        {
                            "code": "const response = {",
                            "line": 26
                        }
                    ]
                },
                {
                    "summaryComponent": "Ticker symbol and company name",
                    "codeSegments": [
                        {
                            "code": "ticker: symbol,",
                            "line": 27
                        },
                        {
                            "code": "name: companyName,",
                            "line": 28
                        }
                    ]
                },
                {
                    "summaryComponent": "An array of objects with date, close, and volume",
                    "codeSegments": [
                        {
                            "code": "data: quotes.map((q) => ({",
                            "line": 29
                        },
                        {
                            "code": "date: q.date,",
                            "line": 30
                        },
                        {
                            "code": "close: q.close,",
                            "line": 31
                        },
                        {
                            "code": "volume: q.volume,",
                            "line": 32
                        }
                    ]
                },
                {
                    "summaryComponent": "Returns the formatted data as JSON or an error message if fetching fails",
                    "codeSegments": [
                        {
                            "code": "res.json(response);",
                            "line": 37
                        },
                        {
                            "code": "res.status(500).send(\"Error fetching stock data\");",
                            "line": 40
                        }
                    ]
                }
            ],
            "summary": "• Handles GET requests at '/api/stock/:symbol'\n• Fetches daily stock chart data from Yahoo Finance starting from 2024-01-01\n• Formats the response to include:\n  ◦ Ticker symbol and company name\n  ◦ An array of objects with date, close, and volume\n• Returns the formatted data as JSON or an error message if fetching fails"
        },
        "id": "OwxBBzYKBme2XIGxlTDs"
    },
    {
        "event": "create_new_section",
        "timestamp": "2025-08-17 11:19:47.000",
        "source": "frontend",
        "data": {
            "section_id": "a8e7f0fb-5377-4fc1-b093-6cd896de1048",
            "section_data": {
                "metadata": {
                    "id": "a8e7f0fb-5377-4fc1-b093-6cd896de1048",
                    "fullPath": "/project/workspace/server/index.js",
                    "offset": 304,
                    "filename": "index.js",
                    "originalCode": "app.get(\"/api/stock/:symbol\", async (req, res) => {\n  try {\n    const symbol = req.params.symbol.toUpperCase();\n    const data = await yahooFinance.chart(symbol, {\n      period1: \"2024-01-01\",\n      interval: \"1d\",\n    });\n    const quotes = data.quotes;\n\n    const companyName = data.meta?.shortName || symbol;\n\n    const response = {\n      ticker: symbol,\n      name: companyName,\n      data: quotes.map((q) => ({\n        date: q.date,\n        close: q.close,\n        volume: q.volume,\n      })),\n    };\n\n    console.log(response);\n    res.json(response);\n  } catch (err) {\n    console.error(err);\n    res.status(500).send(\"Error fetching stock data\");\n  }\n});"
                },
                "summaryMappings": {
                    "high_structured": [
                        {
                            "summaryComponent": "Defines a GET endpoint at '/api/stock/:symbol' for fetching stock data",
                            "codeSegments": [
                                {
                                    "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {",
                                    "line": 15
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Extracts the stock symbol from the request parameters and converts it to uppercase",
                            "codeSegments": [
                                {
                                    "code": "const symbol = req.params.symbol.toUpperCase();",
                                    "line": 17
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Fetches daily stock chart data from Yahoo Finance starting from 2024-01-01",
                            "codeSegments": [
                                {
                                    "code": "const data = await yahooFinance.chart(symbol, {",
                                    "line": 18
                                },
                                {
                                    "code": "period1: \"2024-01-01\",",
                                    "line": 19
                                },
                                {
                                    "code": "interval: \"1d\",",
                                    "line": 20
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Retrieves the company's short name if available, otherwise uses the symbol",
                            "codeSegments": [
                                {
                                    "code": "const companyName = data.meta?.shortName || symbol;",
                                    "line": 24
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Maps each quote to an object containing date, close price, and volume",
                            "codeSegments": [
                                {
                                    "code": "data: quotes.map((q) => ({",
                                    "line": 29
                                },
                                {
                                    "code": "date: q.date,",
                                    "line": 30
                                },
                                {
                                    "code": "close: q.close,",
                                    "line": 31
                                },
                                {
                                    "code": "volume: q.volume,",
                                    "line": 32
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Constructs a response object with:",
                            "codeSegments": [
                                {
                                    "code": "const response = {",
                                    "line": 26
                                }
                            ]
                        },
                        {
                            "summaryComponent": "ticker (symbol), name (company name), and data (array of mapped quotes)",
                            "codeSegments": [
                                {
                                    "code": "ticker: symbol,",
                                    "line": 27
                                },
                                {
                                    "code": "name: companyName,",
                                    "line": 28
                                },
                                {
                                    "code": "data: quotes.map((q) => ({",
                                    "line": 29
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Logs the response object to the console",
                            "codeSegments": [
                                {
                                    "code": "console.log(response);",
                                    "line": 36
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Sends the response as JSON to the client",
                            "codeSegments": [
                                {
                                    "code": "res.json(response);",
                                    "line": 37
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Handles errors by logging them and returning a 500 status with an error message",
                            "codeSegments": [
                                {
                                    "code": "console.error(err);",
                                    "line": 39
                                },
                                {
                                    "code": "res.status(500).send(\"Error fetching stock data\");",
                                    "line": 40
                                }
                            ]
                        }
                    ],
                    "low_structured": [
                        {
                            "summaryComponent": "Sets up an API endpoint for stock data",
                            "codeSegments": [
                                {
                                    "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {",
                                    "line": 15
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Fetches and returns data for a requested stock symbol",
                            "codeSegments": [
                                {
                                    "code": "const symbol = req.params.symbol.toUpperCase();",
                                    "line": 17
                                },
                                {
                                    "code": "const data = await yahooFinance.chart(symbol, {",
                                    "line": 18
                                },
                                {
                                    "code": "res.json(response);",
                                    "line": 37
                                }
                            ]
                        }
                    ],
                    "medium_structured": [
                        {
                            "summaryComponent": "Handles GET requests at '/api/stock/:symbol'",
                            "codeSegments": [
                                {
                                    "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {",
                                    "line": 15
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Fetches daily stock chart data from Yahoo Finance starting from 2024-01-01",
                            "codeSegments": [
                                {
                                    "code": "const data = await yahooFinance.chart(symbol, {",
                                    "line": 18
                                },
                                {
                                    "code": "period1: \"2024-01-01\",",
                                    "line": 19
                                },
                                {
                                    "code": "interval: \"1d\",",
                                    "line": 20
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Formats the response to include:",
                            "codeSegments": [
                                {
                                    "code": "const response = {",
                                    "line": 26
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Ticker symbol and company name",
                            "codeSegments": [
                                {
                                    "code": "ticker: symbol,",
                                    "line": 27
                                },
                                {
                                    "code": "name: companyName,",
                                    "line": 28
                                }
                            ]
                        },
                        {
                            "summaryComponent": "An array of objects with date, close, and volume",
                            "codeSegments": [
                                {
                                    "code": "data: quotes.map((q) => ({",
                                    "line": 29
                                },
                                {
                                    "code": "date: q.date,",
                                    "line": 30
                                },
                                {
                                    "code": "close: q.close,",
                                    "line": 31
                                },
                                {
                                    "code": "volume: q.volume,",
                                    "line": 32
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Returns the formatted data as JSON or an error message if fetching fails",
                            "codeSegments": [
                                {
                                    "code": "res.json(response);",
                                    "line": 37
                                },
                                {
                                    "code": "res.status(500).send(\"Error fetching stock data\");",
                                    "line": 40
                                }
                            ]
                        }
                    ],
                    "medium_unstructured": [
                        {
                            "summaryComponent": "This Express route handles GET requests to '/api/stock/:symbol'",
                            "codeSegments": [
                                {
                                    "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {",
                                    "line": 15
                                }
                            ]
                        },
                        {
                            "summaryComponent": "by fetching historical stock data for the specified symbol from Yahoo Finance",
                            "codeSegments": [
                                {
                                    "code": "const symbol = req.params.symbol.toUpperCase();",
                                    "line": 17
                                },
                                {
                                    "code": "const data = await yahooFinance.chart(symbol, {",
                                    "line": 18
                                }
                            ]
                        },
                        {
                            "summaryComponent": "It formats the data to include the ticker, company name, and an array of date, close, and volume values",
                            "codeSegments": [
                                {
                                    "code": "const response = {",
                                    "line": 26
                                },
                                {
                                    "code": "ticker: symbol,",
                                    "line": 27
                                },
                                {
                                    "code": "name: companyName,",
                                    "line": 28
                                },
                                {
                                    "code": "data: quotes.map((q) => ({",
                                    "line": 29
                                },
                                {
                                    "code": "date: q.date,",
                                    "line": 30
                                },
                                {
                                    "code": "close: q.close,",
                                    "line": 31
                                },
                                {
                                    "code": "volume: q.volume,",
                                    "line": 32
                                }
                            ]
                        },
                        {
                            "summaryComponent": "then returns this as JSON",
                            "codeSegments": [
                                {
                                    "code": "res.json(response);",
                                    "line": 37
                                }
                            ]
                        },
                        {
                            "summaryComponent": "If an error occurs",
                            "codeSegments": [
                                {
                                    "code": "catch (err) {",
                                    "line": 38
                                }
                            ]
                        },
                        {
                            "summaryComponent": "it responds with a 500 status and an error message",
                            "codeSegments": [
                                {
                                    "code": "res.status(500).send(\"Error fetching stock data\");",
                                    "line": 40
                                }
                            ]
                        }
                    ],
                    "high_unstructured": [
                        {
                            "summaryComponent": "This Express route listens for GET requests at '/api/stock/:symbol'",
                            "codeSegments": [
                                {
                                    "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {",
                                    "line": 15
                                }
                            ]
                        },
                        {
                            "summaryComponent": "extracts the stock symbol from the URL",
                            "codeSegments": [
                                {
                                    "code": "const symbol = req.params.symbol.toUpperCase();",
                                    "line": 17
                                }
                            ]
                        },
                        {
                            "summaryComponent": "converts it to uppercase",
                            "codeSegments": [
                                {
                                    "code": "toUpperCase()",
                                    "line": 17
                                }
                            ]
                        },
                        {
                            "summaryComponent": "queries Yahoo Finance for daily chart data starting from January 1, 2024",
                            "codeSegments": [
                                {
                                    "code": "const data = await yahooFinance.chart(symbol, {",
                                    "line": 18
                                },
                                {
                                    "code": "period1: \"2024-01-01\",",
                                    "line": 19
                                },
                                {
                                    "code": "interval: \"1d\",",
                                    "line": 20
                                }
                            ]
                        },
                        {
                            "summaryComponent": "processes the returned data to extract the company's short name (if available)",
                            "codeSegments": [
                                {
                                    "code": "const companyName = data.meta?.shortName || symbol;",
                                    "line": 24
                                }
                            ]
                        },
                        {
                            "summaryComponent": "maps the quotes to an array containing the date, closing price, and volume for each entry",
                            "codeSegments": [
                                {
                                    "code": "data: quotes.map((q) => ({",
                                    "line": 29
                                },
                                {
                                    "code": "date: q.date,",
                                    "line": 30
                                },
                                {
                                    "code": "close: q.close,",
                                    "line": 31
                                },
                                {
                                    "code": "volume: q.volume,",
                                    "line": 32
                                }
                            ]
                        },
                        {
                            "summaryComponent": "The response is structured as a JSON object with the ticker, company name, and the processed data array",
                            "codeSegments": [
                                {
                                    "code": "const response = {",
                                    "line": 26
                                },
                                {
                                    "code": "ticker: symbol,",
                                    "line": 27
                                },
                                {
                                    "code": "name: companyName,",
                                    "line": 28
                                },
                                {
                                    "code": "data: quotes.map((q) => ({",
                                    "line": 29
                                }
                            ]
                        },
                        {
                            "summaryComponent": "logged to the console before being sent to the client",
                            "codeSegments": [
                                {
                                    "code": "console.log(response);",
                                    "line": 36
                                }
                            ]
                        },
                        {
                            "summaryComponent": "sent to the client",
                            "codeSegments": [
                                {
                                    "code": "res.json(response);",
                                    "line": 37
                                }
                            ]
                        },
                        {
                            "summaryComponent": "In case of any errors during the fetch or processing, the route logs the error and responds with a 500 status and an error message.",
                            "codeSegments": [
                                {
                                    "code": "catch (err) {",
                                    "line": 38
                                },
                                {
                                    "code": "console.error(err);",
                                    "line": 39
                                },
                                {
                                    "code": "res.status(500).send(\"Error fetching stock data\");",
                                    "line": 40
                                }
                            ]
                        }
                    ],
                    "low_unstructured": [
                        {
                            "summaryComponent": "defines an Express route",
                            "codeSegments": [
                                {
                                    "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {",
                                    "line": 15
                                }
                            ]
                        },
                        {
                            "summaryComponent": "returns stock data",
                            "codeSegments": [
                                {
                                    "code": "res.json(response);",
                                    "line": 37
                                }
                            ]
                        },
                        {
                            "summaryComponent": "for a given symbol",
                            "codeSegments": [
                                {
                                    "code": "const symbol = req.params.symbol.toUpperCase();",
                                    "line": 17
                                }
                            ]
                        }
                    ]
                },
                "summaryData": {
                    "high_structured": "• Defines a GET endpoint at '/api/stock/:symbol' for fetching stock data\n• Extracts the stock symbol from the request parameters and converts it to uppercase\n• Fetches daily stock chart data from Yahoo Finance starting from 2024-01-01\n• Processes the received data:\n  ◦ Retrieves the company's short name if available, otherwise uses the symbol\n  ◦ Maps each quote to an object containing date, close price, and volume\n• Constructs a response object with:\n  ◦ ticker (symbol), name (company name), and data (array of mapped quotes)\n• Logs the response object to the console\n• Sends the response as JSON to the client\n• Handles errors by logging them and returning a 500 status with an error message",
                    "low_structured": "• Sets up an API endpoint for stock data\n• Fetches and returns data for a requested stock symbol",
                    "title": "Express Route for Fetching Stock Data from Yahoo Finance",
                    "medium_structured": "• Handles GET requests at '/api/stock/:symbol'\n• Fetches daily stock chart data from Yahoo Finance starting from 2024-01-01\n• Formats the response to include:\n  ◦ Ticker symbol and company name\n  ◦ An array of objects with date, close, and volume\n• Returns the formatted data as JSON or an error message if fetching fails",
                    "medium_unstructured": "This Express route handles GET requests to '/api/stock/:symbol' by fetching historical stock data for the specified symbol from Yahoo Finance. It formats the data to include the ticker, company name, and an array of date, close, and volume values, then returns this as JSON. If an error occurs, it responds with a 500 status and an error message.",
                    "high_unstructured": "This Express route listens for GET requests at '/api/stock/:symbol', where it extracts the stock symbol from the URL, converts it to uppercase, and queries Yahoo Finance for daily chart data starting from January 1, 2024. It processes the returned data to extract the company's short name (if available), and maps the quotes to an array containing the date, closing price, and volume for each entry. The response is structured as a JSON object with the ticker, company name, and the processed data array, and is logged to the console before being sent to the client. In case of any errors during the fetch or processing, the route logs the error and responds with a 500 status and an error message.",
                    "low_unstructured": "This code defines an Express route that returns stock data for a given symbol."
                },
                "lines": [
                    15,
                    42
                ],
                "selectedDetailLevel": "medium",
                "editPromptValue": "",
                "selectedStructured": "unstructured",
                "title": "Express Route for Fetching Stock Data from Yahoo Finance",
                "createdAt": 1755415187000,
                "editPromptDetailLevel": null,
                "editPromptStructured": null
            }
        },
        "id": "KWTiEbDkPbYYmjaZ138g"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-17 11:19:47.000",
        "source": "backend",
        "data": {
            "code": "15: app.get(\"/api/stock/:symbol\", async (req, res) => {\n16:   try {\n17:     const symbol = req.params.symbol.toUpperCase();\n18:     const data = await yahooFinance.chart(symbol, {\n19:       period1: \"2024-01-01\",\n20:       interval: \"1d\",\n21:     });\n22:     const quotes = data.quotes;\n23: \n24:     const companyName = data.meta?.shortName || symbol;\n25: \n26:     const response = {\n27:       ticker: symbol,\n28:       name: companyName,\n29:       data: quotes.map((q) => ({\n30:         date: q.date,\n31:         close: q.close,\n32:         volume: q.volume,\n33:       })),\n34:     };\n35: \n36:     console.log(response);\n37:     res.json(response);\n38:   } catch (err) {\n39:     console.error(err);\n40:     res.status(500).send(\"Error fetching stock data\");\n41:   }\n42: });",
            "mapping": [
                {
                    "summaryComponent": "Defines a GET endpoint at '/api/stock/:symbol' for fetching stock data",
                    "codeSegments": [
                        {
                            "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {",
                            "line": 15
                        }
                    ]
                },
                {
                    "summaryComponent": "Extracts the stock symbol from the request parameters and converts it to uppercase",
                    "codeSegments": [
                        {
                            "code": "const symbol = req.params.symbol.toUpperCase();",
                            "line": 17
                        }
                    ]
                },
                {
                    "summaryComponent": "Fetches daily stock chart data from Yahoo Finance starting from 2024-01-01",
                    "codeSegments": [
                        {
                            "code": "const data = await yahooFinance.chart(symbol, {",
                            "line": 18
                        },
                        {
                            "code": "period1: \"2024-01-01\",",
                            "line": 19
                        },
                        {
                            "code": "interval: \"1d\",",
                            "line": 20
                        }
                    ]
                },
                {
                    "summaryComponent": "Retrieves the company's short name if available, otherwise uses the symbol",
                    "codeSegments": [
                        {
                            "code": "const companyName = data.meta?.shortName || symbol;",
                            "line": 24
                        }
                    ]
                },
                {
                    "summaryComponent": "Maps each quote to an object containing date, close price, and volume",
                    "codeSegments": [
                        {
                            "code": "data: quotes.map((q) => ({",
                            "line": 29
                        },
                        {
                            "code": "date: q.date,",
                            "line": 30
                        },
                        {
                            "code": "close: q.close,",
                            "line": 31
                        },
                        {
                            "code": "volume: q.volume,",
                            "line": 32
                        }
                    ]
                },
                {
                    "summaryComponent": "Constructs a response object with:",
                    "codeSegments": [
                        {
                            "code": "const response = {",
                            "line": 26
                        }
                    ]
                },
                {
                    "summaryComponent": "ticker (symbol), name (company name), and data (array of mapped quotes)",
                    "codeSegments": [
                        {
                            "code": "ticker: symbol,",
                            "line": 27
                        },
                        {
                            "code": "name: companyName,",
                            "line": 28
                        },
                        {
                            "code": "data: quotes.map((q) => ({",
                            "line": 29
                        }
                    ]
                },
                {
                    "summaryComponent": "Logs the response object to the console",
                    "codeSegments": [
                        {
                            "code": "console.log(response);",
                            "line": 36
                        }
                    ]
                },
                {
                    "summaryComponent": "Sends the response as JSON to the client",
                    "codeSegments": [
                        {
                            "code": "res.json(response);",
                            "line": 37
                        }
                    ]
                },
                {
                    "summaryComponent": "Handles errors by logging them and returning a 500 status with an error message",
                    "codeSegments": [
                        {
                            "code": "console.error(err);",
                            "line": 39
                        },
                        {
                            "code": "res.status(500).send(\"Error fetching stock data\");",
                            "line": 40
                        }
                    ]
                }
            ],
            "summary": "• Defines a GET endpoint at '/api/stock/:symbol' for fetching stock data\n• Extracts the stock symbol from the request parameters and converts it to uppercase\n• Fetches daily stock chart data from Yahoo Finance starting from 2024-01-01\n• Processes the received data:\n  ◦ Retrieves the company's short name if available, otherwise uses the symbol\n  ◦ Maps each quote to an object containing date, close price, and volume\n• Constructs a response object with:\n  ◦ ticker (symbol), name (company name), and data (array of mapped quotes)\n• Logs the response object to the console\n• Sends the response as JSON to the client\n• Handles errors by logging them and returning a 500 status with an error message"
        },
        "id": "WaMin7NQoRyYUDGeyhi0"
    },
    {
        "event": "autotransit_section",
        "timestamp": "2025-08-17 11:19:47.000",
        "source": "frontend",
        "data": {
            "after_section_id": "a8e7f0fb-5377-4fc1-b093-6cd896de1048",
            "before_section_id": null
        },
        "id": "d0xbyO6q6XHyhIOU5fNc"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-17 11:19:47.000",
        "source": "backend",
        "data": {
            "code": "15: app.get(\"/api/stock/:symbol\", async (req, res) => {\n16:   try {\n17:     const symbol = req.params.symbol.toUpperCase();\n18:     const data = await yahooFinance.chart(symbol, {\n19:       period1: \"2024-01-01\",\n20:       interval: \"1d\",\n21:     });\n22:     const quotes = data.quotes;\n23: \n24:     const companyName = data.meta?.shortName || symbol;\n25: \n26:     const response = {\n27:       ticker: symbol,\n28:       name: companyName,\n29:       data: quotes.map((q) => ({\n30:         date: q.date,\n31:         close: q.close,\n32:         volume: q.volume,\n33:       })),\n34:     };\n35: \n36:     console.log(response);\n37:     res.json(response);\n38:   } catch (err) {\n39:     console.error(err);\n40:     res.status(500).send(\"Error fetching stock data\");\n41:   }\n42: });",
            "mapping": [
                {
                    "summaryComponent": "This Express route listens for GET requests at '/api/stock/:symbol'",
                    "codeSegments": [
                        {
                            "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {",
                            "line": 15
                        }
                    ]
                },
                {
                    "summaryComponent": "extracts the stock symbol from the URL",
                    "codeSegments": [
                        {
                            "code": "const symbol = req.params.symbol.toUpperCase();",
                            "line": 17
                        }
                    ]
                },
                {
                    "summaryComponent": "converts it to uppercase",
                    "codeSegments": [
                        {
                            "code": "toUpperCase()",
                            "line": 17
                        }
                    ]
                },
                {
                    "summaryComponent": "queries Yahoo Finance for daily chart data starting from January 1, 2024",
                    "codeSegments": [
                        {
                            "code": "const data = await yahooFinance.chart(symbol, {",
                            "line": 18
                        },
                        {
                            "code": "period1: \"2024-01-01\",",
                            "line": 19
                        },
                        {
                            "code": "interval: \"1d\",",
                            "line": 20
                        }
                    ]
                },
                {
                    "summaryComponent": "processes the returned data to extract the company's short name (if available)",
                    "codeSegments": [
                        {
                            "code": "const companyName = data.meta?.shortName || symbol;",
                            "line": 24
                        }
                    ]
                },
                {
                    "summaryComponent": "maps the quotes to an array containing the date, closing price, and volume for each entry",
                    "codeSegments": [
                        {
                            "code": "data: quotes.map((q) => ({",
                            "line": 29
                        },
                        {
                            "code": "date: q.date,",
                            "line": 30
                        },
                        {
                            "code": "close: q.close,",
                            "line": 31
                        },
                        {
                            "code": "volume: q.volume,",
                            "line": 32
                        }
                    ]
                },
                {
                    "summaryComponent": "The response is structured as a JSON object with the ticker, company name, and the processed data array",
                    "codeSegments": [
                        {
                            "code": "const response = {",
                            "line": 26
                        },
                        {
                            "code": "ticker: symbol,",
                            "line": 27
                        },
                        {
                            "code": "name: companyName,",
                            "line": 28
                        },
                        {
                            "code": "data: quotes.map((q) => ({",
                            "line": 29
                        }
                    ]
                },
                {
                    "summaryComponent": "logged to the console before being sent to the client",
                    "codeSegments": [
                        {
                            "code": "console.log(response);",
                            "line": 36
                        }
                    ]
                },
                {
                    "summaryComponent": "sent to the client",
                    "codeSegments": [
                        {
                            "code": "res.json(response);",
                            "line": 37
                        }
                    ]
                },
                {
                    "summaryComponent": "In case of any errors during the fetch or processing, the route logs the error and responds with a 500 status and an error message.",
                    "codeSegments": [
                        {
                            "code": "catch (err) {",
                            "line": 38
                        },
                        {
                            "code": "console.error(err);",
                            "line": 39
                        },
                        {
                            "code": "res.status(500).send(\"Error fetching stock data\");",
                            "line": 40
                        }
                    ]
                }
            ],
            "summary": "This Express route listens for GET requests at '/api/stock/:symbol', where it extracts the stock symbol from the URL, converts it to uppercase, and queries Yahoo Finance for daily chart data starting from January 1, 2024. It processes the returned data to extract the company's short name (if available), and maps the quotes to an array containing the date, closing price, and volume for each entry. The response is structured as a JSON object with the ticker, company name, and the processed data array, and is logged to the console before being sent to the client. In case of any errors during the fetch or processing, the route logs the error and responds with a 500 status and an error message."
        },
        "id": "pdurOe6rVrS3aEomvj1x"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:19:58.000",
        "source": "frontend",
        "data": {
            "section_id": "a8e7f0fb-5377-4fc1-b093-6cd896de1048",
            "structured_type": "unstructured",
            "mapping_index": 0,
            "detail_level": "medium"
        },
        "id": "7glF2VlkZuTwk4SGTdXS"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:19:58.000",
        "source": "frontend",
        "data": {
            "section_id": "a8e7f0fb-5377-4fc1-b093-6cd896de1048",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "9oO1kWIE1EZ7gjWXBTen"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:19:58.000",
        "source": "frontend",
        "data": {
            "section_id": "a8e7f0fb-5377-4fc1-b093-6cd896de1048",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "Mw6O4oJbM47U5SdymREp"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:19:58.000",
        "source": "frontend",
        "data": {
            "section_id": "a8e7f0fb-5377-4fc1-b093-6cd896de1048",
            "structured_type": "unstructured",
            "mapping_index": 0,
            "detail_level": "medium"
        },
        "id": "PDw7xhMqodP2PHEI7zFq"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:19:58.000",
        "source": "frontend",
        "data": {
            "section_id": "a8e7f0fb-5377-4fc1-b093-6cd896de1048",
            "structured_type": "unstructured",
            "mapping_index": 1,
            "detail_level": "medium"
        },
        "id": "yu90asDvPiySjafQmITq"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:19:59.000",
        "source": "frontend",
        "data": {
            "section_id": "a8e7f0fb-5377-4fc1-b093-6cd896de1048",
            "structured_type": "unstructured",
            "mapping_index": 0,
            "detail_level": "medium"
        },
        "id": "L5UPqsyPPgBuWk0xjL3l"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:19:59.000",
        "source": "frontend",
        "data": {
            "section_id": "a8e7f0fb-5377-4fc1-b093-6cd896de1048",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "TBHV6TdptXF9SEPjuzeL"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:20:00.000",
        "source": "frontend",
        "data": {
            "section_id": "a8e7f0fb-5377-4fc1-b093-6cd896de1048",
            "structured_type": "unstructured",
            "mapping_index": 1,
            "detail_level": "medium"
        },
        "id": "BwE3VSOIBffsN9rPzOeT"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:20:00.000",
        "source": "frontend",
        "data": {
            "section_id": "a8e7f0fb-5377-4fc1-b093-6cd896de1048",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "ZMuyJbOd2fOBVlcg8psm"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:20:11.000",
        "source": "frontend",
        "data": {
            "section_id": "a8e7f0fb-5377-4fc1-b093-6cd896de1048",
            "structured_type": "unstructured",
            "mapping_index": 2,
            "detail_level": "medium"
        },
        "id": "6rnLCTttwMy5IlCWlAY8"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:20:11.000",
        "source": "frontend",
        "data": {
            "section_id": "a8e7f0fb-5377-4fc1-b093-6cd896de1048",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "sj64BCPpSSLuxDRJi2cO"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:20:14.000",
        "source": "frontend",
        "data": {
            "section_id": "a8e7f0fb-5377-4fc1-b093-6cd896de1048",
            "structured_type": "unstructured",
            "mapping_index": 3,
            "detail_level": "medium"
        },
        "id": "JTybwDelRYiHuEINtl7c"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:20:14.000",
        "source": "frontend",
        "data": {
            "section_id": "a8e7f0fb-5377-4fc1-b093-6cd896de1048",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "PlbWETmH9oA8ocZPitCe"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:20:15.000",
        "source": "frontend",
        "data": {
            "section_id": "a8e7f0fb-5377-4fc1-b093-6cd896de1048",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "0ho8byzHhYRspG2o7FFQ"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:20:15.000",
        "source": "frontend",
        "data": {
            "section_id": "a8e7f0fb-5377-4fc1-b093-6cd896de1048",
            "structured_type": "unstructured",
            "mapping_index": 2,
            "detail_level": "medium"
        },
        "id": "ZUFt05tCfGT7QBFv9Dxj"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:20:22.000",
        "source": "frontend",
        "data": {
            "section_id": "a8e7f0fb-5377-4fc1-b093-6cd896de1048",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "FCchKYjYbXS7pAYkmW69"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:20:22.000",
        "source": "frontend",
        "data": {
            "section_id": "a8e7f0fb-5377-4fc1-b093-6cd896de1048",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "LAbil1JYBDqFEC9EBJjH"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:20:22.000",
        "source": "frontend",
        "data": {
            "section_id": "a8e7f0fb-5377-4fc1-b093-6cd896de1048",
            "structured_type": "unstructured",
            "mapping_index": 5,
            "detail_level": "medium"
        },
        "id": "OlKFD6pV8hs3xChBBHo5"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:20:22.000",
        "source": "frontend",
        "data": {
            "section_id": "a8e7f0fb-5377-4fc1-b093-6cd896de1048",
            "structured_type": "unstructured",
            "mapping_index": 3,
            "detail_level": "medium"
        },
        "id": "kv7TRlI5n4ZjW8xYlV1x"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:20:22.000",
        "source": "frontend",
        "data": {
            "section_id": "a8e7f0fb-5377-4fc1-b093-6cd896de1048",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "mEAmGvPrtxLC50CtazNw"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:20:43.000",
        "source": "frontend",
        "data": {
            "section_id": "a8e7f0fb-5377-4fc1-b093-6cd896de1048",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "HFtmYaPWKGv3Iptzrb9M"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:20:43.000",
        "source": "frontend",
        "data": {
            "section_id": "a8e7f0fb-5377-4fc1-b093-6cd896de1048",
            "structured_type": "unstructured",
            "mapping_index": 0,
            "detail_level": "medium"
        },
        "id": "JYLeIsRyizQHLcZZTR1l"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:20:43.000",
        "source": "frontend",
        "data": {
            "section_id": "a8e7f0fb-5377-4fc1-b093-6cd896de1048",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "f2zCOYIQhGMAH44akcXt"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:20:43.000",
        "source": "frontend",
        "data": {
            "section_id": "a8e7f0fb-5377-4fc1-b093-6cd896de1048",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "gLBjDdUHvVOAeNTmIlO6"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:20:43.000",
        "source": "frontend",
        "data": {
            "section_id": "a8e7f0fb-5377-4fc1-b093-6cd896de1048",
            "structured_type": "unstructured",
            "mapping_index": 3,
            "detail_level": "medium"
        },
        "id": "lrbYUEfarKn3unqq2f3J"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:20:43.000",
        "source": "frontend",
        "data": {
            "section_id": "a8e7f0fb-5377-4fc1-b093-6cd896de1048",
            "structured_type": "unstructured",
            "mapping_index": 1,
            "detail_level": "medium"
        },
        "id": "wSbPG7rufM542q1Q7icq"
    },
    {
        "event": "click_edit_in_prompt",
        "timestamp": "2025-08-17 11:20:44.000",
        "source": "frontend",
        "data": {
            "section_id": "a8e7f0fb-5377-4fc1-b093-6cd896de1048",
            "structured": "unstructured",
            "summary": "This Express route handles GET requests to '/api/stock/:symbol' by fetching historical stock data for the specified symbol from Yahoo Finance. It formats the data to include the ticker, company name, and an array of date, close, and volume values, then returns this as JSON. If an error occurs, it responds with a 500 status and an error message.",
            "detail_level": "medium"
        },
        "id": "1Mw0jxFRSCHhE2PIpOdm"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:20:44.000",
        "source": "frontend",
        "data": {
            "section_id": "a8e7f0fb-5377-4fc1-b093-6cd896de1048",
            "structured_type": "unstructured",
            "mapping_index": 4,
            "detail_level": "medium"
        },
        "id": "Ly4oUk8k4yxp5VdMYRBf"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:20:44.000",
        "source": "frontend",
        "data": {
            "section_id": "a8e7f0fb-5377-4fc1-b093-6cd896de1048",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "QbFzvzJMGHApdptqanOJ"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:20:44.000",
        "source": "frontend",
        "data": {
            "section_id": "a8e7f0fb-5377-4fc1-b093-6cd896de1048",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "USyab9Po7yemvohdrMQa"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:20:44.000",
        "source": "frontend",
        "data": {
            "section_id": "a8e7f0fb-5377-4fc1-b093-6cd896de1048",
            "structured_type": "unstructured",
            "mapping_index": 2,
            "detail_level": "medium"
        },
        "id": "XAfhJ5e13C3qCE97g96v"
    },
    {
        "event": "commit_direct_instruction",
        "timestamp": "2025-08-17 11:20:51.000",
        "source": "frontend",
        "data": {
            "section_id": "a8e7f0fb-5377-4fc1-b093-6cd896de1048",
            "instruction": "I want to pass current stock price to the frontend in this api endpoint."
        },
        "id": "tF6w1mbsltDZXmV30s3i"
    },
    {
        "event": "modify_direct_instruction",
        "timestamp": "2025-08-17 11:20:53.000",
        "source": "backend",
        "data": {
            "instruction": "I want to pass current stock price to the frontend in this api endpoint.",
            "original_code": "app.get(\"/api/stock/:symbol\", async (req, res) => {\n  try {\n    const symbol = req.params.symbol.toUpperCase();\n    const data = await yahooFinance.chart(symbol, {\n      period1: \"2024-01-01\",\n      interval: \"1d\",\n    });\n    const quotes = data.quotes;\n\n    const companyName = data.meta?.shortName || symbol;\n\n    const response = {\n      ticker: symbol,\n      name: companyName,\n      data: quotes.map((q) => ({\n        date: q.date,\n        close: q.close,\n        volume: q.volume,\n      })),\n    };\n\n    console.log(response);\n    res.json(response);\n  } catch (err) {\n    console.error(err);\n    res.status(500).send(\"Error fetching stock data\");\n  }\n});",
            "updated_code": "app.get(\"/api/stock/:symbol\", async (req, res) => {\n  try {\n    const symbol = req.params.symbol.toUpperCase();\n    const data = await yahooFinance.chart(symbol, {\n      period1: \"2024-01-01\",\n      interval: \"1d\",\n    });\n    const quotes = data.quotes;\n\n    const companyName = data.meta?.shortName || symbol;\n\n    // Get current price from the latest quote if available\n    const currentPrice = quotes && quotes.length > 0 ? quotes[quotes.length - 1].close : null;\n\n    const response = {\n      ticker: symbol,\n      name: companyName,\n      currentPrice: currentPrice,\n      data: quotes.map((q) => ({\n        date: q.date,\n        close: q.close,\n        volume: q.volume,\n      })),\n    };\n\n    console.log(response);\n    res.json(response);\n  } catch (err) {\n    console.error(err);\n    res.status(500).send(\"Error fetching stock data\");\n  }\n});"
        },
        "id": "JEQhVowzULJBcKr2ffUb"
    },
    {
        "event": "summarize_modified_code",
        "timestamp": "2025-08-17 11:20:59.000",
        "source": "backend",
        "data": {
            "new_code": "app.get(\"/api/stock/:symbol\", async (req, res) => {\n  try {\n    const symbol = req.params.symbol.toUpperCase();\n    const data = await yahooFinance.chart(symbol, {\n      period1: \"2024-01-01\",\n      interval: \"1d\",\n    });\n    const quotes = data.quotes;\n\n    const companyName = data.meta?.shortName || symbol;\n\n    // Get current price from the latest quote if available\n    const currentPrice = quotes && quotes.length > 0 ? quotes[quotes.length - 1].close : null;\n\n    const response = {\n      ticker: symbol,\n      name: companyName,\n      currentPrice: currentPrice,\n      data: quotes.map((q) => ({\n        date: q.date,\n        close: q.close,\n        volume: q.volume,\n      })),\n    };\n\n    console.log(response);\n    res.json(response);\n  } catch (err) {\n    console.error(err);\n    res.status(500).send(\"Error fetching stock data\");\n  }\n});",
            "original_code": "app.get(\"/api/stock/:symbol\", async (req, res) => {\n  try {\n    const symbol = req.params.symbol.toUpperCase();\n    const data = await yahooFinance.chart(symbol, {\n      period1: \"2024-01-01\",\n      interval: \"1d\",\n    });\n    const quotes = data.quotes;\n\n    const companyName = data.meta?.shortName || symbol;\n\n    // Get current price from the latest quote if available\n    const currentPrice = quotes && quotes.length > 0 ? quotes[quotes.length - 1].close : null;\n\n    const response = {\n      ticker: symbol,\n      name: companyName,\n      currentPrice: currentPrice,\n      data: quotes.map((q) => ({\n        date: q.date,\n        close: q.close,\n        volume: q.volume,\n      })),\n    };\n\n    console.log(response);\n    res.json(response);\n  } catch (err) {\n    console.error(err);\n    res.status(500).send(\"Error fetching stock data\");\n  }\n});",
            "new_summary": {
                "high_structured": "• Defines a GET endpoint at '/api/stock/:symbol' for fetching stock data\n• Extracts the stock symbol from the request parameters and converts it to uppercase\n• Fetches daily stock chart data from Yahoo Finance starting from 2024-01-01\n• Processes the received data:\n  ◦ Retrieves the company's short name if available, otherwise uses the symbol\n  ◦ Determines the current price from the latest quote and includes it in the response\n  ◦ Maps each quote to an object containing date, close price, and volume\n• Constructs a response object with:\n  ◦ ticker (symbol), name (company name), currentPrice (latest close), and data (array of mapped quotes)\n• Logs the response object to the console\n• Sends the response as JSON to the client\n• Handles errors by logging them and returning a 500 status with an error message",
                "low_structured": "• Sets up an API endpoint for stock data\n• Fetches and returns data for a requested stock symbol, and now includes the current price in the response",
                "title": "Express Route for Fetching Stock Data with Current Price from Yahoo Finance",
                "medium_structured": "• Handles GET requests at '/api/stock/:symbol'\n• Fetches daily stock chart data from Yahoo Finance starting from 2024-01-01\n• Formats the response to include:\n  ◦ Ticker symbol and company name\n  ◦ The current price from the latest quote\n  ◦ An array of objects with date, close, and volume\n• Returns the formatted data as JSON or an error message if fetching fails",
                "medium_unstructured": "This Express route handles GET requests to '/api/stock/:symbol' by fetching historical stock data for the specified symbol from Yahoo Finance. It formats the data to include the ticker, company name, the current price (from the latest quote), and an array of date, close, and volume values, then returns this as JSON. If an error occurs, it responds with a 500 status and an error message.",
                "high_unstructured": "This Express route listens for GET requests at '/api/stock/:symbol', where it extracts the stock symbol from the URL, converts it to uppercase, and queries Yahoo Finance for daily chart data starting from January 1, 2024. It processes the returned data to extract the company's short name (if available), determines the current price from the latest quote, and maps the quotes to an array containing the date, closing price, and volume for each entry. The response is structured as a JSON object with the ticker, company name, current price, and the processed data array, and is logged to the console before being sent to the client. In case of any errors during the fetch or processing, the route logs the error and responds with a 500 status and an error message.",
                "low_unstructured": "This code defines an Express route that returns stock data for a given symbol, now also including the stock's current price in the response."
            },
            "old_summary": {
                "high_structured": "• Defines a GET endpoint at '/api/stock/:symbol' for fetching stock data\n• Extracts the stock symbol from the request parameters and converts it to uppercase\n• Fetches daily stock chart data from Yahoo Finance starting from 2024-01-01\n• Processes the received data:\n  ◦ Retrieves the company's short name if available, otherwise uses the symbol\n  ◦ Maps each quote to an object containing date, close price, and volume\n• Constructs a response object with:\n  ◦ ticker (symbol), name (company name), and data (array of mapped quotes)\n• Logs the response object to the console\n• Sends the response as JSON to the client\n• Handles errors by logging them and returning a 500 status with an error message",
                "low_structured": "• Sets up an API endpoint for stock data\n• Fetches and returns data for a requested stock symbol",
                "title": "Express Route for Fetching Stock Data from Yahoo Finance",
                "medium_structured": "• Handles GET requests at '/api/stock/:symbol'\n• Fetches daily stock chart data from Yahoo Finance starting from 2024-01-01\n• Formats the response to include:\n  ◦ Ticker symbol and company name\n  ◦ An array of objects with date, close, and volume\n• Returns the formatted data as JSON or an error message if fetching fails",
                "medium_unstructured": "This Express route handles GET requests to '/api/stock/:symbol' by fetching historical stock data for the specified symbol from Yahoo Finance. It formats the data to include the ticker, company name, and an array of date, close, and volume values, then returns this as JSON. If an error occurs, it responds with a 500 status and an error message.",
                "high_unstructured": "This Express route listens for GET requests at '/api/stock/:symbol', where it extracts the stock symbol from the URL, converts it to uppercase, and queries Yahoo Finance for daily chart data starting from January 1, 2024. It processes the returned data to extract the company's short name (if available), and maps the quotes to an array containing the date, closing price, and volume for each entry. The response is structured as a JSON object with the ticker, company name, and the processed data array, and is logged to the console before being sent to the client. In case of any errors during the fetch or processing, the route logs the error and responds with a 500 status and an error message.",
                "low_unstructured": "This code defines an Express route that returns stock data for a given symbol."
            }
        },
        "id": "VmksHpgvVBbLityrdgC0"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-17 11:21:00.000",
        "source": "backend",
        "data": {
            "code": "15: app.get(\"/api/stock/:symbol\", async (req, res) => {\n16:   try {\n17:     const symbol = req.params.symbol.toUpperCase();\n18:     const data = await yahooFinance.chart(symbol, {\n19:       period1: \"2024-01-01\",\n20:       interval: \"1d\",\n21:     });\n22:     const quotes = data.quotes;\n23: \n24:     const companyName = data.meta?.shortName || symbol;\n25: \n26:     // Get current price from the latest quote if available\n27:     const currentPrice = quotes && quotes.length > 0 ? quotes[quotes.length - 1].close : null;\n28: \n29:     const response = {\n30:       ticker: symbol,\n31:       name: companyName,\n32:       currentPrice: currentPrice,\n33:       data: quotes.map((q) => ({\n34:         date: q.date,\n35:         close: q.close,\n36:         volume: q.volume,\n37:       })),\n38:     };\n39: \n40:     console.log(response);\n41:     res.json(response);\n42:   } catch (err) {\n43:     console.error(err);\n44:     res.status(500).send(\"Error fetching stock data\");\n45:   }\n46: });",
            "mapping": [
                {
                    "summaryComponent": "Sets up an API endpoint for stock data",
                    "codeSegments": [
                        {
                            "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {",
                            "line": 15
                        }
                    ]
                },
                {
                    "summaryComponent": "Fetches and returns data for a requested stock symbol",
                    "codeSegments": [
                        {
                            "code": "const symbol = req.params.symbol.toUpperCase();",
                            "line": 17
                        },
                        {
                            "code": "const data = await yahooFinance.chart(symbol, {",
                            "line": 18
                        },
                        {
                            "code": "res.json(response);",
                            "line": 41
                        }
                    ]
                },
                {
                    "summaryComponent": "now includes the current price in the response",
                    "codeSegments": [
                        {
                            "code": "const currentPrice = quotes && quotes.length > 0 ? quotes[quotes.length - 1].close : null;",
                            "line": 27
                        },
                        {
                            "code": "currentPrice: currentPrice,",
                            "line": 32
                        }
                    ]
                }
            ],
            "summary": "• Sets up an API endpoint for stock data\n• Fetches and returns data for a requested stock symbol, and now includes the current price in the response"
        },
        "id": "yheJd0ZF7YOSBP1fkgTE"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-17 11:21:01.000",
        "source": "backend",
        "data": {
            "code": "15: app.get(\"/api/stock/:symbol\", async (req, res) => {\n16:   try {\n17:     const symbol = req.params.symbol.toUpperCase();\n18:     const data = await yahooFinance.chart(symbol, {\n19:       period1: \"2024-01-01\",\n20:       interval: \"1d\",\n21:     });\n22:     const quotes = data.quotes;\n23: \n24:     const companyName = data.meta?.shortName || symbol;\n25: \n26:     // Get current price from the latest quote if available\n27:     const currentPrice = quotes && quotes.length > 0 ? quotes[quotes.length - 1].close : null;\n28: \n29:     const response = {\n30:       ticker: symbol,\n31:       name: companyName,\n32:       currentPrice: currentPrice,\n33:       data: quotes.map((q) => ({\n34:         date: q.date,\n35:         close: q.close,\n36:         volume: q.volume,\n37:       })),\n38:     };\n39: \n40:     console.log(response);\n41:     res.json(response);\n42:   } catch (err) {\n43:     console.error(err);\n44:     res.status(500).send(\"Error fetching stock data\");\n45:   }\n46: });",
            "mapping": [
                {
                    "summaryComponent": "defines an Express route",
                    "codeSegments": [
                        {
                            "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {",
                            "line": 15
                        }
                    ]
                },
                {
                    "summaryComponent": "returns stock data",
                    "codeSegments": [
                        {
                            "code": "res.json(response);",
                            "line": 41
                        }
                    ]
                },
                {
                    "summaryComponent": "for a given symbol",
                    "codeSegments": [
                        {
                            "code": "const symbol = req.params.symbol.toUpperCase();",
                            "line": 17
                        }
                    ]
                },
                {
                    "summaryComponent": "now also including the stock's current price in the response",
                    "codeSegments": [
                        {
                            "code": "const currentPrice = quotes && quotes.length > 0 ? quotes[quotes.length - 1].close : null;",
                            "line": 27
                        },
                        {
                            "code": "currentPrice: currentPrice,",
                            "line": 32
                        }
                    ]
                }
            ],
            "summary": "This code defines an Express route that returns stock data for a given symbol, now also including the stock's current price in the response."
        },
        "id": "1JWZgP1YARxo1fXWMFcb"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-17 11:21:02.000",
        "source": "backend",
        "data": {
            "code": "15: app.get(\"/api/stock/:symbol\", async (req, res) => {\n16:   try {\n17:     const symbol = req.params.symbol.toUpperCase();\n18:     const data = await yahooFinance.chart(symbol, {\n19:       period1: \"2024-01-01\",\n20:       interval: \"1d\",\n21:     });\n22:     const quotes = data.quotes;\n23: \n24:     const companyName = data.meta?.shortName || symbol;\n25: \n26:     // Get current price from the latest quote if available\n27:     const currentPrice = quotes && quotes.length > 0 ? quotes[quotes.length - 1].close : null;\n28: \n29:     const response = {\n30:       ticker: symbol,\n31:       name: companyName,\n32:       currentPrice: currentPrice,\n33:       data: quotes.map((q) => ({\n34:         date: q.date,\n35:         close: q.close,\n36:         volume: q.volume,\n37:       })),\n38:     };\n39: \n40:     console.log(response);\n41:     res.json(response);\n42:   } catch (err) {\n43:     console.error(err);\n44:     res.status(500).send(\"Error fetching stock data\");\n45:   }\n46: });",
            "mapping": [
                {
                    "summaryComponent": "This Express route handles GET requests to '/api/stock/:symbol'",
                    "codeSegments": [
                        {
                            "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {",
                            "line": 15
                        }
                    ]
                },
                {
                    "summaryComponent": "by fetching historical stock data for the specified symbol from Yahoo Finance",
                    "codeSegments": [
                        {
                            "code": "const symbol = req.params.symbol.toUpperCase();",
                            "line": 17
                        },
                        {
                            "code": "const data = await yahooFinance.chart(symbol, {",
                            "line": 18
                        }
                    ]
                },
                {
                    "summaryComponent": "It formats the data to include the ticker",
                    "codeSegments": [
                        {
                            "code": "ticker: symbol,",
                            "line": 30
                        }
                    ]
                },
                {
                    "summaryComponent": "company name",
                    "codeSegments": [
                        {
                            "code": "const companyName = data.meta?.shortName || symbol;",
                            "line": 24
                        },
                        {
                            "code": "name: companyName,",
                            "line": 31
                        }
                    ]
                },
                {
                    "summaryComponent": "the current price (from the latest quote)",
                    "codeSegments": [
                        {
                            "code": "const currentPrice = quotes && quotes.length > 0 ? quotes[quotes.length - 1].close : null;",
                            "line": 27
                        },
                        {
                            "code": "currentPrice: currentPrice,",
                            "line": 32
                        }
                    ]
                },
                {
                    "summaryComponent": "an array of date, close, and volume values",
                    "codeSegments": [
                        {
                            "code": "data: quotes.map((q) => ({",
                            "line": 33
                        },
                        {
                            "code": "date: q.date,",
                            "line": 34
                        },
                        {
                            "code": "close: q.close,",
                            "line": 35
                        },
                        {
                            "code": "volume: q.volume,",
                            "line": 36
                        }
                    ]
                },
                {
                    "summaryComponent": "then returns this as JSON",
                    "codeSegments": [
                        {
                            "code": "res.json(response);",
                            "line": 41
                        }
                    ]
                },
                {
                    "summaryComponent": "If an error occurs",
                    "codeSegments": [
                        {
                            "code": "catch (err) {",
                            "line": 42
                        }
                    ]
                },
                {
                    "summaryComponent": "it responds with a 500 status and an error message",
                    "codeSegments": [
                        {
                            "code": "res.status(500).send(\"Error fetching stock data\");",
                            "line": 44
                        }
                    ]
                }
            ],
            "summary": "This Express route handles GET requests to '/api/stock/:symbol' by fetching historical stock data for the specified symbol from Yahoo Finance. It formats the data to include the ticker, company name, the current price (from the latest quote), and an array of date, close, and volume values, then returns this as JSON. If an error occurs, it responds with a 500 status and an error message."
        },
        "id": "eNlhiGzLSm4tVfRlnIY5"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-17 11:21:02.000",
        "source": "backend",
        "data": {
            "code": "15: app.get(\"/api/stock/:symbol\", async (req, res) => {\n16:   try {\n17:     const symbol = req.params.symbol.toUpperCase();\n18:     const data = await yahooFinance.chart(symbol, {\n19:       period1: \"2024-01-01\",\n20:       interval: \"1d\",\n21:     });\n22:     const quotes = data.quotes;\n23: \n24:     const companyName = data.meta?.shortName || symbol;\n25: \n26:     // Get current price from the latest quote if available\n27:     const currentPrice = quotes && quotes.length > 0 ? quotes[quotes.length - 1].close : null;\n28: \n29:     const response = {\n30:       ticker: symbol,\n31:       name: companyName,\n32:       currentPrice: currentPrice,\n33:       data: quotes.map((q) => ({\n34:         date: q.date,\n35:         close: q.close,\n36:         volume: q.volume,\n37:       })),\n38:     };\n39: \n40:     console.log(response);\n41:     res.json(response);\n42:   } catch (err) {\n43:     console.error(err);\n44:     res.status(500).send(\"Error fetching stock data\");\n45:   }\n46: });",
            "mapping": [
                {
                    "summaryComponent": "Handles GET requests at '/api/stock/:symbol'",
                    "codeSegments": [
                        {
                            "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {",
                            "line": 15
                        }
                    ]
                },
                {
                    "summaryComponent": "Fetches daily stock chart data from Yahoo Finance starting from 2024-01-01",
                    "codeSegments": [
                        {
                            "code": "const data = await yahooFinance.chart(symbol, {",
                            "line": 18
                        },
                        {
                            "code": "period1: \"2024-01-01\",",
                            "line": 19
                        },
                        {
                            "code": "interval: \"1d\",",
                            "line": 20
                        }
                    ]
                },
                {
                    "summaryComponent": "Formats the response to include:",
                    "codeSegments": [
                        {
                            "code": "const response = {",
                            "line": 29
                        }
                    ]
                },
                {
                    "summaryComponent": "Ticker symbol and company name",
                    "codeSegments": [
                        {
                            "code": "ticker: symbol,",
                            "line": 30
                        },
                        {
                            "code": "name: companyName,",
                            "line": 31
                        }
                    ]
                },
                {
                    "summaryComponent": "The current price from the latest quote",
                    "codeSegments": [
                        {
                            "code": "currentPrice: currentPrice,",
                            "line": 32
                        },
                        {
                            "code": "const currentPrice = quotes && quotes.length > 0 ? quotes[quotes.length - 1].close : null;",
                            "line": 27
                        }
                    ]
                },
                {
                    "summaryComponent": "An array of objects with date, close, and volume",
                    "codeSegments": [
                        {
                            "code": "data: quotes.map((q) => ({",
                            "line": 33
                        },
                        {
                            "code": "date: q.date,",
                            "line": 34
                        },
                        {
                            "code": "close: q.close,",
                            "line": 35
                        },
                        {
                            "code": "volume: q.volume,",
                            "line": 36
                        }
                    ]
                },
                {
                    "summaryComponent": "Returns the formatted data as JSON or an error message if fetching fails",
                    "codeSegments": [
                        {
                            "code": "res.json(response);",
                            "line": 41
                        },
                        {
                            "code": "res.status(500).send(\"Error fetching stock data\");",
                            "line": 44
                        }
                    ]
                }
            ],
            "summary": "• Handles GET requests at '/api/stock/:symbol'\n• Fetches daily stock chart data from Yahoo Finance starting from 2024-01-01\n• Formats the response to include:\n  ◦ Ticker symbol and company name\n  ◦ The current price from the latest quote\n  ◦ An array of objects with date, close, and volume\n• Returns the formatted data as JSON or an error message if fetching fails"
        },
        "id": "lOCJM1270SJoiwcHBivZ"
    },
    {
        "event": "autotransit_section",
        "timestamp": "2025-08-17 11:21:03.000",
        "source": "frontend",
        "data": {
            "after_section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "before_section_id": "a8e7f0fb-5377-4fc1-b093-6cd896de1048"
        },
        "id": "FF5I5pSJAVvICuGi09ZI"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-17 11:21:03.000",
        "source": "backend",
        "data": {
            "code": "15: app.get(\"/api/stock/:symbol\", async (req, res) => {\n16:   try {\n17:     const symbol = req.params.symbol.toUpperCase();\n18:     const data = await yahooFinance.chart(symbol, {\n19:       period1: \"2024-01-01\",\n20:       interval: \"1d\",\n21:     });\n22:     const quotes = data.quotes;\n23: \n24:     const companyName = data.meta?.shortName || symbol;\n25: \n26:     // Get current price from the latest quote if available\n27:     const currentPrice = quotes && quotes.length > 0 ? quotes[quotes.length - 1].close : null;\n28: \n29:     const response = {\n30:       ticker: symbol,\n31:       name: companyName,\n32:       currentPrice: currentPrice,\n33:       data: quotes.map((q) => ({\n34:         date: q.date,\n35:         close: q.close,\n36:         volume: q.volume,\n37:       })),\n38:     };\n39: \n40:     console.log(response);\n41:     res.json(response);\n42:   } catch (err) {\n43:     console.error(err);\n44:     res.status(500).send(\"Error fetching stock data\");\n45:   }\n46: });",
            "mapping": [
                {
                    "summaryComponent": "Defines a GET endpoint at '/api/stock/:symbol' for fetching stock data",
                    "codeSegments": [
                        {
                            "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {",
                            "line": 15
                        }
                    ]
                },
                {
                    "summaryComponent": "Extracts the stock symbol from the request parameters and converts it to uppercase",
                    "codeSegments": [
                        {
                            "code": "const symbol = req.params.symbol.toUpperCase();",
                            "line": 17
                        }
                    ]
                },
                {
                    "summaryComponent": "Fetches daily stock chart data from Yahoo Finance starting from 2024-01-01",
                    "codeSegments": [
                        {
                            "code": "const data = await yahooFinance.chart(symbol, {",
                            "line": 18
                        },
                        {
                            "code": "period1: \"2024-01-01\",",
                            "line": 19
                        },
                        {
                            "code": "interval: \"1d\",",
                            "line": 20
                        }
                    ]
                },
                {
                    "summaryComponent": "Retrieves the company's short name if available, otherwise uses the symbol",
                    "codeSegments": [
                        {
                            "code": "const companyName = data.meta?.shortName || symbol;",
                            "line": 24
                        }
                    ]
                },
                {
                    "summaryComponent": "Determines the current price from the latest quote and includes it in the response",
                    "codeSegments": [
                        {
                            "code": "const currentPrice = quotes && quotes.length > 0 ? quotes[quotes.length - 1].close : null;",
                            "line": 27
                        },
                        {
                            "code": "currentPrice: currentPrice,",
                            "line": 32
                        }
                    ]
                },
                {
                    "summaryComponent": "Maps each quote to an object containing date, close price, and volume",
                    "codeSegments": [
                        {
                            "code": "data: quotes.map((q) => ({",
                            "line": 33
                        },
                        {
                            "code": "date: q.date,",
                            "line": 34
                        },
                        {
                            "code": "close: q.close,",
                            "line": 35
                        },
                        {
                            "code": "volume: q.volume,",
                            "line": 36
                        }
                    ]
                },
                {
                    "summaryComponent": "Constructs a response object with:",
                    "codeSegments": [
                        {
                            "code": "const response = {",
                            "line": 29
                        }
                    ]
                },
                {
                    "summaryComponent": "ticker (symbol), name (company name), currentPrice (latest close), and data (array of mapped quotes)",
                    "codeSegments": [
                        {
                            "code": "ticker: symbol,",
                            "line": 30
                        },
                        {
                            "code": "name: companyName,",
                            "line": 31
                        },
                        {
                            "code": "currentPrice: currentPrice,",
                            "line": 32
                        },
                        {
                            "code": "data: quotes.map((q) => ({",
                            "line": 33
                        }
                    ]
                },
                {
                    "summaryComponent": "Logs the response object to the console",
                    "codeSegments": [
                        {
                            "code": "console.log(response);",
                            "line": 40
                        }
                    ]
                },
                {
                    "summaryComponent": "Sends the response as JSON to the client",
                    "codeSegments": [
                        {
                            "code": "res.json(response);",
                            "line": 41
                        }
                    ]
                },
                {
                    "summaryComponent": "Handles errors by logging them and returning a 500 status with an error message",
                    "codeSegments": [
                        {
                            "code": "console.error(err);",
                            "line": 43
                        },
                        {
                            "code": "res.status(500).send(\"Error fetching stock data\");",
                            "line": 44
                        }
                    ]
                }
            ],
            "summary": "• Defines a GET endpoint at '/api/stock/:symbol' for fetching stock data\n• Extracts the stock symbol from the request parameters and converts it to uppercase\n• Fetches daily stock chart data from Yahoo Finance starting from 2024-01-01\n• Processes the received data:\n  ◦ Retrieves the company's short name if available, otherwise uses the symbol\n  ◦ Determines the current price from the latest quote and includes it in the response\n  ◦ Maps each quote to an object containing date, close price, and volume\n• Constructs a response object with:\n  ◦ ticker (symbol), name (company name), currentPrice (latest close), and data (array of mapped quotes)\n• Logs the response object to the console\n• Sends the response as JSON to the client\n• Handles errors by logging them and returning a 500 status with an error message"
        },
        "id": "HMesAYnKvkb2ZyywOn3w"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-17 11:21:03.000",
        "source": "backend",
        "data": {
            "code": "15: app.get(\"/api/stock/:symbol\", async (req, res) => {\n16:   try {\n17:     const symbol = req.params.symbol.toUpperCase();\n18:     const data = await yahooFinance.chart(symbol, {\n19:       period1: \"2024-01-01\",\n20:       interval: \"1d\",\n21:     });\n22:     const quotes = data.quotes;\n23: \n24:     const companyName = data.meta?.shortName || symbol;\n25: \n26:     // Get current price from the latest quote if available\n27:     const currentPrice = quotes && quotes.length > 0 ? quotes[quotes.length - 1].close : null;\n28: \n29:     const response = {\n30:       ticker: symbol,\n31:       name: companyName,\n32:       currentPrice: currentPrice,\n33:       data: quotes.map((q) => ({\n34:         date: q.date,\n35:         close: q.close,\n36:         volume: q.volume,\n37:       })),\n38:     };\n39: \n40:     console.log(response);\n41:     res.json(response);\n42:   } catch (err) {\n43:     console.error(err);\n44:     res.status(500).send(\"Error fetching stock data\");\n45:   }\n46: });",
            "mapping": [
                {
                    "summaryComponent": "This Express route listens for GET requests at '/api/stock/:symbol'",
                    "codeSegments": [
                        {
                            "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {",
                            "line": 15
                        }
                    ]
                },
                {
                    "summaryComponent": "extracts the stock symbol from the URL",
                    "codeSegments": [
                        {
                            "code": "const symbol = req.params.symbol.toUpperCase();",
                            "line": 17
                        }
                    ]
                },
                {
                    "summaryComponent": "converts it to uppercase",
                    "codeSegments": [
                        {
                            "code": "toUpperCase()",
                            "line": 17
                        }
                    ]
                },
                {
                    "summaryComponent": "queries Yahoo Finance for daily chart data starting from January 1, 2024",
                    "codeSegments": [
                        {
                            "code": "const data = await yahooFinance.chart(symbol, {",
                            "line": 18
                        },
                        {
                            "code": "period1: \"2024-01-01\",",
                            "line": 19
                        },
                        {
                            "code": "interval: \"1d\",",
                            "line": 20
                        }
                    ]
                },
                {
                    "summaryComponent": "extract the company's short name (if available)",
                    "codeSegments": [
                        {
                            "code": "const companyName = data.meta?.shortName || symbol;",
                            "line": 24
                        }
                    ]
                },
                {
                    "summaryComponent": "determines the current price from the latest quote",
                    "codeSegments": [
                        {
                            "code": "const currentPrice = quotes && quotes.length > 0 ? quotes[quotes.length - 1].close : null;",
                            "line": 27
                        }
                    ]
                },
                {
                    "summaryComponent": "maps the quotes to an array containing the date, closing price, and volume for each entry",
                    "codeSegments": [
                        {
                            "code": "data: quotes.map((q) => ({",
                            "line": 33
                        },
                        {
                            "code": "date: q.date,",
                            "line": 34
                        },
                        {
                            "code": "close: q.close,",
                            "line": 35
                        },
                        {
                            "code": "volume: q.volume,",
                            "line": 36
                        }
                    ]
                },
                {
                    "summaryComponent": "The response is structured as a JSON object with the ticker, company name, current price, and the processed data array",
                    "codeSegments": [
                        {
                            "code": "const response = {",
                            "line": 29
                        },
                        {
                            "code": "ticker: symbol,",
                            "line": 30
                        },
                        {
                            "code": "name: companyName,",
                            "line": 31
                        },
                        {
                            "code": "currentPrice: currentPrice,",
                            "line": 32
                        },
                        {
                            "code": "data: quotes.map((q) => ({",
                            "line": 33
                        }
                    ]
                },
                {
                    "summaryComponent": "logged to the console before being sent to the client",
                    "codeSegments": [
                        {
                            "code": "console.log(response);",
                            "line": 40
                        },
                        {
                            "code": "res.json(response);",
                            "line": 41
                        }
                    ]
                },
                {
                    "summaryComponent": "logs the error and responds with a 500 status and an error message",
                    "codeSegments": [
                        {
                            "code": "console.error(err);",
                            "line": 43
                        },
                        {
                            "code": "res.status(500).send(\"Error fetching stock data\");",
                            "line": 44
                        }
                    ]
                }
            ],
            "summary": "This Express route listens for GET requests at '/api/stock/:symbol', where it extracts the stock symbol from the URL, converts it to uppercase, and queries Yahoo Finance for daily chart data starting from January 1, 2024. It processes the returned data to extract the company's short name (if available), determines the current price from the latest quote, and maps the quotes to an array containing the date, closing price, and volume for each entry. The response is structured as a JSON object with the ticker, company name, current price, and the processed data array, and is logged to the console before being sent to the client. In case of any errors during the fetch or processing, the route logs the error and responds with a 500 status and an error message."
        },
        "id": "HRSGGMU8pHlOQ6gkIi9Z"
    },
    {
        "event": "create_new_section",
        "timestamp": "2025-08-17 11:21:03.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "section_data": {
                "metadata": {
                    "id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
                    "fullPath": "/project/workspace/server/index.js",
                    "offset": 304,
                    "filename": "index.js",
                    "originalCode": "app.get(\"/api/stock/:symbol\", async (req, res) => {\n  try {\n    const symbol = req.params.symbol.toUpperCase();\n    const data = await yahooFinance.chart(symbol, {\n      period1: \"2024-01-01\",\n      interval: \"1d\",\n    });\n    const quotes = data.quotes;\n\n    const companyName = data.meta?.shortName || symbol;\n\n    // Get current price from the latest quote if available\n    const currentPrice = quotes && quotes.length > 0 ? quotes[quotes.length - 1].close : null;\n\n    const response = {\n      ticker: symbol,\n      name: companyName,\n      currentPrice: currentPrice,\n      data: quotes.map((q) => ({\n        date: q.date,\n        close: q.close,\n        volume: q.volume,\n      })),\n    };\n\n    console.log(response);\n    res.json(response);\n  } catch (err) {\n    console.error(err);\n    res.status(500).send(\"Error fetching stock data\");\n  }\n});"
                },
                "summaryMappings": {
                    "high_structured": [
                        {
                            "summaryComponent": "Defines a GET endpoint at '/api/stock/:symbol' for fetching stock data",
                            "codeSegments": [
                                {
                                    "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {",
                                    "line": 15
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Extracts the stock symbol from the request parameters and converts it to uppercase",
                            "codeSegments": [
                                {
                                    "code": "const symbol = req.params.symbol.toUpperCase();",
                                    "line": 17
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Fetches daily stock chart data from Yahoo Finance starting from 2024-01-01",
                            "codeSegments": [
                                {
                                    "code": "const data = await yahooFinance.chart(symbol, {",
                                    "line": 18
                                },
                                {
                                    "code": "period1: \"2024-01-01\",",
                                    "line": 19
                                },
                                {
                                    "code": "interval: \"1d\",",
                                    "line": 20
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Retrieves the company's short name if available, otherwise uses the symbol",
                            "codeSegments": [
                                {
                                    "code": "const companyName = data.meta?.shortName || symbol;",
                                    "line": 24
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Determines the current price from the latest quote and includes it in the response",
                            "codeSegments": [
                                {
                                    "code": "const currentPrice = quotes && quotes.length > 0 ? quotes[quotes.length - 1].close : null;",
                                    "line": 27
                                },
                                {
                                    "code": "currentPrice: currentPrice,",
                                    "line": 32
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Maps each quote to an object containing date, close price, and volume",
                            "codeSegments": [
                                {
                                    "code": "data: quotes.map((q) => ({",
                                    "line": 33
                                },
                                {
                                    "code": "date: q.date,",
                                    "line": 34
                                },
                                {
                                    "code": "close: q.close,",
                                    "line": 35
                                },
                                {
                                    "code": "volume: q.volume,",
                                    "line": 36
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Constructs a response object with:",
                            "codeSegments": [
                                {
                                    "code": "const response = {",
                                    "line": 29
                                }
                            ]
                        },
                        {
                            "summaryComponent": "ticker (symbol), name (company name), currentPrice (latest close), and data (array of mapped quotes)",
                            "codeSegments": [
                                {
                                    "code": "ticker: symbol,",
                                    "line": 30
                                },
                                {
                                    "code": "name: companyName,",
                                    "line": 31
                                },
                                {
                                    "code": "currentPrice: currentPrice,",
                                    "line": 32
                                },
                                {
                                    "code": "data: quotes.map((q) => ({",
                                    "line": 33
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Logs the response object to the console",
                            "codeSegments": [
                                {
                                    "code": "console.log(response);",
                                    "line": 40
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Sends the response as JSON to the client",
                            "codeSegments": [
                                {
                                    "code": "res.json(response);",
                                    "line": 41
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Handles errors by logging them and returning a 500 status with an error message",
                            "codeSegments": [
                                {
                                    "code": "console.error(err);",
                                    "line": 43
                                },
                                {
                                    "code": "res.status(500).send(\"Error fetching stock data\");",
                                    "line": 44
                                }
                            ]
                        }
                    ],
                    "low_structured": [
                        {
                            "summaryComponent": "Sets up an API endpoint for stock data",
                            "codeSegments": [
                                {
                                    "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {",
                                    "line": 15
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Fetches and returns data for a requested stock symbol",
                            "codeSegments": [
                                {
                                    "code": "const symbol = req.params.symbol.toUpperCase();",
                                    "line": 17
                                },
                                {
                                    "code": "const data = await yahooFinance.chart(symbol, {",
                                    "line": 18
                                },
                                {
                                    "code": "res.json(response);",
                                    "line": 41
                                }
                            ]
                        },
                        {
                            "summaryComponent": "now includes the current price in the response",
                            "codeSegments": [
                                {
                                    "code": "const currentPrice = quotes && quotes.length > 0 ? quotes[quotes.length - 1].close : null;",
                                    "line": 27
                                },
                                {
                                    "code": "currentPrice: currentPrice,",
                                    "line": 32
                                }
                            ]
                        }
                    ],
                    "medium_structured": [
                        {
                            "summaryComponent": "Handles GET requests at '/api/stock/:symbol'",
                            "codeSegments": [
                                {
                                    "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {",
                                    "line": 15
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Fetches daily stock chart data from Yahoo Finance starting from 2024-01-01",
                            "codeSegments": [
                                {
                                    "code": "const data = await yahooFinance.chart(symbol, {",
                                    "line": 18
                                },
                                {
                                    "code": "period1: \"2024-01-01\",",
                                    "line": 19
                                },
                                {
                                    "code": "interval: \"1d\",",
                                    "line": 20
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Formats the response to include:",
                            "codeSegments": [
                                {
                                    "code": "const response = {",
                                    "line": 29
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Ticker symbol and company name",
                            "codeSegments": [
                                {
                                    "code": "ticker: symbol,",
                                    "line": 30
                                },
                                {
                                    "code": "name: companyName,",
                                    "line": 31
                                }
                            ]
                        },
                        {
                            "summaryComponent": "The current price from the latest quote",
                            "codeSegments": [
                                {
                                    "code": "currentPrice: currentPrice,",
                                    "line": 32
                                },
                                {
                                    "code": "const currentPrice = quotes && quotes.length > 0 ? quotes[quotes.length - 1].close : null;",
                                    "line": 27
                                }
                            ]
                        },
                        {
                            "summaryComponent": "An array of objects with date, close, and volume",
                            "codeSegments": [
                                {
                                    "code": "data: quotes.map((q) => ({",
                                    "line": 33
                                },
                                {
                                    "code": "date: q.date,",
                                    "line": 34
                                },
                                {
                                    "code": "close: q.close,",
                                    "line": 35
                                },
                                {
                                    "code": "volume: q.volume,",
                                    "line": 36
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Returns the formatted data as JSON or an error message if fetching fails",
                            "codeSegments": [
                                {
                                    "code": "res.json(response);",
                                    "line": 41
                                },
                                {
                                    "code": "res.status(500).send(\"Error fetching stock data\");",
                                    "line": 44
                                }
                            ]
                        }
                    ],
                    "medium_unstructured": [
                        {
                            "summaryComponent": "This Express route handles GET requests to '/api/stock/:symbol'",
                            "codeSegments": [
                                {
                                    "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {",
                                    "line": 15
                                }
                            ]
                        },
                        {
                            "summaryComponent": "by fetching historical stock data for the specified symbol from Yahoo Finance",
                            "codeSegments": [
                                {
                                    "code": "const symbol = req.params.symbol.toUpperCase();",
                                    "line": 17
                                },
                                {
                                    "code": "const data = await yahooFinance.chart(symbol, {",
                                    "line": 18
                                }
                            ]
                        },
                        {
                            "summaryComponent": "It formats the data to include the ticker",
                            "codeSegments": [
                                {
                                    "code": "ticker: symbol,",
                                    "line": 30
                                }
                            ]
                        },
                        {
                            "summaryComponent": "company name",
                            "codeSegments": [
                                {
                                    "code": "const companyName = data.meta?.shortName || symbol;",
                                    "line": 24
                                },
                                {
                                    "code": "name: companyName,",
                                    "line": 31
                                }
                            ]
                        },
                        {
                            "summaryComponent": "the current price (from the latest quote)",
                            "codeSegments": [
                                {
                                    "code": "const currentPrice = quotes && quotes.length > 0 ? quotes[quotes.length - 1].close : null;",
                                    "line": 27
                                },
                                {
                                    "code": "currentPrice: currentPrice,",
                                    "line": 32
                                }
                            ]
                        },
                        {
                            "summaryComponent": "an array of date, close, and volume values",
                            "codeSegments": [
                                {
                                    "code": "data: quotes.map((q) => ({",
                                    "line": 33
                                },
                                {
                                    "code": "date: q.date,",
                                    "line": 34
                                },
                                {
                                    "code": "close: q.close,",
                                    "line": 35
                                },
                                {
                                    "code": "volume: q.volume,",
                                    "line": 36
                                }
                            ]
                        },
                        {
                            "summaryComponent": "then returns this as JSON",
                            "codeSegments": [
                                {
                                    "code": "res.json(response);",
                                    "line": 41
                                }
                            ]
                        },
                        {
                            "summaryComponent": "If an error occurs",
                            "codeSegments": [
                                {
                                    "code": "catch (err) {",
                                    "line": 42
                                }
                            ]
                        },
                        {
                            "summaryComponent": "it responds with a 500 status and an error message",
                            "codeSegments": [
                                {
                                    "code": "res.status(500).send(\"Error fetching stock data\");",
                                    "line": 44
                                }
                            ]
                        }
                    ],
                    "high_unstructured": [
                        {
                            "summaryComponent": "This Express route listens for GET requests at '/api/stock/:symbol'",
                            "codeSegments": [
                                {
                                    "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {",
                                    "line": 15
                                }
                            ]
                        },
                        {
                            "summaryComponent": "extracts the stock symbol from the URL",
                            "codeSegments": [
                                {
                                    "code": "const symbol = req.params.symbol.toUpperCase();",
                                    "line": 17
                                }
                            ]
                        },
                        {
                            "summaryComponent": "converts it to uppercase",
                            "codeSegments": [
                                {
                                    "code": "toUpperCase()",
                                    "line": 17
                                }
                            ]
                        },
                        {
                            "summaryComponent": "queries Yahoo Finance for daily chart data starting from January 1, 2024",
                            "codeSegments": [
                                {
                                    "code": "const data = await yahooFinance.chart(symbol, {",
                                    "line": 18
                                },
                                {
                                    "code": "period1: \"2024-01-01\",",
                                    "line": 19
                                },
                                {
                                    "code": "interval: \"1d\",",
                                    "line": 20
                                }
                            ]
                        },
                        {
                            "summaryComponent": "extract the company's short name (if available)",
                            "codeSegments": [
                                {
                                    "code": "const companyName = data.meta?.shortName || symbol;",
                                    "line": 24
                                }
                            ]
                        },
                        {
                            "summaryComponent": "determines the current price from the latest quote",
                            "codeSegments": [
                                {
                                    "code": "const currentPrice = quotes && quotes.length > 0 ? quotes[quotes.length - 1].close : null;",
                                    "line": 27
                                }
                            ]
                        },
                        {
                            "summaryComponent": "maps the quotes to an array containing the date, closing price, and volume for each entry",
                            "codeSegments": [
                                {
                                    "code": "data: quotes.map((q) => ({",
                                    "line": 33
                                },
                                {
                                    "code": "date: q.date,",
                                    "line": 34
                                },
                                {
                                    "code": "close: q.close,",
                                    "line": 35
                                },
                                {
                                    "code": "volume: q.volume,",
                                    "line": 36
                                }
                            ]
                        },
                        {
                            "summaryComponent": "The response is structured as a JSON object with the ticker, company name, current price, and the processed data array",
                            "codeSegments": [
                                {
                                    "code": "const response = {",
                                    "line": 29
                                },
                                {
                                    "code": "ticker: symbol,",
                                    "line": 30
                                },
                                {
                                    "code": "name: companyName,",
                                    "line": 31
                                },
                                {
                                    "code": "currentPrice: currentPrice,",
                                    "line": 32
                                },
                                {
                                    "code": "data: quotes.map((q) => ({",
                                    "line": 33
                                }
                            ]
                        },
                        {
                            "summaryComponent": "logged to the console before being sent to the client",
                            "codeSegments": [
                                {
                                    "code": "console.log(response);",
                                    "line": 40
                                },
                                {
                                    "code": "res.json(response);",
                                    "line": 41
                                }
                            ]
                        },
                        {
                            "summaryComponent": "logs the error and responds with a 500 status and an error message",
                            "codeSegments": [
                                {
                                    "code": "console.error(err);",
                                    "line": 43
                                },
                                {
                                    "code": "res.status(500).send(\"Error fetching stock data\");",
                                    "line": 44
                                }
                            ]
                        }
                    ],
                    "low_unstructured": [
                        {
                            "summaryComponent": "defines an Express route",
                            "codeSegments": [
                                {
                                    "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {",
                                    "line": 15
                                }
                            ]
                        },
                        {
                            "summaryComponent": "returns stock data",
                            "codeSegments": [
                                {
                                    "code": "res.json(response);",
                                    "line": 41
                                }
                            ]
                        },
                        {
                            "summaryComponent": "for a given symbol",
                            "codeSegments": [
                                {
                                    "code": "const symbol = req.params.symbol.toUpperCase();",
                                    "line": 17
                                }
                            ]
                        },
                        {
                            "summaryComponent": "now also including the stock's current price in the response",
                            "codeSegments": [
                                {
                                    "code": "const currentPrice = quotes && quotes.length > 0 ? quotes[quotes.length - 1].close : null;",
                                    "line": 27
                                },
                                {
                                    "code": "currentPrice: currentPrice,",
                                    "line": 32
                                }
                            ]
                        }
                    ]
                },
                "summaryData": {
                    "high_structured": "• Defines a GET endpoint at '/api/stock/:symbol' for fetching stock data\n• Extracts the stock symbol from the request parameters and converts it to uppercase\n• Fetches daily stock chart data from Yahoo Finance starting from 2024-01-01\n• Processes the received data:\n  ◦ Retrieves the company's short name if available, otherwise uses the symbol\n  ◦ Determines the current price from the latest quote and includes it in the response\n  ◦ Maps each quote to an object containing date, close price, and volume\n• Constructs a response object with:\n  ◦ ticker (symbol), name (company name), currentPrice (latest close), and data (array of mapped quotes)\n• Logs the response object to the console\n• Sends the response as JSON to the client\n• Handles errors by logging them and returning a 500 status with an error message",
                    "low_structured": "• Sets up an API endpoint for stock data\n• Fetches and returns data for a requested stock symbol, and now includes the current price in the response",
                    "title": "Express Route for Fetching Stock Data with Current Price from Yahoo Finance",
                    "medium_structured": "• Handles GET requests at '/api/stock/:symbol'\n• Fetches daily stock chart data from Yahoo Finance starting from 2024-01-01\n• Formats the response to include:\n  ◦ Ticker symbol and company name\n  ◦ The current price from the latest quote\n  ◦ An array of objects with date, close, and volume\n• Returns the formatted data as JSON or an error message if fetching fails",
                    "medium_unstructured": "This Express route handles GET requests to '/api/stock/:symbol' by fetching historical stock data for the specified symbol from Yahoo Finance. It formats the data to include the ticker, company name, the current price (from the latest quote), and an array of date, close, and volume values, then returns this as JSON. If an error occurs, it responds with a 500 status and an error message.",
                    "high_unstructured": "This Express route listens for GET requests at '/api/stock/:symbol', where it extracts the stock symbol from the URL, converts it to uppercase, and queries Yahoo Finance for daily chart data starting from January 1, 2024. It processes the returned data to extract the company's short name (if available), determines the current price from the latest quote, and maps the quotes to an array containing the date, closing price, and volume for each entry. The response is structured as a JSON object with the ticker, company name, current price, and the processed data array, and is logged to the console before being sent to the client. In case of any errors during the fetch or processing, the route logs the error and responds with a 500 status and an error message.",
                    "low_unstructured": "This code defines an Express route that returns stock data for a given symbol, now also including the stock's current price in the response."
                },
                "lines": [
                    15,
                    46
                ],
                "oldSummaryData": {
                    "high_structured": "• Defines a GET endpoint at '/api/stock/:symbol' for fetching stock data\n• Extracts the stock symbol from the request parameters and converts it to uppercase\n• Fetches daily stock chart data from Yahoo Finance starting from 2024-01-01\n• Processes the received data:\n  ◦ Retrieves the company's short name if available, otherwise uses the symbol\n  ◦ Maps each quote to an object containing date, close price, and volume\n• Constructs a response object with:\n  ◦ ticker (symbol), name (company name), and data (array of mapped quotes)\n• Logs the response object to the console\n• Sends the response as JSON to the client\n• Handles errors by logging them and returning a 500 status with an error message",
                    "low_structured": "• Sets up an API endpoint for stock data\n• Fetches and returns data for a requested stock symbol",
                    "title": "Express Route for Fetching Stock Data from Yahoo Finance",
                    "medium_structured": "• Handles GET requests at '/api/stock/:symbol'\n• Fetches daily stock chart data from Yahoo Finance starting from 2024-01-01\n• Formats the response to include:\n  ◦ Ticker symbol and company name\n  ◦ An array of objects with date, close, and volume\n• Returns the formatted data as JSON or an error message if fetching fails",
                    "medium_unstructured": "This Express route handles GET requests to '/api/stock/:symbol' by fetching historical stock data for the specified symbol from Yahoo Finance. It formats the data to include the ticker, company name, and an array of date, close, and volume values, then returns this as JSON. If an error occurs, it responds with a 500 status and an error message.",
                    "high_unstructured": "This Express route listens for GET requests at '/api/stock/:symbol', where it extracts the stock symbol from the URL, converts it to uppercase, and queries Yahoo Finance for daily chart data starting from January 1, 2024. It processes the returned data to extract the company's short name (if available), and maps the quotes to an array containing the date, closing price, and volume for each entry. The response is structured as a JSON object with the ticker, company name, and the processed data array, and is logged to the console before being sent to the client. In case of any errors during the fetch or processing, the route logs the error and responds with a 500 status and an error message.",
                    "low_unstructured": "This code defines an Express route that returns stock data for a given symbol."
                },
                "selectedDetailLevel": "medium",
                "selectedStructured": "unstructured",
                "editPromptValue": "",
                "title": "Express Route for Fetching Stock Data with Current Price from Yahoo Finance",
                "createdAt": 1755415263000,
                "editPromptDetailLevel": null,
                "editPromptStructured": null
            }
        },
        "id": "cgSFSflp5MVbp0tfVsos"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:21:19.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "9phuSedK8BSvjE54uuQM"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:21:19.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "AYnt0oL4CxbLfi1LN36F"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:21:19.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "bRS5cRZe8U9TzqjBwyyi"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:21:19.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "mapping_index": 1,
            "detail_level": "medium"
        },
        "id": "ecbgZhnVMFSPwN5ueAAA"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:21:19.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "mapping_index": 2,
            "detail_level": "medium"
        },
        "id": "ffP37oZVRnS5s6er8UF4"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:21:19.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "mapping_index": 0,
            "detail_level": "medium"
        },
        "id": "nwDDkQT7dlfGjxhqMh9g"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:21:19.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "mapping_index": 1,
            "detail_level": "medium"
        },
        "id": "t55ADi3tmKRhWj3UoNg5"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:21:19.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "mapping_index": 5,
            "detail_level": "medium"
        },
        "id": "yiDiHTkNzSZ5grIvhkbs"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:21:19.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "zACsZxwA2laJTFsTIArK"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:21:20.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "7EzOIly6DxCsTy1wOoT6"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:21:20.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "mapping_index": 4,
            "detail_level": "medium"
        },
        "id": "P2TLCjhJO0tjE0kKSAnl"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:21:20.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "i4wiAuBNg4sX76VaROCU"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:21:20.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "qQiI7NG2BawwFmLypYVi"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:21:20.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "mapping_index": 6,
            "detail_level": "medium"
        },
        "id": "u8PX2P9o9873x6jHlNAz"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:21:21.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "mapping_index": 4,
            "detail_level": "medium"
        },
        "id": "Gx8wb7L4sSYUhCTdcLEx"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:21:21.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "mapping_index": 5,
            "detail_level": "medium"
        },
        "id": "QWfu15w8c0ZU16VYanHl"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:21:21.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "UHjJLOd5d13zesv6ih5O"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:21:22.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "mapping_index": 5,
            "detail_level": "medium"
        },
        "id": "4DZ8k7yFqgrdLeadpL77"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:21:22.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "DVvNuu6QXdpYmK798VQZ"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:21:23.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "DqhA8XDIYhMKLrIrxjue"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:21:23.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "GglibYHUjGWtFr1yVPm4"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:21:23.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "HfAWTyRZvVLPCjIqMZ28"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:21:23.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "mapping_index": 7,
            "detail_level": "medium"
        },
        "id": "McFIyPwS7KvZGpMP1Mbq"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:21:23.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "mapping_index": 8,
            "detail_level": "medium"
        },
        "id": "W833rZuJX004hPa2mseq"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:21:23.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "mapping_index": 6,
            "detail_level": "medium"
        },
        "id": "X3t2eJacr1oJNwPPYnJk"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:21:24.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "mapping_index": 6,
            "detail_level": "medium"
        },
        "id": "993skWiAnEAyDI41XOka"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:21:24.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "A9lheuiQmQuLLrICHCma"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:21:24.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "mapping_index": 4,
            "detail_level": "medium"
        },
        "id": "Dlf9TXVmRRLYChv2xGiq"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:21:24.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "mapping_index": 6,
            "detail_level": "medium"
        },
        "id": "Jc2HkPYE0hBuFaBKHDx8"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:21:24.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "KrtPb7c2JQ5XYyTM0js0"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:21:24.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "Xl1PKyUF9w7rEq6AbxMd"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:21:24.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "mapping_index": 8,
            "detail_level": "medium"
        },
        "id": "ZY9224eZu0JnYs5UvN2S"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:21:24.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "dlSUCDtgl03XvWtybCJQ"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:21:24.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "mapping_index": 6,
            "detail_level": "medium"
        },
        "id": "fVBPkMQqg2zu2Cli9XsX"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:21:24.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "tfj2V7cKZ6nLxGaZwxvo"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:21:25.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "mapping_index": 4,
            "detail_level": "medium"
        },
        "id": "8567prrSYv5tzoVmhXJc"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:21:25.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "UzkSnTYPXFWsY7MuHcXT"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:21:25.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "mapping_index": 6,
            "detail_level": "medium"
        },
        "id": "xBXn9PlHLPc9a4GVjILv"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:21:25.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "yPABhxbjxtigMZJYzUcz"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:21:26.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "mapping_index": 0,
            "detail_level": "medium"
        },
        "id": "5GKhMoSo3y6nteKely9B"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:21:26.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "6OlTmtrgsjg9wWZXBwcS"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:21:26.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "mapping_index": 2,
            "detail_level": "medium"
        },
        "id": "7NOSqlGUdtiA6iZKDrmW"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:21:26.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "B54aLuQwKYgPQ2Ok1e33"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:21:26.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "DeTbIbj1eamUwocGz6wi"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:21:26.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "Hci35rUkCJK98HJPWF57"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:21:26.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "K6L0lbGrueKRUMPFqUma"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:21:26.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "mapping_index": 4,
            "detail_level": "medium"
        },
        "id": "NgdziZg74CMgT1x7kV8b"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:21:26.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "Nsr4rn7My4wm1u74kcy6"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:21:26.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "mapping_index": 0,
            "detail_level": "medium"
        },
        "id": "TJEi5KsLIvTyc0z8jlqz"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:21:26.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "mapping_index": 6,
            "detail_level": "medium"
        },
        "id": "WiBuqiNXNsu9wOOll09j"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:21:26.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "b7Yh1Pqu5r4lAfsypnUl"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:21:26.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "mapping_index": 4,
            "detail_level": "medium"
        },
        "id": "dPitE5pXkuq530WhIJo6"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:21:26.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "mapping_index": 1,
            "detail_level": "medium"
        },
        "id": "iVd2xDAKvLZ0TPheZnRS"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:21:26.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "mapping_index": 5,
            "detail_level": "medium"
        },
        "id": "itTRFDqA0ELGJbkXHCqB"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:21:26.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "mapping_index": 4,
            "detail_level": "medium"
        },
        "id": "pnlEvgXfLA5QToFo6Crf"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:21:26.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "r11CSTGpNj82hMQBZ5ha"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:21:26.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "yxc8USbdru57Xoy9sMbU"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:21:27.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "62Veu3ux5kWKPTfJq584"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:21:27.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "SFRydbO6Qfb87TZ648WL"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:21:27.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "mapping_index": 4,
            "detail_level": "medium"
        },
        "id": "Vt9dEuWS5YRCtl9qXxCl"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:21:27.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "XVKBq95VX1A71HEKu3TS"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:21:27.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "mapping_index": 2,
            "detail_level": "medium"
        },
        "id": "Z1uZV28cVGreb73gNvkK"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:21:27.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "ZlCg0v8rsGbBYVXBmEoc"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:21:27.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "mapping_index": 1,
            "detail_level": "medium"
        },
        "id": "jlTtRRwS4I1Mld2iFTxg"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:21:57.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "mapping_index": 8,
            "detail_level": "medium"
        },
        "id": "6IZRSpEG5OKtVqPKzRSa"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:21:57.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "B5qrqVIKIsFSNayklawv"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:21:57.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "mapping_index": 6,
            "detail_level": "medium"
        },
        "id": "Yohz7rZq8SN5cVrCAilt"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:21:58.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "1l78GK8gUxZhZ5VQnB3z"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:21:58.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "72cWppzeTu0H4wApX8yA"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:21:58.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "ERXxkUEe0wxUwRvrb853"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:21:58.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "FQ7fJaQnLA476vHHOBzJ"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:21:58.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "I1NXWetmaYvz8nfCahLA"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:21:58.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "mapping_index": 4,
            "detail_level": "medium"
        },
        "id": "Nj2AeGxIrV5gdl7obM4t"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:21:58.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "mapping_index": 8,
            "detail_level": "medium"
        },
        "id": "PVoKSYUVrJEopPfGSw6h"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:21:58.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "mapping_index": 2,
            "detail_level": "medium"
        },
        "id": "Vt2dZJzD7NJZ6d00A9Dk"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:21:58.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "W25NsEuxjVP2aRKNn440"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:21:58.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "ZfrBwYp87qBEHxbJInu7"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:21:58.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "mapping_index": 1,
            "detail_level": "medium"
        },
        "id": "nD3w284yvf3UNmG3fce4"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:21:58.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "mapping_index": 0,
            "detail_level": "medium"
        },
        "id": "rM9pIYlYBeAxCPnhnClW"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:21:58.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "mapping_index": 6,
            "detail_level": "medium"
        },
        "id": "x2mdlBtze7KY4ZQfEnN7"
    },
    {
        "event": "click_summarize_code",
        "timestamp": "2025-08-17 11:22:37.000",
        "source": "frontend",
        "data": {},
        "id": "uk2hmPqIbTgvMnVUcl1b"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:22:38.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "1sUWcCaCW3oVYevcv8B6"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:22:38.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "2pjN1egCo9Z1gQNb6f8R"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:22:38.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "3NUeTTm6Ze5iD5YReVaW"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:22:38.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "mapping_index": 2,
            "detail_level": "medium"
        },
        "id": "7IO7yxGN2BvE3c1dmUpB"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:22:38.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "7JC3Tw2cJ9zAF8t6M7zO"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:22:38.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "mapping_index": 6,
            "detail_level": "medium"
        },
        "id": "8L1WJO4iEZzGdrDPY3Wm"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:22:38.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "BjqMQEMNBsysXuGrCtIl"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:22:38.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "mapping_index": 4,
            "detail_level": "medium"
        },
        "id": "Eee0VHIKEerHvCTkytrX"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:22:38.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "G6Mh9oIXIcM7EOTCZVSg"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:22:38.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "GDOGAGdXanWn4jNq9B5a"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:22:38.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "Ljjzm7tJO56tHaB5xv1D"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:22:38.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "mapping_index": 1,
            "detail_level": "medium"
        },
        "id": "U1rSkgYkPSfSMlz6dBxk"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:22:38.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "mapping_index": 0,
            "detail_level": "medium"
        },
        "id": "cT725Zt8qNP5Ylzw7cu4"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:22:38.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "mapping_index": 1,
            "detail_level": "medium"
        },
        "id": "edP7orozzjZJYMXcIJkE"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:22:38.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "mapping_index": 0,
            "detail_level": "medium"
        },
        "id": "kUIdFVMZmwiYH8BTf0XP"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:22:38.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "mapping_index": 4,
            "detail_level": "medium"
        },
        "id": "ndaFumiD2CNEDIezjFEw"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:22:38.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "mapping_index": 1,
            "detail_level": "medium"
        },
        "id": "pz8MhOZy86xqFsE9Aqui"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:22:38.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "rWKBpJIzMVoLyDgq3cI3"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:22:38.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "mapping_index": 0,
            "detail_level": "medium"
        },
        "id": "vXQXYvrycxn6lKzDDfzO"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:22:38.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "xgII6xnUKs4iNaE9fFJh"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:22:40.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "mapping_index": 2,
            "detail_level": "medium"
        },
        "id": "DWK8cBGaPkFaqpEr9WVs"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:22:40.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "ZTPcOJboMfv4BPR4vBOu"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:22:40.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "mapping_index": 0,
            "detail_level": "medium"
        },
        "id": "pzn3QbmQr7703Ri69e3l"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:22:40.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "wwyVuVnv62NUvlLKxLrg"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:22:40.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "mapping_index": 0,
            "detail_level": "medium"
        },
        "id": "z2wqliyqqHzFDLcNVYTd"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:22:41.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "3Pj8ZsKlqoCDQwa5L6lB"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:22:41.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "ZUEjpMVy8KanXMMtsqJL"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:22:41.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "mapping_index": 4,
            "detail_level": "medium"
        },
        "id": "dAOtt5E9zZUVsgsg8x3g"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:22:41.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "dQrPWGR3aw0pHMwXESfe"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:22:41.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "mapping_index": 1,
            "detail_level": "medium"
        },
        "id": "gsvSXt9jCJZZZQwHvdAs"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:22:41.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "pqIuHJGvwcshPxhp6tXm"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:22:41.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "mapping_index": 1,
            "detail_level": "medium"
        },
        "id": "zn8ZGi3FenEsjbijqULz"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:22:42.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "mapping_index": 0,
            "detail_level": "medium"
        },
        "id": "dB6lg56GDWSAva5rqZV2"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:22:42.000",
        "source": "frontend",
        "data": {
            "section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "y2jHOfpTPH8tiLk6E5Vr"
    },
    {
        "event": "summarize_selected_code",
        "timestamp": "2025-08-17 11:22:43.000",
        "source": "backend",
        "data": {
            "selected_code": "const StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    const monthAbbr = [\n      \"Jan\",\n      \"Feb\",\n      \"Mar\",\n      \"Apr\",\n      \"May\",\n      \"Jun\",\n      \"Jul\",\n      \"Aug\",\n      \"Sep\",\n      \"Oct\",\n      \"Nov\",\n      \"Dec\",\n    ];\n    const datePart = date.split(\"T\")[0];\n    const [year, month, day] = datePart.split(\"-\");\n    return monthAbbr[parseInt(month, 10) - 1];\n  };\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatDateString} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n",
            "summary": {
                "high_structured": "• Defines the StockChart React component to visualize stock data\n• Validates the input data before rendering\n  ◦ Returns null if data is missing or empty\n• Extracts and displays the company name and ticker symbol\n• Processes the input data to create chartData objects\n  ◦ Each object contains a date and the corresponding closing price\n• Formats date labels on the X-axis to show month abbreviations\n• Renders a responsive line chart using Recharts components\n  ◦ Includes XAxis, YAxis, Tooltip, Legend, and a monotone Line for prices\n  ◦ Sets custom margins and disables dots on the line for clarity",
                "low_structured": "• Defines a React component for stock charts\n• Displays a line chart with company info\n• Uses provided data as input",
                "title": "StockChart Component for Rendering Stock Price Line Charts",
                "medium_structured": "• Renders a React component to display stock prices as a line chart\n• Extracts company name and ticker from the input data\n• Formats date labels to show month abbreviations\n• Uses Recharts components for chart rendering\n  ◦ Includes axes, legend, and tooltip for clarity",
                "medium_unstructured": "The StockChart component renders a line chart for stock prices using Recharts, displaying the company's name and ticker. It processes incoming data, formats date labels to show month abbreviations, and visualizes closing prices over time. The chart includes axes, a legend, and a tooltip for better readability.",
                "high_unstructured": "This code defines the StockChart React component, which visualizes stock closing prices over time using the Recharts library. It first checks for valid input data, extracting the company name and ticker for display. The component formats date labels to show only the month abbreviation, and transforms the raw data into a format suitable for the chart. The rendered chart includes a monotone line for prices, formatted axes, a legend, and a tooltip, all within a responsive container for flexible layout.",
                "low_unstructured": "This code defines a React component that displays a stock price line chart using provided data."
            }
        },
        "id": "qJEUikghpV6DVBJRewg3"
    },
    {
        "event": "toggle_section",
        "timestamp": "2025-08-17 11:22:44.000",
        "source": "frontend",
        "data": {
            "after_section_id": "a8e7f0fb-5377-4fc1-b093-6cd896de1048",
            "before_section_id": "e3e81346-765a-48b0-bf77-ddd058923f5e"
        },
        "id": "rfI6Cn5jssEoXeFLHQvG"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:22:45.000",
        "source": "frontend",
        "data": {
            "section_id": "a8e7f0fb-5377-4fc1-b093-6cd896de1048",
            "structured_type": "unstructured",
            "mapping_index": 0,
            "detail_level": "medium"
        },
        "id": "2oJSBinBm0byqnDGfTui"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:22:45.000",
        "source": "frontend",
        "data": {
            "section_id": "a8e7f0fb-5377-4fc1-b093-6cd896de1048",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "3Ulw8TdI6IMOgNsIMtha"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-17 11:22:45.000",
        "source": "backend",
        "data": {
            "code": "13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     const monthAbbr = [\n21:       \"Jan\",\n22:       \"Feb\",\n23:       \"Mar\",\n24:       \"Apr\",\n25:       \"May\",\n26:       \"Jun\",\n27:       \"Jul\",\n28:       \"Aug\",\n29:       \"Sep\",\n30:       \"Oct\",\n31:       \"Nov\",\n32:       \"Dec\",\n33:     ];\n34:     const datePart = date.split(\"T\")[0];\n35:     const [year, month, day] = datePart.split(\"-\");\n36:     return monthAbbr[parseInt(month, 10) - 1];\n37:   };\n38:   // Combine labels and values into an array of objects for Recharts\n39:   const chartData = data.data.map((item) => ({\n40:     date: item.date,\n41:     price: item.close,\n42:   }));\n43: \n44:   return (\n45:     <div style={{ marginTop: \"2rem\" }}>\n46:       <h3>\n47:         {company} ({ticker})\n48:       </h3>\n49:       <ResponsiveContainer width=\"100%\" height={300}>\n50:         <LineChart\n51:           data={chartData}\n52:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n53:         >\n54:           <XAxis dataKey=\"date\" tickFormatter={formatDateString} />\n55:           <YAxis domain={[\"auto\", \"auto\"]} />\n56:           <Tooltip />\n57:           <Legend />\n58:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n59:         </LineChart>\n60:       </ResponsiveContainer>\n61:     </div>\n62:   );\n63: };\n64: ",
            "mapping": [
                {
                    "summaryComponent": "Defines a React component for stock charts",
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        }
                    ]
                },
                {
                    "summaryComponent": "Displays a line chart with company info",
                    "codeSegments": [
                        {
                            "code": "<LineChart",
                            "line": 50
                        },
                        {
                            "code": "<h3>",
                            "line": 46
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 47
                        }
                    ]
                },
                {
                    "summaryComponent": "Uses provided data as input",
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        },
                        {
                            "code": "const chartData = data.data.map((item) => ({",
                            "line": 39
                        }
                    ]
                }
            ],
            "summary": "• Defines a React component for stock charts\n• Displays a line chart with company info\n• Uses provided data as input"
        },
        "id": "8IHNj2fzLaHg6pZrhOsh"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:22:45.000",
        "source": "frontend",
        "data": {
            "section_id": "a8e7f0fb-5377-4fc1-b093-6cd896de1048",
            "structured_type": "unstructured",
            "mapping_index": 4,
            "detail_level": "medium"
        },
        "id": "DhTmPOUTQTxwlmYqOlMo"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:22:45.000",
        "source": "frontend",
        "data": {
            "section_id": "a8e7f0fb-5377-4fc1-b093-6cd896de1048",
            "structured_type": "unstructured",
            "mapping_index": 1,
            "detail_level": "medium"
        },
        "id": "FRgMb2EYMBalgPHxzjet"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:22:45.000",
        "source": "frontend",
        "data": {
            "section_id": "a8e7f0fb-5377-4fc1-b093-6cd896de1048",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "ZgV39FTn5090LKNY0OKP"
    },
    {
        "event": "toggle_section",
        "timestamp": "2025-08-17 11:22:46.000",
        "source": "frontend",
        "data": {
            "after_section_id": null,
            "before_section_id": "a8e7f0fb-5377-4fc1-b093-6cd896de1048"
        },
        "id": "149adNu06bE84mXatD7V"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:22:46.000",
        "source": "frontend",
        "data": {
            "section_id": "a8e7f0fb-5377-4fc1-b093-6cd896de1048",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "JEUtcBStRz54icGC2j6E"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-17 11:22:46.000",
        "source": "backend",
        "data": {
            "code": "13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     const monthAbbr = [\n21:       \"Jan\",\n22:       \"Feb\",\n23:       \"Mar\",\n24:       \"Apr\",\n25:       \"May\",\n26:       \"Jun\",\n27:       \"Jul\",\n28:       \"Aug\",\n29:       \"Sep\",\n30:       \"Oct\",\n31:       \"Nov\",\n32:       \"Dec\",\n33:     ];\n34:     const datePart = date.split(\"T\")[0];\n35:     const [year, month, day] = datePart.split(\"-\");\n36:     return monthAbbr[parseInt(month, 10) - 1];\n37:   };\n38:   // Combine labels and values into an array of objects for Recharts\n39:   const chartData = data.data.map((item) => ({\n40:     date: item.date,\n41:     price: item.close,\n42:   }));\n43: \n44:   return (\n45:     <div style={{ marginTop: \"2rem\" }}>\n46:       <h3>\n47:         {company} ({ticker})\n48:       </h3>\n49:       <ResponsiveContainer width=\"100%\" height={300}>\n50:         <LineChart\n51:           data={chartData}\n52:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n53:         >\n54:           <XAxis dataKey=\"date\" tickFormatter={formatDateString} />\n55:           <YAxis domain={[\"auto\", \"auto\"]} />\n56:           <Tooltip />\n57:           <Legend />\n58:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n59:         </LineChart>\n60:       </ResponsiveContainer>\n61:     </div>\n62:   );\n63: };\n64: ",
            "mapping": [
                {
                    "summaryComponent": "defines a React component",
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        }
                    ]
                },
                {
                    "summaryComponent": "displays a stock price line chart",
                    "codeSegments": [
                        {
                            "code": "<LineChart",
                            "line": 50
                        },
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 58
                        }
                    ]
                },
                {
                    "summaryComponent": "using provided data",
                    "codeSegments": [
                        {
                            "code": "const chartData = data.data.map((item) => ({",
                            "line": 39
                        },
                        {
                            "code": "data={chartData}",
                            "line": 51
                        }
                    ]
                }
            ],
            "summary": "This code defines a React component that displays a stock price line chart using provided data."
        },
        "id": "xpA5L0K4vujCTAlrElhg"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-17 11:22:48.000",
        "source": "backend",
        "data": {
            "code": "13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     const monthAbbr = [\n21:       \"Jan\",\n22:       \"Feb\",\n23:       \"Mar\",\n24:       \"Apr\",\n25:       \"May\",\n26:       \"Jun\",\n27:       \"Jul\",\n28:       \"Aug\",\n29:       \"Sep\",\n30:       \"Oct\",\n31:       \"Nov\",\n32:       \"Dec\",\n33:     ];\n34:     const datePart = date.split(\"T\")[0];\n35:     const [year, month, day] = datePart.split(\"-\");\n36:     return monthAbbr[parseInt(month, 10) - 1];\n37:   };\n38:   // Combine labels and values into an array of objects for Recharts\n39:   const chartData = data.data.map((item) => ({\n40:     date: item.date,\n41:     price: item.close,\n42:   }));\n43: \n44:   return (\n45:     <div style={{ marginTop: \"2rem\" }}>\n46:       <h3>\n47:         {company} ({ticker})\n48:       </h3>\n49:       <ResponsiveContainer width=\"100%\" height={300}>\n50:         <LineChart\n51:           data={chartData}\n52:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n53:         >\n54:           <XAxis dataKey=\"date\" tickFormatter={formatDateString} />\n55:           <YAxis domain={[\"auto\", \"auto\"]} />\n56:           <Tooltip />\n57:           <Legend />\n58:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n59:         </LineChart>\n60:       </ResponsiveContainer>\n61:     </div>\n62:   );\n63: };\n64: ",
            "mapping": [
                {
                    "summaryComponent": "Renders a React component to display stock prices as a line chart",
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        },
                        {
                            "code": "<LineChart",
                            "line": 50
                        }
                    ]
                },
                {
                    "summaryComponent": "Extracts company name and ticker from the input data",
                    "codeSegments": [
                        {
                            "code": "const company = data.name;",
                            "line": 16
                        },
                        {
                            "code": "const ticker = data.ticker;",
                            "line": 17
                        }
                    ]
                },
                {
                    "summaryComponent": "Formats date labels to show month abbreviations",
                    "codeSegments": [
                        {
                            "code": "const formatDateString = (date) => {",
                            "line": 19
                        },
                        {
                            "code": "const monthAbbr = [",
                            "line": 20
                        },
                        {
                            "code": "return monthAbbr[parseInt(month, 10) - 1];",
                            "line": 36
                        },
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                            "line": 54
                        }
                    ]
                },
                {
                    "summaryComponent": "Uses Recharts components for chart rendering",
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 49
                        },
                        {
                            "code": "<LineChart",
                            "line": 50
                        }
                    ]
                },
                {
                    "summaryComponent": "Includes axes, legend, and tooltip for clarity",
                    "codeSegments": [
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                            "line": 54
                        },
                        {
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                            "line": 55
                        },
                        {
                            "code": "<Tooltip />",
                            "line": 56
                        },
                        {
                            "code": "<Legend />",
                            "line": 57
                        }
                    ]
                }
            ],
            "summary": "• Renders a React component to display stock prices as a line chart\n• Extracts company name and ticker from the input data\n• Formats date labels to show month abbreviations\n• Uses Recharts components for chart rendering\n  ◦ Includes axes, legend, and tooltip for clarity"
        },
        "id": "Xvnd5YNSoeN0Up2uK15y"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-17 11:22:49.000",
        "source": "backend",
        "data": {
            "code": "13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     const monthAbbr = [\n21:       \"Jan\",\n22:       \"Feb\",\n23:       \"Mar\",\n24:       \"Apr\",\n25:       \"May\",\n26:       \"Jun\",\n27:       \"Jul\",\n28:       \"Aug\",\n29:       \"Sep\",\n30:       \"Oct\",\n31:       \"Nov\",\n32:       \"Dec\",\n33:     ];\n34:     const datePart = date.split(\"T\")[0];\n35:     const [year, month, day] = datePart.split(\"-\");\n36:     return monthAbbr[parseInt(month, 10) - 1];\n37:   };\n38:   // Combine labels and values into an array of objects for Recharts\n39:   const chartData = data.data.map((item) => ({\n40:     date: item.date,\n41:     price: item.close,\n42:   }));\n43: \n44:   return (\n45:     <div style={{ marginTop: \"2rem\" }}>\n46:       <h3>\n47:         {company} ({ticker})\n48:       </h3>\n49:       <ResponsiveContainer width=\"100%\" height={300}>\n50:         <LineChart\n51:           data={chartData}\n52:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n53:         >\n54:           <XAxis dataKey=\"date\" tickFormatter={formatDateString} />\n55:           <YAxis domain={[\"auto\", \"auto\"]} />\n56:           <Tooltip />\n57:           <Legend />\n58:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n59:         </LineChart>\n60:       </ResponsiveContainer>\n61:     </div>\n62:   );\n63: };\n64: ",
            "mapping": [
                {
                    "summaryComponent": "Defines the StockChart React component to visualize stock data",
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        }
                    ]
                },
                {
                    "summaryComponent": "Validates the input data before rendering",
                    "codeSegments": [
                        {
                            "code": "if (!data || !data.data || !data.data.length) return null;",
                            "line": 14
                        }
                    ]
                },
                {
                    "summaryComponent": "Returns null if data is missing or empty",
                    "codeSegments": [
                        {
                            "code": "if (!data || !data.data || !data.data.length) return null;",
                            "line": 14
                        }
                    ]
                },
                {
                    "summaryComponent": "Extracts and displays the company name and ticker symbol",
                    "codeSegments": [
                        {
                            "code": "const company = data.name;",
                            "line": 16
                        },
                        {
                            "code": "const ticker = data.ticker;",
                            "line": 17
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 47
                        }
                    ]
                },
                {
                    "summaryComponent": "Processes the input data to create chartData objects",
                    "codeSegments": [
                        {
                            "code": "const chartData = data.data.map((item) => ({",
                            "line": 39
                        }
                    ]
                },
                {
                    "summaryComponent": "Each object contains a date and the corresponding closing price",
                    "codeSegments": [
                        {
                            "code": "date: item.date,",
                            "line": 40
                        },
                        {
                            "code": "price: item.close,",
                            "line": 41
                        }
                    ]
                },
                {
                    "summaryComponent": "Formats date labels on the X-axis to show month abbreviations",
                    "codeSegments": [
                        {
                            "code": "const formatDateString = (date) => {",
                            "line": 19
                        },
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                            "line": 54
                        }
                    ]
                },
                {
                    "summaryComponent": "Renders a responsive line chart using Recharts components",
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 49
                        },
                        {
                            "code": "<LineChart",
                            "line": 50
                        }
                    ]
                },
                {
                    "summaryComponent": "Includes XAxis, YAxis, Tooltip, Legend, and a monotone Line for prices",
                    "codeSegments": [
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                            "line": 54
                        },
                        {
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                            "line": 55
                        },
                        {
                            "code": "<Tooltip />",
                            "line": 56
                        },
                        {
                            "code": "<Legend />",
                            "line": 57
                        },
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 58
                        }
                    ]
                },
                {
                    "summaryComponent": "Sets custom margins and disables dots on the line for clarity",
                    "codeSegments": [
                        {
                            "code": "margin={{ top: 10, right: 30, left: 0, bottom: 0 }}",
                            "line": 52
                        },
                        {
                            "code": "dot={false}",
                            "line": 58
                        }
                    ]
                }
            ],
            "summary": "• Defines the StockChart React component to visualize stock data\n• Validates the input data before rendering\n  ◦ Returns null if data is missing or empty\n• Extracts and displays the company name and ticker symbol\n• Processes the input data to create chartData objects\n  ◦ Each object contains a date and the corresponding closing price\n• Formats date labels on the X-axis to show month abbreviations\n• Renders a responsive line chart using Recharts components\n  ◦ Includes XAxis, YAxis, Tooltip, Legend, and a monotone Line for prices\n  ◦ Sets custom margins and disables dots on the line for clarity"
        },
        "id": "MbWE76ybQxtprWpE9maF"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-17 11:22:49.000",
        "source": "backend",
        "data": {
            "code": "13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     const monthAbbr = [\n21:       \"Jan\",\n22:       \"Feb\",\n23:       \"Mar\",\n24:       \"Apr\",\n25:       \"May\",\n26:       \"Jun\",\n27:       \"Jul\",\n28:       \"Aug\",\n29:       \"Sep\",\n30:       \"Oct\",\n31:       \"Nov\",\n32:       \"Dec\",\n33:     ];\n34:     const datePart = date.split(\"T\")[0];\n35:     const [year, month, day] = datePart.split(\"-\");\n36:     return monthAbbr[parseInt(month, 10) - 1];\n37:   };\n38:   // Combine labels and values into an array of objects for Recharts\n39:   const chartData = data.data.map((item) => ({\n40:     date: item.date,\n41:     price: item.close,\n42:   }));\n43: \n44:   return (\n45:     <div style={{ marginTop: \"2rem\" }}>\n46:       <h3>\n47:         {company} ({ticker})\n48:       </h3>\n49:       <ResponsiveContainer width=\"100%\" height={300}>\n50:         <LineChart\n51:           data={chartData}\n52:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n53:         >\n54:           <XAxis dataKey=\"date\" tickFormatter={formatDateString} />\n55:           <YAxis domain={[\"auto\", \"auto\"]} />\n56:           <Tooltip />\n57:           <Legend />\n58:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n59:         </LineChart>\n60:       </ResponsiveContainer>\n61:     </div>\n62:   );\n63: };\n64: ",
            "mapping": [
                {
                    "summaryComponent": "defines the StockChart React component",
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        }
                    ]
                },
                {
                    "summaryComponent": "visualizes stock closing prices over time using the Recharts library",
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 49
                        },
                        {
                            "code": "<LineChart",
                            "line": 50
                        },
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 58
                        }
                    ]
                },
                {
                    "summaryComponent": "checks for valid input data",
                    "codeSegments": [
                        {
                            "code": "if (!data || !data.data || !data.data.length) return null;",
                            "line": 14
                        }
                    ]
                },
                {
                    "summaryComponent": "extracting the company name and ticker for display",
                    "codeSegments": [
                        {
                            "code": "const company = data.name;",
                            "line": 16
                        },
                        {
                            "code": "const ticker = data.ticker;",
                            "line": 17
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 47
                        }
                    ]
                },
                {
                    "summaryComponent": "formats date labels to show only the month abbreviation",
                    "codeSegments": [
                        {
                            "code": "const formatDateString = (date) => {",
                            "line": 19
                        },
                        {
                            "code": "const monthAbbr = [",
                            "line": 20
                        },
                        {
                            "code": "return monthAbbr[parseInt(month, 10) - 1];",
                            "line": 36
                        },
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                            "line": 54
                        }
                    ]
                },
                {
                    "summaryComponent": "transforms the raw data into a format suitable for the chart",
                    "codeSegments": [
                        {
                            "code": "const chartData = data.data.map((item) => ({",
                            "line": 39
                        },
                        {
                            "code": "date: item.date,",
                            "line": 40
                        },
                        {
                            "code": "price: item.close,",
                            "line": 41
                        }
                    ]
                },
                {
                    "summaryComponent": "rendered chart includes a monotone line for prices",
                    "codeSegments": [
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 58
                        }
                    ]
                },
                {
                    "summaryComponent": "formatted axes",
                    "codeSegments": [
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                            "line": 54
                        },
                        {
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                            "line": 55
                        }
                    ]
                },
                {
                    "summaryComponent": "a legend, and a tooltip",
                    "codeSegments": [
                        {
                            "code": "<Tooltip />",
                            "line": 56
                        },
                        {
                            "code": "<Legend />",
                            "line": 57
                        }
                    ]
                },
                {
                    "summaryComponent": "within a responsive container for flexible layout",
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 49
                        }
                    ]
                }
            ],
            "summary": "This code defines the StockChart React component, which visualizes stock closing prices over time using the Recharts library. It first checks for valid input data, extracting the company name and ticker for display. The component formats date labels to show only the month abbreviation, and transforms the raw data into a format suitable for the chart. The rendered chart includes a monotone line for prices, formatted axes, a legend, and a tooltip, all within a responsive container for flexible layout."
        },
        "id": "NppwkKLCK0DAjIyxhwxH"
    },
    {
        "event": "autotransit_section",
        "timestamp": "2025-08-17 11:22:51.000",
        "source": "frontend",
        "data": {
            "after_section_id": "b5adac40-4b64-4bce-9970-7de460102f42",
            "before_section_id": null
        },
        "id": "GO0kika1DEIvgeR160Yu"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-17 11:22:51.000",
        "source": "backend",
        "data": {
            "code": "13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     const monthAbbr = [\n21:       \"Jan\",\n22:       \"Feb\",\n23:       \"Mar\",\n24:       \"Apr\",\n25:       \"May\",\n26:       \"Jun\",\n27:       \"Jul\",\n28:       \"Aug\",\n29:       \"Sep\",\n30:       \"Oct\",\n31:       \"Nov\",\n32:       \"Dec\",\n33:     ];\n34:     const datePart = date.split(\"T\")[0];\n35:     const [year, month, day] = datePart.split(\"-\");\n36:     return monthAbbr[parseInt(month, 10) - 1];\n37:   };\n38:   // Combine labels and values into an array of objects for Recharts\n39:   const chartData = data.data.map((item) => ({\n40:     date: item.date,\n41:     price: item.close,\n42:   }));\n43: \n44:   return (\n45:     <div style={{ marginTop: \"2rem\" }}>\n46:       <h3>\n47:         {company} ({ticker})\n48:       </h3>\n49:       <ResponsiveContainer width=\"100%\" height={300}>\n50:         <LineChart\n51:           data={chartData}\n52:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n53:         >\n54:           <XAxis dataKey=\"date\" tickFormatter={formatDateString} />\n55:           <YAxis domain={[\"auto\", \"auto\"]} />\n56:           <Tooltip />\n57:           <Legend />\n58:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n59:         </LineChart>\n60:       </ResponsiveContainer>\n61:     </div>\n62:   );\n63: };\n64: ",
            "mapping": [
                {
                    "summaryComponent": "The StockChart component",
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        }
                    ]
                },
                {
                    "summaryComponent": "renders a line chart for stock prices",
                    "codeSegments": [
                        {
                            "code": "<LineChart",
                            "line": 50
                        },
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 58
                        }
                    ]
                },
                {
                    "summaryComponent": "using Recharts",
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 49
                        },
                        {
                            "code": "<LineChart",
                            "line": 50
                        },
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 58
                        }
                    ]
                },
                {
                    "summaryComponent": "displaying the company's name and ticker",
                    "codeSegments": [
                        {
                            "code": "<h3>",
                            "line": 46
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 47
                        }
                    ]
                },
                {
                    "summaryComponent": "It processes incoming data",
                    "codeSegments": [
                        {
                            "code": "const chartData = data.data.map((item) => ({",
                            "line": 39
                        }
                    ]
                },
                {
                    "summaryComponent": "formats date labels to show month abbreviations",
                    "codeSegments": [
                        {
                            "code": "const formatDateString = (date) => {",
                            "line": 19
                        },
                        {
                            "code": "return monthAbbr[parseInt(month, 10) - 1];",
                            "line": 36
                        },
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                            "line": 54
                        }
                    ]
                },
                {
                    "summaryComponent": "and visualizes closing prices over time",
                    "codeSegments": [
                        {
                            "code": "price: item.close,",
                            "line": 41
                        },
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 58
                        }
                    ]
                },
                {
                    "summaryComponent": "The chart includes axes",
                    "codeSegments": [
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                            "line": 54
                        },
                        {
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                            "line": 55
                        }
                    ]
                },
                {
                    "summaryComponent": "a legend",
                    "codeSegments": [
                        {
                            "code": "<Legend />",
                            "line": 57
                        }
                    ]
                },
                {
                    "summaryComponent": "and a tooltip for better readability",
                    "codeSegments": [
                        {
                            "code": "<Tooltip />",
                            "line": 56
                        }
                    ]
                }
            ],
            "summary": "The StockChart component renders a line chart for stock prices using Recharts, displaying the company's name and ticker. It processes incoming data, formats date labels to show month abbreviations, and visualizes closing prices over time. The chart includes axes, a legend, and a tooltip for better readability."
        },
        "id": "t23bXYe1krZpeQ3jzOAb"
    },
    {
        "event": "create_new_section",
        "timestamp": "2025-08-17 11:22:51.000",
        "source": "frontend",
        "data": {
            "section_id": "b5adac40-4b64-4bce-9970-7de460102f42",
            "section_data": {
                "metadata": {
                    "id": "b5adac40-4b64-4bce-9970-7de460102f42",
                    "fullPath": "/project/workspace/frontend/src/StockChart.jsx",
                    "offset": 156,
                    "filename": "StockChart.jsx",
                    "originalCode": "const StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    const monthAbbr = [\n      \"Jan\",\n      \"Feb\",\n      \"Mar\",\n      \"Apr\",\n      \"May\",\n      \"Jun\",\n      \"Jul\",\n      \"Aug\",\n      \"Sep\",\n      \"Oct\",\n      \"Nov\",\n      \"Dec\",\n    ];\n    const datePart = date.split(\"T\")[0];\n    const [year, month, day] = datePart.split(\"-\");\n    return monthAbbr[parseInt(month, 10) - 1];\n  };\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatDateString} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n"
                },
                "summaryMappings": {
                    "high_structured": [
                        {
                            "summaryComponent": "Defines the StockChart React component to visualize stock data",
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Validates the input data before rendering",
                            "codeSegments": [
                                {
                                    "code": "if (!data || !data.data || !data.data.length) return null;",
                                    "line": 14
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Returns null if data is missing or empty",
                            "codeSegments": [
                                {
                                    "code": "if (!data || !data.data || !data.data.length) return null;",
                                    "line": 14
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Extracts and displays the company name and ticker symbol",
                            "codeSegments": [
                                {
                                    "code": "const company = data.name;",
                                    "line": 16
                                },
                                {
                                    "code": "const ticker = data.ticker;",
                                    "line": 17
                                },
                                {
                                    "code": "{company} ({ticker})",
                                    "line": 47
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Processes the input data to create chartData objects",
                            "codeSegments": [
                                {
                                    "code": "const chartData = data.data.map((item) => ({",
                                    "line": 39
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Each object contains a date and the corresponding closing price",
                            "codeSegments": [
                                {
                                    "code": "date: item.date,",
                                    "line": 40
                                },
                                {
                                    "code": "price: item.close,",
                                    "line": 41
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Formats date labels on the X-axis to show month abbreviations",
                            "codeSegments": [
                                {
                                    "code": "const formatDateString = (date) => {",
                                    "line": 19
                                },
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                                    "line": 54
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Renders a responsive line chart using Recharts components",
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 49
                                },
                                {
                                    "code": "<LineChart",
                                    "line": 50
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Includes XAxis, YAxis, Tooltip, Legend, and a monotone Line for prices",
                            "codeSegments": [
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                                    "line": 54
                                },
                                {
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                                    "line": 55
                                },
                                {
                                    "code": "<Tooltip />",
                                    "line": 56
                                },
                                {
                                    "code": "<Legend />",
                                    "line": 57
                                },
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 58
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Sets custom margins and disables dots on the line for clarity",
                            "codeSegments": [
                                {
                                    "code": "margin={{ top: 10, right: 30, left: 0, bottom: 0 }}",
                                    "line": 52
                                },
                                {
                                    "code": "dot={false}",
                                    "line": 58
                                }
                            ]
                        }
                    ],
                    "low_structured": [
                        {
                            "summaryComponent": "Defines a React component for stock charts",
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Displays a line chart with company info",
                            "codeSegments": [
                                {
                                    "code": "<LineChart",
                                    "line": 50
                                },
                                {
                                    "code": "<h3>",
                                    "line": 46
                                },
                                {
                                    "code": "{company} ({ticker})",
                                    "line": 47
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Uses provided data as input",
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                },
                                {
                                    "code": "const chartData = data.data.map((item) => ({",
                                    "line": 39
                                }
                            ]
                        }
                    ],
                    "medium_structured": [
                        {
                            "summaryComponent": "Renders a React component to display stock prices as a line chart",
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                },
                                {
                                    "code": "<LineChart",
                                    "line": 50
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Extracts company name and ticker from the input data",
                            "codeSegments": [
                                {
                                    "code": "const company = data.name;",
                                    "line": 16
                                },
                                {
                                    "code": "const ticker = data.ticker;",
                                    "line": 17
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Formats date labels to show month abbreviations",
                            "codeSegments": [
                                {
                                    "code": "const formatDateString = (date) => {",
                                    "line": 19
                                },
                                {
                                    "code": "const monthAbbr = [",
                                    "line": 20
                                },
                                {
                                    "code": "return monthAbbr[parseInt(month, 10) - 1];",
                                    "line": 36
                                },
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                                    "line": 54
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Uses Recharts components for chart rendering",
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 49
                                },
                                {
                                    "code": "<LineChart",
                                    "line": 50
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Includes axes, legend, and tooltip for clarity",
                            "codeSegments": [
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                                    "line": 54
                                },
                                {
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                                    "line": 55
                                },
                                {
                                    "code": "<Tooltip />",
                                    "line": 56
                                },
                                {
                                    "code": "<Legend />",
                                    "line": 57
                                }
                            ]
                        }
                    ],
                    "medium_unstructured": [
                        {
                            "summaryComponent": "The StockChart component",
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                }
                            ]
                        },
                        {
                            "summaryComponent": "renders a line chart for stock prices",
                            "codeSegments": [
                                {
                                    "code": "<LineChart",
                                    "line": 50
                                },
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 58
                                }
                            ]
                        },
                        {
                            "summaryComponent": "using Recharts",
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 49
                                },
                                {
                                    "code": "<LineChart",
                                    "line": 50
                                },
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 58
                                }
                            ]
                        },
                        {
                            "summaryComponent": "displaying the company's name and ticker",
                            "codeSegments": [
                                {
                                    "code": "<h3>",
                                    "line": 46
                                },
                                {
                                    "code": "{company} ({ticker})",
                                    "line": 47
                                }
                            ]
                        },
                        {
                            "summaryComponent": "It processes incoming data",
                            "codeSegments": [
                                {
                                    "code": "const chartData = data.data.map((item) => ({",
                                    "line": 39
                                }
                            ]
                        },
                        {
                            "summaryComponent": "formats date labels to show month abbreviations",
                            "codeSegments": [
                                {
                                    "code": "const formatDateString = (date) => {",
                                    "line": 19
                                },
                                {
                                    "code": "return monthAbbr[parseInt(month, 10) - 1];",
                                    "line": 36
                                },
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                                    "line": 54
                                }
                            ]
                        },
                        {
                            "summaryComponent": "and visualizes closing prices over time",
                            "codeSegments": [
                                {
                                    "code": "price: item.close,",
                                    "line": 41
                                },
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 58
                                }
                            ]
                        },
                        {
                            "summaryComponent": "The chart includes axes",
                            "codeSegments": [
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                                    "line": 54
                                },
                                {
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                                    "line": 55
                                }
                            ]
                        },
                        {
                            "summaryComponent": "a legend",
                            "codeSegments": [
                                {
                                    "code": "<Legend />",
                                    "line": 57
                                }
                            ]
                        },
                        {
                            "summaryComponent": "and a tooltip for better readability",
                            "codeSegments": [
                                {
                                    "code": "<Tooltip />",
                                    "line": 56
                                }
                            ]
                        }
                    ],
                    "high_unstructured": [
                        {
                            "summaryComponent": "defines the StockChart React component",
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                }
                            ]
                        },
                        {
                            "summaryComponent": "visualizes stock closing prices over time using the Recharts library",
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 49
                                },
                                {
                                    "code": "<LineChart",
                                    "line": 50
                                },
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 58
                                }
                            ]
                        },
                        {
                            "summaryComponent": "checks for valid input data",
                            "codeSegments": [
                                {
                                    "code": "if (!data || !data.data || !data.data.length) return null;",
                                    "line": 14
                                }
                            ]
                        },
                        {
                            "summaryComponent": "extracting the company name and ticker for display",
                            "codeSegments": [
                                {
                                    "code": "const company = data.name;",
                                    "line": 16
                                },
                                {
                                    "code": "const ticker = data.ticker;",
                                    "line": 17
                                },
                                {
                                    "code": "{company} ({ticker})",
                                    "line": 47
                                }
                            ]
                        },
                        {
                            "summaryComponent": "formats date labels to show only the month abbreviation",
                            "codeSegments": [
                                {
                                    "code": "const formatDateString = (date) => {",
                                    "line": 19
                                },
                                {
                                    "code": "const monthAbbr = [",
                                    "line": 20
                                },
                                {
                                    "code": "return monthAbbr[parseInt(month, 10) - 1];",
                                    "line": 36
                                },
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                                    "line": 54
                                }
                            ]
                        },
                        {
                            "summaryComponent": "transforms the raw data into a format suitable for the chart",
                            "codeSegments": [
                                {
                                    "code": "const chartData = data.data.map((item) => ({",
                                    "line": 39
                                },
                                {
                                    "code": "date: item.date,",
                                    "line": 40
                                },
                                {
                                    "code": "price: item.close,",
                                    "line": 41
                                }
                            ]
                        },
                        {
                            "summaryComponent": "rendered chart includes a monotone line for prices",
                            "codeSegments": [
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 58
                                }
                            ]
                        },
                        {
                            "summaryComponent": "formatted axes",
                            "codeSegments": [
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                                    "line": 54
                                },
                                {
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                                    "line": 55
                                }
                            ]
                        },
                        {
                            "summaryComponent": "a legend, and a tooltip",
                            "codeSegments": [
                                {
                                    "code": "<Tooltip />",
                                    "line": 56
                                },
                                {
                                    "code": "<Legend />",
                                    "line": 57
                                }
                            ]
                        },
                        {
                            "summaryComponent": "within a responsive container for flexible layout",
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 49
                                }
                            ]
                        }
                    ],
                    "low_unstructured": [
                        {
                            "summaryComponent": "defines a React component",
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                }
                            ]
                        },
                        {
                            "summaryComponent": "displays a stock price line chart",
                            "codeSegments": [
                                {
                                    "code": "<LineChart",
                                    "line": 50
                                },
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 58
                                }
                            ]
                        },
                        {
                            "summaryComponent": "using provided data",
                            "codeSegments": [
                                {
                                    "code": "const chartData = data.data.map((item) => ({",
                                    "line": 39
                                },
                                {
                                    "code": "data={chartData}",
                                    "line": 51
                                }
                            ]
                        }
                    ]
                },
                "summaryData": {
                    "high_structured": "• Defines the StockChart React component to visualize stock data\n• Validates the input data before rendering\n  ◦ Returns null if data is missing or empty\n• Extracts and displays the company name and ticker symbol\n• Processes the input data to create chartData objects\n  ◦ Each object contains a date and the corresponding closing price\n• Formats date labels on the X-axis to show month abbreviations\n• Renders a responsive line chart using Recharts components\n  ◦ Includes XAxis, YAxis, Tooltip, Legend, and a monotone Line for prices\n  ◦ Sets custom margins and disables dots on the line for clarity",
                    "low_structured": "• Defines a React component for stock charts\n• Displays a line chart with company info\n• Uses provided data as input",
                    "title": "StockChart Component for Rendering Stock Price Line Charts",
                    "medium_structured": "• Renders a React component to display stock prices as a line chart\n• Extracts company name and ticker from the input data\n• Formats date labels to show month abbreviations\n• Uses Recharts components for chart rendering\n  ◦ Includes axes, legend, and tooltip for clarity",
                    "medium_unstructured": "The StockChart component renders a line chart for stock prices using Recharts, displaying the company's name and ticker. It processes incoming data, formats date labels to show month abbreviations, and visualizes closing prices over time. The chart includes axes, a legend, and a tooltip for better readability.",
                    "high_unstructured": "This code defines the StockChart React component, which visualizes stock closing prices over time using the Recharts library. It first checks for valid input data, extracting the company name and ticker for display. The component formats date labels to show only the month abbreviation, and transforms the raw data into a format suitable for the chart. The rendered chart includes a monotone line for prices, formatted axes, a legend, and a tooltip, all within a responsive container for flexible layout.",
                    "low_unstructured": "This code defines a React component that displays a stock price line chart using provided data."
                },
                "lines": [
                    13,
                    64
                ],
                "selectedDetailLevel": "medium",
                "editPromptValue": "",
                "selectedStructured": "unstructured",
                "title": "StockChart Component for Rendering Stock Price Line Charts",
                "createdAt": 1755415371000,
                "editPromptDetailLevel": null,
                "editPromptStructured": null
            }
        },
        "id": "zWwSP61MuVKa3q2cZeL3"
    },
    {
        "event": "click_edit_in_prompt",
        "timestamp": "2025-08-17 11:23:51.000",
        "source": "frontend",
        "data": {
            "section_id": "b5adac40-4b64-4bce-9970-7de460102f42",
            "structured": "unstructured",
            "summary": "The StockChart component renders a line chart for stock prices using Recharts, displaying the company's name and ticker. It processes incoming data, formats date labels to show month abbreviations, and visualizes closing prices over time. The chart includes axes, a legend, and a tooltip for better readability.",
            "detail_level": "medium"
        },
        "id": "bBgCNNITvEHNsLZvZNUW"
    },
    {
        "event": "commit_direct_instruction",
        "timestamp": "2025-08-17 11:23:54.000",
        "source": "frontend",
        "data": {
            "section_id": "b5adac40-4b64-4bce-9970-7de460102f42",
            "instruction": "The backend now responds current stock price in the response with the key `.currentPrice`, please display it with a red dotted line"
        },
        "id": "HWl6a6PpsbpymxPphdP4"
    },
    {
        "event": "modify_direct_instruction",
        "timestamp": "2025-08-17 11:23:57.000",
        "source": "backend",
        "data": {
            "instruction": "The backend now responds current stock price in the response with the key `.currentPrice`, please display it with a red dotted line",
            "original_code": "const StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    const monthAbbr = [\n      \"Jan\",\n      \"Feb\",\n      \"Mar\",\n      \"Apr\",\n      \"May\",\n      \"Jun\",\n      \"Jul\",\n      \"Aug\",\n      \"Sep\",\n      \"Oct\",\n      \"Nov\",\n      \"Dec\",\n    ];\n    const datePart = date.split(\"T\")[0];\n    const [year, month, day] = datePart.split(\"-\");\n    return monthAbbr[parseInt(month, 10) - 1];\n  };\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatDateString} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n",
            "updated_code": "const StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    const monthAbbr = [\n      \"Jan\",\n      \"Feb\",\n      \"Mar\",\n      \"Apr\",\n      \"May\",\n      \"Jun\",\n      \"Jul\",\n      \"Aug\",\n      \"Sep\",\n      \"Oct\",\n      \"Nov\",\n      \"Dec\",\n    ];\n    const datePart = date.split(\"T\")[0];\n    const [year, month, day] = datePart.split(\"-\");\n    return monthAbbr[parseInt(month, 10) - 1];\n  };\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatDateString} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n          {data.currentPrice !== undefined && (\n            <ReferenceLine\n              y={data.currentPrice}\n              stroke=\"red\"\n              strokeDasharray=\"4 4\"\n              label={{ value: \"Current Price\", position: \"right\", fill: \"red\" }}\n            />\n          )}\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};"
        },
        "id": "L78LJkrm37NjxqSU34jc"
    },
    {
        "event": "summarize_modified_code",
        "timestamp": "2025-08-17 11:24:03.000",
        "source": "backend",
        "data": {
            "new_code": "const StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    const monthAbbr = [\n      \"Jan\",\n      \"Feb\",\n      \"Mar\",\n      \"Apr\",\n      \"May\",\n      \"Jun\",\n      \"Jul\",\n      \"Aug\",\n      \"Sep\",\n      \"Oct\",\n      \"Nov\",\n      \"Dec\",\n    ];\n    const datePart = date.split(\"T\")[0];\n    const [year, month, day] = datePart.split(\"-\");\n    return monthAbbr[parseInt(month, 10) - 1];\n  };\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatDateString} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n          {data.currentPrice !== undefined && (\n            <ReferenceLine\n              y={data.currentPrice}\n              stroke=\"red\"\n              strokeDasharray=\"4 4\"\n              label={{ value: \"Current Price\", position: \"right\", fill: \"red\" }}\n            />\n          )}\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};",
            "original_code": "const StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    const monthAbbr = [\n      \"Jan\",\n      \"Feb\",\n      \"Mar\",\n      \"Apr\",\n      \"May\",\n      \"Jun\",\n      \"Jul\",\n      \"Aug\",\n      \"Sep\",\n      \"Oct\",\n      \"Nov\",\n      \"Dec\",\n    ];\n    const datePart = date.split(\"T\")[0];\n    const [year, month, day] = datePart.split(\"-\");\n    return monthAbbr[parseInt(month, 10) - 1];\n  };\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatDateString} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n          {data.currentPrice !== undefined && (\n            <ReferenceLine\n              y={data.currentPrice}\n              stroke=\"red\"\n              strokeDasharray=\"4 4\"\n              label={{ value: \"Current Price\", position: \"right\", fill: \"red\" }}\n            />\n          )}\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};",
            "new_summary": {
                "high_structured": "• Defines the StockChart React component to visualize stock data\n• Validates the input data before rendering\n  ◦ Returns null if data is missing or empty\n• Extracts and displays the company name and ticker symbol\n• Processes the input data to create chartData objects\n  ◦ Each object contains a date and the corresponding closing price\n• Formats date labels on the X-axis to show month abbreviations\n• Renders a responsive line chart using Recharts components\n  ◦ Includes XAxis, YAxis, Tooltip, Legend, and a monotone Line for prices\n  ◦ Sets custom margins and disables dots on the line for clarity\n  ◦ Adds a red dashed ReferenceLine at the current price with a label if currentPrice is provided",
                "low_structured": "• Defines a React component for stock charts\n• Displays a line chart with company info\n• Uses provided data as input\n• Adds a red dashed reference line for the current price if present",
                "title": "StockChart Component with Current Price Reference Line",
                "medium_structured": "• Renders a React component to display stock prices as a line chart\n• Extracts company name and ticker from the input data\n• Formats date labels to show month abbreviations\n• Uses Recharts components for chart rendering\n  ◦ Includes axes, legend, and tooltip for clarity\n  ◦ Adds a red dashed ReferenceLine labeled 'Current Price' if current price data is available",
                "medium_unstructured": "The StockChart component renders a line chart for stock prices using Recharts, displaying the company's name and ticker. It processes incoming data, formats date labels to show month abbreviations, and visualizes closing prices over time. The chart now additionally includes a red dashed reference line labeled 'Current Price' if the current price is provided, along with axes, a legend, and a tooltip for better readability.",
                "high_unstructured": "This code defines the StockChart React component, which visualizes stock closing prices over time using the Recharts library. It first checks for valid input data, extracting the company name and ticker for display. The component formats date labels to show only the month abbreviation, and transforms the raw data into a format suitable for the chart. The rendered chart includes a monotone line for prices, formatted axes, a legend, a tooltip, and, if the current price is provided, a red dashed ReferenceLine labeled 'Current Price', all within a responsive container for flexible layout.",
                "low_unstructured": "This code defines a React component that displays a stock price line chart using provided data, and now also shows a red dashed reference line at the current price if available."
            },
            "old_summary": {
                "high_structured": "• Defines the StockChart React component to visualize stock data\n• Validates the input data before rendering\n  ◦ Returns null if data is missing or empty\n• Extracts and displays the company name and ticker symbol\n• Processes the input data to create chartData objects\n  ◦ Each object contains a date and the corresponding closing price\n• Formats date labels on the X-axis to show month abbreviations\n• Renders a responsive line chart using Recharts components\n  ◦ Includes XAxis, YAxis, Tooltip, Legend, and a monotone Line for prices\n  ◦ Sets custom margins and disables dots on the line for clarity",
                "low_structured": "• Defines a React component for stock charts\n• Displays a line chart with company info\n• Uses provided data as input",
                "title": "StockChart Component for Rendering Stock Price Line Charts",
                "medium_structured": "• Renders a React component to display stock prices as a line chart\n• Extracts company name and ticker from the input data\n• Formats date labels to show month abbreviations\n• Uses Recharts components for chart rendering\n  ◦ Includes axes, legend, and tooltip for clarity",
                "medium_unstructured": "The StockChart component renders a line chart for stock prices using Recharts, displaying the company's name and ticker. It processes incoming data, formats date labels to show month abbreviations, and visualizes closing prices over time. The chart includes axes, a legend, and a tooltip for better readability.",
                "high_unstructured": "This code defines the StockChart React component, which visualizes stock closing prices over time using the Recharts library. It first checks for valid input data, extracting the company name and ticker for display. The component formats date labels to show only the month abbreviation, and transforms the raw data into a format suitable for the chart. The rendered chart includes a monotone line for prices, formatted axes, a legend, and a tooltip, all within a responsive container for flexible layout.",
                "low_unstructured": "This code defines a React component that displays a stock price line chart using provided data."
            }
        },
        "id": "ok3BobFcKXNJI6UCaF0O"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-17 11:24:06.000",
        "source": "backend",
        "data": {
            "code": "13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     const monthAbbr = [\n21:       \"Jan\",\n22:       \"Feb\",\n23:       \"Mar\",\n24:       \"Apr\",\n25:       \"May\",\n26:       \"Jun\",\n27:       \"Jul\",\n28:       \"Aug\",\n29:       \"Sep\",\n30:       \"Oct\",\n31:       \"Nov\",\n32:       \"Dec\",\n33:     ];\n34:     const datePart = date.split(\"T\")[0];\n35:     const [year, month, day] = datePart.split(\"-\");\n36:     return monthAbbr[parseInt(month, 10) - 1];\n37:   };\n38:   // Combine labels and values into an array of objects for Recharts\n39:   const chartData = data.data.map((item) => ({\n40:     date: item.date,\n41:     price: item.close,\n42:   }));\n43: \n44:   return (\n45:     <div style={{ marginTop: \"2rem\" }}>\n46:       <h3>\n47:         {company} ({ticker})\n48:       </h3>\n49:       <ResponsiveContainer width=\"100%\" height={300}>\n50:         <LineChart\n51:           data={chartData}\n52:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n53:         >\n54:           <XAxis dataKey=\"date\" tickFormatter={formatDateString} />\n55:           <YAxis domain={[\"auto\", \"auto\"]} />\n56:           <Tooltip />\n57:           <Legend />\n58:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n59:           {data.currentPrice !== undefined && (\n60:             <ReferenceLine\n61:               y={data.currentPrice}\n62:               stroke=\"red\"\n63:               strokeDasharray=\"4 4\"\n64:               label={{ value: \"Current Price\", position: \"right\", fill: \"red\" }}\n65:             />\n66:           )}\n67:         </LineChart>\n68:       </ResponsiveContainer>\n69:     </div>\n70:   );\n71: };",
            "mapping": [
                {
                    "summaryComponent": "defines a React component",
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        }
                    ]
                },
                {
                    "summaryComponent": "displays a stock price line chart",
                    "codeSegments": [
                        {
                            "code": "<LineChart",
                            "line": 50
                        },
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 58
                        }
                    ]
                },
                {
                    "summaryComponent": "using provided data",
                    "codeSegments": [
                        {
                            "code": "const chartData = data.data.map((item) => ({",
                            "line": 39
                        },
                        {
                            "code": "data={chartData}",
                            "line": 51
                        }
                    ]
                },
                {
                    "summaryComponent": "now also shows a red dashed reference line at the current price if available",
                    "codeSegments": [
                        {
                            "code": "{data.currentPrice !== undefined && (",
                            "line": 59
                        },
                        {
                            "code": "<ReferenceLine",
                            "line": 60
                        },
                        {
                            "code": "y={data.currentPrice}",
                            "line": 61
                        },
                        {
                            "code": "stroke=\"red\"",
                            "line": 62
                        },
                        {
                            "code": "strokeDasharray=\"4 4\"",
                            "line": 63
                        },
                        {
                            "code": "label={{ value: \"Current Price\", position: \"right\", fill: \"red\" }}",
                            "line": 64
                        }
                    ]
                }
            ],
            "summary": "This code defines a React component that displays a stock price line chart using provided data, and now also shows a red dashed reference line at the current price if available."
        },
        "id": "DRbtSNf5k6owh5Lcqzi6"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-17 11:24:06.000",
        "source": "backend",
        "data": {
            "code": "13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     const monthAbbr = [\n21:       \"Jan\",\n22:       \"Feb\",\n23:       \"Mar\",\n24:       \"Apr\",\n25:       \"May\",\n26:       \"Jun\",\n27:       \"Jul\",\n28:       \"Aug\",\n29:       \"Sep\",\n30:       \"Oct\",\n31:       \"Nov\",\n32:       \"Dec\",\n33:     ];\n34:     const datePart = date.split(\"T\")[0];\n35:     const [year, month, day] = datePart.split(\"-\");\n36:     return monthAbbr[parseInt(month, 10) - 1];\n37:   };\n38:   // Combine labels and values into an array of objects for Recharts\n39:   const chartData = data.data.map((item) => ({\n40:     date: item.date,\n41:     price: item.close,\n42:   }));\n43: \n44:   return (\n45:     <div style={{ marginTop: \"2rem\" }}>\n46:       <h3>\n47:         {company} ({ticker})\n48:       </h3>\n49:       <ResponsiveContainer width=\"100%\" height={300}>\n50:         <LineChart\n51:           data={chartData}\n52:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n53:         >\n54:           <XAxis dataKey=\"date\" tickFormatter={formatDateString} />\n55:           <YAxis domain={[\"auto\", \"auto\"]} />\n56:           <Tooltip />\n57:           <Legend />\n58:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n59:           {data.currentPrice !== undefined && (\n60:             <ReferenceLine\n61:               y={data.currentPrice}\n62:               stroke=\"red\"\n63:               strokeDasharray=\"4 4\"\n64:               label={{ value: \"Current Price\", position: \"right\", fill: \"red\" }}\n65:             />\n66:           )}\n67:         </LineChart>\n68:       </ResponsiveContainer>\n69:     </div>\n70:   );\n71: };",
            "mapping": [
                {
                    "summaryComponent": "Defines a React component for stock charts",
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        }
                    ]
                },
                {
                    "summaryComponent": "Displays a line chart with company info",
                    "codeSegments": [
                        {
                            "code": "<LineChart",
                            "line": 50
                        },
                        {
                            "code": "<h3>",
                            "line": 46
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 47
                        }
                    ]
                },
                {
                    "summaryComponent": "Uses provided data as input",
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        },
                        {
                            "code": "const chartData = data.data.map((item) => ({",
                            "line": 39
                        }
                    ]
                },
                {
                    "summaryComponent": "Adds a red dashed reference line for the current price if present",
                    "codeSegments": [
                        {
                            "code": "{data.currentPrice !== undefined && (",
                            "line": 59
                        },
                        {
                            "code": "<ReferenceLine",
                            "line": 60
                        },
                        {
                            "code": "y={data.currentPrice}",
                            "line": 61
                        },
                        {
                            "code": "stroke=\"red\"",
                            "line": 62
                        },
                        {
                            "code": "strokeDasharray=\"4 4\"",
                            "line": 63
                        }
                    ]
                }
            ],
            "summary": "• Defines a React component for stock charts\n• Displays a line chart with company info\n• Uses provided data as input\n• Adds a red dashed reference line for the current price if present"
        },
        "id": "eZbc9h9wFH1v03zwHciK"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-17 11:24:07.000",
        "source": "backend",
        "data": {
            "code": "13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     const monthAbbr = [\n21:       \"Jan\",\n22:       \"Feb\",\n23:       \"Mar\",\n24:       \"Apr\",\n25:       \"May\",\n26:       \"Jun\",\n27:       \"Jul\",\n28:       \"Aug\",\n29:       \"Sep\",\n30:       \"Oct\",\n31:       \"Nov\",\n32:       \"Dec\",\n33:     ];\n34:     const datePart = date.split(\"T\")[0];\n35:     const [year, month, day] = datePart.split(\"-\");\n36:     return monthAbbr[parseInt(month, 10) - 1];\n37:   };\n38:   // Combine labels and values into an array of objects for Recharts\n39:   const chartData = data.data.map((item) => ({\n40:     date: item.date,\n41:     price: item.close,\n42:   }));\n43: \n44:   return (\n45:     <div style={{ marginTop: \"2rem\" }}>\n46:       <h3>\n47:         {company} ({ticker})\n48:       </h3>\n49:       <ResponsiveContainer width=\"100%\" height={300}>\n50:         <LineChart\n51:           data={chartData}\n52:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n53:         >\n54:           <XAxis dataKey=\"date\" tickFormatter={formatDateString} />\n55:           <YAxis domain={[\"auto\", \"auto\"]} />\n56:           <Tooltip />\n57:           <Legend />\n58:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n59:           {data.currentPrice !== undefined && (\n60:             <ReferenceLine\n61:               y={data.currentPrice}\n62:               stroke=\"red\"\n63:               strokeDasharray=\"4 4\"\n64:               label={{ value: \"Current Price\", position: \"right\", fill: \"red\" }}\n65:             />\n66:           )}\n67:         </LineChart>\n68:       </ResponsiveContainer>\n69:     </div>\n70:   );\n71: };",
            "mapping": [
                {
                    "summaryComponent": "The StockChart component renders a line chart for stock prices using Recharts",
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        },
                        {
                            "code": "<LineChart",
                            "line": 50
                        }
                    ]
                },
                {
                    "summaryComponent": "displaying the company's name and ticker",
                    "codeSegments": [
                        {
                            "code": "<h3>",
                            "line": 46
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 47
                        }
                    ]
                },
                {
                    "summaryComponent": "It processes incoming data",
                    "codeSegments": [
                        {
                            "code": "if (!data || !data.data || !data.data.length) return null;",
                            "line": 14
                        },
                        {
                            "code": "const chartData = data.data.map((item) => ({",
                            "line": 39
                        }
                    ]
                },
                {
                    "summaryComponent": "formats date labels to show month abbreviations",
                    "codeSegments": [
                        {
                            "code": "const formatDateString = (date) => {",
                            "line": 19
                        },
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                            "line": 54
                        }
                    ]
                },
                {
                    "summaryComponent": "visualizes closing prices over time",
                    "codeSegments": [
                        {
                            "code": "price: item.close,",
                            "line": 41
                        },
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 58
                        }
                    ]
                },
                {
                    "summaryComponent": "The chart now additionally includes a red dashed reference line labeled 'Current Price' if the current price is provided",
                    "codeSegments": [
                        {
                            "code": "{data.currentPrice !== undefined && (",
                            "line": 59
                        },
                        {
                            "code": "<ReferenceLine",
                            "line": 60
                        },
                        {
                            "code": "y={data.currentPrice}",
                            "line": 61
                        },
                        {
                            "code": "stroke=\"red\"",
                            "line": 62
                        },
                        {
                            "code": "strokeDasharray=\"4 4\"",
                            "line": 63
                        },
                        {
                            "code": "label={{ value: \"Current Price\", position: \"right\", fill: \"red\" }}",
                            "line": 64
                        }
                    ]
                },
                {
                    "summaryComponent": "along with axes",
                    "codeSegments": [
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                            "line": 54
                        },
                        {
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                            "line": 55
                        }
                    ]
                },
                {
                    "summaryComponent": "a legend",
                    "codeSegments": [
                        {
                            "code": "<Legend />",
                            "line": 57
                        }
                    ]
                },
                {
                    "summaryComponent": "and a tooltip for better readability",
                    "codeSegments": [
                        {
                            "code": "<Tooltip />",
                            "line": 56
                        }
                    ]
                }
            ],
            "summary": "The StockChart component renders a line chart for stock prices using Recharts, displaying the company's name and ticker. It processes incoming data, formats date labels to show month abbreviations, and visualizes closing prices over time. The chart now additionally includes a red dashed reference line labeled 'Current Price' if the current price is provided, along with axes, a legend, and a tooltip for better readability."
        },
        "id": "8zPTvXpByvsw1f3x8CWe"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-17 11:24:07.000",
        "source": "backend",
        "data": {
            "code": "13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     const monthAbbr = [\n21:       \"Jan\",\n22:       \"Feb\",\n23:       \"Mar\",\n24:       \"Apr\",\n25:       \"May\",\n26:       \"Jun\",\n27:       \"Jul\",\n28:       \"Aug\",\n29:       \"Sep\",\n30:       \"Oct\",\n31:       \"Nov\",\n32:       \"Dec\",\n33:     ];\n34:     const datePart = date.split(\"T\")[0];\n35:     const [year, month, day] = datePart.split(\"-\");\n36:     return monthAbbr[parseInt(month, 10) - 1];\n37:   };\n38:   // Combine labels and values into an array of objects for Recharts\n39:   const chartData = data.data.map((item) => ({\n40:     date: item.date,\n41:     price: item.close,\n42:   }));\n43: \n44:   return (\n45:     <div style={{ marginTop: \"2rem\" }}>\n46:       <h3>\n47:         {company} ({ticker})\n48:       </h3>\n49:       <ResponsiveContainer width=\"100%\" height={300}>\n50:         <LineChart\n51:           data={chartData}\n52:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n53:         >\n54:           <XAxis dataKey=\"date\" tickFormatter={formatDateString} />\n55:           <YAxis domain={[\"auto\", \"auto\"]} />\n56:           <Tooltip />\n57:           <Legend />\n58:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n59:           {data.currentPrice !== undefined && (\n60:             <ReferenceLine\n61:               y={data.currentPrice}\n62:               stroke=\"red\"\n63:               strokeDasharray=\"4 4\"\n64:               label={{ value: \"Current Price\", position: \"right\", fill: \"red\" }}\n65:             />\n66:           )}\n67:         </LineChart>\n68:       </ResponsiveContainer>\n69:     </div>\n70:   );\n71: };",
            "mapping": [
                {
                    "summaryComponent": "Renders a React component to display stock prices as a line chart",
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        },
                        {
                            "code": "<LineChart",
                            "line": 50
                        }
                    ]
                },
                {
                    "summaryComponent": "Extracts company name and ticker from the input data",
                    "codeSegments": [
                        {
                            "code": "const company = data.name;",
                            "line": 16
                        },
                        {
                            "code": "const ticker = data.ticker;",
                            "line": 17
                        }
                    ]
                },
                {
                    "summaryComponent": "Formats date labels to show month abbreviations",
                    "codeSegments": [
                        {
                            "code": "const formatDateString = (date) => {",
                            "line": 19
                        },
                        {
                            "code": "const monthAbbr = [",
                            "line": 20
                        },
                        {
                            "code": "return monthAbbr[parseInt(month, 10) - 1];",
                            "line": 36
                        },
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                            "line": 54
                        }
                    ]
                },
                {
                    "summaryComponent": "Uses Recharts components for chart rendering",
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 49
                        },
                        {
                            "code": "<LineChart",
                            "line": 50
                        }
                    ]
                },
                {
                    "summaryComponent": "Includes axes, legend, and tooltip for clarity",
                    "codeSegments": [
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                            "line": 54
                        },
                        {
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                            "line": 55
                        },
                        {
                            "code": "<Tooltip />",
                            "line": 56
                        },
                        {
                            "code": "<Legend />",
                            "line": 57
                        }
                    ]
                },
                {
                    "summaryComponent": "Adds a red dashed ReferenceLine labeled 'Current Price' if current price data is available",
                    "codeSegments": [
                        {
                            "code": "{data.currentPrice !== undefined && (",
                            "line": 59
                        },
                        {
                            "code": "<ReferenceLine",
                            "line": 60
                        },
                        {
                            "code": "y={data.currentPrice}",
                            "line": 61
                        },
                        {
                            "code": "stroke=\"red\"",
                            "line": 62
                        },
                        {
                            "code": "strokeDasharray=\"4 4\"",
                            "line": 63
                        },
                        {
                            "code": "label={{ value: \"Current Price\", position: \"right\", fill: \"red\" }}",
                            "line": 64
                        }
                    ]
                }
            ],
            "summary": "• Renders a React component to display stock prices as a line chart\n• Extracts company name and ticker from the input data\n• Formats date labels to show month abbreviations\n• Uses Recharts components for chart rendering\n  ◦ Includes axes, legend, and tooltip for clarity\n  ◦ Adds a red dashed ReferenceLine labeled 'Current Price' if current price data is available"
        },
        "id": "QgqYbgLxEwZExA5TkQKm"
    },
    {
        "event": "autotransit_section",
        "timestamp": "2025-08-17 11:24:08.000",
        "source": "frontend",
        "data": {
            "after_section_id": "5f77dccc-db45-41ce-9cd7-cbb323e379fa",
            "before_section_id": "b5adac40-4b64-4bce-9970-7de460102f42"
        },
        "id": "8eCY2aGj8YXoIXWDnA7l"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-17 11:24:08.000",
        "source": "backend",
        "data": {
            "code": "13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     const monthAbbr = [\n21:       \"Jan\",\n22:       \"Feb\",\n23:       \"Mar\",\n24:       \"Apr\",\n25:       \"May\",\n26:       \"Jun\",\n27:       \"Jul\",\n28:       \"Aug\",\n29:       \"Sep\",\n30:       \"Oct\",\n31:       \"Nov\",\n32:       \"Dec\",\n33:     ];\n34:     const datePart = date.split(\"T\")[0];\n35:     const [year, month, day] = datePart.split(\"-\");\n36:     return monthAbbr[parseInt(month, 10) - 1];\n37:   };\n38:   // Combine labels and values into an array of objects for Recharts\n39:   const chartData = data.data.map((item) => ({\n40:     date: item.date,\n41:     price: item.close,\n42:   }));\n43: \n44:   return (\n45:     <div style={{ marginTop: \"2rem\" }}>\n46:       <h3>\n47:         {company} ({ticker})\n48:       </h3>\n49:       <ResponsiveContainer width=\"100%\" height={300}>\n50:         <LineChart\n51:           data={chartData}\n52:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n53:         >\n54:           <XAxis dataKey=\"date\" tickFormatter={formatDateString} />\n55:           <YAxis domain={[\"auto\", \"auto\"]} />\n56:           <Tooltip />\n57:           <Legend />\n58:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n59:           {data.currentPrice !== undefined && (\n60:             <ReferenceLine\n61:               y={data.currentPrice}\n62:               stroke=\"red\"\n63:               strokeDasharray=\"4 4\"\n64:               label={{ value: \"Current Price\", position: \"right\", fill: \"red\" }}\n65:             />\n66:           )}\n67:         </LineChart>\n68:       </ResponsiveContainer>\n69:     </div>\n70:   );\n71: };",
            "mapping": [
                {
                    "summaryComponent": "defines the StockChart React component",
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        }
                    ]
                },
                {
                    "summaryComponent": "visualizes stock closing prices over time using the Recharts library",
                    "codeSegments": [
                        {
                            "code": "<LineChart",
                            "line": 50
                        },
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 58
                        }
                    ]
                },
                {
                    "summaryComponent": "checks for valid input data",
                    "codeSegments": [
                        {
                            "code": "if (!data || !data.data || !data.data.length) return null;",
                            "line": 14
                        }
                    ]
                },
                {
                    "summaryComponent": "extracting the company name and ticker for display",
                    "codeSegments": [
                        {
                            "code": "const company = data.name;",
                            "line": 16
                        },
                        {
                            "code": "const ticker = data.ticker;",
                            "line": 17
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 47
                        }
                    ]
                },
                {
                    "summaryComponent": "formats date labels to show only the month abbreviation",
                    "codeSegments": [
                        {
                            "code": "const formatDateString = (date) => {",
                            "line": 19
                        },
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                            "line": 54
                        }
                    ]
                },
                {
                    "summaryComponent": "transforms the raw data into a format suitable for the chart",
                    "codeSegments": [
                        {
                            "code": "const chartData = data.data.map((item) => ({",
                            "line": 39
                        }
                    ]
                },
                {
                    "summaryComponent": "includes a monotone line for prices",
                    "codeSegments": [
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 58
                        }
                    ]
                },
                {
                    "summaryComponent": "formatted axes",
                    "codeSegments": [
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                            "line": 54
                        },
                        {
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                            "line": 55
                        }
                    ]
                },
                {
                    "summaryComponent": "a legend, a tooltip",
                    "codeSegments": [
                        {
                            "code": "<Tooltip />",
                            "line": 56
                        },
                        {
                            "code": "<Legend />",
                            "line": 57
                        }
                    ]
                },
                {
                    "summaryComponent": "if the current price is provided, a red dashed ReferenceLine labeled 'Current Price'",
                    "codeSegments": [
                        {
                            "code": "{data.currentPrice !== undefined && (",
                            "line": 59
                        },
                        {
                            "code": "<ReferenceLine",
                            "line": 60
                        },
                        {
                            "code": "y={data.currentPrice}",
                            "line": 61
                        },
                        {
                            "code": "stroke=\"red\"",
                            "line": 62
                        },
                        {
                            "code": "strokeDasharray=\"4 4\"",
                            "line": 63
                        },
                        {
                            "code": "label={{ value: \"Current Price\", position: \"right\", fill: \"red\" }}",
                            "line": 64
                        }
                    ]
                },
                {
                    "summaryComponent": "within a responsive container for flexible layout",
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 49
                        }
                    ]
                }
            ],
            "summary": "This code defines the StockChart React component, which visualizes stock closing prices over time using the Recharts library. It first checks for valid input data, extracting the company name and ticker for display. The component formats date labels to show only the month abbreviation, and transforms the raw data into a format suitable for the chart. The rendered chart includes a monotone line for prices, formatted axes, a legend, a tooltip, and, if the current price is provided, a red dashed ReferenceLine labeled 'Current Price', all within a responsive container for flexible layout."
        },
        "id": "EBQsEn16M8ZOs76QTG60"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-17 11:24:08.000",
        "source": "backend",
        "data": {
            "code": "13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     const monthAbbr = [\n21:       \"Jan\",\n22:       \"Feb\",\n23:       \"Mar\",\n24:       \"Apr\",\n25:       \"May\",\n26:       \"Jun\",\n27:       \"Jul\",\n28:       \"Aug\",\n29:       \"Sep\",\n30:       \"Oct\",\n31:       \"Nov\",\n32:       \"Dec\",\n33:     ];\n34:     const datePart = date.split(\"T\")[0];\n35:     const [year, month, day] = datePart.split(\"-\");\n36:     return monthAbbr[parseInt(month, 10) - 1];\n37:   };\n38:   // Combine labels and values into an array of objects for Recharts\n39:   const chartData = data.data.map((item) => ({\n40:     date: item.date,\n41:     price: item.close,\n42:   }));\n43: \n44:   return (\n45:     <div style={{ marginTop: \"2rem\" }}>\n46:       <h3>\n47:         {company} ({ticker})\n48:       </h3>\n49:       <ResponsiveContainer width=\"100%\" height={300}>\n50:         <LineChart\n51:           data={chartData}\n52:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n53:         >\n54:           <XAxis dataKey=\"date\" tickFormatter={formatDateString} />\n55:           <YAxis domain={[\"auto\", \"auto\"]} />\n56:           <Tooltip />\n57:           <Legend />\n58:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n59:           {data.currentPrice !== undefined && (\n60:             <ReferenceLine\n61:               y={data.currentPrice}\n62:               stroke=\"red\"\n63:               strokeDasharray=\"4 4\"\n64:               label={{ value: \"Current Price\", position: \"right\", fill: \"red\" }}\n65:             />\n66:           )}\n67:         </LineChart>\n68:       </ResponsiveContainer>\n69:     </div>\n70:   );\n71: };",
            "mapping": [
                {
                    "summaryComponent": "Defines the StockChart React component to visualize stock data",
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        }
                    ]
                },
                {
                    "summaryComponent": "Validates the input data before rendering",
                    "codeSegments": [
                        {
                            "code": "if (!data || !data.data || !data.data.length) return null;",
                            "line": 14
                        }
                    ]
                },
                {
                    "summaryComponent": "Returns null if data is missing or empty",
                    "codeSegments": [
                        {
                            "code": "if (!data || !data.data || !data.data.length) return null;",
                            "line": 14
                        }
                    ]
                },
                {
                    "summaryComponent": "Extracts and displays the company name and ticker symbol",
                    "codeSegments": [
                        {
                            "code": "const company = data.name;",
                            "line": 16
                        },
                        {
                            "code": "const ticker = data.ticker;",
                            "line": 17
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 47
                        }
                    ]
                },
                {
                    "summaryComponent": "Processes the input data to create chartData objects",
                    "codeSegments": [
                        {
                            "code": "const chartData = data.data.map((item) => ({",
                            "line": 39
                        }
                    ]
                },
                {
                    "summaryComponent": "Each object contains a date and the corresponding closing price",
                    "codeSegments": [
                        {
                            "code": "date: item.date,",
                            "line": 40
                        },
                        {
                            "code": "price: item.close,",
                            "line": 41
                        }
                    ]
                },
                {
                    "summaryComponent": "Formats date labels on the X-axis to show month abbreviations",
                    "codeSegments": [
                        {
                            "code": "const formatDateString = (date) => {",
                            "line": 19
                        },
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                            "line": 54
                        }
                    ]
                },
                {
                    "summaryComponent": "Renders a responsive line chart using Recharts components",
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 49
                        },
                        {
                            "code": "<LineChart",
                            "line": 50
                        }
                    ]
                },
                {
                    "summaryComponent": "Includes XAxis, YAxis, Tooltip, Legend, and a monotone Line for prices",
                    "codeSegments": [
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                            "line": 54
                        },
                        {
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                            "line": 55
                        },
                        {
                            "code": "<Tooltip />",
                            "line": 56
                        },
                        {
                            "code": "<Legend />",
                            "line": 57
                        },
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 58
                        }
                    ]
                },
                {
                    "summaryComponent": "Sets custom margins and disables dots on the line for clarity",
                    "codeSegments": [
                        {
                            "code": "margin={{ top: 10, right: 30, left: 0, bottom: 0 }}",
                            "line": 52
                        },
                        {
                            "code": "dot={false}",
                            "line": 58
                        }
                    ]
                },
                {
                    "summaryComponent": "Adds a red dashed ReferenceLine at the current price with a label if currentPrice is provided",
                    "codeSegments": [
                        {
                            "code": "{data.currentPrice !== undefined && (",
                            "line": 59
                        },
                        {
                            "code": "<ReferenceLine",
                            "line": 60
                        },
                        {
                            "code": "y={data.currentPrice}",
                            "line": 61
                        },
                        {
                            "code": "stroke=\"red\"",
                            "line": 62
                        },
                        {
                            "code": "strokeDasharray=\"4 4\"",
                            "line": 63
                        },
                        {
                            "code": "label={{ value: \"Current Price\", position: \"right\", fill: \"red\" }}",
                            "line": 64
                        }
                    ]
                }
            ],
            "summary": "• Defines the StockChart React component to visualize stock data\n• Validates the input data before rendering\n  ◦ Returns null if data is missing or empty\n• Extracts and displays the company name and ticker symbol\n• Processes the input data to create chartData objects\n  ◦ Each object contains a date and the corresponding closing price\n• Formats date labels on the X-axis to show month abbreviations\n• Renders a responsive line chart using Recharts components\n  ◦ Includes XAxis, YAxis, Tooltip, Legend, and a monotone Line for prices\n  ◦ Sets custom margins and disables dots on the line for clarity\n  ◦ Adds a red dashed ReferenceLine at the current price with a label if currentPrice is provided"
        },
        "id": "JMx6x4vvoFu7fIG27enH"
    },
    {
        "event": "create_new_section",
        "timestamp": "2025-08-17 11:24:08.000",
        "source": "frontend",
        "data": {
            "section_id": "5f77dccc-db45-41ce-9cd7-cbb323e379fa",
            "section_data": {
                "metadata": {
                    "id": "5f77dccc-db45-41ce-9cd7-cbb323e379fa",
                    "fullPath": "/project/workspace/frontend/src/StockChart.jsx",
                    "offset": 156,
                    "filename": "StockChart.jsx",
                    "originalCode": "const StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    const monthAbbr = [\n      \"Jan\",\n      \"Feb\",\n      \"Mar\",\n      \"Apr\",\n      \"May\",\n      \"Jun\",\n      \"Jul\",\n      \"Aug\",\n      \"Sep\",\n      \"Oct\",\n      \"Nov\",\n      \"Dec\",\n    ];\n    const datePart = date.split(\"T\")[0];\n    const [year, month, day] = datePart.split(\"-\");\n    return monthAbbr[parseInt(month, 10) - 1];\n  };\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatDateString} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n          {data.currentPrice !== undefined && (\n            <ReferenceLine\n              y={data.currentPrice}\n              stroke=\"red\"\n              strokeDasharray=\"4 4\"\n              label={{ value: \"Current Price\", position: \"right\", fill: \"red\" }}\n            />\n          )}\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};"
                },
                "summaryMappings": {
                    "high_structured": [
                        {
                            "summaryComponent": "Defines the StockChart React component to visualize stock data",
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Validates the input data before rendering",
                            "codeSegments": [
                                {
                                    "code": "if (!data || !data.data || !data.data.length) return null;",
                                    "line": 14
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Returns null if data is missing or empty",
                            "codeSegments": [
                                {
                                    "code": "if (!data || !data.data || !data.data.length) return null;",
                                    "line": 14
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Extracts and displays the company name and ticker symbol",
                            "codeSegments": [
                                {
                                    "code": "const company = data.name;",
                                    "line": 16
                                },
                                {
                                    "code": "const ticker = data.ticker;",
                                    "line": 17
                                },
                                {
                                    "code": "{company} ({ticker})",
                                    "line": 47
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Processes the input data to create chartData objects",
                            "codeSegments": [
                                {
                                    "code": "const chartData = data.data.map((item) => ({",
                                    "line": 39
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Each object contains a date and the corresponding closing price",
                            "codeSegments": [
                                {
                                    "code": "date: item.date,",
                                    "line": 40
                                },
                                {
                                    "code": "price: item.close,",
                                    "line": 41
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Formats date labels on the X-axis to show month abbreviations",
                            "codeSegments": [
                                {
                                    "code": "const formatDateString = (date) => {",
                                    "line": 19
                                },
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                                    "line": 54
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Renders a responsive line chart using Recharts components",
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 49
                                },
                                {
                                    "code": "<LineChart",
                                    "line": 50
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Includes XAxis, YAxis, Tooltip, Legend, and a monotone Line for prices",
                            "codeSegments": [
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                                    "line": 54
                                },
                                {
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                                    "line": 55
                                },
                                {
                                    "code": "<Tooltip />",
                                    "line": 56
                                },
                                {
                                    "code": "<Legend />",
                                    "line": 57
                                },
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 58
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Sets custom margins and disables dots on the line for clarity",
                            "codeSegments": [
                                {
                                    "code": "margin={{ top: 10, right: 30, left: 0, bottom: 0 }}",
                                    "line": 52
                                },
                                {
                                    "code": "dot={false}",
                                    "line": 58
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Adds a red dashed ReferenceLine at the current price with a label if currentPrice is provided",
                            "codeSegments": [
                                {
                                    "code": "{data.currentPrice !== undefined && (",
                                    "line": 59
                                },
                                {
                                    "code": "<ReferenceLine",
                                    "line": 60
                                },
                                {
                                    "code": "y={data.currentPrice}",
                                    "line": 61
                                },
                                {
                                    "code": "stroke=\"red\"",
                                    "line": 62
                                },
                                {
                                    "code": "strokeDasharray=\"4 4\"",
                                    "line": 63
                                },
                                {
                                    "code": "label={{ value: \"Current Price\", position: \"right\", fill: \"red\" }}",
                                    "line": 64
                                }
                            ]
                        }
                    ],
                    "low_structured": [
                        {
                            "summaryComponent": "Defines a React component for stock charts",
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Displays a line chart with company info",
                            "codeSegments": [
                                {
                                    "code": "<LineChart",
                                    "line": 50
                                },
                                {
                                    "code": "<h3>",
                                    "line": 46
                                },
                                {
                                    "code": "{company} ({ticker})",
                                    "line": 47
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Uses provided data as input",
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                },
                                {
                                    "code": "const chartData = data.data.map((item) => ({",
                                    "line": 39
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Adds a red dashed reference line for the current price if present",
                            "codeSegments": [
                                {
                                    "code": "{data.currentPrice !== undefined && (",
                                    "line": 59
                                },
                                {
                                    "code": "<ReferenceLine",
                                    "line": 60
                                },
                                {
                                    "code": "y={data.currentPrice}",
                                    "line": 61
                                },
                                {
                                    "code": "stroke=\"red\"",
                                    "line": 62
                                },
                                {
                                    "code": "strokeDasharray=\"4 4\"",
                                    "line": 63
                                }
                            ]
                        }
                    ],
                    "medium_structured": [
                        {
                            "summaryComponent": "Renders a React component to display stock prices as a line chart",
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                },
                                {
                                    "code": "<LineChart",
                                    "line": 50
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Extracts company name and ticker from the input data",
                            "codeSegments": [
                                {
                                    "code": "const company = data.name;",
                                    "line": 16
                                },
                                {
                                    "code": "const ticker = data.ticker;",
                                    "line": 17
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Formats date labels to show month abbreviations",
                            "codeSegments": [
                                {
                                    "code": "const formatDateString = (date) => {",
                                    "line": 19
                                },
                                {
                                    "code": "const monthAbbr = [",
                                    "line": 20
                                },
                                {
                                    "code": "return monthAbbr[parseInt(month, 10) - 1];",
                                    "line": 36
                                },
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                                    "line": 54
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Uses Recharts components for chart rendering",
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 49
                                },
                                {
                                    "code": "<LineChart",
                                    "line": 50
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Includes axes, legend, and tooltip for clarity",
                            "codeSegments": [
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                                    "line": 54
                                },
                                {
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                                    "line": 55
                                },
                                {
                                    "code": "<Tooltip />",
                                    "line": 56
                                },
                                {
                                    "code": "<Legend />",
                                    "line": 57
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Adds a red dashed ReferenceLine labeled 'Current Price' if current price data is available",
                            "codeSegments": [
                                {
                                    "code": "{data.currentPrice !== undefined && (",
                                    "line": 59
                                },
                                {
                                    "code": "<ReferenceLine",
                                    "line": 60
                                },
                                {
                                    "code": "y={data.currentPrice}",
                                    "line": 61
                                },
                                {
                                    "code": "stroke=\"red\"",
                                    "line": 62
                                },
                                {
                                    "code": "strokeDasharray=\"4 4\"",
                                    "line": 63
                                },
                                {
                                    "code": "label={{ value: \"Current Price\", position: \"right\", fill: \"red\" }}",
                                    "line": 64
                                }
                            ]
                        }
                    ],
                    "medium_unstructured": [
                        {
                            "summaryComponent": "The StockChart component renders a line chart for stock prices using Recharts",
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                },
                                {
                                    "code": "<LineChart",
                                    "line": 50
                                }
                            ]
                        },
                        {
                            "summaryComponent": "displaying the company's name and ticker",
                            "codeSegments": [
                                {
                                    "code": "<h3>",
                                    "line": 46
                                },
                                {
                                    "code": "{company} ({ticker})",
                                    "line": 47
                                }
                            ]
                        },
                        {
                            "summaryComponent": "It processes incoming data",
                            "codeSegments": [
                                {
                                    "code": "if (!data || !data.data || !data.data.length) return null;",
                                    "line": 14
                                },
                                {
                                    "code": "const chartData = data.data.map((item) => ({",
                                    "line": 39
                                }
                            ]
                        },
                        {
                            "summaryComponent": "formats date labels to show month abbreviations",
                            "codeSegments": [
                                {
                                    "code": "const formatDateString = (date) => {",
                                    "line": 19
                                },
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                                    "line": 54
                                }
                            ]
                        },
                        {
                            "summaryComponent": "visualizes closing prices over time",
                            "codeSegments": [
                                {
                                    "code": "price: item.close,",
                                    "line": 41
                                },
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 58
                                }
                            ]
                        },
                        {
                            "summaryComponent": "The chart now additionally includes a red dashed reference line labeled 'Current Price' if the current price is provided",
                            "codeSegments": [
                                {
                                    "code": "{data.currentPrice !== undefined && (",
                                    "line": 59
                                },
                                {
                                    "code": "<ReferenceLine",
                                    "line": 60
                                },
                                {
                                    "code": "y={data.currentPrice}",
                                    "line": 61
                                },
                                {
                                    "code": "stroke=\"red\"",
                                    "line": 62
                                },
                                {
                                    "code": "strokeDasharray=\"4 4\"",
                                    "line": 63
                                },
                                {
                                    "code": "label={{ value: \"Current Price\", position: \"right\", fill: \"red\" }}",
                                    "line": 64
                                }
                            ]
                        },
                        {
                            "summaryComponent": "along with axes",
                            "codeSegments": [
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                                    "line": 54
                                },
                                {
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                                    "line": 55
                                }
                            ]
                        },
                        {
                            "summaryComponent": "a legend",
                            "codeSegments": [
                                {
                                    "code": "<Legend />",
                                    "line": 57
                                }
                            ]
                        },
                        {
                            "summaryComponent": "and a tooltip for better readability",
                            "codeSegments": [
                                {
                                    "code": "<Tooltip />",
                                    "line": 56
                                }
                            ]
                        }
                    ],
                    "high_unstructured": [
                        {
                            "summaryComponent": "defines the StockChart React component",
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                }
                            ]
                        },
                        {
                            "summaryComponent": "visualizes stock closing prices over time using the Recharts library",
                            "codeSegments": [
                                {
                                    "code": "<LineChart",
                                    "line": 50
                                },
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 58
                                }
                            ]
                        },
                        {
                            "summaryComponent": "checks for valid input data",
                            "codeSegments": [
                                {
                                    "code": "if (!data || !data.data || !data.data.length) return null;",
                                    "line": 14
                                }
                            ]
                        },
                        {
                            "summaryComponent": "extracting the company name and ticker for display",
                            "codeSegments": [
                                {
                                    "code": "const company = data.name;",
                                    "line": 16
                                },
                                {
                                    "code": "const ticker = data.ticker;",
                                    "line": 17
                                },
                                {
                                    "code": "{company} ({ticker})",
                                    "line": 47
                                }
                            ]
                        },
                        {
                            "summaryComponent": "formats date labels to show only the month abbreviation",
                            "codeSegments": [
                                {
                                    "code": "const formatDateString = (date) => {",
                                    "line": 19
                                },
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                                    "line": 54
                                }
                            ]
                        },
                        {
                            "summaryComponent": "transforms the raw data into a format suitable for the chart",
                            "codeSegments": [
                                {
                                    "code": "const chartData = data.data.map((item) => ({",
                                    "line": 39
                                }
                            ]
                        },
                        {
                            "summaryComponent": "includes a monotone line for prices",
                            "codeSegments": [
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 58
                                }
                            ]
                        },
                        {
                            "summaryComponent": "formatted axes",
                            "codeSegments": [
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                                    "line": 54
                                },
                                {
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                                    "line": 55
                                }
                            ]
                        },
                        {
                            "summaryComponent": "a legend, a tooltip",
                            "codeSegments": [
                                {
                                    "code": "<Tooltip />",
                                    "line": 56
                                },
                                {
                                    "code": "<Legend />",
                                    "line": 57
                                }
                            ]
                        },
                        {
                            "summaryComponent": "if the current price is provided, a red dashed ReferenceLine labeled 'Current Price'",
                            "codeSegments": [
                                {
                                    "code": "{data.currentPrice !== undefined && (",
                                    "line": 59
                                },
                                {
                                    "code": "<ReferenceLine",
                                    "line": 60
                                },
                                {
                                    "code": "y={data.currentPrice}",
                                    "line": 61
                                },
                                {
                                    "code": "stroke=\"red\"",
                                    "line": 62
                                },
                                {
                                    "code": "strokeDasharray=\"4 4\"",
                                    "line": 63
                                },
                                {
                                    "code": "label={{ value: \"Current Price\", position: \"right\", fill: \"red\" }}",
                                    "line": 64
                                }
                            ]
                        },
                        {
                            "summaryComponent": "within a responsive container for flexible layout",
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 49
                                }
                            ]
                        }
                    ],
                    "low_unstructured": [
                        {
                            "summaryComponent": "defines a React component",
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                }
                            ]
                        },
                        {
                            "summaryComponent": "displays a stock price line chart",
                            "codeSegments": [
                                {
                                    "code": "<LineChart",
                                    "line": 50
                                },
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 58
                                }
                            ]
                        },
                        {
                            "summaryComponent": "using provided data",
                            "codeSegments": [
                                {
                                    "code": "const chartData = data.data.map((item) => ({",
                                    "line": 39
                                },
                                {
                                    "code": "data={chartData}",
                                    "line": 51
                                }
                            ]
                        },
                        {
                            "summaryComponent": "now also shows a red dashed reference line at the current price if available",
                            "codeSegments": [
                                {
                                    "code": "{data.currentPrice !== undefined && (",
                                    "line": 59
                                },
                                {
                                    "code": "<ReferenceLine",
                                    "line": 60
                                },
                                {
                                    "code": "y={data.currentPrice}",
                                    "line": 61
                                },
                                {
                                    "code": "stroke=\"red\"",
                                    "line": 62
                                },
                                {
                                    "code": "strokeDasharray=\"4 4\"",
                                    "line": 63
                                },
                                {
                                    "code": "label={{ value: \"Current Price\", position: \"right\", fill: \"red\" }}",
                                    "line": 64
                                }
                            ]
                        }
                    ]
                },
                "summaryData": {
                    "high_structured": "• Defines the StockChart React component to visualize stock data\n• Validates the input data before rendering\n  ◦ Returns null if data is missing or empty\n• Extracts and displays the company name and ticker symbol\n• Processes the input data to create chartData objects\n  ◦ Each object contains a date and the corresponding closing price\n• Formats date labels on the X-axis to show month abbreviations\n• Renders a responsive line chart using Recharts components\n  ◦ Includes XAxis, YAxis, Tooltip, Legend, and a monotone Line for prices\n  ◦ Sets custom margins and disables dots on the line for clarity\n  ◦ Adds a red dashed ReferenceLine at the current price with a label if currentPrice is provided",
                    "low_structured": "• Defines a React component for stock charts\n• Displays a line chart with company info\n• Uses provided data as input\n• Adds a red dashed reference line for the current price if present",
                    "title": "StockChart Component with Current Price Reference Line",
                    "medium_structured": "• Renders a React component to display stock prices as a line chart\n• Extracts company name and ticker from the input data\n• Formats date labels to show month abbreviations\n• Uses Recharts components for chart rendering\n  ◦ Includes axes, legend, and tooltip for clarity\n  ◦ Adds a red dashed ReferenceLine labeled 'Current Price' if current price data is available",
                    "medium_unstructured": "The StockChart component renders a line chart for stock prices using Recharts, displaying the company's name and ticker. It processes incoming data, formats date labels to show month abbreviations, and visualizes closing prices over time. The chart now additionally includes a red dashed reference line labeled 'Current Price' if the current price is provided, along with axes, a legend, and a tooltip for better readability.",
                    "high_unstructured": "This code defines the StockChart React component, which visualizes stock closing prices over time using the Recharts library. It first checks for valid input data, extracting the company name and ticker for display. The component formats date labels to show only the month abbreviation, and transforms the raw data into a format suitable for the chart. The rendered chart includes a monotone line for prices, formatted axes, a legend, a tooltip, and, if the current price is provided, a red dashed ReferenceLine labeled 'Current Price', all within a responsive container for flexible layout.",
                    "low_unstructured": "This code defines a React component that displays a stock price line chart using provided data, and now also shows a red dashed reference line at the current price if available."
                },
                "lines": [
                    13,
                    71
                ],
                "oldSummaryData": {
                    "high_structured": "• Defines the StockChart React component to visualize stock data\n• Validates the input data before rendering\n  ◦ Returns null if data is missing or empty\n• Extracts and displays the company name and ticker symbol\n• Processes the input data to create chartData objects\n  ◦ Each object contains a date and the corresponding closing price\n• Formats date labels on the X-axis to show month abbreviations\n• Renders a responsive line chart using Recharts components\n  ◦ Includes XAxis, YAxis, Tooltip, Legend, and a monotone Line for prices\n  ◦ Sets custom margins and disables dots on the line for clarity",
                    "low_structured": "• Defines a React component for stock charts\n• Displays a line chart with company info\n• Uses provided data as input",
                    "title": "StockChart Component for Rendering Stock Price Line Charts",
                    "medium_structured": "• Renders a React component to display stock prices as a line chart\n• Extracts company name and ticker from the input data\n• Formats date labels to show month abbreviations\n• Uses Recharts components for chart rendering\n  ◦ Includes axes, legend, and tooltip for clarity",
                    "medium_unstructured": "The StockChart component renders a line chart for stock prices using Recharts, displaying the company's name and ticker. It processes incoming data, formats date labels to show month abbreviations, and visualizes closing prices over time. The chart includes axes, a legend, and a tooltip for better readability.",
                    "high_unstructured": "This code defines the StockChart React component, which visualizes stock closing prices over time using the Recharts library. It first checks for valid input data, extracting the company name and ticker for display. The component formats date labels to show only the month abbreviation, and transforms the raw data into a format suitable for the chart. The rendered chart includes a monotone line for prices, formatted axes, a legend, and a tooltip, all within a responsive container for flexible layout.",
                    "low_unstructured": "This code defines a React component that displays a stock price line chart using provided data."
                },
                "selectedDetailLevel": "medium",
                "selectedStructured": "unstructured",
                "editPromptValue": "",
                "title": "StockChart Component with Current Price Reference Line",
                "createdAt": 1755415448000,
                "editPromptDetailLevel": null,
                "editPromptStructured": null
            }
        },
        "id": "P8wT2NCH4nyWYLbRXyV0"
    },
    {
        "event": "commit_direct_instruction",
        "timestamp": "2025-08-17 11:24:42.000",
        "source": "frontend",
        "data": {
            "section_id": "5f77dccc-db45-41ce-9cd7-cbb323e379fa",
            "instruction": "Please REMOVE the caption `Current Price` in the chart, just draw a line instead"
        },
        "id": "ta7u276lmejOvUUAy8l6"
    },
    {
        "event": "modify_direct_instruction",
        "timestamp": "2025-08-17 11:24:45.000",
        "source": "backend",
        "data": {
            "instruction": "Please REMOVE the caption `Current Price` in the chart, just draw a line instead",
            "original_code": "const StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    const monthAbbr = [\n      \"Jan\",\n      \"Feb\",\n      \"Mar\",\n      \"Apr\",\n      \"May\",\n      \"Jun\",\n      \"Jul\",\n      \"Aug\",\n      \"Sep\",\n      \"Oct\",\n      \"Nov\",\n      \"Dec\",\n    ];\n    const datePart = date.split(\"T\")[0];\n    const [year, month, day] = datePart.split(\"-\");\n    return monthAbbr[parseInt(month, 10) - 1];\n  };\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatDateString} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n          {data.currentPrice !== undefined && (\n            <ReferenceLine\n              y={data.currentPrice}\n              stroke=\"red\"\n              strokeDasharray=\"4 4\"\n              label={{ value: \"Current Price\", position: \"right\", fill: \"red\" }}\n            />\n          )}\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};",
            "updated_code": "const StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    const monthAbbr = [\n      \"Jan\",\n      \"Feb\",\n      \"Mar\",\n      \"Apr\",\n      \"May\",\n      \"Jun\",\n      \"Jul\",\n      \"Aug\",\n      \"Sep\",\n      \"Oct\",\n      \"Nov\",\n      \"Dec\",\n    ];\n    const datePart = date.split(\"T\")[0];\n    const [year, month, day] = datePart.split(\"-\");\n    return monthAbbr[parseInt(month, 10) - 1];\n  };\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatDateString} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n          {data.currentPrice !== undefined && (\n            <ReferenceLine\n              y={data.currentPrice}\n              stroke=\"red\"\n              strokeDasharray=\"4 4\"\n            />\n          )}\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};"
        },
        "id": "PtdDWVhuqU7CYoiEmOy4"
    },
    {
        "event": "summarize_modified_code",
        "timestamp": "2025-08-17 11:24:51.000",
        "source": "backend",
        "data": {
            "new_code": "const StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    const monthAbbr = [\n      \"Jan\",\n      \"Feb\",\n      \"Mar\",\n      \"Apr\",\n      \"May\",\n      \"Jun\",\n      \"Jul\",\n      \"Aug\",\n      \"Sep\",\n      \"Oct\",\n      \"Nov\",\n      \"Dec\",\n    ];\n    const datePart = date.split(\"T\")[0];\n    const [year, month, day] = datePart.split(\"-\");\n    return monthAbbr[parseInt(month, 10) - 1];\n  };\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatDateString} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n          {data.currentPrice !== undefined && (\n            <ReferenceLine\n              y={data.currentPrice}\n              stroke=\"red\"\n              strokeDasharray=\"4 4\"\n            />\n          )}\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};",
            "original_code": "const StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    const monthAbbr = [\n      \"Jan\",\n      \"Feb\",\n      \"Mar\",\n      \"Apr\",\n      \"May\",\n      \"Jun\",\n      \"Jul\",\n      \"Aug\",\n      \"Sep\",\n      \"Oct\",\n      \"Nov\",\n      \"Dec\",\n    ];\n    const datePart = date.split(\"T\")[0];\n    const [year, month, day] = datePart.split(\"-\");\n    return monthAbbr[parseInt(month, 10) - 1];\n  };\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatDateString} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n          {data.currentPrice !== undefined && (\n            <ReferenceLine\n              y={data.currentPrice}\n              stroke=\"red\"\n              strokeDasharray=\"4 4\"\n            />\n          )}\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};",
            "new_summary": {
                "high_structured": "• Defines the StockChart React component to visualize stock data\n• Validates the input data before rendering\n  ◦ Returns null if data is missing or empty\n• Extracts and displays the company name and ticker symbol\n• Processes the input data to create chartData objects\n  ◦ Each object contains a date and the corresponding closing price\n• Formats date labels on the X-axis to show month abbreviations\n• Renders a responsive line chart using Recharts components\n  ◦ Includes XAxis, YAxis, Tooltip, Legend, and a monotone Line for prices\n  ◦ Sets custom margins and disables dots on the line for clarity\n  ◦ Adds a red dashed ReferenceLine at the current price if currentPrice is provided, but the ReferenceLine no longer includes a label",
                "low_structured": "• Defines a React component for stock charts\n• Displays a line chart with company info\n• Uses provided data as input\n• Adds a red dashed reference line for the current price if present, but the reference line no longer includes a label",
                "title": "StockChart Component with Unlabeled Current Price Reference Line",
                "medium_structured": "• Renders a React component to display stock prices as a line chart\n• Extracts company name and ticker from the input data\n• Formats date labels to show month abbreviations\n• Uses Recharts components for chart rendering\n  ◦ Includes axes, legend, and tooltip for clarity\n  ◦ Adds a red dashed ReferenceLine at the current price if current price data is available, but the ReferenceLine no longer includes the 'Current Price' label",
                "medium_unstructured": "The StockChart component renders a line chart for stock prices using Recharts, displaying the company's name and ticker. It processes incoming data, formats date labels to show month abbreviations, and visualizes closing prices over time. The chart still includes a red dashed reference line at the current price if provided, but the reference line is no longer labeled 'Current Price', while axes, a legend, and a tooltip remain for better readability.",
                "high_unstructured": "This code defines the StockChart React component, which visualizes stock closing prices over time using the Recharts library. It first checks for valid input data, extracting the company name and ticker for display. The component formats date labels to show only the month abbreviation, and transforms the raw data into a format suitable for the chart. The rendered chart includes a monotone line for prices, formatted axes, a legend, a tooltip, and, if the current price is provided, a red dashed ReferenceLine at the current price, but the ReferenceLine no longer displays the 'Current Price' label, all within a responsive container for flexible layout.",
                "low_unstructured": "This code defines a React component that displays a stock price line chart using provided data, and now shows a red dashed reference line at the current price if available, but the reference line is no longer labeled 'Current Price'."
            },
            "old_summary": {
                "high_structured": "• Defines the StockChart React component to visualize stock data\n• Validates the input data before rendering\n  ◦ Returns null if data is missing or empty\n• Extracts and displays the company name and ticker symbol\n• Processes the input data to create chartData objects\n  ◦ Each object contains a date and the corresponding closing price\n• Formats date labels on the X-axis to show month abbreviations\n• Renders a responsive line chart using Recharts components\n  ◦ Includes XAxis, YAxis, Tooltip, Legend, and a monotone Line for prices\n  ◦ Sets custom margins and disables dots on the line for clarity\n  ◦ Adds a red dashed ReferenceLine at the current price with a label if currentPrice is provided",
                "low_structured": "• Defines a React component for stock charts\n• Displays a line chart with company info\n• Uses provided data as input\n• Adds a red dashed reference line for the current price if present",
                "title": "StockChart Component with Current Price Reference Line",
                "medium_structured": "• Renders a React component to display stock prices as a line chart\n• Extracts company name and ticker from the input data\n• Formats date labels to show month abbreviations\n• Uses Recharts components for chart rendering\n  ◦ Includes axes, legend, and tooltip for clarity\n  ◦ Adds a red dashed ReferenceLine labeled 'Current Price' if current price data is available",
                "medium_unstructured": "The StockChart component renders a line chart for stock prices using Recharts, displaying the company's name and ticker. It processes incoming data, formats date labels to show month abbreviations, and visualizes closing prices over time. The chart now additionally includes a red dashed reference line labeled 'Current Price' if the current price is provided, along with axes, a legend, and a tooltip for better readability.",
                "high_unstructured": "This code defines the StockChart React component, which visualizes stock closing prices over time using the Recharts library. It first checks for valid input data, extracting the company name and ticker for display. The component formats date labels to show only the month abbreviation, and transforms the raw data into a format suitable for the chart. The rendered chart includes a monotone line for prices, formatted axes, a legend, a tooltip, and, if the current price is provided, a red dashed ReferenceLine labeled 'Current Price', all within a responsive container for flexible layout.",
                "low_unstructured": "This code defines a React component that displays a stock price line chart using provided data, and now also shows a red dashed reference line at the current price if available."
            }
        },
        "id": "ouBkBYMdDTtay0B5tI7k"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-17 11:24:54.000",
        "source": "backend",
        "data": {
            "code": "13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     const monthAbbr = [\n21:       \"Jan\",\n22:       \"Feb\",\n23:       \"Mar\",\n24:       \"Apr\",\n25:       \"May\",\n26:       \"Jun\",\n27:       \"Jul\",\n28:       \"Aug\",\n29:       \"Sep\",\n30:       \"Oct\",\n31:       \"Nov\",\n32:       \"Dec\",\n33:     ];\n34:     const datePart = date.split(\"T\")[0];\n35:     const [year, month, day] = datePart.split(\"-\");\n36:     return monthAbbr[parseInt(month, 10) - 1];\n37:   };\n38:   // Combine labels and values into an array of objects for Recharts\n39:   const chartData = data.data.map((item) => ({\n40:     date: item.date,\n41:     price: item.close,\n42:   }));\n43: \n44:   return (\n45:     <div style={{ marginTop: \"2rem\" }}>\n46:       <h3>\n47:         {company} ({ticker})\n48:       </h3>\n49:       <ResponsiveContainer width=\"100%\" height={300}>\n50:         <LineChart\n51:           data={chartData}\n52:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n53:         >\n54:           <XAxis dataKey=\"date\" tickFormatter={formatDateString} />\n55:           <YAxis domain={[\"auto\", \"auto\"]} />\n56:           <Tooltip />\n57:           <Legend />\n58:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n59:           {data.currentPrice !== undefined && (\n60:             <ReferenceLine\n61:               y={data.currentPrice}\n62:               stroke=\"red\"\n63:               strokeDasharray=\"4 4\"\n64:             />\n65:           )}\n66:         </LineChart>\n67:       </ResponsiveContainer>\n68:     </div>\n69:   );\n70: };",
            "mapping": [
                {
                    "summaryComponent": "Defines a React component for stock charts",
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        }
                    ]
                },
                {
                    "summaryComponent": "Displays a line chart with company info",
                    "codeSegments": [
                        {
                            "code": "<h3>",
                            "line": 46
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 47
                        },
                        {
                            "code": "<LineChart",
                            "line": 50
                        }
                    ]
                },
                {
                    "summaryComponent": "Uses provided data as input",
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        },
                        {
                            "code": "const chartData = data.data.map((item) => ({",
                            "line": 39
                        }
                    ]
                },
                {
                    "summaryComponent": "Adds a red dashed reference line for the current price if present, but the reference line no longer includes a label",
                    "codeSegments": [
                        {
                            "code": "{data.currentPrice !== undefined && (",
                            "line": 59
                        },
                        {
                            "code": "<ReferenceLine",
                            "line": 60
                        },
                        {
                            "code": "y={data.currentPrice}",
                            "line": 61
                        },
                        {
                            "code": "stroke=\"red\"",
                            "line": 62
                        },
                        {
                            "code": "strokeDasharray=\"4 4\"",
                            "line": 63
                        }
                    ]
                }
            ],
            "summary": "• Defines a React component for stock charts\n• Displays a line chart with company info\n• Uses provided data as input\n• Adds a red dashed reference line for the current price if present, but the reference line no longer includes a label"
        },
        "id": "XZG1AMjzqgN9fOHHJ9Xn"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-17 11:24:54.000",
        "source": "backend",
        "data": {
            "code": "13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     const monthAbbr = [\n21:       \"Jan\",\n22:       \"Feb\",\n23:       \"Mar\",\n24:       \"Apr\",\n25:       \"May\",\n26:       \"Jun\",\n27:       \"Jul\",\n28:       \"Aug\",\n29:       \"Sep\",\n30:       \"Oct\",\n31:       \"Nov\",\n32:       \"Dec\",\n33:     ];\n34:     const datePart = date.split(\"T\")[0];\n35:     const [year, month, day] = datePart.split(\"-\");\n36:     return monthAbbr[parseInt(month, 10) - 1];\n37:   };\n38:   // Combine labels and values into an array of objects for Recharts\n39:   const chartData = data.data.map((item) => ({\n40:     date: item.date,\n41:     price: item.close,\n42:   }));\n43: \n44:   return (\n45:     <div style={{ marginTop: \"2rem\" }}>\n46:       <h3>\n47:         {company} ({ticker})\n48:       </h3>\n49:       <ResponsiveContainer width=\"100%\" height={300}>\n50:         <LineChart\n51:           data={chartData}\n52:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n53:         >\n54:           <XAxis dataKey=\"date\" tickFormatter={formatDateString} />\n55:           <YAxis domain={[\"auto\", \"auto\"]} />\n56:           <Tooltip />\n57:           <Legend />\n58:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n59:           {data.currentPrice !== undefined && (\n60:             <ReferenceLine\n61:               y={data.currentPrice}\n62:               stroke=\"red\"\n63:               strokeDasharray=\"4 4\"\n64:             />\n65:           )}\n66:         </LineChart>\n67:       </ResponsiveContainer>\n68:     </div>\n69:   );\n70: };",
            "mapping": [
                {
                    "summaryComponent": "defines a React component",
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        }
                    ]
                },
                {
                    "summaryComponent": "displays a stock price line chart",
                    "codeSegments": [
                        {
                            "code": "<LineChart",
                            "line": 50
                        },
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 58
                        }
                    ]
                },
                {
                    "summaryComponent": "using provided data",
                    "codeSegments": [
                        {
                            "code": "const chartData = data.data.map((item) => ({",
                            "line": 39
                        },
                        {
                            "code": "data={chartData}",
                            "line": 51
                        }
                    ]
                },
                {
                    "summaryComponent": "shows a red dashed reference line at the current price if available",
                    "codeSegments": [
                        {
                            "code": "{data.currentPrice !== undefined && (",
                            "line": 59
                        },
                        {
                            "code": "<ReferenceLine",
                            "line": 60
                        },
                        {
                            "code": "y={data.currentPrice}",
                            "line": 61
                        },
                        {
                            "code": "stroke=\"red\"",
                            "line": 62
                        },
                        {
                            "code": "strokeDasharray=\"4 4\"",
                            "line": 63
                        }
                    ]
                },
                {
                    "summaryComponent": "the reference line is no longer labeled 'Current Price'",
                    "codeSegments": [
                        {
                            "code": "<ReferenceLine",
                            "line": 60
                        }
                    ]
                }
            ],
            "summary": "This code defines a React component that displays a stock price line chart using provided data, and now shows a red dashed reference line at the current price if available, but the reference line is no longer labeled 'Current Price'."
        },
        "id": "fzuAB3n4qQAVRHvXDWLR"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-17 11:24:55.000",
        "source": "backend",
        "data": {
            "code": "13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     const monthAbbr = [\n21:       \"Jan\",\n22:       \"Feb\",\n23:       \"Mar\",\n24:       \"Apr\",\n25:       \"May\",\n26:       \"Jun\",\n27:       \"Jul\",\n28:       \"Aug\",\n29:       \"Sep\",\n30:       \"Oct\",\n31:       \"Nov\",\n32:       \"Dec\",\n33:     ];\n34:     const datePart = date.split(\"T\")[0];\n35:     const [year, month, day] = datePart.split(\"-\");\n36:     return monthAbbr[parseInt(month, 10) - 1];\n37:   };\n38:   // Combine labels and values into an array of objects for Recharts\n39:   const chartData = data.data.map((item) => ({\n40:     date: item.date,\n41:     price: item.close,\n42:   }));\n43: \n44:   return (\n45:     <div style={{ marginTop: \"2rem\" }}>\n46:       <h3>\n47:         {company} ({ticker})\n48:       </h3>\n49:       <ResponsiveContainer width=\"100%\" height={300}>\n50:         <LineChart\n51:           data={chartData}\n52:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n53:         >\n54:           <XAxis dataKey=\"date\" tickFormatter={formatDateString} />\n55:           <YAxis domain={[\"auto\", \"auto\"]} />\n56:           <Tooltip />\n57:           <Legend />\n58:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n59:           {data.currentPrice !== undefined && (\n60:             <ReferenceLine\n61:               y={data.currentPrice}\n62:               stroke=\"red\"\n63:               strokeDasharray=\"4 4\"\n64:             />\n65:           )}\n66:         </LineChart>\n67:       </ResponsiveContainer>\n68:     </div>\n69:   );\n70: };",
            "mapping": [
                {
                    "summaryComponent": "Renders a React component to display stock prices as a line chart",
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        },
                        {
                            "code": "<LineChart",
                            "line": 50
                        }
                    ]
                },
                {
                    "summaryComponent": "Extracts company name and ticker from the input data",
                    "codeSegments": [
                        {
                            "code": "const company = data.name;",
                            "line": 16
                        },
                        {
                            "code": "const ticker = data.ticker;",
                            "line": 17
                        }
                    ]
                },
                {
                    "summaryComponent": "Formats date labels to show month abbreviations",
                    "codeSegments": [
                        {
                            "code": "const formatDateString = (date) => {",
                            "line": 19
                        },
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                            "line": 54
                        }
                    ]
                },
                {
                    "summaryComponent": "Uses Recharts components for chart rendering",
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 49
                        },
                        {
                            "code": "<LineChart",
                            "line": 50
                        }
                    ]
                },
                {
                    "summaryComponent": "Includes axes, legend, and tooltip for clarity",
                    "codeSegments": [
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                            "line": 54
                        },
                        {
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                            "line": 55
                        },
                        {
                            "code": "<Tooltip />",
                            "line": 56
                        },
                        {
                            "code": "<Legend />",
                            "line": 57
                        }
                    ]
                },
                {
                    "summaryComponent": "Adds a red dashed ReferenceLine at the current price if current price data is available, but the ReferenceLine no longer includes the 'Current Price' label",
                    "codeSegments": [
                        {
                            "code": "{data.currentPrice !== undefined && (",
                            "line": 59
                        },
                        {
                            "code": "<ReferenceLine",
                            "line": 60
                        },
                        {
                            "code": "y={data.currentPrice}",
                            "line": 61
                        },
                        {
                            "code": "stroke=\"red\"",
                            "line": 62
                        },
                        {
                            "code": "strokeDasharray=\"4 4\"",
                            "line": 63
                        }
                    ]
                }
            ],
            "summary": "• Renders a React component to display stock prices as a line chart\n• Extracts company name and ticker from the input data\n• Formats date labels to show month abbreviations\n• Uses Recharts components for chart rendering\n  ◦ Includes axes, legend, and tooltip for clarity\n  ◦ Adds a red dashed ReferenceLine at the current price if current price data is available, but the ReferenceLine no longer includes the 'Current Price' label"
        },
        "id": "J83WZDLqMHu9YrfiHxvE"
    },
    {
        "event": "create_new_section",
        "timestamp": "2025-08-17 11:24:56.000",
        "source": "frontend",
        "data": {
            "section_id": "f8f8aa12-e0f0-4c29-b916-0c012c76ef7c",
            "section_data": {
                "metadata": {
                    "id": "f8f8aa12-e0f0-4c29-b916-0c012c76ef7c",
                    "fullPath": "/project/workspace/frontend/src/StockChart.jsx",
                    "offset": 156,
                    "filename": "StockChart.jsx",
                    "originalCode": "const StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    const monthAbbr = [\n      \"Jan\",\n      \"Feb\",\n      \"Mar\",\n      \"Apr\",\n      \"May\",\n      \"Jun\",\n      \"Jul\",\n      \"Aug\",\n      \"Sep\",\n      \"Oct\",\n      \"Nov\",\n      \"Dec\",\n    ];\n    const datePart = date.split(\"T\")[0];\n    const [year, month, day] = datePart.split(\"-\");\n    return monthAbbr[parseInt(month, 10) - 1];\n  };\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatDateString} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n          {data.currentPrice !== undefined && (\n            <ReferenceLine\n              y={data.currentPrice}\n              stroke=\"red\"\n              strokeDasharray=\"4 4\"\n            />\n          )}\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};"
                },
                "summaryMappings": {
                    "high_structured": [
                        {
                            "summaryComponent": "Defines the StockChart React component to visualize stock data",
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Validates the input data before rendering",
                            "codeSegments": [
                                {
                                    "code": "if (!data || !data.data || !data.data.length) return null;",
                                    "line": 14
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Returns null if data is missing or empty",
                            "codeSegments": [
                                {
                                    "code": "if (!data || !data.data || !data.data.length) return null;",
                                    "line": 14
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Extracts and displays the company name and ticker symbol",
                            "codeSegments": [
                                {
                                    "code": "const company = data.name;",
                                    "line": 16
                                },
                                {
                                    "code": "const ticker = data.ticker;",
                                    "line": 17
                                },
                                {
                                    "code": "{company} ({ticker})",
                                    "line": 47
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Processes the input data to create chartData objects",
                            "codeSegments": [
                                {
                                    "code": "const chartData = data.data.map((item) => ({",
                                    "line": 39
                                },
                                {
                                    "code": "date: item.date,",
                                    "line": 40
                                },
                                {
                                    "code": "price: item.close,",
                                    "line": 41
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Each object contains a date and the corresponding closing price",
                            "codeSegments": [
                                {
                                    "code": "date: item.date,",
                                    "line": 40
                                },
                                {
                                    "code": "price: item.close,",
                                    "line": 41
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Formats date labels on the X-axis to show month abbreviations",
                            "codeSegments": [
                                {
                                    "code": "const formatDateString = (date) => {",
                                    "line": 19
                                },
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                                    "line": 54
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Renders a responsive line chart using Recharts components",
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 49
                                },
                                {
                                    "code": "<LineChart",
                                    "line": 50
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Includes XAxis, YAxis, Tooltip, Legend, and a monotone Line for prices",
                            "codeSegments": [
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                                    "line": 54
                                },
                                {
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                                    "line": 55
                                },
                                {
                                    "code": "<Tooltip />",
                                    "line": 56
                                },
                                {
                                    "code": "<Legend />",
                                    "line": 57
                                },
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 58
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Sets custom margins and disables dots on the line for clarity",
                            "codeSegments": [
                                {
                                    "code": "margin={{ top: 10, right: 30, left: 0, bottom: 0 }}",
                                    "line": 52
                                },
                                {
                                    "code": "dot={false}",
                                    "line": 58
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Adds a red dashed ReferenceLine at the current price if currentPrice is provided, but the ReferenceLine no longer includes a label",
                            "codeSegments": [
                                {
                                    "code": "{data.currentPrice !== undefined && (",
                                    "line": 59
                                },
                                {
                                    "code": "<ReferenceLine",
                                    "line": 60
                                },
                                {
                                    "code": "y={data.currentPrice}",
                                    "line": 61
                                },
                                {
                                    "code": "stroke=\"red\"",
                                    "line": 62
                                },
                                {
                                    "code": "strokeDasharray=\"4 4\"",
                                    "line": 63
                                }
                            ]
                        }
                    ],
                    "low_structured": [
                        {
                            "summaryComponent": "Defines a React component for stock charts",
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Displays a line chart with company info",
                            "codeSegments": [
                                {
                                    "code": "<h3>",
                                    "line": 46
                                },
                                {
                                    "code": "{company} ({ticker})",
                                    "line": 47
                                },
                                {
                                    "code": "<LineChart",
                                    "line": 50
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Uses provided data as input",
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                },
                                {
                                    "code": "const chartData = data.data.map((item) => ({",
                                    "line": 39
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Adds a red dashed reference line for the current price if present, but the reference line no longer includes a label",
                            "codeSegments": [
                                {
                                    "code": "{data.currentPrice !== undefined && (",
                                    "line": 59
                                },
                                {
                                    "code": "<ReferenceLine",
                                    "line": 60
                                },
                                {
                                    "code": "y={data.currentPrice}",
                                    "line": 61
                                },
                                {
                                    "code": "stroke=\"red\"",
                                    "line": 62
                                },
                                {
                                    "code": "strokeDasharray=\"4 4\"",
                                    "line": 63
                                }
                            ]
                        }
                    ],
                    "medium_structured": [
                        {
                            "summaryComponent": "Renders a React component to display stock prices as a line chart",
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                },
                                {
                                    "code": "<LineChart",
                                    "line": 50
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Extracts company name and ticker from the input data",
                            "codeSegments": [
                                {
                                    "code": "const company = data.name;",
                                    "line": 16
                                },
                                {
                                    "code": "const ticker = data.ticker;",
                                    "line": 17
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Formats date labels to show month abbreviations",
                            "codeSegments": [
                                {
                                    "code": "const formatDateString = (date) => {",
                                    "line": 19
                                },
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                                    "line": 54
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Uses Recharts components for chart rendering",
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 49
                                },
                                {
                                    "code": "<LineChart",
                                    "line": 50
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Includes axes, legend, and tooltip for clarity",
                            "codeSegments": [
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                                    "line": 54
                                },
                                {
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                                    "line": 55
                                },
                                {
                                    "code": "<Tooltip />",
                                    "line": 56
                                },
                                {
                                    "code": "<Legend />",
                                    "line": 57
                                }
                            ]
                        },
                        {
                            "summaryComponent": "Adds a red dashed ReferenceLine at the current price if current price data is available, but the ReferenceLine no longer includes the 'Current Price' label",
                            "codeSegments": [
                                {
                                    "code": "{data.currentPrice !== undefined && (",
                                    "line": 59
                                },
                                {
                                    "code": "<ReferenceLine",
                                    "line": 60
                                },
                                {
                                    "code": "y={data.currentPrice}",
                                    "line": 61
                                },
                                {
                                    "code": "stroke=\"red\"",
                                    "line": 62
                                },
                                {
                                    "code": "strokeDasharray=\"4 4\"",
                                    "line": 63
                                }
                            ]
                        }
                    ],
                    "medium_unstructured": [
                        {
                            "summaryComponent": "The StockChart component renders a line chart for stock prices using Recharts",
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                },
                                {
                                    "code": "<LineChart",
                                    "line": 50
                                }
                            ]
                        },
                        {
                            "summaryComponent": "displaying the company's name and ticker",
                            "codeSegments": [
                                {
                                    "code": "<h3>",
                                    "line": 46
                                },
                                {
                                    "code": "{company} ({ticker})",
                                    "line": 47
                                }
                            ]
                        },
                        {
                            "summaryComponent": "It processes incoming data",
                            "codeSegments": [
                                {
                                    "code": "const chartData = data.data.map((item) => ({",
                                    "line": 39
                                }
                            ]
                        },
                        {
                            "summaryComponent": "formats date labels to show month abbreviations",
                            "codeSegments": [
                                {
                                    "code": "const formatDateString = (date) => {",
                                    "line": 19
                                },
                                {
                                    "code": "const monthAbbr = [",
                                    "line": 20
                                },
                                {
                                    "code": "return monthAbbr[parseInt(month, 10) - 1];",
                                    "line": 36
                                },
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                                    "line": 54
                                }
                            ]
                        },
                        {
                            "summaryComponent": "visualizes closing prices over time",
                            "codeSegments": [
                                {
                                    "code": "price: item.close,",
                                    "line": 41
                                },
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 58
                                }
                            ]
                        },
                        {
                            "summaryComponent": "The chart still includes a red dashed reference line at the current price if provided",
                            "codeSegments": [
                                {
                                    "code": "{data.currentPrice !== undefined && (",
                                    "line": 59
                                },
                                {
                                    "code": "<ReferenceLine",
                                    "line": 60
                                },
                                {
                                    "code": "y={data.currentPrice}",
                                    "line": 61
                                },
                                {
                                    "code": "stroke=\"red\"",
                                    "line": 62
                                },
                                {
                                    "code": "strokeDasharray=\"4 4\"",
                                    "line": 63
                                }
                            ]
                        },
                        {
                            "summaryComponent": "but the reference line is no longer labeled 'Current Price'",
                            "codeSegments": [
                                {
                                    "code": "<ReferenceLine",
                                    "line": 60
                                }
                            ]
                        },
                        {
                            "summaryComponent": "while axes, a legend, and a tooltip remain for better readability",
                            "codeSegments": [
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                                    "line": 54
                                },
                                {
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                                    "line": 55
                                },
                                {
                                    "code": "<Tooltip />",
                                    "line": 56
                                },
                                {
                                    "code": "<Legend />",
                                    "line": 57
                                }
                            ]
                        }
                    ],
                    "high_unstructured": [
                        {
                            "summaryComponent": "defines the StockChart React component",
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                }
                            ]
                        },
                        {
                            "summaryComponent": "visualizes stock closing prices over time using the Recharts library",
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 49
                                },
                                {
                                    "code": "<LineChart",
                                    "line": 50
                                },
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 58
                                }
                            ]
                        },
                        {
                            "summaryComponent": "checks for valid input data",
                            "codeSegments": [
                                {
                                    "code": "if (!data || !data.data || !data.data.length) return null;",
                                    "line": 14
                                }
                            ]
                        },
                        {
                            "summaryComponent": "extracting the company name and ticker for display",
                            "codeSegments": [
                                {
                                    "code": "const company = data.name;",
                                    "line": 16
                                },
                                {
                                    "code": "const ticker = data.ticker;",
                                    "line": 17
                                },
                                {
                                    "code": "{company} ({ticker})",
                                    "line": 47
                                }
                            ]
                        },
                        {
                            "summaryComponent": "formats date labels to show only the month abbreviation",
                            "codeSegments": [
                                {
                                    "code": "const formatDateString = (date) => {",
                                    "line": 19
                                },
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                                    "line": 54
                                }
                            ]
                        },
                        {
                            "summaryComponent": "transforms the raw data into a format suitable for the chart",
                            "codeSegments": [
                                {
                                    "code": "const chartData = data.data.map((item) => ({",
                                    "line": 39
                                }
                            ]
                        },
                        {
                            "summaryComponent": "rendered chart includes a monotone line for prices",
                            "codeSegments": [
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 58
                                }
                            ]
                        },
                        {
                            "summaryComponent": "formatted axes",
                            "codeSegments": [
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                                    "line": 54
                                },
                                {
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                                    "line": 55
                                }
                            ]
                        },
                        {
                            "summaryComponent": "a legend, a tooltip",
                            "codeSegments": [
                                {
                                    "code": "<Tooltip />",
                                    "line": 56
                                },
                                {
                                    "code": "<Legend />",
                                    "line": 57
                                }
                            ]
                        },
                        {
                            "summaryComponent": "if the current price is provided, a red dashed ReferenceLine at the current price, but the ReferenceLine no longer displays the 'Current Price' label",
                            "codeSegments": [
                                {
                                    "code": "{data.currentPrice !== undefined && (",
                                    "line": 59
                                },
                                {
                                    "code": "<ReferenceLine",
                                    "line": 60
                                },
                                {
                                    "code": "y={data.currentPrice}",
                                    "line": 61
                                },
                                {
                                    "code": "stroke=\"red\"",
                                    "line": 62
                                },
                                {
                                    "code": "strokeDasharray=\"4 4\"",
                                    "line": 63
                                }
                            ]
                        },
                        {
                            "summaryComponent": "all within a responsive container for flexible layout",
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 49
                                }
                            ]
                        }
                    ],
                    "low_unstructured": [
                        {
                            "summaryComponent": "defines a React component",
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                }
                            ]
                        },
                        {
                            "summaryComponent": "displays a stock price line chart",
                            "codeSegments": [
                                {
                                    "code": "<LineChart",
                                    "line": 50
                                },
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 58
                                }
                            ]
                        },
                        {
                            "summaryComponent": "using provided data",
                            "codeSegments": [
                                {
                                    "code": "const chartData = data.data.map((item) => ({",
                                    "line": 39
                                },
                                {
                                    "code": "data={chartData}",
                                    "line": 51
                                }
                            ]
                        },
                        {
                            "summaryComponent": "shows a red dashed reference line at the current price if available",
                            "codeSegments": [
                                {
                                    "code": "{data.currentPrice !== undefined && (",
                                    "line": 59
                                },
                                {
                                    "code": "<ReferenceLine",
                                    "line": 60
                                },
                                {
                                    "code": "y={data.currentPrice}",
                                    "line": 61
                                },
                                {
                                    "code": "stroke=\"red\"",
                                    "line": 62
                                },
                                {
                                    "code": "strokeDasharray=\"4 4\"",
                                    "line": 63
                                }
                            ]
                        },
                        {
                            "summaryComponent": "the reference line is no longer labeled 'Current Price'",
                            "codeSegments": [
                                {
                                    "code": "<ReferenceLine",
                                    "line": 60
                                }
                            ]
                        }
                    ]
                },
                "summaryData": {
                    "high_structured": "• Defines the StockChart React component to visualize stock data\n• Validates the input data before rendering\n  ◦ Returns null if data is missing or empty\n• Extracts and displays the company name and ticker symbol\n• Processes the input data to create chartData objects\n  ◦ Each object contains a date and the corresponding closing price\n• Formats date labels on the X-axis to show month abbreviations\n• Renders a responsive line chart using Recharts components\n  ◦ Includes XAxis, YAxis, Tooltip, Legend, and a monotone Line for prices\n  ◦ Sets custom margins and disables dots on the line for clarity\n  ◦ Adds a red dashed ReferenceLine at the current price if currentPrice is provided, but the ReferenceLine no longer includes a label",
                    "low_structured": "• Defines a React component for stock charts\n• Displays a line chart with company info\n• Uses provided data as input\n• Adds a red dashed reference line for the current price if present, but the reference line no longer includes a label",
                    "title": "StockChart Component with Unlabeled Current Price Reference Line",
                    "medium_structured": "• Renders a React component to display stock prices as a line chart\n• Extracts company name and ticker from the input data\n• Formats date labels to show month abbreviations\n• Uses Recharts components for chart rendering\n  ◦ Includes axes, legend, and tooltip for clarity\n  ◦ Adds a red dashed ReferenceLine at the current price if current price data is available, but the ReferenceLine no longer includes the 'Current Price' label",
                    "medium_unstructured": "The StockChart component renders a line chart for stock prices using Recharts, displaying the company's name and ticker. It processes incoming data, formats date labels to show month abbreviations, and visualizes closing prices over time. The chart still includes a red dashed reference line at the current price if provided, but the reference line is no longer labeled 'Current Price', while axes, a legend, and a tooltip remain for better readability.",
                    "high_unstructured": "This code defines the StockChart React component, which visualizes stock closing prices over time using the Recharts library. It first checks for valid input data, extracting the company name and ticker for display. The component formats date labels to show only the month abbreviation, and transforms the raw data into a format suitable for the chart. The rendered chart includes a monotone line for prices, formatted axes, a legend, a tooltip, and, if the current price is provided, a red dashed ReferenceLine at the current price, but the ReferenceLine no longer displays the 'Current Price' label, all within a responsive container for flexible layout.",
                    "low_unstructured": "This code defines a React component that displays a stock price line chart using provided data, and now shows a red dashed reference line at the current price if available, but the reference line is no longer labeled 'Current Price'."
                },
                "lines": [
                    13,
                    70
                ],
                "oldSummaryData": {
                    "high_structured": "• Defines the StockChart React component to visualize stock data\n• Validates the input data before rendering\n  ◦ Returns null if data is missing or empty\n• Extracts and displays the company name and ticker symbol\n• Processes the input data to create chartData objects\n  ◦ Each object contains a date and the corresponding closing price\n• Formats date labels on the X-axis to show month abbreviations\n• Renders a responsive line chart using Recharts components\n  ◦ Includes XAxis, YAxis, Tooltip, Legend, and a monotone Line for prices\n  ◦ Sets custom margins and disables dots on the line for clarity\n  ◦ Adds a red dashed ReferenceLine at the current price with a label if currentPrice is provided",
                    "low_structured": "• Defines a React component for stock charts\n• Displays a line chart with company info\n• Uses provided data as input\n• Adds a red dashed reference line for the current price if present",
                    "title": "StockChart Component with Current Price Reference Line",
                    "medium_structured": "• Renders a React component to display stock prices as a line chart\n• Extracts company name and ticker from the input data\n• Formats date labels to show month abbreviations\n• Uses Recharts components for chart rendering\n  ◦ Includes axes, legend, and tooltip for clarity\n  ◦ Adds a red dashed ReferenceLine labeled 'Current Price' if current price data is available",
                    "medium_unstructured": "The StockChart component renders a line chart for stock prices using Recharts, displaying the company's name and ticker. It processes incoming data, formats date labels to show month abbreviations, and visualizes closing prices over time. The chart now additionally includes a red dashed reference line labeled 'Current Price' if the current price is provided, along with axes, a legend, and a tooltip for better readability.",
                    "high_unstructured": "This code defines the StockChart React component, which visualizes stock closing prices over time using the Recharts library. It first checks for valid input data, extracting the company name and ticker for display. The component formats date labels to show only the month abbreviation, and transforms the raw data into a format suitable for the chart. The rendered chart includes a monotone line for prices, formatted axes, a legend, a tooltip, and, if the current price is provided, a red dashed ReferenceLine labeled 'Current Price', all within a responsive container for flexible layout.",
                    "low_unstructured": "This code defines a React component that displays a stock price line chart using provided data, and now also shows a red dashed reference line at the current price if available."
                },
                "selectedDetailLevel": "medium",
                "selectedStructured": "unstructured",
                "editPromptValue": "",
                "title": "StockChart Component with Unlabeled Current Price Reference Line",
                "createdAt": 1755415496000,
                "editPromptDetailLevel": null,
                "editPromptStructured": null
            }
        },
        "id": "XYQ4s9rXYHpDXsXp5EsB"
    },
    {
        "event": "autotransit_section",
        "timestamp": "2025-08-17 11:24:56.000",
        "source": "frontend",
        "data": {
            "after_section_id": "f8f8aa12-e0f0-4c29-b916-0c012c76ef7c",
            "before_section_id": "5f77dccc-db45-41ce-9cd7-cbb323e379fa"
        },
        "id": "c7Y1kfDh2Y0eJA5HVpyw"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-17 11:24:56.000",
        "source": "backend",
        "data": {
            "code": "13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     const monthAbbr = [\n21:       \"Jan\",\n22:       \"Feb\",\n23:       \"Mar\",\n24:       \"Apr\",\n25:       \"May\",\n26:       \"Jun\",\n27:       \"Jul\",\n28:       \"Aug\",\n29:       \"Sep\",\n30:       \"Oct\",\n31:       \"Nov\",\n32:       \"Dec\",\n33:     ];\n34:     const datePart = date.split(\"T\")[0];\n35:     const [year, month, day] = datePart.split(\"-\");\n36:     return monthAbbr[parseInt(month, 10) - 1];\n37:   };\n38:   // Combine labels and values into an array of objects for Recharts\n39:   const chartData = data.data.map((item) => ({\n40:     date: item.date,\n41:     price: item.close,\n42:   }));\n43: \n44:   return (\n45:     <div style={{ marginTop: \"2rem\" }}>\n46:       <h3>\n47:         {company} ({ticker})\n48:       </h3>\n49:       <ResponsiveContainer width=\"100%\" height={300}>\n50:         <LineChart\n51:           data={chartData}\n52:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n53:         >\n54:           <XAxis dataKey=\"date\" tickFormatter={formatDateString} />\n55:           <YAxis domain={[\"auto\", \"auto\"]} />\n56:           <Tooltip />\n57:           <Legend />\n58:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n59:           {data.currentPrice !== undefined && (\n60:             <ReferenceLine\n61:               y={data.currentPrice}\n62:               stroke=\"red\"\n63:               strokeDasharray=\"4 4\"\n64:             />\n65:           )}\n66:         </LineChart>\n67:       </ResponsiveContainer>\n68:     </div>\n69:   );\n70: };",
            "mapping": [
                {
                    "summaryComponent": "The StockChart component renders a line chart for stock prices using Recharts",
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        },
                        {
                            "code": "<LineChart",
                            "line": 50
                        }
                    ]
                },
                {
                    "summaryComponent": "displaying the company's name and ticker",
                    "codeSegments": [
                        {
                            "code": "<h3>",
                            "line": 46
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 47
                        }
                    ]
                },
                {
                    "summaryComponent": "It processes incoming data",
                    "codeSegments": [
                        {
                            "code": "const chartData = data.data.map((item) => ({",
                            "line": 39
                        }
                    ]
                },
                {
                    "summaryComponent": "formats date labels to show month abbreviations",
                    "codeSegments": [
                        {
                            "code": "const formatDateString = (date) => {",
                            "line": 19
                        },
                        {
                            "code": "const monthAbbr = [",
                            "line": 20
                        },
                        {
                            "code": "return monthAbbr[parseInt(month, 10) - 1];",
                            "line": 36
                        },
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                            "line": 54
                        }
                    ]
                },
                {
                    "summaryComponent": "visualizes closing prices over time",
                    "codeSegments": [
                        {
                            "code": "price: item.close,",
                            "line": 41
                        },
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 58
                        }
                    ]
                },
                {
                    "summaryComponent": "The chart still includes a red dashed reference line at the current price if provided",
                    "codeSegments": [
                        {
                            "code": "{data.currentPrice !== undefined && (",
                            "line": 59
                        },
                        {
                            "code": "<ReferenceLine",
                            "line": 60
                        },
                        {
                            "code": "y={data.currentPrice}",
                            "line": 61
                        },
                        {
                            "code": "stroke=\"red\"",
                            "line": 62
                        },
                        {
                            "code": "strokeDasharray=\"4 4\"",
                            "line": 63
                        }
                    ]
                },
                {
                    "summaryComponent": "but the reference line is no longer labeled 'Current Price'",
                    "codeSegments": [
                        {
                            "code": "<ReferenceLine",
                            "line": 60
                        }
                    ]
                },
                {
                    "summaryComponent": "while axes, a legend, and a tooltip remain for better readability",
                    "codeSegments": [
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                            "line": 54
                        },
                        {
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                            "line": 55
                        },
                        {
                            "code": "<Tooltip />",
                            "line": 56
                        },
                        {
                            "code": "<Legend />",
                            "line": 57
                        }
                    ]
                }
            ],
            "summary": "The StockChart component renders a line chart for stock prices using Recharts, displaying the company's name and ticker. It processes incoming data, formats date labels to show month abbreviations, and visualizes closing prices over time. The chart still includes a red dashed reference line at the current price if provided, but the reference line is no longer labeled 'Current Price', while axes, a legend, and a tooltip remain for better readability."
        },
        "id": "fhourSjJMJyPHh635TXU"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-17 11:24:56.000",
        "source": "backend",
        "data": {
            "code": "13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     const monthAbbr = [\n21:       \"Jan\",\n22:       \"Feb\",\n23:       \"Mar\",\n24:       \"Apr\",\n25:       \"May\",\n26:       \"Jun\",\n27:       \"Jul\",\n28:       \"Aug\",\n29:       \"Sep\",\n30:       \"Oct\",\n31:       \"Nov\",\n32:       \"Dec\",\n33:     ];\n34:     const datePart = date.split(\"T\")[0];\n35:     const [year, month, day] = datePart.split(\"-\");\n36:     return monthAbbr[parseInt(month, 10) - 1];\n37:   };\n38:   // Combine labels and values into an array of objects for Recharts\n39:   const chartData = data.data.map((item) => ({\n40:     date: item.date,\n41:     price: item.close,\n42:   }));\n43: \n44:   return (\n45:     <div style={{ marginTop: \"2rem\" }}>\n46:       <h3>\n47:         {company} ({ticker})\n48:       </h3>\n49:       <ResponsiveContainer width=\"100%\" height={300}>\n50:         <LineChart\n51:           data={chartData}\n52:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n53:         >\n54:           <XAxis dataKey=\"date\" tickFormatter={formatDateString} />\n55:           <YAxis domain={[\"auto\", \"auto\"]} />\n56:           <Tooltip />\n57:           <Legend />\n58:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n59:           {data.currentPrice !== undefined && (\n60:             <ReferenceLine\n61:               y={data.currentPrice}\n62:               stroke=\"red\"\n63:               strokeDasharray=\"4 4\"\n64:             />\n65:           )}\n66:         </LineChart>\n67:       </ResponsiveContainer>\n68:     </div>\n69:   );\n70: };",
            "mapping": [
                {
                    "summaryComponent": "Defines the StockChart React component to visualize stock data",
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        }
                    ]
                },
                {
                    "summaryComponent": "Validates the input data before rendering",
                    "codeSegments": [
                        {
                            "code": "if (!data || !data.data || !data.data.length) return null;",
                            "line": 14
                        }
                    ]
                },
                {
                    "summaryComponent": "Returns null if data is missing or empty",
                    "codeSegments": [
                        {
                            "code": "if (!data || !data.data || !data.data.length) return null;",
                            "line": 14
                        }
                    ]
                },
                {
                    "summaryComponent": "Extracts and displays the company name and ticker symbol",
                    "codeSegments": [
                        {
                            "code": "const company = data.name;",
                            "line": 16
                        },
                        {
                            "code": "const ticker = data.ticker;",
                            "line": 17
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 47
                        }
                    ]
                },
                {
                    "summaryComponent": "Processes the input data to create chartData objects",
                    "codeSegments": [
                        {
                            "code": "const chartData = data.data.map((item) => ({",
                            "line": 39
                        },
                        {
                            "code": "date: item.date,",
                            "line": 40
                        },
                        {
                            "code": "price: item.close,",
                            "line": 41
                        }
                    ]
                },
                {
                    "summaryComponent": "Each object contains a date and the corresponding closing price",
                    "codeSegments": [
                        {
                            "code": "date: item.date,",
                            "line": 40
                        },
                        {
                            "code": "price: item.close,",
                            "line": 41
                        }
                    ]
                },
                {
                    "summaryComponent": "Formats date labels on the X-axis to show month abbreviations",
                    "codeSegments": [
                        {
                            "code": "const formatDateString = (date) => {",
                            "line": 19
                        },
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                            "line": 54
                        }
                    ]
                },
                {
                    "summaryComponent": "Renders a responsive line chart using Recharts components",
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 49
                        },
                        {
                            "code": "<LineChart",
                            "line": 50
                        }
                    ]
                },
                {
                    "summaryComponent": "Includes XAxis, YAxis, Tooltip, Legend, and a monotone Line for prices",
                    "codeSegments": [
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                            "line": 54
                        },
                        {
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                            "line": 55
                        },
                        {
                            "code": "<Tooltip />",
                            "line": 56
                        },
                        {
                            "code": "<Legend />",
                            "line": 57
                        },
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 58
                        }
                    ]
                },
                {
                    "summaryComponent": "Sets custom margins and disables dots on the line for clarity",
                    "codeSegments": [
                        {
                            "code": "margin={{ top: 10, right: 30, left: 0, bottom: 0 }}",
                            "line": 52
                        },
                        {
                            "code": "dot={false}",
                            "line": 58
                        }
                    ]
                },
                {
                    "summaryComponent": "Adds a red dashed ReferenceLine at the current price if currentPrice is provided, but the ReferenceLine no longer includes a label",
                    "codeSegments": [
                        {
                            "code": "{data.currentPrice !== undefined && (",
                            "line": 59
                        },
                        {
                            "code": "<ReferenceLine",
                            "line": 60
                        },
                        {
                            "code": "y={data.currentPrice}",
                            "line": 61
                        },
                        {
                            "code": "stroke=\"red\"",
                            "line": 62
                        },
                        {
                            "code": "strokeDasharray=\"4 4\"",
                            "line": 63
                        }
                    ]
                }
            ],
            "summary": "• Defines the StockChart React component to visualize stock data\n• Validates the input data before rendering\n  ◦ Returns null if data is missing or empty\n• Extracts and displays the company name and ticker symbol\n• Processes the input data to create chartData objects\n  ◦ Each object contains a date and the corresponding closing price\n• Formats date labels on the X-axis to show month abbreviations\n• Renders a responsive line chart using Recharts components\n  ◦ Includes XAxis, YAxis, Tooltip, Legend, and a monotone Line for prices\n  ◦ Sets custom margins and disables dots on the line for clarity\n  ◦ Adds a red dashed ReferenceLine at the current price if currentPrice is provided, but the ReferenceLine no longer includes a label"
        },
        "id": "jddCSFXMfdm7o7keCd1b"
    },
    {
        "event": "map_summary_code",
        "timestamp": "2025-08-17 11:24:56.000",
        "source": "backend",
        "data": {
            "code": "13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     const monthAbbr = [\n21:       \"Jan\",\n22:       \"Feb\",\n23:       \"Mar\",\n24:       \"Apr\",\n25:       \"May\",\n26:       \"Jun\",\n27:       \"Jul\",\n28:       \"Aug\",\n29:       \"Sep\",\n30:       \"Oct\",\n31:       \"Nov\",\n32:       \"Dec\",\n33:     ];\n34:     const datePart = date.split(\"T\")[0];\n35:     const [year, month, day] = datePart.split(\"-\");\n36:     return monthAbbr[parseInt(month, 10) - 1];\n37:   };\n38:   // Combine labels and values into an array of objects for Recharts\n39:   const chartData = data.data.map((item) => ({\n40:     date: item.date,\n41:     price: item.close,\n42:   }));\n43: \n44:   return (\n45:     <div style={{ marginTop: \"2rem\" }}>\n46:       <h3>\n47:         {company} ({ticker})\n48:       </h3>\n49:       <ResponsiveContainer width=\"100%\" height={300}>\n50:         <LineChart\n51:           data={chartData}\n52:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n53:         >\n54:           <XAxis dataKey=\"date\" tickFormatter={formatDateString} />\n55:           <YAxis domain={[\"auto\", \"auto\"]} />\n56:           <Tooltip />\n57:           <Legend />\n58:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n59:           {data.currentPrice !== undefined && (\n60:             <ReferenceLine\n61:               y={data.currentPrice}\n62:               stroke=\"red\"\n63:               strokeDasharray=\"4 4\"\n64:             />\n65:           )}\n66:         </LineChart>\n67:       </ResponsiveContainer>\n68:     </div>\n69:   );\n70: };",
            "mapping": [
                {
                    "summaryComponent": "defines the StockChart React component",
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        }
                    ]
                },
                {
                    "summaryComponent": "visualizes stock closing prices over time using the Recharts library",
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 49
                        },
                        {
                            "code": "<LineChart",
                            "line": 50
                        },
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 58
                        }
                    ]
                },
                {
                    "summaryComponent": "checks for valid input data",
                    "codeSegments": [
                        {
                            "code": "if (!data || !data.data || !data.data.length) return null;",
                            "line": 14
                        }
                    ]
                },
                {
                    "summaryComponent": "extracting the company name and ticker for display",
                    "codeSegments": [
                        {
                            "code": "const company = data.name;",
                            "line": 16
                        },
                        {
                            "code": "const ticker = data.ticker;",
                            "line": 17
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 47
                        }
                    ]
                },
                {
                    "summaryComponent": "formats date labels to show only the month abbreviation",
                    "codeSegments": [
                        {
                            "code": "const formatDateString = (date) => {",
                            "line": 19
                        },
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                            "line": 54
                        }
                    ]
                },
                {
                    "summaryComponent": "transforms the raw data into a format suitable for the chart",
                    "codeSegments": [
                        {
                            "code": "const chartData = data.data.map((item) => ({",
                            "line": 39
                        }
                    ]
                },
                {
                    "summaryComponent": "rendered chart includes a monotone line for prices",
                    "codeSegments": [
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 58
                        }
                    ]
                },
                {
                    "summaryComponent": "formatted axes",
                    "codeSegments": [
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                            "line": 54
                        },
                        {
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                            "line": 55
                        }
                    ]
                },
                {
                    "summaryComponent": "a legend, a tooltip",
                    "codeSegments": [
                        {
                            "code": "<Tooltip />",
                            "line": 56
                        },
                        {
                            "code": "<Legend />",
                            "line": 57
                        }
                    ]
                },
                {
                    "summaryComponent": "if the current price is provided, a red dashed ReferenceLine at the current price, but the ReferenceLine no longer displays the 'Current Price' label",
                    "codeSegments": [
                        {
                            "code": "{data.currentPrice !== undefined && (",
                            "line": 59
                        },
                        {
                            "code": "<ReferenceLine",
                            "line": 60
                        },
                        {
                            "code": "y={data.currentPrice}",
                            "line": 61
                        },
                        {
                            "code": "stroke=\"red\"",
                            "line": 62
                        },
                        {
                            "code": "strokeDasharray=\"4 4\"",
                            "line": 63
                        }
                    ]
                },
                {
                    "summaryComponent": "all within a responsive container for flexible layout",
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 49
                        }
                    ]
                }
            ],
            "summary": "This code defines the StockChart React component, which visualizes stock closing prices over time using the Recharts library. It first checks for valid input data, extracting the company name and ticker for display. The component formats date labels to show only the month abbreviation, and transforms the raw data into a format suitable for the chart. The rendered chart includes a monotone line for prices, formatted axes, a legend, a tooltip, and, if the current price is provided, a red dashed ReferenceLine at the current price, but the ReferenceLine no longer displays the 'Current Price' label, all within a responsive container for flexible layout."
        },
        "id": "w8g0wJ5iTaiDC2d3uX0k"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:25:12.000",
        "source": "frontend",
        "data": {
            "section_id": "f8f8aa12-e0f0-4c29-b916-0c012c76ef7c",
            "structured_type": "unstructured",
            "mapping_index": 5,
            "detail_level": "medium"
        },
        "id": "JtEu3EBlRwOUuh5ivX6H"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:25:12.000",
        "source": "frontend",
        "data": {
            "section_id": "f8f8aa12-e0f0-4c29-b916-0c012c76ef7c",
            "structured_type": "unstructured",
            "mapping_index": 5,
            "detail_level": "medium"
        },
        "id": "SEeZklfFQW3qPMyJUycz"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:25:12.000",
        "source": "frontend",
        "data": {
            "section_id": "f8f8aa12-e0f0-4c29-b916-0c012c76ef7c",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "SOgFgJyX4N69mqBrPYvx"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:25:12.000",
        "source": "frontend",
        "data": {
            "section_id": "f8f8aa12-e0f0-4c29-b916-0c012c76ef7c",
            "structured_type": "unstructured",
            "mapping_index": 7,
            "detail_level": "medium"
        },
        "id": "UdJJvNHOBPuwZhmKmoHv"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:25:12.000",
        "source": "frontend",
        "data": {
            "section_id": "f8f8aa12-e0f0-4c29-b916-0c012c76ef7c",
            "structured_type": "unstructured",
            "mapping_index": 6,
            "detail_level": "medium"
        },
        "id": "WkrK9NOMkTovBl1ljdNK"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:25:12.000",
        "source": "frontend",
        "data": {
            "section_id": "f8f8aa12-e0f0-4c29-b916-0c012c76ef7c",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "Y9D6R4Mk3jBIVPL4gRrM"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:25:12.000",
        "source": "frontend",
        "data": {
            "section_id": "f8f8aa12-e0f0-4c29-b916-0c012c76ef7c",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "oGJmuP3OgfjkAHEbqJkv"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:25:12.000",
        "source": "frontend",
        "data": {
            "section_id": "f8f8aa12-e0f0-4c29-b916-0c012c76ef7c",
            "structured_type": "unstructured",
            "mapping_index": 6,
            "detail_level": "medium"
        },
        "id": "rrbUrqkTkQyoKMLKAKik"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:25:12.000",
        "source": "frontend",
        "data": {
            "section_id": "f8f8aa12-e0f0-4c29-b916-0c012c76ef7c",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "sKUOYRm2qffL19edkzWa"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:25:12.000",
        "source": "frontend",
        "data": {
            "section_id": "f8f8aa12-e0f0-4c29-b916-0c012c76ef7c",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "z33R5h0l4wzlhBXeNPDL"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:25:13.000",
        "source": "frontend",
        "data": {
            "section_id": "f8f8aa12-e0f0-4c29-b916-0c012c76ef7c",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "3U5eiTeuEX8dDGJHECJn"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:25:13.000",
        "source": "frontend",
        "data": {
            "section_id": "f8f8aa12-e0f0-4c29-b916-0c012c76ef7c",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "FTgL4Po1NGPTnpXqT85r"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:25:13.000",
        "source": "frontend",
        "data": {
            "section_id": "f8f8aa12-e0f0-4c29-b916-0c012c76ef7c",
            "structured_type": "unstructured",
            "mapping_index": 6,
            "detail_level": "medium"
        },
        "id": "bJKNn4O47mFHBtJahrCM"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:25:13.000",
        "source": "frontend",
        "data": {
            "section_id": "f8f8aa12-e0f0-4c29-b916-0c012c76ef7c",
            "structured_type": "unstructured",
            "mapping_index": 6,
            "detail_level": "medium"
        },
        "id": "iwsdSRyPJJ6GNVM4Fi6A"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:25:13.000",
        "source": "frontend",
        "data": {
            "section_id": "f8f8aa12-e0f0-4c29-b916-0c012c76ef7c",
            "structured_type": "unstructured",
            "mapping_index": 7,
            "detail_level": "medium"
        },
        "id": "mtAhFofpJuxmfMviaYgW"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:25:14.000",
        "source": "frontend",
        "data": {
            "section_id": "f8f8aa12-e0f0-4c29-b916-0c012c76ef7c",
            "structured_type": "unstructured",
            "mapping_index": 7,
            "detail_level": "medium"
        },
        "id": "2G00QmQP2vxeKzoojqf8"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:25:14.000",
        "source": "frontend",
        "data": {
            "section_id": "f8f8aa12-e0f0-4c29-b916-0c012c76ef7c",
            "structured_type": "unstructured",
            "mapping_index": 7,
            "detail_level": "medium"
        },
        "id": "2WNJJPMlhdCl9WI03yft"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:25:14.000",
        "source": "frontend",
        "data": {
            "section_id": "f8f8aa12-e0f0-4c29-b916-0c012c76ef7c",
            "structured_type": "unstructured",
            "mapping_index": 5,
            "detail_level": "medium"
        },
        "id": "7kBkZocdFcPuFNpkGjXB"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:25:14.000",
        "source": "frontend",
        "data": {
            "section_id": "f8f8aa12-e0f0-4c29-b916-0c012c76ef7c",
            "structured_type": "unstructured",
            "mapping_index": 6,
            "detail_level": "medium"
        },
        "id": "JLLjXdQeEHvEZkYsGcBg"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:25:14.000",
        "source": "frontend",
        "data": {
            "section_id": "f8f8aa12-e0f0-4c29-b916-0c012c76ef7c",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "LG9lDwcj72DqH8H5PSTo"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:25:14.000",
        "source": "frontend",
        "data": {
            "section_id": "f8f8aa12-e0f0-4c29-b916-0c012c76ef7c",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "MhUMvuxlWDFIjhQ6ym1K"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:25:14.000",
        "source": "frontend",
        "data": {
            "section_id": "f8f8aa12-e0f0-4c29-b916-0c012c76ef7c",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "PJbq3y7emaeTzDbsZuWv"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:25:14.000",
        "source": "frontend",
        "data": {
            "section_id": "f8f8aa12-e0f0-4c29-b916-0c012c76ef7c",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "TqDIxoujRQMf6uFgoxfc"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:25:14.000",
        "source": "frontend",
        "data": {
            "section_id": "f8f8aa12-e0f0-4c29-b916-0c012c76ef7c",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "q37tebjLhLZj4ydyG1SU"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:25:21.000",
        "source": "frontend",
        "data": {
            "section_id": "f8f8aa12-e0f0-4c29-b916-0c012c76ef7c",
            "structured_type": "unstructured",
            "mapping_index": 2,
            "detail_level": "medium"
        },
        "id": "49fl9DssJaRbYrZ08lnz"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:25:21.000",
        "source": "frontend",
        "data": {
            "section_id": "f8f8aa12-e0f0-4c29-b916-0c012c76ef7c",
            "structured_type": "unstructured",
            "mapping_index": 1,
            "detail_level": "medium"
        },
        "id": "4mpUGsU24lTeAv8KYtq8"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:25:21.000",
        "source": "frontend",
        "data": {
            "section_id": "f8f8aa12-e0f0-4c29-b916-0c012c76ef7c",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "JMxwFFXdUt2KWDpsLmyI"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:25:21.000",
        "source": "frontend",
        "data": {
            "section_id": "f8f8aa12-e0f0-4c29-b916-0c012c76ef7c",
            "structured_type": "unstructured",
            "mapping_index": 3,
            "detail_level": "medium"
        },
        "id": "Te1zU6kIQTc8n2t0aGQx"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:25:21.000",
        "source": "frontend",
        "data": {
            "section_id": "f8f8aa12-e0f0-4c29-b916-0c012c76ef7c",
            "structured_type": "unstructured",
            "mapping_index": 4,
            "detail_level": "medium"
        },
        "id": "U0Kgqjwy3QMoumX5M7uP"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:25:21.000",
        "source": "frontend",
        "data": {
            "section_id": "f8f8aa12-e0f0-4c29-b916-0c012c76ef7c",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "rje67b4JKkTlcf9HFCw3"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:25:21.000",
        "source": "frontend",
        "data": {
            "section_id": "f8f8aa12-e0f0-4c29-b916-0c012c76ef7c",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "v6SQcEzuyit96Z69y7SE"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:25:22.000",
        "source": "frontend",
        "data": {
            "section_id": "f8f8aa12-e0f0-4c29-b916-0c012c76ef7c",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "HgvDDTkIEnBvWKMRKew2"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:25:22.000",
        "source": "frontend",
        "data": {
            "section_id": "f8f8aa12-e0f0-4c29-b916-0c012c76ef7c",
            "structured_type": "unstructured",
            "mapping_index": 3,
            "detail_level": "medium"
        },
        "id": "b4I9laRGIhdEbB5wJguX"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:25:22.000",
        "source": "frontend",
        "data": {
            "section_id": "f8f8aa12-e0f0-4c29-b916-0c012c76ef7c",
            "structured_type": "unstructured",
            "mapping_index": 6,
            "detail_level": "medium"
        },
        "id": "jG0ZAirKDxVKyAPDvwwc"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:25:22.000",
        "source": "frontend",
        "data": {
            "section_id": "f8f8aa12-e0f0-4c29-b916-0c012c76ef7c",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "l8BTBeQg0ZPVq5R64q2x"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:25:22.000",
        "source": "frontend",
        "data": {
            "section_id": "f8f8aa12-e0f0-4c29-b916-0c012c76ef7c",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "nRoKmE2RkctvlaMwLxWg"
    },
    {
        "event": "mapping_unhover",
        "timestamp": "2025-08-17 11:25:22.000",
        "source": "frontend",
        "data": {
            "section_id": "f8f8aa12-e0f0-4c29-b916-0c012c76ef7c",
            "structured_type": "unstructured",
            "detail_level": "medium"
        },
        "id": "q44FOnrb9FatHCOYdVcN"
    },
    {
        "event": "mapping_hover",
        "timestamp": "2025-08-17 11:25:22.000",
        "source": "frontend",
        "data": {
            "section_id": "f8f8aa12-e0f0-4c29-b916-0c012c76ef7c",
            "structured_type": "unstructured",
            "mapping_index": 7,
            "detail_level": "medium"
        },
        "id": "xZJJAk4Gt7dQVG94FSgc"
    }
]