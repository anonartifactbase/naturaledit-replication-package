[
    {
        "data": {},
        "timestamp": "2025-08-21 19:13:31.000",
        "event": "click_summarize_code",
        "source": "frontend",
        "id": "kJR2VfYrj5u88SkhgaJR"
    },
    {
        "data": {
            "summary": {
                "high_unstructured": "The StockChart component is a functional React component that visualizes stock price data using the Recharts library. It first checks that valid data is provided, then extracts the company name and ticker symbol for display. The component processes the input data to create an array of objects containing date and closing price pairs, which are then used to render a responsive line chart. The chart includes axes, a tooltip, a legend, and omits dots on the line for a cleaner look, all styled within a container with a margin.",
                "title": "StockChart React Component Summary",
                "low_structured": "• Defines a React component for displaying stock data\n• Renders a line chart with company and ticker info",
                "medium_unstructured": "The StockChart component receives stock data as a prop and renders a line chart visualizing the closing prices over time. It displays the company's name and ticker symbol above the chart, and uses the Recharts library for rendering. If no data is provided, the component returns nothing.",
                "medium_structured": "• Receives stock data as a prop and checks for its presence\n• Extracts company name and ticker for display\n• Processes input data to map dates and closing prices\n• Renders a line chart using Recharts\n  ◦ Includes company/ticker header and chart features like axes, tooltip, and legend",
                "low_unstructured": "This code defines a React component that displays a stock price line chart using provided data.",
                "high_structured": "• Defines a functional React component named StockChart\n• Validates input data, returning null if missing or empty\n• Extracts company name and ticker symbol from the data prop\n• Processes raw data to create chartData array\n  ◦ Each entry contains a 'date' and corresponding 'price' (from 'close')\n• Defines a helper function to format date strings (though unused in rendering)\n• Renders a styled container with:\n  ◦ A header displaying company name and ticker\n  ◦ A responsive line chart using Recharts\n    ▪ X-axis for dates, Y-axis for price (auto domain)\n    ▪ Tooltip and legend for interactivity\n    ▪ Monotone line for price, styled with a specific color and no dots"
            },
            "selected_code": "const StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;\n"
        },
        "timestamp": "2025-08-21 19:13:38.000",
        "event": "summarize_selected_code",
        "source": "backend",
        "id": "aOgWewyCWLTl9UI8myY1"
    },
    {
        "data": {
            "summary": "• Defines a React component for displaying stock data\n• Renders a line chart with company and ticker info",
            "code": "13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));\n28: \n29:   return (\n30:     <div style={{ marginTop: \"2rem\" }}>\n31:       <h3>\n32:         {company} ({ticker})\n33:       </h3>\n34:       <ResponsiveContainer width=\"100%\" height={300}>\n35:         <LineChart\n36:           data={chartData}\n37:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n38:         >\n39:           <XAxis dataKey=\"date\" />\n40:           <YAxis domain={[\"auto\", \"auto\"]} />\n41:           <Tooltip />\n42:           <Legend />\n43:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n44:         </LineChart>\n45:       </ResponsiveContainer>\n46:     </div>\n47:   );\n48: };\n49: \n50: export default StockChart;\n51: ",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        }
                    ],
                    "summaryComponent": "Defines a React component for displaying stock data"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<LineChart",
                            "line": 35
                        },
                        {
                            "code": "<h3>",
                            "line": 31
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 32
                        }
                    ],
                    "summaryComponent": "Renders a line chart with company and ticker info"
                }
            ]
        },
        "timestamp": "2025-08-21 19:13:39.000",
        "event": "map_summary_code",
        "source": "backend",
        "id": "tJ05nuZSaSyyHQWPjKWa"
    },
    {
        "data": {
            "summary": "• Receives stock data as a prop and checks for its presence\n• Extracts company name and ticker for display\n• Processes input data to map dates and closing prices\n• Renders a line chart using Recharts\n  ◦ Includes company/ticker header and chart features like axes, tooltip, and legend",
            "code": "13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));\n28: \n29:   return (\n30:     <div style={{ marginTop: \"2rem\" }}>\n31:       <h3>\n32:         {company} ({ticker})\n33:       </h3>\n34:       <ResponsiveContainer width=\"100%\" height={300}>\n35:         <LineChart\n36:           data={chartData}\n37:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n38:         >\n39:           <XAxis dataKey=\"date\" />\n40:           <YAxis domain={[\"auto\", \"auto\"]} />\n41:           <Tooltip />\n42:           <Legend />\n43:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n44:         </LineChart>\n45:       </ResponsiveContainer>\n46:     </div>\n47:   );\n48: };\n49: \n50: export default StockChart;\n51: ",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        },
                        {
                            "code": "if (!data || !data.data || !data.data.length) return null;",
                            "line": 14
                        }
                    ],
                    "summaryComponent": "Receives stock data as a prop and checks for its presence"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const company = data.name;",
                            "line": 16
                        },
                        {
                            "code": "const ticker = data.ticker;",
                            "line": 17
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 32
                        }
                    ],
                    "summaryComponent": "Extracts company name and ticker for display"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const chartData = data.data.map((item) => ({",
                            "line": 24
                        },
                        {
                            "code": "date: item.date,",
                            "line": 25
                        },
                        {
                            "code": "price: item.close,",
                            "line": 26
                        }
                    ],
                    "summaryComponent": "Processes input data to map dates and closing prices"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<LineChart",
                            "line": 35
                        }
                    ],
                    "summaryComponent": "Renders a line chart using Recharts"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<h3>",
                            "line": 31
                        },
                        {
                            "code": "<XAxis dataKey=\"date\" />",
                            "line": 39
                        },
                        {
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                            "line": 40
                        },
                        {
                            "code": "<Tooltip />",
                            "line": 41
                        },
                        {
                            "code": "<Legend />",
                            "line": 42
                        }
                    ],
                    "summaryComponent": "Includes company/ticker header and chart features like axes, tooltip, and legend"
                }
            ]
        },
        "timestamp": "2025-08-21 19:13:41.000",
        "event": "map_summary_code",
        "source": "backend",
        "id": "0TbCMAtozA4QiWD8IDCU"
    },
    {
        "data": {
            "summary": "The StockChart component receives stock data as a prop and renders a line chart visualizing the closing prices over time. It displays the company's name and ticker symbol above the chart, and uses the Recharts library for rendering. If no data is provided, the component returns nothing.",
            "code": "13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));\n28: \n29:   return (\n30:     <div style={{ marginTop: \"2rem\" }}>\n31:       <h3>\n32:         {company} ({ticker})\n33:       </h3>\n34:       <ResponsiveContainer width=\"100%\" height={300}>\n35:         <LineChart\n36:           data={chartData}\n37:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n38:         >\n39:           <XAxis dataKey=\"date\" />\n40:           <YAxis domain={[\"auto\", \"auto\"]} />\n41:           <Tooltip />\n42:           <Legend />\n43:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n44:         </LineChart>\n45:       </ResponsiveContainer>\n46:     </div>\n47:   );\n48: };\n49: \n50: export default StockChart;\n51: ",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        }
                    ],
                    "summaryComponent": "The StockChart component receives stock data as a prop"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<LineChart",
                            "line": 35
                        },
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 43
                        }
                    ],
                    "summaryComponent": "renders a line chart visualizing the closing prices over time"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<h3>",
                            "line": 31
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 32
                        }
                    ],
                    "summaryComponent": "It displays the company's name and ticker symbol above the chart"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 34
                        },
                        {
                            "code": "<LineChart",
                            "line": 35
                        },
                        {
                            "code": "<XAxis dataKey=\"date\" />",
                            "line": 39
                        },
                        {
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                            "line": 40
                        },
                        {
                            "code": "<Tooltip />",
                            "line": 41
                        },
                        {
                            "code": "<Legend />",
                            "line": 42
                        },
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 43
                        }
                    ],
                    "summaryComponent": "uses the Recharts library for rendering"
                },
                {
                    "codeSegments": [
                        {
                            "code": "if (!data || !data.data || !data.data.length) return null;",
                            "line": 14
                        }
                    ],
                    "summaryComponent": "If no data is provided, the component returns nothing"
                }
            ]
        },
        "timestamp": "2025-08-21 19:13:41.000",
        "event": "map_summary_code",
        "source": "backend",
        "id": "oGzag1XXxKYcpwPkyMbc"
    },
    {
        "data": {
            "summary": "This code defines a React component that displays a stock price line chart using provided data.",
            "code": "13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));\n28: \n29:   return (\n30:     <div style={{ marginTop: \"2rem\" }}>\n31:       <h3>\n32:         {company} ({ticker})\n33:       </h3>\n34:       <ResponsiveContainer width=\"100%\" height={300}>\n35:         <LineChart\n36:           data={chartData}\n37:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n38:         >\n39:           <XAxis dataKey=\"date\" />\n40:           <YAxis domain={[\"auto\", \"auto\"]} />\n41:           <Tooltip />\n42:           <Legend />\n43:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n44:         </LineChart>\n45:       </ResponsiveContainer>\n46:     </div>\n47:   );\n48: };\n49: \n50: export default StockChart;\n51: ",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        },
                        {
                            "code": "export default StockChart;",
                            "line": 50
                        }
                    ],
                    "summaryComponent": "defines a React component"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<LineChart",
                            "line": 35
                        },
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 43
                        }
                    ],
                    "summaryComponent": "displays a stock price line chart"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        },
                        {
                            "code": "const chartData = data.data.map((item) => ({",
                            "line": 24
                        }
                    ],
                    "summaryComponent": "using provided data"
                }
            ]
        },
        "timestamp": "2025-08-21 19:13:42.000",
        "event": "map_summary_code",
        "source": "backend",
        "id": "43KzLIIAZDJJXeoq1V7G"
    },
    {
        "data": {
            "summary": "• Defines a functional React component named StockChart\n• Validates input data, returning null if missing or empty\n• Extracts company name and ticker symbol from the data prop\n• Processes raw data to create chartData array\n  ◦ Each entry contains a 'date' and corresponding 'price' (from 'close')\n• Defines a helper function to format date strings (though unused in rendering)\n• Renders a styled container with:\n  ◦ A header displaying company name and ticker\n  ◦ A responsive line chart using Recharts\n    ▪ X-axis for dates, Y-axis for price (auto domain)\n    ▪ Tooltip and legend for interactivity\n    ▪ Monotone line for price, styled with a specific color and no dots",
            "code": "13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));\n28: \n29:   return (\n30:     <div style={{ marginTop: \"2rem\" }}>\n31:       <h3>\n32:         {company} ({ticker})\n33:       </h3>\n34:       <ResponsiveContainer width=\"100%\" height={300}>\n35:         <LineChart\n36:           data={chartData}\n37:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n38:         >\n39:           <XAxis dataKey=\"date\" />\n40:           <YAxis domain={[\"auto\", \"auto\"]} />\n41:           <Tooltip />\n42:           <Legend />\n43:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n44:         </LineChart>\n45:       </ResponsiveContainer>\n46:     </div>\n47:   );\n48: };\n49: \n50: export default StockChart;\n51: ",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        }
                    ],
                    "summaryComponent": "Defines a functional React component named StockChart"
                },
                {
                    "codeSegments": [
                        {
                            "code": "if (!data || !data.data || !data.data.length) return null;",
                            "line": 14
                        }
                    ],
                    "summaryComponent": "Validates input data, returning null if missing or empty"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const company = data.name;",
                            "line": 16
                        },
                        {
                            "code": "const ticker = data.ticker;",
                            "line": 17
                        }
                    ],
                    "summaryComponent": "Extracts company name and ticker symbol from the data prop"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const chartData = data.data.map((item) => ({",
                            "line": 24
                        }
                    ],
                    "summaryComponent": "Processes raw data to create chartData array"
                },
                {
                    "codeSegments": [
                        {
                            "code": "date: item.date,",
                            "line": 25
                        },
                        {
                            "code": "price: item.close,",
                            "line": 26
                        }
                    ],
                    "summaryComponent": "Each entry contains a 'date' and corresponding 'price' (from 'close')"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const formatDateString = (date) => {",
                            "line": 19
                        },
                        {
                            "code": "return date.split(\"T\")[0];",
                            "line": 20
                        },
                        {
                            "code": "};",
                            "line": 21
                        }
                    ],
                    "summaryComponent": "Defines a helper function to format date strings (though unused in rendering)"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<div style={{ marginTop: \"2rem\" }}>",
                            "line": 30
                        }
                    ],
                    "summaryComponent": "Renders a styled container with:"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<h3>",
                            "line": 31
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 32
                        }
                    ],
                    "summaryComponent": "A header displaying company name and ticker"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 34
                        },
                        {
                            "code": "<LineChart",
                            "line": 35
                        }
                    ],
                    "summaryComponent": "A responsive line chart using Recharts"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<XAxis dataKey=\"date\" />",
                            "line": 39
                        },
                        {
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                            "line": 40
                        }
                    ],
                    "summaryComponent": "X-axis for dates, Y-axis for price (auto domain)"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<Tooltip />",
                            "line": 41
                        },
                        {
                            "code": "<Legend />",
                            "line": 42
                        }
                    ],
                    "summaryComponent": "Tooltip and legend for interactivity"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 43
                        }
                    ],
                    "summaryComponent": "Monotone line for price, styled with a specific color and no dots"
                }
            ]
        },
        "timestamp": "2025-08-21 19:13:44.000",
        "event": "map_summary_code",
        "source": "backend",
        "id": "L27DELdYWq74w7kboUzd"
    },
    {
        "data": {
            "after_section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde",
            "before_section_id": null
        },
        "timestamp": "2025-08-21 19:13:45.000",
        "event": "autotransit_section",
        "source": "frontend",
        "id": "F4ArjnlMt2NfeTKmMXFl"
    },
    {
        "data": {
            "section_data": {
                "editPromptDetailLevel": null,
                "title": "StockChart React Component Summary",
                "selectedStructured": "unstructured",
                "lines": [
                    13,
                    51
                ],
                "summaryData": {
                    "high_unstructured": "The StockChart component is a functional React component that visualizes stock price data using the Recharts library. It first checks that valid data is provided, then extracts the company name and ticker symbol for display. The component processes the input data to create an array of objects containing date and closing price pairs, which are then used to render a responsive line chart. The chart includes axes, a tooltip, a legend, and omits dots on the line for a cleaner look, all styled within a container with a margin.",
                    "title": "StockChart React Component Summary",
                    "low_structured": "• Defines a React component for displaying stock data\n• Renders a line chart with company and ticker info",
                    "medium_unstructured": "The StockChart component receives stock data as a prop and renders a line chart visualizing the closing prices over time. It displays the company's name and ticker symbol above the chart, and uses the Recharts library for rendering. If no data is provided, the component returns nothing.",
                    "medium_structured": "• Receives stock data as a prop and checks for its presence\n• Extracts company name and ticker for display\n• Processes input data to map dates and closing prices\n• Renders a line chart using Recharts\n  ◦ Includes company/ticker header and chart features like axes, tooltip, and legend",
                    "low_unstructured": "This code defines a React component that displays a stock price line chart using provided data.",
                    "high_structured": "• Defines a functional React component named StockChart\n• Validates input data, returning null if missing or empty\n• Extracts company name and ticker symbol from the data prop\n• Processes raw data to create chartData array\n  ◦ Each entry contains a 'date' and corresponding 'price' (from 'close')\n• Defines a helper function to format date strings (though unused in rendering)\n• Renders a styled container with:\n  ◦ A header displaying company name and ticker\n  ◦ A responsive line chart using Recharts\n    ▪ X-axis for dates, Y-axis for price (auto domain)\n    ▪ Tooltip and legend for interactivity\n    ▪ Monotone line for price, styled with a specific color and no dots"
                },
                "createdAt": 1755836025000,
                "editPromptStructured": null,
                "summaryMappings": {
                    "high_unstructured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                }
                            ],
                            "summaryComponent": "The StockChart component is a functional React component"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 34
                                },
                                {
                                    "code": "<LineChart",
                                    "line": 35
                                }
                            ],
                            "summaryComponent": "visualizes stock price data using the Recharts library"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "if (!data || !data.data || !data.data.length) return null;",
                                    "line": 14
                                }
                            ],
                            "summaryComponent": "It first checks that valid data is provided"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const company = data.name;",
                                    "line": 16
                                },
                                {
                                    "code": "const ticker = data.ticker;",
                                    "line": 17
                                },
                                {
                                    "code": "{company} ({ticker})",
                                    "line": 32
                                }
                            ],
                            "summaryComponent": "then extracts the company name and ticker symbol for display"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const chartData = data.data.map((item) => ({",
                                    "line": 24
                                },
                                {
                                    "code": "date: item.date,",
                                    "line": 25
                                },
                                {
                                    "code": "price: item.close,",
                                    "line": 26
                                }
                            ],
                            "summaryComponent": "The component processes the input data to create an array of objects containing date and closing price pairs"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<LineChart",
                                    "line": 35
                                },
                                {
                                    "code": "data={chartData}",
                                    "line": 36
                                },
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 34
                                }
                            ],
                            "summaryComponent": "which are then used to render a responsive line chart"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<XAxis dataKey=\"date\" />",
                                    "line": 39
                                },
                                {
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                                    "line": 40
                                }
                            ],
                            "summaryComponent": "The chart includes axes"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<Tooltip />",
                                    "line": 41
                                }
                            ],
                            "summaryComponent": "a tooltip"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<Legend />",
                                    "line": 42
                                }
                            ],
                            "summaryComponent": "a legend"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 43
                                },
                                {
                                    "code": "<div style={{ marginTop: \"2rem\" }}>",
                                    "line": 30
                                }
                            ],
                            "summaryComponent": "and omits dots on the line for a cleaner look, all styled within a container with a margin"
                        }
                    ],
                    "low_structured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                }
                            ],
                            "summaryComponent": "Defines a React component for displaying stock data"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<LineChart",
                                    "line": 35
                                },
                                {
                                    "code": "<h3>",
                                    "line": 31
                                },
                                {
                                    "code": "{company} ({ticker})",
                                    "line": 32
                                }
                            ],
                            "summaryComponent": "Renders a line chart with company and ticker info"
                        }
                    ],
                    "medium_unstructured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                }
                            ],
                            "summaryComponent": "The StockChart component receives stock data as a prop"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<LineChart",
                                    "line": 35
                                },
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 43
                                }
                            ],
                            "summaryComponent": "renders a line chart visualizing the closing prices over time"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<h3>",
                                    "line": 31
                                },
                                {
                                    "code": "{company} ({ticker})",
                                    "line": 32
                                }
                            ],
                            "summaryComponent": "It displays the company's name and ticker symbol above the chart"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 34
                                },
                                {
                                    "code": "<LineChart",
                                    "line": 35
                                },
                                {
                                    "code": "<XAxis dataKey=\"date\" />",
                                    "line": 39
                                },
                                {
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                                    "line": 40
                                },
                                {
                                    "code": "<Tooltip />",
                                    "line": 41
                                },
                                {
                                    "code": "<Legend />",
                                    "line": 42
                                },
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 43
                                }
                            ],
                            "summaryComponent": "uses the Recharts library for rendering"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "if (!data || !data.data || !data.data.length) return null;",
                                    "line": 14
                                }
                            ],
                            "summaryComponent": "If no data is provided, the component returns nothing"
                        }
                    ],
                    "medium_structured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                },
                                {
                                    "code": "if (!data || !data.data || !data.data.length) return null;",
                                    "line": 14
                                }
                            ],
                            "summaryComponent": "Receives stock data as a prop and checks for its presence"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const company = data.name;",
                                    "line": 16
                                },
                                {
                                    "code": "const ticker = data.ticker;",
                                    "line": 17
                                },
                                {
                                    "code": "{company} ({ticker})",
                                    "line": 32
                                }
                            ],
                            "summaryComponent": "Extracts company name and ticker for display"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const chartData = data.data.map((item) => ({",
                                    "line": 24
                                },
                                {
                                    "code": "date: item.date,",
                                    "line": 25
                                },
                                {
                                    "code": "price: item.close,",
                                    "line": 26
                                }
                            ],
                            "summaryComponent": "Processes input data to map dates and closing prices"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<LineChart",
                                    "line": 35
                                }
                            ],
                            "summaryComponent": "Renders a line chart using Recharts"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<h3>",
                                    "line": 31
                                },
                                {
                                    "code": "<XAxis dataKey=\"date\" />",
                                    "line": 39
                                },
                                {
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                                    "line": 40
                                },
                                {
                                    "code": "<Tooltip />",
                                    "line": 41
                                },
                                {
                                    "code": "<Legend />",
                                    "line": 42
                                }
                            ],
                            "summaryComponent": "Includes company/ticker header and chart features like axes, tooltip, and legend"
                        }
                    ],
                    "low_unstructured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                },
                                {
                                    "code": "export default StockChart;",
                                    "line": 50
                                }
                            ],
                            "summaryComponent": "defines a React component"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<LineChart",
                                    "line": 35
                                },
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 43
                                }
                            ],
                            "summaryComponent": "displays a stock price line chart"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                },
                                {
                                    "code": "const chartData = data.data.map((item) => ({",
                                    "line": 24
                                }
                            ],
                            "summaryComponent": "using provided data"
                        }
                    ],
                    "high_structured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                }
                            ],
                            "summaryComponent": "Defines a functional React component named StockChart"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "if (!data || !data.data || !data.data.length) return null;",
                                    "line": 14
                                }
                            ],
                            "summaryComponent": "Validates input data, returning null if missing or empty"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const company = data.name;",
                                    "line": 16
                                },
                                {
                                    "code": "const ticker = data.ticker;",
                                    "line": 17
                                }
                            ],
                            "summaryComponent": "Extracts company name and ticker symbol from the data prop"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const chartData = data.data.map((item) => ({",
                                    "line": 24
                                }
                            ],
                            "summaryComponent": "Processes raw data to create chartData array"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "date: item.date,",
                                    "line": 25
                                },
                                {
                                    "code": "price: item.close,",
                                    "line": 26
                                }
                            ],
                            "summaryComponent": "Each entry contains a 'date' and corresponding 'price' (from 'close')"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const formatDateString = (date) => {",
                                    "line": 19
                                },
                                {
                                    "code": "return date.split(\"T\")[0];",
                                    "line": 20
                                },
                                {
                                    "code": "};",
                                    "line": 21
                                }
                            ],
                            "summaryComponent": "Defines a helper function to format date strings (though unused in rendering)"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<div style={{ marginTop: \"2rem\" }}>",
                                    "line": 30
                                }
                            ],
                            "summaryComponent": "Renders a styled container with:"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<h3>",
                                    "line": 31
                                },
                                {
                                    "code": "{company} ({ticker})",
                                    "line": 32
                                }
                            ],
                            "summaryComponent": "A header displaying company name and ticker"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 34
                                },
                                {
                                    "code": "<LineChart",
                                    "line": 35
                                }
                            ],
                            "summaryComponent": "A responsive line chart using Recharts"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<XAxis dataKey=\"date\" />",
                                    "line": 39
                                },
                                {
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                                    "line": 40
                                }
                            ],
                            "summaryComponent": "X-axis for dates, Y-axis for price (auto domain)"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<Tooltip />",
                                    "line": 41
                                },
                                {
                                    "code": "<Legend />",
                                    "line": 42
                                }
                            ],
                            "summaryComponent": "Tooltip and legend for interactivity"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 43
                                }
                            ],
                            "summaryComponent": "Monotone line for price, styled with a specific color and no dots"
                        }
                    ]
                },
                "selectedDetailLevel": "medium",
                "metadata": {
                    "offset": 156,
                    "fullPath": "/project/workspace/frontend/src/StockChart.jsx",
                    "originalCode": "const StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;\n",
                    "filename": "StockChart.jsx",
                    "id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
                },
                "editPromptValue": ""
            },
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:13:45.000",
        "event": "create_new_section",
        "source": "frontend",
        "id": "TFX4xRtUPRdwj9p8O3a6"
    },
    {
        "data": {
            "summary": "The StockChart component is a functional React component that visualizes stock price data using the Recharts library. It first checks that valid data is provided, then extracts the company name and ticker symbol for display. The component processes the input data to create an array of objects containing date and closing price pairs, which are then used to render a responsive line chart. The chart includes axes, a tooltip, a legend, and omits dots on the line for a cleaner look, all styled within a container with a margin.",
            "code": "13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));\n28: \n29:   return (\n30:     <div style={{ marginTop: \"2rem\" }}>\n31:       <h3>\n32:         {company} ({ticker})\n33:       </h3>\n34:       <ResponsiveContainer width=\"100%\" height={300}>\n35:         <LineChart\n36:           data={chartData}\n37:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n38:         >\n39:           <XAxis dataKey=\"date\" />\n40:           <YAxis domain={[\"auto\", \"auto\"]} />\n41:           <Tooltip />\n42:           <Legend />\n43:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n44:         </LineChart>\n45:       </ResponsiveContainer>\n46:     </div>\n47:   );\n48: };\n49: \n50: export default StockChart;\n51: ",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        }
                    ],
                    "summaryComponent": "The StockChart component is a functional React component"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 34
                        },
                        {
                            "code": "<LineChart",
                            "line": 35
                        }
                    ],
                    "summaryComponent": "visualizes stock price data using the Recharts library"
                },
                {
                    "codeSegments": [
                        {
                            "code": "if (!data || !data.data || !data.data.length) return null;",
                            "line": 14
                        }
                    ],
                    "summaryComponent": "It first checks that valid data is provided"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const company = data.name;",
                            "line": 16
                        },
                        {
                            "code": "const ticker = data.ticker;",
                            "line": 17
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 32
                        }
                    ],
                    "summaryComponent": "then extracts the company name and ticker symbol for display"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const chartData = data.data.map((item) => ({",
                            "line": 24
                        },
                        {
                            "code": "date: item.date,",
                            "line": 25
                        },
                        {
                            "code": "price: item.close,",
                            "line": 26
                        }
                    ],
                    "summaryComponent": "The component processes the input data to create an array of objects containing date and closing price pairs"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<LineChart",
                            "line": 35
                        },
                        {
                            "code": "data={chartData}",
                            "line": 36
                        },
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 34
                        }
                    ],
                    "summaryComponent": "which are then used to render a responsive line chart"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<XAxis dataKey=\"date\" />",
                            "line": 39
                        },
                        {
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                            "line": 40
                        }
                    ],
                    "summaryComponent": "The chart includes axes"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<Tooltip />",
                            "line": 41
                        }
                    ],
                    "summaryComponent": "a tooltip"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<Legend />",
                            "line": 42
                        }
                    ],
                    "summaryComponent": "a legend"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 43
                        },
                        {
                            "code": "<div style={{ marginTop: \"2rem\" }}>",
                            "line": 30
                        }
                    ],
                    "summaryComponent": "and omits dots on the line for a cleaner look, all styled within a container with a margin"
                }
            ]
        },
        "timestamp": "2025-08-21 19:13:45.000",
        "event": "map_summary_code",
        "source": "backend",
        "id": "X1J1xMRX7dEdKPmmeATh"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "unstructured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:13:50.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "DDWUoY3VyD66iUUqW5MG"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "unstructured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:13:50.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "OK4li7TMaxUDSGkZzWNF"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "unstructured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:13:50.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "PUDQWGe4nRlgX4L1VIO4"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 4,
            "structured_type": "unstructured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:13:50.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "WrJTX65ihhekMylDn5rg"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 2,
            "structured_type": "unstructured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:13:50.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "fZPSaHLUeAJt40rSc3Wp"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 1,
            "structured_type": "unstructured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:13:50.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "jlxuGKYWpcIZXufh2Knq"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 0,
            "structured_type": "unstructured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:13:50.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "kHlEcKqr2JLFDyknfcvB"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "unstructured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:13:50.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "veZ1v5i8Cd67BxzV8rRR"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 2,
            "structured_type": "unstructured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:13:51.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "KmwP5fU0Ap5vDz2WshZJ"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 1,
            "structured_type": "unstructured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:13:51.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "bBx0BWW3Z7dz4VFJ39Aq"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "unstructured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:13:51.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "nF268IWEVTRc893VotXD"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "unstructured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:13:51.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "tJJDbQ3ZwoxIRbdUjzTR"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "unstructured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:13:52.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "6f4FXLhxSINt9et1Xjyo"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 0,
            "structured_type": "unstructured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:13:52.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "NtpHS9B3QwmvV1W0si7Y"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 0,
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:13:53.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "0c4lwztL4BIIxXa32drz"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:13:53.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "DlKABsuEDYCcdxPFZ95k"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 1,
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:13:53.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "Jxby9rZ4Tf7s8rj55mGQ"
    },
    {
        "data": {
            "before_structured": "unstructured",
            "before_detail_level": "medium",
            "after_structured": "structured",
            "after_detail_level": "medium",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:13:53.000",
        "event": "change_summary_level",
        "source": "frontend",
        "id": "lAvHOe1Q4Sp3QHVGqxJQ"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:13:54.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "ZRDvkpJmyLNteGNAgTJ6"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 2,
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:14:02.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "3bB3Tj9Tp2rqLEK7r5Dg"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:14:02.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "ASoueBjG8f5cKC3SxgRo"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 1,
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:14:02.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "G37kDuSPsWlLuZpVDPtC"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:14:02.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "RVQgIlRi83yvZUOZu1gU"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:14:03.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "P0cU2n2RQGQ8TY9I6QG7"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 0,
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:14:03.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "byG8ZiCpmPUu90WZmK8T"
    },
    {
        "data": {
            "before_structured": "structured",
            "before_detail_level": "medium",
            "after_structured": "structured",
            "after_detail_level": "high",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:14:04.000",
        "event": "change_summary_level",
        "source": "frontend",
        "id": "Ugb4thdV8Kle2LbcXpwi"
    },
    {
        "data": {
            "detail_level": "high",
            "mapping_index": 3,
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:14:05.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "8Rgt5Gv5B1KbqhkufBg0"
    },
    {
        "data": {
            "detail_level": "high",
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:14:05.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "C6zD0eewObUhgLyxd0og"
    },
    {
        "data": {
            "detail_level": "high",
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:14:05.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "PwiXXKsoPcgNnlBPQSvq"
    },
    {
        "data": {
            "detail_level": "high",
            "mapping_index": 0,
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:14:05.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "a59XSUfSlzdHMfsE8RR0"
    },
    {
        "data": {
            "detail_level": "high",
            "mapping_index": 2,
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:14:05.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "ajE3RL1bdd3ZL3r4Kvq9"
    },
    {
        "data": {
            "detail_level": "high",
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:14:05.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "lRkUT0AZTlBnQ5bAeyAR"
    },
    {
        "data": {
            "detail_level": "high",
            "mapping_index": 5,
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:14:07.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "rULOt28lyi6YnxwrHG55"
    },
    {
        "data": {
            "detail_level": "high",
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:14:08.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "P9HNX6b5wEVDmU785Tpz"
    },
    {
        "data": {
            "detail_level": "high",
            "mapping_index": 8,
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:14:08.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "QLBPbNGuc4ZInhgFdHTP"
    },
    {
        "data": {
            "detail_level": "high",
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:14:08.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "ewURo8a02vXSw2Mk9xSP"
    },
    {
        "data": {
            "detail_level": "high",
            "mapping_index": 7,
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:14:08.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "qCmPljwsRYKhESnt7SQn"
    },
    {
        "data": {
            "detail_level": "high",
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:14:09.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "4oLUrFk7BqCgt55EMNXS"
    },
    {
        "data": {
            "detail_level": "high",
            "mapping_index": 9,
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:14:09.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "ITOjeiRrQPN4S7I6BCbU"
    },
    {
        "data": {
            "detail_level": "high",
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:14:09.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "QAmnmgJZ3rjIZHxVlWSd"
    },
    {
        "data": {
            "detail_level": "high",
            "mapping_index": 8,
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:14:09.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "ibmlmbHeHjTemKzvqhYa"
    },
    {
        "data": {
            "detail_level": "high",
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:14:13.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "1kxCEqRpiwAVhvugvZAI"
    },
    {
        "data": {
            "detail_level": "high",
            "mapping_index": 9,
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:14:20.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "2EoAu8NIbufBKUeXVxoW"
    },
    {
        "data": {
            "detail_level": "high",
            "mapping_index": 11,
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:14:20.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "DqocnbrOcM5mUlTRWwjm"
    },
    {
        "data": {
            "detail_level": "high",
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:14:20.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "Rk8b5Jvlrty2pfU5mm19"
    },
    {
        "data": {
            "detail_level": "high",
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:14:20.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "lxEMRdxYaLOOUxq7YRHV"
    },
    {
        "data": {
            "detail_level": "high",
            "mapping_index": 10,
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:14:20.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "oPS6TZty9DFyt6wxCgnv"
    },
    {
        "data": {
            "detail_level": "high",
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:14:20.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "wc3YrWMZGgHLDrqT7B02"
    },
    {
        "data": {
            "detail_level": "high",
            "mapping_index": 11,
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:14:25.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "EJDfxhLSb0RbjP9DoVGq"
    },
    {
        "data": {
            "detail_level": "high",
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:14:26.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "4x1qB8yka0dLvnXIoIpf"
    },
    {
        "data": {
            "detail_level": "high",
            "mapping_index": 10,
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:14:26.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "7lZljmk6k5O6ogrgck6B"
    },
    {
        "data": {
            "detail_level": "high",
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:14:26.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "IBHnSCBuIYEe29WYviH1"
    },
    {
        "data": {
            "detail_level": "high",
            "mapping_index": 9,
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:14:26.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "R1Vek6fmtiaDn3grvWoo"
    },
    {
        "data": {
            "detail_level": "high",
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:14:26.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "WPZAMxDOskj5vGfMY4Ee"
    },
    {
        "data": {
            "detail_level": "high",
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:14:26.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "Ys9TMxWhn57KG91BDYoh"
    },
    {
        "data": {
            "detail_level": "high",
            "mapping_index": 11,
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:14:26.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "i7QuJXFR5CyhSCKLFkhL"
    },
    {
        "data": {
            "detail_level": "high",
            "mapping_index": 9,
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:14:26.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "tQSbBis7YjMiQC6giy8w"
    },
    {
        "data": {
            "detail_level": "high",
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:14:27.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "gFI0e9PKKo2ZsH3WXEOF"
    },
    {
        "data": {
            "detail_level": "high",
            "mapping_index": 9,
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:14:28.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "2E8u29xxlowWchZX81m7"
    },
    {
        "data": {
            "detail_level": "high",
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:14:38.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "2ccmYYlMBBjMYYRM7eO7"
    },
    {
        "data": {
            "detail_level": "high",
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:14:57.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "2RsOA3lx6dSfBTnSwbGz"
    },
    {
        "data": {
            "detail_level": "high",
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:14:57.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "7GMr1PbUKccPlPvoyTrK"
    },
    {
        "data": {
            "detail_level": "high",
            "mapping_index": 11,
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:14:57.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "E4lPcMag0KR2hPu2kqmB"
    },
    {
        "data": {
            "detail_level": "high",
            "mapping_index": 6,
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:14:57.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "EAxznVoKHWZBFVOE4ZpB"
    },
    {
        "data": {
            "detail_level": "high",
            "mapping_index": 9,
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:14:57.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "X5qVa1rG63cf7AEp5I3c"
    },
    {
        "data": {
            "detail_level": "high",
            "mapping_index": 8,
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:14:57.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "dS25PqMGU7sYlERDLIeD"
    },
    {
        "data": {
            "detail_level": "high",
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:14:57.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "g60c09DusdbU3rrrwojD"
    },
    {
        "data": {
            "detail_level": "high",
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:14:57.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "roI0fifXrjYzpqFYg5kf"
    },
    {
        "data": {
            "detail_level": "high",
            "mapping_index": 5,
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:14:58.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "BguX8sFJGasLVmv3uHcJ"
    },
    {
        "data": {
            "detail_level": "high",
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:14:59.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "6516LmgxnJrUH4n4NXQM"
    },
    {
        "data": {
            "detail_level": "high",
            "mapping_index": 1,
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:14:59.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "sN3sTZcwGudijYEyLSGC"
    },
    {
        "data": {
            "detail_level": "high",
            "mapping_index": 0,
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:15:00.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "3nXCQyx6FHxTjabQCaU5"
    },
    {
        "data": {
            "detail_level": "high",
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:15:00.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "l1C75gzDRajp34yuGV5Q"
    },
    {
        "data": {
            "detail_level": "high",
            "mapping_index": 2,
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:15:01.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "QdwhpCx4rB3ibrikXmwO"
    },
    {
        "data": {
            "detail_level": "high",
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:15:01.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "TXw6TPqElF4VGMbqHLvg"
    },
    {
        "data": {
            "detail_level": "high",
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:15:01.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "ftqnlxFHq5NrpA0TJKdL"
    },
    {
        "data": {
            "detail_level": "high",
            "mapping_index": 1,
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:15:01.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "iT8rnmkt9GQKfktPCtLR"
    },
    {
        "data": {
            "detail_level": "high",
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:15:01.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "jcfumuVozyf5bhfavax1"
    },
    {
        "data": {
            "detail_level": "high",
            "mapping_index": 1,
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:15:01.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "kCBg6CPcUdWbBnOd433c"
    },
    {
        "data": {
            "detail_level": "high",
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:15:01.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "qN2dVYoAvMaDRWbj9IHA"
    },
    {
        "data": {
            "detail_level": "high",
            "mapping_index": 2,
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:15:02.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "3j1cZEidBG9bW4g36Q5Y"
    },
    {
        "data": {
            "detail_level": "high",
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:15:02.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "S3fBPa3u61Dpv3tKGBVY"
    },
    {
        "data": {
            "detail_level": "high",
            "mapping_index": 3,
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:15:02.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "lYyITTV6uIZ4Zd9tyWbE"
    },
    {
        "data": {
            "detail_level": "high",
            "mapping_index": 5,
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:15:04.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "YMnI0iFwHhHERIn6WjKU"
    },
    {
        "data": {
            "detail_level": "high",
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:15:04.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "oXMwQxZkeZ1g2c0d51kG"
    },
    {
        "data": {
            "detail_level": "high",
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:15:05.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "9VEPLwl5Hy4BW6u0qPyR"
    },
    {
        "data": {
            "detail_level": "high",
            "mapping_index": 6,
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:15:05.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "aJiwy3mMyDuUVSGIuCBk"
    },
    {
        "data": {
            "detail_level": "high",
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:15:05.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "m1XRF7VhIxZhT5j8toFi"
    },
    {
        "data": {
            "detail_level": "high",
            "mapping_index": 5,
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:15:07.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "EPNY93TEa9lCcqnSYYQk"
    },
    {
        "data": {
            "detail_level": "high",
            "mapping_index": 6,
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:15:07.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "H6nr6Oe2nBjWqcOUUjf8"
    },
    {
        "data": {
            "detail_level": "high",
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:15:07.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "afYxv0jDOXI4f5bIL5wY"
    },
    {
        "data": {
            "detail_level": "high",
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:15:09.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "v8ntY5KqT8A2Z70XpILz"
    },
    {
        "data": {
            "detail_level": "high",
            "mapping_index": 6,
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:15:10.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "D9BL6hgZQJ9R2WJgOeQz"
    },
    {
        "data": {
            "detail_level": "high",
            "mapping_index": 7,
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:15:10.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "ENSObIT85bunPpH5c5Go"
    },
    {
        "data": {
            "detail_level": "high",
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:15:10.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "ZmQG4UXxv1cB7gaEsdg6"
    },
    {
        "data": {
            "detail_level": "high",
            "mapping_index": 5,
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:15:10.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "n4l6kKnjpNj8fTE0mLFt"
    },
    {
        "data": {
            "detail_level": "high",
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:15:10.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "pPWMqINH4jMp1RHyikF3"
    },
    {
        "data": {
            "detail_level": "high",
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:15:10.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "y6UWB8CMQwpMLgqL7JAd"
    },
    {
        "data": {
            "detail_level": "high",
            "mapping_index": 8,
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:15:10.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "zgIOdkBgWJxTFEsY88r2"
    },
    {
        "data": {
            "detail_level": "high",
            "mapping_index": 7,
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:15:14.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "JGHFfSZCrnHnxPITJnkx"
    },
    {
        "data": {
            "detail_level": "high",
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:15:14.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "w21DlAv6m08budIs0RFP"
    },
    {
        "data": {
            "detail_level": "high",
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:15:15.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "k9D5iPc21iQesTKW2fkV"
    },
    {
        "data": {
            "detail_level": "high",
            "mapping_index": 6,
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:15:15.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "vluiOvmvuoauUoM51hAn"
    },
    {
        "data": {
            "detail_level": "high",
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:15:15.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "yEv1ussTM74lfAp7NsHI"
    },
    {
        "data": {
            "detail_level": "high",
            "mapping_index": 6,
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:15:18.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "1IHNRe6NHg28SCl5vUCv"
    },
    {
        "data": {
            "detail_level": "high",
            "mapping_index": 8,
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:15:18.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "CFwIaFhWpGt0B6mXGCs4"
    },
    {
        "data": {
            "detail_level": "high",
            "mapping_index": 7,
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:15:18.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "PX4E8EoAywPwnGB1N73x"
    },
    {
        "data": {
            "detail_level": "high",
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:15:18.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "p94DautadHJd9mD9AL8H"
    },
    {
        "data": {
            "detail_level": "high",
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:15:18.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "qc1nHy5h1QX2zzbzA39s"
    },
    {
        "data": {
            "detail_level": "high",
            "structured_type": "structured",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:15:19.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "oc15WLPtyFcBJB7f6u4r"
    },
    {
        "data": {
            "instruction": "change X-axis date format as mm/dd/yyyy",
            "section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:15:56.000",
        "event": "commit_direct_instruction",
        "source": "frontend",
        "id": "O22xhN2AXDZ19ZLYO2kv"
    },
    {
        "data": {
            "original_code": "const StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;\n",
            "updated_code": "const StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };\n\n  // Helper to format date as mm/dd/yyyy\n  const formatXAxisDate = (dateStr) => {\n    const date = new Date(dateStr);\n    const mm = String(date.getMonth() + 1).padStart(2, '0');\n    const dd = String(date.getDate()).padStart(2, '0');\n    const yyyy = date.getFullYear();\n    return `${mm}/${dd}/${yyyy}`;\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;",
            "instruction": "change X-axis date format as mm/dd/yyyy"
        },
        "timestamp": "2025-08-21 19:15:59.000",
        "event": "modify_direct_instruction",
        "source": "backend",
        "id": "PM1dJRlmFnbVDWDXrOiK"
    },
    {
        "data": {
            "old_summary": {
                "high_unstructured": "The StockChart component is a functional React component that visualizes stock price data using the Recharts library. It first checks that valid data is provided, then extracts the company name and ticker symbol for display. The component processes the input data to create an array of objects containing date and closing price pairs, which are then used to render a responsive line chart. The chart includes axes, a tooltip, a legend, and omits dots on the line for a cleaner look, all styled within a container with a margin.",
                "title": "StockChart React Component Summary",
                "low_structured": "• Defines a React component for displaying stock data\n• Renders a line chart with company and ticker info",
                "medium_unstructured": "The StockChart component receives stock data as a prop and renders a line chart visualizing the closing prices over time. It displays the company's name and ticker symbol above the chart, and uses the Recharts library for rendering. If no data is provided, the component returns nothing.",
                "medium_structured": "• Receives stock data as a prop and checks for its presence\n• Extracts company name and ticker for display\n• Processes input data to map dates and closing prices\n• Renders a line chart using Recharts\n  ◦ Includes company/ticker header and chart features like axes, tooltip, and legend",
                "low_unstructured": "This code defines a React component that displays a stock price line chart using provided data.",
                "high_structured": "• Defines a functional React component named StockChart\n• Validates input data, returning null if missing or empty\n• Extracts company name and ticker symbol from the data prop\n• Processes raw data to create chartData array\n  ◦ Each entry contains a 'date' and corresponding 'price' (from 'close')\n• Defines a helper function to format date strings (though unused in rendering)\n• Renders a styled container with:\n  ◦ A header displaying company name and ticker\n  ◦ A responsive line chart using Recharts\n    ▪ X-axis for dates, Y-axis for price (auto domain)\n    ▪ Tooltip and legend for interactivity\n    ▪ Monotone line for price, styled with a specific color and no dots"
            },
            "original_code": "const StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };\n\n  // Helper to format date as mm/dd/yyyy\n  const formatXAxisDate = (dateStr) => {\n    const date = new Date(dateStr);\n    const mm = String(date.getMonth() + 1).padStart(2, '0');\n    const dd = String(date.getDate()).padStart(2, '0');\n    const yyyy = date.getFullYear();\n    return `${mm}/${dd}/${yyyy}`;\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;",
            "new_code": "const StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };\n\n  // Helper to format date as mm/dd/yyyy\n  const formatXAxisDate = (dateStr) => {\n    const date = new Date(dateStr);\n    const mm = String(date.getMonth() + 1).padStart(2, '0');\n    const dd = String(date.getDate()).padStart(2, '0');\n    const yyyy = date.getFullYear();\n    return `${mm}/${dd}/${yyyy}`;\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;",
            "new_summary": {
                "high_unstructured": "The StockChart component is a functional React component that visualizes stock price data using the Recharts library. It first checks that valid data is provided, then extracts the company name and ticker symbol for display. The component processes the input data to create an array of objects containing date and closing price pairs, which are then used to render a responsive line chart. The chart includes axes, a tooltip, a legend, and omits dots on the line for a cleaner look, all styled within a container with a margin. Notably, the X-axis now displays dates formatted as mm/dd/yyyy using a custom tick formatter.",
                "title": "StockChart React Component Summary (with Custom X-Axis Date Formatting)",
                "low_structured": "• Defines a React component for displaying stock data\n• Renders a line chart with company and ticker info\n• Formats X-axis dates as mm/dd/yyyy",
                "medium_unstructured": "The StockChart component receives stock data as a prop and renders a line chart visualizing the closing prices over time. It displays the company's name and ticker symbol above the chart, and uses the Recharts library for rendering. If no data is provided, the component returns nothing. The X-axis now uses a custom formatter to display dates in mm/dd/yyyy format.",
                "medium_structured": "• Receives stock data as a prop and checks for its presence\n• Extracts company name and ticker for display\n• Processes input data to map dates and closing prices\n• Renders a line chart using Recharts\n  ◦ Includes company/ticker header and chart features like axes, tooltip, and legend\n  ◦ X-axis dates are formatted as mm/dd/yyyy using a custom formatter",
                "low_unstructured": "This code defines a React component that displays a stock price line chart using provided data, now with the X-axis dates formatted as mm/dd/yyyy.",
                "high_structured": "• Defines a functional React component named StockChart\n• Validates input data, returning null if missing or empty\n• Extracts company name and ticker symbol from the data prop\n• Processes raw data to create chartData array\n  ◦ Each entry contains a 'date' and corresponding 'price' (from 'close')\n• Defines helper functions to format date strings, including one for mm/dd/yyyy formatting used in rendering\n• Renders a styled container with:\n  ◦ A header displaying company name and ticker\n  ◦ A responsive line chart using Recharts\n    ▪ X-axis for dates, with a custom tick formatter to display mm/dd/yyyy\n    ▪ Y-axis for price (auto domain)\n    ▪ Tooltip and legend for interactivity\n    ▪ Monotone line for price, styled with a specific color and no dots"
            }
        },
        "timestamp": "2025-08-21 19:16:17.000",
        "event": "summarize_modified_code",
        "source": "backend",
        "id": "SPe0QXxlpdRqRDfOIGqE"
    },
    {
        "data": {
            "summary": "• Defines a React component for displaying stock data\n• Renders a line chart with company and ticker info\n• Formats X-axis dates as mm/dd/yyyy",
            "code": "13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Helper to format date as mm/dd/yyyy\n24:   const formatXAxisDate = (dateStr) => {\n25:     const date = new Date(dateStr);\n26:     const mm = String(date.getMonth() + 1).padStart(2, '0');\n27:     const dd = String(date.getDate()).padStart(2, '0');\n28:     const yyyy = date.getFullYear();\n29:     return `${mm}/${dd}/${yyyy}`;\n30:   };\n31: \n32:   // Combine labels and values into an array of objects for Recharts\n33:   const chartData = data.data.map((item) => ({\n34:     date: item.date,\n35:     price: item.close,\n36:   }));\n37: \n38:   return (\n39:     <div style={{ marginTop: \"2rem\" }}>\n40:       <h3>\n41:         {company} ({ticker})\n42:       </h3>\n43:       <ResponsiveContainer width=\"100%\" height={300}>\n44:         <LineChart\n45:           data={chartData}\n46:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n47:         >\n48:           <XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />\n49:           <YAxis domain={[\"auto\", \"auto\"]} />\n50:           <Tooltip />\n51:           <Legend />\n52:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n53:         </LineChart>\n54:       </ResponsiveContainer>\n55:     </div>\n56:   );\n57: };\n58: \n59: export default StockChart;",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        }
                    ],
                    "summaryComponent": "Defines a React component for displaying stock data"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<LineChart",
                            "line": 44
                        },
                        {
                            "code": "<h3>",
                            "line": 40
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 41
                        }
                    ],
                    "summaryComponent": "Renders a line chart with company and ticker info"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const formatXAxisDate = (dateStr) => {",
                            "line": 24
                        },
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />",
                            "line": 48
                        }
                    ],
                    "summaryComponent": "Formats X-axis dates as mm/dd/yyyy"
                }
            ]
        },
        "timestamp": "2025-08-21 19:16:18.000",
        "event": "map_summary_code",
        "source": "backend",
        "id": "7J6g6Ihv5eOpu5iI2YXt"
    },
    {
        "data": {
            "summary": "This code defines a React component that displays a stock price line chart using provided data, now with the X-axis dates formatted as mm/dd/yyyy.",
            "code": "13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Helper to format date as mm/dd/yyyy\n24:   const formatXAxisDate = (dateStr) => {\n25:     const date = new Date(dateStr);\n26:     const mm = String(date.getMonth() + 1).padStart(2, '0');\n27:     const dd = String(date.getDate()).padStart(2, '0');\n28:     const yyyy = date.getFullYear();\n29:     return `${mm}/${dd}/${yyyy}`;\n30:   };\n31: \n32:   // Combine labels and values into an array of objects for Recharts\n33:   const chartData = data.data.map((item) => ({\n34:     date: item.date,\n35:     price: item.close,\n36:   }));\n37: \n38:   return (\n39:     <div style={{ marginTop: \"2rem\" }}>\n40:       <h3>\n41:         {company} ({ticker})\n42:       </h3>\n43:       <ResponsiveContainer width=\"100%\" height={300}>\n44:         <LineChart\n45:           data={chartData}\n46:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n47:         >\n48:           <XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />\n49:           <YAxis domain={[\"auto\", \"auto\"]} />\n50:           <Tooltip />\n51:           <Legend />\n52:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n53:         </LineChart>\n54:       </ResponsiveContainer>\n55:     </div>\n56:   );\n57: };\n58: \n59: export default StockChart;",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        }
                    ],
                    "summaryComponent": "This code defines a React component"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<LineChart",
                            "line": 44
                        },
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 52
                        }
                    ],
                    "summaryComponent": "that displays a stock price line chart"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const chartData = data.data.map((item) => ({",
                            "line": 33
                        },
                        {
                            "code": "data={chartData}",
                            "line": 45
                        }
                    ],
                    "summaryComponent": "using provided data"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />",
                            "line": 48
                        },
                        {
                            "code": "const formatXAxisDate = (dateStr) => {",
                            "line": 24
                        },
                        {
                            "code": "return `${mm}/${dd}/${yyyy}`;",
                            "line": 29
                        }
                    ],
                    "summaryComponent": "now with the X-axis dates formatted as mm/dd/yyyy"
                }
            ]
        },
        "timestamp": "2025-08-21 19:16:20.000",
        "event": "map_summary_code",
        "source": "backend",
        "id": "NQBT1Ba3XpuFD0U0X2yq"
    },
    {
        "data": {
            "summary": "• Receives stock data as a prop and checks for its presence\n• Extracts company name and ticker for display\n• Processes input data to map dates and closing prices\n• Renders a line chart using Recharts\n  ◦ Includes company/ticker header and chart features like axes, tooltip, and legend\n  ◦ X-axis dates are formatted as mm/dd/yyyy using a custom formatter",
            "code": "13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Helper to format date as mm/dd/yyyy\n24:   const formatXAxisDate = (dateStr) => {\n25:     const date = new Date(dateStr);\n26:     const mm = String(date.getMonth() + 1).padStart(2, '0');\n27:     const dd = String(date.getDate()).padStart(2, '0');\n28:     const yyyy = date.getFullYear();\n29:     return `${mm}/${dd}/${yyyy}`;\n30:   };\n31: \n32:   // Combine labels and values into an array of objects for Recharts\n33:   const chartData = data.data.map((item) => ({\n34:     date: item.date,\n35:     price: item.close,\n36:   }));\n37: \n38:   return (\n39:     <div style={{ marginTop: \"2rem\" }}>\n40:       <h3>\n41:         {company} ({ticker})\n42:       </h3>\n43:       <ResponsiveContainer width=\"100%\" height={300}>\n44:         <LineChart\n45:           data={chartData}\n46:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n47:         >\n48:           <XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />\n49:           <YAxis domain={[\"auto\", \"auto\"]} />\n50:           <Tooltip />\n51:           <Legend />\n52:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n53:         </LineChart>\n54:       </ResponsiveContainer>\n55:     </div>\n56:   );\n57: };\n58: \n59: export default StockChart;",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        },
                        {
                            "code": "if (!data || !data.data || !data.data.length) return null;",
                            "line": 14
                        }
                    ],
                    "summaryComponent": "Receives stock data as a prop and checks for its presence"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const company = data.name;",
                            "line": 16
                        },
                        {
                            "code": "const ticker = data.ticker;",
                            "line": 17
                        }
                    ],
                    "summaryComponent": "Extracts company name and ticker for display"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const chartData = data.data.map((item) => ({",
                            "line": 33
                        },
                        {
                            "code": "date: item.date,",
                            "line": 34
                        },
                        {
                            "code": "price: item.close,",
                            "line": 35
                        },
                        {
                            "code": "}));",
                            "line": 36
                        }
                    ],
                    "summaryComponent": "Processes input data to map dates and closing prices"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 43
                        },
                        {
                            "code": "<LineChart",
                            "line": 44
                        }
                    ],
                    "summaryComponent": "Renders a line chart using Recharts"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<h3>",
                            "line": 40
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 41
                        },
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />",
                            "line": 48
                        },
                        {
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                            "line": 49
                        },
                        {
                            "code": "<Tooltip />",
                            "line": 50
                        },
                        {
                            "code": "<Legend />",
                            "line": 51
                        }
                    ],
                    "summaryComponent": "Includes company/ticker header and chart features like axes, tooltip, and legend"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const formatXAxisDate = (dateStr) => {",
                            "line": 24
                        },
                        {
                            "code": "return `${mm}/${dd}/${yyyy}`;",
                            "line": 29
                        },
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />",
                            "line": 48
                        }
                    ],
                    "summaryComponent": "X-axis dates are formatted as mm/dd/yyyy using a custom formatter"
                }
            ]
        },
        "timestamp": "2025-08-21 19:16:20.000",
        "event": "map_summary_code",
        "source": "backend",
        "id": "dcKgudPmbNCUmxJLHeZU"
    },
    {
        "data": {
            "summary": "• Defines a functional React component named StockChart\n• Validates input data, returning null if missing or empty\n• Extracts company name and ticker symbol from the data prop\n• Processes raw data to create chartData array\n  ◦ Each entry contains a 'date' and corresponding 'price' (from 'close')\n• Defines helper functions to format date strings, including one for mm/dd/yyyy formatting used in rendering\n• Renders a styled container with:\n  ◦ A header displaying company name and ticker\n  ◦ A responsive line chart using Recharts\n    ▪ X-axis for dates, with a custom tick formatter to display mm/dd/yyyy\n    ▪ Y-axis for price (auto domain)\n    ▪ Tooltip and legend for interactivity\n    ▪ Monotone line for price, styled with a specific color and no dots",
            "code": "13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Helper to format date as mm/dd/yyyy\n24:   const formatXAxisDate = (dateStr) => {\n25:     const date = new Date(dateStr);\n26:     const mm = String(date.getMonth() + 1).padStart(2, '0');\n27:     const dd = String(date.getDate()).padStart(2, '0');\n28:     const yyyy = date.getFullYear();\n29:     return `${mm}/${dd}/${yyyy}`;\n30:   };\n31: \n32:   // Combine labels and values into an array of objects for Recharts\n33:   const chartData = data.data.map((item) => ({\n34:     date: item.date,\n35:     price: item.close,\n36:   }));\n37: \n38:   return (\n39:     <div style={{ marginTop: \"2rem\" }}>\n40:       <h3>\n41:         {company} ({ticker})\n42:       </h3>\n43:       <ResponsiveContainer width=\"100%\" height={300}>\n44:         <LineChart\n45:           data={chartData}\n46:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n47:         >\n48:           <XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />\n49:           <YAxis domain={[\"auto\", \"auto\"]} />\n50:           <Tooltip />\n51:           <Legend />\n52:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n53:         </LineChart>\n54:       </ResponsiveContainer>\n55:     </div>\n56:   );\n57: };\n58: \n59: export default StockChart;",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        }
                    ],
                    "summaryComponent": "Defines a functional React component named StockChart"
                },
                {
                    "codeSegments": [
                        {
                            "code": "if (!data || !data.data || !data.data.length) return null;",
                            "line": 14
                        }
                    ],
                    "summaryComponent": "Validates input data, returning null if missing or empty"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const company = data.name;",
                            "line": 16
                        },
                        {
                            "code": "const ticker = data.ticker;",
                            "line": 17
                        }
                    ],
                    "summaryComponent": "Extracts company name and ticker symbol from the data prop"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const chartData = data.data.map((item) => ({",
                            "line": 33
                        }
                    ],
                    "summaryComponent": "Processes raw data to create chartData array"
                },
                {
                    "codeSegments": [
                        {
                            "code": "date: item.date,",
                            "line": 34
                        },
                        {
                            "code": "price: item.close,",
                            "line": 35
                        }
                    ],
                    "summaryComponent": "Each entry contains a 'date' and corresponding 'price' (from 'close')"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const formatDateString = (date) => {",
                            "line": 19
                        },
                        {
                            "code": "const formatXAxisDate = (dateStr) => {",
                            "line": 24
                        }
                    ],
                    "summaryComponent": "Defines helper functions to format date strings, including one for mm/dd/yyyy formatting used in rendering"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<div style={{ marginTop: \"2rem\" }}>",
                            "line": 39
                        }
                    ],
                    "summaryComponent": "Renders a styled container with:"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<h3>",
                            "line": 40
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 41
                        }
                    ],
                    "summaryComponent": "A header displaying company name and ticker"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 43
                        },
                        {
                            "code": "<LineChart",
                            "line": 44
                        }
                    ],
                    "summaryComponent": "A responsive line chart using Recharts"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />",
                            "line": 48
                        }
                    ],
                    "summaryComponent": "X-axis for dates, with a custom tick formatter to display mm/dd/yyyy"
                }
            ]
        },
        "timestamp": "2025-08-21 19:16:21.000",
        "event": "map_summary_code",
        "source": "backend",
        "id": "FuajHp2Ke3xb48g6wwW9"
    },
    {
        "data": {
            "section_data": {
                "editPromptDetailLevel": null,
                "title": "StockChart React Component Summary (with Custom X-Axis Date Formatting)",
                "selectedStructured": "unstructured",
                "lines": [
                    13,
                    59
                ],
                "oldSummaryData": {
                    "high_unstructured": "The StockChart component is a functional React component that visualizes stock price data using the Recharts library. It first checks that valid data is provided, then extracts the company name and ticker symbol for display. The component processes the input data to create an array of objects containing date and closing price pairs, which are then used to render a responsive line chart. The chart includes axes, a tooltip, a legend, and omits dots on the line for a cleaner look, all styled within a container with a margin.",
                    "title": "StockChart React Component Summary",
                    "low_structured": "• Defines a React component for displaying stock data\n• Renders a line chart with company and ticker info",
                    "medium_unstructured": "The StockChart component receives stock data as a prop and renders a line chart visualizing the closing prices over time. It displays the company's name and ticker symbol above the chart, and uses the Recharts library for rendering. If no data is provided, the component returns nothing.",
                    "medium_structured": "• Receives stock data as a prop and checks for its presence\n• Extracts company name and ticker for display\n• Processes input data to map dates and closing prices\n• Renders a line chart using Recharts\n  ◦ Includes company/ticker header and chart features like axes, tooltip, and legend",
                    "low_unstructured": "This code defines a React component that displays a stock price line chart using provided data.",
                    "high_structured": "• Defines a functional React component named StockChart\n• Validates input data, returning null if missing or empty\n• Extracts company name and ticker symbol from the data prop\n• Processes raw data to create chartData array\n  ◦ Each entry contains a 'date' and corresponding 'price' (from 'close')\n• Defines a helper function to format date strings (though unused in rendering)\n• Renders a styled container with:\n  ◦ A header displaying company name and ticker\n  ◦ A responsive line chart using Recharts\n    ▪ X-axis for dates, Y-axis for price (auto domain)\n    ▪ Tooltip and legend for interactivity\n    ▪ Monotone line for price, styled with a specific color and no dots"
                },
                "createdAt": 1755836182000,
                "summaryData": {
                    "high_unstructured": "The StockChart component is a functional React component that visualizes stock price data using the Recharts library. It first checks that valid data is provided, then extracts the company name and ticker symbol for display. The component processes the input data to create an array of objects containing date and closing price pairs, which are then used to render a responsive line chart. The chart includes axes, a tooltip, a legend, and omits dots on the line for a cleaner look, all styled within a container with a margin. Notably, the X-axis now displays dates formatted as mm/dd/yyyy using a custom tick formatter.",
                    "title": "StockChart React Component Summary (with Custom X-Axis Date Formatting)",
                    "low_structured": "• Defines a React component for displaying stock data\n• Renders a line chart with company and ticker info\n• Formats X-axis dates as mm/dd/yyyy",
                    "medium_unstructured": "The StockChart component receives stock data as a prop and renders a line chart visualizing the closing prices over time. It displays the company's name and ticker symbol above the chart, and uses the Recharts library for rendering. If no data is provided, the component returns nothing. The X-axis now uses a custom formatter to display dates in mm/dd/yyyy format.",
                    "medium_structured": "• Receives stock data as a prop and checks for its presence\n• Extracts company name and ticker for display\n• Processes input data to map dates and closing prices\n• Renders a line chart using Recharts\n  ◦ Includes company/ticker header and chart features like axes, tooltip, and legend\n  ◦ X-axis dates are formatted as mm/dd/yyyy using a custom formatter",
                    "low_unstructured": "This code defines a React component that displays a stock price line chart using provided data, now with the X-axis dates formatted as mm/dd/yyyy.",
                    "high_structured": "• Defines a functional React component named StockChart\n• Validates input data, returning null if missing or empty\n• Extracts company name and ticker symbol from the data prop\n• Processes raw data to create chartData array\n  ◦ Each entry contains a 'date' and corresponding 'price' (from 'close')\n• Defines helper functions to format date strings, including one for mm/dd/yyyy formatting used in rendering\n• Renders a styled container with:\n  ◦ A header displaying company name and ticker\n  ◦ A responsive line chart using Recharts\n    ▪ X-axis for dates, with a custom tick formatter to display mm/dd/yyyy\n    ▪ Y-axis for price (auto domain)\n    ▪ Tooltip and legend for interactivity\n    ▪ Monotone line for price, styled with a specific color and no dots"
                },
                "editPromptStructured": null,
                "selectedDetailLevel": "medium",
                "summaryMappings": {
                    "high_unstructured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                }
                            ],
                            "summaryComponent": "The StockChart component is a functional React component"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 43
                                },
                                {
                                    "code": "<LineChart",
                                    "line": 44
                                }
                            ],
                            "summaryComponent": "visualizes stock price data using the Recharts library"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "if (!data || !data.data || !data.data.length) return null;",
                                    "line": 14
                                }
                            ],
                            "summaryComponent": "It first checks that valid data is provided"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const company = data.name;",
                                    "line": 16
                                },
                                {
                                    "code": "const ticker = data.ticker;",
                                    "line": 17
                                },
                                {
                                    "code": "{company} ({ticker})",
                                    "line": 41
                                }
                            ],
                            "summaryComponent": "then extracts the company name and ticker symbol for display"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const chartData = data.data.map((item) => ({",
                                    "line": 33
                                },
                                {
                                    "code": "date: item.date,",
                                    "line": 34
                                },
                                {
                                    "code": "price: item.close,",
                                    "line": 35
                                }
                            ],
                            "summaryComponent": "The component processes the input data to create an array of objects containing date and closing price pairs"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<LineChart",
                                    "line": 44
                                },
                                {
                                    "code": "data={chartData}",
                                    "line": 45
                                }
                            ],
                            "summaryComponent": "which are then used to render a responsive line chart"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />",
                                    "line": 48
                                },
                                {
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                                    "line": 49
                                },
                                {
                                    "code": "<Tooltip />",
                                    "line": 50
                                },
                                {
                                    "code": "<Legend />",
                                    "line": 51
                                }
                            ],
                            "summaryComponent": "The chart includes axes, a tooltip, a legend"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 52
                                }
                            ],
                            "summaryComponent": "and omits dots on the line for a cleaner look"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<div style={{ marginTop: \"2rem\" }}>",
                                    "line": 39
                                }
                            ],
                            "summaryComponent": "all styled within a container with a margin"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />",
                                    "line": 48
                                },
                                {
                                    "code": "const formatXAxisDate = (dateStr) => {",
                                    "line": 24
                                },
                                {
                                    "code": "return `${mm}/${dd}/${yyyy}`;",
                                    "line": 29
                                }
                            ],
                            "summaryComponent": "the X-axis now displays dates formatted as mm/dd/yyyy using a custom tick formatter"
                        }
                    ],
                    "low_structured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                }
                            ],
                            "summaryComponent": "Defines a React component for displaying stock data"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<LineChart",
                                    "line": 44
                                },
                                {
                                    "code": "<h3>",
                                    "line": 40
                                },
                                {
                                    "code": "{company} ({ticker})",
                                    "line": 41
                                }
                            ],
                            "summaryComponent": "Renders a line chart with company and ticker info"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const formatXAxisDate = (dateStr) => {",
                                    "line": 24
                                },
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />",
                                    "line": 48
                                }
                            ],
                            "summaryComponent": "Formats X-axis dates as mm/dd/yyyy"
                        }
                    ],
                    "medium_unstructured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                }
                            ],
                            "summaryComponent": "The StockChart component receives stock data as a prop"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<LineChart",
                                    "line": 44
                                },
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 52
                                }
                            ],
                            "summaryComponent": "renders a line chart visualizing the closing prices over time"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<h3>",
                                    "line": 40
                                },
                                {
                                    "code": "{company} ({ticker})",
                                    "line": 41
                                }
                            ],
                            "summaryComponent": "It displays the company's name and ticker symbol above the chart"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 43
                                },
                                {
                                    "code": "<LineChart",
                                    "line": 44
                                },
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />",
                                    "line": 48
                                },
                                {
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                                    "line": 49
                                },
                                {
                                    "code": "<Tooltip />",
                                    "line": 50
                                },
                                {
                                    "code": "<Legend />",
                                    "line": 51
                                },
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 52
                                }
                            ],
                            "summaryComponent": "uses the Recharts library for rendering"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "if (!data || !data.data || !data.data.length) return null;",
                                    "line": 14
                                }
                            ],
                            "summaryComponent": "If no data is provided, the component returns nothing"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />",
                                    "line": 48
                                },
                                {
                                    "code": "const formatXAxisDate = (dateStr) => {",
                                    "line": 24
                                },
                                {
                                    "code": "return `${mm}/${dd}/${yyyy}`;",
                                    "line": 29
                                }
                            ],
                            "summaryComponent": "The X-axis now uses a custom formatter to display dates in mm/dd/yyyy format"
                        }
                    ],
                    "medium_structured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                },
                                {
                                    "code": "if (!data || !data.data || !data.data.length) return null;",
                                    "line": 14
                                }
                            ],
                            "summaryComponent": "Receives stock data as a prop and checks for its presence"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const company = data.name;",
                                    "line": 16
                                },
                                {
                                    "code": "const ticker = data.ticker;",
                                    "line": 17
                                }
                            ],
                            "summaryComponent": "Extracts company name and ticker for display"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const chartData = data.data.map((item) => ({",
                                    "line": 33
                                },
                                {
                                    "code": "date: item.date,",
                                    "line": 34
                                },
                                {
                                    "code": "price: item.close,",
                                    "line": 35
                                },
                                {
                                    "code": "}));",
                                    "line": 36
                                }
                            ],
                            "summaryComponent": "Processes input data to map dates and closing prices"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 43
                                },
                                {
                                    "code": "<LineChart",
                                    "line": 44
                                }
                            ],
                            "summaryComponent": "Renders a line chart using Recharts"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<h3>",
                                    "line": 40
                                },
                                {
                                    "code": "{company} ({ticker})",
                                    "line": 41
                                },
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />",
                                    "line": 48
                                },
                                {
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                                    "line": 49
                                },
                                {
                                    "code": "<Tooltip />",
                                    "line": 50
                                },
                                {
                                    "code": "<Legend />",
                                    "line": 51
                                }
                            ],
                            "summaryComponent": "Includes company/ticker header and chart features like axes, tooltip, and legend"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const formatXAxisDate = (dateStr) => {",
                                    "line": 24
                                },
                                {
                                    "code": "return `${mm}/${dd}/${yyyy}`;",
                                    "line": 29
                                },
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />",
                                    "line": 48
                                }
                            ],
                            "summaryComponent": "X-axis dates are formatted as mm/dd/yyyy using a custom formatter"
                        }
                    ],
                    "low_unstructured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                }
                            ],
                            "summaryComponent": "This code defines a React component"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<LineChart",
                                    "line": 44
                                },
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 52
                                }
                            ],
                            "summaryComponent": "that displays a stock price line chart"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const chartData = data.data.map((item) => ({",
                                    "line": 33
                                },
                                {
                                    "code": "data={chartData}",
                                    "line": 45
                                }
                            ],
                            "summaryComponent": "using provided data"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />",
                                    "line": 48
                                },
                                {
                                    "code": "const formatXAxisDate = (dateStr) => {",
                                    "line": 24
                                },
                                {
                                    "code": "return `${mm}/${dd}/${yyyy}`;",
                                    "line": 29
                                }
                            ],
                            "summaryComponent": "now with the X-axis dates formatted as mm/dd/yyyy"
                        }
                    ],
                    "high_structured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                }
                            ],
                            "summaryComponent": "Defines a functional React component named StockChart"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "if (!data || !data.data || !data.data.length) return null;",
                                    "line": 14
                                }
                            ],
                            "summaryComponent": "Validates input data, returning null if missing or empty"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const company = data.name;",
                                    "line": 16
                                },
                                {
                                    "code": "const ticker = data.ticker;",
                                    "line": 17
                                }
                            ],
                            "summaryComponent": "Extracts company name and ticker symbol from the data prop"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const chartData = data.data.map((item) => ({",
                                    "line": 33
                                }
                            ],
                            "summaryComponent": "Processes raw data to create chartData array"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "date: item.date,",
                                    "line": 34
                                },
                                {
                                    "code": "price: item.close,",
                                    "line": 35
                                }
                            ],
                            "summaryComponent": "Each entry contains a 'date' and corresponding 'price' (from 'close')"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const formatDateString = (date) => {",
                                    "line": 19
                                },
                                {
                                    "code": "const formatXAxisDate = (dateStr) => {",
                                    "line": 24
                                }
                            ],
                            "summaryComponent": "Defines helper functions to format date strings, including one for mm/dd/yyyy formatting used in rendering"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<div style={{ marginTop: \"2rem\" }}>",
                                    "line": 39
                                }
                            ],
                            "summaryComponent": "Renders a styled container with:"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<h3>",
                                    "line": 40
                                },
                                {
                                    "code": "{company} ({ticker})",
                                    "line": 41
                                }
                            ],
                            "summaryComponent": "A header displaying company name and ticker"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 43
                                },
                                {
                                    "code": "<LineChart",
                                    "line": 44
                                }
                            ],
                            "summaryComponent": "A responsive line chart using Recharts"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />",
                                    "line": 48
                                }
                            ],
                            "summaryComponent": "X-axis for dates, with a custom tick formatter to display mm/dd/yyyy"
                        }
                    ]
                },
                "metadata": {
                    "offset": 156,
                    "fullPath": "/project/workspace/frontend/src/StockChart.jsx",
                    "originalCode": "const StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };\n\n  // Helper to format date as mm/dd/yyyy\n  const formatXAxisDate = (dateStr) => {\n    const date = new Date(dateStr);\n    const mm = String(date.getMonth() + 1).padStart(2, '0');\n    const dd = String(date.getDate()).padStart(2, '0');\n    const yyyy = date.getFullYear();\n    return `${mm}/${dd}/${yyyy}`;\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;",
                    "filename": "StockChart.jsx",
                    "id": "5d616857-924e-4eb7-9859-c1c444bfc2a2"
                },
                "editPromptValue": ""
            },
            "section_id": "5d616857-924e-4eb7-9859-c1c444bfc2a2"
        },
        "timestamp": "2025-08-21 19:16:22.000",
        "event": "create_new_section",
        "source": "frontend",
        "id": "3NJBD8bF88bZIwWqIMnc"
    },
    {
        "data": {
            "summary": "The StockChart component is a functional React component that visualizes stock price data using the Recharts library. It first checks that valid data is provided, then extracts the company name and ticker symbol for display. The component processes the input data to create an array of objects containing date and closing price pairs, which are then used to render a responsive line chart. The chart includes axes, a tooltip, a legend, and omits dots on the line for a cleaner look, all styled within a container with a margin. Notably, the X-axis now displays dates formatted as mm/dd/yyyy using a custom tick formatter.",
            "code": "13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Helper to format date as mm/dd/yyyy\n24:   const formatXAxisDate = (dateStr) => {\n25:     const date = new Date(dateStr);\n26:     const mm = String(date.getMonth() + 1).padStart(2, '0');\n27:     const dd = String(date.getDate()).padStart(2, '0');\n28:     const yyyy = date.getFullYear();\n29:     return `${mm}/${dd}/${yyyy}`;\n30:   };\n31: \n32:   // Combine labels and values into an array of objects for Recharts\n33:   const chartData = data.data.map((item) => ({\n34:     date: item.date,\n35:     price: item.close,\n36:   }));\n37: \n38:   return (\n39:     <div style={{ marginTop: \"2rem\" }}>\n40:       <h3>\n41:         {company} ({ticker})\n42:       </h3>\n43:       <ResponsiveContainer width=\"100%\" height={300}>\n44:         <LineChart\n45:           data={chartData}\n46:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n47:         >\n48:           <XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />\n49:           <YAxis domain={[\"auto\", \"auto\"]} />\n50:           <Tooltip />\n51:           <Legend />\n52:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n53:         </LineChart>\n54:       </ResponsiveContainer>\n55:     </div>\n56:   );\n57: };\n58: \n59: export default StockChart;",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        }
                    ],
                    "summaryComponent": "The StockChart component is a functional React component"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 43
                        },
                        {
                            "code": "<LineChart",
                            "line": 44
                        }
                    ],
                    "summaryComponent": "visualizes stock price data using the Recharts library"
                },
                {
                    "codeSegments": [
                        {
                            "code": "if (!data || !data.data || !data.data.length) return null;",
                            "line": 14
                        }
                    ],
                    "summaryComponent": "It first checks that valid data is provided"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const company = data.name;",
                            "line": 16
                        },
                        {
                            "code": "const ticker = data.ticker;",
                            "line": 17
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 41
                        }
                    ],
                    "summaryComponent": "then extracts the company name and ticker symbol for display"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const chartData = data.data.map((item) => ({",
                            "line": 33
                        },
                        {
                            "code": "date: item.date,",
                            "line": 34
                        },
                        {
                            "code": "price: item.close,",
                            "line": 35
                        }
                    ],
                    "summaryComponent": "The component processes the input data to create an array of objects containing date and closing price pairs"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<LineChart",
                            "line": 44
                        },
                        {
                            "code": "data={chartData}",
                            "line": 45
                        }
                    ],
                    "summaryComponent": "which are then used to render a responsive line chart"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />",
                            "line": 48
                        },
                        {
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                            "line": 49
                        },
                        {
                            "code": "<Tooltip />",
                            "line": 50
                        },
                        {
                            "code": "<Legend />",
                            "line": 51
                        }
                    ],
                    "summaryComponent": "The chart includes axes, a tooltip, a legend"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 52
                        }
                    ],
                    "summaryComponent": "and omits dots on the line for a cleaner look"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<div style={{ marginTop: \"2rem\" }}>",
                            "line": 39
                        }
                    ],
                    "summaryComponent": "all styled within a container with a margin"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />",
                            "line": 48
                        },
                        {
                            "code": "const formatXAxisDate = (dateStr) => {",
                            "line": 24
                        },
                        {
                            "code": "return `${mm}/${dd}/${yyyy}`;",
                            "line": 29
                        }
                    ],
                    "summaryComponent": "the X-axis now displays dates formatted as mm/dd/yyyy using a custom tick formatter"
                }
            ]
        },
        "timestamp": "2025-08-21 19:16:22.000",
        "event": "map_summary_code",
        "source": "backend",
        "id": "E3p3YwCC4ltwdOGGg4Us"
    },
    {
        "data": {
            "after_section_id": "5d616857-924e-4eb7-9859-c1c444bfc2a2",
            "before_section_id": "051043c0-a484-4ce5-8c9d-ab565d6b4fde"
        },
        "timestamp": "2025-08-21 19:16:22.000",
        "event": "autotransit_section",
        "source": "frontend",
        "id": "Ye058uaDpjSvezrmuSk2"
    },
    {
        "data": {
            "summary": "The StockChart component receives stock data as a prop and renders a line chart visualizing the closing prices over time. It displays the company's name and ticker symbol above the chart, and uses the Recharts library for rendering. If no data is provided, the component returns nothing. The X-axis now uses a custom formatter to display dates in mm/dd/yyyy format.",
            "code": "13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Helper to format date as mm/dd/yyyy\n24:   const formatXAxisDate = (dateStr) => {\n25:     const date = new Date(dateStr);\n26:     const mm = String(date.getMonth() + 1).padStart(2, '0');\n27:     const dd = String(date.getDate()).padStart(2, '0');\n28:     const yyyy = date.getFullYear();\n29:     return `${mm}/${dd}/${yyyy}`;\n30:   };\n31: \n32:   // Combine labels and values into an array of objects for Recharts\n33:   const chartData = data.data.map((item) => ({\n34:     date: item.date,\n35:     price: item.close,\n36:   }));\n37: \n38:   return (\n39:     <div style={{ marginTop: \"2rem\" }}>\n40:       <h3>\n41:         {company} ({ticker})\n42:       </h3>\n43:       <ResponsiveContainer width=\"100%\" height={300}>\n44:         <LineChart\n45:           data={chartData}\n46:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n47:         >\n48:           <XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />\n49:           <YAxis domain={[\"auto\", \"auto\"]} />\n50:           <Tooltip />\n51:           <Legend />\n52:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n53:         </LineChart>\n54:       </ResponsiveContainer>\n55:     </div>\n56:   );\n57: };\n58: \n59: export default StockChart;",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        }
                    ],
                    "summaryComponent": "The StockChart component receives stock data as a prop"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<LineChart",
                            "line": 44
                        },
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 52
                        }
                    ],
                    "summaryComponent": "renders a line chart visualizing the closing prices over time"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<h3>",
                            "line": 40
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 41
                        }
                    ],
                    "summaryComponent": "It displays the company's name and ticker symbol above the chart"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 43
                        },
                        {
                            "code": "<LineChart",
                            "line": 44
                        },
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />",
                            "line": 48
                        },
                        {
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                            "line": 49
                        },
                        {
                            "code": "<Tooltip />",
                            "line": 50
                        },
                        {
                            "code": "<Legend />",
                            "line": 51
                        },
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 52
                        }
                    ],
                    "summaryComponent": "uses the Recharts library for rendering"
                },
                {
                    "codeSegments": [
                        {
                            "code": "if (!data || !data.data || !data.data.length) return null;",
                            "line": 14
                        }
                    ],
                    "summaryComponent": "If no data is provided, the component returns nothing"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />",
                            "line": 48
                        },
                        {
                            "code": "const formatXAxisDate = (dateStr) => {",
                            "line": 24
                        },
                        {
                            "code": "return `${mm}/${dd}/${yyyy}`;",
                            "line": 29
                        }
                    ],
                    "summaryComponent": "The X-axis now uses a custom formatter to display dates in mm/dd/yyyy format"
                }
            ]
        },
        "timestamp": "2025-08-21 19:16:22.000",
        "event": "map_summary_code",
        "source": "backend",
        "id": "uOIuD2cVByHmsLpwnneO"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "unstructured",
            "section_id": "5d616857-924e-4eb7-9859-c1c444bfc2a2"
        },
        "timestamp": "2025-08-21 19:17:03.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "2rYeIF3iGwx5S2Kb4ReT"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 3,
            "structured_type": "unstructured",
            "section_id": "5d616857-924e-4eb7-9859-c1c444bfc2a2"
        },
        "timestamp": "2025-08-21 19:17:03.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "82RtI9ol6bx7cdwkaPCC"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 5,
            "structured_type": "unstructured",
            "section_id": "5d616857-924e-4eb7-9859-c1c444bfc2a2"
        },
        "timestamp": "2025-08-21 19:17:03.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "A7ca19Tsy3981P89AEm8"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "unstructured",
            "section_id": "5d616857-924e-4eb7-9859-c1c444bfc2a2"
        },
        "timestamp": "2025-08-21 19:17:03.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "Hs5P5AyRl0ZNHozE9ARB"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 5,
            "structured_type": "unstructured",
            "section_id": "5d616857-924e-4eb7-9859-c1c444bfc2a2"
        },
        "timestamp": "2025-08-21 19:17:03.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "SYjT2ATSqVkJi0sWVqcL"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "unstructured",
            "section_id": "5d616857-924e-4eb7-9859-c1c444bfc2a2"
        },
        "timestamp": "2025-08-21 19:17:03.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "XCwCEbr04K2yHQiJNrmO"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 5,
            "structured_type": "unstructured",
            "section_id": "5d616857-924e-4eb7-9859-c1c444bfc2a2"
        },
        "timestamp": "2025-08-21 19:17:03.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "cTNtsESEQmIehLiiWrLN"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 5,
            "structured_type": "unstructured",
            "section_id": "5d616857-924e-4eb7-9859-c1c444bfc2a2"
        },
        "timestamp": "2025-08-21 19:17:03.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "dUlyy9ANuDvu0Qvx7oC1"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "unstructured",
            "section_id": "5d616857-924e-4eb7-9859-c1c444bfc2a2"
        },
        "timestamp": "2025-08-21 19:17:03.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "vZj2UJowpVrbZe8z6AKi"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "unstructured",
            "section_id": "5d616857-924e-4eb7-9859-c1c444bfc2a2"
        },
        "timestamp": "2025-08-21 19:17:04.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "7HlUjdwYj3aQv9fRMTSa"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "unstructured",
            "section_id": "5d616857-924e-4eb7-9859-c1c444bfc2a2"
        },
        "timestamp": "2025-08-21 19:17:06.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "JjCrsJveioMN6jj00asC"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 1,
            "structured_type": "unstructured",
            "section_id": "5d616857-924e-4eb7-9859-c1c444bfc2a2"
        },
        "timestamp": "2025-08-21 19:17:06.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "SKLBQgMyAjUh3cEWFZzD"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 5,
            "structured_type": "unstructured",
            "section_id": "5d616857-924e-4eb7-9859-c1c444bfc2a2"
        },
        "timestamp": "2025-08-21 19:17:06.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "TqPJ3Nqzt4mSGct4i3J0"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "unstructured",
            "section_id": "5d616857-924e-4eb7-9859-c1c444bfc2a2"
        },
        "timestamp": "2025-08-21 19:17:06.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "b0SFKGIcNopoFmmwU6aM"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "unstructured",
            "section_id": "5d616857-924e-4eb7-9859-c1c444bfc2a2"
        },
        "timestamp": "2025-08-21 19:17:06.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "e2Qt94UAna2VOJHPs8uc"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 4,
            "structured_type": "unstructured",
            "section_id": "5d616857-924e-4eb7-9859-c1c444bfc2a2"
        },
        "timestamp": "2025-08-21 19:17:06.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "o9XWDgTBAT4jHKsjFPW2"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured": "unstructured",
            "summary": "The StockChart component receives stock data as a prop and renders a line chart visualizing the closing prices over time. It displays the company's name and ticker symbol above the chart, and uses the Recharts library for rendering. If no data is provided, the component returns nothing. The X-axis now uses a custom formatter to display dates in mm/dd/yyyy format.",
            "section_id": "5d616857-924e-4eb7-9859-c1c444bfc2a2"
        },
        "timestamp": "2025-08-21 19:17:10.000",
        "event": "click_edit_in_prompt",
        "source": "frontend",
        "id": "7ByqBxRAd2ygC8Frv2FB"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 3,
            "structured_type": "unstructured",
            "section_id": "5d616857-924e-4eb7-9859-c1c444bfc2a2"
        },
        "timestamp": "2025-08-21 19:17:12.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "7Si4b0MRVQB2bfk3NLHs"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "unstructured",
            "section_id": "5d616857-924e-4eb7-9859-c1c444bfc2a2"
        },
        "timestamp": "2025-08-21 19:17:12.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "8vWcXsXA0DmNWYjFcYLh"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 1,
            "structured_type": "unstructured",
            "section_id": "5d616857-924e-4eb7-9859-c1c444bfc2a2"
        },
        "timestamp": "2025-08-21 19:17:12.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "ImhoKWzmJJK6QTxAeU9X"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "unstructured",
            "section_id": "5d616857-924e-4eb7-9859-c1c444bfc2a2"
        },
        "timestamp": "2025-08-21 19:17:12.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "J7JJ2v0plvqE0JSPh8b7"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 5,
            "structured_type": "unstructured",
            "section_id": "5d616857-924e-4eb7-9859-c1c444bfc2a2"
        },
        "timestamp": "2025-08-21 19:17:12.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "ZZgwrBMtuGZHrjyfilKh"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "unstructured",
            "section_id": "5d616857-924e-4eb7-9859-c1c444bfc2a2"
        },
        "timestamp": "2025-08-21 19:17:12.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "n8sFBoMCsWpmlLtK2gfr"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "unstructured",
            "section_id": "5d616857-924e-4eb7-9859-c1c444bfc2a2"
        },
        "timestamp": "2025-08-21 19:17:12.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "w8puuzwLiV6mO5zhj9mi"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 2,
            "structured_type": "unstructured",
            "section_id": "5d616857-924e-4eb7-9859-c1c444bfc2a2"
        },
        "timestamp": "2025-08-21 19:17:12.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "wEMbLa6DX0phy3quYAd6"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 0,
            "structured_type": "unstructured",
            "section_id": "5d616857-924e-4eb7-9859-c1c444bfc2a2"
        },
        "timestamp": "2025-08-21 19:17:33.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "Ewj1w8A3Ry4YrqEmiMLs"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "unstructured",
            "section_id": "5d616857-924e-4eb7-9859-c1c444bfc2a2"
        },
        "timestamp": "2025-08-21 19:17:34.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "PQni291H4T8kjfMwFPyW"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 2,
            "structured_type": "unstructured",
            "section_id": "5d616857-924e-4eb7-9859-c1c444bfc2a2"
        },
        "timestamp": "2025-08-21 19:17:34.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "WsWQXbHnQeebysWpnayQ"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "unstructured",
            "section_id": "5d616857-924e-4eb7-9859-c1c444bfc2a2"
        },
        "timestamp": "2025-08-21 19:17:34.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "ejZmzP0kiqrGWmcMru0z"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 1,
            "structured_type": "unstructured",
            "section_id": "5d616857-924e-4eb7-9859-c1c444bfc2a2"
        },
        "timestamp": "2025-08-21 19:17:34.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "p8KVTSwXvp2cpGkCbZM5"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "unstructured",
            "section_id": "5d616857-924e-4eb7-9859-c1c444bfc2a2"
        },
        "timestamp": "2025-08-21 19:17:34.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "sfClfGfTFz4WZwSdF2Aw"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "structured",
            "section_id": "5d616857-924e-4eb7-9859-c1c444bfc2a2"
        },
        "timestamp": "2025-08-21 19:17:35.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "22IBqF9jUogP3Da6yHkZ"
    },
    {
        "data": {
            "before_structured": "unstructured",
            "before_detail_level": "medium",
            "after_structured": "structured",
            "after_detail_level": "medium",
            "section_id": "5d616857-924e-4eb7-9859-c1c444bfc2a2"
        },
        "timestamp": "2025-08-21 19:17:35.000",
        "event": "change_summary_level",
        "source": "frontend",
        "id": "4aefobZgPYRVhvllc0OV"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "structured",
            "section_id": "5d616857-924e-4eb7-9859-c1c444bfc2a2"
        },
        "timestamp": "2025-08-21 19:17:35.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "AlTxHzCRUsJ6LXxJ1rHt"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 0,
            "structured_type": "structured",
            "section_id": "5d616857-924e-4eb7-9859-c1c444bfc2a2"
        },
        "timestamp": "2025-08-21 19:17:35.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "EWe307QnJwJfahJ40olA"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 2,
            "structured_type": "structured",
            "section_id": "5d616857-924e-4eb7-9859-c1c444bfc2a2"
        },
        "timestamp": "2025-08-21 19:17:35.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "YZcLAdtJ3F8J8Rfd2NOQ"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 1,
            "structured_type": "structured",
            "section_id": "5d616857-924e-4eb7-9859-c1c444bfc2a2"
        },
        "timestamp": "2025-08-21 19:17:35.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "bmZyKdWmr3pctB74xSxM"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 1,
            "structured_type": "structured",
            "section_id": "5d616857-924e-4eb7-9859-c1c444bfc2a2"
        },
        "timestamp": "2025-08-21 19:17:36.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "8LqAPC7bV664s3NkOGj3"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "structured",
            "section_id": "5d616857-924e-4eb7-9859-c1c444bfc2a2"
        },
        "timestamp": "2025-08-21 19:17:36.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "WW26xRRS1ELAXCWdLJHJ"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 0,
            "structured_type": "structured",
            "section_id": "5d616857-924e-4eb7-9859-c1c444bfc2a2"
        },
        "timestamp": "2025-08-21 19:17:36.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "qgTwLqJjHOGVloDZID4K"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "structured",
            "section_id": "5d616857-924e-4eb7-9859-c1c444bfc2a2"
        },
        "timestamp": "2025-08-21 19:17:36.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "y0jl08ztuCIglsm7GYTi"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "structured",
            "section_id": "5d616857-924e-4eb7-9859-c1c444bfc2a2"
        },
        "timestamp": "2025-08-21 19:17:36.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "yM3tzVyZwJgrrh1hamto"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured": "structured",
            "summary": "• Receives stock data as a prop and checks for its presence\n• Extracts company name and ticker for display\n• Processes input data to map dates and closing prices\n• Renders a line chart using Recharts\n  ◦ Includes company/ticker header and chart features like axes, tooltip, and legend\n  ◦ X-axis dates are formatted as mm/dd/yyyy using a custom formatter",
            "section_id": "5d616857-924e-4eb7-9859-c1c444bfc2a2"
        },
        "timestamp": "2025-08-21 19:17:38.000",
        "event": "click_edit_in_prompt",
        "source": "frontend",
        "id": "LDF8OSVoQAYIi5sswP7d"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "structured",
            "section_id": "5d616857-924e-4eb7-9859-c1c444bfc2a2"
        },
        "timestamp": "2025-08-21 19:17:39.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "ALxmuNxaAYxmbizQjcYy"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "structured",
            "section_id": "5d616857-924e-4eb7-9859-c1c444bfc2a2"
        },
        "timestamp": "2025-08-21 19:17:39.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "SKp8JFJAkzWvKXf6pHbp"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 5,
            "structured_type": "structured",
            "section_id": "5d616857-924e-4eb7-9859-c1c444bfc2a2"
        },
        "timestamp": "2025-08-21 19:17:39.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "m4O6gu0sb8QEt3xXJ5uI"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 4,
            "structured_type": "structured",
            "section_id": "5d616857-924e-4eb7-9859-c1c444bfc2a2"
        },
        "timestamp": "2025-08-21 19:17:39.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "wG0PxSUR2aMAWpgsJ9s8"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "structured",
            "section_id": "5d616857-924e-4eb7-9859-c1c444bfc2a2"
        },
        "timestamp": "2025-08-21 19:18:41.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "2TRHXzPTxEV3xBj7MNe7"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 5,
            "structured_type": "structured",
            "section_id": "5d616857-924e-4eb7-9859-c1c444bfc2a2"
        },
        "timestamp": "2025-08-21 19:18:41.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "ANQgV7CQo0KswYiOOq1a"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 4,
            "structured_type": "structured",
            "section_id": "5d616857-924e-4eb7-9859-c1c444bfc2a2"
        },
        "timestamp": "2025-08-21 19:18:41.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "DKSd3NzvRCAvMaOD3LjT"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "structured",
            "section_id": "5d616857-924e-4eb7-9859-c1c444bfc2a2"
        },
        "timestamp": "2025-08-21 19:18:41.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "orGISHTSXfSC5oI119Uf"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured": "structured",
            "original_summary": "• Receives stock data as a prop and checks for its presence\n• Extracts company name and ticker for display\n• Processes input data to map dates and closing prices\n• Renders a line chart using Recharts\n  ◦ Includes company/ticker header and chart features like axes, tooltip, and legend\n  ◦ X-axis dates are formatted as mm/dd/yyyy using a custom formatter",
            "edited_summary": "• Receives stock data as a prop and checks for its presence\n• Extracts company name and ticker for display\n• Processes input data to map dates and closing prices\n• Renders a line chart using Recharts\n  ◦ Includes company/ticker header and chart features like axes, tooltip, and legend\n  ◦ X-axis dates are formatted as MMM using a custom formatter",
            "section_id": "5d616857-924e-4eb7-9859-c1c444bfc2a2"
        },
        "timestamp": "2025-08-21 19:18:45.000",
        "event": "commit_modified_summary",
        "source": "frontend",
        "id": "5jBRLBZWJaesJU3Es5IO"
    },
    {
        "data": {
            "detail_level": "medium",
            "original_summary": "• Receives stock data as a prop and checks for its presence\n• Extracts company name and ticker for display\n• Processes input data to map dates and closing prices\n• Renders a line chart using Recharts\n  ◦ Includes company/ticker header and chart features like axes, tooltip, and legend\n  ◦ X-axis dates are formatted as mm/dd/yyyy using a custom formatter",
            "original_code": "const StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };\n\n  // Helper to format date as mm/dd/yyyy\n  const formatXAxisDate = (dateStr) => {\n    const date = new Date(dateStr);\n    const mm = String(date.getMonth() + 1).padStart(2, '0');\n    const dd = String(date.getDate()).padStart(2, '0');\n    const yyyy = date.getFullYear();\n    return `${mm}/${dd}/${yyyy}`;\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;",
            "updated_code": "const StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };\n\n  // Helper to format date as MMM (e.g., Jan, Feb)\n  const formatXAxisDate = (dateStr) => {\n    const date = new Date(dateStr);\n    return date.toLocaleString('en-US', { month: 'short' });\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;",
            "edited_summary": "• Receives stock data as a prop and checks for its presence\n• Extracts company name and ticker for display\n• Processes input data to map dates and closing prices\n• Renders a line chart using Recharts\n  ◦ Includes company/ticker header and chart features like axes, tooltip, and legend\n  ◦ X-axis dates are formatted as MMM using a custom formatter",
            "structured_type": "structured"
        },
        "timestamp": "2025-08-21 19:18:48.000",
        "event": "modify_summary_mediation",
        "source": "backend",
        "id": "QS6OnH3nAz28sHHaHvuU"
    },
    {
        "data": {
            "old_summary": {
                "high_unstructured": "The StockChart component is a functional React component that visualizes stock price data using the Recharts library. It first checks that valid data is provided, then extracts the company name and ticker symbol for display. The component processes the input data to create an array of objects containing date and closing price pairs, which are then used to render a responsive line chart. The chart includes axes, a tooltip, a legend, and omits dots on the line for a cleaner look, all styled within a container with a margin. Notably, the X-axis now displays dates formatted as mm/dd/yyyy using a custom tick formatter.",
                "title": "StockChart React Component Summary (with Custom X-Axis Date Formatting)",
                "low_structured": "• Defines a React component for displaying stock data\n• Renders a line chart with company and ticker info\n• Formats X-axis dates as mm/dd/yyyy",
                "medium_unstructured": "The StockChart component receives stock data as a prop and renders a line chart visualizing the closing prices over time. It displays the company's name and ticker symbol above the chart, and uses the Recharts library for rendering. If no data is provided, the component returns nothing. The X-axis now uses a custom formatter to display dates in mm/dd/yyyy format.",
                "medium_structured": "• Receives stock data as a prop and checks for its presence\n• Extracts company name and ticker for display\n• Processes input data to map dates and closing prices\n• Renders a line chart using Recharts\n  ◦ Includes company/ticker header and chart features like axes, tooltip, and legend\n  ◦ X-axis dates are formatted as mm/dd/yyyy using a custom formatter",
                "low_unstructured": "This code defines a React component that displays a stock price line chart using provided data, now with the X-axis dates formatted as mm/dd/yyyy.",
                "high_structured": "• Defines a functional React component named StockChart\n• Validates input data, returning null if missing or empty\n• Extracts company name and ticker symbol from the data prop\n• Processes raw data to create chartData array\n  ◦ Each entry contains a 'date' and corresponding 'price' (from 'close')\n• Defines helper functions to format date strings, including one for mm/dd/yyyy formatting used in rendering\n• Renders a styled container with:\n  ◦ A header displaying company name and ticker\n  ◦ A responsive line chart using Recharts\n    ▪ X-axis for dates, with a custom tick formatter to display mm/dd/yyyy\n    ▪ Y-axis for price (auto domain)\n    ▪ Tooltip and legend for interactivity\n    ▪ Monotone line for price, styled with a specific color and no dots"
            },
            "original_code": "const StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };\n\n  // Helper to format date as MMM (e.g., Jan, Feb)\n  const formatXAxisDate = (dateStr) => {\n    const date = new Date(dateStr);\n    return date.toLocaleString('en-US', { month: 'short' });\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;",
            "new_code": "const StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };\n\n  // Helper to format date as MMM (e.g., Jan, Feb)\n  const formatXAxisDate = (dateStr) => {\n    const date = new Date(dateStr);\n    return date.toLocaleString('en-US', { month: 'short' });\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;",
            "new_summary": {
                "high_unstructured": "The StockChart component is a functional React component that visualizes stock price data using the Recharts library. It first checks that valid data is provided, then extracts the company name and ticker symbol for display. The component processes the input data to create an array of objects containing date and closing price pairs, which are then used to render a responsive line chart. The chart includes axes, a tooltip, a legend, and omits dots on the line for a cleaner look, all styled within a container with a margin. Notably, the X-axis now displays dates formatted as short month names (e.g., Jan, Feb) instead of mm/dd/yyyy using a custom tick formatter.",
                "title": "StockChart React Component Summary (with Short Month X-Axis Date Formatting)",
                "low_structured": "• Defines a React component for displaying stock data\n• Renders a line chart with company and ticker info\n• Formats X-axis dates as short month names (e.g., Jan, Feb) instead of mm/dd/yyyy",
                "medium_unstructured": "The StockChart component receives stock data as a prop and renders a line chart visualizing the closing prices over time. It displays the company's name and ticker symbol above the chart, and uses the Recharts library for rendering. If no data is provided, the component returns nothing. The X-axis now uses a custom formatter to display dates as short month names (e.g., Jan, Feb) instead of mm/dd/yyyy.",
                "medium_structured": "• Receives stock data as a prop and checks for its presence\n• Extracts company name and ticker for display\n• Processes input data to map dates and closing prices\n• Renders a line chart using Recharts\n  ◦ Includes company/ticker header and chart features like axes, tooltip, and legend\n  ◦ X-axis dates are formatted as short month names (e.g., Jan, Feb) instead of mm/dd/yyyy using a custom formatter",
                "low_unstructured": "This code defines a React component that displays a stock price line chart using provided data, now with the X-axis dates formatted as short month names (e.g., Jan, Feb) instead of mm/dd/yyyy.",
                "high_structured": "• Defines a functional React component named StockChart\n• Validates input data, returning null if missing or empty\n• Extracts company name and ticker symbol from the data prop\n• Processes raw data to create chartData array\n  ◦ Each entry contains a 'date' and corresponding 'price' (from 'close')\n• Defines helper functions to format date strings, including one for short month names (e.g., Jan, Feb) formatting used in rendering instead of mm/dd/yyyy\n• Renders a styled container with:\n  ◦ A header displaying company name and ticker\n  ◦ A responsive line chart using Recharts\n    ▪ X-axis for dates, with a custom tick formatter to display short month names (e.g., Jan, Feb) instead of mm/dd/yyyy\n    ▪ Y-axis for price (auto domain)\n    ▪ Tooltip and legend for interactivity\n    ▪ Monotone line for price, styled with a specific color and no dots"
            }
        },
        "timestamp": "2025-08-21 19:18:54.000",
        "event": "summarize_modified_code",
        "source": "backend",
        "id": "qt0e6VazS86YMPTEc5lw"
    },
    {
        "data": {
            "summary": "• Defines a functional React component named StockChart\n• Validates input data, returning null if missing or empty\n• Extracts company name and ticker symbol from the data prop\n• Processes raw data to create chartData array\n  ◦ Each entry contains a 'date' and corresponding 'price' (from 'close')\n• Defines helper functions to format date strings, including one for short month names (e.g., Jan, Feb) formatting used in rendering instead of mm/dd/yyyy\n• Renders a styled container with:\n  ◦ A header displaying company name and ticker\n  ◦ A responsive line chart using Recharts\n    ▪ X-axis for dates, with a custom tick formatter to display short month names (e.g., Jan, Feb) instead of mm/dd/yyyy\n    ▪ Y-axis for price (auto domain)\n    ▪ Tooltip and legend for interactivity\n    ▪ Monotone line for price, styled with a specific color and no dots",
            "code": "13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Helper to format date as MMM (e.g., Jan, Feb)\n24:   const formatXAxisDate = (dateStr) => {\n25:     const date = new Date(dateStr);\n26:     return date.toLocaleString('en-US', { month: 'short' });\n27:   };\n28: \n29:   // Combine labels and values into an array of objects for Recharts\n30:   const chartData = data.data.map((item) => ({\n31:     date: item.date,\n32:     price: item.close,\n33:   }));\n34: \n35:   return (\n36:     <div style={{ marginTop: \"2rem\" }}>\n37:       <h3>\n38:         {company} ({ticker})\n39:       </h3>\n40:       <ResponsiveContainer width=\"100%\" height={300}>\n41:         <LineChart\n42:           data={chartData}\n43:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n44:         >\n45:           <XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />\n46:           <YAxis domain={[\"auto\", \"auto\"]} />\n47:           <Tooltip />\n48:           <Legend />\n49:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n50:         </LineChart>\n51:       </ResponsiveContainer>\n52:     </div>\n53:   );\n54: };\n55: \n56: export default StockChart;",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        }
                    ],
                    "summaryComponent": "Defines a functional React component named StockChart"
                },
                {
                    "codeSegments": [
                        {
                            "code": "if (!data || !data.data || !data.data.length) return null;",
                            "line": 14
                        }
                    ],
                    "summaryComponent": "Validates input data, returning null if missing or empty"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const company = data.name;",
                            "line": 16
                        },
                        {
                            "code": "const ticker = data.ticker;",
                            "line": 17
                        }
                    ],
                    "summaryComponent": "Extracts company name and ticker symbol from the data prop"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const chartData = data.data.map((item) => ({",
                            "line": 30
                        }
                    ],
                    "summaryComponent": "Processes raw data to create chartData array"
                },
                {
                    "codeSegments": [
                        {
                            "code": "date: item.date,",
                            "line": 31
                        },
                        {
                            "code": "price: item.close,",
                            "line": 32
                        }
                    ],
                    "summaryComponent": "Each entry contains a 'date' and corresponding 'price' (from 'close')"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const formatDateString = (date) => {",
                            "line": 19
                        },
                        {
                            "code": "const formatXAxisDate = (dateStr) => {",
                            "line": 24
                        }
                    ],
                    "summaryComponent": "Defines helper functions to format date strings, including one for short month names (e.g., Jan, Feb) formatting used in rendering instead of mm/dd/yyyy"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<div style={{ marginTop: \"2rem\" }}>",
                            "line": 36
                        }
                    ],
                    "summaryComponent": "Renders a styled container with:"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<h3>",
                            "line": 37
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 38
                        }
                    ],
                    "summaryComponent": "A header displaying company name and ticker"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 40
                        },
                        {
                            "code": "<LineChart",
                            "line": 41
                        }
                    ],
                    "summaryComponent": "A responsive line chart using Recharts"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />",
                            "line": 45
                        }
                    ],
                    "summaryComponent": "X-axis for dates, with a custom tick formatter to display short month names (e.g., Jan, Feb) instead of mm/dd/yyyy"
                }
            ]
        },
        "timestamp": "2025-08-21 19:18:57.000",
        "event": "map_summary_code",
        "source": "backend",
        "id": "IVJiTVqJaqV9OOsRfo7I"
    },
    {
        "data": {
            "summary": "• Defines a React component for displaying stock data\n• Renders a line chart with company and ticker info\n• Formats X-axis dates as short month names (e.g., Jan, Feb) instead of mm/dd/yyyy",
            "code": "13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Helper to format date as MMM (e.g., Jan, Feb)\n24:   const formatXAxisDate = (dateStr) => {\n25:     const date = new Date(dateStr);\n26:     return date.toLocaleString('en-US', { month: 'short' });\n27:   };\n28: \n29:   // Combine labels and values into an array of objects for Recharts\n30:   const chartData = data.data.map((item) => ({\n31:     date: item.date,\n32:     price: item.close,\n33:   }));\n34: \n35:   return (\n36:     <div style={{ marginTop: \"2rem\" }}>\n37:       <h3>\n38:         {company} ({ticker})\n39:       </h3>\n40:       <ResponsiveContainer width=\"100%\" height={300}>\n41:         <LineChart\n42:           data={chartData}\n43:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n44:         >\n45:           <XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />\n46:           <YAxis domain={[\"auto\", \"auto\"]} />\n47:           <Tooltip />\n48:           <Legend />\n49:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n50:         </LineChart>\n51:       </ResponsiveContainer>\n52:     </div>\n53:   );\n54: };\n55: \n56: export default StockChart;",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        }
                    ],
                    "summaryComponent": "Defines a React component for displaying stock data"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<h3>",
                            "line": 37
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 38
                        },
                        {
                            "code": "<LineChart",
                            "line": 41
                        }
                    ],
                    "summaryComponent": "Renders a line chart with company and ticker info"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const formatXAxisDate = (dateStr) => {",
                            "line": 24
                        },
                        {
                            "code": "return date.toLocaleString('en-US', { month: 'short' });",
                            "line": 26
                        },
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />",
                            "line": 45
                        }
                    ],
                    "summaryComponent": "Formats X-axis dates as short month names (e.g., Jan, Feb) instead of mm/dd/yyyy"
                }
            ]
        },
        "timestamp": "2025-08-21 19:18:57.000",
        "event": "map_summary_code",
        "source": "backend",
        "id": "JXfjydT6IdPNWKPLXxCl"
    },
    {
        "data": {
            "summary": "This code defines a React component that displays a stock price line chart using provided data, now with the X-axis dates formatted as short month names (e.g., Jan, Feb) instead of mm/dd/yyyy.",
            "code": "13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Helper to format date as MMM (e.g., Jan, Feb)\n24:   const formatXAxisDate = (dateStr) => {\n25:     const date = new Date(dateStr);\n26:     return date.toLocaleString('en-US', { month: 'short' });\n27:   };\n28: \n29:   // Combine labels and values into an array of objects for Recharts\n30:   const chartData = data.data.map((item) => ({\n31:     date: item.date,\n32:     price: item.close,\n33:   }));\n34: \n35:   return (\n36:     <div style={{ marginTop: \"2rem\" }}>\n37:       <h3>\n38:         {company} ({ticker})\n39:       </h3>\n40:       <ResponsiveContainer width=\"100%\" height={300}>\n41:         <LineChart\n42:           data={chartData}\n43:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n44:         >\n45:           <XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />\n46:           <YAxis domain={[\"auto\", \"auto\"]} />\n47:           <Tooltip />\n48:           <Legend />\n49:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n50:         </LineChart>\n51:       </ResponsiveContainer>\n52:     </div>\n53:   );\n54: };\n55: \n56: export default StockChart;",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        }
                    ],
                    "summaryComponent": "defines a React component"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<LineChart",
                            "line": 41
                        },
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 49
                        }
                    ],
                    "summaryComponent": "displays a stock price line chart"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const chartData = data.data.map((item) => ({",
                            "line": 30
                        },
                        {
                            "code": "data={chartData}",
                            "line": 42
                        }
                    ],
                    "summaryComponent": "using provided data"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const formatXAxisDate = (dateStr) => {",
                            "line": 24
                        },
                        {
                            "code": "return date.toLocaleString('en-US', { month: 'short' });",
                            "line": 26
                        },
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />",
                            "line": 45
                        }
                    ],
                    "summaryComponent": "now with the X-axis dates formatted as short month names (e.g., Jan, Feb)"
                },
                {
                    "codeSegments": [
                        {
                            "code": "return date.toLocaleString('en-US', { month: 'short' });",
                            "line": 26
                        }
                    ],
                    "summaryComponent": "instead of mm/dd/yyyy"
                }
            ]
        },
        "timestamp": "2025-08-21 19:18:57.000",
        "event": "map_summary_code",
        "source": "backend",
        "id": "SanXM1qb6ubAL5xpXJxu"
    },
    {
        "data": {
            "summary": "The StockChart component receives stock data as a prop and renders a line chart visualizing the closing prices over time. It displays the company's name and ticker symbol above the chart, and uses the Recharts library for rendering. If no data is provided, the component returns nothing. The X-axis now uses a custom formatter to display dates as short month names (e.g., Jan, Feb) instead of mm/dd/yyyy.",
            "code": "13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Helper to format date as MMM (e.g., Jan, Feb)\n24:   const formatXAxisDate = (dateStr) => {\n25:     const date = new Date(dateStr);\n26:     return date.toLocaleString('en-US', { month: 'short' });\n27:   };\n28: \n29:   // Combine labels and values into an array of objects for Recharts\n30:   const chartData = data.data.map((item) => ({\n31:     date: item.date,\n32:     price: item.close,\n33:   }));\n34: \n35:   return (\n36:     <div style={{ marginTop: \"2rem\" }}>\n37:       <h3>\n38:         {company} ({ticker})\n39:       </h3>\n40:       <ResponsiveContainer width=\"100%\" height={300}>\n41:         <LineChart\n42:           data={chartData}\n43:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n44:         >\n45:           <XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />\n46:           <YAxis domain={[\"auto\", \"auto\"]} />\n47:           <Tooltip />\n48:           <Legend />\n49:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n50:         </LineChart>\n51:       </ResponsiveContainer>\n52:     </div>\n53:   );\n54: };\n55: \n56: export default StockChart;",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        }
                    ],
                    "summaryComponent": "The StockChart component receives stock data as a prop"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<LineChart",
                            "line": 41
                        },
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 49
                        }
                    ],
                    "summaryComponent": "renders a line chart visualizing the closing prices over time"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<h3>",
                            "line": 37
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 38
                        }
                    ],
                    "summaryComponent": "It displays the company's name and ticker symbol above the chart"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 40
                        },
                        {
                            "code": "<LineChart",
                            "line": 41
                        },
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />",
                            "line": 45
                        },
                        {
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                            "line": 46
                        },
                        {
                            "code": "<Tooltip />",
                            "line": 47
                        },
                        {
                            "code": "<Legend />",
                            "line": 48
                        },
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 49
                        }
                    ],
                    "summaryComponent": "and uses the Recharts library for rendering"
                },
                {
                    "codeSegments": [
                        {
                            "code": "if (!data || !data.data || !data.data.length) return null;",
                            "line": 14
                        }
                    ],
                    "summaryComponent": "If no data is provided, the component returns nothing"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />",
                            "line": 45
                        },
                        {
                            "code": "const formatXAxisDate = (dateStr) => {",
                            "line": 24
                        },
                        {
                            "code": "return date.toLocaleString('en-US', { month: 'short' });",
                            "line": 26
                        }
                    ],
                    "summaryComponent": "The X-axis now uses a custom formatter to display dates as short month names (e.g., Jan, Feb) instead of mm/dd/yyyy."
                }
            ]
        },
        "timestamp": "2025-08-21 19:18:58.000",
        "event": "map_summary_code",
        "source": "backend",
        "id": "GhvwNqxdrmSayu92gLeW"
    },
    {
        "data": {
            "summary": "• Receives stock data as a prop and checks for its presence\n• Extracts company name and ticker for display\n• Processes input data to map dates and closing prices\n• Renders a line chart using Recharts\n  ◦ Includes company/ticker header and chart features like axes, tooltip, and legend\n  ◦ X-axis dates are formatted as short month names (e.g., Jan, Feb) instead of mm/dd/yyyy using a custom formatter",
            "code": "13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Helper to format date as MMM (e.g., Jan, Feb)\n24:   const formatXAxisDate = (dateStr) => {\n25:     const date = new Date(dateStr);\n26:     return date.toLocaleString('en-US', { month: 'short' });\n27:   };\n28: \n29:   // Combine labels and values into an array of objects for Recharts\n30:   const chartData = data.data.map((item) => ({\n31:     date: item.date,\n32:     price: item.close,\n33:   }));\n34: \n35:   return (\n36:     <div style={{ marginTop: \"2rem\" }}>\n37:       <h3>\n38:         {company} ({ticker})\n39:       </h3>\n40:       <ResponsiveContainer width=\"100%\" height={300}>\n41:         <LineChart\n42:           data={chartData}\n43:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n44:         >\n45:           <XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />\n46:           <YAxis domain={[\"auto\", \"auto\"]} />\n47:           <Tooltip />\n48:           <Legend />\n49:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n50:         </LineChart>\n51:       </ResponsiveContainer>\n52:     </div>\n53:   );\n54: };\n55: \n56: export default StockChart;",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        },
                        {
                            "code": "if (!data || !data.data || !data.data.length) return null;",
                            "line": 14
                        }
                    ],
                    "summaryComponent": "Receives stock data as a prop and checks for its presence"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const company = data.name;",
                            "line": 16
                        },
                        {
                            "code": "const ticker = data.ticker;",
                            "line": 17
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 38
                        }
                    ],
                    "summaryComponent": "Extracts company name and ticker for display"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const chartData = data.data.map((item) => ({",
                            "line": 30
                        },
                        {
                            "code": "date: item.date,",
                            "line": 31
                        },
                        {
                            "code": "price: item.close,",
                            "line": 32
                        }
                    ],
                    "summaryComponent": "Processes input data to map dates and closing prices"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<LineChart",
                            "line": 41
                        }
                    ],
                    "summaryComponent": "Renders a line chart using Recharts"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<h3>",
                            "line": 37
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 38
                        },
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />",
                            "line": 45
                        },
                        {
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                            "line": 46
                        },
                        {
                            "code": "<Tooltip />",
                            "line": 47
                        },
                        {
                            "code": "<Legend />",
                            "line": 48
                        }
                    ],
                    "summaryComponent": "Includes company/ticker header and chart features like axes, tooltip, and legend"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const formatXAxisDate = (dateStr) => {",
                            "line": 24
                        },
                        {
                            "code": "return date.toLocaleString('en-US', { month: 'short' });",
                            "line": 26
                        },
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />",
                            "line": 45
                        }
                    ],
                    "summaryComponent": "X-axis dates are formatted as short month names (e.g., Jan, Feb) instead of mm/dd/yyyy using a custom formatter"
                }
            ]
        },
        "timestamp": "2025-08-21 19:18:58.000",
        "event": "map_summary_code",
        "source": "backend",
        "id": "ZctOELVidE7qGGByRZyH"
    },
    {
        "data": {
            "after_section_id": "c1d9bc6d-8795-487c-b836-2dc427f3ace1",
            "before_section_id": "5d616857-924e-4eb7-9859-c1c444bfc2a2"
        },
        "timestamp": "2025-08-21 19:19:00.000",
        "event": "autotransit_section",
        "source": "frontend",
        "id": "4aMP3m56KiJU72qvqxAW"
    },
    {
        "data": {
            "summary": "The StockChart component is a functional React component that visualizes stock price data using the Recharts library. It first checks that valid data is provided, then extracts the company name and ticker symbol for display. The component processes the input data to create an array of objects containing date and closing price pairs, which are then used to render a responsive line chart. The chart includes axes, a tooltip, a legend, and omits dots on the line for a cleaner look, all styled within a container with a margin. Notably, the X-axis now displays dates formatted as short month names (e.g., Jan, Feb) instead of mm/dd/yyyy using a custom tick formatter.",
            "code": "13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Helper to format date as MMM (e.g., Jan, Feb)\n24:   const formatXAxisDate = (dateStr) => {\n25:     const date = new Date(dateStr);\n26:     return date.toLocaleString('en-US', { month: 'short' });\n27:   };\n28: \n29:   // Combine labels and values into an array of objects for Recharts\n30:   const chartData = data.data.map((item) => ({\n31:     date: item.date,\n32:     price: item.close,\n33:   }));\n34: \n35:   return (\n36:     <div style={{ marginTop: \"2rem\" }}>\n37:       <h3>\n38:         {company} ({ticker})\n39:       </h3>\n40:       <ResponsiveContainer width=\"100%\" height={300}>\n41:         <LineChart\n42:           data={chartData}\n43:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n44:         >\n45:           <XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />\n46:           <YAxis domain={[\"auto\", \"auto\"]} />\n47:           <Tooltip />\n48:           <Legend />\n49:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n50:         </LineChart>\n51:       </ResponsiveContainer>\n52:     </div>\n53:   );\n54: };\n55: \n56: export default StockChart;",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        }
                    ],
                    "summaryComponent": "The StockChart component is a functional React component"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 40
                        },
                        {
                            "code": "<LineChart",
                            "line": 41
                        }
                    ],
                    "summaryComponent": "visualizes stock price data using the Recharts library"
                },
                {
                    "codeSegments": [
                        {
                            "code": "if (!data || !data.data || !data.data.length) return null;",
                            "line": 14
                        }
                    ],
                    "summaryComponent": "It first checks that valid data is provided"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const company = data.name;",
                            "line": 16
                        },
                        {
                            "code": "const ticker = data.ticker;",
                            "line": 17
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 38
                        }
                    ],
                    "summaryComponent": "then extracts the company name and ticker symbol for display"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const chartData = data.data.map((item) => ({",
                            "line": 30
                        },
                        {
                            "code": "date: item.date,",
                            "line": 31
                        },
                        {
                            "code": "price: item.close,",
                            "line": 32
                        }
                    ],
                    "summaryComponent": "The component processes the input data to create an array of objects containing date and closing price pairs"
                },
                {
                    "codeSegments": [
                        {
                            "code": "data={chartData}",
                            "line": 42
                        }
                    ],
                    "summaryComponent": "which are then used to render a responsive line chart"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />",
                            "line": 45
                        },
                        {
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                            "line": 46
                        },
                        {
                            "code": "<Tooltip />",
                            "line": 47
                        },
                        {
                            "code": "<Legend />",
                            "line": 48
                        }
                    ],
                    "summaryComponent": "The chart includes axes, a tooltip, a legend"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 49
                        }
                    ],
                    "summaryComponent": "and omits dots on the line for a cleaner look"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<div style={{ marginTop: \"2rem\" }}>",
                            "line": 36
                        }
                    ],
                    "summaryComponent": "all styled within a container with a margin"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />",
                            "line": 45
                        },
                        {
                            "code": "const formatXAxisDate = (dateStr) => {",
                            "line": 24
                        },
                        {
                            "code": "return date.toLocaleString('en-US', { month: 'short' });",
                            "line": 26
                        }
                    ],
                    "summaryComponent": "Notably, the X-axis now displays dates formatted as short month names (e.g., Jan, Feb) instead of mm/dd/yyyy using a custom tick formatter"
                }
            ]
        },
        "timestamp": "2025-08-21 19:19:00.000",
        "event": "map_summary_code",
        "source": "backend",
        "id": "S23Ythm3skTJCVmVqXtH"
    },
    {
        "data": {
            "section_data": {
                "editPromptDetailLevel": null,
                "title": "StockChart React Component Summary (with Short Month X-Axis Date Formatting)",
                "selectedStructured": "unstructured",
                "lines": [
                    13,
                    56
                ],
                "oldSummaryData": {
                    "high_unstructured": "The StockChart component is a functional React component that visualizes stock price data using the Recharts library. It first checks that valid data is provided, then extracts the company name and ticker symbol for display. The component processes the input data to create an array of objects containing date and closing price pairs, which are then used to render a responsive line chart. The chart includes axes, a tooltip, a legend, and omits dots on the line for a cleaner look, all styled within a container with a margin. Notably, the X-axis now displays dates formatted as mm/dd/yyyy using a custom tick formatter.",
                    "title": "StockChart React Component Summary (with Custom X-Axis Date Formatting)",
                    "low_structured": "• Defines a React component for displaying stock data\n• Renders a line chart with company and ticker info\n• Formats X-axis dates as mm/dd/yyyy",
                    "medium_unstructured": "The StockChart component receives stock data as a prop and renders a line chart visualizing the closing prices over time. It displays the company's name and ticker symbol above the chart, and uses the Recharts library for rendering. If no data is provided, the component returns nothing. The X-axis now uses a custom formatter to display dates in mm/dd/yyyy format.",
                    "medium_structured": "• Receives stock data as a prop and checks for its presence\n• Extracts company name and ticker for display\n• Processes input data to map dates and closing prices\n• Renders a line chart using Recharts\n  ◦ Includes company/ticker header and chart features like axes, tooltip, and legend\n  ◦ X-axis dates are formatted as mm/dd/yyyy using a custom formatter",
                    "low_unstructured": "This code defines a React component that displays a stock price line chart using provided data, now with the X-axis dates formatted as mm/dd/yyyy.",
                    "high_structured": "• Defines a functional React component named StockChart\n• Validates input data, returning null if missing or empty\n• Extracts company name and ticker symbol from the data prop\n• Processes raw data to create chartData array\n  ◦ Each entry contains a 'date' and corresponding 'price' (from 'close')\n• Defines helper functions to format date strings, including one for mm/dd/yyyy formatting used in rendering\n• Renders a styled container with:\n  ◦ A header displaying company name and ticker\n  ◦ A responsive line chart using Recharts\n    ▪ X-axis for dates, with a custom tick formatter to display mm/dd/yyyy\n    ▪ Y-axis for price (auto domain)\n    ▪ Tooltip and legend for interactivity\n    ▪ Monotone line for price, styled with a specific color and no dots"
                },
                "createdAt": 1755836340000,
                "summaryData": {
                    "high_unstructured": "The StockChart component is a functional React component that visualizes stock price data using the Recharts library. It first checks that valid data is provided, then extracts the company name and ticker symbol for display. The component processes the input data to create an array of objects containing date and closing price pairs, which are then used to render a responsive line chart. The chart includes axes, a tooltip, a legend, and omits dots on the line for a cleaner look, all styled within a container with a margin. Notably, the X-axis now displays dates formatted as short month names (e.g., Jan, Feb) instead of mm/dd/yyyy using a custom tick formatter.",
                    "title": "StockChart React Component Summary (with Short Month X-Axis Date Formatting)",
                    "low_structured": "• Defines a React component for displaying stock data\n• Renders a line chart with company and ticker info\n• Formats X-axis dates as short month names (e.g., Jan, Feb) instead of mm/dd/yyyy",
                    "medium_unstructured": "The StockChart component receives stock data as a prop and renders a line chart visualizing the closing prices over time. It displays the company's name and ticker symbol above the chart, and uses the Recharts library for rendering. If no data is provided, the component returns nothing. The X-axis now uses a custom formatter to display dates as short month names (e.g., Jan, Feb) instead of mm/dd/yyyy.",
                    "medium_structured": "• Receives stock data as a prop and checks for its presence\n• Extracts company name and ticker for display\n• Processes input data to map dates and closing prices\n• Renders a line chart using Recharts\n  ◦ Includes company/ticker header and chart features like axes, tooltip, and legend\n  ◦ X-axis dates are formatted as short month names (e.g., Jan, Feb) instead of mm/dd/yyyy using a custom formatter",
                    "low_unstructured": "This code defines a React component that displays a stock price line chart using provided data, now with the X-axis dates formatted as short month names (e.g., Jan, Feb) instead of mm/dd/yyyy.",
                    "high_structured": "• Defines a functional React component named StockChart\n• Validates input data, returning null if missing or empty\n• Extracts company name and ticker symbol from the data prop\n• Processes raw data to create chartData array\n  ◦ Each entry contains a 'date' and corresponding 'price' (from 'close')\n• Defines helper functions to format date strings, including one for short month names (e.g., Jan, Feb) formatting used in rendering instead of mm/dd/yyyy\n• Renders a styled container with:\n  ◦ A header displaying company name and ticker\n  ◦ A responsive line chart using Recharts\n    ▪ X-axis for dates, with a custom tick formatter to display short month names (e.g., Jan, Feb) instead of mm/dd/yyyy\n    ▪ Y-axis for price (auto domain)\n    ▪ Tooltip and legend for interactivity\n    ▪ Monotone line for price, styled with a specific color and no dots"
                },
                "editPromptStructured": null,
                "selectedDetailLevel": "medium",
                "summaryMappings": {
                    "high_unstructured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                }
                            ],
                            "summaryComponent": "The StockChart component is a functional React component"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 40
                                },
                                {
                                    "code": "<LineChart",
                                    "line": 41
                                }
                            ],
                            "summaryComponent": "visualizes stock price data using the Recharts library"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "if (!data || !data.data || !data.data.length) return null;",
                                    "line": 14
                                }
                            ],
                            "summaryComponent": "It first checks that valid data is provided"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const company = data.name;",
                                    "line": 16
                                },
                                {
                                    "code": "const ticker = data.ticker;",
                                    "line": 17
                                },
                                {
                                    "code": "{company} ({ticker})",
                                    "line": 38
                                }
                            ],
                            "summaryComponent": "then extracts the company name and ticker symbol for display"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const chartData = data.data.map((item) => ({",
                                    "line": 30
                                },
                                {
                                    "code": "date: item.date,",
                                    "line": 31
                                },
                                {
                                    "code": "price: item.close,",
                                    "line": 32
                                }
                            ],
                            "summaryComponent": "The component processes the input data to create an array of objects containing date and closing price pairs"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "data={chartData}",
                                    "line": 42
                                }
                            ],
                            "summaryComponent": "which are then used to render a responsive line chart"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />",
                                    "line": 45
                                },
                                {
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                                    "line": 46
                                },
                                {
                                    "code": "<Tooltip />",
                                    "line": 47
                                },
                                {
                                    "code": "<Legend />",
                                    "line": 48
                                }
                            ],
                            "summaryComponent": "The chart includes axes, a tooltip, a legend"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 49
                                }
                            ],
                            "summaryComponent": "and omits dots on the line for a cleaner look"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<div style={{ marginTop: \"2rem\" }}>",
                                    "line": 36
                                }
                            ],
                            "summaryComponent": "all styled within a container with a margin"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />",
                                    "line": 45
                                },
                                {
                                    "code": "const formatXAxisDate = (dateStr) => {",
                                    "line": 24
                                },
                                {
                                    "code": "return date.toLocaleString('en-US', { month: 'short' });",
                                    "line": 26
                                }
                            ],
                            "summaryComponent": "Notably, the X-axis now displays dates formatted as short month names (e.g., Jan, Feb) instead of mm/dd/yyyy using a custom tick formatter"
                        }
                    ],
                    "low_structured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                }
                            ],
                            "summaryComponent": "Defines a React component for displaying stock data"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<h3>",
                                    "line": 37
                                },
                                {
                                    "code": "{company} ({ticker})",
                                    "line": 38
                                },
                                {
                                    "code": "<LineChart",
                                    "line": 41
                                }
                            ],
                            "summaryComponent": "Renders a line chart with company and ticker info"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const formatXAxisDate = (dateStr) => {",
                                    "line": 24
                                },
                                {
                                    "code": "return date.toLocaleString('en-US', { month: 'short' });",
                                    "line": 26
                                },
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />",
                                    "line": 45
                                }
                            ],
                            "summaryComponent": "Formats X-axis dates as short month names (e.g., Jan, Feb) instead of mm/dd/yyyy"
                        }
                    ],
                    "medium_unstructured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                }
                            ],
                            "summaryComponent": "The StockChart component receives stock data as a prop"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<LineChart",
                                    "line": 41
                                },
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 49
                                }
                            ],
                            "summaryComponent": "renders a line chart visualizing the closing prices over time"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<h3>",
                                    "line": 37
                                },
                                {
                                    "code": "{company} ({ticker})",
                                    "line": 38
                                }
                            ],
                            "summaryComponent": "It displays the company's name and ticker symbol above the chart"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 40
                                },
                                {
                                    "code": "<LineChart",
                                    "line": 41
                                },
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />",
                                    "line": 45
                                },
                                {
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                                    "line": 46
                                },
                                {
                                    "code": "<Tooltip />",
                                    "line": 47
                                },
                                {
                                    "code": "<Legend />",
                                    "line": 48
                                },
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 49
                                }
                            ],
                            "summaryComponent": "and uses the Recharts library for rendering"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "if (!data || !data.data || !data.data.length) return null;",
                                    "line": 14
                                }
                            ],
                            "summaryComponent": "If no data is provided, the component returns nothing"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />",
                                    "line": 45
                                },
                                {
                                    "code": "const formatXAxisDate = (dateStr) => {",
                                    "line": 24
                                },
                                {
                                    "code": "return date.toLocaleString('en-US', { month: 'short' });",
                                    "line": 26
                                }
                            ],
                            "summaryComponent": "The X-axis now uses a custom formatter to display dates as short month names (e.g., Jan, Feb) instead of mm/dd/yyyy."
                        }
                    ],
                    "medium_structured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                },
                                {
                                    "code": "if (!data || !data.data || !data.data.length) return null;",
                                    "line": 14
                                }
                            ],
                            "summaryComponent": "Receives stock data as a prop and checks for its presence"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const company = data.name;",
                                    "line": 16
                                },
                                {
                                    "code": "const ticker = data.ticker;",
                                    "line": 17
                                },
                                {
                                    "code": "{company} ({ticker})",
                                    "line": 38
                                }
                            ],
                            "summaryComponent": "Extracts company name and ticker for display"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const chartData = data.data.map((item) => ({",
                                    "line": 30
                                },
                                {
                                    "code": "date: item.date,",
                                    "line": 31
                                },
                                {
                                    "code": "price: item.close,",
                                    "line": 32
                                }
                            ],
                            "summaryComponent": "Processes input data to map dates and closing prices"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<LineChart",
                                    "line": 41
                                }
                            ],
                            "summaryComponent": "Renders a line chart using Recharts"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<h3>",
                                    "line": 37
                                },
                                {
                                    "code": "{company} ({ticker})",
                                    "line": 38
                                },
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />",
                                    "line": 45
                                },
                                {
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                                    "line": 46
                                },
                                {
                                    "code": "<Tooltip />",
                                    "line": 47
                                },
                                {
                                    "code": "<Legend />",
                                    "line": 48
                                }
                            ],
                            "summaryComponent": "Includes company/ticker header and chart features like axes, tooltip, and legend"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const formatXAxisDate = (dateStr) => {",
                                    "line": 24
                                },
                                {
                                    "code": "return date.toLocaleString('en-US', { month: 'short' });",
                                    "line": 26
                                },
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />",
                                    "line": 45
                                }
                            ],
                            "summaryComponent": "X-axis dates are formatted as short month names (e.g., Jan, Feb) instead of mm/dd/yyyy using a custom formatter"
                        }
                    ],
                    "low_unstructured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                }
                            ],
                            "summaryComponent": "defines a React component"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<LineChart",
                                    "line": 41
                                },
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 49
                                }
                            ],
                            "summaryComponent": "displays a stock price line chart"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const chartData = data.data.map((item) => ({",
                                    "line": 30
                                },
                                {
                                    "code": "data={chartData}",
                                    "line": 42
                                }
                            ],
                            "summaryComponent": "using provided data"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const formatXAxisDate = (dateStr) => {",
                                    "line": 24
                                },
                                {
                                    "code": "return date.toLocaleString('en-US', { month: 'short' });",
                                    "line": 26
                                },
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />",
                                    "line": 45
                                }
                            ],
                            "summaryComponent": "now with the X-axis dates formatted as short month names (e.g., Jan, Feb)"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "return date.toLocaleString('en-US', { month: 'short' });",
                                    "line": 26
                                }
                            ],
                            "summaryComponent": "instead of mm/dd/yyyy"
                        }
                    ],
                    "high_structured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                }
                            ],
                            "summaryComponent": "Defines a functional React component named StockChart"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "if (!data || !data.data || !data.data.length) return null;",
                                    "line": 14
                                }
                            ],
                            "summaryComponent": "Validates input data, returning null if missing or empty"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const company = data.name;",
                                    "line": 16
                                },
                                {
                                    "code": "const ticker = data.ticker;",
                                    "line": 17
                                }
                            ],
                            "summaryComponent": "Extracts company name and ticker symbol from the data prop"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const chartData = data.data.map((item) => ({",
                                    "line": 30
                                }
                            ],
                            "summaryComponent": "Processes raw data to create chartData array"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "date: item.date,",
                                    "line": 31
                                },
                                {
                                    "code": "price: item.close,",
                                    "line": 32
                                }
                            ],
                            "summaryComponent": "Each entry contains a 'date' and corresponding 'price' (from 'close')"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const formatDateString = (date) => {",
                                    "line": 19
                                },
                                {
                                    "code": "const formatXAxisDate = (dateStr) => {",
                                    "line": 24
                                }
                            ],
                            "summaryComponent": "Defines helper functions to format date strings, including one for short month names (e.g., Jan, Feb) formatting used in rendering instead of mm/dd/yyyy"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<div style={{ marginTop: \"2rem\" }}>",
                                    "line": 36
                                }
                            ],
                            "summaryComponent": "Renders a styled container with:"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<h3>",
                                    "line": 37
                                },
                                {
                                    "code": "{company} ({ticker})",
                                    "line": 38
                                }
                            ],
                            "summaryComponent": "A header displaying company name and ticker"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 40
                                },
                                {
                                    "code": "<LineChart",
                                    "line": 41
                                }
                            ],
                            "summaryComponent": "A responsive line chart using Recharts"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />",
                                    "line": 45
                                }
                            ],
                            "summaryComponent": "X-axis for dates, with a custom tick formatter to display short month names (e.g., Jan, Feb) instead of mm/dd/yyyy"
                        }
                    ]
                },
                "metadata": {
                    "offset": 156,
                    "fullPath": "/project/workspace/frontend/src/StockChart.jsx",
                    "originalCode": "const StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };\n\n  // Helper to format date as MMM (e.g., Jan, Feb)\n  const formatXAxisDate = (dateStr) => {\n    const date = new Date(dateStr);\n    return date.toLocaleString('en-US', { month: 'short' });\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;",
                    "filename": "StockChart.jsx",
                    "id": "c1d9bc6d-8795-487c-b836-2dc427f3ace1"
                },
                "editPromptValue": ""
            },
            "section_id": "c1d9bc6d-8795-487c-b836-2dc427f3ace1"
        },
        "timestamp": "2025-08-21 19:19:00.000",
        "event": "create_new_section",
        "source": "frontend",
        "id": "fdPhOd2dXfPIYwADkB6m"
    },
    {
        "data": {},
        "timestamp": "2025-08-21 19:20:07.000",
        "event": "click_summarize_code",
        "source": "frontend",
        "id": "CUklGTvt3qQQLWcEa8I6"
    },
    {
        "data": {
            "summary": {
                "high_unstructured": "This code defines an asynchronous Express route at '/api/stock/:symbol' that retrieves historical stock chart data from Yahoo Finance for the requested symbol, starting from January 1, 2024, with daily intervals. The symbol is converted to uppercase, and the response includes the ticker, company name (if available), and an array of objects each containing the date, close price, and volume for each day. The response is logged to the console before being sent as JSON to the client. If any error occurs during data fetching or processing, it is logged and a 500 error response is returned.",
                "title": "Express Route for Fetching and Returning Stock Data",
                "low_structured": "• Defines a GET endpoint for stock data\n• Fetches and returns stock information for a given symbol",
                "medium_unstructured": "This Express route handles GET requests to '/api/stock/:symbol' by fetching stock data for the specified symbol using the yahoo-finance2 library. It processes and returns the symbol, company name, and daily stock data (date, close, volume) in JSON format. If an error occurs, it logs the error and sends a 500 response.",
                "medium_structured": "• Handles GET requests to '/api/stock/:symbol'\n• Fetches stock chart data from Yahoo Finance for the given symbol\n• Constructs a JSON response with:\n  ◦ Ticker symbol and company name\n  ◦ Array of daily data (date, close, volume)\n• Sends the response or an error message if fetching fails",
                "low_unstructured": "This code defines an Express route that retrieves and returns stock data for a given symbol.",
                "high_structured": "• Defines an asynchronous GET endpoint at '/api/stock/:symbol'\n• Processes the request by:\n  ◦ Extracting and uppercasing the stock symbol from the URL\n  ◦ Fetching chart data from Yahoo Finance with parameters:\n    ◦ period1: '2024-01-01'\n    ◦ interval: '1d'\n  ◦ Extracting the company name from the response metadata, or falling back to the symbol\n• Constructs a response object containing:\n  ◦ 'ticker': the uppercase symbol\n  ◦ 'name': the company name or symbol\n  ◦ 'data': an array of objects with date, close price, and volume for each day\n• Logs the response object to the console\n• Sends the JSON response to the client\n• Handles errors by logging and returning a 500 status with an error message"
            },
            "selected_code": "app.get(\"/api/stock/:symbol\", async (req, res) => {\n  try {\n    const symbol = req.params.symbol.toUpperCase();\n    const data = await yahooFinance.chart(symbol, {\n      period1: \"2024-01-01\",\n      interval: \"1d\",\n    });\n    const quotes = data.quotes;\n\n    const companyName = data.meta?.shortName || symbol;\n\n    const response = {\n      ticker: symbol,\n      name: companyName,\n      data: quotes.map((q) => ({\n        date: q.date,\n        close: q.close,\n        volume: q.volume,\n      })),\n    };\n\n    console.log(response);\n    res.json(response);\n  } catch (err) {\n    console.error(err);\n    res.status(500).send(\"Error fetching stock data\");\n  }\n});"
        },
        "timestamp": "2025-08-21 19:20:13.000",
        "event": "summarize_selected_code",
        "source": "backend",
        "id": "7cDtzCZppJ47g070RKPY"
    },
    {
        "data": {
            "summary": "This code defines an Express route that retrieves and returns stock data for a given symbol.",
            "code": "15: app.get(\"/api/stock/:symbol\", async (req, res) => {\n16:   try {\n17:     const symbol = req.params.symbol.toUpperCase();\n18:     const data = await yahooFinance.chart(symbol, {\n19:       period1: \"2024-01-01\",\n20:       interval: \"1d\",\n21:     });\n22:     const quotes = data.quotes;\n23: \n24:     const companyName = data.meta?.shortName || symbol;\n25: \n26:     const response = {\n27:       ticker: symbol,\n28:       name: companyName,\n29:       data: quotes.map((q) => ({\n30:         date: q.date,\n31:         close: q.close,\n32:         volume: q.volume,\n33:       })),\n34:     };\n35: \n36:     console.log(response);\n37:     res.json(response);\n38:   } catch (err) {\n39:     console.error(err);\n40:     res.status(500).send(\"Error fetching stock data\");\n41:   }\n42: });",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {",
                            "line": 15
                        }
                    ],
                    "summaryComponent": "defines an Express route"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const data = await yahooFinance.chart(symbol, {",
                            "line": 18
                        },
                        {
                            "code": "res.json(response);",
                            "line": 37
                        }
                    ],
                    "summaryComponent": "retrieves and returns stock data"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const symbol = req.params.symbol.toUpperCase();",
                            "line": 17
                        }
                    ],
                    "summaryComponent": "for a given symbol"
                }
            ]
        },
        "timestamp": "2025-08-21 19:20:15.000",
        "event": "map_summary_code",
        "source": "backend",
        "id": "M7PkIFImV6F9Plk2FEkK"
    },
    {
        "data": {
            "summary": "• Defines a GET endpoint for stock data\n• Fetches and returns stock information for a given symbol",
            "code": "15: app.get(\"/api/stock/:symbol\", async (req, res) => {\n16:   try {\n17:     const symbol = req.params.symbol.toUpperCase();\n18:     const data = await yahooFinance.chart(symbol, {\n19:       period1: \"2024-01-01\",\n20:       interval: \"1d\",\n21:     });\n22:     const quotes = data.quotes;\n23: \n24:     const companyName = data.meta?.shortName || symbol;\n25: \n26:     const response = {\n27:       ticker: symbol,\n28:       name: companyName,\n29:       data: quotes.map((q) => ({\n30:         date: q.date,\n31:         close: q.close,\n32:         volume: q.volume,\n33:       })),\n34:     };\n35: \n36:     console.log(response);\n37:     res.json(response);\n38:   } catch (err) {\n39:     console.error(err);\n40:     res.status(500).send(\"Error fetching stock data\");\n41:   }\n42: });",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {",
                            "line": 15
                        }
                    ],
                    "summaryComponent": "Defines a GET endpoint for stock data"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const symbol = req.params.symbol.toUpperCase();",
                            "line": 17
                        },
                        {
                            "code": "const data = await yahooFinance.chart(symbol, {",
                            "line": 18
                        },
                        {
                            "code": "res.json(response);",
                            "line": 37
                        }
                    ],
                    "summaryComponent": "Fetches and returns stock information for a given symbol"
                }
            ]
        },
        "timestamp": "2025-08-21 19:20:16.000",
        "event": "map_summary_code",
        "source": "backend",
        "id": "yZd52OPcL4frfgAjfNaa"
    },
    {
        "data": {
            "summary": "• Handles GET requests to '/api/stock/:symbol'\n• Fetches stock chart data from Yahoo Finance for the given symbol\n• Constructs a JSON response with:\n  ◦ Ticker symbol and company name\n  ◦ Array of daily data (date, close, volume)\n• Sends the response or an error message if fetching fails",
            "code": "15: app.get(\"/api/stock/:symbol\", async (req, res) => {\n16:   try {\n17:     const symbol = req.params.symbol.toUpperCase();\n18:     const data = await yahooFinance.chart(symbol, {\n19:       period1: \"2024-01-01\",\n20:       interval: \"1d\",\n21:     });\n22:     const quotes = data.quotes;\n23: \n24:     const companyName = data.meta?.shortName || symbol;\n25: \n26:     const response = {\n27:       ticker: symbol,\n28:       name: companyName,\n29:       data: quotes.map((q) => ({\n30:         date: q.date,\n31:         close: q.close,\n32:         volume: q.volume,\n33:       })),\n34:     };\n35: \n36:     console.log(response);\n37:     res.json(response);\n38:   } catch (err) {\n39:     console.error(err);\n40:     res.status(500).send(\"Error fetching stock data\");\n41:   }\n42: });",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {",
                            "line": 15
                        }
                    ],
                    "summaryComponent": "Handles GET requests to '/api/stock/:symbol'"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const symbol = req.params.symbol.toUpperCase();",
                            "line": 17
                        },
                        {
                            "code": "const data = await yahooFinance.chart(symbol, {",
                            "line": 18
                        }
                    ],
                    "summaryComponent": "Fetches stock chart data from Yahoo Finance for the given symbol"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const response = {",
                            "line": 26
                        }
                    ],
                    "summaryComponent": "Constructs a JSON response with:"
                },
                {
                    "codeSegments": [
                        {
                            "code": "ticker: symbol,",
                            "line": 27
                        },
                        {
                            "code": "name: companyName,",
                            "line": 28
                        }
                    ],
                    "summaryComponent": "Ticker symbol and company name"
                },
                {
                    "codeSegments": [
                        {
                            "code": "data: quotes.map((q) => ({",
                            "line": 29
                        },
                        {
                            "code": "date: q.date,",
                            "line": 30
                        },
                        {
                            "code": "close: q.close,",
                            "line": 31
                        },
                        {
                            "code": "volume: q.volume,",
                            "line": 32
                        }
                    ],
                    "summaryComponent": "Array of daily data (date, close, volume)"
                },
                {
                    "codeSegments": [
                        {
                            "code": "res.json(response);",
                            "line": 37
                        },
                        {
                            "code": "res.status(500).send(\"Error fetching stock data\");",
                            "line": 40
                        }
                    ],
                    "summaryComponent": "Sends the response or an error message if fetching fails"
                }
            ]
        },
        "timestamp": "2025-08-21 19:20:17.000",
        "event": "map_summary_code",
        "source": "backend",
        "id": "sT9lzbm03yPuFFwNNMRi"
    },
    {
        "data": {
            "summary": "This Express route handles GET requests to '/api/stock/:symbol' by fetching stock data for the specified symbol using the yahoo-finance2 library. It processes and returns the symbol, company name, and daily stock data (date, close, volume) in JSON format. If an error occurs, it logs the error and sends a 500 response.",
            "code": "15: app.get(\"/api/stock/:symbol\", async (req, res) => {\n16:   try {\n17:     const symbol = req.params.symbol.toUpperCase();\n18:     const data = await yahooFinance.chart(symbol, {\n19:       period1: \"2024-01-01\",\n20:       interval: \"1d\",\n21:     });\n22:     const quotes = data.quotes;\n23: \n24:     const companyName = data.meta?.shortName || symbol;\n25: \n26:     const response = {\n27:       ticker: symbol,\n28:       name: companyName,\n29:       data: quotes.map((q) => ({\n30:         date: q.date,\n31:         close: q.close,\n32:         volume: q.volume,\n33:       })),\n34:     };\n35: \n36:     console.log(response);\n37:     res.json(response);\n38:   } catch (err) {\n39:     console.error(err);\n40:     res.status(500).send(\"Error fetching stock data\");\n41:   }\n42: });",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {",
                            "line": 15
                        }
                    ],
                    "summaryComponent": "This Express route handles GET requests to '/api/stock/:symbol'"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const symbol = req.params.symbol.toUpperCase();",
                            "line": 17
                        },
                        {
                            "code": "const data = await yahooFinance.chart(symbol, {",
                            "line": 18
                        }
                    ],
                    "summaryComponent": "by fetching stock data for the specified symbol"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const data = await yahooFinance.chart(symbol, {",
                            "line": 18
                        }
                    ],
                    "summaryComponent": "using the yahoo-finance2 library"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const response = {",
                            "line": 26
                        },
                        {
                            "code": "ticker: symbol,",
                            "line": 27
                        },
                        {
                            "code": "name: companyName,",
                            "line": 28
                        },
                        {
                            "code": "data: quotes.map((q) => ({",
                            "line": 29
                        },
                        {
                            "code": "date: q.date,",
                            "line": 30
                        },
                        {
                            "code": "close: q.close,",
                            "line": 31
                        },
                        {
                            "code": "volume: q.volume,",
                            "line": 32
                        },
                        {
                            "code": "res.json(response);",
                            "line": 37
                        }
                    ],
                    "summaryComponent": "It processes and returns the symbol, company name, and daily stock data (date, close, volume) in JSON format."
                },
                {
                    "codeSegments": [
                        {
                            "code": "catch (err) {",
                            "line": 38
                        },
                        {
                            "code": "console.error(err);",
                            "line": 39
                        },
                        {
                            "code": "res.status(500).send(\"Error fetching stock data\");",
                            "line": 40
                        }
                    ],
                    "summaryComponent": "If an error occurs, it logs the error and sends a 500 response."
                }
            ]
        },
        "timestamp": "2025-08-21 19:20:18.000",
        "event": "map_summary_code",
        "source": "backend",
        "id": "UD0VB227bdvZI9fPItSW"
    },
    {
        "data": {
            "summary": "• Defines an asynchronous GET endpoint at '/api/stock/:symbol'\n• Processes the request by:\n  ◦ Extracting and uppercasing the stock symbol from the URL\n  ◦ Fetching chart data from Yahoo Finance with parameters:\n    ◦ period1: '2024-01-01'\n    ◦ interval: '1d'\n  ◦ Extracting the company name from the response metadata, or falling back to the symbol\n• Constructs a response object containing:\n  ◦ 'ticker': the uppercase symbol\n  ◦ 'name': the company name or symbol\n  ◦ 'data': an array of objects with date, close price, and volume for each day\n• Logs the response object to the console\n• Sends the JSON response to the client\n• Handles errors by logging and returning a 500 status with an error message",
            "code": "15: app.get(\"/api/stock/:symbol\", async (req, res) => {\n16:   try {\n17:     const symbol = req.params.symbol.toUpperCase();\n18:     const data = await yahooFinance.chart(symbol, {\n19:       period1: \"2024-01-01\",\n20:       interval: \"1d\",\n21:     });\n22:     const quotes = data.quotes;\n23: \n24:     const companyName = data.meta?.shortName || symbol;\n25: \n26:     const response = {\n27:       ticker: symbol,\n28:       name: companyName,\n29:       data: quotes.map((q) => ({\n30:         date: q.date,\n31:         close: q.close,\n32:         volume: q.volume,\n33:       })),\n34:     };\n35: \n36:     console.log(response);\n37:     res.json(response);\n38:   } catch (err) {\n39:     console.error(err);\n40:     res.status(500).send(\"Error fetching stock data\");\n41:   }\n42: });",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {",
                            "line": 15
                        }
                    ],
                    "summaryComponent": "Defines an asynchronous GET endpoint at '/api/stock/:symbol'"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const symbol = req.params.symbol.toUpperCase();",
                            "line": 17
                        }
                    ],
                    "summaryComponent": "Extracting and uppercasing the stock symbol from the URL"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const data = await yahooFinance.chart(symbol, {",
                            "line": 18
                        }
                    ],
                    "summaryComponent": "Fetching chart data from Yahoo Finance with parameters:"
                },
                {
                    "codeSegments": [
                        {
                            "code": "period1: \"2024-01-01\",",
                            "line": 19
                        }
                    ],
                    "summaryComponent": "period1: '2024-01-01'"
                },
                {
                    "codeSegments": [
                        {
                            "code": "interval: \"1d\",",
                            "line": 20
                        }
                    ],
                    "summaryComponent": "interval: '1d'"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const companyName = data.meta?.shortName || symbol;",
                            "line": 24
                        }
                    ],
                    "summaryComponent": "Extracting the company name from the response metadata, or falling back to the symbol"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const response = {",
                            "line": 26
                        }
                    ],
                    "summaryComponent": "Constructs a response object containing:"
                },
                {
                    "codeSegments": [
                        {
                            "code": "ticker: symbol,",
                            "line": 27
                        }
                    ],
                    "summaryComponent": "'ticker': the uppercase symbol"
                },
                {
                    "codeSegments": [
                        {
                            "code": "name: companyName,",
                            "line": 28
                        }
                    ],
                    "summaryComponent": "'name': the company name or symbol"
                },
                {
                    "codeSegments": [
                        {
                            "code": "data: quotes.map((q) => ({",
                            "line": 29
                        },
                        {
                            "code": "date: q.date,",
                            "line": 30
                        },
                        {
                            "code": "close: q.close,",
                            "line": 31
                        },
                        {
                            "code": "volume: q.volume,",
                            "line": 32
                        }
                    ],
                    "summaryComponent": "'data': an array of objects with date, close price, and volume for each day"
                },
                {
                    "codeSegments": [
                        {
                            "code": "console.log(response);",
                            "line": 36
                        }
                    ],
                    "summaryComponent": "Logs the response object to the console"
                },
                {
                    "codeSegments": [
                        {
                            "code": "res.json(response);",
                            "line": 37
                        }
                    ],
                    "summaryComponent": "Sends the JSON response to the client"
                },
                {
                    "codeSegments": [
                        {
                            "code": "console.error(err);",
                            "line": 39
                        },
                        {
                            "code": "res.status(500).send(\"Error fetching stock data\");",
                            "line": 40
                        }
                    ],
                    "summaryComponent": "Handles errors by logging and returning a 500 status with an error message"
                }
            ]
        },
        "timestamp": "2025-08-21 19:20:19.000",
        "event": "map_summary_code",
        "source": "backend",
        "id": "rKOjw41jgCpOh0bagCmX"
    },
    {
        "data": {
            "section_data": {
                "editPromptDetailLevel": null,
                "title": "Express Route for Fetching and Returning Stock Data",
                "selectedStructured": "unstructured",
                "lines": [
                    15,
                    42
                ],
                "summaryData": {
                    "high_unstructured": "This code defines an asynchronous Express route at '/api/stock/:symbol' that retrieves historical stock chart data from Yahoo Finance for the requested symbol, starting from January 1, 2024, with daily intervals. The symbol is converted to uppercase, and the response includes the ticker, company name (if available), and an array of objects each containing the date, close price, and volume for each day. The response is logged to the console before being sent as JSON to the client. If any error occurs during data fetching or processing, it is logged and a 500 error response is returned.",
                    "title": "Express Route for Fetching and Returning Stock Data",
                    "low_structured": "• Defines a GET endpoint for stock data\n• Fetches and returns stock information for a given symbol",
                    "medium_unstructured": "This Express route handles GET requests to '/api/stock/:symbol' by fetching stock data for the specified symbol using the yahoo-finance2 library. It processes and returns the symbol, company name, and daily stock data (date, close, volume) in JSON format. If an error occurs, it logs the error and sends a 500 response.",
                    "medium_structured": "• Handles GET requests to '/api/stock/:symbol'\n• Fetches stock chart data from Yahoo Finance for the given symbol\n• Constructs a JSON response with:\n  ◦ Ticker symbol and company name\n  ◦ Array of daily data (date, close, volume)\n• Sends the response or an error message if fetching fails",
                    "low_unstructured": "This code defines an Express route that retrieves and returns stock data for a given symbol.",
                    "high_structured": "• Defines an asynchronous GET endpoint at '/api/stock/:symbol'\n• Processes the request by:\n  ◦ Extracting and uppercasing the stock symbol from the URL\n  ◦ Fetching chart data from Yahoo Finance with parameters:\n    ◦ period1: '2024-01-01'\n    ◦ interval: '1d'\n  ◦ Extracting the company name from the response metadata, or falling back to the symbol\n• Constructs a response object containing:\n  ◦ 'ticker': the uppercase symbol\n  ◦ 'name': the company name or symbol\n  ◦ 'data': an array of objects with date, close price, and volume for each day\n• Logs the response object to the console\n• Sends the JSON response to the client\n• Handles errors by logging and returning a 500 status with an error message"
                },
                "createdAt": 1755836423000,
                "editPromptStructured": null,
                "summaryMappings": {
                    "high_unstructured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {",
                                    "line": 15
                                }
                            ],
                            "summaryComponent": "an asynchronous Express route at '/api/stock/:symbol'"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const data = await yahooFinance.chart(symbol, {",
                                    "line": 18
                                }
                            ],
                            "summaryComponent": "retrieves historical stock chart data from Yahoo Finance for the requested symbol"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "period1: \"2024-01-01\",",
                                    "line": 19
                                }
                            ],
                            "summaryComponent": "starting from January 1, 2024"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "interval: \"1d\",",
                                    "line": 20
                                }
                            ],
                            "summaryComponent": "with daily intervals"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const symbol = req.params.symbol.toUpperCase();",
                                    "line": 17
                                }
                            ],
                            "summaryComponent": "The symbol is converted to uppercase"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const response = {",
                                    "line": 26
                                },
                                {
                                    "code": "ticker: symbol,",
                                    "line": 27
                                },
                                {
                                    "code": "name: companyName,",
                                    "line": 28
                                },
                                {
                                    "code": "data: quotes.map((q) => ({",
                                    "line": 29
                                },
                                {
                                    "code": "date: q.date,",
                                    "line": 30
                                },
                                {
                                    "code": "close: q.close,",
                                    "line": 31
                                },
                                {
                                    "code": "volume: q.volume,",
                                    "line": 32
                                }
                            ],
                            "summaryComponent": "the response includes the ticker, company name (if available), and an array of objects each containing the date, close price, and volume for each day"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "console.log(response);",
                                    "line": 36
                                },
                                {
                                    "code": "res.json(response);",
                                    "line": 37
                                }
                            ],
                            "summaryComponent": "The response is logged to the console before being sent as JSON to the client"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "catch (err) {",
                                    "line": 38
                                },
                                {
                                    "code": "console.error(err);",
                                    "line": 39
                                },
                                {
                                    "code": "res.status(500).send(\"Error fetching stock data\");",
                                    "line": 40
                                }
                            ],
                            "summaryComponent": "If any error occurs during data fetching or processing, it is logged and a 500 error response is returned"
                        }
                    ],
                    "low_structured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {",
                                    "line": 15
                                }
                            ],
                            "summaryComponent": "Defines a GET endpoint for stock data"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const symbol = req.params.symbol.toUpperCase();",
                                    "line": 17
                                },
                                {
                                    "code": "const data = await yahooFinance.chart(symbol, {",
                                    "line": 18
                                },
                                {
                                    "code": "res.json(response);",
                                    "line": 37
                                }
                            ],
                            "summaryComponent": "Fetches and returns stock information for a given symbol"
                        }
                    ],
                    "medium_unstructured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {",
                                    "line": 15
                                }
                            ],
                            "summaryComponent": "This Express route handles GET requests to '/api/stock/:symbol'"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const symbol = req.params.symbol.toUpperCase();",
                                    "line": 17
                                },
                                {
                                    "code": "const data = await yahooFinance.chart(symbol, {",
                                    "line": 18
                                }
                            ],
                            "summaryComponent": "by fetching stock data for the specified symbol"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const data = await yahooFinance.chart(symbol, {",
                                    "line": 18
                                }
                            ],
                            "summaryComponent": "using the yahoo-finance2 library"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const response = {",
                                    "line": 26
                                },
                                {
                                    "code": "ticker: symbol,",
                                    "line": 27
                                },
                                {
                                    "code": "name: companyName,",
                                    "line": 28
                                },
                                {
                                    "code": "data: quotes.map((q) => ({",
                                    "line": 29
                                },
                                {
                                    "code": "date: q.date,",
                                    "line": 30
                                },
                                {
                                    "code": "close: q.close,",
                                    "line": 31
                                },
                                {
                                    "code": "volume: q.volume,",
                                    "line": 32
                                },
                                {
                                    "code": "res.json(response);",
                                    "line": 37
                                }
                            ],
                            "summaryComponent": "It processes and returns the symbol, company name, and daily stock data (date, close, volume) in JSON format."
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "catch (err) {",
                                    "line": 38
                                },
                                {
                                    "code": "console.error(err);",
                                    "line": 39
                                },
                                {
                                    "code": "res.status(500).send(\"Error fetching stock data\");",
                                    "line": 40
                                }
                            ],
                            "summaryComponent": "If an error occurs, it logs the error and sends a 500 response."
                        }
                    ],
                    "medium_structured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {",
                                    "line": 15
                                }
                            ],
                            "summaryComponent": "Handles GET requests to '/api/stock/:symbol'"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const symbol = req.params.symbol.toUpperCase();",
                                    "line": 17
                                },
                                {
                                    "code": "const data = await yahooFinance.chart(symbol, {",
                                    "line": 18
                                }
                            ],
                            "summaryComponent": "Fetches stock chart data from Yahoo Finance for the given symbol"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const response = {",
                                    "line": 26
                                }
                            ],
                            "summaryComponent": "Constructs a JSON response with:"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "ticker: symbol,",
                                    "line": 27
                                },
                                {
                                    "code": "name: companyName,",
                                    "line": 28
                                }
                            ],
                            "summaryComponent": "Ticker symbol and company name"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "data: quotes.map((q) => ({",
                                    "line": 29
                                },
                                {
                                    "code": "date: q.date,",
                                    "line": 30
                                },
                                {
                                    "code": "close: q.close,",
                                    "line": 31
                                },
                                {
                                    "code": "volume: q.volume,",
                                    "line": 32
                                }
                            ],
                            "summaryComponent": "Array of daily data (date, close, volume)"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "res.json(response);",
                                    "line": 37
                                },
                                {
                                    "code": "res.status(500).send(\"Error fetching stock data\");",
                                    "line": 40
                                }
                            ],
                            "summaryComponent": "Sends the response or an error message if fetching fails"
                        }
                    ],
                    "low_unstructured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {",
                                    "line": 15
                                }
                            ],
                            "summaryComponent": "defines an Express route"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const data = await yahooFinance.chart(symbol, {",
                                    "line": 18
                                },
                                {
                                    "code": "res.json(response);",
                                    "line": 37
                                }
                            ],
                            "summaryComponent": "retrieves and returns stock data"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const symbol = req.params.symbol.toUpperCase();",
                                    "line": 17
                                }
                            ],
                            "summaryComponent": "for a given symbol"
                        }
                    ],
                    "high_structured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {",
                                    "line": 15
                                }
                            ],
                            "summaryComponent": "Defines an asynchronous GET endpoint at '/api/stock/:symbol'"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const symbol = req.params.symbol.toUpperCase();",
                                    "line": 17
                                }
                            ],
                            "summaryComponent": "Extracting and uppercasing the stock symbol from the URL"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const data = await yahooFinance.chart(symbol, {",
                                    "line": 18
                                }
                            ],
                            "summaryComponent": "Fetching chart data from Yahoo Finance with parameters:"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "period1: \"2024-01-01\",",
                                    "line": 19
                                }
                            ],
                            "summaryComponent": "period1: '2024-01-01'"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "interval: \"1d\",",
                                    "line": 20
                                }
                            ],
                            "summaryComponent": "interval: '1d'"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const companyName = data.meta?.shortName || symbol;",
                                    "line": 24
                                }
                            ],
                            "summaryComponent": "Extracting the company name from the response metadata, or falling back to the symbol"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const response = {",
                                    "line": 26
                                }
                            ],
                            "summaryComponent": "Constructs a response object containing:"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "ticker: symbol,",
                                    "line": 27
                                }
                            ],
                            "summaryComponent": "'ticker': the uppercase symbol"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "name: companyName,",
                                    "line": 28
                                }
                            ],
                            "summaryComponent": "'name': the company name or symbol"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "data: quotes.map((q) => ({",
                                    "line": 29
                                },
                                {
                                    "code": "date: q.date,",
                                    "line": 30
                                },
                                {
                                    "code": "close: q.close,",
                                    "line": 31
                                },
                                {
                                    "code": "volume: q.volume,",
                                    "line": 32
                                }
                            ],
                            "summaryComponent": "'data': an array of objects with date, close price, and volume for each day"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "console.log(response);",
                                    "line": 36
                                }
                            ],
                            "summaryComponent": "Logs the response object to the console"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "res.json(response);",
                                    "line": 37
                                }
                            ],
                            "summaryComponent": "Sends the JSON response to the client"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "console.error(err);",
                                    "line": 39
                                },
                                {
                                    "code": "res.status(500).send(\"Error fetching stock data\");",
                                    "line": 40
                                }
                            ],
                            "summaryComponent": "Handles errors by logging and returning a 500 status with an error message"
                        }
                    ]
                },
                "selectedDetailLevel": "medium",
                "metadata": {
                    "offset": 304,
                    "fullPath": "/project/workspace/server/index.js",
                    "originalCode": "app.get(\"/api/stock/:symbol\", async (req, res) => {\n  try {\n    const symbol = req.params.symbol.toUpperCase();\n    const data = await yahooFinance.chart(symbol, {\n      period1: \"2024-01-01\",\n      interval: \"1d\",\n    });\n    const quotes = data.quotes;\n\n    const companyName = data.meta?.shortName || symbol;\n\n    const response = {\n      ticker: symbol,\n      name: companyName,\n      data: quotes.map((q) => ({\n        date: q.date,\n        close: q.close,\n        volume: q.volume,\n      })),\n    };\n\n    console.log(response);\n    res.json(response);\n  } catch (err) {\n    console.error(err);\n    res.status(500).send(\"Error fetching stock data\");\n  }\n});",
                    "filename": "index.js",
                    "id": "ce1d389a-5720-441e-83be-eec779062fc3"
                },
                "editPromptValue": ""
            },
            "section_id": "ce1d389a-5720-441e-83be-eec779062fc3"
        },
        "timestamp": "2025-08-21 19:20:23.000",
        "event": "create_new_section",
        "source": "frontend",
        "id": "1zwvsuPVaXuSA1jHxpuh"
    },
    {
        "data": {
            "after_section_id": "ce1d389a-5720-441e-83be-eec779062fc3",
            "before_section_id": "c1d9bc6d-8795-487c-b836-2dc427f3ace1"
        },
        "timestamp": "2025-08-21 19:20:23.000",
        "event": "autotransit_section",
        "source": "frontend",
        "id": "ao0Sfdt9DmZ5bvVTJKal"
    },
    {
        "data": {
            "summary": "This code defines an asynchronous Express route at '/api/stock/:symbol' that retrieves historical stock chart data from Yahoo Finance for the requested symbol, starting from January 1, 2024, with daily intervals. The symbol is converted to uppercase, and the response includes the ticker, company name (if available), and an array of objects each containing the date, close price, and volume for each day. The response is logged to the console before being sent as JSON to the client. If any error occurs during data fetching or processing, it is logged and a 500 error response is returned.",
            "code": "15: app.get(\"/api/stock/:symbol\", async (req, res) => {\n16:   try {\n17:     const symbol = req.params.symbol.toUpperCase();\n18:     const data = await yahooFinance.chart(symbol, {\n19:       period1: \"2024-01-01\",\n20:       interval: \"1d\",\n21:     });\n22:     const quotes = data.quotes;\n23: \n24:     const companyName = data.meta?.shortName || symbol;\n25: \n26:     const response = {\n27:       ticker: symbol,\n28:       name: companyName,\n29:       data: quotes.map((q) => ({\n30:         date: q.date,\n31:         close: q.close,\n32:         volume: q.volume,\n33:       })),\n34:     };\n35: \n36:     console.log(response);\n37:     res.json(response);\n38:   } catch (err) {\n39:     console.error(err);\n40:     res.status(500).send(\"Error fetching stock data\");\n41:   }\n42: });",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {",
                            "line": 15
                        }
                    ],
                    "summaryComponent": "an asynchronous Express route at '/api/stock/:symbol'"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const data = await yahooFinance.chart(symbol, {",
                            "line": 18
                        }
                    ],
                    "summaryComponent": "retrieves historical stock chart data from Yahoo Finance for the requested symbol"
                },
                {
                    "codeSegments": [
                        {
                            "code": "period1: \"2024-01-01\",",
                            "line": 19
                        }
                    ],
                    "summaryComponent": "starting from January 1, 2024"
                },
                {
                    "codeSegments": [
                        {
                            "code": "interval: \"1d\",",
                            "line": 20
                        }
                    ],
                    "summaryComponent": "with daily intervals"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const symbol = req.params.symbol.toUpperCase();",
                            "line": 17
                        }
                    ],
                    "summaryComponent": "The symbol is converted to uppercase"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const response = {",
                            "line": 26
                        },
                        {
                            "code": "ticker: symbol,",
                            "line": 27
                        },
                        {
                            "code": "name: companyName,",
                            "line": 28
                        },
                        {
                            "code": "data: quotes.map((q) => ({",
                            "line": 29
                        },
                        {
                            "code": "date: q.date,",
                            "line": 30
                        },
                        {
                            "code": "close: q.close,",
                            "line": 31
                        },
                        {
                            "code": "volume: q.volume,",
                            "line": 32
                        }
                    ],
                    "summaryComponent": "the response includes the ticker, company name (if available), and an array of objects each containing the date, close price, and volume for each day"
                },
                {
                    "codeSegments": [
                        {
                            "code": "console.log(response);",
                            "line": 36
                        },
                        {
                            "code": "res.json(response);",
                            "line": 37
                        }
                    ],
                    "summaryComponent": "The response is logged to the console before being sent as JSON to the client"
                },
                {
                    "codeSegments": [
                        {
                            "code": "catch (err) {",
                            "line": 38
                        },
                        {
                            "code": "console.error(err);",
                            "line": 39
                        },
                        {
                            "code": "res.status(500).send(\"Error fetching stock data\");",
                            "line": 40
                        }
                    ],
                    "summaryComponent": "If any error occurs during data fetching or processing, it is logged and a 500 error response is returned"
                }
            ]
        },
        "timestamp": "2025-08-21 19:20:23.000",
        "event": "map_summary_code",
        "source": "backend",
        "id": "pccjcg4C3qryJjhFUR5v"
    },
    {
        "data": {
            "before_structured": "unstructured",
            "before_detail_level": "medium",
            "after_structured": "structured",
            "after_detail_level": "medium",
            "section_id": "ce1d389a-5720-441e-83be-eec779062fc3"
        },
        "timestamp": "2025-08-21 19:20:27.000",
        "event": "change_summary_level",
        "source": "frontend",
        "id": "Wo7KN9Y20oOhk1oebrSJ"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "structured",
            "section_id": "ce1d389a-5720-441e-83be-eec779062fc3"
        },
        "timestamp": "2025-08-21 19:20:33.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "LDPu6Z0zx61M3FD3wY5o"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 1,
            "structured_type": "structured",
            "section_id": "ce1d389a-5720-441e-83be-eec779062fc3"
        },
        "timestamp": "2025-08-21 19:20:33.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "PAUqv8wbmhwEbT67YI9W"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "structured",
            "section_id": "ce1d389a-5720-441e-83be-eec779062fc3"
        },
        "timestamp": "2025-08-21 19:20:40.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "2ZA4UFlmMORMIExYf6eV"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 1,
            "structured_type": "structured",
            "section_id": "ce1d389a-5720-441e-83be-eec779062fc3"
        },
        "timestamp": "2025-08-21 19:20:40.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "2zusRrWb2HInk1FaeZpV"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "structured",
            "section_id": "ce1d389a-5720-441e-83be-eec779062fc3"
        },
        "timestamp": "2025-08-21 19:20:40.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "3wdjBUYGLJwvF9bLUFzl"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "structured",
            "section_id": "ce1d389a-5720-441e-83be-eec779062fc3"
        },
        "timestamp": "2025-08-21 19:20:40.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "FAPERdfjPETaaZDMmuK6"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 4,
            "structured_type": "structured",
            "section_id": "ce1d389a-5720-441e-83be-eec779062fc3"
        },
        "timestamp": "2025-08-21 19:20:40.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "eFMpELJ0KjvvKSJ8JdxW"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 0,
            "structured_type": "structured",
            "section_id": "ce1d389a-5720-441e-83be-eec779062fc3"
        },
        "timestamp": "2025-08-21 19:20:40.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "g3B8DzYjJZHA5PbDIbuN"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 2,
            "structured_type": "structured",
            "section_id": "ce1d389a-5720-441e-83be-eec779062fc3"
        },
        "timestamp": "2025-08-21 19:20:40.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "nAw39Mhxo0PlWMl3sg5y"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 3,
            "structured_type": "structured",
            "section_id": "ce1d389a-5720-441e-83be-eec779062fc3"
        },
        "timestamp": "2025-08-21 19:20:40.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "oacPht1l4rnARasEYlp9"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "structured",
            "section_id": "ce1d389a-5720-441e-83be-eec779062fc3"
        },
        "timestamp": "2025-08-21 19:20:40.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "u7Gd35wyKsZwxGAeLjjI"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 5,
            "structured_type": "structured",
            "section_id": "ce1d389a-5720-441e-83be-eec779062fc3"
        },
        "timestamp": "2025-08-21 19:20:40.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "v6wPG8ZOWxapOjqhFUct"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "structured",
            "section_id": "ce1d389a-5720-441e-83be-eec779062fc3"
        },
        "timestamp": "2025-08-21 19:20:40.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "wBiIUZjEj3W3O6EnUj2G"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 1,
            "structured_type": "structured",
            "section_id": "ce1d389a-5720-441e-83be-eec779062fc3"
        },
        "timestamp": "2025-08-21 19:20:42.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "A6PZcehQOkmIrwwusBG1"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "structured",
            "section_id": "ce1d389a-5720-441e-83be-eec779062fc3"
        },
        "timestamp": "2025-08-21 19:20:42.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "RejajPCz6RpibGz62tg0"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 1,
            "structured_type": "structured",
            "section_id": "ce1d389a-5720-441e-83be-eec779062fc3"
        },
        "timestamp": "2025-08-21 19:20:42.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "jUzpDJvT0RmUa8lS6xoA"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "structured",
            "section_id": "ce1d389a-5720-441e-83be-eec779062fc3"
        },
        "timestamp": "2025-08-21 19:20:42.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "ofGENXL0W4OWqvLBPvI3"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 2,
            "structured_type": "structured",
            "section_id": "ce1d389a-5720-441e-83be-eec779062fc3"
        },
        "timestamp": "2025-08-21 19:20:47.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "dkvS675R1uFs7K3THPEC"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "structured",
            "section_id": "ce1d389a-5720-441e-83be-eec779062fc3"
        },
        "timestamp": "2025-08-21 19:20:47.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "gW23uSRZejumy4yFBTkj"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "structured",
            "section_id": "ce1d389a-5720-441e-83be-eec779062fc3"
        },
        "timestamp": "2025-08-21 19:20:50.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "GCxTba9jb1WhviDjaHwF"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 3,
            "structured_type": "structured",
            "section_id": "ce1d389a-5720-441e-83be-eec779062fc3"
        },
        "timestamp": "2025-08-21 19:20:50.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "qmhXnpoFnkgq9Vph5dYO"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 4,
            "structured_type": "structured",
            "section_id": "ce1d389a-5720-441e-83be-eec779062fc3"
        },
        "timestamp": "2025-08-21 19:20:55.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "3HN4eS4TbUXmC9FvRcAS"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "structured",
            "section_id": "ce1d389a-5720-441e-83be-eec779062fc3"
        },
        "timestamp": "2025-08-21 19:20:55.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "LDpXTi0Lo6NTDdaPqv3z"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "structured",
            "section_id": "ce1d389a-5720-441e-83be-eec779062fc3"
        },
        "timestamp": "2025-08-21 19:20:58.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "7cQxa8rl1o2vXMrhmhON"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 5,
            "structured_type": "structured",
            "section_id": "ce1d389a-5720-441e-83be-eec779062fc3"
        },
        "timestamp": "2025-08-21 19:20:58.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "Ge8CyDaKtsuCwQVKwHn1"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "structured",
            "section_id": "ce1d389a-5720-441e-83be-eec779062fc3"
        },
        "timestamp": "2025-08-21 19:21:02.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "BWdkiFaWQf7EvLsq3FbU"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 5,
            "structured_type": "structured",
            "section_id": "ce1d389a-5720-441e-83be-eec779062fc3"
        },
        "timestamp": "2025-08-21 19:21:04.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "X0UT96nUjrra9oZwhsXq"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "structured",
            "section_id": "ce1d389a-5720-441e-83be-eec779062fc3"
        },
        "timestamp": "2025-08-21 19:21:04.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "dxF0aZ0a5m8HSAd3V1qw"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 1,
            "structured_type": "structured",
            "section_id": "ce1d389a-5720-441e-83be-eec779062fc3"
        },
        "timestamp": "2025-08-21 19:21:05.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "524ypsh2FQDQ9NWXmIWb"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 1,
            "structured_type": "structured",
            "section_id": "ce1d389a-5720-441e-83be-eec779062fc3"
        },
        "timestamp": "2025-08-21 19:21:05.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "85J74o3bhHZv3Z5sVleh"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "structured",
            "section_id": "ce1d389a-5720-441e-83be-eec779062fc3"
        },
        "timestamp": "2025-08-21 19:21:05.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "9D9bHKZi4GxJQXbnN9Dp"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "structured",
            "section_id": "ce1d389a-5720-441e-83be-eec779062fc3"
        },
        "timestamp": "2025-08-21 19:21:05.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "NhuDPkUcZnRHdDKZUKYm"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 0,
            "structured_type": "structured",
            "section_id": "ce1d389a-5720-441e-83be-eec779062fc3"
        },
        "timestamp": "2025-08-21 19:21:05.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "oQadjO9ibtNXu8tjKTLT"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "structured",
            "section_id": "ce1d389a-5720-441e-83be-eec779062fc3"
        },
        "timestamp": "2025-08-21 19:21:05.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "zx1cPYR1K6qH90dgNMoB"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "structured",
            "section_id": "ce1d389a-5720-441e-83be-eec779062fc3"
        },
        "timestamp": "2025-08-21 19:21:10.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "FxCixQZQ3K7vF8Xghysx"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured": "structured",
            "summary": "• Handles GET requests to '/api/stock/:symbol'\n• Fetches stock chart data from Yahoo Finance for the given symbol\n• Constructs a JSON response with:\n  ◦ Ticker symbol and company name\n  ◦ Array of daily data (date, close, volume)\n• Sends the response or an error message if fetching fails",
            "section_id": "ce1d389a-5720-441e-83be-eec779062fc3"
        },
        "timestamp": "2025-08-21 19:21:10.000",
        "event": "click_edit_in_prompt",
        "source": "frontend",
        "id": "M0uFAvL4oKbLYny627Kg"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 1,
            "structured_type": "structured",
            "section_id": "ce1d389a-5720-441e-83be-eec779062fc3"
        },
        "timestamp": "2025-08-21 19:21:10.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "h56UorAnlCoSmWau7kr7"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "structured",
            "section_id": "ce1d389a-5720-441e-83be-eec779062fc3"
        },
        "timestamp": "2025-08-21 19:21:10.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "nG7mIEL6BXM9sCETnKR5"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 5,
            "structured_type": "structured",
            "section_id": "ce1d389a-5720-441e-83be-eec779062fc3"
        },
        "timestamp": "2025-08-21 19:21:10.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "ywbliI4amHdebr4f8D33"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured": "structured",
            "original_summary": "• Handles GET requests to '/api/stock/:symbol'\n• Fetches stock chart data from Yahoo Finance for the given symbol\n• Constructs a JSON response with:\n  ◦ Ticker symbol and company name\n  ◦ Array of daily data (date, close, volume)\n• Sends the response or an error message if fetching fails",
            "instruction": "pull price for current day",
            "section_id": "ce1d389a-5720-441e-83be-eec779062fc3"
        },
        "timestamp": "2025-08-21 19:21:40.000",
        "event": "apply_instruction_summary",
        "source": "frontend",
        "id": "rYc7A44Nufx9BgA48cGR"
    },
    {
        "data": {
            "original_summary": "• Handles GET requests to '/api/stock/:symbol'\n• Fetches stock chart data from Yahoo Finance for the given symbol\n• Constructs a JSON response with:\n  ◦ Ticker symbol and company name\n  ◦ Array of daily data (date, close, volume)\n• Sends the response or an error message if fetching fails",
            "original_code": "app.get(\"/api/stock/:symbol\", async (req, res) => {\n  try {\n    const symbol = req.params.symbol.toUpperCase();\n    const data = await yahooFinance.chart(symbol, {\n      period1: \"2024-01-01\",\n      interval: \"1d\",\n    });\n    const quotes = data.quotes;\n\n    const companyName = data.meta?.shortName || symbol;\n\n    const response = {\n      ticker: symbol,\n      name: companyName,\n      data: quotes.map((q) => ({\n        date: q.date,\n        close: q.close,\n        volume: q.volume,\n      })),\n    };\n\n    console.log(response);\n    res.json(response);\n  } catch (err) {\n    console.error(err);\n    res.status(500).send(\"Error fetching stock data\");\n  }\n});",
            "instruction": "pull price for current day",
            "updated_summary": "• Handles GET requests to '/api/stock/:symbol'  \n• Fetches stock chart data from Yahoo Finance for the given symbol  \n• Pulls the price for the current day  \n• Constructs a JSON response with:  \n  ◦ Ticker symbol and company name  \n  ◦ Array of daily data (date, close, volume)  \n• Sends the response or an error message if fetching fails"
        },
        "timestamp": "2025-08-21 19:21:41.000",
        "event": "apply_instruction_summary",
        "source": "backend",
        "id": "QECfarEhO9fBhD6umuv4"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured": "structured",
            "original_summary": "• Handles GET requests to '/api/stock/:symbol'\n• Fetches stock chart data from Yahoo Finance for the given symbol\n• Constructs a JSON response with:\n  ◦ Ticker symbol and company name\n  ◦ Array of daily data (date, close, volume)\n• Sends the response or an error message if fetching fails",
            "edited_summary": "• Handles GET requests to '/api/stock/:symbol'  \n• Fetches stock chart data from Yahoo Finance for the given symbol  \n• Pulls the price for the current day  \n• Constructs a JSON response with:  \n  ◦ Ticker symbol and company name  \n  ◦ Array of daily data (date, close, volume)  \n• Sends the response or an error message if fetching fails",
            "section_id": "ce1d389a-5720-441e-83be-eec779062fc3"
        },
        "timestamp": "2025-08-21 19:21:48.000",
        "event": "commit_modified_summary",
        "source": "frontend",
        "id": "FwAz6EWHtlTBgPOzIflK"
    },
    {
        "data": {
            "detail_level": "medium",
            "original_summary": "• Handles GET requests to '/api/stock/:symbol'\n• Fetches stock chart data from Yahoo Finance for the given symbol\n• Constructs a JSON response with:\n  ◦ Ticker symbol and company name\n  ◦ Array of daily data (date, close, volume)\n• Sends the response or an error message if fetching fails",
            "original_code": "app.get(\"/api/stock/:symbol\", async (req, res) => {\n  try {\n    const symbol = req.params.symbol.toUpperCase();\n    const data = await yahooFinance.chart(symbol, {\n      period1: \"2024-01-01\",\n      interval: \"1d\",\n    });\n    const quotes = data.quotes;\n\n    const companyName = data.meta?.shortName || symbol;\n\n    const response = {\n      ticker: symbol,\n      name: companyName,\n      data: quotes.map((q) => ({\n        date: q.date,\n        close: q.close,\n        volume: q.volume,\n      })),\n    };\n\n    console.log(response);\n    res.json(response);\n  } catch (err) {\n    console.error(err);\n    res.status(500).send(\"Error fetching stock data\");\n  }\n});",
            "updated_code": "app.get(\"/api/stock/:symbol\", async (req, res) => {\n  try {\n    const symbol = req.params.symbol.toUpperCase();\n    const data = await yahooFinance.chart(symbol, {\n      period1: \"2024-01-01\",\n      interval: \"1d\",\n    });\n    const quotes = data.quotes;\n\n    const companyName = data.meta?.shortName || symbol;\n\n    // Pull the price for the current day\n    const today = new Date();\n    const todayStr = today.toISOString().slice(0, 10);\n    const todayQuote = quotes.find((q) => {\n      const quoteDate = new Date(q.date);\n      const quoteDateStr = quoteDate.toISOString().slice(0, 10);\n      return quoteDateStr === todayStr;\n    });\n\n    const response = {\n      ticker: symbol,\n      name: companyName,\n      data: quotes.map((q) => ({\n        date: q.date,\n        close: q.close,\n        volume: q.volume,\n      })),\n      currentDayPrice: todayQuote ? todayQuote.close : null,\n    };\n\n    console.log(response);\n    res.json(response);\n  } catch (err) {\n    console.error(err);\n    res.status(500).send(\"Error fetching stock data\");\n  }\n});",
            "edited_summary": "• Handles GET requests to '/api/stock/:symbol'  \n• Fetches stock chart data from Yahoo Finance for the given symbol  \n• Pulls the price for the current day  \n• Constructs a JSON response with:  \n  ◦ Ticker symbol and company name  \n  ◦ Array of daily data (date, close, volume)  \n• Sends the response or an error message if fetching fails",
            "structured_type": "structured"
        },
        "timestamp": "2025-08-21 19:21:51.000",
        "event": "modify_summary_mediation",
        "source": "backend",
        "id": "QfXgqwSsNvX8s8fPDoy3"
    },
    {
        "data": {
            "old_summary": {
                "high_unstructured": "This code defines an asynchronous Express route at '/api/stock/:symbol' that retrieves historical stock chart data from Yahoo Finance for the requested symbol, starting from January 1, 2024, with daily intervals. The symbol is converted to uppercase, and the response includes the ticker, company name (if available), and an array of objects each containing the date, close price, and volume for each day. The response is logged to the console before being sent as JSON to the client. If any error occurs during data fetching or processing, it is logged and a 500 error response is returned.",
                "title": "Express Route for Fetching and Returning Stock Data",
                "low_structured": "• Defines a GET endpoint for stock data\n• Fetches and returns stock information for a given symbol",
                "medium_unstructured": "This Express route handles GET requests to '/api/stock/:symbol' by fetching stock data for the specified symbol using the yahoo-finance2 library. It processes and returns the symbol, company name, and daily stock data (date, close, volume) in JSON format. If an error occurs, it logs the error and sends a 500 response.",
                "medium_structured": "• Handles GET requests to '/api/stock/:symbol'\n• Fetches stock chart data from Yahoo Finance for the given symbol\n• Constructs a JSON response with:\n  ◦ Ticker symbol and company name\n  ◦ Array of daily data (date, close, volume)\n• Sends the response or an error message if fetching fails",
                "low_unstructured": "This code defines an Express route that retrieves and returns stock data for a given symbol.",
                "high_structured": "• Defines an asynchronous GET endpoint at '/api/stock/:symbol'\n• Processes the request by:\n  ◦ Extracting and uppercasing the stock symbol from the URL\n  ◦ Fetching chart data from Yahoo Finance with parameters:\n    ◦ period1: '2024-01-01'\n    ◦ interval: '1d'\n  ◦ Extracting the company name from the response metadata, or falling back to the symbol\n• Constructs a response object containing:\n  ◦ 'ticker': the uppercase symbol\n  ◦ 'name': the company name or symbol\n  ◦ 'data': an array of objects with date, close price, and volume for each day\n• Logs the response object to the console\n• Sends the JSON response to the client\n• Handles errors by logging and returning a 500 status with an error message"
            },
            "original_code": "app.get(\"/api/stock/:symbol\", async (req, res) => {\n  try {\n    const symbol = req.params.symbol.toUpperCase();\n    const data = await yahooFinance.chart(symbol, {\n      period1: \"2024-01-01\",\n      interval: \"1d\",\n    });\n    const quotes = data.quotes;\n\n    const companyName = data.meta?.shortName || symbol;\n\n    // Pull the price for the current day\n    const today = new Date();\n    const todayStr = today.toISOString().slice(0, 10);\n    const todayQuote = quotes.find((q) => {\n      const quoteDate = new Date(q.date);\n      const quoteDateStr = quoteDate.toISOString().slice(0, 10);\n      return quoteDateStr === todayStr;\n    });\n\n    const response = {\n      ticker: symbol,\n      name: companyName,\n      data: quotes.map((q) => ({\n        date: q.date,\n        close: q.close,\n        volume: q.volume,\n      })),\n      currentDayPrice: todayQuote ? todayQuote.close : null,\n    };\n\n    console.log(response);\n    res.json(response);\n  } catch (err) {\n    console.error(err);\n    res.status(500).send(\"Error fetching stock data\");\n  }\n});",
            "new_code": "app.get(\"/api/stock/:symbol\", async (req, res) => {\n  try {\n    const symbol = req.params.symbol.toUpperCase();\n    const data = await yahooFinance.chart(symbol, {\n      period1: \"2024-01-01\",\n      interval: \"1d\",\n    });\n    const quotes = data.quotes;\n\n    const companyName = data.meta?.shortName || symbol;\n\n    // Pull the price for the current day\n    const today = new Date();\n    const todayStr = today.toISOString().slice(0, 10);\n    const todayQuote = quotes.find((q) => {\n      const quoteDate = new Date(q.date);\n      const quoteDateStr = quoteDate.toISOString().slice(0, 10);\n      return quoteDateStr === todayStr;\n    });\n\n    const response = {\n      ticker: symbol,\n      name: companyName,\n      data: quotes.map((q) => ({\n        date: q.date,\n        close: q.close,\n        volume: q.volume,\n      })),\n      currentDayPrice: todayQuote ? todayQuote.close : null,\n    };\n\n    console.log(response);\n    res.json(response);\n  } catch (err) {\n    console.error(err);\n    res.status(500).send(\"Error fetching stock data\");\n  }\n});",
            "new_summary": {
                "high_unstructured": "This code defines an asynchronous Express route at '/api/stock/:symbol' that retrieves historical stock chart data from Yahoo Finance for the requested symbol, starting from January 1, 2024, with daily intervals. The symbol is converted to uppercase, and the response includes the ticker, company name (if available), an array of objects each containing the date, close price, and volume for each day, and now also provides the current day's closing price as 'currentDayPrice'. The response is logged to the console before being sent as JSON to the client. If any error occurs during data fetching or processing, it is logged and a 500 error response is returned.",
                "title": "Express Route for Fetching and Returning Stock Data with Current Day Price",
                "low_structured": "• Defines a GET endpoint for stock data\n• Fetches and returns stock information for a given symbol\n• Includes the current day's closing price in the response",
                "medium_unstructured": "This Express route handles GET requests to '/api/stock/:symbol' by fetching stock data for the specified symbol using the yahoo-finance2 library. It processes and returns the symbol, company name, daily stock data (date, close, volume), and now also adds the current day's closing price as 'currentDayPrice' in the JSON response. If an error occurs, it logs the error and sends a 500 response.",
                "medium_structured": "• Handles GET requests to '/api/stock/:symbol'\n• Fetches stock chart data from Yahoo Finance for the given symbol\n• Constructs a JSON response with:\n  ◦ Ticker symbol and company name\n  ◦ Array of daily data (date, close, volume)\n  ◦ The current day's closing price as 'currentDayPrice'\n• Sends the response or an error message if fetching fails",
                "low_unstructured": "This code defines an Express route that retrieves and returns stock data for a given symbol, now also including the current day's closing price in the response.",
                "high_structured": "• Defines an asynchronous GET endpoint at '/api/stock/:symbol'\n• Processes the request by:\n  ◦ Extracting and uppercasing the stock symbol from the URL\n  ◦ Fetching chart data from Yahoo Finance with parameters:\n    ◦ period1: '2024-01-01'\n    ◦ interval: '1d'\n  ◦ Extracting the company name from the response metadata, or falling back to the symbol\n  ◦ Determining the current day's closing price and including it as 'currentDayPrice' in the response\n• Constructs a response object containing:\n  ◦ 'ticker': the uppercase symbol\n  ◦ 'name': the company name or symbol\n  ◦ 'data': an array of objects with date, close price, and volume for each day\n  ◦ 'currentDayPrice': the closing price for the current day, or null if not available\n• Logs the response object to the console\n• Sends the JSON response to the client\n• Handles errors by logging and returning a 500 status with an error message"
            }
        },
        "timestamp": "2025-08-21 19:21:59.000",
        "event": "summarize_modified_code",
        "source": "backend",
        "id": "jcDfBUppDWG3u68KyoR9"
    },
    {
        "data": {
            "summary": "This code defines an Express route that retrieves and returns stock data for a given symbol, now also including the current day's closing price in the response.",
            "code": "15: app.get(\"/api/stock/:symbol\", async (req, res) => {\n16:   try {\n17:     const symbol = req.params.symbol.toUpperCase();\n18:     const data = await yahooFinance.chart(symbol, {\n19:       period1: \"2024-01-01\",\n20:       interval: \"1d\",\n21:     });\n22:     const quotes = data.quotes;\n23: \n24:     const companyName = data.meta?.shortName || symbol;\n25: \n26:     // Pull the price for the current day\n27:     const today = new Date();\n28:     const todayStr = today.toISOString().slice(0, 10);\n29:     const todayQuote = quotes.find((q) => {\n30:       const quoteDate = new Date(q.date);\n31:       const quoteDateStr = quoteDate.toISOString().slice(0, 10);\n32:       return quoteDateStr === todayStr;\n33:     });\n34: \n35:     const response = {\n36:       ticker: symbol,\n37:       name: companyName,\n38:       data: quotes.map((q) => ({\n39:         date: q.date,\n40:         close: q.close,\n41:         volume: q.volume,\n42:       })),\n43:       currentDayPrice: todayQuote ? todayQuote.close : null,\n44:     };\n45: \n46:     console.log(response);\n47:     res.json(response);\n48:   } catch (err) {\n49:     console.error(err);\n50:     res.status(500).send(\"Error fetching stock data\");\n51:   }\n52: });",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {",
                            "line": 15
                        }
                    ],
                    "summaryComponent": "defines an Express route"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const data = await yahooFinance.chart(symbol, {",
                            "line": 18
                        },
                        {
                            "code": "res.json(response);",
                            "line": 47
                        }
                    ],
                    "summaryComponent": "retrieves and returns stock data"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const symbol = req.params.symbol.toUpperCase();",
                            "line": 17
                        }
                    ],
                    "summaryComponent": "for a given symbol"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const todayQuote = quotes.find((q) => {",
                            "line": 29
                        },
                        {
                            "code": "currentDayPrice: todayQuote ? todayQuote.close : null,",
                            "line": 43
                        }
                    ],
                    "summaryComponent": "now also including the current day's closing price in the response"
                }
            ]
        },
        "timestamp": "2025-08-21 19:22:03.000",
        "event": "map_summary_code",
        "source": "backend",
        "id": "I4kbrDRd5n2wPdmxBzMl"
    },
    {
        "data": {
            "summary": "• Defines a GET endpoint for stock data\n• Fetches and returns stock information for a given symbol\n• Includes the current day's closing price in the response",
            "code": "15: app.get(\"/api/stock/:symbol\", async (req, res) => {\n16:   try {\n17:     const symbol = req.params.symbol.toUpperCase();\n18:     const data = await yahooFinance.chart(symbol, {\n19:       period1: \"2024-01-01\",\n20:       interval: \"1d\",\n21:     });\n22:     const quotes = data.quotes;\n23: \n24:     const companyName = data.meta?.shortName || symbol;\n25: \n26:     // Pull the price for the current day\n27:     const today = new Date();\n28:     const todayStr = today.toISOString().slice(0, 10);\n29:     const todayQuote = quotes.find((q) => {\n30:       const quoteDate = new Date(q.date);\n31:       const quoteDateStr = quoteDate.toISOString().slice(0, 10);\n32:       return quoteDateStr === todayStr;\n33:     });\n34: \n35:     const response = {\n36:       ticker: symbol,\n37:       name: companyName,\n38:       data: quotes.map((q) => ({\n39:         date: q.date,\n40:         close: q.close,\n41:         volume: q.volume,\n42:       })),\n43:       currentDayPrice: todayQuote ? todayQuote.close : null,\n44:     };\n45: \n46:     console.log(response);\n47:     res.json(response);\n48:   } catch (err) {\n49:     console.error(err);\n50:     res.status(500).send(\"Error fetching stock data\");\n51:   }\n52: });",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {",
                            "line": 15
                        }
                    ],
                    "summaryComponent": "Defines a GET endpoint for stock data"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const symbol = req.params.symbol.toUpperCase();",
                            "line": 17
                        },
                        {
                            "code": "const data = await yahooFinance.chart(symbol, {",
                            "line": 18
                        },
                        {
                            "code": "res.json(response);",
                            "line": 47
                        }
                    ],
                    "summaryComponent": "Fetches and returns stock information for a given symbol"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const today = new Date();",
                            "line": 27
                        },
                        {
                            "code": "const todayStr = today.toISOString().slice(0, 10);",
                            "line": 28
                        },
                        {
                            "code": "const todayQuote = quotes.find((q) => {",
                            "line": 29
                        },
                        {
                            "code": "currentDayPrice: todayQuote ? todayQuote.close : null,",
                            "line": 43
                        }
                    ],
                    "summaryComponent": "Includes the current day's closing price in the response"
                }
            ]
        },
        "timestamp": "2025-08-21 19:22:04.000",
        "event": "map_summary_code",
        "source": "backend",
        "id": "fTKYX09lYXQwsgCaJj9B"
    },
    {
        "data": {
            "summary": "• Handles GET requests to '/api/stock/:symbol'\n• Fetches stock chart data from Yahoo Finance for the given symbol\n• Constructs a JSON response with:\n  ◦ Ticker symbol and company name\n  ◦ Array of daily data (date, close, volume)\n  ◦ The current day's closing price as 'currentDayPrice'\n• Sends the response or an error message if fetching fails",
            "code": "15: app.get(\"/api/stock/:symbol\", async (req, res) => {\n16:   try {\n17:     const symbol = req.params.symbol.toUpperCase();\n18:     const data = await yahooFinance.chart(symbol, {\n19:       period1: \"2024-01-01\",\n20:       interval: \"1d\",\n21:     });\n22:     const quotes = data.quotes;\n23: \n24:     const companyName = data.meta?.shortName || symbol;\n25: \n26:     // Pull the price for the current day\n27:     const today = new Date();\n28:     const todayStr = today.toISOString().slice(0, 10);\n29:     const todayQuote = quotes.find((q) => {\n30:       const quoteDate = new Date(q.date);\n31:       const quoteDateStr = quoteDate.toISOString().slice(0, 10);\n32:       return quoteDateStr === todayStr;\n33:     });\n34: \n35:     const response = {\n36:       ticker: symbol,\n37:       name: companyName,\n38:       data: quotes.map((q) => ({\n39:         date: q.date,\n40:         close: q.close,\n41:         volume: q.volume,\n42:       })),\n43:       currentDayPrice: todayQuote ? todayQuote.close : null,\n44:     };\n45: \n46:     console.log(response);\n47:     res.json(response);\n48:   } catch (err) {\n49:     console.error(err);\n50:     res.status(500).send(\"Error fetching stock data\");\n51:   }\n52: });",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {",
                            "line": 15
                        }
                    ],
                    "summaryComponent": "Handles GET requests to '/api/stock/:symbol'"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const symbol = req.params.symbol.toUpperCase();",
                            "line": 17
                        },
                        {
                            "code": "const data = await yahooFinance.chart(symbol, {",
                            "line": 18
                        }
                    ],
                    "summaryComponent": "Fetches stock chart data from Yahoo Finance for the given symbol"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const response = {",
                            "line": 35
                        }
                    ],
                    "summaryComponent": "Constructs a JSON response with:"
                },
                {
                    "codeSegments": [
                        {
                            "code": "ticker: symbol,",
                            "line": 36
                        },
                        {
                            "code": "name: companyName,",
                            "line": 37
                        }
                    ],
                    "summaryComponent": "Ticker symbol and company name"
                },
                {
                    "codeSegments": [
                        {
                            "code": "data: quotes.map((q) => ({",
                            "line": 38
                        },
                        {
                            "code": "date: q.date,",
                            "line": 39
                        },
                        {
                            "code": "close: q.close,",
                            "line": 40
                        },
                        {
                            "code": "volume: q.volume,",
                            "line": 41
                        }
                    ],
                    "summaryComponent": "Array of daily data (date, close, volume)"
                },
                {
                    "codeSegments": [
                        {
                            "code": "currentDayPrice: todayQuote ? todayQuote.close : null,",
                            "line": 43
                        }
                    ],
                    "summaryComponent": "The current day's closing price as 'currentDayPrice'"
                },
                {
                    "codeSegments": [
                        {
                            "code": "res.json(response);",
                            "line": 47
                        },
                        {
                            "code": "res.status(500).send(\"Error fetching stock data\");",
                            "line": 50
                        }
                    ],
                    "summaryComponent": "Sends the response or an error message if fetching fails"
                }
            ]
        },
        "timestamp": "2025-08-21 19:22:05.000",
        "event": "map_summary_code",
        "source": "backend",
        "id": "fwxfm8upy3mZWb0zgbj9"
    },
    {
        "data": {
            "summary": "This code defines an asynchronous Express route at '/api/stock/:symbol' that retrieves historical stock chart data from Yahoo Finance for the requested symbol, starting from January 1, 2024, with daily intervals. The symbol is converted to uppercase, and the response includes the ticker, company name (if available), an array of objects each containing the date, close price, and volume for each day, and now also provides the current day's closing price as 'currentDayPrice'. The response is logged to the console before being sent as JSON to the client. If any error occurs during data fetching or processing, it is logged and a 500 error response is returned.",
            "code": "15: app.get(\"/api/stock/:symbol\", async (req, res) => {\n16:   try {\n17:     const symbol = req.params.symbol.toUpperCase();\n18:     const data = await yahooFinance.chart(symbol, {\n19:       period1: \"2024-01-01\",\n20:       interval: \"1d\",\n21:     });\n22:     const quotes = data.quotes;\n23: \n24:     const companyName = data.meta?.shortName || symbol;\n25: \n26:     // Pull the price for the current day\n27:     const today = new Date();\n28:     const todayStr = today.toISOString().slice(0, 10);\n29:     const todayQuote = quotes.find((q) => {\n30:       const quoteDate = new Date(q.date);\n31:       const quoteDateStr = quoteDate.toISOString().slice(0, 10);\n32:       return quoteDateStr === todayStr;\n33:     });\n34: \n35:     const response = {\n36:       ticker: symbol,\n37:       name: companyName,\n38:       data: quotes.map((q) => ({\n39:         date: q.date,\n40:         close: q.close,\n41:         volume: q.volume,\n42:       })),\n43:       currentDayPrice: todayQuote ? todayQuote.close : null,\n44:     };\n45: \n46:     console.log(response);\n47:     res.json(response);\n48:   } catch (err) {\n49:     console.error(err);\n50:     res.status(500).send(\"Error fetching stock data\");\n51:   }\n52: });",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {",
                            "line": 15
                        }
                    ],
                    "summaryComponent": "an asynchronous Express route at '/api/stock/:symbol'"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const symbol = req.params.symbol.toUpperCase();",
                            "line": 17
                        },
                        {
                            "code": "const data = await yahooFinance.chart(symbol, {",
                            "line": 18
                        }
                    ],
                    "summaryComponent": "retrieves historical stock chart data from Yahoo Finance for the requested symbol"
                },
                {
                    "codeSegments": [
                        {
                            "code": "period1: \"2024-01-01\",",
                            "line": 19
                        }
                    ],
                    "summaryComponent": "starting from January 1, 2024"
                },
                {
                    "codeSegments": [
                        {
                            "code": "interval: \"1d\",",
                            "line": 20
                        }
                    ],
                    "summaryComponent": "with daily intervals"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const symbol = req.params.symbol.toUpperCase();",
                            "line": 17
                        }
                    ],
                    "summaryComponent": "The symbol is converted to uppercase"
                },
                {
                    "codeSegments": [
                        {
                            "code": "ticker: symbol,",
                            "line": 36
                        }
                    ],
                    "summaryComponent": "the response includes the ticker"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const companyName = data.meta?.shortName || symbol;",
                            "line": 24
                        },
                        {
                            "code": "name: companyName,",
                            "line": 37
                        }
                    ],
                    "summaryComponent": "company name (if available)"
                },
                {
                    "codeSegments": [
                        {
                            "code": "data: quotes.map((q) => ({",
                            "line": 38
                        },
                        {
                            "code": "date: q.date,",
                            "line": 39
                        },
                        {
                            "code": "close: q.close,",
                            "line": 40
                        },
                        {
                            "code": "volume: q.volume,",
                            "line": 41
                        }
                    ],
                    "summaryComponent": "an array of objects each containing the date, close price, and volume for each day"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const today = new Date();",
                            "line": 27
                        },
                        {
                            "code": "const todayStr = today.toISOString().slice(0, 10);",
                            "line": 28
                        },
                        {
                            "code": "const todayQuote = quotes.find((q) => {",
                            "line": 29
                        },
                        {
                            "code": "currentDayPrice: todayQuote ? todayQuote.close : null,",
                            "line": 43
                        }
                    ],
                    "summaryComponent": "provides the current day's closing price as 'currentDayPrice'"
                },
                {
                    "codeSegments": [
                        {
                            "code": "console.log(response);",
                            "line": 46
                        },
                        {
                            "code": "res.json(response);",
                            "line": 47
                        }
                    ],
                    "summaryComponent": "The response is logged to the console before being sent as JSON to the client"
                },
                {
                    "codeSegments": [
                        {
                            "code": "} catch (err) {",
                            "line": 48
                        },
                        {
                            "code": "console.error(err);",
                            "line": 49
                        },
                        {
                            "code": "res.status(500).send(\"Error fetching stock data\");",
                            "line": 50
                        }
                    ],
                    "summaryComponent": "If any error occurs during data fetching or processing, it is logged and a 500 error response is returned"
                }
            ]
        },
        "timestamp": "2025-08-21 19:22:05.000",
        "event": "map_summary_code",
        "source": "backend",
        "id": "nYONEkvYIXQYKECTsl04"
    },
    {
        "data": {
            "summary": "This Express route handles GET requests to '/api/stock/:symbol' by fetching stock data for the specified symbol using the yahoo-finance2 library. It processes and returns the symbol, company name, daily stock data (date, close, volume), and now also adds the current day's closing price as 'currentDayPrice' in the JSON response. If an error occurs, it logs the error and sends a 500 response.",
            "code": "15: app.get(\"/api/stock/:symbol\", async (req, res) => {\n16:   try {\n17:     const symbol = req.params.symbol.toUpperCase();\n18:     const data = await yahooFinance.chart(symbol, {\n19:       period1: \"2024-01-01\",\n20:       interval: \"1d\",\n21:     });\n22:     const quotes = data.quotes;\n23: \n24:     const companyName = data.meta?.shortName || symbol;\n25: \n26:     // Pull the price for the current day\n27:     const today = new Date();\n28:     const todayStr = today.toISOString().slice(0, 10);\n29:     const todayQuote = quotes.find((q) => {\n30:       const quoteDate = new Date(q.date);\n31:       const quoteDateStr = quoteDate.toISOString().slice(0, 10);\n32:       return quoteDateStr === todayStr;\n33:     });\n34: \n35:     const response = {\n36:       ticker: symbol,\n37:       name: companyName,\n38:       data: quotes.map((q) => ({\n39:         date: q.date,\n40:         close: q.close,\n41:         volume: q.volume,\n42:       })),\n43:       currentDayPrice: todayQuote ? todayQuote.close : null,\n44:     };\n45: \n46:     console.log(response);\n47:     res.json(response);\n48:   } catch (err) {\n49:     console.error(err);\n50:     res.status(500).send(\"Error fetching stock data\");\n51:   }\n52: });",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {",
                            "line": 15
                        }
                    ],
                    "summaryComponent": "This Express route handles GET requests to '/api/stock/:symbol'"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const symbol = req.params.symbol.toUpperCase();",
                            "line": 17
                        },
                        {
                            "code": "const data = await yahooFinance.chart(symbol, {",
                            "line": 18
                        }
                    ],
                    "summaryComponent": "by fetching stock data for the specified symbol using the yahoo-finance2 library"
                },
                {
                    "codeSegments": [
                        {
                            "code": "ticker: symbol,",
                            "line": 36
                        }
                    ],
                    "summaryComponent": "It processes and returns the symbol"
                },
                {
                    "codeSegments": [
                        {
                            "code": "name: companyName,",
                            "line": 37
                        }
                    ],
                    "summaryComponent": "company name"
                },
                {
                    "codeSegments": [
                        {
                            "code": "data: quotes.map((q) => ({",
                            "line": 38
                        },
                        {
                            "code": "date: q.date,",
                            "line": 39
                        },
                        {
                            "code": "close: q.close,",
                            "line": 40
                        },
                        {
                            "code": "volume: q.volume,",
                            "line": 41
                        }
                    ],
                    "summaryComponent": "daily stock data (date, close, volume)"
                },
                {
                    "codeSegments": [
                        {
                            "code": "currentDayPrice: todayQuote ? todayQuote.close : null,",
                            "line": 43
                        }
                    ],
                    "summaryComponent": "and now also adds the current day's closing price as 'currentDayPrice' in the JSON response"
                },
                {
                    "codeSegments": [
                        {
                            "code": "} catch (err) {",
                            "line": 48
                        }
                    ],
                    "summaryComponent": "If an error occurs"
                },
                {
                    "codeSegments": [
                        {
                            "code": "console.error(err);",
                            "line": 49
                        }
                    ],
                    "summaryComponent": "it logs the error"
                },
                {
                    "codeSegments": [
                        {
                            "code": "res.status(500).send(\"Error fetching stock data\");",
                            "line": 50
                        }
                    ],
                    "summaryComponent": "and sends a 500 response"
                }
            ]
        },
        "timestamp": "2025-08-21 19:22:06.000",
        "event": "map_summary_code",
        "source": "backend",
        "id": "OJaNMqtWKlGOz9lV5zEZ"
    },
    {
        "data": {
            "after_section_id": "72de2d24-65b7-4073-a25c-a573a8343905",
            "before_section_id": "ce1d389a-5720-441e-83be-eec779062fc3"
        },
        "timestamp": "2025-08-21 19:22:07.000",
        "event": "autotransit_section",
        "source": "frontend",
        "id": "Ey9Sl6eiLEYawCeJmLOE"
    },
    {
        "data": {
            "section_data": {
                "editPromptDetailLevel": null,
                "title": "Express Route for Fetching and Returning Stock Data with Current Day Price",
                "selectedStructured": "unstructured",
                "lines": [
                    15,
                    52
                ],
                "oldSummaryData": {
                    "high_unstructured": "This code defines an asynchronous Express route at '/api/stock/:symbol' that retrieves historical stock chart data from Yahoo Finance for the requested symbol, starting from January 1, 2024, with daily intervals. The symbol is converted to uppercase, and the response includes the ticker, company name (if available), and an array of objects each containing the date, close price, and volume for each day. The response is logged to the console before being sent as JSON to the client. If any error occurs during data fetching or processing, it is logged and a 500 error response is returned.",
                    "title": "Express Route for Fetching and Returning Stock Data",
                    "low_structured": "• Defines a GET endpoint for stock data\n• Fetches and returns stock information for a given symbol",
                    "medium_unstructured": "This Express route handles GET requests to '/api/stock/:symbol' by fetching stock data for the specified symbol using the yahoo-finance2 library. It processes and returns the symbol, company name, and daily stock data (date, close, volume) in JSON format. If an error occurs, it logs the error and sends a 500 response.",
                    "medium_structured": "• Handles GET requests to '/api/stock/:symbol'\n• Fetches stock chart data from Yahoo Finance for the given symbol\n• Constructs a JSON response with:\n  ◦ Ticker symbol and company name\n  ◦ Array of daily data (date, close, volume)\n• Sends the response or an error message if fetching fails",
                    "low_unstructured": "This code defines an Express route that retrieves and returns stock data for a given symbol.",
                    "high_structured": "• Defines an asynchronous GET endpoint at '/api/stock/:symbol'\n• Processes the request by:\n  ◦ Extracting and uppercasing the stock symbol from the URL\n  ◦ Fetching chart data from Yahoo Finance with parameters:\n    ◦ period1: '2024-01-01'\n    ◦ interval: '1d'\n  ◦ Extracting the company name from the response metadata, or falling back to the symbol\n• Constructs a response object containing:\n  ◦ 'ticker': the uppercase symbol\n  ◦ 'name': the company name or symbol\n  ◦ 'data': an array of objects with date, close price, and volume for each day\n• Logs the response object to the console\n• Sends the JSON response to the client\n• Handles errors by logging and returning a 500 status with an error message"
                },
                "createdAt": 1755836527000,
                "summaryData": {
                    "high_unstructured": "This code defines an asynchronous Express route at '/api/stock/:symbol' that retrieves historical stock chart data from Yahoo Finance for the requested symbol, starting from January 1, 2024, with daily intervals. The symbol is converted to uppercase, and the response includes the ticker, company name (if available), an array of objects each containing the date, close price, and volume for each day, and now also provides the current day's closing price as 'currentDayPrice'. The response is logged to the console before being sent as JSON to the client. If any error occurs during data fetching or processing, it is logged and a 500 error response is returned.",
                    "title": "Express Route for Fetching and Returning Stock Data with Current Day Price",
                    "low_structured": "• Defines a GET endpoint for stock data\n• Fetches and returns stock information for a given symbol\n• Includes the current day's closing price in the response",
                    "medium_unstructured": "This Express route handles GET requests to '/api/stock/:symbol' by fetching stock data for the specified symbol using the yahoo-finance2 library. It processes and returns the symbol, company name, daily stock data (date, close, volume), and now also adds the current day's closing price as 'currentDayPrice' in the JSON response. If an error occurs, it logs the error and sends a 500 response.",
                    "medium_structured": "• Handles GET requests to '/api/stock/:symbol'\n• Fetches stock chart data from Yahoo Finance for the given symbol\n• Constructs a JSON response with:\n  ◦ Ticker symbol and company name\n  ◦ Array of daily data (date, close, volume)\n  ◦ The current day's closing price as 'currentDayPrice'\n• Sends the response or an error message if fetching fails",
                    "low_unstructured": "This code defines an Express route that retrieves and returns stock data for a given symbol, now also including the current day's closing price in the response.",
                    "high_structured": "• Defines an asynchronous GET endpoint at '/api/stock/:symbol'\n• Processes the request by:\n  ◦ Extracting and uppercasing the stock symbol from the URL\n  ◦ Fetching chart data from Yahoo Finance with parameters:\n    ◦ period1: '2024-01-01'\n    ◦ interval: '1d'\n  ◦ Extracting the company name from the response metadata, or falling back to the symbol\n  ◦ Determining the current day's closing price and including it as 'currentDayPrice' in the response\n• Constructs a response object containing:\n  ◦ 'ticker': the uppercase symbol\n  ◦ 'name': the company name or symbol\n  ◦ 'data': an array of objects with date, close price, and volume for each day\n  ◦ 'currentDayPrice': the closing price for the current day, or null if not available\n• Logs the response object to the console\n• Sends the JSON response to the client\n• Handles errors by logging and returning a 500 status with an error message"
                },
                "editPromptStructured": null,
                "selectedDetailLevel": "medium",
                "summaryMappings": {
                    "high_unstructured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {",
                                    "line": 15
                                }
                            ],
                            "summaryComponent": "an asynchronous Express route at '/api/stock/:symbol'"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const symbol = req.params.symbol.toUpperCase();",
                                    "line": 17
                                },
                                {
                                    "code": "const data = await yahooFinance.chart(symbol, {",
                                    "line": 18
                                }
                            ],
                            "summaryComponent": "retrieves historical stock chart data from Yahoo Finance for the requested symbol"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "period1: \"2024-01-01\",",
                                    "line": 19
                                }
                            ],
                            "summaryComponent": "starting from January 1, 2024"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "interval: \"1d\",",
                                    "line": 20
                                }
                            ],
                            "summaryComponent": "with daily intervals"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const symbol = req.params.symbol.toUpperCase();",
                                    "line": 17
                                }
                            ],
                            "summaryComponent": "The symbol is converted to uppercase"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "ticker: symbol,",
                                    "line": 36
                                }
                            ],
                            "summaryComponent": "the response includes the ticker"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const companyName = data.meta?.shortName || symbol;",
                                    "line": 24
                                },
                                {
                                    "code": "name: companyName,",
                                    "line": 37
                                }
                            ],
                            "summaryComponent": "company name (if available)"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "data: quotes.map((q) => ({",
                                    "line": 38
                                },
                                {
                                    "code": "date: q.date,",
                                    "line": 39
                                },
                                {
                                    "code": "close: q.close,",
                                    "line": 40
                                },
                                {
                                    "code": "volume: q.volume,",
                                    "line": 41
                                }
                            ],
                            "summaryComponent": "an array of objects each containing the date, close price, and volume for each day"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const today = new Date();",
                                    "line": 27
                                },
                                {
                                    "code": "const todayStr = today.toISOString().slice(0, 10);",
                                    "line": 28
                                },
                                {
                                    "code": "const todayQuote = quotes.find((q) => {",
                                    "line": 29
                                },
                                {
                                    "code": "currentDayPrice: todayQuote ? todayQuote.close : null,",
                                    "line": 43
                                }
                            ],
                            "summaryComponent": "provides the current day's closing price as 'currentDayPrice'"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "console.log(response);",
                                    "line": 46
                                },
                                {
                                    "code": "res.json(response);",
                                    "line": 47
                                }
                            ],
                            "summaryComponent": "The response is logged to the console before being sent as JSON to the client"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "} catch (err) {",
                                    "line": 48
                                },
                                {
                                    "code": "console.error(err);",
                                    "line": 49
                                },
                                {
                                    "code": "res.status(500).send(\"Error fetching stock data\");",
                                    "line": 50
                                }
                            ],
                            "summaryComponent": "If any error occurs during data fetching or processing, it is logged and a 500 error response is returned"
                        }
                    ],
                    "low_structured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {",
                                    "line": 15
                                }
                            ],
                            "summaryComponent": "Defines a GET endpoint for stock data"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const symbol = req.params.symbol.toUpperCase();",
                                    "line": 17
                                },
                                {
                                    "code": "const data = await yahooFinance.chart(symbol, {",
                                    "line": 18
                                },
                                {
                                    "code": "res.json(response);",
                                    "line": 47
                                }
                            ],
                            "summaryComponent": "Fetches and returns stock information for a given symbol"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const today = new Date();",
                                    "line": 27
                                },
                                {
                                    "code": "const todayStr = today.toISOString().slice(0, 10);",
                                    "line": 28
                                },
                                {
                                    "code": "const todayQuote = quotes.find((q) => {",
                                    "line": 29
                                },
                                {
                                    "code": "currentDayPrice: todayQuote ? todayQuote.close : null,",
                                    "line": 43
                                }
                            ],
                            "summaryComponent": "Includes the current day's closing price in the response"
                        }
                    ],
                    "medium_unstructured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {",
                                    "line": 15
                                }
                            ],
                            "summaryComponent": "This Express route handles GET requests to '/api/stock/:symbol'"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const symbol = req.params.symbol.toUpperCase();",
                                    "line": 17
                                },
                                {
                                    "code": "const data = await yahooFinance.chart(symbol, {",
                                    "line": 18
                                }
                            ],
                            "summaryComponent": "by fetching stock data for the specified symbol using the yahoo-finance2 library"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "ticker: symbol,",
                                    "line": 36
                                }
                            ],
                            "summaryComponent": "It processes and returns the symbol"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "name: companyName,",
                                    "line": 37
                                }
                            ],
                            "summaryComponent": "company name"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "data: quotes.map((q) => ({",
                                    "line": 38
                                },
                                {
                                    "code": "date: q.date,",
                                    "line": 39
                                },
                                {
                                    "code": "close: q.close,",
                                    "line": 40
                                },
                                {
                                    "code": "volume: q.volume,",
                                    "line": 41
                                }
                            ],
                            "summaryComponent": "daily stock data (date, close, volume)"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "currentDayPrice: todayQuote ? todayQuote.close : null,",
                                    "line": 43
                                }
                            ],
                            "summaryComponent": "and now also adds the current day's closing price as 'currentDayPrice' in the JSON response"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "} catch (err) {",
                                    "line": 48
                                }
                            ],
                            "summaryComponent": "If an error occurs"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "console.error(err);",
                                    "line": 49
                                }
                            ],
                            "summaryComponent": "it logs the error"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "res.status(500).send(\"Error fetching stock data\");",
                                    "line": 50
                                }
                            ],
                            "summaryComponent": "and sends a 500 response"
                        }
                    ],
                    "medium_structured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {",
                                    "line": 15
                                }
                            ],
                            "summaryComponent": "Handles GET requests to '/api/stock/:symbol'"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const symbol = req.params.symbol.toUpperCase();",
                                    "line": 17
                                },
                                {
                                    "code": "const data = await yahooFinance.chart(symbol, {",
                                    "line": 18
                                }
                            ],
                            "summaryComponent": "Fetches stock chart data from Yahoo Finance for the given symbol"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const response = {",
                                    "line": 35
                                }
                            ],
                            "summaryComponent": "Constructs a JSON response with:"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "ticker: symbol,",
                                    "line": 36
                                },
                                {
                                    "code": "name: companyName,",
                                    "line": 37
                                }
                            ],
                            "summaryComponent": "Ticker symbol and company name"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "data: quotes.map((q) => ({",
                                    "line": 38
                                },
                                {
                                    "code": "date: q.date,",
                                    "line": 39
                                },
                                {
                                    "code": "close: q.close,",
                                    "line": 40
                                },
                                {
                                    "code": "volume: q.volume,",
                                    "line": 41
                                }
                            ],
                            "summaryComponent": "Array of daily data (date, close, volume)"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "currentDayPrice: todayQuote ? todayQuote.close : null,",
                                    "line": 43
                                }
                            ],
                            "summaryComponent": "The current day's closing price as 'currentDayPrice'"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "res.json(response);",
                                    "line": 47
                                },
                                {
                                    "code": "res.status(500).send(\"Error fetching stock data\");",
                                    "line": 50
                                }
                            ],
                            "summaryComponent": "Sends the response or an error message if fetching fails"
                        }
                    ],
                    "low_unstructured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {",
                                    "line": 15
                                }
                            ],
                            "summaryComponent": "defines an Express route"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const data = await yahooFinance.chart(symbol, {",
                                    "line": 18
                                },
                                {
                                    "code": "res.json(response);",
                                    "line": 47
                                }
                            ],
                            "summaryComponent": "retrieves and returns stock data"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const symbol = req.params.symbol.toUpperCase();",
                                    "line": 17
                                }
                            ],
                            "summaryComponent": "for a given symbol"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const todayQuote = quotes.find((q) => {",
                                    "line": 29
                                },
                                {
                                    "code": "currentDayPrice: todayQuote ? todayQuote.close : null,",
                                    "line": 43
                                }
                            ],
                            "summaryComponent": "now also including the current day's closing price in the response"
                        }
                    ],
                    "high_structured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {",
                                    "line": 15
                                }
                            ],
                            "summaryComponent": "Defines an asynchronous GET endpoint at '/api/stock/:symbol'"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const symbol = req.params.symbol.toUpperCase();",
                                    "line": 17
                                }
                            ],
                            "summaryComponent": "Extracting and uppercasing the stock symbol from the URL"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const data = await yahooFinance.chart(symbol, {",
                                    "line": 18
                                }
                            ],
                            "summaryComponent": "Fetching chart data from Yahoo Finance with parameters:"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "period1: \"2024-01-01\",",
                                    "line": 19
                                }
                            ],
                            "summaryComponent": "period1: '2024-01-01'"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "interval: \"1d\",",
                                    "line": 20
                                }
                            ],
                            "summaryComponent": "interval: '1d'"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const companyName = data.meta?.shortName || symbol;",
                                    "line": 24
                                }
                            ],
                            "summaryComponent": "Extracting the company name from the response metadata, or falling back to the symbol"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const today = new Date();",
                                    "line": 27
                                },
                                {
                                    "code": "const todayStr = today.toISOString().slice(0, 10);",
                                    "line": 28
                                },
                                {
                                    "code": "const todayQuote = quotes.find((q) => {",
                                    "line": 29
                                },
                                {
                                    "code": "currentDayPrice: todayQuote ? todayQuote.close : null,",
                                    "line": 43
                                }
                            ],
                            "summaryComponent": "Determining the current day's closing price and including it as 'currentDayPrice' in the response"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "ticker: symbol,",
                                    "line": 36
                                }
                            ],
                            "summaryComponent": "'ticker': the uppercase symbol"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "name: companyName,",
                                    "line": 37
                                }
                            ],
                            "summaryComponent": "'name': the company name or symbol"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "data: quotes.map((q) => ({",
                                    "line": 38
                                },
                                {
                                    "code": "date: q.date,",
                                    "line": 39
                                },
                                {
                                    "code": "close: q.close,",
                                    "line": 40
                                },
                                {
                                    "code": "volume: q.volume,",
                                    "line": 41
                                }
                            ],
                            "summaryComponent": "'data': an array of objects with date, close price, and volume for each day"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "currentDayPrice: todayQuote ? todayQuote.close : null,",
                                    "line": 43
                                }
                            ],
                            "summaryComponent": "'currentDayPrice': the closing price for the current day, or null if not available"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "console.log(response);",
                                    "line": 46
                                }
                            ],
                            "summaryComponent": "Logs the response object to the console"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "res.json(response);",
                                    "line": 47
                                }
                            ],
                            "summaryComponent": "Sends the JSON response to the client"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "console.error(err);",
                                    "line": 49
                                },
                                {
                                    "code": "res.status(500).send(\"Error fetching stock data\");",
                                    "line": 50
                                }
                            ],
                            "summaryComponent": "Handles errors by logging and returning a 500 status with an error message"
                        }
                    ]
                },
                "metadata": {
                    "offset": 304,
                    "fullPath": "/project/workspace/server/index.js",
                    "originalCode": "app.get(\"/api/stock/:symbol\", async (req, res) => {\n  try {\n    const symbol = req.params.symbol.toUpperCase();\n    const data = await yahooFinance.chart(symbol, {\n      period1: \"2024-01-01\",\n      interval: \"1d\",\n    });\n    const quotes = data.quotes;\n\n    const companyName = data.meta?.shortName || symbol;\n\n    // Pull the price for the current day\n    const today = new Date();\n    const todayStr = today.toISOString().slice(0, 10);\n    const todayQuote = quotes.find((q) => {\n      const quoteDate = new Date(q.date);\n      const quoteDateStr = quoteDate.toISOString().slice(0, 10);\n      return quoteDateStr === todayStr;\n    });\n\n    const response = {\n      ticker: symbol,\n      name: companyName,\n      data: quotes.map((q) => ({\n        date: q.date,\n        close: q.close,\n        volume: q.volume,\n      })),\n      currentDayPrice: todayQuote ? todayQuote.close : null,\n    };\n\n    console.log(response);\n    res.json(response);\n  } catch (err) {\n    console.error(err);\n    res.status(500).send(\"Error fetching stock data\");\n  }\n});",
                    "filename": "index.js",
                    "id": "72de2d24-65b7-4073-a25c-a573a8343905"
                },
                "editPromptValue": ""
            },
            "section_id": "72de2d24-65b7-4073-a25c-a573a8343905"
        },
        "timestamp": "2025-08-21 19:22:07.000",
        "event": "create_new_section",
        "source": "frontend",
        "id": "FjjyVIhn83GbLuDW5jln"
    },
    {
        "data": {
            "summary": "• Defines an asynchronous GET endpoint at '/api/stock/:symbol'\n• Processes the request by:\n  ◦ Extracting and uppercasing the stock symbol from the URL\n  ◦ Fetching chart data from Yahoo Finance with parameters:\n    ◦ period1: '2024-01-01'\n    ◦ interval: '1d'\n  ◦ Extracting the company name from the response metadata, or falling back to the symbol\n  ◦ Determining the current day's closing price and including it as 'currentDayPrice' in the response\n• Constructs a response object containing:\n  ◦ 'ticker': the uppercase symbol\n  ◦ 'name': the company name or symbol\n  ◦ 'data': an array of objects with date, close price, and volume for each day\n  ◦ 'currentDayPrice': the closing price for the current day, or null if not available\n• Logs the response object to the console\n• Sends the JSON response to the client\n• Handles errors by logging and returning a 500 status with an error message",
            "code": "15: app.get(\"/api/stock/:symbol\", async (req, res) => {\n16:   try {\n17:     const symbol = req.params.symbol.toUpperCase();\n18:     const data = await yahooFinance.chart(symbol, {\n19:       period1: \"2024-01-01\",\n20:       interval: \"1d\",\n21:     });\n22:     const quotes = data.quotes;\n23: \n24:     const companyName = data.meta?.shortName || symbol;\n25: \n26:     // Pull the price for the current day\n27:     const today = new Date();\n28:     const todayStr = today.toISOString().slice(0, 10);\n29:     const todayQuote = quotes.find((q) => {\n30:       const quoteDate = new Date(q.date);\n31:       const quoteDateStr = quoteDate.toISOString().slice(0, 10);\n32:       return quoteDateStr === todayStr;\n33:     });\n34: \n35:     const response = {\n36:       ticker: symbol,\n37:       name: companyName,\n38:       data: quotes.map((q) => ({\n39:         date: q.date,\n40:         close: q.close,\n41:         volume: q.volume,\n42:       })),\n43:       currentDayPrice: todayQuote ? todayQuote.close : null,\n44:     };\n45: \n46:     console.log(response);\n47:     res.json(response);\n48:   } catch (err) {\n49:     console.error(err);\n50:     res.status(500).send(\"Error fetching stock data\");\n51:   }\n52: });",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {",
                            "line": 15
                        }
                    ],
                    "summaryComponent": "Defines an asynchronous GET endpoint at '/api/stock/:symbol'"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const symbol = req.params.symbol.toUpperCase();",
                            "line": 17
                        }
                    ],
                    "summaryComponent": "Extracting and uppercasing the stock symbol from the URL"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const data = await yahooFinance.chart(symbol, {",
                            "line": 18
                        }
                    ],
                    "summaryComponent": "Fetching chart data from Yahoo Finance with parameters:"
                },
                {
                    "codeSegments": [
                        {
                            "code": "period1: \"2024-01-01\",",
                            "line": 19
                        }
                    ],
                    "summaryComponent": "period1: '2024-01-01'"
                },
                {
                    "codeSegments": [
                        {
                            "code": "interval: \"1d\",",
                            "line": 20
                        }
                    ],
                    "summaryComponent": "interval: '1d'"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const companyName = data.meta?.shortName || symbol;",
                            "line": 24
                        }
                    ],
                    "summaryComponent": "Extracting the company name from the response metadata, or falling back to the symbol"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const today = new Date();",
                            "line": 27
                        },
                        {
                            "code": "const todayStr = today.toISOString().slice(0, 10);",
                            "line": 28
                        },
                        {
                            "code": "const todayQuote = quotes.find((q) => {",
                            "line": 29
                        },
                        {
                            "code": "currentDayPrice: todayQuote ? todayQuote.close : null,",
                            "line": 43
                        }
                    ],
                    "summaryComponent": "Determining the current day's closing price and including it as 'currentDayPrice' in the response"
                },
                {
                    "codeSegments": [
                        {
                            "code": "ticker: symbol,",
                            "line": 36
                        }
                    ],
                    "summaryComponent": "'ticker': the uppercase symbol"
                },
                {
                    "codeSegments": [
                        {
                            "code": "name: companyName,",
                            "line": 37
                        }
                    ],
                    "summaryComponent": "'name': the company name or symbol"
                },
                {
                    "codeSegments": [
                        {
                            "code": "data: quotes.map((q) => ({",
                            "line": 38
                        },
                        {
                            "code": "date: q.date,",
                            "line": 39
                        },
                        {
                            "code": "close: q.close,",
                            "line": 40
                        },
                        {
                            "code": "volume: q.volume,",
                            "line": 41
                        }
                    ],
                    "summaryComponent": "'data': an array of objects with date, close price, and volume for each day"
                },
                {
                    "codeSegments": [
                        {
                            "code": "currentDayPrice: todayQuote ? todayQuote.close : null,",
                            "line": 43
                        }
                    ],
                    "summaryComponent": "'currentDayPrice': the closing price for the current day, or null if not available"
                },
                {
                    "codeSegments": [
                        {
                            "code": "console.log(response);",
                            "line": 46
                        }
                    ],
                    "summaryComponent": "Logs the response object to the console"
                },
                {
                    "codeSegments": [
                        {
                            "code": "res.json(response);",
                            "line": 47
                        }
                    ],
                    "summaryComponent": "Sends the JSON response to the client"
                },
                {
                    "codeSegments": [
                        {
                            "code": "console.error(err);",
                            "line": 49
                        },
                        {
                            "code": "res.status(500).send(\"Error fetching stock data\");",
                            "line": 50
                        }
                    ],
                    "summaryComponent": "Handles errors by logging and returning a 500 status with an error message"
                }
            ]
        },
        "timestamp": "2025-08-21 19:22:07.000",
        "event": "map_summary_code",
        "source": "backend",
        "id": "neYxAYidSJBx0YIuFbbI"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 5,
            "structured_type": "unstructured",
            "section_id": "72de2d24-65b7-4073-a25c-a573a8343905"
        },
        "timestamp": "2025-08-21 19:22:29.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "m1HSQZlDw5lZ1cVxARoe"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "unstructured",
            "section_id": "72de2d24-65b7-4073-a25c-a573a8343905"
        },
        "timestamp": "2025-08-21 19:22:30.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "1d6bQ0jLlPZVFXUCiQa2"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 5,
            "structured_type": "unstructured",
            "section_id": "72de2d24-65b7-4073-a25c-a573a8343905"
        },
        "timestamp": "2025-08-21 19:22:30.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "FQYvdHGgqa6sNQaWx2fr"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 6,
            "structured_type": "unstructured",
            "section_id": "72de2d24-65b7-4073-a25c-a573a8343905"
        },
        "timestamp": "2025-08-21 19:22:30.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "qq1UTDhs41xCFd8k5gkg"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "unstructured",
            "section_id": "72de2d24-65b7-4073-a25c-a573a8343905"
        },
        "timestamp": "2025-08-21 19:22:30.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "ycAqRJ7LMvl7gipHoECU"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "unstructured",
            "section_id": "72de2d24-65b7-4073-a25c-a573a8343905"
        },
        "timestamp": "2025-08-21 19:22:31.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "5NZBY4e9oQAeIeY8SQNb"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 5,
            "structured_type": "unstructured",
            "section_id": "72de2d24-65b7-4073-a25c-a573a8343905"
        },
        "timestamp": "2025-08-21 19:22:31.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "68Iw0XFMBuWSsPKD1z4F"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "unstructured",
            "section_id": "72de2d24-65b7-4073-a25c-a573a8343905"
        },
        "timestamp": "2025-08-21 19:22:31.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "wMJ7LsLXl9HU3xBiwmaC"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "unstructured",
            "section_id": "72de2d24-65b7-4073-a25c-a573a8343905"
        },
        "timestamp": "2025-08-21 19:22:38.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "fgcxHuteikePz57IUc8K"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 5,
            "structured_type": "unstructured",
            "section_id": "72de2d24-65b7-4073-a25c-a573a8343905"
        },
        "timestamp": "2025-08-21 19:22:38.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "gcml1TiTrtn4IZvlD0DV"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "unstructured",
            "section_id": "72de2d24-65b7-4073-a25c-a573a8343905"
        },
        "timestamp": "2025-08-21 19:22:38.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "o19cF5UsPjIJNF7RmAjY"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 8,
            "structured_type": "unstructured",
            "section_id": "72de2d24-65b7-4073-a25c-a573a8343905"
        },
        "timestamp": "2025-08-21 19:22:38.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "ynZFkmqZjIkcjJawo7H5"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "unstructured",
            "section_id": "72de2d24-65b7-4073-a25c-a573a8343905"
        },
        "timestamp": "2025-08-21 19:22:39.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "5jZilHrwBjx14Cxy4lbZ"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 5,
            "structured_type": "unstructured",
            "section_id": "72de2d24-65b7-4073-a25c-a573a8343905"
        },
        "timestamp": "2025-08-21 19:22:39.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "M4rXaQoUYQICVDe74lvU"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 2,
            "structured_type": "unstructured",
            "section_id": "72de2d24-65b7-4073-a25c-a573a8343905"
        },
        "timestamp": "2025-08-21 19:22:39.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "M5iluCvG28pDVu6ffDj8"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 4,
            "structured_type": "unstructured",
            "section_id": "72de2d24-65b7-4073-a25c-a573a8343905"
        },
        "timestamp": "2025-08-21 19:22:39.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "Pfm95JhO083oh7GphX0j"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "unstructured",
            "section_id": "72de2d24-65b7-4073-a25c-a573a8343905"
        },
        "timestamp": "2025-08-21 19:22:39.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "Th5Z85CwM5T6SJ3kcY42"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "unstructured",
            "section_id": "72de2d24-65b7-4073-a25c-a573a8343905"
        },
        "timestamp": "2025-08-21 19:22:39.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "YVttVBQ8nsToFjRtP6jA"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 0,
            "structured_type": "unstructured",
            "section_id": "72de2d24-65b7-4073-a25c-a573a8343905"
        },
        "timestamp": "2025-08-21 19:22:39.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "fnRD1TMTQsKmdt1moxWn"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "unstructured",
            "section_id": "72de2d24-65b7-4073-a25c-a573a8343905"
        },
        "timestamp": "2025-08-21 19:22:39.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "l22r1sgr4FCqaPSZq4hn"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 1,
            "structured_type": "unstructured",
            "section_id": "72de2d24-65b7-4073-a25c-a573a8343905"
        },
        "timestamp": "2025-08-21 19:22:39.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "qngJXgfxlkjQA78bMTt3"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 4,
            "structured_type": "unstructured",
            "section_id": "72de2d24-65b7-4073-a25c-a573a8343905"
        },
        "timestamp": "2025-08-21 19:22:42.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "5Jpj56eDLT2AALYDb5zK"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "unstructured",
            "section_id": "72de2d24-65b7-4073-a25c-a573a8343905"
        },
        "timestamp": "2025-08-21 19:22:42.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "OlEcZIIwVJnxSp36Ipgh"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "unstructured",
            "section_id": "72de2d24-65b7-4073-a25c-a573a8343905"
        },
        "timestamp": "2025-08-21 19:22:42.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "h3F0ZEgZBuVjwRa0C8XL"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 5,
            "structured_type": "unstructured",
            "section_id": "72de2d24-65b7-4073-a25c-a573a8343905"
        },
        "timestamp": "2025-08-21 19:22:46.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "VqH4mLUpslSghMxw0I3x"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 6,
            "structured_type": "unstructured",
            "section_id": "72de2d24-65b7-4073-a25c-a573a8343905"
        },
        "timestamp": "2025-08-21 19:22:47.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "4HmiJEyf7lyTmGh4eo78"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "unstructured",
            "section_id": "72de2d24-65b7-4073-a25c-a573a8343905"
        },
        "timestamp": "2025-08-21 19:22:47.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "Lsp5ub68KfQLiMbTiDRQ"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "unstructured",
            "section_id": "72de2d24-65b7-4073-a25c-a573a8343905"
        },
        "timestamp": "2025-08-21 19:22:47.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "e6p9kiHoAELW1DFUZyGh"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "unstructured",
            "section_id": "72de2d24-65b7-4073-a25c-a573a8343905"
        },
        "timestamp": "2025-08-21 19:22:47.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "llzbB58OfIfoQe6RZ16p"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 5,
            "structured_type": "unstructured",
            "section_id": "72de2d24-65b7-4073-a25c-a573a8343905"
        },
        "timestamp": "2025-08-21 19:22:47.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "xr0sOI2qpNDhezNeYQqa"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 5,
            "structured_type": "unstructured",
            "section_id": "72de2d24-65b7-4073-a25c-a573a8343905"
        },
        "timestamp": "2025-08-21 19:22:48.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "FpC0XT9SRIX6KKzaykPQ"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "unstructured",
            "section_id": "72de2d24-65b7-4073-a25c-a573a8343905"
        },
        "timestamp": "2025-08-21 19:22:48.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "J2kd77RZbkUZ0io2wtAH"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 8,
            "structured_type": "unstructured",
            "section_id": "72de2d24-65b7-4073-a25c-a573a8343905"
        },
        "timestamp": "2025-08-21 19:22:48.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "JR7m4Yc5VWqQh9SD2Je9"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "unstructured",
            "section_id": "72de2d24-65b7-4073-a25c-a573a8343905"
        },
        "timestamp": "2025-08-21 19:22:48.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "lzSuErZJ4lwhScfPvw4V"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 8,
            "structured_type": "unstructured",
            "section_id": "72de2d24-65b7-4073-a25c-a573a8343905"
        },
        "timestamp": "2025-08-21 19:22:48.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "onR8YDfa8qDELrI6jt4l"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 5,
            "structured_type": "unstructured",
            "section_id": "72de2d24-65b7-4073-a25c-a573a8343905"
        },
        "timestamp": "2025-08-21 19:22:49.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "RBa55bNZMCHx0E3DPlzB"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "unstructured",
            "section_id": "72de2d24-65b7-4073-a25c-a573a8343905"
        },
        "timestamp": "2025-08-21 19:22:49.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "RoKgOnaJnGpN4fps7LMX"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "unstructured",
            "section_id": "72de2d24-65b7-4073-a25c-a573a8343905"
        },
        "timestamp": "2025-08-21 19:22:49.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "Wxr5nw1kzmlMP7MD8Zj8"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "unstructured",
            "section_id": "72de2d24-65b7-4073-a25c-a573a8343905"
        },
        "timestamp": "2025-08-21 19:22:49.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "kjlM03bwc9cMIJHsFFyp"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 4,
            "structured_type": "unstructured",
            "section_id": "72de2d24-65b7-4073-a25c-a573a8343905"
        },
        "timestamp": "2025-08-21 19:22:49.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "zb1Wz6H199IdFuNNjvDS"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 6,
            "structured_type": "unstructured",
            "section_id": "72de2d24-65b7-4073-a25c-a573a8343905"
        },
        "timestamp": "2025-08-21 19:22:52.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "QmbD6Isx1OXsawjf82ql"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 5,
            "structured_type": "unstructured",
            "section_id": "72de2d24-65b7-4073-a25c-a573a8343905"
        },
        "timestamp": "2025-08-21 19:22:52.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "vO0HKi7FQCk8IWVhn136"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "unstructured",
            "section_id": "72de2d24-65b7-4073-a25c-a573a8343905"
        },
        "timestamp": "2025-08-21 19:22:52.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "x4IIo64k3pU7igBimf3Q"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "unstructured",
            "section_id": "72de2d24-65b7-4073-a25c-a573a8343905"
        },
        "timestamp": "2025-08-21 19:22:54.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "VtMqlZ0XYDOxspoQCxIW"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 8,
            "structured_type": "unstructured",
            "section_id": "72de2d24-65b7-4073-a25c-a573a8343905"
        },
        "timestamp": "2025-08-21 19:22:55.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "MWlDMLSOJfOpy856PiUu"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "unstructured",
            "section_id": "72de2d24-65b7-4073-a25c-a573a8343905"
        },
        "timestamp": "2025-08-21 19:22:55.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "ZjodhIEjpPcC0ETj939y"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 5,
            "structured_type": "unstructured",
            "section_id": "72de2d24-65b7-4073-a25c-a573a8343905"
        },
        "timestamp": "2025-08-21 19:22:55.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "pVIvW4dCzD3GhY8TyGcw"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "unstructured",
            "section_id": "72de2d24-65b7-4073-a25c-a573a8343905"
        },
        "timestamp": "2025-08-21 19:22:56.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "JezDawtabRvn4e0nz6YK"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 5,
            "structured_type": "unstructured",
            "section_id": "72de2d24-65b7-4073-a25c-a573a8343905"
        },
        "timestamp": "2025-08-21 19:23:05.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "EvEbO8cNsJySPpUNuZzj"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 8,
            "structured_type": "unstructured",
            "section_id": "72de2d24-65b7-4073-a25c-a573a8343905"
        },
        "timestamp": "2025-08-21 19:23:05.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "ezPB07fKzYBdPYUKcOBr"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "unstructured",
            "section_id": "72de2d24-65b7-4073-a25c-a573a8343905"
        },
        "timestamp": "2025-08-21 19:23:05.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "oXtZKrwTXIAs74DAQKUT"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "unstructured",
            "section_id": "72de2d24-65b7-4073-a25c-a573a8343905"
        },
        "timestamp": "2025-08-21 19:23:11.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "rvApOJVucGflqa9q9rom"
    },
    {
        "data": {},
        "timestamp": "2025-08-21 19:24:21.000",
        "event": "click_summarize_code",
        "source": "frontend",
        "id": "i4PQaYQkDMgtIDyRPaQJ"
    },
    {
        "data": {
            "summary": {
                "high_unstructured": "This snippet sets up the StockChart React component, starting with a guard clause that returns null if the data prop or its nested data array are missing or empty. It then extracts the company name and ticker symbol from the data object for later use in the component. A helper function, formatDateString, is defined to process date strings by splitting them at the 'T' character and returning only the date portion, effectively removing the time. These initializations and helpers prepare the component for rendering and data formatting tasks that follow.",
                "title": "Summary of StockChart Component Initialization and Helpers",
                "low_structured": "• Defines the StockChart component and checks for valid data.\n• Extracts company and ticker from props.\n• Includes a helper to format date strings.",
                "medium_unstructured": "The code initializes the StockChart React component, first checking if the provided data is valid and returning null if not. It then extracts the company name and ticker symbol from the data prop. Additionally, it defines a helper function to format date strings by removing the time portion.",
                "medium_structured": "• Defines the StockChart functional component that receives a data prop.\n• Performs a check to ensure data exists and contains entries, returning null otherwise.\n• Extracts company name and ticker symbol from the data object.\n•  Defines a helper function:\n  ◦  formatDateString removes the time part from an ISO date string.",
                "low_unstructured": "This code defines the initial logic and a date formatting helper for the StockChart React component.",
                "high_structured": "• Declares the StockChart functional component, accepting a single data prop.\n• Implements a guard clause:\n  ◦  Returns null if data, data.data, or data.data.length are falsy, preventing rendering with invalid input.\n• Extracts key information from the data prop:\n  ◦  company is assigned from data.name.\n  ◦  ticker is assigned from data.ticker.\n• Defines a utility function:\n  ◦  formatDateString takes a date string, splits it at 'T', and returns only the date part, stripping out the time.\n• These steps set up the component's core variables and a date formatting helper for later use."
            },
            "selected_code": "const StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };\n"
        },
        "timestamp": "2025-08-21 19:24:27.000",
        "event": "summarize_selected_code",
        "source": "backend",
        "id": "MhwcEGBe6d7e3JoH7P5K"
    },
    {
        "data": {
            "summary": "This code defines the initial logic and a date formatting helper for the StockChart React component.",
            "code": "13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: ",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        },
                        {
                            "code": "if (!data || !data.data || !data.data.length) return null;",
                            "line": 14
                        },
                        {
                            "code": "const company = data.name;",
                            "line": 16
                        },
                        {
                            "code": "const ticker = data.ticker;",
                            "line": 17
                        }
                    ],
                    "summaryComponent": "defines the initial logic"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const formatDateString = (date) => {",
                            "line": 19
                        },
                        {
                            "code": "return date.split(\"T\")[0];",
                            "line": 20
                        },
                        {
                            "code": "};",
                            "line": 21
                        }
                    ],
                    "summaryComponent": "a date formatting helper"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        }
                    ],
                    "summaryComponent": "for the StockChart React component"
                }
            ]
        },
        "timestamp": "2025-08-21 19:24:29.000",
        "event": "map_summary_code",
        "source": "backend",
        "id": "bGINRUNebp9TiwTRNVpI"
    },
    {
        "data": {
            "summary": "• Defines the StockChart component and checks for valid data.\n• Extracts company and ticker from props.\n• Includes a helper to format date strings.",
            "code": "13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: ",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        },
                        {
                            "code": "if (!data || !data.data || !data.data.length) return null;",
                            "line": 14
                        }
                    ],
                    "summaryComponent": "Defines the StockChart component and checks for valid data."
                },
                {
                    "codeSegments": [
                        {
                            "code": "const company = data.name;",
                            "line": 16
                        },
                        {
                            "code": "const ticker = data.ticker;",
                            "line": 17
                        }
                    ],
                    "summaryComponent": "Extracts company and ticker from props."
                },
                {
                    "codeSegments": [
                        {
                            "code": "const formatDateString = (date) => {",
                            "line": 19
                        },
                        {
                            "code": "return date.split(\"T\")[0];",
                            "line": 20
                        },
                        {
                            "code": "};",
                            "line": 21
                        }
                    ],
                    "summaryComponent": "Includes a helper to format date strings."
                }
            ]
        },
        "timestamp": "2025-08-21 19:24:29.000",
        "event": "map_summary_code",
        "source": "backend",
        "id": "y3uIsOW4ZVgEpEEtPTsX"
    },
    {
        "data": {
            "summary": "• Defines the StockChart functional component that receives a data prop.\n• Performs a check to ensure data exists and contains entries, returning null otherwise.\n• Extracts company name and ticker symbol from the data object.\n•  Defines a helper function:\n  ◦  formatDateString removes the time part from an ISO date string.",
            "code": "13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: ",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        }
                    ],
                    "summaryComponent": "Defines the StockChart functional component that receives a data prop."
                },
                {
                    "codeSegments": [
                        {
                            "code": "if (!data || !data.data || !data.data.length) return null;",
                            "line": 14
                        }
                    ],
                    "summaryComponent": "Performs a check to ensure data exists and contains entries, returning null otherwise."
                },
                {
                    "codeSegments": [
                        {
                            "code": "const company = data.name;",
                            "line": 16
                        },
                        {
                            "code": "const ticker = data.ticker;",
                            "line": 17
                        }
                    ],
                    "summaryComponent": "Extracts company name and ticker symbol from the data object."
                },
                {
                    "codeSegments": [
                        {
                            "code": "const formatDateString = (date) => {",
                            "line": 19
                        }
                    ],
                    "summaryComponent": "Defines a helper function:"
                },
                {
                    "codeSegments": [
                        {
                            "code": "return date.split(\"T\")[0];",
                            "line": 20
                        }
                    ],
                    "summaryComponent": "formatDateString removes the time part from an ISO date string."
                }
            ]
        },
        "timestamp": "2025-08-21 19:24:30.000",
        "event": "map_summary_code",
        "source": "backend",
        "id": "gTjvsPJc7fXf3HN4bgby"
    },
    {
        "data": {
            "summary": "The code initializes the StockChart React component, first checking if the provided data is valid and returning null if not. It then extracts the company name and ticker symbol from the data prop. Additionally, it defines a helper function to format date strings by removing the time portion.",
            "code": "13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: ",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        }
                    ],
                    "summaryComponent": "initializes the StockChart React component"
                },
                {
                    "codeSegments": [
                        {
                            "code": "if (!data || !data.data || !data.data.length) return null;",
                            "line": 14
                        }
                    ],
                    "summaryComponent": "first checking if the provided data is valid"
                },
                {
                    "codeSegments": [
                        {
                            "code": "if (!data || !data.data || !data.data.length) return null;",
                            "line": 14
                        }
                    ],
                    "summaryComponent": "and returning null if not"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const company = data.name;",
                            "line": 16
                        }
                    ],
                    "summaryComponent": "extracts the company name"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const ticker = data.ticker;",
                            "line": 17
                        }
                    ],
                    "summaryComponent": "and ticker symbol from the data prop"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const formatDateString = (date) => {",
                            "line": 19
                        }
                    ],
                    "summaryComponent": "defines a helper function to format date strings"
                },
                {
                    "codeSegments": [
                        {
                            "code": "return date.split(\"T\")[0];",
                            "line": 20
                        }
                    ],
                    "summaryComponent": "by removing the time portion"
                }
            ]
        },
        "timestamp": "2025-08-21 19:24:30.000",
        "event": "map_summary_code",
        "source": "backend",
        "id": "zVGDrTuCDb1PDOawZt8p"
    },
    {
        "data": {
            "summary": "This snippet sets up the StockChart React component, starting with a guard clause that returns null if the data prop or its nested data array are missing or empty. It then extracts the company name and ticker symbol from the data object for later use in the component. A helper function, formatDateString, is defined to process date strings by splitting them at the 'T' character and returning only the date portion, effectively removing the time. These initializations and helpers prepare the component for rendering and data formatting tasks that follow.",
            "code": "13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: ",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        }
                    ],
                    "summaryComponent": "sets up the StockChart React component"
                },
                {
                    "codeSegments": [
                        {
                            "code": "if (!data || !data.data || !data.data.length) return null;",
                            "line": 14
                        }
                    ],
                    "summaryComponent": "starting with a guard clause that returns null if the data prop or its nested data array are missing or empty"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const company = data.name;",
                            "line": 16
                        }
                    ],
                    "summaryComponent": "extracts the company name"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const ticker = data.ticker;",
                            "line": 17
                        }
                    ],
                    "summaryComponent": "and ticker symbol from the data object"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const formatDateString = (date) => {",
                            "line": 19
                        }
                    ],
                    "summaryComponent": "A helper function, formatDateString, is defined"
                },
                {
                    "codeSegments": [
                        {
                            "code": "return date.split(\"T\")[0];",
                            "line": 20
                        }
                    ],
                    "summaryComponent": "to process date strings by splitting them at the 'T' character and returning only the date portion, effectively removing the time"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const company = data.name;",
                            "line": 16
                        },
                        {
                            "code": "const ticker = data.ticker;",
                            "line": 17
                        },
                        {
                            "code": "const formatDateString = (date) => {",
                            "line": 19
                        }
                    ],
                    "summaryComponent": "These initializations and helpers prepare the component for rendering and data formatting tasks that follow"
                }
            ]
        },
        "timestamp": "2025-08-21 19:24:31.000",
        "event": "map_summary_code",
        "source": "backend",
        "id": "ZWE0qIVpklyVPdxzkz2Q"
    },
    {
        "data": {
            "section_data": {
                "editPromptDetailLevel": null,
                "title": "Summary of StockChart Component Initialization and Helpers",
                "selectedStructured": "unstructured",
                "lines": [
                    13,
                    22
                ],
                "summaryData": {
                    "high_unstructured": "This snippet sets up the StockChart React component, starting with a guard clause that returns null if the data prop or its nested data array are missing or empty. It then extracts the company name and ticker symbol from the data object for later use in the component. A helper function, formatDateString, is defined to process date strings by splitting them at the 'T' character and returning only the date portion, effectively removing the time. These initializations and helpers prepare the component for rendering and data formatting tasks that follow.",
                    "title": "Summary of StockChart Component Initialization and Helpers",
                    "low_structured": "• Defines the StockChart component and checks for valid data.\n• Extracts company and ticker from props.\n• Includes a helper to format date strings.",
                    "medium_unstructured": "The code initializes the StockChart React component, first checking if the provided data is valid and returning null if not. It then extracts the company name and ticker symbol from the data prop. Additionally, it defines a helper function to format date strings by removing the time portion.",
                    "medium_structured": "• Defines the StockChart functional component that receives a data prop.\n• Performs a check to ensure data exists and contains entries, returning null otherwise.\n• Extracts company name and ticker symbol from the data object.\n•  Defines a helper function:\n  ◦  formatDateString removes the time part from an ISO date string.",
                    "low_unstructured": "This code defines the initial logic and a date formatting helper for the StockChart React component.",
                    "high_structured": "• Declares the StockChart functional component, accepting a single data prop.\n• Implements a guard clause:\n  ◦  Returns null if data, data.data, or data.data.length are falsy, preventing rendering with invalid input.\n• Extracts key information from the data prop:\n  ◦  company is assigned from data.name.\n  ◦  ticker is assigned from data.ticker.\n• Defines a utility function:\n  ◦  formatDateString takes a date string, splits it at 'T', and returns only the date part, stripping out the time.\n• These steps set up the component's core variables and a date formatting helper for later use."
                },
                "createdAt": 1755836672000,
                "editPromptStructured": null,
                "summaryMappings": {
                    "high_unstructured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                }
                            ],
                            "summaryComponent": "sets up the StockChart React component"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "if (!data || !data.data || !data.data.length) return null;",
                                    "line": 14
                                }
                            ],
                            "summaryComponent": "starting with a guard clause that returns null if the data prop or its nested data array are missing or empty"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const company = data.name;",
                                    "line": 16
                                }
                            ],
                            "summaryComponent": "extracts the company name"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const ticker = data.ticker;",
                                    "line": 17
                                }
                            ],
                            "summaryComponent": "and ticker symbol from the data object"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const formatDateString = (date) => {",
                                    "line": 19
                                }
                            ],
                            "summaryComponent": "A helper function, formatDateString, is defined"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "return date.split(\"T\")[0];",
                                    "line": 20
                                }
                            ],
                            "summaryComponent": "to process date strings by splitting them at the 'T' character and returning only the date portion, effectively removing the time"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const company = data.name;",
                                    "line": 16
                                },
                                {
                                    "code": "const ticker = data.ticker;",
                                    "line": 17
                                },
                                {
                                    "code": "const formatDateString = (date) => {",
                                    "line": 19
                                }
                            ],
                            "summaryComponent": "These initializations and helpers prepare the component for rendering and data formatting tasks that follow"
                        }
                    ],
                    "low_structured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                },
                                {
                                    "code": "if (!data || !data.data || !data.data.length) return null;",
                                    "line": 14
                                }
                            ],
                            "summaryComponent": "Defines the StockChart component and checks for valid data."
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const company = data.name;",
                                    "line": 16
                                },
                                {
                                    "code": "const ticker = data.ticker;",
                                    "line": 17
                                }
                            ],
                            "summaryComponent": "Extracts company and ticker from props."
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const formatDateString = (date) => {",
                                    "line": 19
                                },
                                {
                                    "code": "return date.split(\"T\")[0];",
                                    "line": 20
                                },
                                {
                                    "code": "};",
                                    "line": 21
                                }
                            ],
                            "summaryComponent": "Includes a helper to format date strings."
                        }
                    ],
                    "medium_unstructured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                }
                            ],
                            "summaryComponent": "initializes the StockChart React component"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "if (!data || !data.data || !data.data.length) return null;",
                                    "line": 14
                                }
                            ],
                            "summaryComponent": "first checking if the provided data is valid"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "if (!data || !data.data || !data.data.length) return null;",
                                    "line": 14
                                }
                            ],
                            "summaryComponent": "and returning null if not"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const company = data.name;",
                                    "line": 16
                                }
                            ],
                            "summaryComponent": "extracts the company name"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const ticker = data.ticker;",
                                    "line": 17
                                }
                            ],
                            "summaryComponent": "and ticker symbol from the data prop"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const formatDateString = (date) => {",
                                    "line": 19
                                }
                            ],
                            "summaryComponent": "defines a helper function to format date strings"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "return date.split(\"T\")[0];",
                                    "line": 20
                                }
                            ],
                            "summaryComponent": "by removing the time portion"
                        }
                    ],
                    "medium_structured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                }
                            ],
                            "summaryComponent": "Defines the StockChart functional component that receives a data prop."
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "if (!data || !data.data || !data.data.length) return null;",
                                    "line": 14
                                }
                            ],
                            "summaryComponent": "Performs a check to ensure data exists and contains entries, returning null otherwise."
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const company = data.name;",
                                    "line": 16
                                },
                                {
                                    "code": "const ticker = data.ticker;",
                                    "line": 17
                                }
                            ],
                            "summaryComponent": "Extracts company name and ticker symbol from the data object."
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const formatDateString = (date) => {",
                                    "line": 19
                                }
                            ],
                            "summaryComponent": "Defines a helper function:"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "return date.split(\"T\")[0];",
                                    "line": 20
                                }
                            ],
                            "summaryComponent": "formatDateString removes the time part from an ISO date string."
                        }
                    ],
                    "low_unstructured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                },
                                {
                                    "code": "if (!data || !data.data || !data.data.length) return null;",
                                    "line": 14
                                },
                                {
                                    "code": "const company = data.name;",
                                    "line": 16
                                },
                                {
                                    "code": "const ticker = data.ticker;",
                                    "line": 17
                                }
                            ],
                            "summaryComponent": "defines the initial logic"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const formatDateString = (date) => {",
                                    "line": 19
                                },
                                {
                                    "code": "return date.split(\"T\")[0];",
                                    "line": 20
                                },
                                {
                                    "code": "};",
                                    "line": 21
                                }
                            ],
                            "summaryComponent": "a date formatting helper"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                }
                            ],
                            "summaryComponent": "for the StockChart React component"
                        }
                    ],
                    "high_structured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                }
                            ],
                            "summaryComponent": "Declares the StockChart functional component, accepting a single data prop."
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "if (!data || !data.data || !data.data.length) return null;",
                                    "line": 14
                                }
                            ],
                            "summaryComponent": "Implements a guard clause:"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "if (!data || !data.data || !data.data.length) return null;",
                                    "line": 14
                                }
                            ],
                            "summaryComponent": "Returns null if data, data.data, or data.data.length are falsy, preventing rendering with invalid input."
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const company = data.name;",
                                    "line": 16
                                },
                                {
                                    "code": "const ticker = data.ticker;",
                                    "line": 17
                                }
                            ],
                            "summaryComponent": "Extracts key information from the data prop:"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const company = data.name;",
                                    "line": 16
                                }
                            ],
                            "summaryComponent": "company is assigned from data.name."
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const ticker = data.ticker;",
                                    "line": 17
                                }
                            ],
                            "summaryComponent": "ticker is assigned from data.ticker."
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const formatDateString = (date) => {",
                                    "line": 19
                                },
                                {
                                    "code": "  return date.split(\"T\")[0];",
                                    "line": 20
                                },
                                {
                                    "code": "};",
                                    "line": 21
                                }
                            ],
                            "summaryComponent": "Defines a utility function:"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const formatDateString = (date) => {",
                                    "line": 19
                                },
                                {
                                    "code": "  return date.split(\"T\")[0];",
                                    "line": 20
                                }
                            ],
                            "summaryComponent": "formatDateString takes a date string, splits it at 'T', and returns only the date part, stripping out the time."
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const company = data.name;",
                                    "line": 16
                                },
                                {
                                    "code": "const ticker = data.ticker;",
                                    "line": 17
                                },
                                {
                                    "code": "const formatDateString = (date) => {",
                                    "line": 19
                                }
                            ],
                            "summaryComponent": "These steps set up the component's core variables and a date formatting helper for later use."
                        }
                    ]
                },
                "selectedDetailLevel": "medium",
                "metadata": {
                    "offset": 156,
                    "fullPath": "/project/workspace/frontend/src/StockChart.jsx",
                    "originalCode": "const StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };\n",
                    "filename": "StockChart.jsx",
                    "id": "9b8a55ca-a4ac-4eee-9639-042ba0915b3c"
                },
                "editPromptValue": ""
            },
            "section_id": "9b8a55ca-a4ac-4eee-9639-042ba0915b3c"
        },
        "timestamp": "2025-08-21 19:24:32.000",
        "event": "create_new_section",
        "source": "frontend",
        "id": "PLjrJxZS2fHg37F6y5b0"
    },
    {
        "data": {
            "after_section_id": "9b8a55ca-a4ac-4eee-9639-042ba0915b3c",
            "before_section_id": "72de2d24-65b7-4073-a25c-a573a8343905"
        },
        "timestamp": "2025-08-21 19:24:32.000",
        "event": "autotransit_section",
        "source": "frontend",
        "id": "SMtfb105TlzN0Gm8LtQM"
    },
    {
        "data": {
            "summary": "• Declares the StockChart functional component, accepting a single data prop.\n• Implements a guard clause:\n  ◦  Returns null if data, data.data, or data.data.length are falsy, preventing rendering with invalid input.\n• Extracts key information from the data prop:\n  ◦  company is assigned from data.name.\n  ◦  ticker is assigned from data.ticker.\n• Defines a utility function:\n  ◦  formatDateString takes a date string, splits it at 'T', and returns only the date part, stripping out the time.\n• These steps set up the component's core variables and a date formatting helper for later use.",
            "code": "13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: ",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        }
                    ],
                    "summaryComponent": "Declares the StockChart functional component, accepting a single data prop."
                },
                {
                    "codeSegments": [
                        {
                            "code": "if (!data || !data.data || !data.data.length) return null;",
                            "line": 14
                        }
                    ],
                    "summaryComponent": "Implements a guard clause:"
                },
                {
                    "codeSegments": [
                        {
                            "code": "if (!data || !data.data || !data.data.length) return null;",
                            "line": 14
                        }
                    ],
                    "summaryComponent": "Returns null if data, data.data, or data.data.length are falsy, preventing rendering with invalid input."
                },
                {
                    "codeSegments": [
                        {
                            "code": "const company = data.name;",
                            "line": 16
                        },
                        {
                            "code": "const ticker = data.ticker;",
                            "line": 17
                        }
                    ],
                    "summaryComponent": "Extracts key information from the data prop:"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const company = data.name;",
                            "line": 16
                        }
                    ],
                    "summaryComponent": "company is assigned from data.name."
                },
                {
                    "codeSegments": [
                        {
                            "code": "const ticker = data.ticker;",
                            "line": 17
                        }
                    ],
                    "summaryComponent": "ticker is assigned from data.ticker."
                },
                {
                    "codeSegments": [
                        {
                            "code": "const formatDateString = (date) => {",
                            "line": 19
                        },
                        {
                            "code": "  return date.split(\"T\")[0];",
                            "line": 20
                        },
                        {
                            "code": "};",
                            "line": 21
                        }
                    ],
                    "summaryComponent": "Defines a utility function:"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const formatDateString = (date) => {",
                            "line": 19
                        },
                        {
                            "code": "  return date.split(\"T\")[0];",
                            "line": 20
                        }
                    ],
                    "summaryComponent": "formatDateString takes a date string, splits it at 'T', and returns only the date part, stripping out the time."
                },
                {
                    "codeSegments": [
                        {
                            "code": "const company = data.name;",
                            "line": 16
                        },
                        {
                            "code": "const ticker = data.ticker;",
                            "line": 17
                        },
                        {
                            "code": "const formatDateString = (date) => {",
                            "line": 19
                        }
                    ],
                    "summaryComponent": "These steps set up the component's core variables and a date formatting helper for later use."
                }
            ]
        },
        "timestamp": "2025-08-21 19:24:32.000",
        "event": "map_summary_code",
        "source": "backend",
        "id": "kuLTd9WmgXWxZQnnEglH"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 2,
            "structured_type": "unstructured",
            "section_id": "9b8a55ca-a4ac-4eee-9639-042ba0915b3c"
        },
        "timestamp": "2025-08-21 19:24:34.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "0zzuN3PkksLm7ecFaLzP"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 4,
            "structured_type": "unstructured",
            "section_id": "9b8a55ca-a4ac-4eee-9639-042ba0915b3c"
        },
        "timestamp": "2025-08-21 19:24:34.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "8a3bdGZDgSrhxDRuatDs"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "unstructured",
            "section_id": "9b8a55ca-a4ac-4eee-9639-042ba0915b3c"
        },
        "timestamp": "2025-08-21 19:24:34.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "LCFsFAgnh0P72Fzm5MPD"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 5,
            "structured_type": "unstructured",
            "section_id": "9b8a55ca-a4ac-4eee-9639-042ba0915b3c"
        },
        "timestamp": "2025-08-21 19:24:34.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "Ucgljx6s8kOEzCfAE6PN"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "unstructured",
            "section_id": "9b8a55ca-a4ac-4eee-9639-042ba0915b3c"
        },
        "timestamp": "2025-08-21 19:24:34.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "ZNh0edUt6A7EJowH3u0s"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 2,
            "structured_type": "unstructured",
            "section_id": "9b8a55ca-a4ac-4eee-9639-042ba0915b3c"
        },
        "timestamp": "2025-08-21 19:24:35.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "9CbTXUySdDojJI4K5pUx"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "unstructured",
            "section_id": "9b8a55ca-a4ac-4eee-9639-042ba0915b3c"
        },
        "timestamp": "2025-08-21 19:24:35.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "IpnU0SxAe5TowqQwmqZF"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "unstructured",
            "section_id": "9b8a55ca-a4ac-4eee-9639-042ba0915b3c"
        },
        "timestamp": "2025-08-21 19:24:35.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "OBg40r7JqTwSVbO6hdW7"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 4,
            "structured_type": "unstructured",
            "section_id": "9b8a55ca-a4ac-4eee-9639-042ba0915b3c"
        },
        "timestamp": "2025-08-21 19:24:35.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "XTdLmqG8TPZJfVf1Dj5Y"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "unstructured",
            "section_id": "9b8a55ca-a4ac-4eee-9639-042ba0915b3c"
        },
        "timestamp": "2025-08-21 19:24:35.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "aZHQRbAk2QUMkg41pKd0"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 0,
            "structured_type": "unstructured",
            "section_id": "9b8a55ca-a4ac-4eee-9639-042ba0915b3c"
        },
        "timestamp": "2025-08-21 19:24:35.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "cw8u1VcNjnOszLh5fsEb"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "unstructured",
            "section_id": "9b8a55ca-a4ac-4eee-9639-042ba0915b3c"
        },
        "timestamp": "2025-08-21 19:24:35.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "sG6AyRqMmVtpBYNsJLXL"
    },
    {
        "data": {
            "before_structured": "unstructured",
            "before_detail_level": "medium",
            "after_structured": "structured",
            "after_detail_level": "medium",
            "section_id": "9b8a55ca-a4ac-4eee-9639-042ba0915b3c"
        },
        "timestamp": "2025-08-21 19:24:36.000",
        "event": "change_summary_level",
        "source": "frontend",
        "id": "1qfdKl6fnP0IE9XWFWLD"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 0,
            "structured_type": "structured",
            "section_id": "9b8a55ca-a4ac-4eee-9639-042ba0915b3c"
        },
        "timestamp": "2025-08-21 19:24:36.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "Rzg5JpEcHvMiqYPlDlFt"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "structured",
            "section_id": "9b8a55ca-a4ac-4eee-9639-042ba0915b3c"
        },
        "timestamp": "2025-08-21 19:24:37.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "a8KDomMKDdJBQzfnRkdR"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 0,
            "structured_type": "structured",
            "section_id": "9b8a55ca-a4ac-4eee-9639-042ba0915b3c"
        },
        "timestamp": "2025-08-21 19:24:47.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "4S22Iu2NrgCGG6wuVi9s"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 2,
            "structured_type": "structured",
            "section_id": "9b8a55ca-a4ac-4eee-9639-042ba0915b3c"
        },
        "timestamp": "2025-08-21 19:24:47.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "D4NM2HdyjQ5OWCPcteXf"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 1,
            "structured_type": "structured",
            "section_id": "9b8a55ca-a4ac-4eee-9639-042ba0915b3c"
        },
        "timestamp": "2025-08-21 19:24:47.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "E7qrMGGD5EMelRdVwHhL"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 2,
            "structured_type": "structured",
            "section_id": "9b8a55ca-a4ac-4eee-9639-042ba0915b3c"
        },
        "timestamp": "2025-08-21 19:24:47.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "ey9onI7mJ6BvFnphuC9j"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "structured",
            "section_id": "9b8a55ca-a4ac-4eee-9639-042ba0915b3c"
        },
        "timestamp": "2025-08-21 19:24:47.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "kGhXDiI9AuxlkMWANmPt"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "structured",
            "section_id": "9b8a55ca-a4ac-4eee-9639-042ba0915b3c"
        },
        "timestamp": "2025-08-21 19:24:47.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "kWdkPxl8ZDialeAvSubB"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "structured",
            "section_id": "9b8a55ca-a4ac-4eee-9639-042ba0915b3c"
        },
        "timestamp": "2025-08-21 19:24:47.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "l5U7YE66jQtLBbM8AhnB"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "structured",
            "section_id": "9b8a55ca-a4ac-4eee-9639-042ba0915b3c"
        },
        "timestamp": "2025-08-21 19:24:48.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "m3ZXS6hx9f56NuivCh9w"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 0,
            "structured_type": "structured",
            "section_id": "9b8a55ca-a4ac-4eee-9639-042ba0915b3c"
        },
        "timestamp": "2025-08-21 19:25:11.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "G3HtBaUnVtdoZX7f2YKd"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 1,
            "structured_type": "structured",
            "section_id": "9b8a55ca-a4ac-4eee-9639-042ba0915b3c"
        },
        "timestamp": "2025-08-21 19:25:11.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "Y2UeY5QcsaQJYM8lUf4D"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "structured",
            "section_id": "9b8a55ca-a4ac-4eee-9639-042ba0915b3c"
        },
        "timestamp": "2025-08-21 19:25:11.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "l1lcgmmgS6tKs0eGpJ6H"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 0,
            "structured_type": "structured",
            "section_id": "9b8a55ca-a4ac-4eee-9639-042ba0915b3c"
        },
        "timestamp": "2025-08-21 19:25:11.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "ol6d4WUTyeBZ7qyx1HkT"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "structured",
            "section_id": "9b8a55ca-a4ac-4eee-9639-042ba0915b3c"
        },
        "timestamp": "2025-08-21 19:25:11.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "t3NytF6yvxkEO1i5fOMh"
    },
    {
        "data": {},
        "timestamp": "2025-08-21 19:25:12.000",
        "event": "click_summarize_code",
        "source": "frontend",
        "id": "CjJgFXvUd6JpcFE1dCYU"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "structured",
            "section_id": "9b8a55ca-a4ac-4eee-9639-042ba0915b3c"
        },
        "timestamp": "2025-08-21 19:25:12.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "bbf3KyBtjq8HGWeBO1Nt"
    },
    {
        "data": {
            "summary": {
                "high_unstructured": "This code defines the StockChart React component, which renders a responsive line chart of stock closing prices using the Recharts library. The component first validates the input data, then extracts the company name and ticker for display in the chart header. It includes helper functions to format date strings, both for general use and specifically for rendering month abbreviations on the x-axis. The stock data is transformed into an array of objects with date and price fields, which is then fed to the LineChart component, complete with axes, tooltips, a legend, and a styled line representing the stock's closing prices.",
                "title": "StockChart React Component for Rendering Stock Price Line Charts",
                "low_structured": "• Defines a React component for stock charts\n• Uses Recharts to render a line chart\n• Displays company and ticker information",
                "medium_unstructured": "The StockChart component takes stock data as a prop and visualizes it as a line chart using the Recharts library. It extracts the company name and ticker, formats dates for display, and maps the data into a structure suitable for the chart. The component displays the chart with axes, tooltips, and a legend, and only renders if valid data is provided.",
                "medium_structured": "• Accepts a 'data' prop containing stock information\n• Extracts company name and ticker for display\n• Formats date strings for the x-axis using a helper function\n• Maps raw data to chart-friendly format with date and price\n• Renders a responsive line chart with axes, tooltip, and legend",
                "low_unstructured": "This code defines a React component that displays a stock price line chart using Recharts.",
                "high_structured": "• Defines the StockChart React component to visualize stock data\n• Validates input data before rendering\n  ◦ Returns null if data is missing or empty\n• Extracts company name and ticker from the data prop\n• Provides helper functions for date formatting\n  ◦ 'formatDateString' trims timestamps to the date portion\n  ◦ 'formatXAxisDate' converts date strings to month abbreviations for the x-axis\n• Transforms raw stock data into an array of objects with 'date' and 'price' keys for charting\n• Uses Recharts components to render the chart\n  ◦ ResponsiveContainer ensures the chart scales with its parent\n  ◦ LineChart displays the data with formatted axes, tooltips, and a legend\n  ◦ The Line component visualizes closing prices without dots, using a specific stroke color\n• Displays the company name and ticker above the chart"
            },
            "selected_code": "const StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };\n\n  // Helper to format date as MMM (e.g., Jan, Feb)\n  const formatXAxisDate = (dateStr) => {\n    const date = new Date(dateStr);\n    return date.toLocaleString(\"en-US\", { month: \"short\" });\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;"
        },
        "timestamp": "2025-08-21 19:25:21.000",
        "event": "summarize_selected_code",
        "source": "backend",
        "id": "HyhOtF5B11lbHwcIoFnp"
    },
    {
        "data": {
            "summary": "• Defines a React component for stock charts\n• Uses Recharts to render a line chart\n• Displays company and ticker information",
            "code": "13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Helper to format date as MMM (e.g., Jan, Feb)\n24:   const formatXAxisDate = (dateStr) => {\n25:     const date = new Date(dateStr);\n26:     return date.toLocaleString(\"en-US\", { month: \"short\" });\n27:   };\n28: \n29:   // Combine labels and values into an array of objects for Recharts\n30:   const chartData = data.data.map((item) => ({\n31:     date: item.date,\n32:     price: item.close,\n33:   }));\n34: \n35:   return (\n36:     <div style={{ marginTop: \"2rem\" }}>\n37:       <h3>\n38:         {company} ({ticker})\n39:       </h3>\n40:       <ResponsiveContainer width=\"100%\" height={300}>\n41:         <LineChart\n42:           data={chartData}\n43:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n44:         >\n45:           <XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />\n46:           <YAxis domain={[\"auto\", \"auto\"]} />\n47:           <Tooltip />\n48:           <Legend />\n49:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n50:         </LineChart>\n51:       </ResponsiveContainer>\n52:     </div>\n53:   );\n54: };\n55: \n56: export default StockChart;",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        },
                        {
                            "code": "export default StockChart;",
                            "line": 56
                        }
                    ],
                    "summaryComponent": "Defines a React component for stock charts"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 40
                        },
                        {
                            "code": "<LineChart",
                            "line": 41
                        },
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 49
                        }
                    ],
                    "summaryComponent": "Uses Recharts to render a line chart"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<h3>",
                            "line": 37
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 38
                        }
                    ],
                    "summaryComponent": "Displays company and ticker information"
                }
            ]
        },
        "timestamp": "2025-08-21 19:25:23.000",
        "event": "map_summary_code",
        "source": "backend",
        "id": "A8dY5khEbKEKq1tw1Pr2"
    },
    {
        "data": {
            "summary": "This code defines a React component that displays a stock price line chart using Recharts.",
            "code": "13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Helper to format date as MMM (e.g., Jan, Feb)\n24:   const formatXAxisDate = (dateStr) => {\n25:     const date = new Date(dateStr);\n26:     return date.toLocaleString(\"en-US\", { month: \"short\" });\n27:   };\n28: \n29:   // Combine labels and values into an array of objects for Recharts\n30:   const chartData = data.data.map((item) => ({\n31:     date: item.date,\n32:     price: item.close,\n33:   }));\n34: \n35:   return (\n36:     <div style={{ marginTop: \"2rem\" }}>\n37:       <h3>\n38:         {company} ({ticker})\n39:       </h3>\n40:       <ResponsiveContainer width=\"100%\" height={300}>\n41:         <LineChart\n42:           data={chartData}\n43:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n44:         >\n45:           <XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />\n46:           <YAxis domain={[\"auto\", \"auto\"]} />\n47:           <Tooltip />\n48:           <Legend />\n49:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n50:         </LineChart>\n51:       </ResponsiveContainer>\n52:     </div>\n53:   );\n54: };\n55: \n56: export default StockChart;",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        },
                        {
                            "code": "export default StockChart;",
                            "line": 56
                        }
                    ],
                    "summaryComponent": "defines a React component"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<LineChart",
                            "line": 41
                        },
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 49
                        }
                    ],
                    "summaryComponent": "displays a stock price line chart"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 40
                        },
                        {
                            "code": "<LineChart",
                            "line": 41
                        },
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />",
                            "line": 45
                        },
                        {
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                            "line": 46
                        },
                        {
                            "code": "<Tooltip />",
                            "line": 47
                        },
                        {
                            "code": "<Legend />",
                            "line": 48
                        },
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 49
                        }
                    ],
                    "summaryComponent": "using Recharts"
                }
            ]
        },
        "timestamp": "2025-08-21 19:25:23.000",
        "event": "map_summary_code",
        "source": "backend",
        "id": "A9FvUWfaWKMHWpGOKYRw"
    },
    {
        "data": {
            "summary": "The StockChart component takes stock data as a prop and visualizes it as a line chart using the Recharts library. It extracts the company name and ticker, formats dates for display, and maps the data into a structure suitable for the chart. The component displays the chart with axes, tooltips, and a legend, and only renders if valid data is provided.",
            "code": "13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Helper to format date as MMM (e.g., Jan, Feb)\n24:   const formatXAxisDate = (dateStr) => {\n25:     const date = new Date(dateStr);\n26:     return date.toLocaleString(\"en-US\", { month: \"short\" });\n27:   };\n28: \n29:   // Combine labels and values into an array of objects for Recharts\n30:   const chartData = data.data.map((item) => ({\n31:     date: item.date,\n32:     price: item.close,\n33:   }));\n34: \n35:   return (\n36:     <div style={{ marginTop: \"2rem\" }}>\n37:       <h3>\n38:         {company} ({ticker})\n39:       </h3>\n40:       <ResponsiveContainer width=\"100%\" height={300}>\n41:         <LineChart\n42:           data={chartData}\n43:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n44:         >\n45:           <XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />\n46:           <YAxis domain={[\"auto\", \"auto\"]} />\n47:           <Tooltip />\n48:           <Legend />\n49:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n50:         </LineChart>\n51:       </ResponsiveContainer>\n52:     </div>\n53:   );\n54: };\n55: \n56: export default StockChart;",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        },
                        {
                            "code": "export default StockChart;",
                            "line": 56
                        }
                    ],
                    "summaryComponent": "The StockChart component"
                },
                {
                    "codeSegments": [
                        {
                            "code": "({ data })",
                            "line": 13
                        }
                    ],
                    "summaryComponent": "takes stock data as a prop"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<LineChart",
                            "line": 41
                        },
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 49
                        }
                    ],
                    "summaryComponent": "visualizes it as a line chart using the Recharts library"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const company = data.name;",
                            "line": 16
                        },
                        {
                            "code": "const ticker = data.ticker;",
                            "line": 17
                        }
                    ],
                    "summaryComponent": "extracts the company name and ticker"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const formatDateString = (date) => {",
                            "line": 19
                        },
                        {
                            "code": "const formatXAxisDate = (dateStr) => {",
                            "line": 24
                        }
                    ],
                    "summaryComponent": "formats dates for display"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const chartData = data.data.map((item) => ({",
                            "line": 30
                        }
                    ],
                    "summaryComponent": "maps the data into a structure suitable for the chart"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />",
                            "line": 45
                        },
                        {
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                            "line": 46
                        },
                        {
                            "code": "<Tooltip />",
                            "line": 47
                        },
                        {
                            "code": "<Legend />",
                            "line": 48
                        }
                    ],
                    "summaryComponent": "displays the chart with axes, tooltips, and a legend"
                },
                {
                    "codeSegments": [
                        {
                            "code": "if (!data || !data.data || !data.data.length) return null;",
                            "line": 14
                        }
                    ],
                    "summaryComponent": "only renders if valid data is provided"
                }
            ]
        },
        "timestamp": "2025-08-21 19:25:26.000",
        "event": "map_summary_code",
        "source": "backend",
        "id": "MJH9Gpwlv6k5gSgASIT9"
    },
    {
        "data": {
            "summary": "• Defines the StockChart React component to visualize stock data\n• Validates input data before rendering\n  ◦ Returns null if data is missing or empty\n• Extracts company name and ticker from the data prop\n• Provides helper functions for date formatting\n  ◦ 'formatDateString' trims timestamps to the date portion\n  ◦ 'formatXAxisDate' converts date strings to month abbreviations for the x-axis\n• Transforms raw stock data into an array of objects with 'date' and 'price' keys for charting\n• Uses Recharts components to render the chart\n  ◦ ResponsiveContainer ensures the chart scales with its parent\n  ◦ LineChart displays the data with formatted axes, tooltips, and a legend\n  ◦ The Line component visualizes closing prices without dots, using a specific stroke color\n• Displays the company name and ticker above the chart",
            "code": "13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Helper to format date as MMM (e.g., Jan, Feb)\n24:   const formatXAxisDate = (dateStr) => {\n25:     const date = new Date(dateStr);\n26:     return date.toLocaleString(\"en-US\", { month: \"short\" });\n27:   };\n28: \n29:   // Combine labels and values into an array of objects for Recharts\n30:   const chartData = data.data.map((item) => ({\n31:     date: item.date,\n32:     price: item.close,\n33:   }));\n34: \n35:   return (\n36:     <div style={{ marginTop: \"2rem\" }}>\n37:       <h3>\n38:         {company} ({ticker})\n39:       </h3>\n40:       <ResponsiveContainer width=\"100%\" height={300}>\n41:         <LineChart\n42:           data={chartData}\n43:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n44:         >\n45:           <XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />\n46:           <YAxis domain={[\"auto\", \"auto\"]} />\n47:           <Tooltip />\n48:           <Legend />\n49:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n50:         </LineChart>\n51:       </ResponsiveContainer>\n52:     </div>\n53:   );\n54: };\n55: \n56: export default StockChart;",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        }
                    ],
                    "summaryComponent": "Defines the StockChart React component to visualize stock data"
                },
                {
                    "codeSegments": [
                        {
                            "code": "if (!data || !data.data || !data.data.length) return null;",
                            "line": 14
                        }
                    ],
                    "summaryComponent": "Validates input data before rendering"
                },
                {
                    "codeSegments": [
                        {
                            "code": "if (!data || !data.data || !data.data.length) return null;",
                            "line": 14
                        }
                    ],
                    "summaryComponent": "Returns null if data is missing or empty"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const company = data.name;",
                            "line": 16
                        },
                        {
                            "code": "const ticker = data.ticker;",
                            "line": 17
                        }
                    ],
                    "summaryComponent": "Extracts company name and ticker from the data prop"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const formatDateString = (date) => {",
                            "line": 19
                        },
                        {
                            "code": "const formatXAxisDate = (dateStr) => {",
                            "line": 24
                        }
                    ],
                    "summaryComponent": "Provides helper functions for date formatting"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const formatDateString = (date) => {",
                            "line": 19
                        },
                        {
                            "code": "return date.split(\"T\")[0];",
                            "line": 20
                        }
                    ],
                    "summaryComponent": "'formatDateString' trims timestamps to the date portion"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const formatXAxisDate = (dateStr) => {",
                            "line": 24
                        },
                        {
                            "code": "return date.toLocaleString(\"en-US\", { month: \"short\" });",
                            "line": 26
                        }
                    ],
                    "summaryComponent": "'formatXAxisDate' converts date strings to month abbreviations for the x-axis"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const chartData = data.data.map((item) => ({",
                            "line": 30
                        },
                        {
                            "code": "date: item.date,",
                            "line": 31
                        },
                        {
                            "code": "price: item.close,",
                            "line": 32
                        }
                    ],
                    "summaryComponent": "Transforms raw stock data into an array of objects with 'date' and 'price' keys for charting"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 40
                        },
                        {
                            "code": "<LineChart",
                            "line": 41
                        },
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />",
                            "line": 45
                        },
                        {
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                            "line": 46
                        },
                        {
                            "code": "<Tooltip />",
                            "line": 47
                        },
                        {
                            "code": "<Legend />",
                            "line": 48
                        },
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 49
                        }
                    ],
                    "summaryComponent": "Uses Recharts components to render the chart"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 40
                        }
                    ],
                    "summaryComponent": "ResponsiveContainer ensures the chart scales with its parent"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<LineChart",
                            "line": 41
                        },
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />",
                            "line": 45
                        },
                        {
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                            "line": 46
                        },
                        {
                            "code": "<Tooltip />",
                            "line": 47
                        },
                        {
                            "code": "<Legend />",
                            "line": 48
                        }
                    ],
                    "summaryComponent": "LineChart displays the data with formatted axes, tooltips, and a legend"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 49
                        }
                    ],
                    "summaryComponent": "The Line component visualizes closing prices without dots, using a specific stroke color"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<h3>",
                            "line": 37
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 38
                        }
                    ],
                    "summaryComponent": "Displays the company name and ticker above the chart"
                }
            ]
        },
        "timestamp": "2025-08-21 19:25:27.000",
        "event": "map_summary_code",
        "source": "backend",
        "id": "HSC7te1dxxLsoo59JTPh"
    },
    {
        "data": {
            "summary": "This code defines the StockChart React component, which renders a responsive line chart of stock closing prices using the Recharts library. The component first validates the input data, then extracts the company name and ticker for display in the chart header. It includes helper functions to format date strings, both for general use and specifically for rendering month abbreviations on the x-axis. The stock data is transformed into an array of objects with date and price fields, which is then fed to the LineChart component, complete with axes, tooltips, a legend, and a styled line representing the stock's closing prices.",
            "code": "13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Helper to format date as MMM (e.g., Jan, Feb)\n24:   const formatXAxisDate = (dateStr) => {\n25:     const date = new Date(dateStr);\n26:     return date.toLocaleString(\"en-US\", { month: \"short\" });\n27:   };\n28: \n29:   // Combine labels and values into an array of objects for Recharts\n30:   const chartData = data.data.map((item) => ({\n31:     date: item.date,\n32:     price: item.close,\n33:   }));\n34: \n35:   return (\n36:     <div style={{ marginTop: \"2rem\" }}>\n37:       <h3>\n38:         {company} ({ticker})\n39:       </h3>\n40:       <ResponsiveContainer width=\"100%\" height={300}>\n41:         <LineChart\n42:           data={chartData}\n43:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n44:         >\n45:           <XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />\n46:           <YAxis domain={[\"auto\", \"auto\"]} />\n47:           <Tooltip />\n48:           <Legend />\n49:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n50:         </LineChart>\n51:       </ResponsiveContainer>\n52:     </div>\n53:   );\n54: };\n55: \n56: export default StockChart;",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        }
                    ],
                    "summaryComponent": "defines the StockChart React component"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 40
                        },
                        {
                            "code": "<LineChart",
                            "line": 41
                        },
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 49
                        }
                    ],
                    "summaryComponent": "renders a responsive line chart of stock closing prices using the Recharts library"
                },
                {
                    "codeSegments": [
                        {
                            "code": "if (!data || !data.data || !data.data.length) return null;",
                            "line": 14
                        }
                    ],
                    "summaryComponent": "validates the input data"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const company = data.name;",
                            "line": 16
                        },
                        {
                            "code": "const ticker = data.ticker;",
                            "line": 17
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 38
                        }
                    ],
                    "summaryComponent": "extracts the company name and ticker for display in the chart header"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const formatDateString = (date) => {",
                            "line": 19
                        },
                        {
                            "code": "return date.split(\"T\")[0];",
                            "line": 20
                        }
                    ],
                    "summaryComponent": "includes helper functions to format date strings"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const formatXAxisDate = (dateStr) => {",
                            "line": 24
                        },
                        {
                            "code": "return date.toLocaleString(\"en-US\", { month: \"short\" });",
                            "line": 26
                        },
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />",
                            "line": 45
                        }
                    ],
                    "summaryComponent": "specifically for rendering month abbreviations on the x-axis"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const chartData = data.data.map((item) => ({",
                            "line": 30
                        },
                        {
                            "code": "date: item.date,",
                            "line": 31
                        },
                        {
                            "code": "price: item.close,",
                            "line": 32
                        }
                    ],
                    "summaryComponent": "stock data is transformed into an array of objects with date and price fields"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<LineChart",
                            "line": 41
                        },
                        {
                            "code": "data={chartData}",
                            "line": 42
                        }
                    ],
                    "summaryComponent": "fed to the LineChart component"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />",
                            "line": 45
                        },
                        {
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                            "line": 46
                        },
                        {
                            "code": "<Tooltip />",
                            "line": 47
                        },
                        {
                            "code": "<Legend />",
                            "line": 48
                        }
                    ],
                    "summaryComponent": "complete with axes, tooltips, a legend"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 49
                        }
                    ],
                    "summaryComponent": "a styled line representing the stock's closing prices"
                }
            ]
        },
        "timestamp": "2025-08-21 19:25:27.000",
        "event": "map_summary_code",
        "source": "backend",
        "id": "Qr380zuQA9B4Cs8iDAaf"
    },
    {
        "data": {
            "after_section_id": "687ecdd7-8507-4d47-8615-66871e00ab73",
            "before_section_id": "9b8a55ca-a4ac-4eee-9639-042ba0915b3c"
        },
        "timestamp": "2025-08-21 19:25:30.000",
        "event": "autotransit_section",
        "source": "frontend",
        "id": "3AIlogBwV0Rir9RIu1IL"
    },
    {
        "data": {
            "section_data": {
                "editPromptDetailLevel": null,
                "title": "StockChart React Component for Rendering Stock Price Line Charts",
                "selectedStructured": "unstructured",
                "lines": [
                    13,
                    56
                ],
                "summaryData": {
                    "high_unstructured": "This code defines the StockChart React component, which renders a responsive line chart of stock closing prices using the Recharts library. The component first validates the input data, then extracts the company name and ticker for display in the chart header. It includes helper functions to format date strings, both for general use and specifically for rendering month abbreviations on the x-axis. The stock data is transformed into an array of objects with date and price fields, which is then fed to the LineChart component, complete with axes, tooltips, a legend, and a styled line representing the stock's closing prices.",
                    "title": "StockChart React Component for Rendering Stock Price Line Charts",
                    "low_structured": "• Defines a React component for stock charts\n• Uses Recharts to render a line chart\n• Displays company and ticker information",
                    "medium_unstructured": "The StockChart component takes stock data as a prop and visualizes it as a line chart using the Recharts library. It extracts the company name and ticker, formats dates for display, and maps the data into a structure suitable for the chart. The component displays the chart with axes, tooltips, and a legend, and only renders if valid data is provided.",
                    "medium_structured": "• Accepts a 'data' prop containing stock information\n• Extracts company name and ticker for display\n• Formats date strings for the x-axis using a helper function\n• Maps raw data to chart-friendly format with date and price\n• Renders a responsive line chart with axes, tooltip, and legend",
                    "low_unstructured": "This code defines a React component that displays a stock price line chart using Recharts.",
                    "high_structured": "• Defines the StockChart React component to visualize stock data\n• Validates input data before rendering\n  ◦ Returns null if data is missing or empty\n• Extracts company name and ticker from the data prop\n• Provides helper functions for date formatting\n  ◦ 'formatDateString' trims timestamps to the date portion\n  ◦ 'formatXAxisDate' converts date strings to month abbreviations for the x-axis\n• Transforms raw stock data into an array of objects with 'date' and 'price' keys for charting\n• Uses Recharts components to render the chart\n  ◦ ResponsiveContainer ensures the chart scales with its parent\n  ◦ LineChart displays the data with formatted axes, tooltips, and a legend\n  ◦ The Line component visualizes closing prices without dots, using a specific stroke color\n• Displays the company name and ticker above the chart"
                },
                "createdAt": 1755836730000,
                "editPromptStructured": null,
                "summaryMappings": {
                    "high_unstructured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                }
                            ],
                            "summaryComponent": "defines the StockChart React component"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 40
                                },
                                {
                                    "code": "<LineChart",
                                    "line": 41
                                },
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 49
                                }
                            ],
                            "summaryComponent": "renders a responsive line chart of stock closing prices using the Recharts library"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "if (!data || !data.data || !data.data.length) return null;",
                                    "line": 14
                                }
                            ],
                            "summaryComponent": "validates the input data"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const company = data.name;",
                                    "line": 16
                                },
                                {
                                    "code": "const ticker = data.ticker;",
                                    "line": 17
                                },
                                {
                                    "code": "{company} ({ticker})",
                                    "line": 38
                                }
                            ],
                            "summaryComponent": "extracts the company name and ticker for display in the chart header"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const formatDateString = (date) => {",
                                    "line": 19
                                },
                                {
                                    "code": "return date.split(\"T\")[0];",
                                    "line": 20
                                }
                            ],
                            "summaryComponent": "includes helper functions to format date strings"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const formatXAxisDate = (dateStr) => {",
                                    "line": 24
                                },
                                {
                                    "code": "return date.toLocaleString(\"en-US\", { month: \"short\" });",
                                    "line": 26
                                },
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />",
                                    "line": 45
                                }
                            ],
                            "summaryComponent": "specifically for rendering month abbreviations on the x-axis"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const chartData = data.data.map((item) => ({",
                                    "line": 30
                                },
                                {
                                    "code": "date: item.date,",
                                    "line": 31
                                },
                                {
                                    "code": "price: item.close,",
                                    "line": 32
                                }
                            ],
                            "summaryComponent": "stock data is transformed into an array of objects with date and price fields"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<LineChart",
                                    "line": 41
                                },
                                {
                                    "code": "data={chartData}",
                                    "line": 42
                                }
                            ],
                            "summaryComponent": "fed to the LineChart component"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />",
                                    "line": 45
                                },
                                {
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                                    "line": 46
                                },
                                {
                                    "code": "<Tooltip />",
                                    "line": 47
                                },
                                {
                                    "code": "<Legend />",
                                    "line": 48
                                }
                            ],
                            "summaryComponent": "complete with axes, tooltips, a legend"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 49
                                }
                            ],
                            "summaryComponent": "a styled line representing the stock's closing prices"
                        }
                    ],
                    "low_structured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                },
                                {
                                    "code": "export default StockChart;",
                                    "line": 56
                                }
                            ],
                            "summaryComponent": "Defines a React component for stock charts"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 40
                                },
                                {
                                    "code": "<LineChart",
                                    "line": 41
                                },
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 49
                                }
                            ],
                            "summaryComponent": "Uses Recharts to render a line chart"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<h3>",
                                    "line": 37
                                },
                                {
                                    "code": "{company} ({ticker})",
                                    "line": 38
                                }
                            ],
                            "summaryComponent": "Displays company and ticker information"
                        }
                    ],
                    "medium_unstructured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                },
                                {
                                    "code": "export default StockChart;",
                                    "line": 56
                                }
                            ],
                            "summaryComponent": "The StockChart component"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "({ data })",
                                    "line": 13
                                }
                            ],
                            "summaryComponent": "takes stock data as a prop"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<LineChart",
                                    "line": 41
                                },
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 49
                                }
                            ],
                            "summaryComponent": "visualizes it as a line chart using the Recharts library"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const company = data.name;",
                                    "line": 16
                                },
                                {
                                    "code": "const ticker = data.ticker;",
                                    "line": 17
                                }
                            ],
                            "summaryComponent": "extracts the company name and ticker"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const formatDateString = (date) => {",
                                    "line": 19
                                },
                                {
                                    "code": "const formatXAxisDate = (dateStr) => {",
                                    "line": 24
                                }
                            ],
                            "summaryComponent": "formats dates for display"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const chartData = data.data.map((item) => ({",
                                    "line": 30
                                }
                            ],
                            "summaryComponent": "maps the data into a structure suitable for the chart"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />",
                                    "line": 45
                                },
                                {
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                                    "line": 46
                                },
                                {
                                    "code": "<Tooltip />",
                                    "line": 47
                                },
                                {
                                    "code": "<Legend />",
                                    "line": 48
                                }
                            ],
                            "summaryComponent": "displays the chart with axes, tooltips, and a legend"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "if (!data || !data.data || !data.data.length) return null;",
                                    "line": 14
                                }
                            ],
                            "summaryComponent": "only renders if valid data is provided"
                        }
                    ],
                    "medium_structured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                }
                            ],
                            "summaryComponent": "Accepts a 'data' prop containing stock information"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const company = data.name;",
                                    "line": 16
                                },
                                {
                                    "code": "const ticker = data.ticker;",
                                    "line": 17
                                },
                                {
                                    "code": "{company} ({ticker})",
                                    "line": 38
                                }
                            ],
                            "summaryComponent": "Extracts company name and ticker for display"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const formatXAxisDate = (dateStr) => {",
                                    "line": 24
                                },
                                {
                                    "code": "tickFormatter={formatXAxisDate}",
                                    "line": 45
                                }
                            ],
                            "summaryComponent": "Formats date strings for the x-axis using a helper function"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const chartData = data.data.map((item) => ({",
                                    "line": 30
                                },
                                {
                                    "code": "date: item.date,",
                                    "line": 31
                                },
                                {
                                    "code": "price: item.close,",
                                    "line": 32
                                }
                            ],
                            "summaryComponent": "Maps raw data to chart-friendly format with date and price"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 40
                                },
                                {
                                    "code": "<LineChart",
                                    "line": 41
                                },
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />",
                                    "line": 45
                                },
                                {
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                                    "line": 46
                                },
                                {
                                    "code": "<Tooltip />",
                                    "line": 47
                                },
                                {
                                    "code": "<Legend />",
                                    "line": 48
                                },
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 49
                                }
                            ],
                            "summaryComponent": "Renders a responsive line chart with axes, tooltip, and legend"
                        }
                    ],
                    "low_unstructured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                },
                                {
                                    "code": "export default StockChart;",
                                    "line": 56
                                }
                            ],
                            "summaryComponent": "defines a React component"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<LineChart",
                                    "line": 41
                                },
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 49
                                }
                            ],
                            "summaryComponent": "displays a stock price line chart"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 40
                                },
                                {
                                    "code": "<LineChart",
                                    "line": 41
                                },
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />",
                                    "line": 45
                                },
                                {
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                                    "line": 46
                                },
                                {
                                    "code": "<Tooltip />",
                                    "line": 47
                                },
                                {
                                    "code": "<Legend />",
                                    "line": 48
                                },
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 49
                                }
                            ],
                            "summaryComponent": "using Recharts"
                        }
                    ],
                    "high_structured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                }
                            ],
                            "summaryComponent": "Defines the StockChart React component to visualize stock data"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "if (!data || !data.data || !data.data.length) return null;",
                                    "line": 14
                                }
                            ],
                            "summaryComponent": "Validates input data before rendering"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "if (!data || !data.data || !data.data.length) return null;",
                                    "line": 14
                                }
                            ],
                            "summaryComponent": "Returns null if data is missing or empty"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const company = data.name;",
                                    "line": 16
                                },
                                {
                                    "code": "const ticker = data.ticker;",
                                    "line": 17
                                }
                            ],
                            "summaryComponent": "Extracts company name and ticker from the data prop"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const formatDateString = (date) => {",
                                    "line": 19
                                },
                                {
                                    "code": "const formatXAxisDate = (dateStr) => {",
                                    "line": 24
                                }
                            ],
                            "summaryComponent": "Provides helper functions for date formatting"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const formatDateString = (date) => {",
                                    "line": 19
                                },
                                {
                                    "code": "return date.split(\"T\")[0];",
                                    "line": 20
                                }
                            ],
                            "summaryComponent": "'formatDateString' trims timestamps to the date portion"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const formatXAxisDate = (dateStr) => {",
                                    "line": 24
                                },
                                {
                                    "code": "return date.toLocaleString(\"en-US\", { month: \"short\" });",
                                    "line": 26
                                }
                            ],
                            "summaryComponent": "'formatXAxisDate' converts date strings to month abbreviations for the x-axis"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const chartData = data.data.map((item) => ({",
                                    "line": 30
                                },
                                {
                                    "code": "date: item.date,",
                                    "line": 31
                                },
                                {
                                    "code": "price: item.close,",
                                    "line": 32
                                }
                            ],
                            "summaryComponent": "Transforms raw stock data into an array of objects with 'date' and 'price' keys for charting"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 40
                                },
                                {
                                    "code": "<LineChart",
                                    "line": 41
                                },
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />",
                                    "line": 45
                                },
                                {
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                                    "line": 46
                                },
                                {
                                    "code": "<Tooltip />",
                                    "line": 47
                                },
                                {
                                    "code": "<Legend />",
                                    "line": 48
                                },
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 49
                                }
                            ],
                            "summaryComponent": "Uses Recharts components to render the chart"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 40
                                }
                            ],
                            "summaryComponent": "ResponsiveContainer ensures the chart scales with its parent"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<LineChart",
                                    "line": 41
                                },
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />",
                                    "line": 45
                                },
                                {
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                                    "line": 46
                                },
                                {
                                    "code": "<Tooltip />",
                                    "line": 47
                                },
                                {
                                    "code": "<Legend />",
                                    "line": 48
                                }
                            ],
                            "summaryComponent": "LineChart displays the data with formatted axes, tooltips, and a legend"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 49
                                }
                            ],
                            "summaryComponent": "The Line component visualizes closing prices without dots, using a specific stroke color"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<h3>",
                                    "line": 37
                                },
                                {
                                    "code": "{company} ({ticker})",
                                    "line": 38
                                }
                            ],
                            "summaryComponent": "Displays the company name and ticker above the chart"
                        }
                    ]
                },
                "selectedDetailLevel": "medium",
                "metadata": {
                    "offset": 156,
                    "fullPath": "/project/workspace/frontend/src/StockChart.jsx",
                    "originalCode": "const StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };\n\n  // Helper to format date as MMM (e.g., Jan, Feb)\n  const formatXAxisDate = (dateStr) => {\n    const date = new Date(dateStr);\n    return date.toLocaleString(\"en-US\", { month: \"short\" });\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;",
                    "filename": "StockChart.jsx",
                    "id": "687ecdd7-8507-4d47-8615-66871e00ab73"
                },
                "editPromptValue": ""
            },
            "section_id": "687ecdd7-8507-4d47-8615-66871e00ab73"
        },
        "timestamp": "2025-08-21 19:25:30.000",
        "event": "create_new_section",
        "source": "frontend",
        "id": "LbEqvzgBmlHJwWuN1MvV"
    },
    {
        "data": {
            "summary": "• Accepts a 'data' prop containing stock information\n• Extracts company name and ticker for display\n• Formats date strings for the x-axis using a helper function\n• Maps raw data to chart-friendly format with date and price\n• Renders a responsive line chart with axes, tooltip, and legend",
            "code": "13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Helper to format date as MMM (e.g., Jan, Feb)\n24:   const formatXAxisDate = (dateStr) => {\n25:     const date = new Date(dateStr);\n26:     return date.toLocaleString(\"en-US\", { month: \"short\" });\n27:   };\n28: \n29:   // Combine labels and values into an array of objects for Recharts\n30:   const chartData = data.data.map((item) => ({\n31:     date: item.date,\n32:     price: item.close,\n33:   }));\n34: \n35:   return (\n36:     <div style={{ marginTop: \"2rem\" }}>\n37:       <h3>\n38:         {company} ({ticker})\n39:       </h3>\n40:       <ResponsiveContainer width=\"100%\" height={300}>\n41:         <LineChart\n42:           data={chartData}\n43:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n44:         >\n45:           <XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />\n46:           <YAxis domain={[\"auto\", \"auto\"]} />\n47:           <Tooltip />\n48:           <Legend />\n49:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n50:         </LineChart>\n51:       </ResponsiveContainer>\n52:     </div>\n53:   );\n54: };\n55: \n56: export default StockChart;",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        }
                    ],
                    "summaryComponent": "Accepts a 'data' prop containing stock information"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const company = data.name;",
                            "line": 16
                        },
                        {
                            "code": "const ticker = data.ticker;",
                            "line": 17
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 38
                        }
                    ],
                    "summaryComponent": "Extracts company name and ticker for display"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const formatXAxisDate = (dateStr) => {",
                            "line": 24
                        },
                        {
                            "code": "tickFormatter={formatXAxisDate}",
                            "line": 45
                        }
                    ],
                    "summaryComponent": "Formats date strings for the x-axis using a helper function"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const chartData = data.data.map((item) => ({",
                            "line": 30
                        },
                        {
                            "code": "date: item.date,",
                            "line": 31
                        },
                        {
                            "code": "price: item.close,",
                            "line": 32
                        }
                    ],
                    "summaryComponent": "Maps raw data to chart-friendly format with date and price"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 40
                        },
                        {
                            "code": "<LineChart",
                            "line": 41
                        },
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />",
                            "line": 45
                        },
                        {
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                            "line": 46
                        },
                        {
                            "code": "<Tooltip />",
                            "line": 47
                        },
                        {
                            "code": "<Legend />",
                            "line": 48
                        },
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 49
                        }
                    ],
                    "summaryComponent": "Renders a responsive line chart with axes, tooltip, and legend"
                }
            ]
        },
        "timestamp": "2025-08-21 19:25:30.000",
        "event": "map_summary_code",
        "source": "backend",
        "id": "hOzrucSbl2nVomRApVLr"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 0,
            "structured_type": "unstructured",
            "section_id": "687ecdd7-8507-4d47-8615-66871e00ab73"
        },
        "timestamp": "2025-08-21 19:25:32.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "6WowgkPVPTEhZFEpnuRG"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "unstructured",
            "section_id": "687ecdd7-8507-4d47-8615-66871e00ab73"
        },
        "timestamp": "2025-08-21 19:25:32.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "K3gOLucQRnbEiOoSvwPA"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "unstructured",
            "section_id": "687ecdd7-8507-4d47-8615-66871e00ab73"
        },
        "timestamp": "2025-08-21 19:25:32.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "O8fGtXAxup3QxgRmzlAN"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 1,
            "structured_type": "unstructured",
            "section_id": "687ecdd7-8507-4d47-8615-66871e00ab73"
        },
        "timestamp": "2025-08-21 19:25:32.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "VoorMvketNaqnYRnmSY1"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 2,
            "structured_type": "unstructured",
            "section_id": "687ecdd7-8507-4d47-8615-66871e00ab73"
        },
        "timestamp": "2025-08-21 19:25:32.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "bg9p110OKSv1SLFaF0X0"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "unstructured",
            "section_id": "687ecdd7-8507-4d47-8615-66871e00ab73"
        },
        "timestamp": "2025-08-21 19:25:32.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "hzlbOIpI5zSFEsBY1EcJ"
    },
    {
        "data": {
            "before_structured": "unstructured",
            "before_detail_level": "medium",
            "after_structured": "structured",
            "after_detail_level": "medium",
            "section_id": "687ecdd7-8507-4d47-8615-66871e00ab73"
        },
        "timestamp": "2025-08-21 19:25:33.000",
        "event": "change_summary_level",
        "source": "frontend",
        "id": "utLNzdrjkRIP0JkNtpMM"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 0,
            "structured_type": "structured",
            "section_id": "687ecdd7-8507-4d47-8615-66871e00ab73"
        },
        "timestamp": "2025-08-21 19:25:34.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "0KV2PL9tSqtGGiOW6aOt"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "structured",
            "section_id": "687ecdd7-8507-4d47-8615-66871e00ab73"
        },
        "timestamp": "2025-08-21 19:25:34.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "KSzDkUFPSAKoGzI5Sbxf"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "structured",
            "section_id": "687ecdd7-8507-4d47-8615-66871e00ab73"
        },
        "timestamp": "2025-08-21 19:25:38.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "4JxyZ7aCgCJjscC1643D"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 3,
            "structured_type": "structured",
            "section_id": "687ecdd7-8507-4d47-8615-66871e00ab73"
        },
        "timestamp": "2025-08-21 19:25:38.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "aKMX0zYCh4GFG29QSvkH"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 2,
            "structured_type": "structured",
            "section_id": "687ecdd7-8507-4d47-8615-66871e00ab73"
        },
        "timestamp": "2025-08-21 19:25:38.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "lllVLb00UNTCMCHKIuiu"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "structured",
            "section_id": "687ecdd7-8507-4d47-8615-66871e00ab73"
        },
        "timestamp": "2025-08-21 19:25:44.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "Nc0IBZBpxXn3BbNO5cqM"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 4,
            "structured_type": "structured",
            "section_id": "687ecdd7-8507-4d47-8615-66871e00ab73"
        },
        "timestamp": "2025-08-21 19:25:49.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "A8eSQPq9Fp9pX6PrulMX"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "structured",
            "section_id": "687ecdd7-8507-4d47-8615-66871e00ab73"
        },
        "timestamp": "2025-08-21 19:25:49.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "VCD8fn5cjsjuW2oPxXG6"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "structured",
            "section_id": "687ecdd7-8507-4d47-8615-66871e00ab73"
        },
        "timestamp": "2025-08-21 19:25:49.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "g6v0Vyp7qWIT5uoQiJ6j"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 3,
            "structured_type": "structured",
            "section_id": "687ecdd7-8507-4d47-8615-66871e00ab73"
        },
        "timestamp": "2025-08-21 19:25:49.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "n5k6elRRWcsIi3oOfAE8"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 2,
            "structured_type": "structured",
            "section_id": "687ecdd7-8507-4d47-8615-66871e00ab73"
        },
        "timestamp": "2025-08-21 19:25:49.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "oO3cHEfT27Ym9lMki0Er"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "structured",
            "section_id": "687ecdd7-8507-4d47-8615-66871e00ab73"
        },
        "timestamp": "2025-08-21 19:25:53.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "N7OQPnZfeAJHmtbvJJwc"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 2,
            "structured_type": "structured",
            "section_id": "687ecdd7-8507-4d47-8615-66871e00ab73"
        },
        "timestamp": "2025-08-21 19:25:53.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "TzBw6aCV3AnS1pG7kY5J"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 3,
            "structured_type": "structured",
            "section_id": "687ecdd7-8507-4d47-8615-66871e00ab73"
        },
        "timestamp": "2025-08-21 19:25:53.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "gbXMuzW7h4lLWf2JICgU"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "structured",
            "section_id": "687ecdd7-8507-4d47-8615-66871e00ab73"
        },
        "timestamp": "2025-08-21 19:25:53.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "yp1eKPy4kLUo6edbDhpt"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 0,
            "structured_type": "structured",
            "section_id": "687ecdd7-8507-4d47-8615-66871e00ab73"
        },
        "timestamp": "2025-08-21 19:25:54.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "8TJCiuzSIdMfQVWL2rrV"
    },
    {
        "data": {
            "before_structured": "structured",
            "before_detail_level": "medium",
            "after_structured": "structured",
            "after_detail_level": "high",
            "section_id": "687ecdd7-8507-4d47-8615-66871e00ab73"
        },
        "timestamp": "2025-08-21 19:25:54.000",
        "event": "change_summary_level",
        "source": "frontend",
        "id": "8eWzHAhOMpceAFrB30Hx"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "structured",
            "section_id": "687ecdd7-8507-4d47-8615-66871e00ab73"
        },
        "timestamp": "2025-08-21 19:25:54.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "P2bcL6ny8jiSGo4ftrMI"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "structured",
            "section_id": "687ecdd7-8507-4d47-8615-66871e00ab73"
        },
        "timestamp": "2025-08-21 19:25:54.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "UBmCDklgwmQXzmF7dewV"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 1,
            "structured_type": "structured",
            "section_id": "687ecdd7-8507-4d47-8615-66871e00ab73"
        },
        "timestamp": "2025-08-21 19:25:54.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "lUYUszksEBqaC4C0aX9e"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "structured",
            "section_id": "687ecdd7-8507-4d47-8615-66871e00ab73"
        },
        "timestamp": "2025-08-21 19:25:54.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "wd1VAgg0RxQYafJHiGvM"
    },
    {
        "data": {
            "detail_level": "high",
            "structured_type": "structured",
            "section_id": "687ecdd7-8507-4d47-8615-66871e00ab73"
        },
        "timestamp": "2025-08-21 19:25:55.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "7zU3FKrdkBHUAhwzfoBe"
    },
    {
        "data": {
            "detail_level": "high",
            "structured_type": "structured",
            "section_id": "687ecdd7-8507-4d47-8615-66871e00ab73"
        },
        "timestamp": "2025-08-21 19:25:55.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "CWctoYgeoJDntEqmXDEr"
    },
    {
        "data": {
            "detail_level": "high",
            "structured_type": "structured",
            "section_id": "687ecdd7-8507-4d47-8615-66871e00ab73"
        },
        "timestamp": "2025-08-21 19:25:55.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "HItDqpoIIP3qyyeSEf2I"
    },
    {
        "data": {
            "detail_level": "high",
            "structured_type": "structured",
            "section_id": "687ecdd7-8507-4d47-8615-66871e00ab73"
        },
        "timestamp": "2025-08-21 19:25:55.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "Htv6RkZkWK1Ft0pFgbGx"
    },
    {
        "data": {
            "detail_level": "high",
            "mapping_index": 6,
            "structured_type": "structured",
            "section_id": "687ecdd7-8507-4d47-8615-66871e00ab73"
        },
        "timestamp": "2025-08-21 19:25:55.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "Nt6BEFzTeuBGIzEOJ8K9"
    },
    {
        "data": {
            "detail_level": "high",
            "mapping_index": 0,
            "structured_type": "structured",
            "section_id": "687ecdd7-8507-4d47-8615-66871e00ab73"
        },
        "timestamp": "2025-08-21 19:25:55.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "Uw65KW0HB1MAAHdr4QXu"
    },
    {
        "data": {
            "detail_level": "high",
            "mapping_index": 5,
            "structured_type": "structured",
            "section_id": "687ecdd7-8507-4d47-8615-66871e00ab73"
        },
        "timestamp": "2025-08-21 19:25:55.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "mat3OUeQkz96yp8UJPyo"
    },
    {
        "data": {
            "detail_level": "high",
            "mapping_index": 3,
            "structured_type": "structured",
            "section_id": "687ecdd7-8507-4d47-8615-66871e00ab73"
        },
        "timestamp": "2025-08-21 19:25:55.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "rICDALz0esdLiKLdeed7"
    },
    {
        "data": {
            "detail_level": "high",
            "mapping_index": 7,
            "structured_type": "structured",
            "section_id": "687ecdd7-8507-4d47-8615-66871e00ab73"
        },
        "timestamp": "2025-08-21 19:25:56.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "3Y5dHObdY8NY7YboJVKr"
    },
    {
        "data": {
            "detail_level": "high",
            "structured_type": "structured",
            "section_id": "687ecdd7-8507-4d47-8615-66871e00ab73"
        },
        "timestamp": "2025-08-21 19:25:56.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "FC7yM80fLbgObpOquCwu"
    },
    {
        "data": {
            "detail_level": "high",
            "mapping_index": 7,
            "structured_type": "structured",
            "section_id": "687ecdd7-8507-4d47-8615-66871e00ab73"
        },
        "timestamp": "2025-08-21 19:25:56.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "rbATQFEPgfoOvJUd1BmN"
    },
    {
        "data": {
            "detail_level": "high",
            "mapping_index": 8,
            "structured_type": "structured",
            "section_id": "687ecdd7-8507-4d47-8615-66871e00ab73"
        },
        "timestamp": "2025-08-21 19:25:59.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "DOqF4WwPP7qJZQPAPktx"
    },
    {
        "data": {
            "detail_level": "high",
            "structured_type": "structured",
            "section_id": "687ecdd7-8507-4d47-8615-66871e00ab73"
        },
        "timestamp": "2025-08-21 19:25:59.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "anGiCeOplR4tHqJNAE6K"
    },
    {
        "data": {
            "detail_level": "high",
            "structured_type": "structured",
            "section_id": "687ecdd7-8507-4d47-8615-66871e00ab73"
        },
        "timestamp": "2025-08-21 19:26:02.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "7eGqW3VV5aVWRIop1ggF"
    },
    {
        "data": {
            "detail_level": "high",
            "structured_type": "structured",
            "section_id": "687ecdd7-8507-4d47-8615-66871e00ab73"
        },
        "timestamp": "2025-08-21 19:26:02.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "JsFeGLJ6OKq24aQP3knj"
    },
    {
        "data": {
            "detail_level": "high",
            "structured_type": "structured",
            "section_id": "687ecdd7-8507-4d47-8615-66871e00ab73"
        },
        "timestamp": "2025-08-21 19:26:02.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "QuHmJB52yOpmNzg564YY"
    },
    {
        "data": {
            "detail_level": "high",
            "mapping_index": 10,
            "structured_type": "structured",
            "section_id": "687ecdd7-8507-4d47-8615-66871e00ab73"
        },
        "timestamp": "2025-08-21 19:26:02.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "XcOTXycI3t9qlPuaEWGj"
    },
    {
        "data": {
            "detail_level": "high",
            "mapping_index": 12,
            "structured_type": "structured",
            "section_id": "687ecdd7-8507-4d47-8615-66871e00ab73"
        },
        "timestamp": "2025-08-21 19:26:02.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "hGneofxn5sgLI0zf2VWx"
    },
    {
        "data": {
            "detail_level": "high",
            "structured_type": "structured",
            "section_id": "687ecdd7-8507-4d47-8615-66871e00ab73"
        },
        "timestamp": "2025-08-21 19:26:02.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "iC8ghFpz4Vgd8VGssUiB"
    },
    {
        "data": {
            "detail_level": "high",
            "mapping_index": 9,
            "structured_type": "structured",
            "section_id": "687ecdd7-8507-4d47-8615-66871e00ab73"
        },
        "timestamp": "2025-08-21 19:26:02.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "q2O1ps5kTEUD5dKk3KCY"
    },
    {
        "data": {
            "detail_level": "high",
            "mapping_index": 11,
            "structured_type": "structured",
            "section_id": "687ecdd7-8507-4d47-8615-66871e00ab73"
        },
        "timestamp": "2025-08-21 19:26:02.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "qPbt53VrczxUpq7sAK6d"
    },
    {
        "data": {
            "detail_level": "high",
            "structured_type": "structured",
            "section_id": "687ecdd7-8507-4d47-8615-66871e00ab73"
        },
        "timestamp": "2025-08-21 19:26:04.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "NpQA10kS2QnHJAa8teou"
    },
    {
        "data": {
            "detail_level": "high",
            "mapping_index": 11,
            "structured_type": "structured",
            "section_id": "687ecdd7-8507-4d47-8615-66871e00ab73"
        },
        "timestamp": "2025-08-21 19:26:04.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "jlmb55aX9spshLh2yftE"
    },
    {
        "data": {
            "detail_level": "high",
            "structured_type": "structured",
            "section_id": "687ecdd7-8507-4d47-8615-66871e00ab73"
        },
        "timestamp": "2025-08-21 19:26:07.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "SQ2KrHtWINRDuLJX08qj"
    },
    {
        "data": {
            "detail_level": "high",
            "structured_type": "structured",
            "section_id": "687ecdd7-8507-4d47-8615-66871e00ab73"
        },
        "timestamp": "2025-08-21 19:26:09.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "MFQUbpQwenAQbkFz7V0y"
    },
    {
        "data": {
            "detail_level": "high",
            "mapping_index": 12,
            "structured_type": "structured",
            "section_id": "687ecdd7-8507-4d47-8615-66871e00ab73"
        },
        "timestamp": "2025-08-21 19:26:09.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "SMh6xY24j5g6Owh67oE5"
    },
    {
        "data": {
            "detail_level": "high",
            "structured_type": "structured",
            "section_id": "687ecdd7-8507-4d47-8615-66871e00ab73"
        },
        "timestamp": "2025-08-21 19:26:10.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "11O3KzsB1tAh5ZxHejqE"
    },
    {
        "data": {
            "detail_level": "high",
            "mapping_index": 11,
            "structured_type": "structured",
            "section_id": "687ecdd7-8507-4d47-8615-66871e00ab73"
        },
        "timestamp": "2025-08-21 19:26:10.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "7WTV6b2zZvVCLBZt9MWP"
    },
    {
        "data": {
            "detail_level": "high",
            "mapping_index": 11,
            "structured_type": "structured",
            "section_id": "687ecdd7-8507-4d47-8615-66871e00ab73"
        },
        "timestamp": "2025-08-21 19:26:12.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "4Ova3JArK6ueOXqvUWdq"
    },
    {
        "data": {
            "detail_level": "high",
            "structured_type": "structured",
            "section_id": "687ecdd7-8507-4d47-8615-66871e00ab73"
        },
        "timestamp": "2025-08-21 19:26:12.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "90GPByg6HqAwODmcWlLf"
    },
    {
        "data": {
            "detail_level": "high",
            "mapping_index": 9,
            "structured_type": "structured",
            "section_id": "687ecdd7-8507-4d47-8615-66871e00ab73"
        },
        "timestamp": "2025-08-21 19:26:12.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "96zV213w7lR7oZg8U6vo"
    },
    {
        "data": {
            "detail_level": "high",
            "mapping_index": 10,
            "structured_type": "structured",
            "section_id": "687ecdd7-8507-4d47-8615-66871e00ab73"
        },
        "timestamp": "2025-08-21 19:26:12.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "9B9HZWT5MJsX8hogfVgn"
    },
    {
        "data": {
            "detail_level": "high",
            "structured_type": "structured",
            "section_id": "687ecdd7-8507-4d47-8615-66871e00ab73"
        },
        "timestamp": "2025-08-21 19:26:12.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "vKROohKg0BIVYDFbBbMp"
    },
    {
        "data": {
            "detail_level": "high",
            "structured_type": "structured",
            "section_id": "687ecdd7-8507-4d47-8615-66871e00ab73"
        },
        "timestamp": "2025-08-21 19:26:13.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "5EulhvdtPZrWz8kKDzge"
    },
    {
        "data": {
            "detail_level": "high",
            "mapping_index": 10,
            "structured_type": "structured",
            "section_id": "687ecdd7-8507-4d47-8615-66871e00ab73"
        },
        "timestamp": "2025-08-21 19:26:13.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "hrvMvpw267cyk1xYw9nh"
    },
    {
        "data": {
            "detail_level": "high",
            "mapping_index": 9,
            "structured_type": "structured",
            "section_id": "687ecdd7-8507-4d47-8615-66871e00ab73"
        },
        "timestamp": "2025-08-21 19:26:17.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "hiQEvv29rW0sTxry7cM8"
    },
    {
        "data": {
            "detail_level": "high",
            "structured_type": "structured",
            "section_id": "687ecdd7-8507-4d47-8615-66871e00ab73"
        },
        "timestamp": "2025-08-21 19:26:17.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "p1BmJdzJKol2EBqge78Y"
    },
    {
        "data": {
            "detail_level": "high",
            "structured_type": "structured",
            "section_id": "687ecdd7-8507-4d47-8615-66871e00ab73"
        },
        "timestamp": "2025-08-21 19:26:20.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "6xqWNohoe3pwNxDfQUfo"
    },
    {
        "data": {
            "detail_level": "high",
            "structured_type": "structured",
            "section_id": "687ecdd7-8507-4d47-8615-66871e00ab73"
        },
        "timestamp": "2025-08-21 19:26:20.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "8gX2MFlzyHSZCL00zoDk"
    },
    {
        "data": {
            "detail_level": "high",
            "mapping_index": 11,
            "structured_type": "structured",
            "section_id": "687ecdd7-8507-4d47-8615-66871e00ab73"
        },
        "timestamp": "2025-08-21 19:26:20.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "Nk4tXPc8pEOCURCqy2zr"
    },
    {
        "data": {
            "detail_level": "high",
            "structured_type": "structured",
            "section_id": "687ecdd7-8507-4d47-8615-66871e00ab73"
        },
        "timestamp": "2025-08-21 19:26:20.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "SzjXSePgmJUYI9x3DJPo"
    },
    {
        "data": {
            "detail_level": "high",
            "mapping_index": 10,
            "structured_type": "structured",
            "section_id": "687ecdd7-8507-4d47-8615-66871e00ab73"
        },
        "timestamp": "2025-08-21 19:26:20.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "anUC6twElfmRJhZi7Ayd"
    },
    {
        "data": {
            "detail_level": "high",
            "structured_type": "structured",
            "section_id": "687ecdd7-8507-4d47-8615-66871e00ab73"
        },
        "timestamp": "2025-08-21 19:26:20.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "nzBCL0UYQEeFN8ijNEdW"
    },
    {
        "data": {
            "detail_level": "high",
            "mapping_index": 12,
            "structured_type": "structured",
            "section_id": "687ecdd7-8507-4d47-8615-66871e00ab73"
        },
        "timestamp": "2025-08-21 19:26:20.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "wad114AkqxJMZvE8KNXd"
    },
    {
        "data": {
            "detail_level": "high",
            "mapping_index": 9,
            "structured_type": "structured",
            "section_id": "687ecdd7-8507-4d47-8615-66871e00ab73"
        },
        "timestamp": "2025-08-21 19:26:21.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "9RmFrJIrwtKuIppPzH5f"
    },
    {
        "data": {
            "detail_level": "high",
            "structured_type": "structured",
            "section_id": "687ecdd7-8507-4d47-8615-66871e00ab73"
        },
        "timestamp": "2025-08-21 19:26:21.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "BO2tP5wG7NQYJwmz6Pa0"
    },
    {
        "data": {
            "detail_level": "high",
            "mapping_index": 11,
            "structured_type": "structured",
            "section_id": "687ecdd7-8507-4d47-8615-66871e00ab73"
        },
        "timestamp": "2025-08-21 19:26:21.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "WNlX395vJFtiGGMmoTAV"
    },
    {
        "data": {
            "detail_level": "high",
            "mapping_index": 10,
            "structured_type": "structured",
            "section_id": "687ecdd7-8507-4d47-8615-66871e00ab73"
        },
        "timestamp": "2025-08-21 19:26:21.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "YmPTe8qjgIibTOBczukm"
    },
    {
        "data": {
            "detail_level": "high",
            "structured_type": "structured",
            "section_id": "687ecdd7-8507-4d47-8615-66871e00ab73"
        },
        "timestamp": "2025-08-21 19:26:21.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "ji9PWtTR8ThBIXekH0ef"
    },
    {
        "data": {
            "detail_level": "high",
            "structured_type": "structured",
            "section_id": "687ecdd7-8507-4d47-8615-66871e00ab73"
        },
        "timestamp": "2025-08-21 19:26:21.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "xp7wdaPRgWuQpndldizU"
    },
    {
        "data": {
            "detail_level": "high",
            "structured_type": "structured",
            "section_id": "687ecdd7-8507-4d47-8615-66871e00ab73"
        },
        "timestamp": "2025-08-21 19:26:21.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "y0BIqrOwCB8pit5lO33Z"
    },
    {
        "data": {
            "detail_level": "high",
            "mapping_index": 12,
            "structured_type": "structured",
            "section_id": "687ecdd7-8507-4d47-8615-66871e00ab73"
        },
        "timestamp": "2025-08-21 19:26:21.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "ygw04gBqLC6xL56zdPL2"
    },
    {
        "data": {
            "detail_level": "high",
            "structured_type": "structured",
            "section_id": "687ecdd7-8507-4d47-8615-66871e00ab73"
        },
        "timestamp": "2025-08-21 19:26:23.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "1fDGXaYz4ETbcTDeypE2"
    },
    {
        "data": {
            "detail_level": "high",
            "structured": "structured",
            "summary": "• Defines the StockChart React component to visualize stock data\n• Validates input data before rendering\n  ◦ Returns null if data is missing or empty\n• Extracts company name and ticker from the data prop\n• Provides helper functions for date formatting\n  ◦ 'formatDateString' trims timestamps to the date portion\n  ◦ 'formatXAxisDate' converts date strings to month abbreviations for the x-axis\n• Transforms raw stock data into an array of objects with 'date' and 'price' keys for charting\n• Uses Recharts components to render the chart\n  ◦ ResponsiveContainer ensures the chart scales with its parent\n  ◦ LineChart displays the data with formatted axes, tooltips, and a legend\n  ◦ The Line component visualizes closing prices without dots, using a specific stroke color\n• Displays the company name and ticker above the chart",
            "section_id": "687ecdd7-8507-4d47-8615-66871e00ab73"
        },
        "timestamp": "2025-08-21 19:26:23.000",
        "event": "click_edit_in_prompt",
        "source": "frontend",
        "id": "Fz3yuZxltfLvaINzJTad"
    },
    {
        "data": {
            "detail_level": "high",
            "structured_type": "structured",
            "section_id": "687ecdd7-8507-4d47-8615-66871e00ab73"
        },
        "timestamp": "2025-08-21 19:26:23.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "JZOIrwE07g4zmy4jIHbM"
    },
    {
        "data": {
            "detail_level": "high",
            "mapping_index": 7,
            "structured_type": "structured",
            "section_id": "687ecdd7-8507-4d47-8615-66871e00ab73"
        },
        "timestamp": "2025-08-21 19:26:23.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "d3GJIlh4b01kYKDCR5MG"
    },
    {
        "data": {
            "detail_level": "high",
            "mapping_index": 11,
            "structured_type": "structured",
            "section_id": "687ecdd7-8507-4d47-8615-66871e00ab73"
        },
        "timestamp": "2025-08-21 19:26:23.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "z8Sq1RN5JBo6g2YqG38n"
    },
    {
        "data": {
            "detail_level": "high",
            "structured": "structured",
            "original_summary": "• Defines the StockChart React component to visualize stock data\n• Validates input data before rendering\n  ◦ Returns null if data is missing or empty\n• Extracts company name and ticker from the data prop\n• Provides helper functions for date formatting\n  ◦ 'formatDateString' trims timestamps to the date portion\n  ◦ 'formatXAxisDate' converts date strings to month abbreviations for the x-axis\n• Transforms raw stock data into an array of objects with 'date' and 'price' keys for charting\n• Uses Recharts components to render the chart\n  ◦ ResponsiveContainer ensures the chart scales with its parent\n  ◦ LineChart displays the data with formatted axes, tooltips, and a legend\n  ◦ The Line component visualizes closing prices without dots, using a specific stroke color\n• Displays the company name and ticker above the chart",
            "instruction": "Add a reference line to show the current price on chart",
            "section_id": "687ecdd7-8507-4d47-8615-66871e00ab73"
        },
        "timestamp": "2025-08-21 19:27:00.000",
        "event": "apply_instruction_summary",
        "source": "frontend",
        "id": "COKa6HasAU8RVdd3M8TW"
    },
    {
        "data": {
            "original_summary": "• Defines the StockChart React component to visualize stock data\n• Validates input data before rendering\n  ◦ Returns null if data is missing or empty\n• Extracts company name and ticker from the data prop\n• Provides helper functions for date formatting\n  ◦ 'formatDateString' trims timestamps to the date portion\n  ◦ 'formatXAxisDate' converts date strings to month abbreviations for the x-axis\n• Transforms raw stock data into an array of objects with 'date' and 'price' keys for charting\n• Uses Recharts components to render the chart\n  ◦ ResponsiveContainer ensures the chart scales with its parent\n  ◦ LineChart displays the data with formatted axes, tooltips, and a legend\n  ◦ The Line component visualizes closing prices without dots, using a specific stroke color\n• Displays the company name and ticker above the chart",
            "original_code": "const StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };\n\n  // Helper to format date as MMM (e.g., Jan, Feb)\n  const formatXAxisDate = (dateStr) => {\n    const date = new Date(dateStr);\n    return date.toLocaleString(\"en-US\", { month: \"short\" });\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;",
            "instruction": "Add a reference line to show the current price on chart",
            "updated_summary": "• Defines the StockChart React component to visualize stock data  \n• Validates input data before rendering  \n  ◦ Returns null if data is missing or empty  \n• Extracts company name and ticker from the data prop  \n• Provides helper functions for date formatting  \n  ◦ 'formatDateString' trims timestamps to the date portion  \n  ◦ 'formatXAxisDate' converts date strings to month abbreviations for the x-axis  \n• Transforms raw stock data into an array of objects with 'date' and 'price' keys for charting  \n• Uses Recharts components to render the chart  \n  ◦ ResponsiveContainer ensures the chart scales with its parent  \n  ◦ LineChart displays the data with formatted axes, tooltips, and a legend  \n  ◦ The Line component visualizes closing prices without dots, using a specific stroke color  \n  ◦ Adds a reference line to the chart to indicate the current price  \n• Displays the company name and ticker above the chart"
        },
        "timestamp": "2025-08-21 19:27:02.000",
        "event": "apply_instruction_summary",
        "source": "backend",
        "id": "pwOhF4VHxm9DC4QJKA4g"
    },
    {
        "data": {
            "detail_level": "high",
            "structured": "structured",
            "original_summary": "• Defines the StockChart React component to visualize stock data\n• Validates input data before rendering\n  ◦ Returns null if data is missing or empty\n• Extracts company name and ticker from the data prop\n• Provides helper functions for date formatting\n  ◦ 'formatDateString' trims timestamps to the date portion\n  ◦ 'formatXAxisDate' converts date strings to month abbreviations for the x-axis\n• Transforms raw stock data into an array of objects with 'date' and 'price' keys for charting\n• Uses Recharts components to render the chart\n  ◦ ResponsiveContainer ensures the chart scales with its parent\n  ◦ LineChart displays the data with formatted axes, tooltips, and a legend\n  ◦ The Line component visualizes closing prices without dots, using a specific stroke color\n• Displays the company name and ticker above the chart",
            "edited_summary": "• Defines the StockChart React component to visualize stock data  \n• Validates input data before rendering  \n  ◦ Returns null if data is missing or empty  \n• Extracts company name and ticker from the data prop  \n• Provides helper functions for date formatting  \n  ◦ 'formatDateString' trims timestamps to the date portion  \n  ◦ 'formatXAxisDate' converts date strings to month abbreviations for the x-axis  \n• Transforms raw stock data into an array of objects with 'date' and 'price' keys for charting  \n• Uses Recharts components to render the chart  \n  ◦ ResponsiveContainer ensures the chart scales with its parent  \n  ◦ LineChart displays the data with formatted axes, tooltips, and a legend  \n  ◦ The Line component visualizes closing prices without dots, using a specific stroke color  \n  ◦ Adds a reference line to the chart to indicate the current price  \n• Displays the company name and ticker above the chart",
            "section_id": "687ecdd7-8507-4d47-8615-66871e00ab73"
        },
        "timestamp": "2025-08-21 19:27:08.000",
        "event": "commit_modified_summary",
        "source": "frontend",
        "id": "43OaStYICxAtJgubUKaz"
    },
    {
        "data": {
            "detail_level": "high",
            "original_summary": "• Defines the StockChart React component to visualize stock data\n• Validates input data before rendering\n  ◦ Returns null if data is missing or empty\n• Extracts company name and ticker from the data prop\n• Provides helper functions for date formatting\n  ◦ 'formatDateString' trims timestamps to the date portion\n  ◦ 'formatXAxisDate' converts date strings to month abbreviations for the x-axis\n• Transforms raw stock data into an array of objects with 'date' and 'price' keys for charting\n• Uses Recharts components to render the chart\n  ◦ ResponsiveContainer ensures the chart scales with its parent\n  ◦ LineChart displays the data with formatted axes, tooltips, and a legend\n  ◦ The Line component visualizes closing prices without dots, using a specific stroke color\n• Displays the company name and ticker above the chart",
            "original_code": "const StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };\n\n  // Helper to format date as MMM (e.g., Jan, Feb)\n  const formatXAxisDate = (dateStr) => {\n    const date = new Date(dateStr);\n    return date.toLocaleString(\"en-US\", { month: \"short\" });\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;",
            "updated_code": "const StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };\n\n  // Helper to format date as MMM (e.g., Jan, Feb)\n  const formatXAxisDate = (dateStr) => {\n    const date = new Date(dateStr);\n    return date.toLocaleString(\"en-US\", { month: \"short\" });\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  // Find the latest price for the reference line\n  const currentPrice = chartData.length > 0 ? chartData[chartData.length - 1].price : null;\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n          {currentPrice !== null && (\n            <ReferenceLine\n              y={currentPrice}\n              label=\"Current Price\"\n              stroke=\"#ff7300\"\n              strokeDasharray=\"3 3\"\n            />\n          )}\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;",
            "edited_summary": "• Defines the StockChart React component to visualize stock data  \n• Validates input data before rendering  \n  ◦ Returns null if data is missing or empty  \n• Extracts company name and ticker from the data prop  \n• Provides helper functions for date formatting  \n  ◦ 'formatDateString' trims timestamps to the date portion  \n  ◦ 'formatXAxisDate' converts date strings to month abbreviations for the x-axis  \n• Transforms raw stock data into an array of objects with 'date' and 'price' keys for charting  \n• Uses Recharts components to render the chart  \n  ◦ ResponsiveContainer ensures the chart scales with its parent  \n  ◦ LineChart displays the data with formatted axes, tooltips, and a legend  \n  ◦ The Line component visualizes closing prices without dots, using a specific stroke color  \n  ◦ Adds a reference line to the chart to indicate the current price  \n• Displays the company name and ticker above the chart",
            "structured_type": "structured"
        },
        "timestamp": "2025-08-21 19:27:13.000",
        "event": "modify_summary_mediation",
        "source": "backend",
        "id": "oXPckngP5oGz6cZukQga"
    },
    {
        "data": {
            "detail_level": "high",
            "mapping_index": 12,
            "structured_type": "structured",
            "section_id": "687ecdd7-8507-4d47-8615-66871e00ab73"
        },
        "timestamp": "2025-08-21 19:27:55.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "Im37sIQLjxlP0UItFWWg"
    },
    {
        "data": {
            "detail_level": "high",
            "structured_type": "structured",
            "section_id": "687ecdd7-8507-4d47-8615-66871e00ab73"
        },
        "timestamp": "2025-08-21 19:27:55.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "jLSIDMWX57mwn247pvEz"
    },
    {
        "data": {
            "old_summary": {
                "high_unstructured": "This code defines the StockChart React component, which renders a responsive line chart of stock closing prices using the Recharts library. The component first validates the input data, then extracts the company name and ticker for display in the chart header. It includes helper functions to format date strings, both for general use and specifically for rendering month abbreviations on the x-axis. The stock data is transformed into an array of objects with date and price fields, which is then fed to the LineChart component, complete with axes, tooltips, a legend, and a styled line representing the stock's closing prices.",
                "title": "StockChart React Component for Rendering Stock Price Line Charts",
                "low_structured": "• Defines a React component for stock charts\n• Uses Recharts to render a line chart\n• Displays company and ticker information",
                "medium_unstructured": "The StockChart component takes stock data as a prop and visualizes it as a line chart using the Recharts library. It extracts the company name and ticker, formats dates for display, and maps the data into a structure suitable for the chart. The component displays the chart with axes, tooltips, and a legend, and only renders if valid data is provided.",
                "medium_structured": "• Accepts a 'data' prop containing stock information\n• Extracts company name and ticker for display\n• Formats date strings for the x-axis using a helper function\n• Maps raw data to chart-friendly format with date and price\n• Renders a responsive line chart with axes, tooltip, and legend",
                "low_unstructured": "This code defines a React component that displays a stock price line chart using Recharts.",
                "high_structured": "• Defines the StockChart React component to visualize stock data\n• Validates input data before rendering\n  ◦ Returns null if data is missing or empty\n• Extracts company name and ticker from the data prop\n• Provides helper functions for date formatting\n  ◦ 'formatDateString' trims timestamps to the date portion\n  ◦ 'formatXAxisDate' converts date strings to month abbreviations for the x-axis\n• Transforms raw stock data into an array of objects with 'date' and 'price' keys for charting\n• Uses Recharts components to render the chart\n  ◦ ResponsiveContainer ensures the chart scales with its parent\n  ◦ LineChart displays the data with formatted axes, tooltips, and a legend\n  ◦ The Line component visualizes closing prices without dots, using a specific stroke color\n• Displays the company name and ticker above the chart"
            },
            "original_code": "const StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };\n\n  // Helper to format date as MMM (e.g., Jan, Feb)\n  const formatXAxisDate = (dateStr) => {\n    const date = new Date(dateStr);\n    return date.toLocaleString(\"en-US\", { month: \"short\" });\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  // Find the latest price for the reference line\n  const currentPrice = chartData.length > 0 ? chartData[chartData.length - 1].price : null;\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n          {currentPrice !== null && (\n            <ReferenceLine\n              y={currentPrice}\n              label=\"Current Price\"\n              stroke=\"#ff7300\"\n              strokeDasharray=\"3 3\"\n            />\n          )}\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;",
            "new_code": "const StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };\n\n  // Helper to format date as MMM (e.g., Jan, Feb)\n  const formatXAxisDate = (dateStr) => {\n    const date = new Date(dateStr);\n    return date.toLocaleString(\"en-US\", { month: \"short\" });\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  // Find the latest price for the reference line\n  const currentPrice = chartData.length > 0 ? chartData[chartData.length - 1].price : null;\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n          {currentPrice !== null && (\n            <ReferenceLine\n              y={currentPrice}\n              label=\"Current Price\"\n              stroke=\"#ff7300\"\n              strokeDasharray=\"3 3\"\n            />\n          )}\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;",
            "new_summary": {
                "high_unstructured": "This code defines the StockChart React component, which renders a responsive line chart of stock closing prices using the Recharts library. The component first validates the input data, then extracts the company name and ticker for display in the chart header. It includes helper functions to format date strings, both for general use and specifically for rendering month abbreviations on the x-axis. The stock data is transformed into an array of objects with date and price fields, which is then fed to the LineChart component, complete with axes, tooltips, a legend, and a styled line representing the stock's closing prices. Notably, the chart now features a ReferenceLine at the most recent price, visually highlighting the current price with a label and distinct styling.",
                "title": "StockChart React Component with Current Price Reference Line",
                "low_structured": "• Defines a React component for stock charts\n• Uses Recharts to render a line chart\n• Displays company and ticker information\n• Adds a reference line indicating the current price on the chart",
                "medium_unstructured": "The StockChart component takes stock data as a prop and visualizes it as a line chart using the Recharts library. It extracts the company name and ticker, formats dates for display, and maps the data into a structure suitable for the chart. The component displays the chart with axes, tooltips, and a legend, and only renders if valid data is provided. Additionally, it now draws a reference line at the latest (current) price, labeled 'Current Price'.",
                "medium_structured": "• Accepts a 'data' prop containing stock information\n• Extracts company name and ticker for display\n• Formats date strings for the x-axis using a helper function\n• Maps raw data to chart-friendly format with date and price\n• Renders a responsive line chart with axes, tooltip, and legend\n• Includes a reference line at the current price, labeled 'Current Price'",
                "low_unstructured": "This code defines a React component that displays a stock price line chart using Recharts, now including a reference line for the current price.",
                "high_structured": "• Defines the StockChart React component to visualize stock data\n• Validates input data before rendering\n  ◦ Returns null if data is missing or empty\n• Extracts company name and ticker from the data prop\n• Provides helper functions for date formatting\n  ◦ 'formatDateString' trims timestamps to the date portion\n  ◦ 'formatXAxisDate' converts date strings to month abbreviations for the x-axis\n• Transforms raw stock data into an array of objects with 'date' and 'price' keys for charting\n• Uses Recharts components to render the chart\n  ◦ ResponsiveContainer ensures the chart scales with its parent\n  ◦ LineChart displays the data with formatted axes, tooltips, and a legend\n  ◦ The Line component visualizes closing prices without dots, using a specific stroke color\n  ◦ Adds a ReferenceLine at the current (latest) price, labeled 'Current Price' and styled distinctly\n• Displays the company name and ticker above the chart"
            }
        },
        "timestamp": "2025-08-21 19:27:56.000",
        "event": "summarize_modified_code",
        "source": "backend",
        "id": "WtzSFy2q3L6z3tQLfPRB"
    },
    {
        "data": {
            "summary": "• Defines a React component for stock charts\n• Uses Recharts to render a line chart\n• Displays company and ticker information\n• Adds a reference line indicating the current price on the chart",
            "code": "13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Helper to format date as MMM (e.g., Jan, Feb)\n24:   const formatXAxisDate = (dateStr) => {\n25:     const date = new Date(dateStr);\n26:     return date.toLocaleString(\"en-US\", { month: \"short\" });\n27:   };\n28: \n29:   // Combine labels and values into an array of objects for Recharts\n30:   const chartData = data.data.map((item) => ({\n31:     date: item.date,\n32:     price: item.close,\n33:   }));\n34: \n35:   // Find the latest price for the reference line\n36:   const currentPrice = chartData.length > 0 ? chartData[chartData.length - 1].price : null;\n37: \n38:   return (\n39:     <div style={{ marginTop: \"2rem\" }}>\n40:       <h3>\n41:         {company} ({ticker})\n42:       </h3>\n43:       <ResponsiveContainer width=\"100%\" height={300}>\n44:         <LineChart\n45:           data={chartData}\n46:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n47:         >\n48:           <XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />\n49:           <YAxis domain={[\"auto\", \"auto\"]} />\n50:           <Tooltip />\n51:           <Legend />\n52:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n53:           {currentPrice !== null && (\n54:             <ReferenceLine\n55:               y={currentPrice}\n56:               label=\"Current Price\"\n57:               stroke=\"#ff7300\"\n58:               strokeDasharray=\"3 3\"\n59:             />\n60:           )}\n61:         </LineChart>\n62:       </ResponsiveContainer>\n63:     </div>\n64:   );\n65: };\n66: \n67: export default StockChart;",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        },
                        {
                            "code": "export default StockChart;",
                            "line": 67
                        }
                    ],
                    "summaryComponent": "Defines a React component for stock charts"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 43
                        },
                        {
                            "code": "<LineChart",
                            "line": 44
                        }
                    ],
                    "summaryComponent": "Uses Recharts to render a line chart"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<h3>",
                            "line": 40
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 41
                        }
                    ],
                    "summaryComponent": "Displays company and ticker information"
                },
                {
                    "codeSegments": [
                        {
                            "code": "{currentPrice !== null && (",
                            "line": 53
                        },
                        {
                            "code": "<ReferenceLine",
                            "line": 54
                        },
                        {
                            "code": "y={currentPrice}",
                            "line": 55
                        },
                        {
                            "code": "label=\"Current Price\"",
                            "line": 56
                        }
                    ],
                    "summaryComponent": "Adds a reference line indicating the current price on the chart"
                }
            ]
        },
        "timestamp": "2025-08-21 19:27:59.000",
        "event": "map_summary_code",
        "source": "backend",
        "id": "HCtbeazpCtVgam4IP12x"
    },
    {
        "data": {
            "summary": "This code defines a React component that displays a stock price line chart using Recharts, now including a reference line for the current price.",
            "code": "13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Helper to format date as MMM (e.g., Jan, Feb)\n24:   const formatXAxisDate = (dateStr) => {\n25:     const date = new Date(dateStr);\n26:     return date.toLocaleString(\"en-US\", { month: \"short\" });\n27:   };\n28: \n29:   // Combine labels and values into an array of objects for Recharts\n30:   const chartData = data.data.map((item) => ({\n31:     date: item.date,\n32:     price: item.close,\n33:   }));\n34: \n35:   // Find the latest price for the reference line\n36:   const currentPrice = chartData.length > 0 ? chartData[chartData.length - 1].price : null;\n37: \n38:   return (\n39:     <div style={{ marginTop: \"2rem\" }}>\n40:       <h3>\n41:         {company} ({ticker})\n42:       </h3>\n43:       <ResponsiveContainer width=\"100%\" height={300}>\n44:         <LineChart\n45:           data={chartData}\n46:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n47:         >\n48:           <XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />\n49:           <YAxis domain={[\"auto\", \"auto\"]} />\n50:           <Tooltip />\n51:           <Legend />\n52:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n53:           {currentPrice !== null && (\n54:             <ReferenceLine\n55:               y={currentPrice}\n56:               label=\"Current Price\"\n57:               stroke=\"#ff7300\"\n58:               strokeDasharray=\"3 3\"\n59:             />\n60:           )}\n61:         </LineChart>\n62:       </ResponsiveContainer>\n63:     </div>\n64:   );\n65: };\n66: \n67: export default StockChart;",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        }
                    ],
                    "summaryComponent": "defines a React component"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<LineChart",
                            "line": 44
                        },
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 52
                        }
                    ],
                    "summaryComponent": "displays a stock price line chart"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 43
                        },
                        {
                            "code": "<LineChart",
                            "line": 44
                        }
                    ],
                    "summaryComponent": "using Recharts"
                },
                {
                    "codeSegments": [
                        {
                            "code": "{currentPrice !== null && (",
                            "line": 53
                        },
                        {
                            "code": "<ReferenceLine",
                            "line": 54
                        },
                        {
                            "code": "y={currentPrice}",
                            "line": 55
                        },
                        {
                            "code": "label=\"Current Price\"",
                            "line": 56
                        }
                    ],
                    "summaryComponent": "now including a reference line for the current price"
                }
            ]
        },
        "timestamp": "2025-08-21 19:27:59.000",
        "event": "map_summary_code",
        "source": "backend",
        "id": "zozq2lmEmqWFIfGBeYjS"
    },
    {
        "data": {
            "summary": "The StockChart component takes stock data as a prop and visualizes it as a line chart using the Recharts library. It extracts the company name and ticker, formats dates for display, and maps the data into a structure suitable for the chart. The component displays the chart with axes, tooltips, and a legend, and only renders if valid data is provided. Additionally, it now draws a reference line at the latest (current) price, labeled 'Current Price'.",
            "code": "13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Helper to format date as MMM (e.g., Jan, Feb)\n24:   const formatXAxisDate = (dateStr) => {\n25:     const date = new Date(dateStr);\n26:     return date.toLocaleString(\"en-US\", { month: \"short\" });\n27:   };\n28: \n29:   // Combine labels and values into an array of objects for Recharts\n30:   const chartData = data.data.map((item) => ({\n31:     date: item.date,\n32:     price: item.close,\n33:   }));\n34: \n35:   // Find the latest price for the reference line\n36:   const currentPrice = chartData.length > 0 ? chartData[chartData.length - 1].price : null;\n37: \n38:   return (\n39:     <div style={{ marginTop: \"2rem\" }}>\n40:       <h3>\n41:         {company} ({ticker})\n42:       </h3>\n43:       <ResponsiveContainer width=\"100%\" height={300}>\n44:         <LineChart\n45:           data={chartData}\n46:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n47:         >\n48:           <XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />\n49:           <YAxis domain={[\"auto\", \"auto\"]} />\n50:           <Tooltip />\n51:           <Legend />\n52:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n53:           {currentPrice !== null && (\n54:             <ReferenceLine\n55:               y={currentPrice}\n56:               label=\"Current Price\"\n57:               stroke=\"#ff7300\"\n58:               strokeDasharray=\"3 3\"\n59:             />\n60:           )}\n61:         </LineChart>\n62:       </ResponsiveContainer>\n63:     </div>\n64:   );\n65: };\n66: \n67: export default StockChart;",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        }
                    ],
                    "summaryComponent": "The StockChart component takes stock data as a prop"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<LineChart",
                            "line": 44
                        },
                        {
                            "code": "</LineChart>",
                            "line": 61
                        }
                    ],
                    "summaryComponent": "visualizes it as a line chart using the Recharts library"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const company = data.name;",
                            "line": 16
                        },
                        {
                            "code": "const ticker = data.ticker;",
                            "line": 17
                        }
                    ],
                    "summaryComponent": "It extracts the company name and ticker"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const formatDateString = (date) => {",
                            "line": 19
                        },
                        {
                            "code": "const formatXAxisDate = (dateStr) => {",
                            "line": 24
                        }
                    ],
                    "summaryComponent": "formats dates for display"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const chartData = data.data.map((item) => ({",
                            "line": 30
                        },
                        {
                            "code": "date: item.date,",
                            "line": 31
                        },
                        {
                            "code": "price: item.close,",
                            "line": 32
                        }
                    ],
                    "summaryComponent": "maps the data into a structure suitable for the chart"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />",
                            "line": 48
                        },
                        {
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                            "line": 49
                        },
                        {
                            "code": "<Tooltip />",
                            "line": 50
                        },
                        {
                            "code": "<Legend />",
                            "line": 51
                        }
                    ],
                    "summaryComponent": "The component displays the chart with axes, tooltips, and a legend"
                },
                {
                    "codeSegments": [
                        {
                            "code": "if (!data || !data.data || !data.data.length) return null;",
                            "line": 14
                        }
                    ],
                    "summaryComponent": "and only renders if valid data is provided"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const currentPrice = chartData.length > 0 ? chartData[chartData.length - 1].price : null;",
                            "line": 36
                        },
                        {
                            "code": "{currentPrice !== null && (",
                            "line": 53
                        },
                        {
                            "code": "<ReferenceLine",
                            "line": 54
                        },
                        {
                            "code": "y={currentPrice}",
                            "line": 55
                        },
                        {
                            "code": "label=\"Current Price\"",
                            "line": 56
                        }
                    ],
                    "summaryComponent": "Additionally, it now draws a reference line at the latest (current) price, labeled 'Current Price'."
                }
            ]
        },
        "timestamp": "2025-08-21 19:28:01.000",
        "event": "map_summary_code",
        "source": "backend",
        "id": "m76tvPNyzxoxLR9Noqsa"
    },
    {
        "data": {
            "summary": "This code defines the StockChart React component, which renders a responsive line chart of stock closing prices using the Recharts library. The component first validates the input data, then extracts the company name and ticker for display in the chart header. It includes helper functions to format date strings, both for general use and specifically for rendering month abbreviations on the x-axis. The stock data is transformed into an array of objects with date and price fields, which is then fed to the LineChart component, complete with axes, tooltips, a legend, and a styled line representing the stock's closing prices. Notably, the chart now features a ReferenceLine at the most recent price, visually highlighting the current price with a label and distinct styling.",
            "code": "13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Helper to format date as MMM (e.g., Jan, Feb)\n24:   const formatXAxisDate = (dateStr) => {\n25:     const date = new Date(dateStr);\n26:     return date.toLocaleString(\"en-US\", { month: \"short\" });\n27:   };\n28: \n29:   // Combine labels and values into an array of objects for Recharts\n30:   const chartData = data.data.map((item) => ({\n31:     date: item.date,\n32:     price: item.close,\n33:   }));\n34: \n35:   // Find the latest price for the reference line\n36:   const currentPrice = chartData.length > 0 ? chartData[chartData.length - 1].price : null;\n37: \n38:   return (\n39:     <div style={{ marginTop: \"2rem\" }}>\n40:       <h3>\n41:         {company} ({ticker})\n42:       </h3>\n43:       <ResponsiveContainer width=\"100%\" height={300}>\n44:         <LineChart\n45:           data={chartData}\n46:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n47:         >\n48:           <XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />\n49:           <YAxis domain={[\"auto\", \"auto\"]} />\n50:           <Tooltip />\n51:           <Legend />\n52:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n53:           {currentPrice !== null && (\n54:             <ReferenceLine\n55:               y={currentPrice}\n56:               label=\"Current Price\"\n57:               stroke=\"#ff7300\"\n58:               strokeDasharray=\"3 3\"\n59:             />\n60:           )}\n61:         </LineChart>\n62:       </ResponsiveContainer>\n63:     </div>\n64:   );\n65: };\n66: \n67: export default StockChart;",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        }
                    ],
                    "summaryComponent": "defines the StockChart React component"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 43
                        },
                        {
                            "code": "<LineChart",
                            "line": 44
                        },
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 52
                        }
                    ],
                    "summaryComponent": "renders a responsive line chart of stock closing prices using the Recharts library"
                },
                {
                    "codeSegments": [
                        {
                            "code": "if (!data || !data.data || !data.data.length) return null;",
                            "line": 14
                        }
                    ],
                    "summaryComponent": "validates the input data"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const company = data.name;",
                            "line": 16
                        },
                        {
                            "code": "const ticker = data.ticker;",
                            "line": 17
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 41
                        }
                    ],
                    "summaryComponent": "extracts the company name and ticker for display in the chart header"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const formatDateString = (date) => {",
                            "line": 19
                        },
                        {
                            "code": "return date.split(\"T\")[0];",
                            "line": 20
                        }
                    ],
                    "summaryComponent": "includes helper functions to format date strings"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const formatXAxisDate = (dateStr) => {",
                            "line": 24
                        },
                        {
                            "code": "return date.toLocaleString(\"en-US\", { month: \"short\" });",
                            "line": 26
                        },
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />",
                            "line": 48
                        }
                    ],
                    "summaryComponent": "specifically for rendering month abbreviations on the x-axis"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const chartData = data.data.map((item) => ({",
                            "line": 30
                        },
                        {
                            "code": "date: item.date,",
                            "line": 31
                        },
                        {
                            "code": "price: item.close,",
                            "line": 32
                        }
                    ],
                    "summaryComponent": "stock data is transformed into an array of objects with date and price fields"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<LineChart",
                            "line": 44
                        },
                        {
                            "code": "data={chartData}",
                            "line": 45
                        }
                    ],
                    "summaryComponent": "fed to the LineChart component"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />",
                            "line": 48
                        },
                        {
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                            "line": 49
                        },
                        {
                            "code": "<Tooltip />",
                            "line": 50
                        },
                        {
                            "code": "<Legend />",
                            "line": 51
                        },
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 52
                        }
                    ],
                    "summaryComponent": "complete with axes, tooltips, a legend, and a styled line representing the stock's closing prices"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const currentPrice = chartData.length > 0 ? chartData[chartData.length - 1].price : null;",
                            "line": 36
                        },
                        {
                            "code": "{currentPrice !== null && (",
                            "line": 53
                        },
                        {
                            "code": "<ReferenceLine",
                            "line": 54
                        },
                        {
                            "code": "y={currentPrice}",
                            "line": 55
                        },
                        {
                            "code": "label=\"Current Price\"",
                            "line": 56
                        },
                        {
                            "code": "stroke=\"#ff7300\"",
                            "line": 57
                        },
                        {
                            "code": "strokeDasharray=\"3 3\"",
                            "line": 58
                        }
                    ],
                    "summaryComponent": "features a ReferenceLine at the most recent price, visually highlighting the current price with a label and distinct styling"
                }
            ]
        },
        "timestamp": "2025-08-21 19:28:03.000",
        "event": "map_summary_code",
        "source": "backend",
        "id": "oNVqeSAERqKWKlNXmsmz"
    },
    {
        "data": {
            "summary": "• Defines the StockChart React component to visualize stock data\n• Validates input data before rendering\n  ◦ Returns null if data is missing or empty\n• Extracts company name and ticker from the data prop\n• Provides helper functions for date formatting\n  ◦ 'formatDateString' trims timestamps to the date portion\n  ◦ 'formatXAxisDate' converts date strings to month abbreviations for the x-axis\n• Transforms raw stock data into an array of objects with 'date' and 'price' keys for charting\n• Uses Recharts components to render the chart\n  ◦ ResponsiveContainer ensures the chart scales with its parent\n  ◦ LineChart displays the data with formatted axes, tooltips, and a legend\n  ◦ The Line component visualizes closing prices without dots, using a specific stroke color\n  ◦ Adds a ReferenceLine at the current (latest) price, labeled 'Current Price' and styled distinctly\n• Displays the company name and ticker above the chart",
            "code": "13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Helper to format date as MMM (e.g., Jan, Feb)\n24:   const formatXAxisDate = (dateStr) => {\n25:     const date = new Date(dateStr);\n26:     return date.toLocaleString(\"en-US\", { month: \"short\" });\n27:   };\n28: \n29:   // Combine labels and values into an array of objects for Recharts\n30:   const chartData = data.data.map((item) => ({\n31:     date: item.date,\n32:     price: item.close,\n33:   }));\n34: \n35:   // Find the latest price for the reference line\n36:   const currentPrice = chartData.length > 0 ? chartData[chartData.length - 1].price : null;\n37: \n38:   return (\n39:     <div style={{ marginTop: \"2rem\" }}>\n40:       <h3>\n41:         {company} ({ticker})\n42:       </h3>\n43:       <ResponsiveContainer width=\"100%\" height={300}>\n44:         <LineChart\n45:           data={chartData}\n46:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n47:         >\n48:           <XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />\n49:           <YAxis domain={[\"auto\", \"auto\"]} />\n50:           <Tooltip />\n51:           <Legend />\n52:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n53:           {currentPrice !== null && (\n54:             <ReferenceLine\n55:               y={currentPrice}\n56:               label=\"Current Price\"\n57:               stroke=\"#ff7300\"\n58:               strokeDasharray=\"3 3\"\n59:             />\n60:           )}\n61:         </LineChart>\n62:       </ResponsiveContainer>\n63:     </div>\n64:   );\n65: };\n66: \n67: export default StockChart;",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        }
                    ],
                    "summaryComponent": "Defines the StockChart React component to visualize stock data"
                },
                {
                    "codeSegments": [
                        {
                            "code": "if (!data || !data.data || !data.data.length) return null;",
                            "line": 14
                        }
                    ],
                    "summaryComponent": "Validates input data before rendering"
                },
                {
                    "codeSegments": [
                        {
                            "code": "if (!data || !data.data || !data.data.length) return null;",
                            "line": 14
                        }
                    ],
                    "summaryComponent": "Returns null if data is missing or empty"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const company = data.name;",
                            "line": 16
                        },
                        {
                            "code": "const ticker = data.ticker;",
                            "line": 17
                        }
                    ],
                    "summaryComponent": "Extracts company name and ticker from the data prop"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const formatDateString = (date) => {",
                            "line": 19
                        },
                        {
                            "code": "const formatXAxisDate = (dateStr) => {",
                            "line": 24
                        }
                    ],
                    "summaryComponent": "Provides helper functions for date formatting"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const formatDateString = (date) => {",
                            "line": 19
                        },
                        {
                            "code": "return date.split(\"T\")[0];",
                            "line": 20
                        }
                    ],
                    "summaryComponent": "'formatDateString' trims timestamps to the date portion"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const formatXAxisDate = (dateStr) => {",
                            "line": 24
                        },
                        {
                            "code": "return date.toLocaleString(\"en-US\", { month: \"short\" });",
                            "line": 26
                        }
                    ],
                    "summaryComponent": "'formatXAxisDate' converts date strings to month abbreviations for the x-axis"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const chartData = data.data.map((item) => ({",
                            "line": 30
                        },
                        {
                            "code": "date: item.date,",
                            "line": 31
                        },
                        {
                            "code": "price: item.close,",
                            "line": 32
                        }
                    ],
                    "summaryComponent": "Transforms raw stock data into an array of objects with 'date' and 'price' keys for charting"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 43
                        },
                        {
                            "code": "<LineChart",
                            "line": 44
                        }
                    ],
                    "summaryComponent": "Uses Recharts components to render the chart"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 43
                        }
                    ],
                    "summaryComponent": "ResponsiveContainer ensures the chart scales with its parent"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<LineChart",
                            "line": 44
                        },
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />",
                            "line": 48
                        },
                        {
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                            "line": 49
                        },
                        {
                            "code": "<Tooltip />",
                            "line": 50
                        },
                        {
                            "code": "<Legend />",
                            "line": 51
                        }
                    ],
                    "summaryComponent": "LineChart displays the data with formatted axes, tooltips, and a legend"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 52
                        }
                    ],
                    "summaryComponent": "The Line component visualizes closing prices without dots, using a specific stroke color"
                },
                {
                    "codeSegments": [
                        {
                            "code": "{currentPrice !== null && (",
                            "line": 53
                        },
                        {
                            "code": "<ReferenceLine",
                            "line": 54
                        },
                        {
                            "code": "y={currentPrice}",
                            "line": 55
                        },
                        {
                            "code": "label=\"Current Price\"",
                            "line": 56
                        },
                        {
                            "code": "stroke=\"#ff7300\"",
                            "line": 57
                        },
                        {
                            "code": "strokeDasharray=\"3 3\"",
                            "line": 58
                        }
                    ],
                    "summaryComponent": "Adds a ReferenceLine at the current (latest) price, labeled 'Current Price' and styled distinctly"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<h3>",
                            "line": 40
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 41
                        }
                    ],
                    "summaryComponent": "Displays the company name and ticker above the chart"
                }
            ]
        },
        "timestamp": "2025-08-21 19:28:04.000",
        "event": "map_summary_code",
        "source": "backend",
        "id": "VL2Qi0LYX46osC6UbKB8"
    },
    {
        "data": {
            "summary": "• Accepts a 'data' prop containing stock information\n• Extracts company name and ticker for display\n• Formats date strings for the x-axis using a helper function\n• Maps raw data to chart-friendly format with date and price\n• Renders a responsive line chart with axes, tooltip, and legend\n• Includes a reference line at the current price, labeled 'Current Price'",
            "code": "13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Helper to format date as MMM (e.g., Jan, Feb)\n24:   const formatXAxisDate = (dateStr) => {\n25:     const date = new Date(dateStr);\n26:     return date.toLocaleString(\"en-US\", { month: \"short\" });\n27:   };\n28: \n29:   // Combine labels and values into an array of objects for Recharts\n30:   const chartData = data.data.map((item) => ({\n31:     date: item.date,\n32:     price: item.close,\n33:   }));\n34: \n35:   // Find the latest price for the reference line\n36:   const currentPrice = chartData.length > 0 ? chartData[chartData.length - 1].price : null;\n37: \n38:   return (\n39:     <div style={{ marginTop: \"2rem\" }}>\n40:       <h3>\n41:         {company} ({ticker})\n42:       </h3>\n43:       <ResponsiveContainer width=\"100%\" height={300}>\n44:         <LineChart\n45:           data={chartData}\n46:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n47:         >\n48:           <XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />\n49:           <YAxis domain={[\"auto\", \"auto\"]} />\n50:           <Tooltip />\n51:           <Legend />\n52:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n53:           {currentPrice !== null && (\n54:             <ReferenceLine\n55:               y={currentPrice}\n56:               label=\"Current Price\"\n57:               stroke=\"#ff7300\"\n58:               strokeDasharray=\"3 3\"\n59:             />\n60:           )}\n61:         </LineChart>\n62:       </ResponsiveContainer>\n63:     </div>\n64:   );\n65: };\n66: \n67: export default StockChart;",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        }
                    ],
                    "summaryComponent": "Accepts a 'data' prop containing stock information"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const company = data.name;",
                            "line": 16
                        },
                        {
                            "code": "const ticker = data.ticker;",
                            "line": 17
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 41
                        }
                    ],
                    "summaryComponent": "Extracts company name and ticker for display"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const formatXAxisDate = (dateStr) => {",
                            "line": 24
                        },
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />",
                            "line": 48
                        }
                    ],
                    "summaryComponent": "Formats date strings for the x-axis using a helper function"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const chartData = data.data.map((item) => ({",
                            "line": 30
                        },
                        {
                            "code": "date: item.date,",
                            "line": 31
                        },
                        {
                            "code": "price: item.close,",
                            "line": 32
                        }
                    ],
                    "summaryComponent": "Maps raw data to chart-friendly format with date and price"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 43
                        },
                        {
                            "code": "<LineChart",
                            "line": 44
                        },
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />",
                            "line": 48
                        },
                        {
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                            "line": 49
                        },
                        {
                            "code": "<Tooltip />",
                            "line": 50
                        },
                        {
                            "code": "<Legend />",
                            "line": 51
                        },
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 52
                        }
                    ],
                    "summaryComponent": "Renders a responsive line chart with axes, tooltip, and legend"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const currentPrice = chartData.length > 0 ? chartData[chartData.length - 1].price : null;",
                            "line": 36
                        },
                        {
                            "code": "{currentPrice !== null && (",
                            "line": 53
                        },
                        {
                            "code": "<ReferenceLine",
                            "line": 54
                        },
                        {
                            "code": "y={currentPrice}",
                            "line": 55
                        },
                        {
                            "code": "label=\"Current Price\"",
                            "line": 56
                        }
                    ],
                    "summaryComponent": "Includes a reference line at the current price, labeled 'Current Price'"
                }
            ]
        },
        "timestamp": "2025-08-21 19:28:10.000",
        "event": "map_summary_code",
        "source": "backend",
        "id": "5P9vwCh9ntoyvDLIKGIh"
    },
    {
        "data": {
            "after_section_id": "2064b284-7f9e-4ac5-a012-0c89f770242c",
            "before_section_id": "687ecdd7-8507-4d47-8615-66871e00ab73"
        },
        "timestamp": "2025-08-21 19:28:10.000",
        "event": "autotransit_section",
        "source": "frontend",
        "id": "ZTup4cGZcCeiTEdCAWkP"
    },
    {
        "data": {
            "section_data": {
                "editPromptDetailLevel": null,
                "title": "StockChart React Component with Current Price Reference Line",
                "selectedStructured": "unstructured",
                "lines": [
                    13,
                    68
                ],
                "oldSummaryData": {
                    "high_unstructured": "This code defines the StockChart React component, which renders a responsive line chart of stock closing prices using the Recharts library. The component first validates the input data, then extracts the company name and ticker for display in the chart header. It includes helper functions to format date strings, both for general use and specifically for rendering month abbreviations on the x-axis. The stock data is transformed into an array of objects with date and price fields, which is then fed to the LineChart component, complete with axes, tooltips, a legend, and a styled line representing the stock's closing prices.",
                    "title": "StockChart React Component for Rendering Stock Price Line Charts",
                    "low_structured": "• Defines a React component for stock charts\n• Uses Recharts to render a line chart\n• Displays company and ticker information",
                    "medium_unstructured": "The StockChart component takes stock data as a prop and visualizes it as a line chart using the Recharts library. It extracts the company name and ticker, formats dates for display, and maps the data into a structure suitable for the chart. The component displays the chart with axes, tooltips, and a legend, and only renders if valid data is provided.",
                    "medium_structured": "• Accepts a 'data' prop containing stock information\n• Extracts company name and ticker for display\n• Formats date strings for the x-axis using a helper function\n• Maps raw data to chart-friendly format with date and price\n• Renders a responsive line chart with axes, tooltip, and legend",
                    "low_unstructured": "This code defines a React component that displays a stock price line chart using Recharts.",
                    "high_structured": "• Defines the StockChart React component to visualize stock data\n• Validates input data before rendering\n  ◦ Returns null if data is missing or empty\n• Extracts company name and ticker from the data prop\n• Provides helper functions for date formatting\n  ◦ 'formatDateString' trims timestamps to the date portion\n  ◦ 'formatXAxisDate' converts date strings to month abbreviations for the x-axis\n• Transforms raw stock data into an array of objects with 'date' and 'price' keys for charting\n• Uses Recharts components to render the chart\n  ◦ ResponsiveContainer ensures the chart scales with its parent\n  ◦ LineChart displays the data with formatted axes, tooltips, and a legend\n  ◦ The Line component visualizes closing prices without dots, using a specific stroke color\n• Displays the company name and ticker above the chart"
                },
                "createdAt": 1755836890000,
                "summaryData": {
                    "high_unstructured": "This code defines the StockChart React component, which renders a responsive line chart of stock closing prices using the Recharts library. The component first validates the input data, then extracts the company name and ticker for display in the chart header. It includes helper functions to format date strings, both for general use and specifically for rendering month abbreviations on the x-axis. The stock data is transformed into an array of objects with date and price fields, which is then fed to the LineChart component, complete with axes, tooltips, a legend, and a styled line representing the stock's closing prices. Notably, the chart now features a ReferenceLine at the most recent price, visually highlighting the current price with a label and distinct styling.",
                    "title": "StockChart React Component with Current Price Reference Line",
                    "low_structured": "• Defines a React component for stock charts\n• Uses Recharts to render a line chart\n• Displays company and ticker information\n• Adds a reference line indicating the current price on the chart",
                    "medium_unstructured": "The StockChart component takes stock data as a prop and visualizes it as a line chart using the Recharts library. It extracts the company name and ticker, formats dates for display, and maps the data into a structure suitable for the chart. The component displays the chart with axes, tooltips, and a legend, and only renders if valid data is provided. Additionally, it now draws a reference line at the latest (current) price, labeled 'Current Price'.",
                    "medium_structured": "• Accepts a 'data' prop containing stock information\n• Extracts company name and ticker for display\n• Formats date strings for the x-axis using a helper function\n• Maps raw data to chart-friendly format with date and price\n• Renders a responsive line chart with axes, tooltip, and legend\n• Includes a reference line at the current price, labeled 'Current Price'",
                    "low_unstructured": "This code defines a React component that displays a stock price line chart using Recharts, now including a reference line for the current price.",
                    "high_structured": "• Defines the StockChart React component to visualize stock data\n• Validates input data before rendering\n  ◦ Returns null if data is missing or empty\n• Extracts company name and ticker from the data prop\n• Provides helper functions for date formatting\n  ◦ 'formatDateString' trims timestamps to the date portion\n  ◦ 'formatXAxisDate' converts date strings to month abbreviations for the x-axis\n• Transforms raw stock data into an array of objects with 'date' and 'price' keys for charting\n• Uses Recharts components to render the chart\n  ◦ ResponsiveContainer ensures the chart scales with its parent\n  ◦ LineChart displays the data with formatted axes, tooltips, and a legend\n  ◦ The Line component visualizes closing prices without dots, using a specific stroke color\n  ◦ Adds a ReferenceLine at the current (latest) price, labeled 'Current Price' and styled distinctly\n• Displays the company name and ticker above the chart"
                },
                "editPromptStructured": null,
                "selectedDetailLevel": "medium",
                "summaryMappings": {
                    "high_unstructured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                }
                            ],
                            "summaryComponent": "defines the StockChart React component"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 43
                                },
                                {
                                    "code": "<LineChart",
                                    "line": 44
                                },
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 52
                                }
                            ],
                            "summaryComponent": "renders a responsive line chart of stock closing prices using the Recharts library"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "if (!data || !data.data || !data.data.length) return null;",
                                    "line": 14
                                }
                            ],
                            "summaryComponent": "validates the input data"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const company = data.name;",
                                    "line": 16
                                },
                                {
                                    "code": "const ticker = data.ticker;",
                                    "line": 17
                                },
                                {
                                    "code": "{company} ({ticker})",
                                    "line": 41
                                }
                            ],
                            "summaryComponent": "extracts the company name and ticker for display in the chart header"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const formatDateString = (date) => {",
                                    "line": 19
                                },
                                {
                                    "code": "return date.split(\"T\")[0];",
                                    "line": 20
                                }
                            ],
                            "summaryComponent": "includes helper functions to format date strings"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const formatXAxisDate = (dateStr) => {",
                                    "line": 24
                                },
                                {
                                    "code": "return date.toLocaleString(\"en-US\", { month: \"short\" });",
                                    "line": 26
                                },
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />",
                                    "line": 48
                                }
                            ],
                            "summaryComponent": "specifically for rendering month abbreviations on the x-axis"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const chartData = data.data.map((item) => ({",
                                    "line": 30
                                },
                                {
                                    "code": "date: item.date,",
                                    "line": 31
                                },
                                {
                                    "code": "price: item.close,",
                                    "line": 32
                                }
                            ],
                            "summaryComponent": "stock data is transformed into an array of objects with date and price fields"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<LineChart",
                                    "line": 44
                                },
                                {
                                    "code": "data={chartData}",
                                    "line": 45
                                }
                            ],
                            "summaryComponent": "fed to the LineChart component"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />",
                                    "line": 48
                                },
                                {
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                                    "line": 49
                                },
                                {
                                    "code": "<Tooltip />",
                                    "line": 50
                                },
                                {
                                    "code": "<Legend />",
                                    "line": 51
                                },
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 52
                                }
                            ],
                            "summaryComponent": "complete with axes, tooltips, a legend, and a styled line representing the stock's closing prices"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const currentPrice = chartData.length > 0 ? chartData[chartData.length - 1].price : null;",
                                    "line": 36
                                },
                                {
                                    "code": "{currentPrice !== null && (",
                                    "line": 53
                                },
                                {
                                    "code": "<ReferenceLine",
                                    "line": 54
                                },
                                {
                                    "code": "y={currentPrice}",
                                    "line": 55
                                },
                                {
                                    "code": "label=\"Current Price\"",
                                    "line": 56
                                },
                                {
                                    "code": "stroke=\"#ff7300\"",
                                    "line": 57
                                },
                                {
                                    "code": "strokeDasharray=\"3 3\"",
                                    "line": 58
                                }
                            ],
                            "summaryComponent": "features a ReferenceLine at the most recent price, visually highlighting the current price with a label and distinct styling"
                        }
                    ],
                    "low_structured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                },
                                {
                                    "code": "export default StockChart;",
                                    "line": 67
                                }
                            ],
                            "summaryComponent": "Defines a React component for stock charts"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 43
                                },
                                {
                                    "code": "<LineChart",
                                    "line": 44
                                }
                            ],
                            "summaryComponent": "Uses Recharts to render a line chart"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<h3>",
                                    "line": 40
                                },
                                {
                                    "code": "{company} ({ticker})",
                                    "line": 41
                                }
                            ],
                            "summaryComponent": "Displays company and ticker information"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "{currentPrice !== null && (",
                                    "line": 53
                                },
                                {
                                    "code": "<ReferenceLine",
                                    "line": 54
                                },
                                {
                                    "code": "y={currentPrice}",
                                    "line": 55
                                },
                                {
                                    "code": "label=\"Current Price\"",
                                    "line": 56
                                }
                            ],
                            "summaryComponent": "Adds a reference line indicating the current price on the chart"
                        }
                    ],
                    "medium_unstructured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                }
                            ],
                            "summaryComponent": "The StockChart component takes stock data as a prop"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<LineChart",
                                    "line": 44
                                },
                                {
                                    "code": "</LineChart>",
                                    "line": 61
                                }
                            ],
                            "summaryComponent": "visualizes it as a line chart using the Recharts library"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const company = data.name;",
                                    "line": 16
                                },
                                {
                                    "code": "const ticker = data.ticker;",
                                    "line": 17
                                }
                            ],
                            "summaryComponent": "It extracts the company name and ticker"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const formatDateString = (date) => {",
                                    "line": 19
                                },
                                {
                                    "code": "const formatXAxisDate = (dateStr) => {",
                                    "line": 24
                                }
                            ],
                            "summaryComponent": "formats dates for display"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const chartData = data.data.map((item) => ({",
                                    "line": 30
                                },
                                {
                                    "code": "date: item.date,",
                                    "line": 31
                                },
                                {
                                    "code": "price: item.close,",
                                    "line": 32
                                }
                            ],
                            "summaryComponent": "maps the data into a structure suitable for the chart"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />",
                                    "line": 48
                                },
                                {
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                                    "line": 49
                                },
                                {
                                    "code": "<Tooltip />",
                                    "line": 50
                                },
                                {
                                    "code": "<Legend />",
                                    "line": 51
                                }
                            ],
                            "summaryComponent": "The component displays the chart with axes, tooltips, and a legend"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "if (!data || !data.data || !data.data.length) return null;",
                                    "line": 14
                                }
                            ],
                            "summaryComponent": "and only renders if valid data is provided"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const currentPrice = chartData.length > 0 ? chartData[chartData.length - 1].price : null;",
                                    "line": 36
                                },
                                {
                                    "code": "{currentPrice !== null && (",
                                    "line": 53
                                },
                                {
                                    "code": "<ReferenceLine",
                                    "line": 54
                                },
                                {
                                    "code": "y={currentPrice}",
                                    "line": 55
                                },
                                {
                                    "code": "label=\"Current Price\"",
                                    "line": 56
                                }
                            ],
                            "summaryComponent": "Additionally, it now draws a reference line at the latest (current) price, labeled 'Current Price'."
                        }
                    ],
                    "medium_structured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                }
                            ],
                            "summaryComponent": "Accepts a 'data' prop containing stock information"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const company = data.name;",
                                    "line": 16
                                },
                                {
                                    "code": "const ticker = data.ticker;",
                                    "line": 17
                                },
                                {
                                    "code": "{company} ({ticker})",
                                    "line": 41
                                }
                            ],
                            "summaryComponent": "Extracts company name and ticker for display"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const formatXAxisDate = (dateStr) => {",
                                    "line": 24
                                },
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />",
                                    "line": 48
                                }
                            ],
                            "summaryComponent": "Formats date strings for the x-axis using a helper function"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const chartData = data.data.map((item) => ({",
                                    "line": 30
                                },
                                {
                                    "code": "date: item.date,",
                                    "line": 31
                                },
                                {
                                    "code": "price: item.close,",
                                    "line": 32
                                }
                            ],
                            "summaryComponent": "Maps raw data to chart-friendly format with date and price"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 43
                                },
                                {
                                    "code": "<LineChart",
                                    "line": 44
                                },
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />",
                                    "line": 48
                                },
                                {
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                                    "line": 49
                                },
                                {
                                    "code": "<Tooltip />",
                                    "line": 50
                                },
                                {
                                    "code": "<Legend />",
                                    "line": 51
                                },
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 52
                                }
                            ],
                            "summaryComponent": "Renders a responsive line chart with axes, tooltip, and legend"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const currentPrice = chartData.length > 0 ? chartData[chartData.length - 1].price : null;",
                                    "line": 36
                                },
                                {
                                    "code": "{currentPrice !== null && (",
                                    "line": 53
                                },
                                {
                                    "code": "<ReferenceLine",
                                    "line": 54
                                },
                                {
                                    "code": "y={currentPrice}",
                                    "line": 55
                                },
                                {
                                    "code": "label=\"Current Price\"",
                                    "line": 56
                                }
                            ],
                            "summaryComponent": "Includes a reference line at the current price, labeled 'Current Price'"
                        }
                    ],
                    "low_unstructured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                }
                            ],
                            "summaryComponent": "defines a React component"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<LineChart",
                                    "line": 44
                                },
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 52
                                }
                            ],
                            "summaryComponent": "displays a stock price line chart"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 43
                                },
                                {
                                    "code": "<LineChart",
                                    "line": 44
                                }
                            ],
                            "summaryComponent": "using Recharts"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "{currentPrice !== null && (",
                                    "line": 53
                                },
                                {
                                    "code": "<ReferenceLine",
                                    "line": 54
                                },
                                {
                                    "code": "y={currentPrice}",
                                    "line": 55
                                },
                                {
                                    "code": "label=\"Current Price\"",
                                    "line": 56
                                }
                            ],
                            "summaryComponent": "now including a reference line for the current price"
                        }
                    ],
                    "high_structured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                }
                            ],
                            "summaryComponent": "Defines the StockChart React component to visualize stock data"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "if (!data || !data.data || !data.data.length) return null;",
                                    "line": 14
                                }
                            ],
                            "summaryComponent": "Validates input data before rendering"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "if (!data || !data.data || !data.data.length) return null;",
                                    "line": 14
                                }
                            ],
                            "summaryComponent": "Returns null if data is missing or empty"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const company = data.name;",
                                    "line": 16
                                },
                                {
                                    "code": "const ticker = data.ticker;",
                                    "line": 17
                                }
                            ],
                            "summaryComponent": "Extracts company name and ticker from the data prop"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const formatDateString = (date) => {",
                                    "line": 19
                                },
                                {
                                    "code": "const formatXAxisDate = (dateStr) => {",
                                    "line": 24
                                }
                            ],
                            "summaryComponent": "Provides helper functions for date formatting"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const formatDateString = (date) => {",
                                    "line": 19
                                },
                                {
                                    "code": "return date.split(\"T\")[0];",
                                    "line": 20
                                }
                            ],
                            "summaryComponent": "'formatDateString' trims timestamps to the date portion"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const formatXAxisDate = (dateStr) => {",
                                    "line": 24
                                },
                                {
                                    "code": "return date.toLocaleString(\"en-US\", { month: \"short\" });",
                                    "line": 26
                                }
                            ],
                            "summaryComponent": "'formatXAxisDate' converts date strings to month abbreviations for the x-axis"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const chartData = data.data.map((item) => ({",
                                    "line": 30
                                },
                                {
                                    "code": "date: item.date,",
                                    "line": 31
                                },
                                {
                                    "code": "price: item.close,",
                                    "line": 32
                                }
                            ],
                            "summaryComponent": "Transforms raw stock data into an array of objects with 'date' and 'price' keys for charting"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 43
                                },
                                {
                                    "code": "<LineChart",
                                    "line": 44
                                }
                            ],
                            "summaryComponent": "Uses Recharts components to render the chart"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 43
                                }
                            ],
                            "summaryComponent": "ResponsiveContainer ensures the chart scales with its parent"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<LineChart",
                                    "line": 44
                                },
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />",
                                    "line": 48
                                },
                                {
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                                    "line": 49
                                },
                                {
                                    "code": "<Tooltip />",
                                    "line": 50
                                },
                                {
                                    "code": "<Legend />",
                                    "line": 51
                                }
                            ],
                            "summaryComponent": "LineChart displays the data with formatted axes, tooltips, and a legend"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 52
                                }
                            ],
                            "summaryComponent": "The Line component visualizes closing prices without dots, using a specific stroke color"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "{currentPrice !== null && (",
                                    "line": 53
                                },
                                {
                                    "code": "<ReferenceLine",
                                    "line": 54
                                },
                                {
                                    "code": "y={currentPrice}",
                                    "line": 55
                                },
                                {
                                    "code": "label=\"Current Price\"",
                                    "line": 56
                                },
                                {
                                    "code": "stroke=\"#ff7300\"",
                                    "line": 57
                                },
                                {
                                    "code": "strokeDasharray=\"3 3\"",
                                    "line": 58
                                }
                            ],
                            "summaryComponent": "Adds a ReferenceLine at the current (latest) price, labeled 'Current Price' and styled distinctly"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<h3>",
                                    "line": 40
                                },
                                {
                                    "code": "{company} ({ticker})",
                                    "line": 41
                                }
                            ],
                            "summaryComponent": "Displays the company name and ticker above the chart"
                        }
                    ]
                },
                "metadata": {
                    "offset": 156,
                    "fullPath": "/project/workspace/frontend/src/StockChart.jsx",
                    "originalCode": "const StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };\n\n  // Helper to format date as MMM (e.g., Jan, Feb)\n  const formatXAxisDate = (dateStr) => {\n    const date = new Date(dateStr);\n    return date.toLocaleString(\"en-US\", { month: \"short\" });\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  // Find the latest price for the reference line\n  const currentPrice = chartData.length > 0 ? chartData[chartData.length - 1].price : null;\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n          {currentPrice !== null && (\n            <ReferenceLine\n              y={currentPrice}\n              label=\"Current Price\"\n              stroke=\"#ff7300\"\n              strokeDasharray=\"3 3\"\n            />\n          )}\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;",
                    "filename": "StockChart.jsx",
                    "id": "2064b284-7f9e-4ac5-a012-0c89f770242c"
                },
                "editPromptValue": ""
            },
            "section_id": "2064b284-7f9e-4ac5-a012-0c89f770242c"
        },
        "timestamp": "2025-08-21 19:28:10.000",
        "event": "create_new_section",
        "source": "frontend",
        "id": "hQWHEvSRlgaXmKkaR7SO"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 2,
            "structured_type": "unstructured",
            "section_id": "2064b284-7f9e-4ac5-a012-0c89f770242c"
        },
        "timestamp": "2025-08-21 19:28:14.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "tQZ7DZQnOLJrmChtvWZR"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 4,
            "structured_type": "unstructured",
            "section_id": "2064b284-7f9e-4ac5-a012-0c89f770242c"
        },
        "timestamp": "2025-08-21 19:28:15.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "JFG1Y0QmHfl9DUbO4aBe"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "unstructured",
            "section_id": "2064b284-7f9e-4ac5-a012-0c89f770242c"
        },
        "timestamp": "2025-08-21 19:28:15.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "MCegImMyW6nZzAhOi9y1"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 5,
            "structured_type": "unstructured",
            "section_id": "2064b284-7f9e-4ac5-a012-0c89f770242c"
        },
        "timestamp": "2025-08-21 19:28:16.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "WPKcwXEjMBn5NOmFemK3"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "unstructured",
            "section_id": "2064b284-7f9e-4ac5-a012-0c89f770242c"
        },
        "timestamp": "2025-08-21 19:28:16.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "egNyrWZAX5UPAn8wn3D1"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 7,
            "structured_type": "unstructured",
            "section_id": "2064b284-7f9e-4ac5-a012-0c89f770242c"
        },
        "timestamp": "2025-08-21 19:28:16.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "k9cvzNkSRIUDl2Fwhgby"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "unstructured",
            "section_id": "2064b284-7f9e-4ac5-a012-0c89f770242c"
        },
        "timestamp": "2025-08-21 19:28:16.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "w5Tk7XT8iZrKIQvbjMbj"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "unstructured",
            "section_id": "2064b284-7f9e-4ac5-a012-0c89f770242c"
        },
        "timestamp": "2025-08-21 19:28:16.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "xLeU4UMEJBbeseHV0mCE"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured": "unstructured",
            "summary": "The StockChart component takes stock data as a prop and visualizes it as a line chart using the Recharts library. It extracts the company name and ticker, formats dates for display, and maps the data into a structure suitable for the chart. The component displays the chart with axes, tooltips, and a legend, and only renders if valid data is provided. Additionally, it now draws a reference line at the latest (current) price, labeled 'Current Price'.",
            "section_id": "2064b284-7f9e-4ac5-a012-0c89f770242c"
        },
        "timestamp": "2025-08-21 19:28:26.000",
        "event": "click_edit_in_prompt",
        "source": "frontend",
        "id": "kf5iJ4TLX4IRNm88aOe6"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 7,
            "structured_type": "unstructured",
            "section_id": "2064b284-7f9e-4ac5-a012-0c89f770242c"
        },
        "timestamp": "2025-08-21 19:28:27.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "46hPLbDR3U77pW3mQzei"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "unstructured",
            "section_id": "2064b284-7f9e-4ac5-a012-0c89f770242c"
        },
        "timestamp": "2025-08-21 19:28:27.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "9sUduSwNlJBmuz1mv9Bl"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 5,
            "structured_type": "unstructured",
            "section_id": "2064b284-7f9e-4ac5-a012-0c89f770242c"
        },
        "timestamp": "2025-08-21 19:28:27.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "NN833xaTkJMoOOMkl4Zw"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 1,
            "structured_type": "unstructured",
            "section_id": "2064b284-7f9e-4ac5-a012-0c89f770242c"
        },
        "timestamp": "2025-08-21 19:28:27.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "UWAfQBggoTWMW9VGd0Ao"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "unstructured",
            "section_id": "2064b284-7f9e-4ac5-a012-0c89f770242c"
        },
        "timestamp": "2025-08-21 19:28:27.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "ciLz1dARPSSLywN534e3"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "unstructured",
            "section_id": "2064b284-7f9e-4ac5-a012-0c89f770242c"
        },
        "timestamp": "2025-08-21 19:28:27.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "f9NrZhfYZFSylq3SAFp5"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "unstructured",
            "section_id": "2064b284-7f9e-4ac5-a012-0c89f770242c"
        },
        "timestamp": "2025-08-21 19:28:27.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "h819IqVBJEBXRwLdCPVr"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 4,
            "structured_type": "unstructured",
            "section_id": "2064b284-7f9e-4ac5-a012-0c89f770242c"
        },
        "timestamp": "2025-08-21 19:28:27.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "w0EwMvr5OFSYVkrIj1uH"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured": "unstructured",
            "original_summary": "The StockChart component takes stock data as a prop and visualizes it as a line chart using the Recharts library. It extracts the company name and ticker, formats dates for display, and maps the data into a structure suitable for the chart. The component displays the chart with axes, tooltips, and a legend, and only renders if valid data is provided. Additionally, it now draws a reference line at the latest (current) price, labeled 'Current Price'.",
            "instruction": "remove the tag of reference line",
            "section_id": "2064b284-7f9e-4ac5-a012-0c89f770242c"
        },
        "timestamp": "2025-08-21 19:28:45.000",
        "event": "apply_instruction_summary",
        "source": "frontend",
        "id": "povy8gBHxTyOlobW7m44"
    },
    {
        "data": {
            "original_summary": "The StockChart component takes stock data as a prop and visualizes it as a line chart using the Recharts library. It extracts the company name and ticker, formats dates for display, and maps the data into a structure suitable for the chart. The component displays the chart with axes, tooltips, and a legend, and only renders if valid data is provided. Additionally, it now draws a reference line at the latest (current) price, labeled 'Current Price'.",
            "original_code": "const StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };\n\n  // Helper to format date as MMM (e.g., Jan, Feb)\n  const formatXAxisDate = (dateStr) => {\n    const date = new Date(dateStr);\n    return date.toLocaleString(\"en-US\", { month: \"short\" });\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  // Find the latest price for the reference line\n  const currentPrice = chartData.length > 0 ? chartData[chartData.length - 1].price : null;\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n          {currentPrice !== null && (\n            <ReferenceLine\n              y={currentPrice}\n              label=\"Current Price\"\n              stroke=\"#ff7300\"\n              strokeDasharray=\"3 3\"\n            />\n          )}\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;",
            "instruction": "remove the tag of reference line",
            "updated_summary": "The StockChart component takes stock data as a prop and visualizes it as a line chart using the Recharts library. It extracts the company name and ticker, formats dates for display, and maps the data into a structure suitable for the chart. The component displays the chart with axes, tooltips, and a legend, and only renders if valid data is provided. Additionally, it now draws a reference line at the latest (current) price, but the reference line is no longer labeled 'Current Price'."
        },
        "timestamp": "2025-08-21 19:28:46.000",
        "event": "apply_instruction_summary",
        "source": "backend",
        "id": "DWjm17EuF1vn3VjElBOQ"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured": "unstructured",
            "original_summary": "The StockChart component takes stock data as a prop and visualizes it as a line chart using the Recharts library. It extracts the company name and ticker, formats dates for display, and maps the data into a structure suitable for the chart. The component displays the chart with axes, tooltips, and a legend, and only renders if valid data is provided. Additionally, it now draws a reference line at the latest (current) price, labeled 'Current Price'.",
            "edited_summary": "The StockChart component takes stock data as a prop and visualizes it as a line chart using the Recharts library. It extracts the company name and ticker, formats dates for display, and maps the data into a structure suitable for the chart. The component displays the chart with axes, tooltips, and a legend, and only renders if valid data is provided. Additionally, it now draws a reference line at the latest (current) price, but the reference line is no longer labeled 'Current Price'.",
            "section_id": "2064b284-7f9e-4ac5-a012-0c89f770242c"
        },
        "timestamp": "2025-08-21 19:28:57.000",
        "event": "commit_modified_summary",
        "source": "frontend",
        "id": "RIUthBJWz850VH2SKKfZ"
    },
    {
        "data": {
            "detail_level": "medium",
            "original_summary": "The StockChart component takes stock data as a prop and visualizes it as a line chart using the Recharts library. It extracts the company name and ticker, formats dates for display, and maps the data into a structure suitable for the chart. The component displays the chart with axes, tooltips, and a legend, and only renders if valid data is provided. Additionally, it now draws a reference line at the latest (current) price, labeled 'Current Price'.",
            "original_code": "const StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };\n\n  // Helper to format date as MMM (e.g., Jan, Feb)\n  const formatXAxisDate = (dateStr) => {\n    const date = new Date(dateStr);\n    return date.toLocaleString(\"en-US\", { month: \"short\" });\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  // Find the latest price for the reference line\n  const currentPrice = chartData.length > 0 ? chartData[chartData.length - 1].price : null;\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n          {currentPrice !== null && (\n            <ReferenceLine\n              y={currentPrice}\n              label=\"Current Price\"\n              stroke=\"#ff7300\"\n              strokeDasharray=\"3 3\"\n            />\n          )}\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;",
            "updated_code": "const StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };\n\n  // Helper to format date as MMM (e.g., Jan, Feb)\n  const formatXAxisDate = (dateStr) => {\n    const date = new Date(dateStr);\n    return date.toLocaleString(\"en-US\", { month: \"short\" });\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  // Find the latest price for the reference line\n  const currentPrice = chartData.length > 0 ? chartData[chartData.length - 1].price : null;\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n          {currentPrice !== null && (\n            <ReferenceLine\n              y={currentPrice}\n              stroke=\"#ff7300\"\n              strokeDasharray=\"3 3\"\n            />\n          )}\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;",
            "edited_summary": "The StockChart component takes stock data as a prop and visualizes it as a line chart using the Recharts library. It extracts the company name and ticker, formats dates for display, and maps the data into a structure suitable for the chart. The component displays the chart with axes, tooltips, and a legend, and only renders if valid data is provided. Additionally, it now draws a reference line at the latest (current) price, but the reference line is no longer labeled 'Current Price'.",
            "structured_type": "unstructured"
        },
        "timestamp": "2025-08-21 19:28:59.000",
        "event": "modify_summary_mediation",
        "source": "backend",
        "id": "gXGiwFa1It0HxD3ApA0Q"
    },
    {
        "data": {
            "old_summary": {
                "high_unstructured": "This code defines the StockChart React component, which renders a responsive line chart of stock closing prices using the Recharts library. The component first validates the input data, then extracts the company name and ticker for display in the chart header. It includes helper functions to format date strings, both for general use and specifically for rendering month abbreviations on the x-axis. The stock data is transformed into an array of objects with date and price fields, which is then fed to the LineChart component, complete with axes, tooltips, a legend, and a styled line representing the stock's closing prices. Notably, the chart now features a ReferenceLine at the most recent price, visually highlighting the current price with a label and distinct styling.",
                "title": "StockChart React Component with Current Price Reference Line",
                "low_structured": "• Defines a React component for stock charts\n• Uses Recharts to render a line chart\n• Displays company and ticker information\n• Adds a reference line indicating the current price on the chart",
                "medium_unstructured": "The StockChart component takes stock data as a prop and visualizes it as a line chart using the Recharts library. It extracts the company name and ticker, formats dates for display, and maps the data into a structure suitable for the chart. The component displays the chart with axes, tooltips, and a legend, and only renders if valid data is provided. Additionally, it now draws a reference line at the latest (current) price, labeled 'Current Price'.",
                "medium_structured": "• Accepts a 'data' prop containing stock information\n• Extracts company name and ticker for display\n• Formats date strings for the x-axis using a helper function\n• Maps raw data to chart-friendly format with date and price\n• Renders a responsive line chart with axes, tooltip, and legend\n• Includes a reference line at the current price, labeled 'Current Price'",
                "low_unstructured": "This code defines a React component that displays a stock price line chart using Recharts, now including a reference line for the current price.",
                "high_structured": "• Defines the StockChart React component to visualize stock data\n• Validates input data before rendering\n  ◦ Returns null if data is missing or empty\n• Extracts company name and ticker from the data prop\n• Provides helper functions for date formatting\n  ◦ 'formatDateString' trims timestamps to the date portion\n  ◦ 'formatXAxisDate' converts date strings to month abbreviations for the x-axis\n• Transforms raw stock data into an array of objects with 'date' and 'price' keys for charting\n• Uses Recharts components to render the chart\n  ◦ ResponsiveContainer ensures the chart scales with its parent\n  ◦ LineChart displays the data with formatted axes, tooltips, and a legend\n  ◦ The Line component visualizes closing prices without dots, using a specific stroke color\n  ◦ Adds a ReferenceLine at the current (latest) price, labeled 'Current Price' and styled distinctly\n• Displays the company name and ticker above the chart"
            },
            "original_code": "const StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };\n\n  // Helper to format date as MMM (e.g., Jan, Feb)\n  const formatXAxisDate = (dateStr) => {\n    const date = new Date(dateStr);\n    return date.toLocaleString(\"en-US\", { month: \"short\" });\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  // Find the latest price for the reference line\n  const currentPrice = chartData.length > 0 ? chartData[chartData.length - 1].price : null;\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n          {currentPrice !== null && (\n            <ReferenceLine\n              y={currentPrice}\n              stroke=\"#ff7300\"\n              strokeDasharray=\"3 3\"\n            />\n          )}\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;",
            "new_code": "const StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };\n\n  // Helper to format date as MMM (e.g., Jan, Feb)\n  const formatXAxisDate = (dateStr) => {\n    const date = new Date(dateStr);\n    return date.toLocaleString(\"en-US\", { month: \"short\" });\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  // Find the latest price for the reference line\n  const currentPrice = chartData.length > 0 ? chartData[chartData.length - 1].price : null;\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n          {currentPrice !== null && (\n            <ReferenceLine\n              y={currentPrice}\n              stroke=\"#ff7300\"\n              strokeDasharray=\"3 3\"\n            />\n          )}\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;",
            "new_summary": {
                "high_unstructured": "This code defines the StockChart React component, which renders a responsive line chart of stock closing prices using the Recharts library. The component first validates the input data, then extracts the company name and ticker for display in the chart header. It includes helper functions to format date strings, both for general use and specifically for rendering month abbreviations on the x-axis. The stock data is transformed into an array of objects with date and price fields, which is then fed to the LineChart component, complete with axes, tooltips, a legend, and a styled line representing the stock's closing prices. Notably, the chart now features a ReferenceLine at the most recent price, visually highlighting the current price with distinct styling, but the ReferenceLine no longer includes a label.",
                "title": "StockChart React Component with Current Price Reference Line (Label Removed)",
                "low_structured": "• Defines a React component for stock charts\n• Uses Recharts to render a line chart\n• Displays company and ticker information\n• Adds a reference line indicating the current price on the chart, but the reference line no longer includes a label",
                "medium_unstructured": "The StockChart component takes stock data as a prop and visualizes it as a line chart using the Recharts library. It extracts the company name and ticker, formats dates for display, and maps the data into a structure suitable for the chart. The component displays the chart with axes, tooltips, and a legend, and only renders if valid data is provided. Additionally, it now draws a reference line at the latest (current) price, but the reference line is no longer labeled 'Current Price'.",
                "medium_structured": "• Accepts a 'data' prop containing stock information\n• Extracts company name and ticker for display\n• Formats date strings for the x-axis using a helper function\n• Maps raw data to chart-friendly format with date and price\n• Renders a responsive line chart with axes, tooltip, and legend\n• Includes a reference line at the current price, but the reference line does not have a label",
                "low_unstructured": "This code defines a React component that displays a stock price line chart using Recharts, now including a reference line for the current price but with the label removed from the reference line.",
                "high_structured": "• Defines the StockChart React component to visualize stock data\n• Validates input data before rendering\n  ◦ Returns null if data is missing or empty\n• Extracts company name and ticker from the data prop\n• Provides helper functions for date formatting\n  ◦ 'formatDateString' trims timestamps to the date portion\n  ◦ 'formatXAxisDate' converts date strings to month abbreviations for the x-axis\n• Transforms raw stock data into an array of objects with 'date' and 'price' keys for charting\n• Uses Recharts components to render the chart\n  ◦ ResponsiveContainer ensures the chart scales with its parent\n  ◦ LineChart displays the data with formatted axes, tooltips, and a legend\n  ◦ The Line component visualizes closing prices without dots, using a specific stroke color\n  ◦ Adds a ReferenceLine at the current (latest) price, styled distinctly but without a label\n• Displays the company name and ticker above the chart"
            }
        },
        "timestamp": "2025-08-21 19:29:08.000",
        "event": "summarize_modified_code",
        "source": "backend",
        "id": "6ymNkCuhtWTZjdIQejRA"
    },
    {
        "data": {
            "summary": "• Defines a React component for stock charts\n• Uses Recharts to render a line chart\n• Displays company and ticker information\n• Adds a reference line indicating the current price on the chart, but the reference line no longer includes a label",
            "code": "13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Helper to format date as MMM (e.g., Jan, Feb)\n24:   const formatXAxisDate = (dateStr) => {\n25:     const date = new Date(dateStr);\n26:     return date.toLocaleString(\"en-US\", { month: \"short\" });\n27:   };\n28: \n29:   // Combine labels and values into an array of objects for Recharts\n30:   const chartData = data.data.map((item) => ({\n31:     date: item.date,\n32:     price: item.close,\n33:   }));\n34: \n35:   // Find the latest price for the reference line\n36:   const currentPrice = chartData.length > 0 ? chartData[chartData.length - 1].price : null;\n37: \n38:   return (\n39:     <div style={{ marginTop: \"2rem\" }}>\n40:       <h3>\n41:         {company} ({ticker})\n42:       </h3>\n43:       <ResponsiveContainer width=\"100%\" height={300}>\n44:         <LineChart\n45:           data={chartData}\n46:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n47:         >\n48:           <XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />\n49:           <YAxis domain={[\"auto\", \"auto\"]} />\n50:           <Tooltip />\n51:           <Legend />\n52:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n53:           {currentPrice !== null && (\n54:             <ReferenceLine\n55:               y={currentPrice}\n56:               stroke=\"#ff7300\"\n57:               strokeDasharray=\"3 3\"\n58:             />\n59:           )}\n60:         </LineChart>\n61:       </ResponsiveContainer>\n62:     </div>\n63:   );\n64: };\n65: \n66: export default StockChart;",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        },
                        {
                            "code": "export default StockChart;",
                            "line": 66
                        }
                    ],
                    "summaryComponent": "Defines a React component for stock charts"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 43
                        },
                        {
                            "code": "<LineChart",
                            "line": 44
                        }
                    ],
                    "summaryComponent": "Uses Recharts to render a line chart"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<h3>",
                            "line": 40
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 41
                        }
                    ],
                    "summaryComponent": "Displays company and ticker information"
                },
                {
                    "codeSegments": [
                        {
                            "code": "{currentPrice !== null && (",
                            "line": 53
                        },
                        {
                            "code": "<ReferenceLine",
                            "line": 54
                        },
                        {
                            "code": "y={currentPrice}",
                            "line": 55
                        }
                    ],
                    "summaryComponent": "Adds a reference line indicating the current price on the chart, but the reference line no longer includes a label"
                }
            ]
        },
        "timestamp": "2025-08-21 19:29:10.000",
        "event": "map_summary_code",
        "source": "backend",
        "id": "hXgZ6bFgpyryWidOEg0o"
    },
    {
        "data": {
            "summary": "This code defines a React component that displays a stock price line chart using Recharts, now including a reference line for the current price but with the label removed from the reference line.",
            "code": "13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Helper to format date as MMM (e.g., Jan, Feb)\n24:   const formatXAxisDate = (dateStr) => {\n25:     const date = new Date(dateStr);\n26:     return date.toLocaleString(\"en-US\", { month: \"short\" });\n27:   };\n28: \n29:   // Combine labels and values into an array of objects for Recharts\n30:   const chartData = data.data.map((item) => ({\n31:     date: item.date,\n32:     price: item.close,\n33:   }));\n34: \n35:   // Find the latest price for the reference line\n36:   const currentPrice = chartData.length > 0 ? chartData[chartData.length - 1].price : null;\n37: \n38:   return (\n39:     <div style={{ marginTop: \"2rem\" }}>\n40:       <h3>\n41:         {company} ({ticker})\n42:       </h3>\n43:       <ResponsiveContainer width=\"100%\" height={300}>\n44:         <LineChart\n45:           data={chartData}\n46:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n47:         >\n48:           <XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />\n49:           <YAxis domain={[\"auto\", \"auto\"]} />\n50:           <Tooltip />\n51:           <Legend />\n52:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n53:           {currentPrice !== null && (\n54:             <ReferenceLine\n55:               y={currentPrice}\n56:               stroke=\"#ff7300\"\n57:               strokeDasharray=\"3 3\"\n58:             />\n59:           )}\n60:         </LineChart>\n61:       </ResponsiveContainer>\n62:     </div>\n63:   );\n64: };\n65: \n66: export default StockChart;",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        },
                        {
                            "code": "export default StockChart;",
                            "line": 66
                        }
                    ],
                    "summaryComponent": "defines a React component"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<LineChart",
                            "line": 44
                        },
                        {
                            "code": "data={chartData}",
                            "line": 45
                        },
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 52
                        }
                    ],
                    "summaryComponent": "displays a stock price line chart"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 43
                        },
                        {
                            "code": "<LineChart",
                            "line": 44
                        },
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />",
                            "line": 48
                        },
                        {
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                            "line": 49
                        },
                        {
                            "code": "<Tooltip />",
                            "line": 50
                        },
                        {
                            "code": "<Legend />",
                            "line": 51
                        },
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 52
                        },
                        {
                            "code": "<ReferenceLine",
                            "line": 54
                        }
                    ],
                    "summaryComponent": "using Recharts"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const currentPrice = chartData.length > 0 ? chartData[chartData.length - 1].price : null;",
                            "line": 36
                        },
                        {
                            "code": "{currentPrice !== null && (",
                            "line": 53
                        },
                        {
                            "code": "<ReferenceLine",
                            "line": 54
                        },
                        {
                            "code": "y={currentPrice}",
                            "line": 55
                        }
                    ],
                    "summaryComponent": "now including a reference line for the current price"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<ReferenceLine",
                            "line": 54
                        }
                    ],
                    "summaryComponent": "but with the label removed from the reference line"
                }
            ]
        },
        "timestamp": "2025-08-21 19:29:12.000",
        "event": "map_summary_code",
        "source": "backend",
        "id": "8T9rClfjmkGDBX05QFRk"
    },
    {
        "data": {
            "summary": "• Defines the StockChart React component to visualize stock data\n• Validates input data before rendering\n  ◦ Returns null if data is missing or empty\n• Extracts company name and ticker from the data prop\n• Provides helper functions for date formatting\n  ◦ 'formatDateString' trims timestamps to the date portion\n  ◦ 'formatXAxisDate' converts date strings to month abbreviations for the x-axis\n• Transforms raw stock data into an array of objects with 'date' and 'price' keys for charting\n• Uses Recharts components to render the chart\n  ◦ ResponsiveContainer ensures the chart scales with its parent\n  ◦ LineChart displays the data with formatted axes, tooltips, and a legend\n  ◦ The Line component visualizes closing prices without dots, using a specific stroke color\n  ◦ Adds a ReferenceLine at the current (latest) price, styled distinctly but without a label\n• Displays the company name and ticker above the chart",
            "code": "13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Helper to format date as MMM (e.g., Jan, Feb)\n24:   const formatXAxisDate = (dateStr) => {\n25:     const date = new Date(dateStr);\n26:     return date.toLocaleString(\"en-US\", { month: \"short\" });\n27:   };\n28: \n29:   // Combine labels and values into an array of objects for Recharts\n30:   const chartData = data.data.map((item) => ({\n31:     date: item.date,\n32:     price: item.close,\n33:   }));\n34: \n35:   // Find the latest price for the reference line\n36:   const currentPrice = chartData.length > 0 ? chartData[chartData.length - 1].price : null;\n37: \n38:   return (\n39:     <div style={{ marginTop: \"2rem\" }}>\n40:       <h3>\n41:         {company} ({ticker})\n42:       </h3>\n43:       <ResponsiveContainer width=\"100%\" height={300}>\n44:         <LineChart\n45:           data={chartData}\n46:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n47:         >\n48:           <XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />\n49:           <YAxis domain={[\"auto\", \"auto\"]} />\n50:           <Tooltip />\n51:           <Legend />\n52:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n53:           {currentPrice !== null && (\n54:             <ReferenceLine\n55:               y={currentPrice}\n56:               stroke=\"#ff7300\"\n57:               strokeDasharray=\"3 3\"\n58:             />\n59:           )}\n60:         </LineChart>\n61:       </ResponsiveContainer>\n62:     </div>\n63:   );\n64: };\n65: \n66: export default StockChart;",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        }
                    ],
                    "summaryComponent": "Defines the StockChart React component to visualize stock data"
                },
                {
                    "codeSegments": [
                        {
                            "code": "if (!data || !data.data || !data.data.length) return null;",
                            "line": 14
                        }
                    ],
                    "summaryComponent": "Validates input data before rendering"
                },
                {
                    "codeSegments": [
                        {
                            "code": "if (!data || !data.data || !data.data.length) return null;",
                            "line": 14
                        }
                    ],
                    "summaryComponent": "Returns null if data is missing or empty"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const company = data.name;",
                            "line": 16
                        },
                        {
                            "code": "const ticker = data.ticker;",
                            "line": 17
                        }
                    ],
                    "summaryComponent": "Extracts company name and ticker from the data prop"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const formatDateString = (date) => {",
                            "line": 19
                        },
                        {
                            "code": "const formatXAxisDate = (dateStr) => {",
                            "line": 24
                        }
                    ],
                    "summaryComponent": "Provides helper functions for date formatting"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const formatDateString = (date) => {",
                            "line": 19
                        },
                        {
                            "code": "return date.split(\"T\")[0];",
                            "line": 20
                        }
                    ],
                    "summaryComponent": "'formatDateString' trims timestamps to the date portion"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const formatXAxisDate = (dateStr) => {",
                            "line": 24
                        },
                        {
                            "code": "return date.toLocaleString(\"en-US\", { month: \"short\" });",
                            "line": 26
                        }
                    ],
                    "summaryComponent": "'formatXAxisDate' converts date strings to month abbreviations for the x-axis"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const chartData = data.data.map((item) => ({",
                            "line": 30
                        },
                        {
                            "code": "date: item.date,",
                            "line": 31
                        },
                        {
                            "code": "price: item.close,",
                            "line": 32
                        }
                    ],
                    "summaryComponent": "Transforms raw stock data into an array of objects with 'date' and 'price' keys for charting"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 43
                        },
                        {
                            "code": "<LineChart",
                            "line": 44
                        }
                    ],
                    "summaryComponent": "Uses Recharts components to render the chart"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<h3>",
                            "line": 40
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 41
                        }
                    ],
                    "summaryComponent": "Displays the company name and ticker above the chart"
                }
            ]
        },
        "timestamp": "2025-08-21 19:29:12.000",
        "event": "map_summary_code",
        "source": "backend",
        "id": "Gsqt91MgWx5c6dJmgsBT"
    },
    {
        "data": {
            "summary": "• Accepts a 'data' prop containing stock information\n• Extracts company name and ticker for display\n• Formats date strings for the x-axis using a helper function\n• Maps raw data to chart-friendly format with date and price\n• Renders a responsive line chart with axes, tooltip, and legend\n• Includes a reference line at the current price, but the reference line does not have a label",
            "code": "13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Helper to format date as MMM (e.g., Jan, Feb)\n24:   const formatXAxisDate = (dateStr) => {\n25:     const date = new Date(dateStr);\n26:     return date.toLocaleString(\"en-US\", { month: \"short\" });\n27:   };\n28: \n29:   // Combine labels and values into an array of objects for Recharts\n30:   const chartData = data.data.map((item) => ({\n31:     date: item.date,\n32:     price: item.close,\n33:   }));\n34: \n35:   // Find the latest price for the reference line\n36:   const currentPrice = chartData.length > 0 ? chartData[chartData.length - 1].price : null;\n37: \n38:   return (\n39:     <div style={{ marginTop: \"2rem\" }}>\n40:       <h3>\n41:         {company} ({ticker})\n42:       </h3>\n43:       <ResponsiveContainer width=\"100%\" height={300}>\n44:         <LineChart\n45:           data={chartData}\n46:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n47:         >\n48:           <XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />\n49:           <YAxis domain={[\"auto\", \"auto\"]} />\n50:           <Tooltip />\n51:           <Legend />\n52:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n53:           {currentPrice !== null && (\n54:             <ReferenceLine\n55:               y={currentPrice}\n56:               stroke=\"#ff7300\"\n57:               strokeDasharray=\"3 3\"\n58:             />\n59:           )}\n60:         </LineChart>\n61:       </ResponsiveContainer>\n62:     </div>\n63:   );\n64: };\n65: \n66: export default StockChart;",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        }
                    ],
                    "summaryComponent": "Accepts a 'data' prop containing stock information"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const company = data.name;",
                            "line": 16
                        },
                        {
                            "code": "const ticker = data.ticker;",
                            "line": 17
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 41
                        }
                    ],
                    "summaryComponent": "Extracts company name and ticker for display"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const formatXAxisDate = (dateStr) => {",
                            "line": 24
                        },
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />",
                            "line": 48
                        }
                    ],
                    "summaryComponent": "Formats date strings for the x-axis using a helper function"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const chartData = data.data.map((item) => ({",
                            "line": 30
                        },
                        {
                            "code": "date: item.date,",
                            "line": 31
                        },
                        {
                            "code": "price: item.close,",
                            "line": 32
                        }
                    ],
                    "summaryComponent": "Maps raw data to chart-friendly format with date and price"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 43
                        },
                        {
                            "code": "<LineChart",
                            "line": 44
                        },
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />",
                            "line": 48
                        },
                        {
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                            "line": 49
                        },
                        {
                            "code": "<Tooltip />",
                            "line": 50
                        },
                        {
                            "code": "<Legend />",
                            "line": 51
                        }
                    ],
                    "summaryComponent": "Renders a responsive line chart with axes, tooltip, and legend"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const currentPrice = chartData.length > 0 ? chartData[chartData.length - 1].price : null;",
                            "line": 36
                        },
                        {
                            "code": "{currentPrice !== null && (",
                            "line": 53
                        },
                        {
                            "code": "<ReferenceLine",
                            "line": 54
                        },
                        {
                            "code": "y={currentPrice}",
                            "line": 55
                        }
                    ],
                    "summaryComponent": "Includes a reference line at the current price, but the reference line does not have a label"
                }
            ]
        },
        "timestamp": "2025-08-21 19:29:12.000",
        "event": "map_summary_code",
        "source": "backend",
        "id": "aUe5SoLwuHFVICIfjzrA"
    },
    {
        "data": {
            "summary": "The StockChart component takes stock data as a prop and visualizes it as a line chart using the Recharts library. It extracts the company name and ticker, formats dates for display, and maps the data into a structure suitable for the chart. The component displays the chart with axes, tooltips, and a legend, and only renders if valid data is provided. Additionally, it now draws a reference line at the latest (current) price, but the reference line is no longer labeled 'Current Price'.",
            "code": "13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Helper to format date as MMM (e.g., Jan, Feb)\n24:   const formatXAxisDate = (dateStr) => {\n25:     const date = new Date(dateStr);\n26:     return date.toLocaleString(\"en-US\", { month: \"short\" });\n27:   };\n28: \n29:   // Combine labels and values into an array of objects for Recharts\n30:   const chartData = data.data.map((item) => ({\n31:     date: item.date,\n32:     price: item.close,\n33:   }));\n34: \n35:   // Find the latest price for the reference line\n36:   const currentPrice = chartData.length > 0 ? chartData[chartData.length - 1].price : null;\n37: \n38:   return (\n39:     <div style={{ marginTop: \"2rem\" }}>\n40:       <h3>\n41:         {company} ({ticker})\n42:       </h3>\n43:       <ResponsiveContainer width=\"100%\" height={300}>\n44:         <LineChart\n45:           data={chartData}\n46:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n47:         >\n48:           <XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />\n49:           <YAxis domain={[\"auto\", \"auto\"]} />\n50:           <Tooltip />\n51:           <Legend />\n52:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n53:           {currentPrice !== null && (\n54:             <ReferenceLine\n55:               y={currentPrice}\n56:               stroke=\"#ff7300\"\n57:               strokeDasharray=\"3 3\"\n58:             />\n59:           )}\n60:         </LineChart>\n61:       </ResponsiveContainer>\n62:     </div>\n63:   );\n64: };\n65: \n66: export default StockChart;",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        }
                    ],
                    "summaryComponent": "The StockChart component"
                },
                {
                    "codeSegments": [
                        {
                            "code": "({ data })",
                            "line": 13
                        }
                    ],
                    "summaryComponent": "takes stock data as a prop"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<LineChart",
                            "line": 44
                        },
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 52
                        }
                    ],
                    "summaryComponent": "visualizes it as a line chart using the Recharts library"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const company = data.name;",
                            "line": 16
                        },
                        {
                            "code": "const ticker = data.ticker;",
                            "line": 17
                        }
                    ],
                    "summaryComponent": "extracts the company name and ticker"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const formatDateString = (date) => {",
                            "line": 19
                        },
                        {
                            "code": "const formatXAxisDate = (dateStr) => {",
                            "line": 24
                        }
                    ],
                    "summaryComponent": "formats dates for display"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const chartData = data.data.map((item) => ({",
                            "line": 30
                        }
                    ],
                    "summaryComponent": "maps the data into a structure suitable for the chart"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />",
                            "line": 48
                        },
                        {
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                            "line": 49
                        },
                        {
                            "code": "<Tooltip />",
                            "line": 50
                        },
                        {
                            "code": "<Legend />",
                            "line": 51
                        }
                    ],
                    "summaryComponent": "displays the chart with axes, tooltips, and a legend"
                },
                {
                    "codeSegments": [
                        {
                            "code": "if (!data || !data.data || !data.data.length) return null;",
                            "line": 14
                        }
                    ],
                    "summaryComponent": "only renders if valid data is provided"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const currentPrice = chartData.length > 0 ? chartData[chartData.length - 1].price : null;",
                            "line": 36
                        },
                        {
                            "code": "{currentPrice !== null && (",
                            "line": 53
                        },
                        {
                            "code": "<ReferenceLine",
                            "line": 54
                        },
                        {
                            "code": "y={currentPrice}",
                            "line": 55
                        }
                    ],
                    "summaryComponent": "draws a reference line at the latest (current) price"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<ReferenceLine",
                            "line": 54
                        }
                    ],
                    "summaryComponent": "the reference line is no longer labeled 'Current Price'"
                }
            ]
        },
        "timestamp": "2025-08-21 19:29:14.000",
        "event": "map_summary_code",
        "source": "backend",
        "id": "IiLusIIH87A77lbz8JeE"
    },
    {
        "data": {
            "section_data": {
                "editPromptDetailLevel": null,
                "title": "StockChart React Component with Current Price Reference Line (Label Removed)",
                "selectedStructured": "unstructured",
                "lines": [
                    13,
                    67
                ],
                "oldSummaryData": {
                    "high_unstructured": "This code defines the StockChart React component, which renders a responsive line chart of stock closing prices using the Recharts library. The component first validates the input data, then extracts the company name and ticker for display in the chart header. It includes helper functions to format date strings, both for general use and specifically for rendering month abbreviations on the x-axis. The stock data is transformed into an array of objects with date and price fields, which is then fed to the LineChart component, complete with axes, tooltips, a legend, and a styled line representing the stock's closing prices. Notably, the chart now features a ReferenceLine at the most recent price, visually highlighting the current price with a label and distinct styling.",
                    "title": "StockChart React Component with Current Price Reference Line",
                    "low_structured": "• Defines a React component for stock charts\n• Uses Recharts to render a line chart\n• Displays company and ticker information\n• Adds a reference line indicating the current price on the chart",
                    "medium_unstructured": "The StockChart component takes stock data as a prop and visualizes it as a line chart using the Recharts library. It extracts the company name and ticker, formats dates for display, and maps the data into a structure suitable for the chart. The component displays the chart with axes, tooltips, and a legend, and only renders if valid data is provided. Additionally, it now draws a reference line at the latest (current) price, labeled 'Current Price'.",
                    "medium_structured": "• Accepts a 'data' prop containing stock information\n• Extracts company name and ticker for display\n• Formats date strings for the x-axis using a helper function\n• Maps raw data to chart-friendly format with date and price\n• Renders a responsive line chart with axes, tooltip, and legend\n• Includes a reference line at the current price, labeled 'Current Price'",
                    "low_unstructured": "This code defines a React component that displays a stock price line chart using Recharts, now including a reference line for the current price.",
                    "high_structured": "• Defines the StockChart React component to visualize stock data\n• Validates input data before rendering\n  ◦ Returns null if data is missing or empty\n• Extracts company name and ticker from the data prop\n• Provides helper functions for date formatting\n  ◦ 'formatDateString' trims timestamps to the date portion\n  ◦ 'formatXAxisDate' converts date strings to month abbreviations for the x-axis\n• Transforms raw stock data into an array of objects with 'date' and 'price' keys for charting\n• Uses Recharts components to render the chart\n  ◦ ResponsiveContainer ensures the chart scales with its parent\n  ◦ LineChart displays the data with formatted axes, tooltips, and a legend\n  ◦ The Line component visualizes closing prices without dots, using a specific stroke color\n  ◦ Adds a ReferenceLine at the current (latest) price, labeled 'Current Price' and styled distinctly\n• Displays the company name and ticker above the chart"
                },
                "createdAt": 1755836957000,
                "summaryData": {
                    "high_unstructured": "This code defines the StockChart React component, which renders a responsive line chart of stock closing prices using the Recharts library. The component first validates the input data, then extracts the company name and ticker for display in the chart header. It includes helper functions to format date strings, both for general use and specifically for rendering month abbreviations on the x-axis. The stock data is transformed into an array of objects with date and price fields, which is then fed to the LineChart component, complete with axes, tooltips, a legend, and a styled line representing the stock's closing prices. Notably, the chart now features a ReferenceLine at the most recent price, visually highlighting the current price with distinct styling, but the ReferenceLine no longer includes a label.",
                    "title": "StockChart React Component with Current Price Reference Line (Label Removed)",
                    "low_structured": "• Defines a React component for stock charts\n• Uses Recharts to render a line chart\n• Displays company and ticker information\n• Adds a reference line indicating the current price on the chart, but the reference line no longer includes a label",
                    "medium_unstructured": "The StockChart component takes stock data as a prop and visualizes it as a line chart using the Recharts library. It extracts the company name and ticker, formats dates for display, and maps the data into a structure suitable for the chart. The component displays the chart with axes, tooltips, and a legend, and only renders if valid data is provided. Additionally, it now draws a reference line at the latest (current) price, but the reference line is no longer labeled 'Current Price'.",
                    "medium_structured": "• Accepts a 'data' prop containing stock information\n• Extracts company name and ticker for display\n• Formats date strings for the x-axis using a helper function\n• Maps raw data to chart-friendly format with date and price\n• Renders a responsive line chart with axes, tooltip, and legend\n• Includes a reference line at the current price, but the reference line does not have a label",
                    "low_unstructured": "This code defines a React component that displays a stock price line chart using Recharts, now including a reference line for the current price but with the label removed from the reference line.",
                    "high_structured": "• Defines the StockChart React component to visualize stock data\n• Validates input data before rendering\n  ◦ Returns null if data is missing or empty\n• Extracts company name and ticker from the data prop\n• Provides helper functions for date formatting\n  ◦ 'formatDateString' trims timestamps to the date portion\n  ◦ 'formatXAxisDate' converts date strings to month abbreviations for the x-axis\n• Transforms raw stock data into an array of objects with 'date' and 'price' keys for charting\n• Uses Recharts components to render the chart\n  ◦ ResponsiveContainer ensures the chart scales with its parent\n  ◦ LineChart displays the data with formatted axes, tooltips, and a legend\n  ◦ The Line component visualizes closing prices without dots, using a specific stroke color\n  ◦ Adds a ReferenceLine at the current (latest) price, styled distinctly but without a label\n• Displays the company name and ticker above the chart"
                },
                "editPromptStructured": null,
                "selectedDetailLevel": "medium",
                "summaryMappings": {
                    "high_unstructured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                }
                            ],
                            "summaryComponent": "defines the StockChart React component"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 43
                                },
                                {
                                    "code": "<LineChart",
                                    "line": 44
                                },
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 52
                                }
                            ],
                            "summaryComponent": "renders a responsive line chart of stock closing prices using the Recharts library"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "if (!data || !data.data || !data.data.length) return null;",
                                    "line": 14
                                }
                            ],
                            "summaryComponent": "validates the input data"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const company = data.name;",
                                    "line": 16
                                },
                                {
                                    "code": "const ticker = data.ticker;",
                                    "line": 17
                                },
                                {
                                    "code": "{company} ({ticker})",
                                    "line": 41
                                }
                            ],
                            "summaryComponent": "extracts the company name and ticker for display in the chart header"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const formatDateString = (date) => {",
                                    "line": 19
                                },
                                {
                                    "code": "return date.split(\"T\")[0];",
                                    "line": 20
                                }
                            ],
                            "summaryComponent": "includes helper functions to format date strings"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const formatXAxisDate = (dateStr) => {",
                                    "line": 24
                                },
                                {
                                    "code": "return date.toLocaleString(\"en-US\", { month: \"short\" });",
                                    "line": 26
                                },
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />",
                                    "line": 48
                                }
                            ],
                            "summaryComponent": "specifically for rendering month abbreviations on the x-axis"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const chartData = data.data.map((item) => ({",
                                    "line": 30
                                },
                                {
                                    "code": "date: item.date,",
                                    "line": 31
                                },
                                {
                                    "code": "price: item.close,",
                                    "line": 32
                                }
                            ],
                            "summaryComponent": "stock data is transformed into an array of objects with date and price fields"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<LineChart",
                                    "line": 44
                                },
                                {
                                    "code": "data={chartData}",
                                    "line": 45
                                }
                            ],
                            "summaryComponent": "fed to the LineChart component"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />",
                                    "line": 48
                                },
                                {
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                                    "line": 49
                                },
                                {
                                    "code": "<Tooltip />",
                                    "line": 50
                                },
                                {
                                    "code": "<Legend />",
                                    "line": 51
                                },
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 52
                                }
                            ],
                            "summaryComponent": "complete with axes, tooltips, a legend, and a styled line representing the stock's closing prices"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const currentPrice = chartData.length > 0 ? chartData[chartData.length - 1].price : null;",
                                    "line": 36
                                },
                                {
                                    "code": "{currentPrice !== null && (",
                                    "line": 53
                                },
                                {
                                    "code": "<ReferenceLine",
                                    "line": 54
                                },
                                {
                                    "code": "y={currentPrice}",
                                    "line": 55
                                },
                                {
                                    "code": "stroke=\"#ff7300\"",
                                    "line": 56
                                },
                                {
                                    "code": "strokeDasharray=\"3 3\"",
                                    "line": 57
                                }
                            ],
                            "summaryComponent": "features a ReferenceLine at the most recent price, visually highlighting the current price with distinct styling, but the ReferenceLine no longer includes a label"
                        }
                    ],
                    "low_structured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                },
                                {
                                    "code": "export default StockChart;",
                                    "line": 66
                                }
                            ],
                            "summaryComponent": "Defines a React component for stock charts"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 43
                                },
                                {
                                    "code": "<LineChart",
                                    "line": 44
                                }
                            ],
                            "summaryComponent": "Uses Recharts to render a line chart"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<h3>",
                                    "line": 40
                                },
                                {
                                    "code": "{company} ({ticker})",
                                    "line": 41
                                }
                            ],
                            "summaryComponent": "Displays company and ticker information"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "{currentPrice !== null && (",
                                    "line": 53
                                },
                                {
                                    "code": "<ReferenceLine",
                                    "line": 54
                                },
                                {
                                    "code": "y={currentPrice}",
                                    "line": 55
                                }
                            ],
                            "summaryComponent": "Adds a reference line indicating the current price on the chart, but the reference line no longer includes a label"
                        }
                    ],
                    "medium_unstructured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                }
                            ],
                            "summaryComponent": "The StockChart component"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "({ data })",
                                    "line": 13
                                }
                            ],
                            "summaryComponent": "takes stock data as a prop"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<LineChart",
                                    "line": 44
                                },
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 52
                                }
                            ],
                            "summaryComponent": "visualizes it as a line chart using the Recharts library"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const company = data.name;",
                                    "line": 16
                                },
                                {
                                    "code": "const ticker = data.ticker;",
                                    "line": 17
                                }
                            ],
                            "summaryComponent": "extracts the company name and ticker"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const formatDateString = (date) => {",
                                    "line": 19
                                },
                                {
                                    "code": "const formatXAxisDate = (dateStr) => {",
                                    "line": 24
                                }
                            ],
                            "summaryComponent": "formats dates for display"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const chartData = data.data.map((item) => ({",
                                    "line": 30
                                }
                            ],
                            "summaryComponent": "maps the data into a structure suitable for the chart"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />",
                                    "line": 48
                                },
                                {
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                                    "line": 49
                                },
                                {
                                    "code": "<Tooltip />",
                                    "line": 50
                                },
                                {
                                    "code": "<Legend />",
                                    "line": 51
                                }
                            ],
                            "summaryComponent": "displays the chart with axes, tooltips, and a legend"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "if (!data || !data.data || !data.data.length) return null;",
                                    "line": 14
                                }
                            ],
                            "summaryComponent": "only renders if valid data is provided"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const currentPrice = chartData.length > 0 ? chartData[chartData.length - 1].price : null;",
                                    "line": 36
                                },
                                {
                                    "code": "{currentPrice !== null && (",
                                    "line": 53
                                },
                                {
                                    "code": "<ReferenceLine",
                                    "line": 54
                                },
                                {
                                    "code": "y={currentPrice}",
                                    "line": 55
                                }
                            ],
                            "summaryComponent": "draws a reference line at the latest (current) price"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<ReferenceLine",
                                    "line": 54
                                }
                            ],
                            "summaryComponent": "the reference line is no longer labeled 'Current Price'"
                        }
                    ],
                    "medium_structured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                }
                            ],
                            "summaryComponent": "Accepts a 'data' prop containing stock information"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const company = data.name;",
                                    "line": 16
                                },
                                {
                                    "code": "const ticker = data.ticker;",
                                    "line": 17
                                },
                                {
                                    "code": "{company} ({ticker})",
                                    "line": 41
                                }
                            ],
                            "summaryComponent": "Extracts company name and ticker for display"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const formatXAxisDate = (dateStr) => {",
                                    "line": 24
                                },
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />",
                                    "line": 48
                                }
                            ],
                            "summaryComponent": "Formats date strings for the x-axis using a helper function"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const chartData = data.data.map((item) => ({",
                                    "line": 30
                                },
                                {
                                    "code": "date: item.date,",
                                    "line": 31
                                },
                                {
                                    "code": "price: item.close,",
                                    "line": 32
                                }
                            ],
                            "summaryComponent": "Maps raw data to chart-friendly format with date and price"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 43
                                },
                                {
                                    "code": "<LineChart",
                                    "line": 44
                                },
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />",
                                    "line": 48
                                },
                                {
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                                    "line": 49
                                },
                                {
                                    "code": "<Tooltip />",
                                    "line": 50
                                },
                                {
                                    "code": "<Legend />",
                                    "line": 51
                                }
                            ],
                            "summaryComponent": "Renders a responsive line chart with axes, tooltip, and legend"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const currentPrice = chartData.length > 0 ? chartData[chartData.length - 1].price : null;",
                                    "line": 36
                                },
                                {
                                    "code": "{currentPrice !== null && (",
                                    "line": 53
                                },
                                {
                                    "code": "<ReferenceLine",
                                    "line": 54
                                },
                                {
                                    "code": "y={currentPrice}",
                                    "line": 55
                                }
                            ],
                            "summaryComponent": "Includes a reference line at the current price, but the reference line does not have a label"
                        }
                    ],
                    "low_unstructured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                },
                                {
                                    "code": "export default StockChart;",
                                    "line": 66
                                }
                            ],
                            "summaryComponent": "defines a React component"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<LineChart",
                                    "line": 44
                                },
                                {
                                    "code": "data={chartData}",
                                    "line": 45
                                },
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 52
                                }
                            ],
                            "summaryComponent": "displays a stock price line chart"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 43
                                },
                                {
                                    "code": "<LineChart",
                                    "line": 44
                                },
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />",
                                    "line": 48
                                },
                                {
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                                    "line": 49
                                },
                                {
                                    "code": "<Tooltip />",
                                    "line": 50
                                },
                                {
                                    "code": "<Legend />",
                                    "line": 51
                                },
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 52
                                },
                                {
                                    "code": "<ReferenceLine",
                                    "line": 54
                                }
                            ],
                            "summaryComponent": "using Recharts"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const currentPrice = chartData.length > 0 ? chartData[chartData.length - 1].price : null;",
                                    "line": 36
                                },
                                {
                                    "code": "{currentPrice !== null && (",
                                    "line": 53
                                },
                                {
                                    "code": "<ReferenceLine",
                                    "line": 54
                                },
                                {
                                    "code": "y={currentPrice}",
                                    "line": 55
                                }
                            ],
                            "summaryComponent": "now including a reference line for the current price"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<ReferenceLine",
                                    "line": 54
                                }
                            ],
                            "summaryComponent": "but with the label removed from the reference line"
                        }
                    ],
                    "high_structured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                }
                            ],
                            "summaryComponent": "Defines the StockChart React component to visualize stock data"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "if (!data || !data.data || !data.data.length) return null;",
                                    "line": 14
                                }
                            ],
                            "summaryComponent": "Validates input data before rendering"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "if (!data || !data.data || !data.data.length) return null;",
                                    "line": 14
                                }
                            ],
                            "summaryComponent": "Returns null if data is missing or empty"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const company = data.name;",
                                    "line": 16
                                },
                                {
                                    "code": "const ticker = data.ticker;",
                                    "line": 17
                                }
                            ],
                            "summaryComponent": "Extracts company name and ticker from the data prop"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const formatDateString = (date) => {",
                                    "line": 19
                                },
                                {
                                    "code": "const formatXAxisDate = (dateStr) => {",
                                    "line": 24
                                }
                            ],
                            "summaryComponent": "Provides helper functions for date formatting"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const formatDateString = (date) => {",
                                    "line": 19
                                },
                                {
                                    "code": "return date.split(\"T\")[0];",
                                    "line": 20
                                }
                            ],
                            "summaryComponent": "'formatDateString' trims timestamps to the date portion"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const formatXAxisDate = (dateStr) => {",
                                    "line": 24
                                },
                                {
                                    "code": "return date.toLocaleString(\"en-US\", { month: \"short\" });",
                                    "line": 26
                                }
                            ],
                            "summaryComponent": "'formatXAxisDate' converts date strings to month abbreviations for the x-axis"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const chartData = data.data.map((item) => ({",
                                    "line": 30
                                },
                                {
                                    "code": "date: item.date,",
                                    "line": 31
                                },
                                {
                                    "code": "price: item.close,",
                                    "line": 32
                                }
                            ],
                            "summaryComponent": "Transforms raw stock data into an array of objects with 'date' and 'price' keys for charting"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 43
                                },
                                {
                                    "code": "<LineChart",
                                    "line": 44
                                }
                            ],
                            "summaryComponent": "Uses Recharts components to render the chart"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<h3>",
                                    "line": 40
                                },
                                {
                                    "code": "{company} ({ticker})",
                                    "line": 41
                                }
                            ],
                            "summaryComponent": "Displays the company name and ticker above the chart"
                        }
                    ]
                },
                "metadata": {
                    "offset": 156,
                    "fullPath": "/project/workspace/frontend/src/StockChart.jsx",
                    "originalCode": "const StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };\n\n  // Helper to format date as MMM (e.g., Jan, Feb)\n  const formatXAxisDate = (dateStr) => {\n    const date = new Date(dateStr);\n    return date.toLocaleString(\"en-US\", { month: \"short\" });\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  // Find the latest price for the reference line\n  const currentPrice = chartData.length > 0 ? chartData[chartData.length - 1].price : null;\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n          {currentPrice !== null && (\n            <ReferenceLine\n              y={currentPrice}\n              stroke=\"#ff7300\"\n              strokeDasharray=\"3 3\"\n            />\n          )}\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default StockChart;",
                    "filename": "StockChart.jsx",
                    "id": "3743d852-30fc-479c-b66b-08d4efd8cfd5"
                },
                "editPromptValue": ""
            },
            "section_id": "3743d852-30fc-479c-b66b-08d4efd8cfd5"
        },
        "timestamp": "2025-08-21 19:29:17.000",
        "event": "create_new_section",
        "source": "frontend",
        "id": "Z4OpdvEFFvGHCh6n55FF"
    },
    {
        "data": {
            "after_section_id": "3743d852-30fc-479c-b66b-08d4efd8cfd5",
            "before_section_id": "2064b284-7f9e-4ac5-a012-0c89f770242c"
        },
        "timestamp": "2025-08-21 19:29:17.000",
        "event": "autotransit_section",
        "source": "frontend",
        "id": "mmopVlXNWppf0rWbJKmb"
    },
    {
        "data": {
            "summary": "This code defines the StockChart React component, which renders a responsive line chart of stock closing prices using the Recharts library. The component first validates the input data, then extracts the company name and ticker for display in the chart header. It includes helper functions to format date strings, both for general use and specifically for rendering month abbreviations on the x-axis. The stock data is transformed into an array of objects with date and price fields, which is then fed to the LineChart component, complete with axes, tooltips, a legend, and a styled line representing the stock's closing prices. Notably, the chart now features a ReferenceLine at the most recent price, visually highlighting the current price with distinct styling, but the ReferenceLine no longer includes a label.",
            "code": "13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Helper to format date as MMM (e.g., Jan, Feb)\n24:   const formatXAxisDate = (dateStr) => {\n25:     const date = new Date(dateStr);\n26:     return date.toLocaleString(\"en-US\", { month: \"short\" });\n27:   };\n28: \n29:   // Combine labels and values into an array of objects for Recharts\n30:   const chartData = data.data.map((item) => ({\n31:     date: item.date,\n32:     price: item.close,\n33:   }));\n34: \n35:   // Find the latest price for the reference line\n36:   const currentPrice = chartData.length > 0 ? chartData[chartData.length - 1].price : null;\n37: \n38:   return (\n39:     <div style={{ marginTop: \"2rem\" }}>\n40:       <h3>\n41:         {company} ({ticker})\n42:       </h3>\n43:       <ResponsiveContainer width=\"100%\" height={300}>\n44:         <LineChart\n45:           data={chartData}\n46:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n47:         >\n48:           <XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />\n49:           <YAxis domain={[\"auto\", \"auto\"]} />\n50:           <Tooltip />\n51:           <Legend />\n52:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n53:           {currentPrice !== null && (\n54:             <ReferenceLine\n55:               y={currentPrice}\n56:               stroke=\"#ff7300\"\n57:               strokeDasharray=\"3 3\"\n58:             />\n59:           )}\n60:         </LineChart>\n61:       </ResponsiveContainer>\n62:     </div>\n63:   );\n64: };\n65: \n66: export default StockChart;",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        }
                    ],
                    "summaryComponent": "defines the StockChart React component"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 43
                        },
                        {
                            "code": "<LineChart",
                            "line": 44
                        },
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 52
                        }
                    ],
                    "summaryComponent": "renders a responsive line chart of stock closing prices using the Recharts library"
                },
                {
                    "codeSegments": [
                        {
                            "code": "if (!data || !data.data || !data.data.length) return null;",
                            "line": 14
                        }
                    ],
                    "summaryComponent": "validates the input data"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const company = data.name;",
                            "line": 16
                        },
                        {
                            "code": "const ticker = data.ticker;",
                            "line": 17
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 41
                        }
                    ],
                    "summaryComponent": "extracts the company name and ticker for display in the chart header"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const formatDateString = (date) => {",
                            "line": 19
                        },
                        {
                            "code": "return date.split(\"T\")[0];",
                            "line": 20
                        }
                    ],
                    "summaryComponent": "includes helper functions to format date strings"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const formatXAxisDate = (dateStr) => {",
                            "line": 24
                        },
                        {
                            "code": "return date.toLocaleString(\"en-US\", { month: \"short\" });",
                            "line": 26
                        },
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />",
                            "line": 48
                        }
                    ],
                    "summaryComponent": "specifically for rendering month abbreviations on the x-axis"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const chartData = data.data.map((item) => ({",
                            "line": 30
                        },
                        {
                            "code": "date: item.date,",
                            "line": 31
                        },
                        {
                            "code": "price: item.close,",
                            "line": 32
                        }
                    ],
                    "summaryComponent": "stock data is transformed into an array of objects with date and price fields"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<LineChart",
                            "line": 44
                        },
                        {
                            "code": "data={chartData}",
                            "line": 45
                        }
                    ],
                    "summaryComponent": "fed to the LineChart component"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatXAxisDate} />",
                            "line": 48
                        },
                        {
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                            "line": 49
                        },
                        {
                            "code": "<Tooltip />",
                            "line": 50
                        },
                        {
                            "code": "<Legend />",
                            "line": 51
                        },
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 52
                        }
                    ],
                    "summaryComponent": "complete with axes, tooltips, a legend, and a styled line representing the stock's closing prices"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const currentPrice = chartData.length > 0 ? chartData[chartData.length - 1].price : null;",
                            "line": 36
                        },
                        {
                            "code": "{currentPrice !== null && (",
                            "line": 53
                        },
                        {
                            "code": "<ReferenceLine",
                            "line": 54
                        },
                        {
                            "code": "y={currentPrice}",
                            "line": 55
                        },
                        {
                            "code": "stroke=\"#ff7300\"",
                            "line": 56
                        },
                        {
                            "code": "strokeDasharray=\"3 3\"",
                            "line": 57
                        }
                    ],
                    "summaryComponent": "features a ReferenceLine at the most recent price, visually highlighting the current price with distinct styling, but the ReferenceLine no longer includes a label"
                }
            ]
        },
        "timestamp": "2025-08-21 19:29:17.000",
        "event": "map_summary_code",
        "source": "backend",
        "id": "rWQVEqtddle3KOjV94XM"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "unstructured",
            "section_id": "3743d852-30fc-479c-b66b-08d4efd8cfd5"
        },
        "timestamp": "2025-08-21 19:29:51.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "2IFn7m5qzesxh2gNscrw"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "unstructured",
            "section_id": "3743d852-30fc-479c-b66b-08d4efd8cfd5"
        },
        "timestamp": "2025-08-21 19:29:51.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "Z1J9JbyeyBhUTobhQf7a"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "unstructured",
            "section_id": "3743d852-30fc-479c-b66b-08d4efd8cfd5"
        },
        "timestamp": "2025-08-21 19:29:51.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "oTVdbArimrw59cQuSZP8"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 1,
            "structured_type": "unstructured",
            "section_id": "3743d852-30fc-479c-b66b-08d4efd8cfd5"
        },
        "timestamp": "2025-08-21 19:29:51.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "oaGMKUDgAA0NyFJwL7Cg"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 3,
            "structured_type": "unstructured",
            "section_id": "3743d852-30fc-479c-b66b-08d4efd8cfd5"
        },
        "timestamp": "2025-08-21 19:29:51.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "q3U1xhWeJhg1qxqgR3c5"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 2,
            "structured_type": "unstructured",
            "section_id": "3743d852-30fc-479c-b66b-08d4efd8cfd5"
        },
        "timestamp": "2025-08-21 19:29:51.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "syDXUXPJNW7FK3kyns83"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "unstructured",
            "section_id": "3743d852-30fc-479c-b66b-08d4efd8cfd5"
        },
        "timestamp": "2025-08-21 19:29:52.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "SzAscCD29yqlA7BSGzeR"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 2,
            "structured_type": "unstructured",
            "section_id": "3743d852-30fc-479c-b66b-08d4efd8cfd5"
        },
        "timestamp": "2025-08-21 19:29:52.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "VAJjkB8numlHQWoYs5Ac"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 9,
            "structured_type": "unstructured",
            "section_id": "3743d852-30fc-479c-b66b-08d4efd8cfd5"
        },
        "timestamp": "2025-08-21 19:30:39.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "QjvAM5chch0HZLthjjry"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "unstructured",
            "section_id": "3743d852-30fc-479c-b66b-08d4efd8cfd5"
        },
        "timestamp": "2025-08-21 19:30:45.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "UwcBfJm9iMLq177Iw55x"
    },
    {
        "data": {
            "detail_level": "medium",
            "structured_type": "unstructured",
            "section_id": "3743d852-30fc-479c-b66b-08d4efd8cfd5"
        },
        "timestamp": "2025-08-21 19:30:46.000",
        "event": "mapping_unhover",
        "source": "frontend",
        "id": "cgtjeTjTKq0prd8cGBnl"
    },
    {
        "data": {
            "detail_level": "medium",
            "mapping_index": 9,
            "structured_type": "unstructured",
            "section_id": "3743d852-30fc-479c-b66b-08d4efd8cfd5"
        },
        "timestamp": "2025-08-21 19:30:46.000",
        "event": "mapping_hover",
        "source": "frontend",
        "id": "k8r0gwIDRDvkq1SSTqng"
    }
]