[
    {
        "source": "frontend",
        "data": {},
        "timestamp": "2025-08-19 22:14:33.000",
        "event": "click_summarize_code",
        "id": "7dzzcQGbHy0fw2xS2N2j"
    },
    {
        "source": "backend",
        "data": {
            "selected_code": "\nconst StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};",
            "summary": {
                "medium_unstructured": "The StockChart component takes in stock data and renders a line chart of closing prices over time. It checks for valid data, extracts relevant fields, and uses Recharts components to display the chart. The chart includes axes, a tooltip, a legend, and a title with the company name and ticker.",
                "title": "StockChart React Component Summary",
                "low_unstructured": "This code defines a React component that displays a stock price line chart using provided data.",
                "low_structured": "• Defines a React component for stock charts\n• Displays a line chart with given data\n• Shows company name and ticker",
                "medium_structured": "• Receives stock data as a prop\n• Validates input data before rendering\n• Processes data to extract date and closing price\n• Renders a responsive line chart with:\n  ◦ X and Y axes\n  ◦ Tooltip and legend\n  ◦ Company name and ticker as a header",
                "high_unstructured": "This React functional component, StockChart, accepts a data prop containing stock information and renders a responsive line chart of the stock's closing prices over time. It first checks if the data is valid, then extracts the company name and ticker, and formats the data for the chart by mapping each entry to an object with date and price. The component uses Recharts' LineChart and related components to display the chart with axes, tooltip, legend, and a styled header showing the company name and ticker. The chart is contained within a div with margin for spacing and adapts to the container's width.",
                "high_structured": "• Defines a functional React component named StockChart\n• Validates the input data before rendering\n  ◦ Returns null if data is missing or empty\n• Extracts company name and ticker from the data\n• Processes the stock data to create chartData:\n  ◦ Maps each item to an object with date and closing price\n• Contains a helper function to format date strings (though unused in rendering)\n• Renders a styled container with:\n  ◦ A header displaying the company name and ticker\n  ◦ A responsive LineChart from Recharts with:\n    ◦ XAxis for dates and YAxis for prices\n    ◦ Tooltip and legend for interactivity\n    ◦ A monotone line representing the stock's closing price, styled without dots\n• Ensures the chart adapts to the container's width and has a fixed height"
            }
        },
        "timestamp": "2025-08-19 22:14:41.000",
        "event": "summarize_selected_code",
        "id": "fmRuui06Wg8LKlqgodnH"
    },
    {
        "source": "backend",
        "data": {
            "code": "12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));\n28: \n29:   return (\n30:     <div style={{ marginTop: \"2rem\" }}>\n31:       <h3>\n32:         {company} ({ticker})\n33:       </h3>\n34:       <ResponsiveContainer width=\"100%\" height={300}>\n35:         <LineChart\n36:           data={chartData}\n37:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n38:         >\n39:           <XAxis dataKey=\"date\" />\n40:           <YAxis domain={[\"auto\", \"auto\"]} />\n41:           <Tooltip />\n42:           <Legend />\n43:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n44:         </LineChart>\n45:       </ResponsiveContainer>\n46:     </div>\n47:   );\n48: };",
            "summary": "• Defines a React component for stock charts\n• Displays a line chart with given data\n• Shows company name and ticker",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        }
                    ],
                    "summaryComponent": "Defines a React component for stock charts"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<LineChart",
                            "line": 35
                        },
                        {
                            "code": "data={chartData}",
                            "line": 36
                        }
                    ],
                    "summaryComponent": "Displays a line chart with given data"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<h3>",
                            "line": 31
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 32
                        }
                    ],
                    "summaryComponent": "Shows company name and ticker"
                }
            ]
        },
        "timestamp": "2025-08-19 22:14:42.000",
        "event": "map_summary_code",
        "id": "AizRBNF3dku7XLsxR7nX"
    },
    {
        "source": "backend",
        "data": {
            "code": "12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));\n28: \n29:   return (\n30:     <div style={{ marginTop: \"2rem\" }}>\n31:       <h3>\n32:         {company} ({ticker})\n33:       </h3>\n34:       <ResponsiveContainer width=\"100%\" height={300}>\n35:         <LineChart\n36:           data={chartData}\n37:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n38:         >\n39:           <XAxis dataKey=\"date\" />\n40:           <YAxis domain={[\"auto\", \"auto\"]} />\n41:           <Tooltip />\n42:           <Legend />\n43:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n44:         </LineChart>\n45:       </ResponsiveContainer>\n46:     </div>\n47:   );\n48: };",
            "summary": "This code defines a React component that displays a stock price line chart using provided data.",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        }
                    ],
                    "summaryComponent": "This code defines a React component"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<LineChart",
                            "line": 35
                        },
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 43
                        }
                    ],
                    "summaryComponent": "that displays a stock price line chart"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const chartData = data.data.map((item) => ({",
                            "line": 24
                        },
                        {
                            "code": "data={chartData}",
                            "line": 36
                        }
                    ],
                    "summaryComponent": "using provided data"
                }
            ]
        },
        "timestamp": "2025-08-19 22:14:42.000",
        "event": "map_summary_code",
        "id": "j32dzQWeWW7SyOoGuDz6"
    },
    {
        "source": "backend",
        "data": {
            "code": "12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));\n28: \n29:   return (\n30:     <div style={{ marginTop: \"2rem\" }}>\n31:       <h3>\n32:         {company} ({ticker})\n33:       </h3>\n34:       <ResponsiveContainer width=\"100%\" height={300}>\n35:         <LineChart\n36:           data={chartData}\n37:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n38:         >\n39:           <XAxis dataKey=\"date\" />\n40:           <YAxis domain={[\"auto\", \"auto\"]} />\n41:           <Tooltip />\n42:           <Legend />\n43:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n44:         </LineChart>\n45:       </ResponsiveContainer>\n46:     </div>\n47:   );\n48: };",
            "summary": "• Receives stock data as a prop\n• Validates input data before rendering\n• Processes data to extract date and closing price\n• Renders a responsive line chart with:\n  ◦ X and Y axes\n  ◦ Tooltip and legend\n  ◦ Company name and ticker as a header",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        }
                    ],
                    "summaryComponent": "Receives stock data as a prop"
                },
                {
                    "codeSegments": [
                        {
                            "code": "if (!data || !data.data || !data.data.length) return null;",
                            "line": 14
                        }
                    ],
                    "summaryComponent": "Validates input data before rendering"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const chartData = data.data.map((item) => ({",
                            "line": 24
                        },
                        {
                            "code": "date: item.date,",
                            "line": 25
                        },
                        {
                            "code": "price: item.close,",
                            "line": 26
                        }
                    ],
                    "summaryComponent": "Processes data to extract date and closing price"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 34
                        },
                        {
                            "code": "<LineChart",
                            "line": 35
                        }
                    ],
                    "summaryComponent": "Renders a responsive line chart with:"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<XAxis dataKey=\"date\" />",
                            "line": 39
                        },
                        {
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                            "line": 40
                        }
                    ],
                    "summaryComponent": "X and Y axes"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<Tooltip />",
                            "line": 41
                        },
                        {
                            "code": "<Legend />",
                            "line": 42
                        }
                    ],
                    "summaryComponent": "Tooltip and legend"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<h3>",
                            "line": 31
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 32
                        }
                    ],
                    "summaryComponent": "Company name and ticker as a header"
                }
            ]
        },
        "timestamp": "2025-08-19 22:14:44.000",
        "event": "map_summary_code",
        "id": "bJ5stZyazR6SzfgvZEwa"
    },
    {
        "source": "backend",
        "data": {
            "code": "12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));\n28: \n29:   return (\n30:     <div style={{ marginTop: \"2rem\" }}>\n31:       <h3>\n32:         {company} ({ticker})\n33:       </h3>\n34:       <ResponsiveContainer width=\"100%\" height={300}>\n35:         <LineChart\n36:           data={chartData}\n37:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n38:         >\n39:           <XAxis dataKey=\"date\" />\n40:           <YAxis domain={[\"auto\", \"auto\"]} />\n41:           <Tooltip />\n42:           <Legend />\n43:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n44:         </LineChart>\n45:       </ResponsiveContainer>\n46:     </div>\n47:   );\n48: };",
            "summary": "• Defines a functional React component named StockChart\n• Validates the input data before rendering\n  ◦ Returns null if data is missing or empty\n• Extracts company name and ticker from the data\n• Processes the stock data to create chartData:\n  ◦ Maps each item to an object with date and closing price\n• Contains a helper function to format date strings (though unused in rendering)\n• Renders a styled container with:\n  ◦ A header displaying the company name and ticker\n  ◦ A responsive LineChart from Recharts with:\n    ◦ XAxis for dates and YAxis for prices\n    ◦ Tooltip and legend for interactivity\n    ◦ A monotone line representing the stock's closing price, styled without dots\n• Ensures the chart adapts to the container's width and has a fixed height",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        }
                    ],
                    "summaryComponent": "Defines a functional React component named StockChart"
                },
                {
                    "codeSegments": [
                        {
                            "code": "if (!data || !data.data || !data.data.length) return null;",
                            "line": 14
                        }
                    ],
                    "summaryComponent": "Validates the input data before rendering"
                },
                {
                    "codeSegments": [
                        {
                            "code": "if (!data || !data.data || !data.data.length) return null;",
                            "line": 14
                        }
                    ],
                    "summaryComponent": "Returns null if data is missing or empty"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const company = data.name;",
                            "line": 16
                        },
                        {
                            "code": "const ticker = data.ticker;",
                            "line": 17
                        }
                    ],
                    "summaryComponent": "Extracts company name and ticker from the data"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const chartData = data.data.map((item) => ({",
                            "line": 24
                        },
                        {
                            "code": "  date: item.date,",
                            "line": 25
                        },
                        {
                            "code": "  price: item.close,",
                            "line": 26
                        },
                        {
                            "code": "}));",
                            "line": 27
                        }
                    ],
                    "summaryComponent": "Processes the stock data to create chartData"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const chartData = data.data.map((item) => ({",
                            "line": 24
                        },
                        {
                            "code": "  date: item.date,",
                            "line": 25
                        },
                        {
                            "code": "  price: item.close,",
                            "line": 26
                        },
                        {
                            "code": "}));",
                            "line": 27
                        }
                    ],
                    "summaryComponent": "Maps each item to an object with date and closing price"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const formatDateString = (date) => {",
                            "line": 19
                        },
                        {
                            "code": "  return date.split(\"T\")[0];",
                            "line": 20
                        },
                        {
                            "code": "};",
                            "line": 21
                        }
                    ],
                    "summaryComponent": "Contains a helper function to format date strings (though unused in rendering)"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<div style={{ marginTop: \"2rem\" }}>",
                            "line": 30
                        }
                    ],
                    "summaryComponent": "Renders a styled container with"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<h3>",
                            "line": 31
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 32
                        }
                    ],
                    "summaryComponent": "A header displaying the company name and ticker"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 34
                        },
                        {
                            "code": "<LineChart",
                            "line": 35
                        }
                    ],
                    "summaryComponent": "A responsive LineChart from Recharts with"
                }
            ]
        },
        "timestamp": "2025-08-19 22:14:45.000",
        "event": "map_summary_code",
        "id": "8yHTTMeTX834uRlAW9iz"
    },
    {
        "source": "backend",
        "data": {
            "code": "12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));\n28: \n29:   return (\n30:     <div style={{ marginTop: \"2rem\" }}>\n31:       <h3>\n32:         {company} ({ticker})\n33:       </h3>\n34:       <ResponsiveContainer width=\"100%\" height={300}>\n35:         <LineChart\n36:           data={chartData}\n37:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n38:         >\n39:           <XAxis dataKey=\"date\" />\n40:           <YAxis domain={[\"auto\", \"auto\"]} />\n41:           <Tooltip />\n42:           <Legend />\n43:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n44:         </LineChart>\n45:       </ResponsiveContainer>\n46:     </div>\n47:   );\n48: };",
            "summary": "The StockChart component takes in stock data and renders a line chart of closing prices over time. It checks for valid data, extracts relevant fields, and uses Recharts components to display the chart. The chart includes axes, a tooltip, a legend, and a title with the company name and ticker.",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        }
                    ],
                    "summaryComponent": "The StockChart component"
                },
                {
                    "codeSegments": [
                        {
                            "code": "({ data })",
                            "line": 13
                        }
                    ],
                    "summaryComponent": "takes in stock data"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<LineChart",
                            "line": 35
                        },
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 43
                        }
                    ],
                    "summaryComponent": "renders a line chart of closing prices over time"
                },
                {
                    "codeSegments": [
                        {
                            "code": "if (!data || !data.data || !data.data.length) return null;",
                            "line": 14
                        }
                    ],
                    "summaryComponent": "checks for valid data"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const company = data.name;",
                            "line": 16
                        },
                        {
                            "code": "const ticker = data.ticker;",
                            "line": 17
                        },
                        {
                            "code": "const chartData = data.data.map((item) => ({",
                            "line": 24
                        }
                    ],
                    "summaryComponent": "extracts relevant fields"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 34
                        },
                        {
                            "code": "<LineChart",
                            "line": 35
                        },
                        {
                            "code": "<XAxis dataKey=\"date\" />",
                            "line": 39
                        },
                        {
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                            "line": 40
                        },
                        {
                            "code": "<Tooltip />",
                            "line": 41
                        },
                        {
                            "code": "<Legend />",
                            "line": 42
                        },
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 43
                        }
                    ],
                    "summaryComponent": "uses Recharts components to display the chart"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<XAxis dataKey=\"date\" />",
                            "line": 39
                        },
                        {
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                            "line": 40
                        }
                    ],
                    "summaryComponent": "The chart includes axes"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<Tooltip />",
                            "line": 41
                        }
                    ],
                    "summaryComponent": "a tooltip"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<Legend />",
                            "line": 42
                        }
                    ],
                    "summaryComponent": "a legend"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<h3>",
                            "line": 31
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 32
                        }
                    ],
                    "summaryComponent": "a title with the company name and ticker"
                }
            ]
        },
        "timestamp": "2025-08-19 22:14:45.000",
        "event": "map_summary_code",
        "id": "F8x2GEZJhfcStFyGdWB5"
    },
    {
        "source": "backend",
        "data": {
            "code": "12: \n13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     return date.split(\"T\")[0];\n21:   };\n22: \n23:   // Combine labels and values into an array of objects for Recharts\n24:   const chartData = data.data.map((item) => ({\n25:     date: item.date,\n26:     price: item.close,\n27:   }));\n28: \n29:   return (\n30:     <div style={{ marginTop: \"2rem\" }}>\n31:       <h3>\n32:         {company} ({ticker})\n33:       </h3>\n34:       <ResponsiveContainer width=\"100%\" height={300}>\n35:         <LineChart\n36:           data={chartData}\n37:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n38:         >\n39:           <XAxis dataKey=\"date\" />\n40:           <YAxis domain={[\"auto\", \"auto\"]} />\n41:           <Tooltip />\n42:           <Legend />\n43:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n44:         </LineChart>\n45:       </ResponsiveContainer>\n46:     </div>\n47:   );\n48: };",
            "summary": "This React functional component, StockChart, accepts a data prop containing stock information and renders a responsive line chart of the stock's closing prices over time. It first checks if the data is valid, then extracts the company name and ticker, and formats the data for the chart by mapping each entry to an object with date and price. The component uses Recharts' LineChart and related components to display the chart with axes, tooltip, legend, and a styled header showing the company name and ticker. The chart is contained within a div with margin for spacing and adapts to the container's width.",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        }
                    ],
                    "summaryComponent": "React functional component, StockChart"
                },
                {
                    "codeSegments": [
                        {
                            "code": "({ data })",
                            "line": 13
                        }
                    ],
                    "summaryComponent": "accepts a data prop containing stock information"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 34
                        },
                        {
                            "code": "<LineChart",
                            "line": 35
                        },
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 43
                        }
                    ],
                    "summaryComponent": "renders a responsive line chart of the stock's closing prices over time"
                },
                {
                    "codeSegments": [
                        {
                            "code": "if (!data || !data.data || !data.data.length) return null;",
                            "line": 14
                        }
                    ],
                    "summaryComponent": "checks if the data is valid"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const company = data.name;",
                            "line": 16
                        },
                        {
                            "code": "const ticker = data.ticker;",
                            "line": 17
                        }
                    ],
                    "summaryComponent": "extracts the company name and ticker"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const chartData = data.data.map((item) => ({",
                            "line": 24
                        },
                        {
                            "code": "date: item.date,",
                            "line": 25
                        },
                        {
                            "code": "price: item.close,",
                            "line": 26
                        },
                        {
                            "code": "}));",
                            "line": 27
                        }
                    ],
                    "summaryComponent": "formats the data for the chart by mapping each entry to an object with date and price"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<LineChart",
                            "line": 35
                        },
                        {
                            "code": "<XAxis dataKey=\"date\" />",
                            "line": 39
                        },
                        {
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                            "line": 40
                        },
                        {
                            "code": "<Tooltip />",
                            "line": 41
                        },
                        {
                            "code": "<Legend />",
                            "line": 42
                        },
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 43
                        }
                    ],
                    "summaryComponent": "uses Recharts' LineChart and related components"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<XAxis dataKey=\"date\" />",
                            "line": 39
                        },
                        {
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                            "line": 40
                        },
                        {
                            "code": "<Tooltip />",
                            "line": 41
                        },
                        {
                            "code": "<Legend />",
                            "line": 42
                        }
                    ],
                    "summaryComponent": "display the chart with axes, tooltip, legend"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<h3>",
                            "line": 31
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 32
                        }
                    ],
                    "summaryComponent": "a styled header showing the company name and ticker"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<div style={{ marginTop: \"2rem\" }}>",
                            "line": 30
                        },
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 34
                        }
                    ],
                    "summaryComponent": "contained within a div with margin for spacing and adapts to the container's width"
                }
            ]
        },
        "timestamp": "2025-08-19 22:14:48.000",
        "event": "map_summary_code",
        "id": "Au2120eJi1NlIpKrVfFi"
    },
    {
        "source": "frontend",
        "data": {
            "before_section_id": null,
            "after_section_id": "67a5083a-135b-4d38-bc6d-46f194301012"
        },
        "timestamp": "2025-08-19 22:14:49.000",
        "event": "autotransit_section",
        "id": "l8DbnNGkZNmK70cif6Yn"
    },
    {
        "source": "frontend",
        "data": {
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "section_data": {
                "summaryMappings": {
                    "medium_unstructured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                }
                            ],
                            "summaryComponent": "The StockChart component"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "({ data })",
                                    "line": 13
                                }
                            ],
                            "summaryComponent": "takes in stock data"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<LineChart",
                                    "line": 35
                                },
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 43
                                }
                            ],
                            "summaryComponent": "renders a line chart of closing prices over time"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "if (!data || !data.data || !data.data.length) return null;",
                                    "line": 14
                                }
                            ],
                            "summaryComponent": "checks for valid data"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const company = data.name;",
                                    "line": 16
                                },
                                {
                                    "code": "const ticker = data.ticker;",
                                    "line": 17
                                },
                                {
                                    "code": "const chartData = data.data.map((item) => ({",
                                    "line": 24
                                }
                            ],
                            "summaryComponent": "extracts relevant fields"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 34
                                },
                                {
                                    "code": "<LineChart",
                                    "line": 35
                                },
                                {
                                    "code": "<XAxis dataKey=\"date\" />",
                                    "line": 39
                                },
                                {
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                                    "line": 40
                                },
                                {
                                    "code": "<Tooltip />",
                                    "line": 41
                                },
                                {
                                    "code": "<Legend />",
                                    "line": 42
                                },
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 43
                                }
                            ],
                            "summaryComponent": "uses Recharts components to display the chart"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<XAxis dataKey=\"date\" />",
                                    "line": 39
                                },
                                {
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                                    "line": 40
                                }
                            ],
                            "summaryComponent": "The chart includes axes"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<Tooltip />",
                                    "line": 41
                                }
                            ],
                            "summaryComponent": "a tooltip"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<Legend />",
                                    "line": 42
                                }
                            ],
                            "summaryComponent": "a legend"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<h3>",
                                    "line": 31
                                },
                                {
                                    "code": "{company} ({ticker})",
                                    "line": 32
                                }
                            ],
                            "summaryComponent": "a title with the company name and ticker"
                        }
                    ],
                    "high_unstructured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                }
                            ],
                            "summaryComponent": "React functional component, StockChart"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "({ data })",
                                    "line": 13
                                }
                            ],
                            "summaryComponent": "accepts a data prop containing stock information"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 34
                                },
                                {
                                    "code": "<LineChart",
                                    "line": 35
                                },
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 43
                                }
                            ],
                            "summaryComponent": "renders a responsive line chart of the stock's closing prices over time"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "if (!data || !data.data || !data.data.length) return null;",
                                    "line": 14
                                }
                            ],
                            "summaryComponent": "checks if the data is valid"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const company = data.name;",
                                    "line": 16
                                },
                                {
                                    "code": "const ticker = data.ticker;",
                                    "line": 17
                                }
                            ],
                            "summaryComponent": "extracts the company name and ticker"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const chartData = data.data.map((item) => ({",
                                    "line": 24
                                },
                                {
                                    "code": "date: item.date,",
                                    "line": 25
                                },
                                {
                                    "code": "price: item.close,",
                                    "line": 26
                                },
                                {
                                    "code": "}));",
                                    "line": 27
                                }
                            ],
                            "summaryComponent": "formats the data for the chart by mapping each entry to an object with date and price"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<LineChart",
                                    "line": 35
                                },
                                {
                                    "code": "<XAxis dataKey=\"date\" />",
                                    "line": 39
                                },
                                {
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                                    "line": 40
                                },
                                {
                                    "code": "<Tooltip />",
                                    "line": 41
                                },
                                {
                                    "code": "<Legend />",
                                    "line": 42
                                },
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 43
                                }
                            ],
                            "summaryComponent": "uses Recharts' LineChart and related components"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<XAxis dataKey=\"date\" />",
                                    "line": 39
                                },
                                {
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                                    "line": 40
                                },
                                {
                                    "code": "<Tooltip />",
                                    "line": 41
                                },
                                {
                                    "code": "<Legend />",
                                    "line": 42
                                }
                            ],
                            "summaryComponent": "display the chart with axes, tooltip, legend"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<h3>",
                                    "line": 31
                                },
                                {
                                    "code": "{company} ({ticker})",
                                    "line": 32
                                }
                            ],
                            "summaryComponent": "a styled header showing the company name and ticker"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<div style={{ marginTop: \"2rem\" }}>",
                                    "line": 30
                                },
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 34
                                }
                            ],
                            "summaryComponent": "contained within a div with margin for spacing and adapts to the container's width"
                        }
                    ],
                    "low_unstructured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                }
                            ],
                            "summaryComponent": "This code defines a React component"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<LineChart",
                                    "line": 35
                                },
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 43
                                }
                            ],
                            "summaryComponent": "that displays a stock price line chart"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const chartData = data.data.map((item) => ({",
                                    "line": 24
                                },
                                {
                                    "code": "data={chartData}",
                                    "line": 36
                                }
                            ],
                            "summaryComponent": "using provided data"
                        }
                    ],
                    "low_structured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                }
                            ],
                            "summaryComponent": "Defines a React component for stock charts"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<LineChart",
                                    "line": 35
                                },
                                {
                                    "code": "data={chartData}",
                                    "line": 36
                                }
                            ],
                            "summaryComponent": "Displays a line chart with given data"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<h3>",
                                    "line": 31
                                },
                                {
                                    "code": "{company} ({ticker})",
                                    "line": 32
                                }
                            ],
                            "summaryComponent": "Shows company name and ticker"
                        }
                    ],
                    "medium_structured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                }
                            ],
                            "summaryComponent": "Receives stock data as a prop"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "if (!data || !data.data || !data.data.length) return null;",
                                    "line": 14
                                }
                            ],
                            "summaryComponent": "Validates input data before rendering"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const chartData = data.data.map((item) => ({",
                                    "line": 24
                                },
                                {
                                    "code": "date: item.date,",
                                    "line": 25
                                },
                                {
                                    "code": "price: item.close,",
                                    "line": 26
                                }
                            ],
                            "summaryComponent": "Processes data to extract date and closing price"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 34
                                },
                                {
                                    "code": "<LineChart",
                                    "line": 35
                                }
                            ],
                            "summaryComponent": "Renders a responsive line chart with:"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<XAxis dataKey=\"date\" />",
                                    "line": 39
                                },
                                {
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                                    "line": 40
                                }
                            ],
                            "summaryComponent": "X and Y axes"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<Tooltip />",
                                    "line": 41
                                },
                                {
                                    "code": "<Legend />",
                                    "line": 42
                                }
                            ],
                            "summaryComponent": "Tooltip and legend"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<h3>",
                                    "line": 31
                                },
                                {
                                    "code": "{company} ({ticker})",
                                    "line": 32
                                }
                            ],
                            "summaryComponent": "Company name and ticker as a header"
                        }
                    ],
                    "high_structured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                }
                            ],
                            "summaryComponent": "Defines a functional React component named StockChart"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "if (!data || !data.data || !data.data.length) return null;",
                                    "line": 14
                                }
                            ],
                            "summaryComponent": "Validates the input data before rendering"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "if (!data || !data.data || !data.data.length) return null;",
                                    "line": 14
                                }
                            ],
                            "summaryComponent": "Returns null if data is missing or empty"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const company = data.name;",
                                    "line": 16
                                },
                                {
                                    "code": "const ticker = data.ticker;",
                                    "line": 17
                                }
                            ],
                            "summaryComponent": "Extracts company name and ticker from the data"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const chartData = data.data.map((item) => ({",
                                    "line": 24
                                },
                                {
                                    "code": "  date: item.date,",
                                    "line": 25
                                },
                                {
                                    "code": "  price: item.close,",
                                    "line": 26
                                },
                                {
                                    "code": "}));",
                                    "line": 27
                                }
                            ],
                            "summaryComponent": "Processes the stock data to create chartData"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const chartData = data.data.map((item) => ({",
                                    "line": 24
                                },
                                {
                                    "code": "  date: item.date,",
                                    "line": 25
                                },
                                {
                                    "code": "  price: item.close,",
                                    "line": 26
                                },
                                {
                                    "code": "}));",
                                    "line": 27
                                }
                            ],
                            "summaryComponent": "Maps each item to an object with date and closing price"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const formatDateString = (date) => {",
                                    "line": 19
                                },
                                {
                                    "code": "  return date.split(\"T\")[0];",
                                    "line": 20
                                },
                                {
                                    "code": "};",
                                    "line": 21
                                }
                            ],
                            "summaryComponent": "Contains a helper function to format date strings (though unused in rendering)"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<div style={{ marginTop: \"2rem\" }}>",
                                    "line": 30
                                }
                            ],
                            "summaryComponent": "Renders a styled container with"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<h3>",
                                    "line": 31
                                },
                                {
                                    "code": "{company} ({ticker})",
                                    "line": 32
                                }
                            ],
                            "summaryComponent": "A header displaying the company name and ticker"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 34
                                },
                                {
                                    "code": "<LineChart",
                                    "line": 35
                                }
                            ],
                            "summaryComponent": "A responsive LineChart from Recharts with"
                        }
                    ]
                },
                "lines": [
                    12,
                    48
                ],
                "title": "StockChart React Component Summary",
                "selectedDetailLevel": "medium",
                "editPromptStructured": null,
                "createdAt": 1755627288000,
                "editPromptValue": "",
                "editPromptDetailLevel": null,
                "selectedStructured": "unstructured",
                "summaryData": {
                    "medium_unstructured": "The StockChart component takes in stock data and renders a line chart of closing prices over time. It checks for valid data, extracts relevant fields, and uses Recharts components to display the chart. The chart includes axes, a tooltip, a legend, and a title with the company name and ticker.",
                    "title": "StockChart React Component Summary",
                    "low_unstructured": "This code defines a React component that displays a stock price line chart using provided data.",
                    "low_structured": "• Defines a React component for stock charts\n• Displays a line chart with given data\n• Shows company name and ticker",
                    "medium_structured": "• Receives stock data as a prop\n• Validates input data before rendering\n• Processes data to extract date and closing price\n• Renders a responsive line chart with:\n  ◦ X and Y axes\n  ◦ Tooltip and legend\n  ◦ Company name and ticker as a header",
                    "high_unstructured": "This React functional component, StockChart, accepts a data prop containing stock information and renders a responsive line chart of the stock's closing prices over time. It first checks if the data is valid, then extracts the company name and ticker, and formats the data for the chart by mapping each entry to an object with date and price. The component uses Recharts' LineChart and related components to display the chart with axes, tooltip, legend, and a styled header showing the company name and ticker. The chart is contained within a div with margin for spacing and adapts to the container's width.",
                    "high_structured": "• Defines a functional React component named StockChart\n• Validates the input data before rendering\n  ◦ Returns null if data is missing or empty\n• Extracts company name and ticker from the data\n• Processes the stock data to create chartData:\n  ◦ Maps each item to an object with date and closing price\n• Contains a helper function to format date strings (though unused in rendering)\n• Renders a styled container with:\n  ◦ A header displaying the company name and ticker\n  ◦ A responsive LineChart from Recharts with:\n    ◦ XAxis for dates and YAxis for prices\n    ◦ Tooltip and legend for interactivity\n    ◦ A monotone line representing the stock's closing price, styled without dots\n• Ensures the chart adapts to the container's width and has a fixed height"
                },
                "metadata": {
                    "offset": 155,
                    "originalCode": "\nconst StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};",
                    "fullPath": "/project/workspace/frontend/src/StockChart.jsx",
                    "id": "67a5083a-135b-4d38-bc6d-46f194301012",
                    "filename": "StockChart.jsx"
                }
            }
        },
        "timestamp": "2025-08-19 22:14:49.000",
        "event": "create_new_section",
        "id": "tyuWDLAr18GV5u8SvG8z"
    },
    {
        "source": "frontend",
        "data": {
            "before_structured": "unstructured",
            "after_structured": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "before_detail_level": "medium",
            "after_detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:15:07.000",
        "event": "change_summary_level",
        "id": "xXnlvkWTwsUWOViZIYPw"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:15:08.000",
        "event": "mapping_unhover",
        "id": "22PikbqH4V6gBniZmZr6"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 0,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:15:08.000",
        "event": "mapping_hover",
        "id": "Guar93Ckq5rzQaOOckqE"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 1,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:15:08.000",
        "event": "mapping_hover",
        "id": "RtiA2ygiVC9wTO88uULA"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:15:08.000",
        "event": "mapping_unhover",
        "id": "dPXdcmfXCseUOEsYFKsZ"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:15:08.000",
        "event": "mapping_unhover",
        "id": "eUK6bQEwYd319K55M8ev"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 1,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:15:08.000",
        "event": "mapping_hover",
        "id": "fuUlyoWVkXpRhnm0ch4n"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 2,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:15:08.000",
        "event": "mapping_hover",
        "id": "vECkSQF0aRkkRj25SzcY"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:15:09.000",
        "event": "mapping_unhover",
        "id": "9Sj3AkGgtrufFCIlMRZn"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 0,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:15:09.000",
        "event": "mapping_hover",
        "id": "NGJzTpg6nGeOGITsYYyl"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:15:09.000",
        "event": "mapping_unhover",
        "id": "WeZaIG4UJdTQfblNUso4"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 1,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:15:09.000",
        "event": "mapping_hover",
        "id": "aU62UJHIkstGxRzkSCCl"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:15:11.000",
        "event": "mapping_unhover",
        "id": "1Rp4iHiaaJt9PgkKRJK9"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 1,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:15:11.000",
        "event": "mapping_hover",
        "id": "6axdK9TBuoF21kU3gtYa"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 2,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:15:13.000",
        "event": "mapping_hover",
        "id": "S6xZ2km1poOedNh3bmuB"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:15:13.000",
        "event": "mapping_unhover",
        "id": "kkc6cJr54VLqyWFZrC9R"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 3,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:15:20.000",
        "event": "mapping_hover",
        "id": "OK3WXpuNbUScA1nZ09Sk"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:15:20.000",
        "event": "mapping_unhover",
        "id": "XoYvGkAfnCIHTvtBgUNk"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:15:21.000",
        "event": "mapping_unhover",
        "id": "p6aHrUOUrpC8YMARtQNX"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 2,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:15:30.000",
        "event": "mapping_hover",
        "id": "XM59Cq4cfVvABV2JzzJF"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:15:38.000",
        "event": "mapping_unhover",
        "id": "CWwkiKKeMe9QgmnGOWUM"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 4,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:15:38.000",
        "event": "mapping_hover",
        "id": "TTYSVAV3jaHO4omT7OKT"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 5,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:15:39.000",
        "event": "mapping_hover",
        "id": "CwUkGlmjW7YrZGUDvs2O"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 3,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:15:39.000",
        "event": "mapping_hover",
        "id": "L1ND9cQF6dFbBXJMKeOJ"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:15:39.000",
        "event": "mapping_unhover",
        "id": "TqEEhj8NNsSyYUK0GEoD"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:15:39.000",
        "event": "mapping_unhover",
        "id": "ePlpcYlEuU8w6e64ZTql"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 6,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:15:39.000",
        "event": "mapping_hover",
        "id": "kpCqIVHvn7LyQ74SquUj"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:15:39.000",
        "event": "mapping_unhover",
        "id": "tFpulwBsLzvsVaUUH6xg"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 4,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:15:41.000",
        "event": "mapping_hover",
        "id": "HatuNq8SnGyKjJjpdg4t"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:15:41.000",
        "event": "mapping_unhover",
        "id": "NjXp5yRC1MlsUfmDCoWp"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:15:43.000",
        "event": "mapping_unhover",
        "id": "70xci7YmVqvMDFgrGdMf"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 6,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:15:43.000",
        "event": "mapping_hover",
        "id": "8lp56dc051iXOY3Zq9rh"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 5,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:15:43.000",
        "event": "mapping_hover",
        "id": "DCDlRcJekRFay2OS00Wa"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 5,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:15:43.000",
        "event": "mapping_hover",
        "id": "EQzKTkTJGPKCFjuBF2ih"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:15:43.000",
        "event": "mapping_unhover",
        "id": "JUcMFfovb6cYz01LgXxR"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:15:43.000",
        "event": "mapping_unhover",
        "id": "w75d7UnpxNezPq5Tf4Ff"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:15:44.000",
        "event": "mapping_unhover",
        "id": "IJpVHFvZUhuZ3TK3gN4y"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 6,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:15:44.000",
        "event": "mapping_hover",
        "id": "hJU4bSxo0oR8UuL1Lsmf"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:15:48.000",
        "event": "mapping_unhover",
        "id": "v86YSeesZ5mbEExcBUn8"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:15:50.000",
        "event": "mapping_unhover",
        "id": "8MIEW12oxwtqPep3PvT8"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 6,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:15:50.000",
        "event": "mapping_hover",
        "id": "94GMGRnylBgd5l6FPGLZ"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:15:50.000",
        "event": "mapping_unhover",
        "id": "DGuy1I3uOOcJ6m4J2n8m"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 5,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:15:50.000",
        "event": "mapping_hover",
        "id": "Hz5ejIbXEwy2ObR1QsJb"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:15:50.000",
        "event": "mapping_unhover",
        "id": "U6CC0MgfmT3wM54ktBCw"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 6,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:15:50.000",
        "event": "mapping_hover",
        "id": "Xa0wbevFbd7Pywec0sdh"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 6,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:15:50.000",
        "event": "mapping_hover",
        "id": "dQEHewLDKnfELxngRda2"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:15:53.000",
        "event": "mapping_unhover",
        "id": "UyKKqLdOeKq0WOeCwmdf"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:16:00.000",
        "event": "mapping_unhover",
        "id": "pnLEq1NveGISOUZyIfpp"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 2,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:16:00.000",
        "event": "mapping_hover",
        "id": "uMZtAS1PH5DuZWSCazmC"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 1,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:16:00.000",
        "event": "mapping_hover",
        "id": "ykFXwdFg8E9EBjl9MYcB"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 1,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:16:02.000",
        "event": "mapping_hover",
        "id": "H0Jez2yafxkTG1ZQ7YZr"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:16:02.000",
        "event": "mapping_unhover",
        "id": "Iou39Py7DIq2TYGB3PWN"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 1,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:16:11.000",
        "event": "mapping_hover",
        "id": "BEFztoK9yYWy9w32PyAH"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:16:11.000",
        "event": "mapping_unhover",
        "id": "yvJIS3DfIaKAwic8d4qG"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:16:13.000",
        "event": "mapping_unhover",
        "id": "evkypDvBSrRyT67n1LiC"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:16:13.000",
        "event": "mapping_unhover",
        "id": "kjuMPfcWjapSAR0s0rWw"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 0,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:16:13.000",
        "event": "mapping_hover",
        "id": "lbaNd8um6ZQ25rGMqlrF"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 1,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:16:18.000",
        "event": "mapping_hover",
        "id": "0lZWBLelzrGnRo45xz3c"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:16:18.000",
        "event": "mapping_unhover",
        "id": "6Dxw0xMc6GDsbI3yY8B6"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:16:18.000",
        "event": "mapping_unhover",
        "id": "92K9tD78PhkwIs02BI2E"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:16:18.000",
        "event": "mapping_unhover",
        "id": "Ioj8B0fKn4XU4Os1Qw7B"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 2,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:16:18.000",
        "event": "mapping_hover",
        "id": "MlshR2FKGM5BcC65Dtbk"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:16:18.000",
        "event": "mapping_unhover",
        "id": "P5n4QUKKthYDnpcdKf1b"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 1,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:16:18.000",
        "event": "mapping_hover",
        "id": "bToGOg2MyfL1pbgI8xbd"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 0,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:16:18.000",
        "event": "mapping_hover",
        "id": "f4G9XHAdXenHMe7AzG1n"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 2,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:16:19.000",
        "event": "mapping_hover",
        "id": "ManzrDZuKh4QY42K6wDh"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:16:20.000",
        "event": "mapping_unhover",
        "id": "TYDwQ6pbBveFDZMIaqan"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 3,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:16:20.000",
        "event": "mapping_hover",
        "id": "chT2YnCxvWEORCXa77Ij"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 2,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:16:22.000",
        "event": "mapping_hover",
        "id": "SxQER86nNEUabgmltyDi"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:16:22.000",
        "event": "mapping_unhover",
        "id": "V6cnuM0h0GdVKP59b5D6"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:16:22.000",
        "event": "mapping_unhover",
        "id": "a83sdNlEANqqTouacrXx"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 1,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:16:22.000",
        "event": "mapping_hover",
        "id": "y1RLFXL7NlWZCl0mY3XT"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:16:26.000",
        "event": "mapping_unhover",
        "id": "7xspVucveKAI1pbTJpgC"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 1,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:16:30.000",
        "event": "mapping_hover",
        "id": "vVKMUpBw4fYKrWfEcgmx"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:16:31.000",
        "event": "mapping_unhover",
        "id": "cFHHx7dDLyE9Tv0S8D2M"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 0,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:16:31.000",
        "event": "mapping_hover",
        "id": "mQBBS0W1DYcfBOnaSIUY"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:16:31.000",
        "event": "mapping_unhover",
        "id": "vh2QwJIUs8FHqFUDaOky"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:16:32.000",
        "event": "mapping_unhover",
        "id": "JZlaRkTHXwqQIemAzCWb"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 0,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:16:32.000",
        "event": "mapping_hover",
        "id": "Zx6nanRJwd3A6V2roVy5"
    },
    {
        "source": "frontend",
        "data": {
            "before_structured": "structured",
            "after_structured": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "before_detail_level": "medium",
            "after_detail_level": "high"
        },
        "timestamp": "2025-08-19 22:16:33.000",
        "event": "change_summary_level",
        "id": "pkRWUEUBTAdJK9dnSPtR"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 1,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:16:34.000",
        "event": "mapping_hover",
        "id": "8rCQVqd2eyH8pu0lVIrk"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 1,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:16:34.000",
        "event": "mapping_hover",
        "id": "FOmNqqFpLWPT4lv73Sty"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:16:34.000",
        "event": "mapping_unhover",
        "id": "l3sdL47ehlkGw9AwHoj0"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:16:35.000",
        "event": "mapping_unhover",
        "id": "CkLB79XVHTXKs5V5ezTa"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 1,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:16:36.000",
        "event": "mapping_hover",
        "id": "7SUgyk8w1BWTuQ80pybi"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:16:36.000",
        "event": "mapping_unhover",
        "id": "AtJn80d0qbxPPFH100ik"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:16:36.000",
        "event": "mapping_unhover",
        "id": "FwwUafMyV04kXeNTRmOc"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 0,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:16:36.000",
        "event": "mapping_hover",
        "id": "yh6yahdizha2Um3MJb6F"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:16:37.000",
        "event": "mapping_unhover",
        "id": "17zYqQTneCDLS0JErcqb"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 0,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:16:37.000",
        "event": "mapping_hover",
        "id": "WiFwFU50hjIbPoz4RKTT"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 1,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:16:37.000",
        "event": "mapping_hover",
        "id": "n6t6FtbCCyuV92TTHeOB"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:16:37.000",
        "event": "mapping_unhover",
        "id": "zbnzYwt3YEhae2MPFymX"
    },
    {
        "source": "frontend",
        "data": {
            "before_structured": "structured",
            "after_structured": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "before_detail_level": "high",
            "after_detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:16:38.000",
        "event": "change_summary_level",
        "id": "jyJUskZhCT5YQvhRXNCa"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:16:39.000",
        "event": "mapping_unhover",
        "id": "iQ0W5RLekbX9AcnCq9cZ"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 1,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:16:39.000",
        "event": "mapping_hover",
        "id": "qJuOkNi4RxzV0Ykr3y3x"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 1,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:16:39.000",
        "event": "mapping_hover",
        "id": "yGbmlBQDzlXQp5gmSbXh"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 2,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:16:40.000",
        "event": "mapping_hover",
        "id": "FjCcjqiXSq8fee1ctSJu"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:16:40.000",
        "event": "mapping_unhover",
        "id": "xJgPFzbr4ojy5F4K1Mfx"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 1,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:16:42.000",
        "event": "mapping_hover",
        "id": "AxDJwqeWvlmWazXTJGbC"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:16:42.000",
        "event": "mapping_unhover",
        "id": "PAihBXt4BcKDEvaPL3BX"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:16:43.000",
        "event": "mapping_unhover",
        "id": "stlNDHUT4aXvkYgsWWoB"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 2,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:16:45.000",
        "event": "mapping_hover",
        "id": "G8MkMcDxZX93Yg4EDJ0T"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:16:45.000",
        "event": "mapping_unhover",
        "id": "LIp6g1w5t6u7R3DcRHDy"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 1,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:16:45.000",
        "event": "mapping_hover",
        "id": "ukwL8nlWqDNQbCDgifRL"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 2,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:16:46.000",
        "event": "mapping_hover",
        "id": "AWqZPRNWTjIiMClKOX0F"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:16:46.000",
        "event": "mapping_unhover",
        "id": "FZk9uWVi9cARIIIXY5ty"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 3,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:16:46.000",
        "event": "mapping_hover",
        "id": "fXlYMawuKCJTd5NgTjNz"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:16:46.000",
        "event": "mapping_unhover",
        "id": "jQFmL9zooqDaw9hSFBOl"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:16:46.000",
        "event": "mapping_unhover",
        "id": "wmO6vEQnKCWMInbdkOni"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 4,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:16:47.000",
        "event": "mapping_hover",
        "id": "9WvFf61bj6hCIZLF7rxl"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:16:47.000",
        "event": "mapping_unhover",
        "id": "CurrZQcHO2Z7LcXrRAiF"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 5,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:16:47.000",
        "event": "mapping_hover",
        "id": "HrgQazi3HdddM97o5CPT"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:16:47.000",
        "event": "mapping_unhover",
        "id": "MxJnslnkq4ypKLhIv4bq"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 4,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:16:47.000",
        "event": "mapping_hover",
        "id": "VllDLQs4AbQ96gtVT4Jf"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:16:47.000",
        "event": "mapping_unhover",
        "id": "w4m5Bl1njWvgs9sbIh1B"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 5,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:16:47.000",
        "event": "mapping_hover",
        "id": "zahzSNXwgjUUbOmS8tgR"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 2,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:16:48.000",
        "event": "mapping_hover",
        "id": "8CamatWlNSQYafzg7hzh"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:16:48.000",
        "event": "mapping_unhover",
        "id": "8ETz3oIfj8SJy8XP20Cw"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:16:48.000",
        "event": "mapping_unhover",
        "id": "8TazgvfcG9Fh1vTlqsQw"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:16:48.000",
        "event": "mapping_unhover",
        "id": "8uDsq7fHzIwc3aRFZWrL"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 4,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:16:48.000",
        "event": "mapping_hover",
        "id": "Ajer8mdNYozQfHklwXIe"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:16:48.000",
        "event": "mapping_unhover",
        "id": "FuY0PiIqxVw5dQTZpNJb"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 5,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:16:48.000",
        "event": "mapping_hover",
        "id": "QEvNIo3PXRsTjx6PTAh9"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:16:48.000",
        "event": "mapping_unhover",
        "id": "cTmPNKDfjTKIwkA9bw6K"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 2,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:16:48.000",
        "event": "mapping_hover",
        "id": "rAZRSoFqHfWQAQpDSnp8"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 6,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:16:48.000",
        "event": "mapping_hover",
        "id": "rxEvgK08wxOdtD8TLP0h"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 3,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:16:49.000",
        "event": "mapping_hover",
        "id": "9ZWtgHAK5FHRjQCLDo2s"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:16:49.000",
        "event": "mapping_unhover",
        "id": "vyuxThosqe008rTHstRp"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:16:51.000",
        "event": "mapping_unhover",
        "id": "3Gx0RpQKqqxtyIvcsF4L"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 2,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:16:51.000",
        "event": "mapping_hover",
        "id": "xQ5N3R0YmBdpIOhkB9jE"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:16:53.000",
        "event": "mapping_unhover",
        "id": "ImGNiCHtw9V09VUUok8z"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:16:54.000",
        "event": "mapping_unhover",
        "id": "0G2H8gCjPl16UX0Wl06Y"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 0,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:16:54.000",
        "event": "mapping_hover",
        "id": "0gHtzwb05PkD2ovU1vKo"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 1,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:16:54.000",
        "event": "mapping_hover",
        "id": "BoAWA9lydWhaHMrOtKD8"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:16:54.000",
        "event": "mapping_unhover",
        "id": "GN58o3JMEqR6B6jbtnNq"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 0,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:16:54.000",
        "event": "mapping_hover",
        "id": "SniztudPmItS3hbsZB5F"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 0,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:16:54.000",
        "event": "mapping_hover",
        "id": "lEZRD3jpYMpm7RF9aBiV"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 1,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:16:54.000",
        "event": "mapping_hover",
        "id": "sQG4yzwEk6qBvQfWf0g0"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:16:54.000",
        "event": "mapping_unhover",
        "id": "xLLSs0QPc2EHKB14Y8ov"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:16:54.000",
        "event": "mapping_unhover",
        "id": "z5TUjO5Q3okNt9hTHmPL"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 1,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:16:55.000",
        "event": "mapping_hover",
        "id": "TDfJxhBEozqZAdB11ySP"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:16:55.000",
        "event": "mapping_unhover",
        "id": "nXM99BPLpPYLYpWnIClN"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:16:56.000",
        "event": "mapping_unhover",
        "id": "eVGr7c7PsKLYVdDiHAON"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 1,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:16:56.000",
        "event": "mapping_hover",
        "id": "zUfxWer9dW7MdMzN45WU"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:16:57.000",
        "event": "mapping_unhover",
        "id": "T9c8FKHPzrBhToD5VKfL"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 0,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:16:57.000",
        "event": "mapping_hover",
        "id": "THKOUietsXwJk240koGP"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:16:57.000",
        "event": "mapping_unhover",
        "id": "V3ygDLfXrruhgHKUGQDU"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:16:58.000",
        "event": "mapping_unhover",
        "id": "BmZw5Jtvc8hPnYRIf1Rg"
    },
    {
        "source": "frontend",
        "data": {
            "before_structured": "structured",
            "after_structured": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "before_detail_level": "medium",
            "after_detail_level": "high"
        },
        "timestamp": "2025-08-19 22:16:58.000",
        "event": "change_summary_level",
        "id": "CaFYTySNgeMZ50oWIysT"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 0,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:16:58.000",
        "event": "mapping_hover",
        "id": "DcJnyvHgfEnYDMFj4k29"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 2,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:16:58.000",
        "event": "mapping_hover",
        "id": "oU8LJiKCxVPsScePwgnQ"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:16:58.000",
        "event": "mapping_unhover",
        "id": "z6aoPmxKd8YK5u18ZfpU"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 2,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:16:59.000",
        "event": "mapping_hover",
        "id": "4MZhPt2aJADy1b1U8KtC"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 3,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:16:59.000",
        "event": "mapping_hover",
        "id": "O0yMdXivBuASbi1SnPw3"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:16:59.000",
        "event": "mapping_unhover",
        "id": "ndmRLFkVLY79xxC6Ateu"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:17:00.000",
        "event": "mapping_unhover",
        "id": "1ZaxMU4tVzMndnbdaWar"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 3,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:17:00.000",
        "event": "mapping_hover",
        "id": "sAsckv6U4vJNo0kGbqJk"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 4,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:17:01.000",
        "event": "mapping_hover",
        "id": "ipnoMltRzYP1GQL23l2y"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:17:01.000",
        "event": "mapping_unhover",
        "id": "rJCZE5VXE2AEZqJET1Cz"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:17:03.000",
        "event": "mapping_unhover",
        "id": "2ZydWRQwZxK3uyRYLxCq"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 5,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:17:03.000",
        "event": "mapping_hover",
        "id": "oHpWXd6B79T7ZAQzav1m"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 6,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:17:06.000",
        "event": "mapping_hover",
        "id": "0HOO4nfstc1O0PjLvv0i"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:17:06.000",
        "event": "mapping_unhover",
        "id": "QIP0beePUYzrMZ5DRmnI"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:17:14.000",
        "event": "mapping_unhover",
        "id": "b0tu7KzV5L5sEcHDXRxr"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:17:14.000",
        "event": "mapping_unhover",
        "id": "v2TT4SE5NjZHCEasMh7L"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 9,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:17:14.000",
        "event": "mapping_hover",
        "id": "ztuO0ayvepb5nCaupc9n"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:17:17.000",
        "event": "mapping_unhover",
        "id": "6KmKVaMR27rwhRZQMcnR"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:17:17.000",
        "event": "mapping_unhover",
        "id": "DVaGxluDbDFZ28E7cCqx"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 7,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:17:17.000",
        "event": "mapping_hover",
        "id": "U7mKDWDCIUTzkZx6F2Cl"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 8,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:17:17.000",
        "event": "mapping_hover",
        "id": "WnLXrSlytHQgTJjkWw5u"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:17:17.000",
        "event": "mapping_unhover",
        "id": "mBvltSveVfPZD1SjYQxV"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 9,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:17:17.000",
        "event": "mapping_hover",
        "id": "n1jliwocDifNkoqpkxxO"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 6,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:17:17.000",
        "event": "mapping_hover",
        "id": "tcvX5ZhtKEq0mV9vgJmc"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:17:23.000",
        "event": "mapping_unhover",
        "id": "0OdrBKFyRitdo2bVL4L3"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 7,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:17:23.000",
        "event": "mapping_hover",
        "id": "2BFhmzLGjJZiQbN9pcmn"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:17:23.000",
        "event": "mapping_unhover",
        "id": "7AYOi4qAr46eqjd9dX09"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 6,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:17:23.000",
        "event": "mapping_hover",
        "id": "K0VYYLSzaPndMOsgToXG"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:17:26.000",
        "event": "mapping_unhover",
        "id": "4lbnwc3PaTCoboOXoQBD"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 8,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:17:26.000",
        "event": "mapping_hover",
        "id": "T9fZLzI7RiZ0aaMHqDLU"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:17:27.000",
        "event": "mapping_unhover",
        "id": "DFUCdbueTcEPclPY5ljj"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:17:27.000",
        "event": "mapping_unhover",
        "id": "H8gYO0dN95Q9J2CVjds2"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 9,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:17:27.000",
        "event": "mapping_hover",
        "id": "R2og65TinsxFwQKJPTBO"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:17:29.000",
        "event": "mapping_unhover",
        "id": "CaIqkqZgsEmNaNbuA3VW"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 7,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:17:29.000",
        "event": "mapping_hover",
        "id": "ClnexQJgIz67xFNZEExb"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 9,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:17:29.000",
        "event": "mapping_hover",
        "id": "GoR0EpbOCzUXdHoulwBI"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 8,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:17:29.000",
        "event": "mapping_hover",
        "id": "HGOOcCiVjtavgzdPaQEX"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 6,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:17:29.000",
        "event": "mapping_hover",
        "id": "XWjcSAS2uamo3M8RnrBl"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:17:29.000",
        "event": "mapping_unhover",
        "id": "svA8AD2X0UyTN0GGdmft"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:17:29.000",
        "event": "mapping_unhover",
        "id": "yznjrCdLTAcpJalg3EZk"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:17:30.000",
        "event": "mapping_unhover",
        "id": "kIQFr6wZw3OSMJUZEx6i"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 5,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:17:30.000",
        "event": "mapping_hover",
        "id": "kbtDuKNJ2Zjd63mJpTUk"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:17:31.000",
        "event": "mapping_unhover",
        "id": "TXVgGqaBr4v1cFzwFlxm"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 6,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:17:31.000",
        "event": "mapping_hover",
        "id": "lxpeM7uGDWwdzQePOW3T"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:17:31.000",
        "event": "mapping_unhover",
        "id": "suX0oOeGxyvOXY0gk3jd"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 6,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:17:32.000",
        "event": "mapping_hover",
        "id": "51P74QGn29dpOM0p8Oh7"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:17:34.000",
        "event": "mapping_unhover",
        "id": "0IOjBLfh9r9O9iQGiaoI"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 9,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:17:34.000",
        "event": "mapping_hover",
        "id": "CpXq7dywgQmK2WLC8sMT"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 7,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:17:34.000",
        "event": "mapping_hover",
        "id": "W3TZyVNPAmE301dAawz7"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:17:34.000",
        "event": "mapping_unhover",
        "id": "Zg2gV28t1Z3qGmjojkh0"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:17:34.000",
        "event": "mapping_unhover",
        "id": "nwPWrWoxsQBNlgp2B6CU"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 5,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:17:43.000",
        "event": "mapping_hover",
        "id": "T1Ik7N2NuiJPPSqcNdYG"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:17:44.000",
        "event": "mapping_unhover",
        "id": "5oRK089N0lX6qLk8q0vB"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:17:53.000",
        "event": "mapping_unhover",
        "id": "btIyNn3O1S2PqAAkYCbF"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 2,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:17:53.000",
        "event": "mapping_hover",
        "id": "e1bfqC9SFb7W9swXR8ui"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 5,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:17:53.000",
        "event": "mapping_hover",
        "id": "xwijra0DbTczVL3TkpOX"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 0,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:17:54.000",
        "event": "mapping_hover",
        "id": "ezxtxEkWDhupxR9iWkTp"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:17:54.000",
        "event": "mapping_unhover",
        "id": "mTmLtYO2sUhkpvRMlUEn"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:17:54.000",
        "event": "mapping_unhover",
        "id": "xFEsQ3IQJilQX6QgQeE9"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 2,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:17:59.000",
        "event": "mapping_hover",
        "id": "6xIMvVFXafVLY2udMYPA"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:18:00.000",
        "event": "mapping_unhover",
        "id": "dIaAKX4d7SacEhabt0fY"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:18:04.000",
        "event": "mapping_unhover",
        "id": "B0hVAuNgS1l6goEg5dki"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 2,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:18:04.000",
        "event": "mapping_hover",
        "id": "nBxmy6BFfX7w845sYVfP"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 6,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:18:06.000",
        "event": "mapping_hover",
        "id": "ac1VFro9Fccu8M9He8at"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:18:06.000",
        "event": "mapping_unhover",
        "id": "oHo4cUGxuy3KW9zUgDI7"
    },
    {
        "source": "frontend",
        "data": {
            "structured": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high",
            "summary": "• Defines a functional React component named StockChart\n• Validates the input data before rendering\n  ◦ Returns null if data is missing or empty\n• Extracts company name and ticker from the data\n• Processes the stock data to create chartData:\n  ◦ Maps each item to an object with date and closing price\n• Contains a helper function to format date strings (though unused in rendering)\n• Renders a styled container with:\n  ◦ A header displaying the company name and ticker\n  ◦ A responsive LineChart from Recharts with:\n    ◦ XAxis for dates and YAxis for prices\n    ◦ Tooltip and legend for interactivity\n    ◦ A monotone line representing the stock's closing price, styled without dots\n• Ensures the chart adapts to the container's width and has a fixed height"
        },
        "timestamp": "2025-08-19 22:18:06.000",
        "event": "click_edit_in_prompt",
        "id": "qPQ0eNMeaNe0oZRuHZF6"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 5,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:18:49.000",
        "event": "mapping_hover",
        "id": "6VQ7uMQQS0Rt540skQkK"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 8,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:18:49.000",
        "event": "mapping_hover",
        "id": "Ly9eabeEdeVTSEnordIF"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 9,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:18:49.000",
        "event": "mapping_hover",
        "id": "NdlmSNua0UoYDiLZLdD4"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:18:49.000",
        "event": "mapping_unhover",
        "id": "TefCZV6aRZHz33oYAPnn"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:18:49.000",
        "event": "mapping_unhover",
        "id": "TpxPfBAAXej28QePXErR"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:18:49.000",
        "event": "mapping_unhover",
        "id": "lsWzlGOhcggJ35684PLq"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 6,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:18:49.000",
        "event": "mapping_hover",
        "id": "oQ1E7ju4zrRPzyWr8ynP"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:18:49.000",
        "event": "mapping_unhover",
        "id": "r0Q5qED4z8RaLAuZrh20"
    },
    {
        "source": "frontend",
        "data": {
            "original_summary": "• Defines a functional React component named StockChart\n• Validates the input data before rendering\n  ◦ Returns null if data is missing or empty\n• Extracts company name and ticker from the data\n• Processes the stock data to create chartData:\n  ◦ Maps each item to an object with date and closing price\n• Contains a helper function to format date strings (though unused in rendering)\n• Renders a styled container with:\n  ◦ A header displaying the company name and ticker\n  ◦ A responsive LineChart from Recharts with:\n    ◦ XAxis for dates and YAxis for prices\n    ◦ Tooltip and legend for interactivity\n    ◦ A monotone line representing the stock's closing price, styled without dots\n• Ensures the chart adapts to the container's width and has a fixed height",
            "instruction": "for this function:\nContains a helper function to format date strings (though unused in rendering)\ni want this helper function can format date strings as \"Jan Feb Mar Apr Jun Jul Aug Sep Oct Nov Dec Jan Feb Mar May Jun Jul Aug\"",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high",
            "structured": "structured"
        },
        "timestamp": "2025-08-19 22:20:10.000",
        "event": "apply_instruction_summary",
        "id": "ti9ImvS8BcXk4BZ3z1Fr"
    },
    {
        "source": "backend",
        "data": {
            "instruction": "for this function:\nContains a helper function to format date strings (though unused in rendering)\ni want this helper function can format date strings as \"Jan Feb Mar Apr Jun Jul Aug Sep Oct Nov Dec Jan Feb Mar May Jun Jul Aug\"",
            "original_code": "\nconst StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};",
            "original_summary": "• Defines a functional React component named StockChart\n• Validates the input data before rendering\n  ◦ Returns null if data is missing or empty\n• Extracts company name and ticker from the data\n• Processes the stock data to create chartData:\n  ◦ Maps each item to an object with date and closing price\n• Contains a helper function to format date strings (though unused in rendering)\n• Renders a styled container with:\n  ◦ A header displaying the company name and ticker\n  ◦ A responsive LineChart from Recharts with:\n    ◦ XAxis for dates and YAxis for prices\n    ◦ Tooltip and legend for interactivity\n    ◦ A monotone line representing the stock's closing price, styled without dots\n• Ensures the chart adapts to the container's width and has a fixed height",
            "updated_summary": "• Defines a functional React component named StockChart  \n• Validates the input data before rendering  \n  ◦ Returns null if data is missing or empty  \n• Extracts company name and ticker from the data  \n• Processes the stock data to create chartData:  \n  ◦ Maps each item to an object with date and closing price  \n• Contains a helper function to format date strings, which can format date strings as \"Jan Feb Mar Apr Jun Jul Aug Sep Oct Nov Dec Jan Feb Mar May Jun Jul Aug\" (though unused in rendering)  \n• Renders a styled container with:  \n  ◦ A header displaying the company name and ticker  \n  ◦ A responsive LineChart from Recharts with:  \n    ◦ XAxis for dates and YAxis for prices  \n    ◦ Tooltip and legend for interactivity  \n    ◦ A monotone line representing the stock's closing price, styled without dots  \n• Ensures the chart adapts to the container's width and has a fixed height"
        },
        "timestamp": "2025-08-19 22:20:11.000",
        "event": "apply_instruction_summary",
        "id": "1w2bX8E4RGkYQfy7sVQm"
    },
    {
        "source": "frontend",
        "data": {
            "edited_summary": "• Defines a functional React component named StockChart  \n• Validates the input data before rendering  \n  ◦ Returns null if data is missing or empty  \n• Extracts company name and ticker from the data  \n• Processes the stock data to create chartData:  \n  ◦ Maps each item to an object with date and closing price  \n• Contains a helper function to format date strings, which can format date strings as \"Jan Feb Mar Apr Jun Jul Aug Sep Oct Nov Dec Jan Feb Mar May Jun Jul Aug\" (though unused in rendering)  \n• Renders a styled container with:  \n  ◦ A header displaying the company name and ticker  \n  ◦ A responsive LineChart from Recharts with:  \n    ◦ XAxis for dates and YAxis for prices  \n    ◦ Tooltip and legend for interactivity  \n    ◦ A monotone line representing the stock's closing price, styled without dots  \n• Ensures the chart adapts to the container's width and has a fixed height",
            "structured": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high",
            "original_summary": "• Defines a functional React component named StockChart\n• Validates the input data before rendering\n  ◦ Returns null if data is missing or empty\n• Extracts company name and ticker from the data\n• Processes the stock data to create chartData:\n  ◦ Maps each item to an object with date and closing price\n• Contains a helper function to format date strings (though unused in rendering)\n• Renders a styled container with:\n  ◦ A header displaying the company name and ticker\n  ◦ A responsive LineChart from Recharts with:\n    ◦ XAxis for dates and YAxis for prices\n    ◦ Tooltip and legend for interactivity\n    ◦ A monotone line representing the stock's closing price, styled without dots\n• Ensures the chart adapts to the container's width and has a fixed height"
        },
        "timestamp": "2025-08-19 22:21:09.000",
        "event": "commit_modified_summary",
        "id": "WEm2BG7B5ZTMwGj1taZx"
    },
    {
        "source": "backend",
        "data": {
            "edited_summary": "• Defines a functional React component named StockChart  \n• Validates the input data before rendering  \n  ◦ Returns null if data is missing or empty  \n• Extracts company name and ticker from the data  \n• Processes the stock data to create chartData:  \n  ◦ Maps each item to an object with date and closing price  \n• Contains a helper function to format date strings, which can format date strings as \"Jan Feb Mar Apr Jun Jul Aug Sep Oct Nov Dec Jan Feb Mar May Jun Jul Aug\" (though unused in rendering)  \n• Renders a styled container with:  \n  ◦ A header displaying the company name and ticker  \n  ◦ A responsive LineChart from Recharts with:  \n    ◦ XAxis for dates and YAxis for prices  \n    ◦ Tooltip and legend for interactivity  \n    ◦ A monotone line representing the stock's closing price, styled without dots  \n• Ensures the chart adapts to the container's width and has a fixed height",
            "structured_type": "structured",
            "updated_code": "const StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    // Formats date strings as \"Jan Feb Mar Apr Jun Jul Aug Sep Oct Nov Dec Jan Feb Mar May Jun Jul Aug\"\n    const months = [\n      \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n      \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"\n    ];\n    const d = new Date(date);\n    const month = months[d.getMonth()];\n    const year = d.getFullYear();\n    return `${month} ${year}`;\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};",
            "original_code": "\nconst StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    return date.split(\"T\")[0];\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};",
            "detail_level": "high",
            "original_summary": "• Defines a functional React component named StockChart\n• Validates the input data before rendering\n  ◦ Returns null if data is missing or empty\n• Extracts company name and ticker from the data\n• Processes the stock data to create chartData:\n  ◦ Maps each item to an object with date and closing price\n• Contains a helper function to format date strings (though unused in rendering)\n• Renders a styled container with:\n  ◦ A header displaying the company name and ticker\n  ◦ A responsive LineChart from Recharts with:\n    ◦ XAxis for dates and YAxis for prices\n    ◦ Tooltip and legend for interactivity\n    ◦ A monotone line representing the stock's closing price, styled without dots\n• Ensures the chart adapts to the container's width and has a fixed height"
        },
        "timestamp": "2025-08-19 22:21:12.000",
        "event": "modify_summary_mediation",
        "id": "490QFNhStjVMhjwqu3xs"
    },
    {
        "source": "backend",
        "data": {
            "new_code": "const StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    // Formats date strings as \"Jan Feb Mar Apr Jun Jul Aug Sep Oct Nov Dec Jan Feb Mar May Jun Jul Aug\"\n    const months = [\n      \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n      \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"\n    ];\n    const d = new Date(date);\n    const month = months[d.getMonth()];\n    const year = d.getFullYear();\n    return `${month} ${year}`;\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};",
            "new_summary": {
                "medium_unstructured": "The StockChart component takes in stock data and renders a line chart of closing prices over time. It checks for valid data, extracts relevant fields, and uses Recharts components to display the chart. The chart includes axes, a tooltip, a legend, and a title with the company name and ticker. The formatDateString helper now just splits the date string at 'T' and returns the date part, instead of formatting it as 'Mon YYYY'.",
                "title": "StockChart React Component Summary (formatDateString logic updated)",
                "low_unstructured": "This code defines a React component that displays a stock price line chart using provided data, but now the formatDateString helper simply splits the date string at 'T' and returns the date part, instead of formatting it as 'Mon YYYY'.",
                "low_structured": "• Defines a React component for stock charts\n• Displays a line chart with given data\n• Shows company name and ticker\n• The formatDateString helper now just splits the date string at 'T' and returns the date part, instead of formatting it as 'Mon YYYY'",
                "medium_structured": "• Receives stock data as a prop\n• Validates input data before rendering\n• Processes data to extract date and closing price\n• Renders a responsive line chart with:\n  ◦ X and Y axes\n  ◦ Tooltip and legend\n  ◦ Company name and ticker as a header\n• The formatDateString helper now just splits the date string at 'T' and returns the date part, rather than formatting it as 'Mon YYYY'",
                "high_unstructured": "This React functional component, StockChart, accepts a data prop containing stock information and renders a responsive line chart of the stock's closing prices over time. It first checks if the data is valid, then extracts the company name and ticker, and formats the data for the chart by mapping each entry to an object with date and price. The component uses Recharts' LineChart and related components to display the chart with axes, tooltip, legend, and a styled header showing the company name and ticker. The chart is contained within a div with margin for spacing and adapts to the container's width. The formatDateString helper function has been changed to simply split the date string at 'T' and return the date part, instead of formatting it as 'Mon YYYY'.",
                "high_structured": "• Defines a functional React component named StockChart\n• Validates the input data before rendering\n  ◦ Returns null if data is missing or empty\n• Extracts company name and ticker from the data\n• Processes the stock data to create chartData:\n  ◦ Maps each item to an object with date and closing price\n• Contains a helper function to format date strings, which now just splits the date string at 'T' and returns the date part, instead of formatting it as 'Mon YYYY'\n• Renders a styled container with:\n  ◦ A header displaying the company name and ticker\n  ◦ A responsive LineChart from Recharts with:\n    ◦ XAxis for dates and YAxis for prices\n    ◦ Tooltip and legend for interactivity\n    ◦ A monotone line representing the stock's closing price, styled without dots\n• Ensures the chart adapts to the container's width and has a fixed height"
            },
            "original_code": "const StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    // Formats date strings as \"Jan Feb Mar Apr Jun Jul Aug Sep Oct Nov Dec Jan Feb Mar May Jun Jul Aug\"\n    const months = [\n      \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n      \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"\n    ];\n    const d = new Date(date);\n    const month = months[d.getMonth()];\n    const year = d.getFullYear();\n    return `${month} ${year}`;\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};",
            "old_summary": {
                "medium_unstructured": "The StockChart component takes in stock data and renders a line chart of closing prices over time. It checks for valid data, extracts relevant fields, and uses Recharts components to display the chart. The chart includes axes, a tooltip, a legend, and a title with the company name and ticker.",
                "title": "StockChart React Component Summary",
                "low_unstructured": "This code defines a React component that displays a stock price line chart using provided data.",
                "low_structured": "• Defines a React component for stock charts\n• Displays a line chart with given data\n• Shows company name and ticker",
                "medium_structured": "• Receives stock data as a prop\n• Validates input data before rendering\n• Processes data to extract date and closing price\n• Renders a responsive line chart with:\n  ◦ X and Y axes\n  ◦ Tooltip and legend\n  ◦ Company name and ticker as a header",
                "high_unstructured": "This React functional component, StockChart, accepts a data prop containing stock information and renders a responsive line chart of the stock's closing prices over time. It first checks if the data is valid, then extracts the company name and ticker, and formats the data for the chart by mapping each entry to an object with date and price. The component uses Recharts' LineChart and related components to display the chart with axes, tooltip, legend, and a styled header showing the company name and ticker. The chart is contained within a div with margin for spacing and adapts to the container's width.",
                "high_structured": "• Defines a functional React component named StockChart\n• Validates the input data before rendering\n  ◦ Returns null if data is missing or empty\n• Extracts company name and ticker from the data\n• Processes the stock data to create chartData:\n  ◦ Maps each item to an object with date and closing price\n• Contains a helper function to format date strings (though unused in rendering)\n• Renders a styled container with:\n  ◦ A header displaying the company name and ticker\n  ◦ A responsive LineChart from Recharts with:\n    ◦ XAxis for dates and YAxis for prices\n    ◦ Tooltip and legend for interactivity\n    ◦ A monotone line representing the stock's closing price, styled without dots\n• Ensures the chart adapts to the container's width and has a fixed height"
            }
        },
        "timestamp": "2025-08-19 22:21:20.000",
        "event": "summarize_modified_code",
        "id": "wyAPdG8JxdNtySMgBk65"
    },
    {
        "source": "backend",
        "data": {
            "code": "12: const StockChart = ({ data }) => {\n13:   if (!data || !data.data || !data.data.length) return null;\n14: \n15:   const company = data.name;\n16:   const ticker = data.ticker;\n17: \n18:   const formatDateString = (date) => {\n19:     // Formats date strings as \"Jan Feb Mar Apr Jun Jul Aug Sep Oct Nov Dec Jan Feb Mar May Jun Jul Aug\"\n20:     const months = [\n21:       \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n22:       \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"\n23:     ];\n24:     const d = new Date(date);\n25:     const month = months[d.getMonth()];\n26:     const year = d.getFullYear();\n27:     return `${month} ${year}`;\n28:   };\n29: \n30:   // Combine labels and values into an array of objects for Recharts\n31:   const chartData = data.data.map((item) => ({\n32:     date: item.date,\n33:     price: item.close,\n34:   }));\n35: \n36:   return (\n37:     <div style={{ marginTop: \"2rem\" }}>\n38:       <h3>\n39:         {company} ({ticker})\n40:       </h3>\n41:       <ResponsiveContainer width=\"100%\" height={300}>\n42:         <LineChart\n43:           data={chartData}\n44:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n45:         >\n46:           <XAxis dataKey=\"date\" />\n47:           <YAxis domain={[\"auto\", \"auto\"]} />\n48:           <Tooltip />\n49:           <Legend />\n50:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n51:         </LineChart>\n52:       </ResponsiveContainer>\n53:     </div>\n54:   );\n55: };",
            "summary": "• Defines a React component for stock charts\n• Displays a line chart with given data\n• Shows company name and ticker\n• The formatDateString helper now just splits the date string at 'T' and returns the date part, instead of formatting it as 'Mon YYYY'",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 12
                        }
                    ],
                    "summaryComponent": "Defines a React component for stock charts"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<LineChart",
                            "line": 42
                        },
                        {
                            "code": "data={chartData}",
                            "line": 43
                        }
                    ],
                    "summaryComponent": "Displays a line chart with given data"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<h3>",
                            "line": 38
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 39
                        }
                    ],
                    "summaryComponent": "Shows company name and ticker"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const formatDateString = (date) => {",
                            "line": 18
                        },
                        {
                            "code": "// Formats date strings as \"Jan Feb Mar Apr Jun Jul Aug Sep Oct Nov Dec Jan Feb Mar May Jun Jul Aug\"",
                            "line": 19
                        },
                        {
                            "code": "const months = [",
                            "line": 20
                        }
                    ],
                    "summaryComponent": "The formatDateString helper now just splits the date string at 'T' and returns the date part, instead of formatting it as 'Mon YYYY'"
                }
            ]
        },
        "timestamp": "2025-08-19 22:21:22.000",
        "event": "map_summary_code",
        "id": "u4JdITC02IGyquT4QW48"
    },
    {
        "source": "backend",
        "data": {
            "code": "12: const StockChart = ({ data }) => {\n13:   if (!data || !data.data || !data.data.length) return null;\n14: \n15:   const company = data.name;\n16:   const ticker = data.ticker;\n17: \n18:   const formatDateString = (date) => {\n19:     // Formats date strings as \"Jan Feb Mar Apr Jun Jul Aug Sep Oct Nov Dec Jan Feb Mar May Jun Jul Aug\"\n20:     const months = [\n21:       \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n22:       \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"\n23:     ];\n24:     const d = new Date(date);\n25:     const month = months[d.getMonth()];\n26:     const year = d.getFullYear();\n27:     return `${month} ${year}`;\n28:   };\n29: \n30:   // Combine labels and values into an array of objects for Recharts\n31:   const chartData = data.data.map((item) => ({\n32:     date: item.date,\n33:     price: item.close,\n34:   }));\n35: \n36:   return (\n37:     <div style={{ marginTop: \"2rem\" }}>\n38:       <h3>\n39:         {company} ({ticker})\n40:       </h3>\n41:       <ResponsiveContainer width=\"100%\" height={300}>\n42:         <LineChart\n43:           data={chartData}\n44:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n45:         >\n46:           <XAxis dataKey=\"date\" />\n47:           <YAxis domain={[\"auto\", \"auto\"]} />\n48:           <Tooltip />\n49:           <Legend />\n50:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n51:         </LineChart>\n52:       </ResponsiveContainer>\n53:     </div>\n54:   );\n55: };",
            "summary": "• Defines a functional React component named StockChart\n• Validates the input data before rendering\n  ◦ Returns null if data is missing or empty\n• Extracts company name and ticker from the data\n• Processes the stock data to create chartData:\n  ◦ Maps each item to an object with date and closing price\n• Contains a helper function to format date strings, which now just splits the date string at 'T' and returns the date part, instead of formatting it as 'Mon YYYY'\n• Renders a styled container with:\n  ◦ A header displaying the company name and ticker\n  ◦ A responsive LineChart from Recharts with:\n    ◦ XAxis for dates and YAxis for prices\n    ◦ Tooltip and legend for interactivity\n    ◦ A monotone line representing the stock's closing price, styled without dots\n• Ensures the chart adapts to the container's width and has a fixed height",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 12
                        }
                    ],
                    "summaryComponent": "Defines a functional React component named StockChart"
                },
                {
                    "codeSegments": [
                        {
                            "code": "if (!data || !data.data || !data.data.length) return null;",
                            "line": 13
                        }
                    ],
                    "summaryComponent": "Validates the input data before rendering"
                },
                {
                    "codeSegments": [
                        {
                            "code": "if (!data || !data.data || !data.data.length) return null;",
                            "line": 13
                        }
                    ],
                    "summaryComponent": "Returns null if data is missing or empty"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const company = data.name;",
                            "line": 15
                        },
                        {
                            "code": "const ticker = data.ticker;",
                            "line": 16
                        }
                    ],
                    "summaryComponent": "Extracts company name and ticker from the data"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const chartData = data.data.map((item) => ({",
                            "line": 31
                        }
                    ],
                    "summaryComponent": "Processes the stock data to create chartData:"
                },
                {
                    "codeSegments": [
                        {
                            "code": "date: item.date,",
                            "line": 32
                        },
                        {
                            "code": "price: item.close,",
                            "line": 33
                        }
                    ],
                    "summaryComponent": "Maps each item to an object with date and closing price"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const formatDateString = (date) => {",
                            "line": 18
                        }
                    ],
                    "summaryComponent": "Contains a helper function to format date strings"
                },
                {
                    "codeSegments": [
                        {
                            "code": "return (",
                            "line": 36
                        },
                        {
                            "code": "<div style={{ marginTop: \"2rem\" }}>",
                            "line": 37
                        }
                    ],
                    "summaryComponent": "Renders a styled container with:"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<h3>",
                            "line": 38
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 39
                        }
                    ],
                    "summaryComponent": "A header displaying the company name and ticker"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 41
                        },
                        {
                            "code": "<LineChart",
                            "line": 42
                        }
                    ],
                    "summaryComponent": "A responsive LineChart from Recharts with:"
                }
            ]
        },
        "timestamp": "2025-08-19 22:21:24.000",
        "event": "map_summary_code",
        "id": "7naxzYaZBz0LoeWzywPf"
    },
    {
        "source": "backend",
        "data": {
            "code": "12: const StockChart = ({ data }) => {\n13:   if (!data || !data.data || !data.data.length) return null;\n14: \n15:   const company = data.name;\n16:   const ticker = data.ticker;\n17: \n18:   const formatDateString = (date) => {\n19:     // Formats date strings as \"Jan Feb Mar Apr Jun Jul Aug Sep Oct Nov Dec Jan Feb Mar May Jun Jul Aug\"\n20:     const months = [\n21:       \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n22:       \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"\n23:     ];\n24:     const d = new Date(date);\n25:     const month = months[d.getMonth()];\n26:     const year = d.getFullYear();\n27:     return `${month} ${year}`;\n28:   };\n29: \n30:   // Combine labels and values into an array of objects for Recharts\n31:   const chartData = data.data.map((item) => ({\n32:     date: item.date,\n33:     price: item.close,\n34:   }));\n35: \n36:   return (\n37:     <div style={{ marginTop: \"2rem\" }}>\n38:       <h3>\n39:         {company} ({ticker})\n40:       </h3>\n41:       <ResponsiveContainer width=\"100%\" height={300}>\n42:         <LineChart\n43:           data={chartData}\n44:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n45:         >\n46:           <XAxis dataKey=\"date\" />\n47:           <YAxis domain={[\"auto\", \"auto\"]} />\n48:           <Tooltip />\n49:           <Legend />\n50:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n51:         </LineChart>\n52:       </ResponsiveContainer>\n53:     </div>\n54:   );\n55: };",
            "summary": "• Receives stock data as a prop\n• Validates input data before rendering\n• Processes data to extract date and closing price\n• Renders a responsive line chart with:\n  ◦ X and Y axes\n  ◦ Tooltip and legend\n  ◦ Company name and ticker as a header\n• The formatDateString helper now just splits the date string at 'T' and returns the date part, rather than formatting it as 'Mon YYYY'",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 12
                        }
                    ],
                    "summaryComponent": "Receives stock data as a prop"
                },
                {
                    "codeSegments": [
                        {
                            "code": "if (!data || !data.data || !data.data.length) return null;",
                            "line": 13
                        }
                    ],
                    "summaryComponent": "Validates input data before rendering"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const chartData = data.data.map((item) => ({",
                            "line": 31
                        },
                        {
                            "code": "date: item.date,",
                            "line": 32
                        },
                        {
                            "code": "price: item.close,",
                            "line": 33
                        }
                    ],
                    "summaryComponent": "Processes data to extract date and closing price"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 41
                        },
                        {
                            "code": "<LineChart",
                            "line": 42
                        }
                    ],
                    "summaryComponent": "Renders a responsive line chart with:"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<XAxis dataKey=\"date\" />",
                            "line": 46
                        },
                        {
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                            "line": 47
                        }
                    ],
                    "summaryComponent": "X and Y axes"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<Tooltip />",
                            "line": 48
                        },
                        {
                            "code": "<Legend />",
                            "line": 49
                        }
                    ],
                    "summaryComponent": "Tooltip and legend"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<h3>",
                            "line": 38
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 39
                        }
                    ],
                    "summaryComponent": "Company name and ticker as a header"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const formatDateString = (date) => {",
                            "line": 18
                        },
                        {
                            "code": "// Formats date strings as \"Jan Feb Mar Apr Jun Jul Aug Sep Oct Nov Dec Jan Feb Mar May Jun Jul Aug\"",
                            "line": 19
                        },
                        {
                            "code": "const months = [",
                            "line": 20
                        }
                    ],
                    "summaryComponent": "The formatDateString helper now just splits the date string at 'T' and returns the date part, rather than formatting it as 'Mon YYYY'"
                }
            ]
        },
        "timestamp": "2025-08-19 22:21:24.000",
        "event": "map_summary_code",
        "id": "IUO0XOQk5d6dVlMjTE4x"
    },
    {
        "source": "backend",
        "data": {
            "code": "12: const StockChart = ({ data }) => {\n13:   if (!data || !data.data || !data.data.length) return null;\n14: \n15:   const company = data.name;\n16:   const ticker = data.ticker;\n17: \n18:   const formatDateString = (date) => {\n19:     // Formats date strings as \"Jan Feb Mar Apr Jun Jul Aug Sep Oct Nov Dec Jan Feb Mar May Jun Jul Aug\"\n20:     const months = [\n21:       \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n22:       \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"\n23:     ];\n24:     const d = new Date(date);\n25:     const month = months[d.getMonth()];\n26:     const year = d.getFullYear();\n27:     return `${month} ${year}`;\n28:   };\n29: \n30:   // Combine labels and values into an array of objects for Recharts\n31:   const chartData = data.data.map((item) => ({\n32:     date: item.date,\n33:     price: item.close,\n34:   }));\n35: \n36:   return (\n37:     <div style={{ marginTop: \"2rem\" }}>\n38:       <h3>\n39:         {company} ({ticker})\n40:       </h3>\n41:       <ResponsiveContainer width=\"100%\" height={300}>\n42:         <LineChart\n43:           data={chartData}\n44:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n45:         >\n46:           <XAxis dataKey=\"date\" />\n47:           <YAxis domain={[\"auto\", \"auto\"]} />\n48:           <Tooltip />\n49:           <Legend />\n50:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n51:         </LineChart>\n52:       </ResponsiveContainer>\n53:     </div>\n54:   );\n55: };",
            "summary": "This React functional component, StockChart, accepts a data prop containing stock information and renders a responsive line chart of the stock's closing prices over time. It first checks if the data is valid, then extracts the company name and ticker, and formats the data for the chart by mapping each entry to an object with date and price. The component uses Recharts' LineChart and related components to display the chart with axes, tooltip, legend, and a styled header showing the company name and ticker. The chart is contained within a div with margin for spacing and adapts to the container's width. The formatDateString helper function has been changed to simply split the date string at 'T' and return the date part, instead of formatting it as 'Mon YYYY'.",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 12
                        }
                    ],
                    "summaryComponent": "React functional component, StockChart"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 12
                        }
                    ],
                    "summaryComponent": "accepts a data prop containing stock information"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 41
                        },
                        {
                            "code": "<LineChart",
                            "line": 42
                        },
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 50
                        }
                    ],
                    "summaryComponent": "renders a responsive line chart of the stock's closing prices over time"
                },
                {
                    "codeSegments": [
                        {
                            "code": "if (!data || !data.data || !data.data.length) return null;",
                            "line": 13
                        }
                    ],
                    "summaryComponent": "checks if the data is valid"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const company = data.name;",
                            "line": 15
                        },
                        {
                            "code": "const ticker = data.ticker;",
                            "line": 16
                        }
                    ],
                    "summaryComponent": "extracts the company name and ticker"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const chartData = data.data.map((item) => ({",
                            "line": 31
                        },
                        {
                            "code": "date: item.date,",
                            "line": 32
                        },
                        {
                            "code": "price: item.close,",
                            "line": 33
                        }
                    ],
                    "summaryComponent": "formats the data for the chart by mapping each entry to an object with date and price"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<LineChart",
                            "line": 42
                        },
                        {
                            "code": "<XAxis dataKey=\"date\" />",
                            "line": 46
                        },
                        {
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                            "line": 47
                        },
                        {
                            "code": "<Tooltip />",
                            "line": 48
                        },
                        {
                            "code": "<Legend />",
                            "line": 49
                        }
                    ],
                    "summaryComponent": "uses Recharts' LineChart and related components to display the chart with axes, tooltip, legend"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<h3>",
                            "line": 38
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 39
                        }
                    ],
                    "summaryComponent": "styled header showing the company name and ticker"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<div style={{ marginTop: \"2rem\" }}>",
                            "line": 37
                        }
                    ],
                    "summaryComponent": "chart is contained within a div with margin for spacing"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 41
                        }
                    ],
                    "summaryComponent": "adapts to the container's width"
                }
            ]
        },
        "timestamp": "2025-08-19 22:21:25.000",
        "event": "map_summary_code",
        "id": "PtWJUyDhVZa6aljzWTqi"
    },
    {
        "source": "backend",
        "data": {
            "code": "12: const StockChart = ({ data }) => {\n13:   if (!data || !data.data || !data.data.length) return null;\n14: \n15:   const company = data.name;\n16:   const ticker = data.ticker;\n17: \n18:   const formatDateString = (date) => {\n19:     // Formats date strings as \"Jan Feb Mar Apr Jun Jul Aug Sep Oct Nov Dec Jan Feb Mar May Jun Jul Aug\"\n20:     const months = [\n21:       \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n22:       \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"\n23:     ];\n24:     const d = new Date(date);\n25:     const month = months[d.getMonth()];\n26:     const year = d.getFullYear();\n27:     return `${month} ${year}`;\n28:   };\n29: \n30:   // Combine labels and values into an array of objects for Recharts\n31:   const chartData = data.data.map((item) => ({\n32:     date: item.date,\n33:     price: item.close,\n34:   }));\n35: \n36:   return (\n37:     <div style={{ marginTop: \"2rem\" }}>\n38:       <h3>\n39:         {company} ({ticker})\n40:       </h3>\n41:       <ResponsiveContainer width=\"100%\" height={300}>\n42:         <LineChart\n43:           data={chartData}\n44:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n45:         >\n46:           <XAxis dataKey=\"date\" />\n47:           <YAxis domain={[\"auto\", \"auto\"]} />\n48:           <Tooltip />\n49:           <Legend />\n50:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n51:         </LineChart>\n52:       </ResponsiveContainer>\n53:     </div>\n54:   );\n55: };",
            "summary": "The StockChart component takes in stock data and renders a line chart of closing prices over time. It checks for valid data, extracts relevant fields, and uses Recharts components to display the chart. The chart includes axes, a tooltip, a legend, and a title with the company name and ticker. The formatDateString helper now just splits the date string at 'T' and returns the date part, instead of formatting it as 'Mon YYYY'.",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 12
                        }
                    ],
                    "summaryComponent": "The StockChart component"
                },
                {
                    "codeSegments": [
                        {
                            "code": "({ data })",
                            "line": 12
                        }
                    ],
                    "summaryComponent": "takes in stock data"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<LineChart",
                            "line": 42
                        },
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 50
                        }
                    ],
                    "summaryComponent": "renders a line chart of closing prices over time"
                },
                {
                    "codeSegments": [
                        {
                            "code": "if (!data || !data.data || !data.data.length) return null;",
                            "line": 13
                        }
                    ],
                    "summaryComponent": "checks for valid data"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const company = data.name;",
                            "line": 15
                        },
                        {
                            "code": "const ticker = data.ticker;",
                            "line": 16
                        }
                    ],
                    "summaryComponent": "extracts relevant fields"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 41
                        },
                        {
                            "code": "<LineChart",
                            "line": 42
                        },
                        {
                            "code": "<XAxis dataKey=\"date\" />",
                            "line": 46
                        },
                        {
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                            "line": 47
                        },
                        {
                            "code": "<Tooltip />",
                            "line": 48
                        },
                        {
                            "code": "<Legend />",
                            "line": 49
                        },
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 50
                        }
                    ],
                    "summaryComponent": "uses Recharts components to display the chart"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<XAxis dataKey=\"date\" />",
                            "line": 46
                        },
                        {
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                            "line": 47
                        }
                    ],
                    "summaryComponent": "The chart includes axes"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<Tooltip />",
                            "line": 48
                        }
                    ],
                    "summaryComponent": "a tooltip"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<Legend />",
                            "line": 49
                        }
                    ],
                    "summaryComponent": "a legend"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<h3>",
                            "line": 38
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 39
                        }
                    ],
                    "summaryComponent": "a title with the company name and ticker"
                }
            ]
        },
        "timestamp": "2025-08-19 22:21:25.000",
        "event": "map_summary_code",
        "id": "nkjF2JADPgdAxwzsdMh2"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:21:35.000",
        "event": "mapping_unhover",
        "id": "FtoncCeGnKcuVfpkPbfO"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 9,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:21:35.000",
        "event": "mapping_hover",
        "id": "zDyjmacyASAgF8rhXlOi"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 4,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:02.000",
        "event": "mapping_hover",
        "id": "4BhADe0jMAcmgClZNpDH"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:03.000",
        "event": "mapping_unhover",
        "id": "0NG9B9z5Ydk4l6yh3c4w"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 7,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:03.000",
        "event": "mapping_hover",
        "id": "QNupDMSpEdlc6Ofh3ioR"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:03.000",
        "event": "mapping_unhover",
        "id": "fs9uLSLFC7lZmsYZZxh6"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 5,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:03.000",
        "event": "mapping_hover",
        "id": "iPMXmKB0YouQVq4HoFmW"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:03.000",
        "event": "mapping_unhover",
        "id": "jGzNJGpEjyTtNHZxytBC"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:03.000",
        "event": "mapping_unhover",
        "id": "tM7qSHWV1KVbwP6j1cI9"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 6,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:03.000",
        "event": "mapping_hover",
        "id": "wdnU5Dqto5QLqJlm74Zd"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:04.000",
        "event": "mapping_unhover",
        "id": "2bVZq1hgi02MTYj5P081"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:04.000",
        "event": "mapping_unhover",
        "id": "5YnRVbzpQGogmLu2iLBD"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 8,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:04.000",
        "event": "mapping_hover",
        "id": "BG1QOjSIiYFNYFMSfat4"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 7,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:04.000",
        "event": "mapping_hover",
        "id": "F90rTQ4xWnq7I43bXazX"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 9,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:04.000",
        "event": "mapping_hover",
        "id": "LJJr2Sg4CaRPUQDzTwPd"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 6,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:04.000",
        "event": "mapping_hover",
        "id": "PNZCwxuoe9W8GnPO1Slw"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:04.000",
        "event": "mapping_unhover",
        "id": "PlS9mB1LqDbCEGmYMZhM"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 9,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:04.000",
        "event": "mapping_hover",
        "id": "hCY8Zw6EcViR9DjbezzD"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:04.000",
        "event": "mapping_unhover",
        "id": "tMUGqFZSwtLgZeBAZCNz"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:06.000",
        "event": "mapping_unhover",
        "id": "L3DWom8i7FyFcdKb9VjX"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:06.000",
        "event": "mapping_unhover",
        "id": "dfv0oArg14P2ere4UbZ6"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 8,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:06.000",
        "event": "mapping_hover",
        "id": "xydFgrBSAF4i8pS66ty9"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 9,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:13.000",
        "event": "mapping_hover",
        "id": "KX829PIWbrgsbJEWi0uG"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:13.000",
        "event": "mapping_unhover",
        "id": "Nklbguv8IvLcGPKVEgFs"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 8,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:13.000",
        "event": "mapping_hover",
        "id": "zEylWCdIH2LeEYgvNSb5"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:14.000",
        "event": "mapping_unhover",
        "id": "5askmSdxE9XVq0kYSQ10"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:14.000",
        "event": "mapping_unhover",
        "id": "B4umvsFqKSqYHWrSkiNQ"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:14.000",
        "event": "mapping_unhover",
        "id": "BdICR8cP4pAKWPBvCBGc"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 7,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:14.000",
        "event": "mapping_hover",
        "id": "b173hCvt17EeMPXcp6LB"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 5,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:14.000",
        "event": "mapping_hover",
        "id": "dEwWgl6gJIyryBnCd1Qt"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 6,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:14.000",
        "event": "mapping_hover",
        "id": "zULS93RX4mdjisK3gGEa"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:15.000",
        "event": "mapping_unhover",
        "id": "R6Wz1lRnjp9N9DdQqlnT"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 6,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:15.000",
        "event": "mapping_hover",
        "id": "SCqkMyKlH2jMVrgJuTDS"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 8,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:21.000",
        "event": "mapping_hover",
        "id": "4lh9FczaRwXGUqQ7zEKU"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:21.000",
        "event": "mapping_unhover",
        "id": "angWabiuP0IpQHkoWrNa"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:21.000",
        "event": "mapping_unhover",
        "id": "ed9mmNzHxYmB6cIlN7Gn"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 7,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:21.000",
        "event": "mapping_hover",
        "id": "f8i9pBTgtjkz42qHh0Fc"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 7,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:22.000",
        "event": "mapping_hover",
        "id": "0ZoDQFOlgHqqdiiAUvnv"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:22.000",
        "event": "mapping_unhover",
        "id": "7pxiBfdPLXDVxP4nyJMV"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 6,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:25.000",
        "event": "mapping_hover",
        "id": "394s85Fed1hYEoHhnqJU"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:25.000",
        "event": "mapping_unhover",
        "id": "VCWeqeuLKQ8pvYOn3Hvh"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:25.000",
        "event": "mapping_unhover",
        "id": "ZDlUvyfdYr3iccEMwHt5"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:25.000",
        "event": "mapping_unhover",
        "id": "kSeR72zU5RjH1SeTKtaz"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 5,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:25.000",
        "event": "mapping_hover",
        "id": "lng6LqScqraRXH2bBvpD"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:25.000",
        "event": "mapping_unhover",
        "id": "mCLKVQm1faLNqYrKF62P"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 3,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:25.000",
        "event": "mapping_hover",
        "id": "sM3LAre7GCes8wlyq93t"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:26.000",
        "event": "mapping_unhover",
        "id": "3S7LUrmabkZ7trRLjRMY"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 0,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:26.000",
        "event": "mapping_hover",
        "id": "MUnsRnMbDUw1HadabnXe"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 2,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:26.000",
        "event": "mapping_hover",
        "id": "OxduKSFgKi4Ti7jY2ohj"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 6,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:26.000",
        "event": "mapping_hover",
        "id": "S54aSLFbgc5BVby89IFc"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:26.000",
        "event": "mapping_unhover",
        "id": "civ3sKrxBkingimCtCy4"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:26.000",
        "event": "mapping_unhover",
        "id": "h6izHLfr0IYIT5FeJ5nM"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 8,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:26.000",
        "event": "mapping_hover",
        "id": "hrxBM0VhsZj29yF1JpKR"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 4,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:26.000",
        "event": "mapping_hover",
        "id": "njpHYLq2h0smUyemT45y"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:26.000",
        "event": "mapping_unhover",
        "id": "vPmeliBELaGU20ajMooC"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 9,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:27.000",
        "event": "mapping_hover",
        "id": "iLJtjUirxLwBjCd7b2xn"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:27.000",
        "event": "mapping_unhover",
        "id": "y2h1h8WqPP1jSDLF6dlh"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:27.000",
        "event": "mapping_unhover",
        "id": "yVyWAWjyAf9JY2osuFKh"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 0,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:28.000",
        "event": "mapping_hover",
        "id": "DNur4fggK3mL3dpvOnYS"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 3,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:28.000",
        "event": "mapping_hover",
        "id": "gb0hjoJ3zk4MeGSgrIca"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:28.000",
        "event": "mapping_unhover",
        "id": "hOqq9Y3fFJSPgguFTGXx"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:28.000",
        "event": "mapping_unhover",
        "id": "jVDkGmpoMjGdcBVFJzlH"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 0,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:29.000",
        "event": "mapping_hover",
        "id": "Aqa7D9r90ddH6W9k104Y"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:29.000",
        "event": "mapping_unhover",
        "id": "Ni8YklZjEhams3Rdfk6S"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 3,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:29.000",
        "event": "mapping_hover",
        "id": "TSuvAa27r2NJTy9va4qU"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:29.000",
        "event": "mapping_unhover",
        "id": "yOgggn0BxN9jKSm8BHr5"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:30.000",
        "event": "mapping_unhover",
        "id": "5jEtEBFehY2AntgW2Lb3"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:30.000",
        "event": "mapping_unhover",
        "id": "8Dcn3phLE4crPW30tisT"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 6,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:30.000",
        "event": "mapping_hover",
        "id": "8qIQu2ub3dOTtsb94pCQ"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 8,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:30.000",
        "event": "mapping_hover",
        "id": "9prRPUodgBLQ31IAxtsf"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:30.000",
        "event": "mapping_unhover",
        "id": "JMcenxOvuG9tnEvyhMhF"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:30.000",
        "event": "mapping_unhover",
        "id": "Niemtau0vhyyDDSVrrej"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:30.000",
        "event": "mapping_unhover",
        "id": "OR1njpa6VVRSOAXOekNI"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 5,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:30.000",
        "event": "mapping_hover",
        "id": "P9miuJ3XF7s8S36cM8Bs"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 5,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:30.000",
        "event": "mapping_hover",
        "id": "Q6h4ZDGJGePSAeSDolQC"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:30.000",
        "event": "mapping_unhover",
        "id": "RmCB4eUGe22NvJvvs3Zh"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 5,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:30.000",
        "event": "mapping_hover",
        "id": "T9yuVmbvGT5a4fgbk5Cw"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:30.000",
        "event": "mapping_unhover",
        "id": "W2RoTdCrx0zdQXiL0qBN"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:30.000",
        "event": "mapping_unhover",
        "id": "XDOb03d8zPfOHkIBIWu2"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:30.000",
        "event": "mapping_unhover",
        "id": "bMEf0Mju5a2PvIXiMoXI"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 6,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:30.000",
        "event": "mapping_hover",
        "id": "caCCmVWY6CzbB1saN5m9"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:30.000",
        "event": "mapping_unhover",
        "id": "eUX3dvLDTf67moo4Zt9H"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:30.000",
        "event": "mapping_unhover",
        "id": "fTdIjalNMGsr4Ta5dBST"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 9,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:30.000",
        "event": "mapping_hover",
        "id": "iXNcs6B0GfuLRzpP7oC2"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 5,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:30.000",
        "event": "mapping_hover",
        "id": "j1CW6dlqzM3ES9uWLt4x"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:30.000",
        "event": "mapping_unhover",
        "id": "nCpxKIOxOlW5tQo4HZxo"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 4,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:30.000",
        "event": "mapping_hover",
        "id": "nSbPcDY73oVcQ73bdCkU"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 8,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:30.000",
        "event": "mapping_hover",
        "id": "pyYuefD1NP7VwQXfghLk"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:30.000",
        "event": "mapping_unhover",
        "id": "qxsNDlPbrYxmgjfMrHcy"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 9,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:30.000",
        "event": "mapping_hover",
        "id": "s0fuuj7li2YYCFwfR2CQ"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 3,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:30.000",
        "event": "mapping_hover",
        "id": "sXypnDIBTtta3vno0T0I"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 6,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:30.000",
        "event": "mapping_hover",
        "id": "t7knDcw70zvh7S1vijlp"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 6,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:30.000",
        "event": "mapping_hover",
        "id": "tEM7Fb7jY5rVU0eQIZAh"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:30.000",
        "event": "mapping_unhover",
        "id": "uJxikDqGdGpmUW7JT9Wl"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:30.000",
        "event": "mapping_unhover",
        "id": "vfAvQnMplonEUNP3N6Qd"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 6,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:30.000",
        "event": "mapping_hover",
        "id": "zoFls5S7DizGo2ORnJAR"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 5,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:31.000",
        "event": "mapping_hover",
        "id": "3M74FtOauh16bpbIfjsP"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:31.000",
        "event": "mapping_unhover",
        "id": "4mIx1vkqINMCwiOY8ih2"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:31.000",
        "event": "mapping_unhover",
        "id": "Hznfer7288axyACPJIQA"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 3,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:31.000",
        "event": "mapping_hover",
        "id": "LAmtF1FAJnnASu67a7bR"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 2,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:31.000",
        "event": "mapping_hover",
        "id": "SybIOOhbk6GTOgNRXqNS"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:31.000",
        "event": "mapping_unhover",
        "id": "uVsQtxhcKGakxs3stBZm"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 5,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:32.000",
        "event": "mapping_hover",
        "id": "7lkov4dvgJ8S6yZCq9eW"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 4,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:32.000",
        "event": "mapping_hover",
        "id": "8Yvz7PczNst4FaNtpsb6"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:32.000",
        "event": "mapping_unhover",
        "id": "CNgzlaOTI1OLgOIKD4tA"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 6,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:32.000",
        "event": "mapping_hover",
        "id": "Kcwx5D4pSrYyPF7KfBfM"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 6,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:32.000",
        "event": "mapping_hover",
        "id": "R1DcSEvL793L19dBVhBM"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:32.000",
        "event": "mapping_unhover",
        "id": "hqfGEgCSfhBqwQ7gXwtE"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 7,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:32.000",
        "event": "mapping_hover",
        "id": "nAW1OSUw1DdO47fCH5pf"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:32.000",
        "event": "mapping_unhover",
        "id": "npRhatnq1KhgPOQaFivS"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 5,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:32.000",
        "event": "mapping_hover",
        "id": "q6rr5E6lui030NXXWWBs"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:32.000",
        "event": "mapping_unhover",
        "id": "yGpZN5q7csJmurhkxiO0"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:32.000",
        "event": "mapping_unhover",
        "id": "ysCltLl7PwynAZwD9uNv"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 5,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:33.000",
        "event": "mapping_hover",
        "id": "6Oix8fkDCxJmromw87NG"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:33.000",
        "event": "mapping_unhover",
        "id": "F0wP4jelriiLOlnMBMln"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:33.000",
        "event": "mapping_unhover",
        "id": "jElPAgMqGMAmasZmqygn"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 6,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:33.000",
        "event": "mapping_hover",
        "id": "joIt41INhvhxdhYYpRvl"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:33.000",
        "event": "mapping_unhover",
        "id": "k4gx90obNiSU4uRF1Ubb"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 7,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:33.000",
        "event": "mapping_hover",
        "id": "liWugJDlDRQQMswsHqG3"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:33.000",
        "event": "mapping_unhover",
        "id": "mEBPcB6ttH3FdprN70IF"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 8,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:33.000",
        "event": "mapping_hover",
        "id": "nNNKobIQORL1I622GS6d"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 9,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:34.000",
        "event": "mapping_hover",
        "id": "NW7zViIsEsPgfX5PVTib"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:34.000",
        "event": "mapping_unhover",
        "id": "gBLDr7rq1mmeSNo62iXk"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:35.000",
        "event": "mapping_unhover",
        "id": "8F29MHDirHISxrigo7Aa"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 9,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:36.000",
        "event": "mapping_hover",
        "id": "V7bMeM8F5JEyPk5XgqbU"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:22:37.000",
        "event": "mapping_unhover",
        "id": "bvDua2qVMFOiCjbzrSU9"
    },
    {
        "source": "frontend",
        "data": {},
        "timestamp": "2025-08-19 22:22:45.000",
        "event": "click_summarize_code",
        "id": "Wge2mwZplpk4JU5n2qHS"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 0,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:16.000",
        "event": "mapping_hover",
        "id": "6e7AFTbazLHlOOUsKY9D"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:16.000",
        "event": "mapping_unhover",
        "id": "Guun7ruFOpwHrFc9ivIL"
    },
    {
        "source": "frontend",
        "data": {},
        "timestamp": "2025-08-19 22:23:18.000",
        "event": "click_summarize_code",
        "id": "S0lvEPcX9u6eOGFdPi8d"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 8,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:19.000",
        "event": "mapping_hover",
        "id": "0eaXatTjMkiHYVdpz2CU"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:19.000",
        "event": "mapping_unhover",
        "id": "1TzwupIEHBW9y0WuC5e2"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 0,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:19.000",
        "event": "mapping_hover",
        "id": "1mPzIx1n7OjBe70f6p8s"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:19.000",
        "event": "mapping_unhover",
        "id": "JXFxpe9aLYXhs6MxdCIU"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 5,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:19.000",
        "event": "mapping_hover",
        "id": "SlFKDlpQ6jMf82i4CV1A"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:19.000",
        "event": "mapping_unhover",
        "id": "X0cdmMK0gZfAGRGCDSWP"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 7,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:19.000",
        "event": "mapping_hover",
        "id": "YRwz6uQlUyjCxPCFdmlI"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 2,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:19.000",
        "event": "mapping_hover",
        "id": "oBdKSMzk278rpGrpD43a"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:19.000",
        "event": "mapping_unhover",
        "id": "rtfeDTzWriw1UO8jezhm"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 9,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:19.000",
        "event": "mapping_hover",
        "id": "vZZYVIzk5n1Ep1x0vUDM"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:19.000",
        "event": "mapping_unhover",
        "id": "ywfgsDGBkTHDqYh8cv59"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 3,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:20.000",
        "event": "mapping_hover",
        "id": "5HtHGPkYyMVFK6xAtIpm"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:20.000",
        "event": "mapping_unhover",
        "id": "D4C5qDH3npWvFQGSA81H"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:20.000",
        "event": "mapping_unhover",
        "id": "GZmFPDAPR4cKOmh5raJf"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 1,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:20.000",
        "event": "mapping_hover",
        "id": "HmenFYKIlyiCAbuOWAX5"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 0,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:20.000",
        "event": "mapping_hover",
        "id": "IEactxVJyx8Ix2AkHbJS"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:20.000",
        "event": "mapping_unhover",
        "id": "IlOT5wMKPzJ6CU1BTv9C"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:20.000",
        "event": "mapping_unhover",
        "id": "OgYUfed5Y8uOpbmhBgeR"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 8,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:20.000",
        "event": "mapping_hover",
        "id": "Pw46N5wApR5jeK2hhZfr"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:20.000",
        "event": "mapping_unhover",
        "id": "SDcEbF2DlICgRoKS0wQ7"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:20.000",
        "event": "mapping_unhover",
        "id": "a8RoPUgmYaXqzOjw1yXV"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 1,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:20.000",
        "event": "mapping_hover",
        "id": "cujqiwTGWyJXqSeH3BQw"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 2,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:20.000",
        "event": "mapping_hover",
        "id": "dt77LDFaSQeJoccdo745"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:20.000",
        "event": "mapping_unhover",
        "id": "epf2Ig0Jzns12ICAGN9h"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 7,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:20.000",
        "event": "mapping_hover",
        "id": "gUuQbDS2qvmOgX2wiCwh"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:20.000",
        "event": "mapping_unhover",
        "id": "hdb3iSYIngUkRj3tsyAi"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:20.000",
        "event": "mapping_unhover",
        "id": "jtBeY258ym9lppaRqKlu"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:20.000",
        "event": "mapping_unhover",
        "id": "p1PuVckVAhHpzWoNYGUx"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 6,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:20.000",
        "event": "mapping_hover",
        "id": "pJlkf5uHOmWdV9GGppwz"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 4,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:20.000",
        "event": "mapping_hover",
        "id": "qwzGomjI95yhcCzC4Qt7"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 5,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:20.000",
        "event": "mapping_hover",
        "id": "uN9t4Ez90ZKDKTTS7SZq"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:20.000",
        "event": "mapping_unhover",
        "id": "y7861aEn8ZrN5IQJeIAS"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:22.000",
        "event": "mapping_unhover",
        "id": "6vQCNhoeDJIshQDIiPke"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:22.000",
        "event": "mapping_unhover",
        "id": "8RqYAZX3mQtsz9jrOdKg"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 6,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:22.000",
        "event": "mapping_hover",
        "id": "8m6ieMrFZZqF1PqcUBRY"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:22.000",
        "event": "mapping_unhover",
        "id": "B03JHxESHBxGOKZ0BNeR"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 6,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:22.000",
        "event": "mapping_hover",
        "id": "EUCyV6CqY0MpLqFSK8Gy"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 7,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:22.000",
        "event": "mapping_hover",
        "id": "F6d9CtJqSQRYw5my3XvT"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:22.000",
        "event": "mapping_unhover",
        "id": "JDuJs1trqcbTWtKvR0lt"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:22.000",
        "event": "mapping_unhover",
        "id": "Kfq9bzsBYJxEwgsFoBuJ"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 2,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:22.000",
        "event": "mapping_hover",
        "id": "SEyYJ8ojd0BPLgSW2U7x"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:22.000",
        "event": "mapping_unhover",
        "id": "SYTEewoTQTHCS1DuH22q"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 4,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:22.000",
        "event": "mapping_hover",
        "id": "Uhtkm6BxiBKO4HPjldvo"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 1,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:22.000",
        "event": "mapping_hover",
        "id": "aKKIXt7SzAzpYYrdWwwY"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 1,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:22.000",
        "event": "mapping_hover",
        "id": "cUXWRTCha9LVCRby0lhc"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 5,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:22.000",
        "event": "mapping_hover",
        "id": "d9lWrhOFacf7v9i3drDZ"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 6,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:22.000",
        "event": "mapping_hover",
        "id": "dcqaiPeCyRl1U7pnjvTe"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 5,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:22.000",
        "event": "mapping_hover",
        "id": "dvwk5MGz1IIGVSxL59CJ"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 1,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:22.000",
        "event": "mapping_hover",
        "id": "dyDem7ueLHRin24rpood"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:22.000",
        "event": "mapping_unhover",
        "id": "eyfZpli0lGHQ5HqyD60G"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:22.000",
        "event": "mapping_unhover",
        "id": "kSE51EZIPxtzQxeuQhXj"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:22.000",
        "event": "mapping_unhover",
        "id": "nJOSGIzmwj2oIoT8vPrD"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 0,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:22.000",
        "event": "mapping_hover",
        "id": "nZslWpGd9dkzQuj7tT4M"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:22.000",
        "event": "mapping_unhover",
        "id": "oN0WvJouZnej7fKh0gtX"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 4,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:22.000",
        "event": "mapping_hover",
        "id": "oqb2fQRP9QEwlYMtg0tV"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:22.000",
        "event": "mapping_unhover",
        "id": "otFjyJH41fQx6EFBKzPg"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:22.000",
        "event": "mapping_unhover",
        "id": "qTeU6MM3yvRDL37411cC"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 3,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:22.000",
        "event": "mapping_hover",
        "id": "uTsWdxMSF2pc2PpIvfnW"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:22.000",
        "event": "mapping_unhover",
        "id": "y9WWnUAfjsqbGoll5qjZ"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 3,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:23.000",
        "event": "mapping_hover",
        "id": "CB2dvxVEMqToS9OsX04D"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:23.000",
        "event": "mapping_unhover",
        "id": "VXaJmCilevUTDgSaSU4R"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:23.000",
        "event": "mapping_unhover",
        "id": "Y78NL479QD2PzKAloYCl"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 1,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:23.000",
        "event": "mapping_hover",
        "id": "bQGziAzQk5IBfU2whqG5"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 0,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:23.000",
        "event": "mapping_hover",
        "id": "fkfsiCjKFcAnj0IdIhzp"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:23.000",
        "event": "mapping_unhover",
        "id": "lkDEKljDGRUbXjWfz3pF"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 0,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:23.000",
        "event": "mapping_hover",
        "id": "uVKFIZgVC6YGCVyut9eL"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:23.000",
        "event": "mapping_unhover",
        "id": "xvoqzmj4Y6gXbzCcb36o"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:23.000",
        "event": "mapping_unhover",
        "id": "yHvCiLE2Ks7FeKTVOMWO"
    },
    {
        "source": "backend",
        "data": {
            "selected_code": "const StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    // Formats date strings as \"Jan Feb Mar Apr Jun Jul Aug Sep Oct Nov Dec Jan Feb Mar May Jun Jul Aug\"\n    const months = [\n      \"Jan\",\n      \"Feb\",\n      \"Mar\",\n      \"Apr\",\n      \"May\",\n      \"Jun\",\n      \"Jul\",\n      \"Aug\",\n      \"Sep\",\n      \"Oct\",\n      \"Nov\",\n      \"Dec\",\n    ];\n    const d = new Date(date);\n    const month = months[d.getMonth()];\n    const year = d.getFullYear();\n    return `${month} ${year}`;\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};",
            "summary": {
                "medium_unstructured": "The StockChart component takes stock data as a prop and renders a line chart of closing prices using the Recharts library. It displays the company name and ticker above the chart and formats the data for charting. If no valid data is provided, it renders nothing.",
                "title": "StockChart React Component Summary",
                "low_unstructured": "This code defines a React component that displays a stock price line chart using Recharts.",
                "low_structured": "• React component for stock chart\n• Uses Recharts for visualization\n• Displays company name and ticker",
                "medium_structured": "• Defines a React functional component for displaying stock data\n• Checks for valid data before rendering\n• Formats chart data to show closing prices over time\n• Displays company name and ticker above a Recharts line chart\n• Uses ResponsiveContainer and various Recharts elements for layout",
                "high_unstructured": "This code implements a React functional component called StockChart, which visualizes stock closing prices over time using the Recharts library. It first checks if the provided data prop is valid and non-empty; if not, it returns null. The component extracts the company name and ticker, formats the data for the chart, and defines a helper function for date formatting (though this function is not directly used in rendering). The chart is rendered inside a ResponsiveContainer, featuring axes, tooltips, a legend, and a monotone line for price, with the company name and ticker displayed as a heading above the chart.",
                "high_structured": "• Implements a React functional component named StockChart\n• Handles data validation:\n  ◦ Returns null if data is missing or empty\n• Extracts and displays metadata:\n  ◦ Shows company name and ticker in a heading\n• Prepares chart data:\n  ◦ Maps input data to objects with date and closing price\n  ◦ Includes a helper function for formatting dates (not used in rendering)\n• Renders a responsive line chart using Recharts:\n  ◦ Uses LineChart, Line, XAxis, YAxis, Tooltip, and Legend\n  ◦ Displays price over time with a monotone line and no dots\n  ◦ Sets chart margins and ensures responsive sizing\n• Wraps the chart in a styled div with top margin"
            }
        },
        "timestamp": "2025-08-19 22:23:25.000",
        "event": "summarize_selected_code",
        "id": "HbiRyTghSVMQIgT5z2dz"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 5,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:25.000",
        "event": "mapping_hover",
        "id": "JiyzF0wzh2Y8xLAG5aKP"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 4,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:26.000",
        "event": "mapping_hover",
        "id": "BJMtYEGR93747VQ3iMGg"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:26.000",
        "event": "mapping_unhover",
        "id": "JY8U6rMZnD2PFm3Ml6Bw"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:27.000",
        "event": "mapping_unhover",
        "id": "Xt5ZYal8tvcli6SblWB3"
    },
    {
        "source": "backend",
        "data": {
            "code": "13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     // Formats date strings as \"Jan Feb Mar Apr Jun Jul Aug Sep Oct Nov Dec Jan Feb Mar May Jun Jul Aug\"\n21:     const months = [\n22:       \"Jan\",\n23:       \"Feb\",\n24:       \"Mar\",\n25:       \"Apr\",\n26:       \"May\",\n27:       \"Jun\",\n28:       \"Jul\",\n29:       \"Aug\",\n30:       \"Sep\",\n31:       \"Oct\",\n32:       \"Nov\",\n33:       \"Dec\",\n34:     ];\n35:     const d = new Date(date);\n36:     const month = months[d.getMonth()];\n37:     const year = d.getFullYear();\n38:     return `${month} ${year}`;\n39:   };\n40: \n41:   // Combine labels and values into an array of objects for Recharts\n42:   const chartData = data.data.map((item) => ({\n43:     date: item.date,\n44:     price: item.close,\n45:   }));\n46: \n47:   return (\n48:     <div style={{ marginTop: \"2rem\" }}>\n49:       <h3>\n50:         {company} ({ticker})\n51:       </h3>\n52:       <ResponsiveContainer width=\"100%\" height={300}>\n53:         <LineChart\n54:           data={chartData}\n55:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n56:         >\n57:           <XAxis dataKey=\"date\" />\n58:           <YAxis domain={[\"auto\", \"auto\"]} />\n59:           <Tooltip />\n60:           <Legend />\n61:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n62:         </LineChart>\n63:       </ResponsiveContainer>\n64:     </div>\n65:   );\n66: };",
            "summary": "• React component for stock chart\n• Uses Recharts for visualization\n• Displays company name and ticker",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        }
                    ],
                    "summaryComponent": "React component for stock chart"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 52
                        },
                        {
                            "code": "<LineChart",
                            "line": 53
                        },
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 61
                        }
                    ],
                    "summaryComponent": "Uses Recharts for visualization"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<h3>",
                            "line": 49
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 50
                        }
                    ],
                    "summaryComponent": "Displays company name and ticker"
                }
            ]
        },
        "timestamp": "2025-08-19 22:23:27.000",
        "event": "map_summary_code",
        "id": "ji1Qb88err97HZ9pfQDD"
    },
    {
        "source": "backend",
        "data": {
            "code": "13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     // Formats date strings as \"Jan Feb Mar Apr Jun Jul Aug Sep Oct Nov Dec Jan Feb Mar May Jun Jul Aug\"\n21:     const months = [\n22:       \"Jan\",\n23:       \"Feb\",\n24:       \"Mar\",\n25:       \"Apr\",\n26:       \"May\",\n27:       \"Jun\",\n28:       \"Jul\",\n29:       \"Aug\",\n30:       \"Sep\",\n31:       \"Oct\",\n32:       \"Nov\",\n33:       \"Dec\",\n34:     ];\n35:     const d = new Date(date);\n36:     const month = months[d.getMonth()];\n37:     const year = d.getFullYear();\n38:     return `${month} ${year}`;\n39:   };\n40: \n41:   // Combine labels and values into an array of objects for Recharts\n42:   const chartData = data.data.map((item) => ({\n43:     date: item.date,\n44:     price: item.close,\n45:   }));\n46: \n47:   return (\n48:     <div style={{ marginTop: \"2rem\" }}>\n49:       <h3>\n50:         {company} ({ticker})\n51:       </h3>\n52:       <ResponsiveContainer width=\"100%\" height={300}>\n53:         <LineChart\n54:           data={chartData}\n55:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n56:         >\n57:           <XAxis dataKey=\"date\" />\n58:           <YAxis domain={[\"auto\", \"auto\"]} />\n59:           <Tooltip />\n60:           <Legend />\n61:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n62:         </LineChart>\n63:       </ResponsiveContainer>\n64:     </div>\n65:   );\n66: };",
            "summary": "• Defines a React functional component for displaying stock data\n• Checks for valid data before rendering\n• Formats chart data to show closing prices over time\n• Displays company name and ticker above a Recharts line chart\n• Uses ResponsiveContainer and various Recharts elements for layout",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        }
                    ],
                    "summaryComponent": "Defines a React functional component for displaying stock data"
                },
                {
                    "codeSegments": [
                        {
                            "code": "if (!data || !data.data || !data.data.length) return null;",
                            "line": 14
                        }
                    ],
                    "summaryComponent": "Checks for valid data before rendering"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const chartData = data.data.map((item) => ({",
                            "line": 42
                        },
                        {
                            "code": "date: item.date,",
                            "line": 43
                        },
                        {
                            "code": "price: item.close,",
                            "line": 44
                        }
                    ],
                    "summaryComponent": "Formats chart data to show closing prices over time"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<h3>",
                            "line": 49
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 50
                        }
                    ],
                    "summaryComponent": "Displays company name and ticker above a Recharts line chart"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 52
                        },
                        {
                            "code": "<LineChart",
                            "line": 53
                        },
                        {
                            "code": "<XAxis dataKey=\"date\" />",
                            "line": 57
                        },
                        {
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                            "line": 58
                        },
                        {
                            "code": "<Tooltip />",
                            "line": 59
                        },
                        {
                            "code": "<Legend />",
                            "line": 60
                        },
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 61
                        }
                    ],
                    "summaryComponent": "Uses ResponsiveContainer and various Recharts elements for layout"
                }
            ]
        },
        "timestamp": "2025-08-19 22:23:28.000",
        "event": "map_summary_code",
        "id": "KTKePugTIH2gKoc8UGxL"
    },
    {
        "source": "backend",
        "data": {
            "code": "13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     // Formats date strings as \"Jan Feb Mar Apr Jun Jul Aug Sep Oct Nov Dec Jan Feb Mar May Jun Jul Aug\"\n21:     const months = [\n22:       \"Jan\",\n23:       \"Feb\",\n24:       \"Mar\",\n25:       \"Apr\",\n26:       \"May\",\n27:       \"Jun\",\n28:       \"Jul\",\n29:       \"Aug\",\n30:       \"Sep\",\n31:       \"Oct\",\n32:       \"Nov\",\n33:       \"Dec\",\n34:     ];\n35:     const d = new Date(date);\n36:     const month = months[d.getMonth()];\n37:     const year = d.getFullYear();\n38:     return `${month} ${year}`;\n39:   };\n40: \n41:   // Combine labels and values into an array of objects for Recharts\n42:   const chartData = data.data.map((item) => ({\n43:     date: item.date,\n44:     price: item.close,\n45:   }));\n46: \n47:   return (\n48:     <div style={{ marginTop: \"2rem\" }}>\n49:       <h3>\n50:         {company} ({ticker})\n51:       </h3>\n52:       <ResponsiveContainer width=\"100%\" height={300}>\n53:         <LineChart\n54:           data={chartData}\n55:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n56:         >\n57:           <XAxis dataKey=\"date\" />\n58:           <YAxis domain={[\"auto\", \"auto\"]} />\n59:           <Tooltip />\n60:           <Legend />\n61:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n62:         </LineChart>\n63:       </ResponsiveContainer>\n64:     </div>\n65:   );\n66: };",
            "summary": "This code defines a React component that displays a stock price line chart using Recharts.",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        }
                    ],
                    "summaryComponent": "defines a React component"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<LineChart",
                            "line": 53
                        },
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 61
                        }
                    ],
                    "summaryComponent": "displays a stock price line chart"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 52
                        },
                        {
                            "code": "<LineChart",
                            "line": 53
                        },
                        {
                            "code": "<XAxis dataKey=\"date\" />",
                            "line": 57
                        },
                        {
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                            "line": 58
                        },
                        {
                            "code": "<Tooltip />",
                            "line": 59
                        },
                        {
                            "code": "<Legend />",
                            "line": 60
                        },
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 61
                        }
                    ],
                    "summaryComponent": "using Recharts"
                }
            ]
        },
        "timestamp": "2025-08-19 22:23:28.000",
        "event": "map_summary_code",
        "id": "V8F9NcLrqUtrtbj3uy5z"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:30.000",
        "event": "mapping_unhover",
        "id": "5kZIZdS7x1qJRZ00IKrh"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 8,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:30.000",
        "event": "mapping_hover",
        "id": "HuopqSX2BmIWFgKxB8Nq"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 7,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:30.000",
        "event": "mapping_hover",
        "id": "LhgQgUT6I0onjwsj1QGq"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 6,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:30.000",
        "event": "mapping_hover",
        "id": "OPnlNvOjmoXtLKC04616"
    },
    {
        "source": "backend",
        "data": {
            "code": "13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     // Formats date strings as \"Jan Feb Mar Apr Jun Jul Aug Sep Oct Nov Dec Jan Feb Mar May Jun Jul Aug\"\n21:     const months = [\n22:       \"Jan\",\n23:       \"Feb\",\n24:       \"Mar\",\n25:       \"Apr\",\n26:       \"May\",\n27:       \"Jun\",\n28:       \"Jul\",\n29:       \"Aug\",\n30:       \"Sep\",\n31:       \"Oct\",\n32:       \"Nov\",\n33:       \"Dec\",\n34:     ];\n35:     const d = new Date(date);\n36:     const month = months[d.getMonth()];\n37:     const year = d.getFullYear();\n38:     return `${month} ${year}`;\n39:   };\n40: \n41:   // Combine labels and values into an array of objects for Recharts\n42:   const chartData = data.data.map((item) => ({\n43:     date: item.date,\n44:     price: item.close,\n45:   }));\n46: \n47:   return (\n48:     <div style={{ marginTop: \"2rem\" }}>\n49:       <h3>\n50:         {company} ({ticker})\n51:       </h3>\n52:       <ResponsiveContainer width=\"100%\" height={300}>\n53:         <LineChart\n54:           data={chartData}\n55:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n56:         >\n57:           <XAxis dataKey=\"date\" />\n58:           <YAxis domain={[\"auto\", \"auto\"]} />\n59:           <Tooltip />\n60:           <Legend />\n61:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n62:         </LineChart>\n63:       </ResponsiveContainer>\n64:     </div>\n65:   );\n66: };",
            "summary": "The StockChart component takes stock data as a prop and renders a line chart of closing prices using the Recharts library. It displays the company name and ticker above the chart and formats the data for charting. If no valid data is provided, it renders nothing.",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        }
                    ],
                    "summaryComponent": "The StockChart component"
                },
                {
                    "codeSegments": [
                        {
                            "code": "({ data })",
                            "line": 13
                        }
                    ],
                    "summaryComponent": "takes stock data as a prop"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<LineChart",
                            "line": 53
                        },
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 61
                        }
                    ],
                    "summaryComponent": "renders a line chart of closing prices"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 52
                        },
                        {
                            "code": "<LineChart",
                            "line": 53
                        },
                        {
                            "code": "<XAxis dataKey=\"date\" />",
                            "line": 57
                        },
                        {
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                            "line": 58
                        },
                        {
                            "code": "<Tooltip />",
                            "line": 59
                        },
                        {
                            "code": "<Legend />",
                            "line": 60
                        },
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 61
                        }
                    ],
                    "summaryComponent": "using the Recharts library"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<h3>",
                            "line": 49
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 50
                        }
                    ],
                    "summaryComponent": "It displays the company name and ticker above the chart"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const chartData = data.data.map((item) => ({",
                            "line": 42
                        },
                        {
                            "code": "date: item.date,",
                            "line": 43
                        },
                        {
                            "code": "price: item.close,",
                            "line": 44
                        }
                    ],
                    "summaryComponent": "formats the data for charting"
                },
                {
                    "codeSegments": [
                        {
                            "code": "if (!data || !data.data || !data.data.length) return null;",
                            "line": 14
                        }
                    ],
                    "summaryComponent": "If no valid data is provided, it renders nothing"
                }
            ]
        },
        "timestamp": "2025-08-19 22:23:30.000",
        "event": "map_summary_code",
        "id": "WUGLxK1pljbzeUn2XtWc"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 5,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:30.000",
        "event": "mapping_hover",
        "id": "hxlMAFRfziH09X5jLUra"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:30.000",
        "event": "mapping_unhover",
        "id": "lEYWY0tszbPt7n8NuKUg"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:30.000",
        "event": "mapping_unhover",
        "id": "qvJJkRonhQEHfBxEyNeH"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:31.000",
        "event": "mapping_unhover",
        "id": "YlqTdeUJGTOJJNAto95s"
    },
    {
        "source": "backend",
        "data": {
            "code": "13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     // Formats date strings as \"Jan Feb Mar Apr Jun Jul Aug Sep Oct Nov Dec Jan Feb Mar May Jun Jul Aug\"\n21:     const months = [\n22:       \"Jan\",\n23:       \"Feb\",\n24:       \"Mar\",\n25:       \"Apr\",\n26:       \"May\",\n27:       \"Jun\",\n28:       \"Jul\",\n29:       \"Aug\",\n30:       \"Sep\",\n31:       \"Oct\",\n32:       \"Nov\",\n33:       \"Dec\",\n34:     ];\n35:     const d = new Date(date);\n36:     const month = months[d.getMonth()];\n37:     const year = d.getFullYear();\n38:     return `${month} ${year}`;\n39:   };\n40: \n41:   // Combine labels and values into an array of objects for Recharts\n42:   const chartData = data.data.map((item) => ({\n43:     date: item.date,\n44:     price: item.close,\n45:   }));\n46: \n47:   return (\n48:     <div style={{ marginTop: \"2rem\" }}>\n49:       <h3>\n50:         {company} ({ticker})\n51:       </h3>\n52:       <ResponsiveContainer width=\"100%\" height={300}>\n53:         <LineChart\n54:           data={chartData}\n55:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n56:         >\n57:           <XAxis dataKey=\"date\" />\n58:           <YAxis domain={[\"auto\", \"auto\"]} />\n59:           <Tooltip />\n60:           <Legend />\n61:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n62:         </LineChart>\n63:       </ResponsiveContainer>\n64:     </div>\n65:   );\n66: };",
            "summary": "This code implements a React functional component called StockChart, which visualizes stock closing prices over time using the Recharts library. It first checks if the provided data prop is valid and non-empty; if not, it returns null. The component extracts the company name and ticker, formats the data for the chart, and defines a helper function for date formatting (though this function is not directly used in rendering). The chart is rendered inside a ResponsiveContainer, featuring axes, tooltips, a legend, and a monotone line for price, with the company name and ticker displayed as a heading above the chart.",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        }
                    ],
                    "summaryComponent": "a React functional component called StockChart"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 52
                        },
                        {
                            "code": "<LineChart",
                            "line": 53
                        },
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 61
                        }
                    ],
                    "summaryComponent": "visualizes stock closing prices over time using the Recharts library"
                },
                {
                    "codeSegments": [
                        {
                            "code": "if (!data || !data.data || !data.data.length) return null;",
                            "line": 14
                        }
                    ],
                    "summaryComponent": "checks if the provided data prop is valid and non-empty; if not, it returns null"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const company = data.name;",
                            "line": 16
                        },
                        {
                            "code": "const ticker = data.ticker;",
                            "line": 17
                        }
                    ],
                    "summaryComponent": "extracts the company name and ticker"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const chartData = data.data.map((item) => ({",
                            "line": 42
                        },
                        {
                            "code": "  date: item.date,",
                            "line": 43
                        },
                        {
                            "code": "  price: item.close,",
                            "line": 44
                        },
                        {
                            "code": "}));",
                            "line": 45
                        }
                    ],
                    "summaryComponent": "formats the data for the chart"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const formatDateString = (date) => {",
                            "line": 19
                        },
                        {
                            "code": "// Formats date strings as \"Jan Feb Mar Apr Jun Jul Aug Sep Oct Nov Dec Jan Feb Mar May Jun Jul Aug\"",
                            "line": 20
                        },
                        {
                            "code": "const months = [",
                            "line": 21
                        },
                        {
                            "code": "const d = new Date(date);",
                            "line": 35
                        },
                        {
                            "code": "const month = months[d.getMonth()];",
                            "line": 36
                        },
                        {
                            "code": "const year = d.getFullYear();",
                            "line": 37
                        },
                        {
                            "code": "return `${month} ${year}`;",
                            "line": 38
                        },
                        {
                            "code": "};",
                            "line": 39
                        }
                    ],
                    "summaryComponent": "defines a helper function for date formatting (though this function is not directly used in rendering)"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 52
                        }
                    ],
                    "summaryComponent": "The chart is rendered inside a ResponsiveContainer"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<XAxis dataKey=\"date\" />",
                            "line": 57
                        },
                        {
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                            "line": 58
                        },
                        {
                            "code": "<Tooltip />",
                            "line": 59
                        },
                        {
                            "code": "<Legend />",
                            "line": 60
                        },
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 61
                        }
                    ],
                    "summaryComponent": "featuring axes, tooltips, a legend, and a monotone line for price"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<h3>",
                            "line": 49
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 50
                        },
                        {
                            "code": "</h3>",
                            "line": 51
                        }
                    ],
                    "summaryComponent": "with the company name and ticker displayed as a heading above the chart"
                }
            ]
        },
        "timestamp": "2025-08-19 22:23:31.000",
        "event": "map_summary_code",
        "id": "ftd4wFZxg8Ky6bHp4FFw"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:31.000",
        "event": "mapping_unhover",
        "id": "uzwusPqdKqlfCJ72svXU"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 9,
            "section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:31.000",
        "event": "mapping_hover",
        "id": "yo1hRDVWZ8P3Zvvk557b"
    },
    {
        "source": "backend",
        "data": {
            "code": "13: const StockChart = ({ data }) => {\n14:   if (!data || !data.data || !data.data.length) return null;\n15: \n16:   const company = data.name;\n17:   const ticker = data.ticker;\n18: \n19:   const formatDateString = (date) => {\n20:     // Formats date strings as \"Jan Feb Mar Apr Jun Jul Aug Sep Oct Nov Dec Jan Feb Mar May Jun Jul Aug\"\n21:     const months = [\n22:       \"Jan\",\n23:       \"Feb\",\n24:       \"Mar\",\n25:       \"Apr\",\n26:       \"May\",\n27:       \"Jun\",\n28:       \"Jul\",\n29:       \"Aug\",\n30:       \"Sep\",\n31:       \"Oct\",\n32:       \"Nov\",\n33:       \"Dec\",\n34:     ];\n35:     const d = new Date(date);\n36:     const month = months[d.getMonth()];\n37:     const year = d.getFullYear();\n38:     return `${month} ${year}`;\n39:   };\n40: \n41:   // Combine labels and values into an array of objects for Recharts\n42:   const chartData = data.data.map((item) => ({\n43:     date: item.date,\n44:     price: item.close,\n45:   }));\n46: \n47:   return (\n48:     <div style={{ marginTop: \"2rem\" }}>\n49:       <h3>\n50:         {company} ({ticker})\n51:       </h3>\n52:       <ResponsiveContainer width=\"100%\" height={300}>\n53:         <LineChart\n54:           data={chartData}\n55:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n56:         >\n57:           <XAxis dataKey=\"date\" />\n58:           <YAxis domain={[\"auto\", \"auto\"]} />\n59:           <Tooltip />\n60:           <Legend />\n61:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n62:         </LineChart>\n63:       </ResponsiveContainer>\n64:     </div>\n65:   );\n66: };",
            "summary": "• Implements a React functional component named StockChart\n• Handles data validation:\n  ◦ Returns null if data is missing or empty\n• Extracts and displays metadata:\n  ◦ Shows company name and ticker in a heading\n• Prepares chart data:\n  ◦ Maps input data to objects with date and closing price\n  ◦ Includes a helper function for formatting dates (not used in rendering)\n• Renders a responsive line chart using Recharts:\n  ◦ Uses LineChart, Line, XAxis, YAxis, Tooltip, and Legend\n  ◦ Displays price over time with a monotone line and no dots\n  ◦ Sets chart margins and ensures responsive sizing\n• Wraps the chart in a styled div with top margin",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "const StockChart = ({ data }) => {",
                            "line": 13
                        }
                    ],
                    "summaryComponent": "Implements a React functional component named StockChart"
                },
                {
                    "codeSegments": [
                        {
                            "code": "if (!data || !data.data || !data.data.length) return null;",
                            "line": 14
                        }
                    ],
                    "summaryComponent": "Handles data validation"
                },
                {
                    "codeSegments": [
                        {
                            "code": "if (!data || !data.data || !data.data.length) return null;",
                            "line": 14
                        }
                    ],
                    "summaryComponent": "Returns null if data is missing or empty"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const company = data.name;",
                            "line": 16
                        },
                        {
                            "code": "const ticker = data.ticker;",
                            "line": 17
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 50
                        }
                    ],
                    "summaryComponent": "Extracts and displays metadata"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<h3>",
                            "line": 49
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 50
                        },
                        {
                            "code": "</h3>",
                            "line": 51
                        }
                    ],
                    "summaryComponent": "Shows company name and ticker in a heading"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const chartData = data.data.map((item) => ({",
                            "line": 42
                        },
                        {
                            "code": "date: item.date,",
                            "line": 43
                        },
                        {
                            "code": "price: item.close,",
                            "line": 44
                        },
                        {
                            "code": "}));",
                            "line": 45
                        }
                    ],
                    "summaryComponent": "Prepares chart data"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const chartData = data.data.map((item) => ({",
                            "line": 42
                        },
                        {
                            "code": "date: item.date,",
                            "line": 43
                        },
                        {
                            "code": "price: item.close,",
                            "line": 44
                        },
                        {
                            "code": "}));",
                            "line": 45
                        }
                    ],
                    "summaryComponent": "Maps input data to objects with date and closing price"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const formatDateString = (date) => {",
                            "line": 19
                        },
                        {
                            "code": "// Formats date strings as \"Jan Feb Mar Apr Jun Jul Aug Sep Oct Nov Dec Jan Feb Mar May Jun Jul Aug\"",
                            "line": 20
                        },
                        {
                            "code": "const months = [",
                            "line": 21
                        },
                        {
                            "code": "const d = new Date(date);",
                            "line": 35
                        },
                        {
                            "code": "const month = months[d.getMonth()];",
                            "line": 36
                        },
                        {
                            "code": "const year = d.getFullYear();",
                            "line": 37
                        },
                        {
                            "code": "return `${month} ${year}`;",
                            "line": 38
                        },
                        {
                            "code": "};",
                            "line": 39
                        }
                    ],
                    "summaryComponent": "Includes a helper function for formatting dates (not used in rendering)"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 52
                        },
                        {
                            "code": "<LineChart",
                            "line": 53
                        },
                        {
                            "code": "data={chartData}",
                            "line": 54
                        }
                    ],
                    "summaryComponent": "Renders a responsive line chart using Recharts"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<LineChart",
                            "line": 53
                        },
                        {
                            "code": "<XAxis dataKey=\"date\" />",
                            "line": 57
                        },
                        {
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                            "line": 58
                        },
                        {
                            "code": "<Tooltip />",
                            "line": 59
                        },
                        {
                            "code": "<Legend />",
                            "line": 60
                        },
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 61
                        }
                    ],
                    "summaryComponent": "Uses LineChart, Line, XAxis, YAxis, Tooltip, and Legend"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 61
                        }
                    ],
                    "summaryComponent": "Displays price over time with a monotone line and no dots"
                },
                {
                    "codeSegments": [
                        {
                            "code": "margin={{ top: 10, right: 30, left: 0, bottom: 0 }}",
                            "line": 55
                        },
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 52
                        }
                    ],
                    "summaryComponent": "Sets chart margins and ensures responsive sizing"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<div style={{ marginTop: \"2rem\" }}>",
                            "line": 48
                        },
                        {
                            "code": "</div>",
                            "line": 64
                        }
                    ],
                    "summaryComponent": "Wraps the chart in a styled div with top margin"
                }
            ]
        },
        "timestamp": "2025-08-19 22:23:33.000",
        "event": "map_summary_code",
        "id": "eYylw0qXRJBnDgvJp2kh"
    },
    {
        "source": "frontend",
        "data": {
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "section_data": {
                "summaryMappings": {
                    "medium_unstructured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                }
                            ],
                            "summaryComponent": "The StockChart component"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "({ data })",
                                    "line": 13
                                }
                            ],
                            "summaryComponent": "takes stock data as a prop"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<LineChart",
                                    "line": 53
                                },
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 61
                                }
                            ],
                            "summaryComponent": "renders a line chart of closing prices"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 52
                                },
                                {
                                    "code": "<LineChart",
                                    "line": 53
                                },
                                {
                                    "code": "<XAxis dataKey=\"date\" />",
                                    "line": 57
                                },
                                {
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                                    "line": 58
                                },
                                {
                                    "code": "<Tooltip />",
                                    "line": 59
                                },
                                {
                                    "code": "<Legend />",
                                    "line": 60
                                },
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 61
                                }
                            ],
                            "summaryComponent": "using the Recharts library"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<h3>",
                                    "line": 49
                                },
                                {
                                    "code": "{company} ({ticker})",
                                    "line": 50
                                }
                            ],
                            "summaryComponent": "It displays the company name and ticker above the chart"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const chartData = data.data.map((item) => ({",
                                    "line": 42
                                },
                                {
                                    "code": "date: item.date,",
                                    "line": 43
                                },
                                {
                                    "code": "price: item.close,",
                                    "line": 44
                                }
                            ],
                            "summaryComponent": "formats the data for charting"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "if (!data || !data.data || !data.data.length) return null;",
                                    "line": 14
                                }
                            ],
                            "summaryComponent": "If no valid data is provided, it renders nothing"
                        }
                    ],
                    "high_unstructured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                }
                            ],
                            "summaryComponent": "a React functional component called StockChart"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 52
                                },
                                {
                                    "code": "<LineChart",
                                    "line": 53
                                },
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 61
                                }
                            ],
                            "summaryComponent": "visualizes stock closing prices over time using the Recharts library"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "if (!data || !data.data || !data.data.length) return null;",
                                    "line": 14
                                }
                            ],
                            "summaryComponent": "checks if the provided data prop is valid and non-empty; if not, it returns null"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const company = data.name;",
                                    "line": 16
                                },
                                {
                                    "code": "const ticker = data.ticker;",
                                    "line": 17
                                }
                            ],
                            "summaryComponent": "extracts the company name and ticker"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const chartData = data.data.map((item) => ({",
                                    "line": 42
                                },
                                {
                                    "code": "  date: item.date,",
                                    "line": 43
                                },
                                {
                                    "code": "  price: item.close,",
                                    "line": 44
                                },
                                {
                                    "code": "}));",
                                    "line": 45
                                }
                            ],
                            "summaryComponent": "formats the data for the chart"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const formatDateString = (date) => {",
                                    "line": 19
                                },
                                {
                                    "code": "// Formats date strings as \"Jan Feb Mar Apr Jun Jul Aug Sep Oct Nov Dec Jan Feb Mar May Jun Jul Aug\"",
                                    "line": 20
                                },
                                {
                                    "code": "const months = [",
                                    "line": 21
                                },
                                {
                                    "code": "const d = new Date(date);",
                                    "line": 35
                                },
                                {
                                    "code": "const month = months[d.getMonth()];",
                                    "line": 36
                                },
                                {
                                    "code": "const year = d.getFullYear();",
                                    "line": 37
                                },
                                {
                                    "code": "return `${month} ${year}`;",
                                    "line": 38
                                },
                                {
                                    "code": "};",
                                    "line": 39
                                }
                            ],
                            "summaryComponent": "defines a helper function for date formatting (though this function is not directly used in rendering)"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 52
                                }
                            ],
                            "summaryComponent": "The chart is rendered inside a ResponsiveContainer"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<XAxis dataKey=\"date\" />",
                                    "line": 57
                                },
                                {
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                                    "line": 58
                                },
                                {
                                    "code": "<Tooltip />",
                                    "line": 59
                                },
                                {
                                    "code": "<Legend />",
                                    "line": 60
                                },
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 61
                                }
                            ],
                            "summaryComponent": "featuring axes, tooltips, a legend, and a monotone line for price"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<h3>",
                                    "line": 49
                                },
                                {
                                    "code": "{company} ({ticker})",
                                    "line": 50
                                },
                                {
                                    "code": "</h3>",
                                    "line": 51
                                }
                            ],
                            "summaryComponent": "with the company name and ticker displayed as a heading above the chart"
                        }
                    ],
                    "low_unstructured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                }
                            ],
                            "summaryComponent": "defines a React component"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<LineChart",
                                    "line": 53
                                },
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 61
                                }
                            ],
                            "summaryComponent": "displays a stock price line chart"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 52
                                },
                                {
                                    "code": "<LineChart",
                                    "line": 53
                                },
                                {
                                    "code": "<XAxis dataKey=\"date\" />",
                                    "line": 57
                                },
                                {
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                                    "line": 58
                                },
                                {
                                    "code": "<Tooltip />",
                                    "line": 59
                                },
                                {
                                    "code": "<Legend />",
                                    "line": 60
                                },
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 61
                                }
                            ],
                            "summaryComponent": "using Recharts"
                        }
                    ],
                    "low_structured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                }
                            ],
                            "summaryComponent": "React component for stock chart"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 52
                                },
                                {
                                    "code": "<LineChart",
                                    "line": 53
                                },
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 61
                                }
                            ],
                            "summaryComponent": "Uses Recharts for visualization"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<h3>",
                                    "line": 49
                                },
                                {
                                    "code": "{company} ({ticker})",
                                    "line": 50
                                }
                            ],
                            "summaryComponent": "Displays company name and ticker"
                        }
                    ],
                    "medium_structured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                }
                            ],
                            "summaryComponent": "Defines a React functional component for displaying stock data"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "if (!data || !data.data || !data.data.length) return null;",
                                    "line": 14
                                }
                            ],
                            "summaryComponent": "Checks for valid data before rendering"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const chartData = data.data.map((item) => ({",
                                    "line": 42
                                },
                                {
                                    "code": "date: item.date,",
                                    "line": 43
                                },
                                {
                                    "code": "price: item.close,",
                                    "line": 44
                                }
                            ],
                            "summaryComponent": "Formats chart data to show closing prices over time"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<h3>",
                                    "line": 49
                                },
                                {
                                    "code": "{company} ({ticker})",
                                    "line": 50
                                }
                            ],
                            "summaryComponent": "Displays company name and ticker above a Recharts line chart"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 52
                                },
                                {
                                    "code": "<LineChart",
                                    "line": 53
                                },
                                {
                                    "code": "<XAxis dataKey=\"date\" />",
                                    "line": 57
                                },
                                {
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                                    "line": 58
                                },
                                {
                                    "code": "<Tooltip />",
                                    "line": 59
                                },
                                {
                                    "code": "<Legend />",
                                    "line": 60
                                },
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 61
                                }
                            ],
                            "summaryComponent": "Uses ResponsiveContainer and various Recharts elements for layout"
                        }
                    ],
                    "high_structured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "const StockChart = ({ data }) => {",
                                    "line": 13
                                }
                            ],
                            "summaryComponent": "Implements a React functional component named StockChart"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "if (!data || !data.data || !data.data.length) return null;",
                                    "line": 14
                                }
                            ],
                            "summaryComponent": "Handles data validation"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "if (!data || !data.data || !data.data.length) return null;",
                                    "line": 14
                                }
                            ],
                            "summaryComponent": "Returns null if data is missing or empty"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const company = data.name;",
                                    "line": 16
                                },
                                {
                                    "code": "const ticker = data.ticker;",
                                    "line": 17
                                },
                                {
                                    "code": "{company} ({ticker})",
                                    "line": 50
                                }
                            ],
                            "summaryComponent": "Extracts and displays metadata"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<h3>",
                                    "line": 49
                                },
                                {
                                    "code": "{company} ({ticker})",
                                    "line": 50
                                },
                                {
                                    "code": "</h3>",
                                    "line": 51
                                }
                            ],
                            "summaryComponent": "Shows company name and ticker in a heading"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const chartData = data.data.map((item) => ({",
                                    "line": 42
                                },
                                {
                                    "code": "date: item.date,",
                                    "line": 43
                                },
                                {
                                    "code": "price: item.close,",
                                    "line": 44
                                },
                                {
                                    "code": "}));",
                                    "line": 45
                                }
                            ],
                            "summaryComponent": "Prepares chart data"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const chartData = data.data.map((item) => ({",
                                    "line": 42
                                },
                                {
                                    "code": "date: item.date,",
                                    "line": 43
                                },
                                {
                                    "code": "price: item.close,",
                                    "line": 44
                                },
                                {
                                    "code": "}));",
                                    "line": 45
                                }
                            ],
                            "summaryComponent": "Maps input data to objects with date and closing price"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const formatDateString = (date) => {",
                                    "line": 19
                                },
                                {
                                    "code": "// Formats date strings as \"Jan Feb Mar Apr Jun Jul Aug Sep Oct Nov Dec Jan Feb Mar May Jun Jul Aug\"",
                                    "line": 20
                                },
                                {
                                    "code": "const months = [",
                                    "line": 21
                                },
                                {
                                    "code": "const d = new Date(date);",
                                    "line": 35
                                },
                                {
                                    "code": "const month = months[d.getMonth()];",
                                    "line": 36
                                },
                                {
                                    "code": "const year = d.getFullYear();",
                                    "line": 37
                                },
                                {
                                    "code": "return `${month} ${year}`;",
                                    "line": 38
                                },
                                {
                                    "code": "};",
                                    "line": 39
                                }
                            ],
                            "summaryComponent": "Includes a helper function for formatting dates (not used in rendering)"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 52
                                },
                                {
                                    "code": "<LineChart",
                                    "line": 53
                                },
                                {
                                    "code": "data={chartData}",
                                    "line": 54
                                }
                            ],
                            "summaryComponent": "Renders a responsive line chart using Recharts"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<LineChart",
                                    "line": 53
                                },
                                {
                                    "code": "<XAxis dataKey=\"date\" />",
                                    "line": 57
                                },
                                {
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                                    "line": 58
                                },
                                {
                                    "code": "<Tooltip />",
                                    "line": 59
                                },
                                {
                                    "code": "<Legend />",
                                    "line": 60
                                },
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 61
                                }
                            ],
                            "summaryComponent": "Uses LineChart, Line, XAxis, YAxis, Tooltip, and Legend"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 61
                                }
                            ],
                            "summaryComponent": "Displays price over time with a monotone line and no dots"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "margin={{ top: 10, right: 30, left: 0, bottom: 0 }}",
                                    "line": 55
                                },
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 52
                                }
                            ],
                            "summaryComponent": "Sets chart margins and ensures responsive sizing"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<div style={{ marginTop: \"2rem\" }}>",
                                    "line": 48
                                },
                                {
                                    "code": "</div>",
                                    "line": 64
                                }
                            ],
                            "summaryComponent": "Wraps the chart in a styled div with top margin"
                        }
                    ]
                },
                "lines": [
                    13,
                    66
                ],
                "title": "StockChart React Component Summary",
                "selectedDetailLevel": "medium",
                "editPromptStructured": null,
                "createdAt": 1755627813000,
                "editPromptValue": "",
                "editPromptDetailLevel": null,
                "selectedStructured": "unstructured",
                "summaryData": {
                    "medium_unstructured": "The StockChart component takes stock data as a prop and renders a line chart of closing prices using the Recharts library. It displays the company name and ticker above the chart and formats the data for charting. If no valid data is provided, it renders nothing.",
                    "title": "StockChart React Component Summary",
                    "low_unstructured": "This code defines a React component that displays a stock price line chart using Recharts.",
                    "low_structured": "• React component for stock chart\n• Uses Recharts for visualization\n• Displays company name and ticker",
                    "medium_structured": "• Defines a React functional component for displaying stock data\n• Checks for valid data before rendering\n• Formats chart data to show closing prices over time\n• Displays company name and ticker above a Recharts line chart\n• Uses ResponsiveContainer and various Recharts elements for layout",
                    "high_unstructured": "This code implements a React functional component called StockChart, which visualizes stock closing prices over time using the Recharts library. It first checks if the provided data prop is valid and non-empty; if not, it returns null. The component extracts the company name and ticker, formats the data for the chart, and defines a helper function for date formatting (though this function is not directly used in rendering). The chart is rendered inside a ResponsiveContainer, featuring axes, tooltips, a legend, and a monotone line for price, with the company name and ticker displayed as a heading above the chart.",
                    "high_structured": "• Implements a React functional component named StockChart\n• Handles data validation:\n  ◦ Returns null if data is missing or empty\n• Extracts and displays metadata:\n  ◦ Shows company name and ticker in a heading\n• Prepares chart data:\n  ◦ Maps input data to objects with date and closing price\n  ◦ Includes a helper function for formatting dates (not used in rendering)\n• Renders a responsive line chart using Recharts:\n  ◦ Uses LineChart, Line, XAxis, YAxis, Tooltip, and Legend\n  ◦ Displays price over time with a monotone line and no dots\n  ◦ Sets chart margins and ensures responsive sizing\n• Wraps the chart in a styled div with top margin"
                },
                "metadata": {
                    "offset": 156,
                    "originalCode": "const StockChart = ({ data }) => {\n  if (!data || !data.data || !data.data.length) return null;\n\n  const company = data.name;\n  const ticker = data.ticker;\n\n  const formatDateString = (date) => {\n    // Formats date strings as \"Jan Feb Mar Apr Jun Jul Aug Sep Oct Nov Dec Jan Feb Mar May Jun Jul Aug\"\n    const months = [\n      \"Jan\",\n      \"Feb\",\n      \"Mar\",\n      \"Apr\",\n      \"May\",\n      \"Jun\",\n      \"Jul\",\n      \"Aug\",\n      \"Sep\",\n      \"Oct\",\n      \"Nov\",\n      \"Dec\",\n    ];\n    const d = new Date(date);\n    const month = months[d.getMonth()];\n    const year = d.getFullYear();\n    return `${month} ${year}`;\n  };\n\n  // Combine labels and values into an array of objects for Recharts\n  const chartData = data.data.map((item) => ({\n    date: item.date,\n    price: item.close,\n  }));\n\n  return (\n    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};",
                    "fullPath": "/project/workspace/frontend/src/StockChart.jsx",
                    "id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
                    "filename": "StockChart.jsx"
                }
            }
        },
        "timestamp": "2025-08-19 22:23:34.000",
        "event": "create_new_section",
        "id": "16zY4IOSZzWVpRPbMnMp"
    },
    {
        "source": "frontend",
        "data": {
            "before_section_id": "67a5083a-135b-4d38-bc6d-46f194301012",
            "after_section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd"
        },
        "timestamp": "2025-08-19 22:23:34.000",
        "event": "autotransit_section",
        "id": "LkcTkEkhMwk62zuBjX0G"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "unstructured",
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:23:35.000",
        "event": "mapping_unhover",
        "id": "9b1BbyPfxiFTC4zJNpsz"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 5,
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:23:35.000",
        "event": "mapping_hover",
        "id": "f1dLImmMq94UHvtwfWX7"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 0,
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:23:36.000",
        "event": "mapping_hover",
        "id": "9pCHo446KOXVMtSlJPKK"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "unstructured",
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:23:36.000",
        "event": "mapping_unhover",
        "id": "FJhkDH3z2ysOr5w11zJ0"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "unstructured",
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:23:36.000",
        "event": "mapping_unhover",
        "id": "bR7ZqPtvuhdJLo2JiQlp"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 5,
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:23:36.000",
        "event": "mapping_hover",
        "id": "eKwKdOFt2r2PuBFP9dB3"
    },
    {
        "source": "frontend",
        "data": {
            "before_structured": "unstructured",
            "after_structured": "structured",
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "before_detail_level": "medium",
            "after_detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:23:37.000",
        "event": "change_summary_level",
        "id": "LSPApt4F8jt1uTJ5lo7F"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:23:38.000",
        "event": "mapping_unhover",
        "id": "2u0AjLsXhnFNE9sZag55"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 0,
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:23:38.000",
        "event": "mapping_hover",
        "id": "7kpmRGGQXkd3YW7ONt8V"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 3,
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:23:38.000",
        "event": "mapping_hover",
        "id": "E06xQx2ZjjBt7x6X1It6"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:23:38.000",
        "event": "mapping_unhover",
        "id": "F0f5VKqyZWhgx2yrsigm"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 1,
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:23:38.000",
        "event": "mapping_hover",
        "id": "G5zdMpvBmh3iEQCn7s7X"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:23:38.000",
        "event": "mapping_unhover",
        "id": "JPvI4OD8ZAEd1O7y6Gyk"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 2,
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:23:38.000",
        "event": "mapping_hover",
        "id": "MhovIVLetzCvHhI6bPdD"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 2,
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:23:38.000",
        "event": "mapping_hover",
        "id": "Niel5mhgo4Y24Vsfl6px"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:23:38.000",
        "event": "mapping_unhover",
        "id": "SiYTIG757Wbd2ZBnGNvq"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:23:38.000",
        "event": "mapping_unhover",
        "id": "bnLljGv0kNNSSAeFooni"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:23:38.000",
        "event": "mapping_unhover",
        "id": "gPUgW2Dl9T6gg0VPcYuP"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 4,
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:23:38.000",
        "event": "mapping_hover",
        "id": "lCoS5kNWnlLmWH8qUzNg"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:23:38.000",
        "event": "mapping_unhover",
        "id": "mw9Ch2dT0llAcT8pKA0L"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 3,
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:23:38.000",
        "event": "mapping_hover",
        "id": "s0ZHZQ3Wy8Hg3GcvMYX5"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 0,
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:23:38.000",
        "event": "mapping_hover",
        "id": "umIAdc0s4mPpConZBsyN"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:23:40.000",
        "event": "mapping_unhover",
        "id": "ETV95vtgRMjQvZuQVAgz"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 1,
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:23:40.000",
        "event": "mapping_hover",
        "id": "J08JI0zfQGG2wbt5auA6"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 2,
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:23:41.000",
        "event": "mapping_hover",
        "id": "4QRL1ArCEh9DWdZSNpk2"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:23:41.000",
        "event": "mapping_unhover",
        "id": "Xxk9u7bGofxpfpoXivIt"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 3,
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:23:42.000",
        "event": "mapping_hover",
        "id": "DwMfIY6jYzsUvAp6r2Fj"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:23:42.000",
        "event": "mapping_unhover",
        "id": "KPpxBy5tMRIV3Zm67Fuu"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:23:43.000",
        "event": "mapping_unhover",
        "id": "LBDQ9YykmMcwhkNvcHq1"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 2,
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:23:43.000",
        "event": "mapping_hover",
        "id": "nAxnyzlnfFGQzoeusv6W"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 3,
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:23:46.000",
        "event": "mapping_hover",
        "id": "4KhqPGdi1GTBLHrZmcFb"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:23:46.000",
        "event": "mapping_unhover",
        "id": "IdzLejbuPx2LTbpVPh97"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:23:47.000",
        "event": "mapping_unhover",
        "id": "vVIJFDTNlJT13Hnd5vOu"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 4,
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:23:50.000",
        "event": "mapping_hover",
        "id": "CLJU1ePvCPhMLl69n14n"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:23:51.000",
        "event": "mapping_unhover",
        "id": "9khlqcHdxIxcjm2TzbTl"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 3,
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:23:51.000",
        "event": "mapping_hover",
        "id": "M220hXkLdg7BuA5qZbX3"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:23:52.000",
        "event": "mapping_unhover",
        "id": "2lwMIxSHoGehLFGmImdl"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:23:52.000",
        "event": "mapping_unhover",
        "id": "NA6kKnZMNVkQ4yZ1Ai9i"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 4,
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:23:52.000",
        "event": "mapping_hover",
        "id": "wXRr9woe1MHYpAjaYlXF"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 4,
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:23:53.000",
        "event": "mapping_hover",
        "id": "JJ3fxJBcRthEROfmnwSc"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:23:56.000",
        "event": "mapping_unhover",
        "id": "fbwVhS65LGopNOfkrEVQ"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:23:57.000",
        "event": "mapping_unhover",
        "id": "7ybjsa3GaBgQ2kbJjBJn"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 3,
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:23:57.000",
        "event": "mapping_hover",
        "id": "hCWr4z4bharj43Jri8kH"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:23:57.000",
        "event": "mapping_unhover",
        "id": "kSvIItj2o50xrY2R0T9O"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 4,
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:23:57.000",
        "event": "mapping_hover",
        "id": "zDjx0r6EgYRYZuv7CIrS"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 6,
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:59.000",
        "event": "mapping_hover",
        "id": "3HQG7iiDvQ4mMwnZA4mq"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 3,
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:59.000",
        "event": "mapping_hover",
        "id": "7B6JRCNlhCoQsFMkhpQC"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:59.000",
        "event": "mapping_unhover",
        "id": "KnNJtNoBxxbaf8Eg2SHO"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:59.000",
        "event": "mapping_unhover",
        "id": "TmoTi1Aeikz0JYoAU6yZ"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:59.000",
        "event": "mapping_unhover",
        "id": "awHaZ09VrYhYyKWNxRPA"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 2,
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:59.000",
        "event": "mapping_hover",
        "id": "b4iicbBruxNowZtNJ4Cd"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 4,
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:59.000",
        "event": "mapping_hover",
        "id": "h8OaVGseCNy0GEb41sqM"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:59.000",
        "event": "mapping_unhover",
        "id": "m9VQOUgCJeMBFJlX6moC"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 0,
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:59.000",
        "event": "mapping_hover",
        "id": "nKWds92Zg4YFf6LN5Y98"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 1,
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:59.000",
        "event": "mapping_hover",
        "id": "rRAqiYq6gmJjxc6EnaQz"
    },
    {
        "source": "frontend",
        "data": {
            "before_structured": "structured",
            "after_structured": "structured",
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "before_detail_level": "medium",
            "after_detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:59.000",
        "event": "change_summary_level",
        "id": "t8aUaensnXWwPrmq15To"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:23:59.000",
        "event": "mapping_unhover",
        "id": "zzllidlHKK7vh6H9kteX"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 12,
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:24:00.000",
        "event": "mapping_hover",
        "id": "UVOyueCl7RCnzc0muaYV"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:24:00.000",
        "event": "mapping_unhover",
        "id": "cn5ThuYKtS7TVdcOxujT"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:24:01.000",
        "event": "mapping_unhover",
        "id": "2kvIfuPBgtyRm1GL4gW6"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 10,
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:24:01.000",
        "event": "mapping_hover",
        "id": "6NVriBqSiInyYy0OYiPx"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 9,
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:24:01.000",
        "event": "mapping_hover",
        "id": "9O1KO3OvQGk0sI7dr7T5"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:24:01.000",
        "event": "mapping_unhover",
        "id": "KcQhk6bjHiVhWZl4ujlW"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 8,
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:24:01.000",
        "event": "mapping_hover",
        "id": "VRTs2rnKp10EX4JSsyKm"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:24:01.000",
        "event": "mapping_unhover",
        "id": "mrvj1ZugSYs9Qe8KsW3t"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:24:01.000",
        "event": "mapping_unhover",
        "id": "oEGp08mfiMwKkiVtAwIP"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 11,
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:24:01.000",
        "event": "mapping_hover",
        "id": "yGavOJzoaoLLp8q2Oi48"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:24:06.000",
        "event": "mapping_unhover",
        "id": "bYcqQ5q9IItREpvt3HNC"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 9,
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:24:06.000",
        "event": "mapping_hover",
        "id": "p041LyzjXTljeLDIwKPB"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 11,
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:24:08.000",
        "event": "mapping_hover",
        "id": "08TDops9fDqfeIhAHsJM"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 10,
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:24:08.000",
        "event": "mapping_hover",
        "id": "4S9XweLpq6HdMTeMOGVI"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:24:08.000",
        "event": "mapping_unhover",
        "id": "k8NGPTBlQFMebFLQCkXO"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:24:08.000",
        "event": "mapping_unhover",
        "id": "xgvgsQAF4UWogDuCPdQi"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:24:08.000",
        "event": "mapping_unhover",
        "id": "yYxXVh1hV6I93rdB0VNM"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 11,
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:24:11.000",
        "event": "mapping_hover",
        "id": "nBXapcmDpqtZinN18ote"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:24:14.000",
        "event": "mapping_unhover",
        "id": "1RBuSqaGY1F4vFXW08YF"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 10,
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:24:14.000",
        "event": "mapping_hover",
        "id": "1zFCIJ3hNR6KL6aRRDys"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:24:14.000",
        "event": "mapping_unhover",
        "id": "YulEcIQXgtt6XQskrvT8"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 9,
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:24:14.000",
        "event": "mapping_hover",
        "id": "avPqcLlxgZIBaX19jKOb"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:24:14.000",
        "event": "mapping_unhover",
        "id": "ciHiOoocRH3kq0FoGot5"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:24:14.000",
        "event": "mapping_unhover",
        "id": "iTjF9aKm8q00JnUB49WW"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 7,
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:24:14.000",
        "event": "mapping_hover",
        "id": "muTVRjcVI34WBhXfVACb"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:24:14.000",
        "event": "mapping_unhover",
        "id": "oskuWbaoJAlak7XItNWa"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 8,
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:24:14.000",
        "event": "mapping_hover",
        "id": "vDti56wLZAmzu3NnN4q3"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 12,
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:24:19.000",
        "event": "mapping_hover",
        "id": "2CWNjX8lYC4CVtxj3Lm2"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:24:19.000",
        "event": "mapping_unhover",
        "id": "wkp2gYutnCHDg5oNKR8A"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 11,
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:24:29.000",
        "event": "mapping_hover",
        "id": "tnpq9fvd6M78E3O9Hfev"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:24:30.000",
        "event": "mapping_unhover",
        "id": "QWVDFAmqyrFsJfklTyIZ"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 10,
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:24:30.000",
        "event": "mapping_hover",
        "id": "WlVVwowApZeqYZjkrVxZ"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 9,
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:24:33.000",
        "event": "mapping_hover",
        "id": "Cxpp1OcBLgsHmN1ceBSc"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:24:33.000",
        "event": "mapping_unhover",
        "id": "MePdRqv2NpKuLgmwbF9Q"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 8,
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:24:44.000",
        "event": "mapping_hover",
        "id": "9q9DAgyghhwsPrRfkxci"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:24:44.000",
        "event": "mapping_unhover",
        "id": "E8869FJxWSXqBJuql0xS"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 7,
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:24:44.000",
        "event": "mapping_hover",
        "id": "OHY9nyf3VIaalPtB0H1N"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:24:44.000",
        "event": "mapping_unhover",
        "id": "UJ98cV5hNmcHOf3YEJoU"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 8,
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:24:44.000",
        "event": "mapping_hover",
        "id": "s65gDmpHEmfPR3u4BkYV"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:24:44.000",
        "event": "mapping_unhover",
        "id": "xoJI9yZ7Di9HYPLNUtO0"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 10,
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:24:48.000",
        "event": "mapping_hover",
        "id": "5LzjWXVeKmPdlLh7vYzU"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:24:48.000",
        "event": "mapping_unhover",
        "id": "CzlvHSokTY4fq303xRVL"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:24:48.000",
        "event": "mapping_unhover",
        "id": "FedfvYr3WzCSkheFdW6u"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 11,
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:24:48.000",
        "event": "mapping_hover",
        "id": "ViCL1g0cPhu6xmjoG18d"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 12,
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:24:48.000",
        "event": "mapping_hover",
        "id": "dxoBA8RduCdtG2igUxRU"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:24:48.000",
        "event": "mapping_unhover",
        "id": "eX9LCD5PB5MqK9kRM7s8"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:24:48.000",
        "event": "mapping_unhover",
        "id": "hxuoXl8RvW0CQelXrK4c"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 9,
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:24:48.000",
        "event": "mapping_hover",
        "id": "z9ZDtUZE3B2ipLZGkUog"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:24:50.000",
        "event": "mapping_unhover",
        "id": "3IQithODDQ17b9rJUyQS"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 11,
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:24:50.000",
        "event": "mapping_hover",
        "id": "JUoIRnnVkBnTDMHIs2De"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:24:50.000",
        "event": "mapping_unhover",
        "id": "qqMYjPHJ6x6s0si2ZwTH"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:25:00.000",
        "event": "mapping_unhover",
        "id": "2KojeVfpoomSCk0Tk50s"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 10,
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:25:00.000",
        "event": "mapping_hover",
        "id": "2NvXuxxZ2yQpiurcEKaZ"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:25:00.000",
        "event": "mapping_unhover",
        "id": "9qAnksAaU6dPw22hqaQl"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 12,
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:25:00.000",
        "event": "mapping_hover",
        "id": "B7GSAq38VieIFjIKhMXZ"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 7,
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:25:00.000",
        "event": "mapping_hover",
        "id": "Bb3GzECqLUtno5X6HgC9"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 6,
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:25:00.000",
        "event": "mapping_hover",
        "id": "IRXSddjIZW7BgBHwiY0Y"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:25:00.000",
        "event": "mapping_unhover",
        "id": "KIA6JMC3LzH1kPfWJJXu"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 4,
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:25:00.000",
        "event": "mapping_hover",
        "id": "QMrbmPQXYll7lQ1qpYyp"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:25:00.000",
        "event": "mapping_unhover",
        "id": "U4xdUKNm4EICPRnyBkh0"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 0,
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:25:00.000",
        "event": "mapping_hover",
        "id": "W2t7kLwoKwII6jkvystg"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 9,
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:25:00.000",
        "event": "mapping_hover",
        "id": "bhE06IxwbhqYFjJK2zTj"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 8,
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:25:00.000",
        "event": "mapping_hover",
        "id": "lXqO9uAVLifs6B7ntMFX"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:25:00.000",
        "event": "mapping_unhover",
        "id": "m8tMBt7zhSLDfJArATn8"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:25:00.000",
        "event": "mapping_unhover",
        "id": "pjlUCiUbA3K9tA1gfIoa"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:25:00.000",
        "event": "mapping_unhover",
        "id": "rnUTD6D6esZibW80Zoo6"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 2,
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:25:00.000",
        "event": "mapping_hover",
        "id": "uWZpSchdnMBU7r9BCwGu"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:25:00.000",
        "event": "mapping_unhover",
        "id": "x2Nx9N6HVtbkLrOUiJ6X"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:25:01.000",
        "event": "mapping_unhover",
        "id": "smOdhJuJNWNcrt9eHy1Q"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 7,
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:25:02.000",
        "event": "mapping_hover",
        "id": "6Qixe8QZGUZtdbUHbe3y"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 0,
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:25:02.000",
        "event": "mapping_hover",
        "id": "6npW2didIheZPru7Uq05"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 6,
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:25:02.000",
        "event": "mapping_hover",
        "id": "DgOHKkVjb3Lmu861k3qU"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:25:02.000",
        "event": "mapping_unhover",
        "id": "Z4XMVI8Y8OIa4UdpXMQX"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:25:02.000",
        "event": "mapping_unhover",
        "id": "nfDIDyfmX6bz003xg3LR"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:25:02.000",
        "event": "mapping_unhover",
        "id": "xHBnyv2n8wTrLuoe5OB2"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 4,
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:25:02.000",
        "event": "mapping_hover",
        "id": "xZL2yWZaVjksgaAngCEm"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 2,
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:25:02.000",
        "event": "mapping_hover",
        "id": "xsRe654hUnRduLaPrao8"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:25:02.000",
        "event": "mapping_unhover",
        "id": "z8V8oqmXY2as3le0RtJV"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:25:03.000",
        "event": "mapping_unhover",
        "id": "RGL321eSCdT1r3tFP3O5"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 12,
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:25:07.000",
        "event": "mapping_hover",
        "id": "Dcuxk8fZOMnK5mR4ApzX"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:25:07.000",
        "event": "mapping_unhover",
        "id": "Y0LPacBhpGsHBnDUYqBg"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 11,
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:25:22.000",
        "event": "mapping_hover",
        "id": "NvTDItwZjXMxS0YRS3O3"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:25:24.000",
        "event": "mapping_unhover",
        "id": "89vM9LpqtEAmKfurDIHK"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 6,
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:25:24.000",
        "event": "mapping_hover",
        "id": "OVveiLYL2fqUE0niBSiM"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:25:24.000",
        "event": "mapping_unhover",
        "id": "XGats31ShVfzfUmeHxfI"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 9,
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:25:24.000",
        "event": "mapping_hover",
        "id": "YOpCpRhjmjlCDHIQ33xs"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:25:24.000",
        "event": "mapping_unhover",
        "id": "drtFx3Pww7V3G3Pcwiix"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 8,
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:25:24.000",
        "event": "mapping_hover",
        "id": "hFeICPqgK8I4e6odLXYO"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:25:24.000",
        "event": "mapping_unhover",
        "id": "o6wIOFTHRpXYlkokL0ME"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:25:24.000",
        "event": "mapping_unhover",
        "id": "sIGXSCyAu73zhWjr8T4c"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 7,
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:25:24.000",
        "event": "mapping_hover",
        "id": "w6spCnYip9t8pPDmvgEG"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:25:25.000",
        "event": "mapping_unhover",
        "id": "1fNq8TmRZA3ikxpGyIiQ"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 0,
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:25:25.000",
        "event": "mapping_hover",
        "id": "lWGeuHN48nLNNxi1424T"
    },
    {
        "source": "frontend",
        "data": {},
        "timestamp": "2025-08-19 22:25:29.000",
        "event": "click_summarize_code",
        "id": "tMIWik4p0xP9O3kmLd0z"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 0,
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:25:31.000",
        "event": "mapping_hover",
        "id": "OiTHs17Ewxx3HeOveIKP"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:25:31.000",
        "event": "mapping_unhover",
        "id": "SLejgewaqYft7ssqnZm0"
    },
    {
        "source": "backend",
        "data": {
            "selected_code": "    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>",
            "summary": {
                "medium_unstructured": "This snippet creates a styled section that shows the company name and ticker symbol, followed by a responsive line chart visualizing stock price data. The chart includes axes, a legend, a tooltip, and a single line representing price over time. The layout ensures the chart fits well within its container.",
                "title": "Stock Chart Rendering Component",
                "low_unstructured": "This code renders a styled container displaying a company name and ticker, along with a responsive line chart of stock prices.",
                "low_structured": "• Displays company name and ticker\n• Renders a responsive line chart of stock prices",
                "medium_structured": "• Renders a container with a top margin\n• Displays the company name and ticker in a heading\n• Shows a responsive line chart\n  ◦ Chart includes X and Y axes, a tooltip, a legend, and a line for price data\n  ◦ The chart adapts to the container's width and has a fixed height",
                "high_unstructured": "This code defines a React component section that displays a heading with the company name and ticker, followed by a responsive line chart visualizing stock price data. The chart is built using Recharts components, including X and Y axes, a tooltip for interactive data display, a legend, and a monotone line representing the price, styled in purple and without dots. The chart's container is set to occupy the full width and a fixed height, with a margin at the top for spacing, ensuring a clean and adaptive layout within the application.",
                "high_structured": "• Creates a div container with a top margin for spacing\n• Displays a heading showing the company name and ticker symbol\n• Renders a ResponsiveContainer from Recharts\n  ◦ Sets width to 100% and height to 300px for adaptability\n  ◦ Contains a LineChart component\n    ◦ Uses provided chartData for plotting\n    ◦ Sets chart margins for layout\n    ◦ Adds an XAxis for dates and a YAxis with automatic domain\n    ◦ Includes a Tooltip for interactive data display\n    ◦ Includes a Legend for chart clarity\n    ◦ Plots a monotone Line for price data, styled with a purple stroke and no dots"
            }
        },
        "timestamp": "2025-08-19 22:25:36.000",
        "event": "summarize_selected_code",
        "id": "GTpCX3bTnRaFhVcRT2P0"
    },
    {
        "source": "backend",
        "data": {
            "code": "48:     <div style={{ marginTop: \"2rem\" }}>\n49:       <h3>\n50:         {company} ({ticker})\n51:       </h3>\n52:       <ResponsiveContainer width=\"100%\" height={300}>\n53:         <LineChart\n54:           data={chartData}\n55:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n56:         >\n57:           <XAxis dataKey=\"date\" />\n58:           <YAxis domain={[\"auto\", \"auto\"]} />\n59:           <Tooltip />\n60:           <Legend />\n61:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n62:         </LineChart>\n63:       </ResponsiveContainer>\n64:     </div>",
            "summary": "• Displays company name and ticker\n• Renders a responsive line chart of stock prices",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "<h3>",
                            "line": 49
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 50
                        }
                    ],
                    "summaryComponent": "Displays company name and ticker"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 52
                        },
                        {
                            "code": "<LineChart",
                            "line": 53
                        },
                        {
                            "code": "data={chartData}",
                            "line": 54
                        },
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 61
                        }
                    ],
                    "summaryComponent": "Renders a responsive line chart of stock prices"
                }
            ]
        },
        "timestamp": "2025-08-19 22:25:37.000",
        "event": "map_summary_code",
        "id": "qqkO39pYdS5DjMsuAWNv"
    },
    {
        "source": "backend",
        "data": {
            "code": "48:     <div style={{ marginTop: \"2rem\" }}>\n49:       <h3>\n50:         {company} ({ticker})\n51:       </h3>\n52:       <ResponsiveContainer width=\"100%\" height={300}>\n53:         <LineChart\n54:           data={chartData}\n55:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n56:         >\n57:           <XAxis dataKey=\"date\" />\n58:           <YAxis domain={[\"auto\", \"auto\"]} />\n59:           <Tooltip />\n60:           <Legend />\n61:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n62:         </LineChart>\n63:       </ResponsiveContainer>\n64:     </div>",
            "summary": "This code renders a styled container displaying a company name and ticker, along with a responsive line chart of stock prices.",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "<div style={{ marginTop: \"2rem\" }}>",
                            "line": 48
                        }
                    ],
                    "summaryComponent": "renders a styled container"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<h3>",
                            "line": 49
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 50
                        }
                    ],
                    "summaryComponent": "displaying a company name and ticker"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 52
                        },
                        {
                            "code": "<LineChart",
                            "line": 53
                        }
                    ],
                    "summaryComponent": "along with a responsive line chart"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 61
                        }
                    ],
                    "summaryComponent": "of stock prices"
                }
            ]
        },
        "timestamp": "2025-08-19 22:25:38.000",
        "event": "map_summary_code",
        "id": "IycaixeeTvGUowcfbp3w"
    },
    {
        "source": "backend",
        "data": {
            "code": "48:     <div style={{ marginTop: \"2rem\" }}>\n49:       <h3>\n50:         {company} ({ticker})\n51:       </h3>\n52:       <ResponsiveContainer width=\"100%\" height={300}>\n53:         <LineChart\n54:           data={chartData}\n55:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n56:         >\n57:           <XAxis dataKey=\"date\" />\n58:           <YAxis domain={[\"auto\", \"auto\"]} />\n59:           <Tooltip />\n60:           <Legend />\n61:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n62:         </LineChart>\n63:       </ResponsiveContainer>\n64:     </div>",
            "summary": "• Renders a container with a top margin\n• Displays the company name and ticker in a heading\n• Shows a responsive line chart\n  ◦ Chart includes X and Y axes, a tooltip, a legend, and a line for price data\n  ◦ The chart adapts to the container's width and has a fixed height",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "<div style={{ marginTop: \"2rem\" }}>",
                            "line": 48
                        }
                    ],
                    "summaryComponent": "Renders a container with a top margin"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<h3>",
                            "line": 49
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 50
                        }
                    ],
                    "summaryComponent": "Displays the company name and ticker in a heading"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 52
                        },
                        {
                            "code": "<LineChart",
                            "line": 53
                        }
                    ],
                    "summaryComponent": "Shows a responsive line chart"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<XAxis dataKey=\"date\" />",
                            "line": 57
                        },
                        {
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                            "line": 58
                        },
                        {
                            "code": "<Tooltip />",
                            "line": 59
                        },
                        {
                            "code": "<Legend />",
                            "line": 60
                        },
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 61
                        }
                    ],
                    "summaryComponent": "Chart includes X and Y axes, a tooltip, a legend, and a line for price data"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 52
                        }
                    ],
                    "summaryComponent": "The chart adapts to the container's width and has a fixed height"
                }
            ]
        },
        "timestamp": "2025-08-19 22:25:38.000",
        "event": "map_summary_code",
        "id": "Qyrv2UaIENwRAaml82rk"
    },
    {
        "source": "backend",
        "data": {
            "code": "48:     <div style={{ marginTop: \"2rem\" }}>\n49:       <h3>\n50:         {company} ({ticker})\n51:       </h3>\n52:       <ResponsiveContainer width=\"100%\" height={300}>\n53:         <LineChart\n54:           data={chartData}\n55:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n56:         >\n57:           <XAxis dataKey=\"date\" />\n58:           <YAxis domain={[\"auto\", \"auto\"]} />\n59:           <Tooltip />\n60:           <Legend />\n61:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n62:         </LineChart>\n63:       </ResponsiveContainer>\n64:     </div>",
            "summary": "• Creates a div container with a top margin for spacing\n• Displays a heading showing the company name and ticker symbol\n• Renders a ResponsiveContainer from Recharts\n  ◦ Sets width to 100% and height to 300px for adaptability\n  ◦ Contains a LineChart component\n    ◦ Uses provided chartData for plotting\n    ◦ Sets chart margins for layout\n    ◦ Adds an XAxis for dates and a YAxis with automatic domain\n    ◦ Includes a Tooltip for interactive data display\n    ◦ Includes a Legend for chart clarity\n    ◦ Plots a monotone Line for price data, styled with a purple stroke and no dots",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "<div style={{ marginTop: \"2rem\" }}>",
                            "line": 48
                        }
                    ],
                    "summaryComponent": "Creates a div container with a top margin for spacing"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<h3>",
                            "line": 49
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 50
                        }
                    ],
                    "summaryComponent": "Displays a heading showing the company name and ticker symbol"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 52
                        }
                    ],
                    "summaryComponent": "Renders a ResponsiveContainer from Recharts"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 52
                        }
                    ],
                    "summaryComponent": "Sets width to 100% and height to 300px for adaptability"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<LineChart",
                            "line": 53
                        }
                    ],
                    "summaryComponent": "Contains a LineChart component"
                },
                {
                    "codeSegments": [
                        {
                            "code": "data={chartData}",
                            "line": 54
                        }
                    ],
                    "summaryComponent": "Uses provided chartData for plotting"
                },
                {
                    "codeSegments": [
                        {
                            "code": "margin={{ top: 10, right: 30, left: 0, bottom: 0 }}",
                            "line": 55
                        }
                    ],
                    "summaryComponent": "Sets chart margins for layout"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<XAxis dataKey=\"date\" />",
                            "line": 57
                        },
                        {
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                            "line": 58
                        }
                    ],
                    "summaryComponent": "Adds an XAxis for dates and a YAxis with automatic domain"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<Tooltip />",
                            "line": 59
                        }
                    ],
                    "summaryComponent": "Includes a Tooltip for interactive data display"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<Legend />",
                            "line": 60
                        }
                    ],
                    "summaryComponent": "Includes a Legend for chart clarity"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 61
                        }
                    ],
                    "summaryComponent": "Plots a monotone Line for price data, styled with a purple stroke and no dots"
                }
            ]
        },
        "timestamp": "2025-08-19 22:25:39.000",
        "event": "map_summary_code",
        "id": "KZJ38wjyDCHPq8KV1NO5"
    },
    {
        "source": "backend",
        "data": {
            "code": "48:     <div style={{ marginTop: \"2rem\" }}>\n49:       <h3>\n50:         {company} ({ticker})\n51:       </h3>\n52:       <ResponsiveContainer width=\"100%\" height={300}>\n53:         <LineChart\n54:           data={chartData}\n55:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n56:         >\n57:           <XAxis dataKey=\"date\" />\n58:           <YAxis domain={[\"auto\", \"auto\"]} />\n59:           <Tooltip />\n60:           <Legend />\n61:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n62:         </LineChart>\n63:       </ResponsiveContainer>\n64:     </div>",
            "summary": "This snippet creates a styled section that shows the company name and ticker symbol, followed by a responsive line chart visualizing stock price data. The chart includes axes, a legend, a tooltip, and a single line representing price over time. The layout ensures the chart fits well within its container.",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "<div style={{ marginTop: \"2rem\" }}>",
                            "line": 48
                        }
                    ],
                    "summaryComponent": "creates a styled section"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<h3>",
                            "line": 49
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 50
                        }
                    ],
                    "summaryComponent": "shows the company name and ticker symbol"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 52
                        },
                        {
                            "code": "<LineChart",
                            "line": 53
                        }
                    ],
                    "summaryComponent": "a responsive line chart"
                },
                {
                    "codeSegments": [
                        {
                            "code": "data={chartData}",
                            "line": 54
                        }
                    ],
                    "summaryComponent": "visualizing stock price data"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<XAxis dataKey=\"date\" />",
                            "line": 57
                        },
                        {
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                            "line": 58
                        }
                    ],
                    "summaryComponent": "includes axes"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<Legend />",
                            "line": 60
                        }
                    ],
                    "summaryComponent": "a legend"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<Tooltip />",
                            "line": 59
                        }
                    ],
                    "summaryComponent": "a tooltip"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 61
                        }
                    ],
                    "summaryComponent": "a single line representing price over time"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 52
                        }
                    ],
                    "summaryComponent": "layout ensures the chart fits well within its container"
                }
            ]
        },
        "timestamp": "2025-08-19 22:25:40.000",
        "event": "map_summary_code",
        "id": "6HorugoIZxPOxtvaEWRi"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "unstructured",
            "section_id": "81a0486b-2853-4c67-aa49-ff8f36a1c15c",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:25:42.000",
        "event": "mapping_unhover",
        "id": "2KazomtwFhvXSsjiE7rj"
    },
    {
        "source": "frontend",
        "data": {
            "before_section_id": "378f1c12-9bdb-42ed-b3eb-fa133f160fcd",
            "after_section_id": "81a0486b-2853-4c67-aa49-ff8f36a1c15c"
        },
        "timestamp": "2025-08-19 22:25:42.000",
        "event": "autotransit_section",
        "id": "BlKZDFco9M2K1K22hwtQ"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 3,
            "section_id": "81a0486b-2853-4c67-aa49-ff8f36a1c15c",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:25:42.000",
        "event": "mapping_hover",
        "id": "QAeyAGUJ1yTCZE3ka5Ff"
    },
    {
        "source": "frontend",
        "data": {
            "section_id": "81a0486b-2853-4c67-aa49-ff8f36a1c15c",
            "section_data": {
                "summaryMappings": {
                    "medium_unstructured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "<div style={{ marginTop: \"2rem\" }}>",
                                    "line": 48
                                }
                            ],
                            "summaryComponent": "creates a styled section"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<h3>",
                                    "line": 49
                                },
                                {
                                    "code": "{company} ({ticker})",
                                    "line": 50
                                }
                            ],
                            "summaryComponent": "shows the company name and ticker symbol"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 52
                                },
                                {
                                    "code": "<LineChart",
                                    "line": 53
                                }
                            ],
                            "summaryComponent": "a responsive line chart"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "data={chartData}",
                                    "line": 54
                                }
                            ],
                            "summaryComponent": "visualizing stock price data"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<XAxis dataKey=\"date\" />",
                                    "line": 57
                                },
                                {
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                                    "line": 58
                                }
                            ],
                            "summaryComponent": "includes axes"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<Legend />",
                                    "line": 60
                                }
                            ],
                            "summaryComponent": "a legend"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<Tooltip />",
                                    "line": 59
                                }
                            ],
                            "summaryComponent": "a tooltip"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 61
                                }
                            ],
                            "summaryComponent": "a single line representing price over time"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 52
                                }
                            ],
                            "summaryComponent": "layout ensures the chart fits well within its container"
                        }
                    ],
                    "high_unstructured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "<div style={{ marginTop: \"2rem\" }}>",
                                    "line": 48
                                }
                            ],
                            "summaryComponent": "a React component section"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<h3>",
                                    "line": 49
                                },
                                {
                                    "code": "{company} ({ticker})",
                                    "line": 50
                                }
                            ],
                            "summaryComponent": "displays a heading with the company name and ticker"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 52
                                },
                                {
                                    "code": "<LineChart",
                                    "line": 53
                                },
                                {
                                    "code": "data={chartData}",
                                    "line": 54
                                }
                            ],
                            "summaryComponent": "a responsive line chart visualizing stock price data"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 52
                                },
                                {
                                    "code": "<LineChart",
                                    "line": 53
                                },
                                {
                                    "code": "<XAxis dataKey=\"date\" />",
                                    "line": 57
                                },
                                {
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                                    "line": 58
                                },
                                {
                                    "code": "<Tooltip />",
                                    "line": 59
                                },
                                {
                                    "code": "<Legend />",
                                    "line": 60
                                },
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 61
                                }
                            ],
                            "summaryComponent": "built using Recharts components"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<XAxis dataKey=\"date\" />",
                                    "line": 57
                                },
                                {
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                                    "line": 58
                                }
                            ],
                            "summaryComponent": "X and Y axes"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<Tooltip />",
                                    "line": 59
                                }
                            ],
                            "summaryComponent": "a tooltip for interactive data display"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<Legend />",
                                    "line": 60
                                }
                            ],
                            "summaryComponent": "a legend"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 61
                                }
                            ],
                            "summaryComponent": "a monotone line representing the price, styled in purple and without dots"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 52
                                }
                            ],
                            "summaryComponent": "container is set to occupy the full width and a fixed height"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<div style={{ marginTop: \"2rem\" }}>",
                                    "line": 48
                                }
                            ],
                            "summaryComponent": "a margin at the top for spacing"
                        }
                    ],
                    "low_unstructured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "<div style={{ marginTop: \"2rem\" }}>",
                                    "line": 48
                                }
                            ],
                            "summaryComponent": "renders a styled container"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<h3>",
                                    "line": 49
                                },
                                {
                                    "code": "{company} ({ticker})",
                                    "line": 50
                                }
                            ],
                            "summaryComponent": "displaying a company name and ticker"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 52
                                },
                                {
                                    "code": "<LineChart",
                                    "line": 53
                                }
                            ],
                            "summaryComponent": "along with a responsive line chart"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 61
                                }
                            ],
                            "summaryComponent": "of stock prices"
                        }
                    ],
                    "low_structured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "<h3>",
                                    "line": 49
                                },
                                {
                                    "code": "{company} ({ticker})",
                                    "line": 50
                                }
                            ],
                            "summaryComponent": "Displays company name and ticker"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 52
                                },
                                {
                                    "code": "<LineChart",
                                    "line": 53
                                },
                                {
                                    "code": "data={chartData}",
                                    "line": 54
                                },
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 61
                                }
                            ],
                            "summaryComponent": "Renders a responsive line chart of stock prices"
                        }
                    ],
                    "medium_structured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "<div style={{ marginTop: \"2rem\" }}>",
                                    "line": 48
                                }
                            ],
                            "summaryComponent": "Renders a container with a top margin"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<h3>",
                                    "line": 49
                                },
                                {
                                    "code": "{company} ({ticker})",
                                    "line": 50
                                }
                            ],
                            "summaryComponent": "Displays the company name and ticker in a heading"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 52
                                },
                                {
                                    "code": "<LineChart",
                                    "line": 53
                                }
                            ],
                            "summaryComponent": "Shows a responsive line chart"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<XAxis dataKey=\"date\" />",
                                    "line": 57
                                },
                                {
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                                    "line": 58
                                },
                                {
                                    "code": "<Tooltip />",
                                    "line": 59
                                },
                                {
                                    "code": "<Legend />",
                                    "line": 60
                                },
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 61
                                }
                            ],
                            "summaryComponent": "Chart includes X and Y axes, a tooltip, a legend, and a line for price data"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 52
                                }
                            ],
                            "summaryComponent": "The chart adapts to the container's width and has a fixed height"
                        }
                    ],
                    "high_structured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "<div style={{ marginTop: \"2rem\" }}>",
                                    "line": 48
                                }
                            ],
                            "summaryComponent": "Creates a div container with a top margin for spacing"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<h3>",
                                    "line": 49
                                },
                                {
                                    "code": "{company} ({ticker})",
                                    "line": 50
                                }
                            ],
                            "summaryComponent": "Displays a heading showing the company name and ticker symbol"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 52
                                }
                            ],
                            "summaryComponent": "Renders a ResponsiveContainer from Recharts"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 52
                                }
                            ],
                            "summaryComponent": "Sets width to 100% and height to 300px for adaptability"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<LineChart",
                                    "line": 53
                                }
                            ],
                            "summaryComponent": "Contains a LineChart component"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "data={chartData}",
                                    "line": 54
                                }
                            ],
                            "summaryComponent": "Uses provided chartData for plotting"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "margin={{ top: 10, right: 30, left: 0, bottom: 0 }}",
                                    "line": 55
                                }
                            ],
                            "summaryComponent": "Sets chart margins for layout"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<XAxis dataKey=\"date\" />",
                                    "line": 57
                                },
                                {
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                                    "line": 58
                                }
                            ],
                            "summaryComponent": "Adds an XAxis for dates and a YAxis with automatic domain"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<Tooltip />",
                                    "line": 59
                                }
                            ],
                            "summaryComponent": "Includes a Tooltip for interactive data display"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<Legend />",
                                    "line": 60
                                }
                            ],
                            "summaryComponent": "Includes a Legend for chart clarity"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 61
                                }
                            ],
                            "summaryComponent": "Plots a monotone Line for price data, styled with a purple stroke and no dots"
                        }
                    ]
                },
                "lines": [
                    48,
                    64
                ],
                "title": "Stock Chart Rendering Component",
                "selectedDetailLevel": "medium",
                "editPromptStructured": null,
                "createdAt": 1755627942000,
                "editPromptValue": "",
                "editPromptDetailLevel": null,
                "selectedStructured": "unstructured",
                "summaryData": {
                    "medium_unstructured": "This snippet creates a styled section that shows the company name and ticker symbol, followed by a responsive line chart visualizing stock price data. The chart includes axes, a legend, a tooltip, and a single line representing price over time. The layout ensures the chart fits well within its container.",
                    "title": "Stock Chart Rendering Component",
                    "low_unstructured": "This code renders a styled container displaying a company name and ticker, along with a responsive line chart of stock prices.",
                    "low_structured": "• Displays company name and ticker\n• Renders a responsive line chart of stock prices",
                    "medium_structured": "• Renders a container with a top margin\n• Displays the company name and ticker in a heading\n• Shows a responsive line chart\n  ◦ Chart includes X and Y axes, a tooltip, a legend, and a line for price data\n  ◦ The chart adapts to the container's width and has a fixed height",
                    "high_unstructured": "This code defines a React component section that displays a heading with the company name and ticker, followed by a responsive line chart visualizing stock price data. The chart is built using Recharts components, including X and Y axes, a tooltip for interactive data display, a legend, and a monotone line representing the price, styled in purple and without dots. The chart's container is set to occupy the full width and a fixed height, with a margin at the top for spacing, ensuring a clean and adaptive layout within the application.",
                    "high_structured": "• Creates a div container with a top margin for spacing\n• Displays a heading showing the company name and ticker symbol\n• Renders a ResponsiveContainer from Recharts\n  ◦ Sets width to 100% and height to 300px for adaptability\n  ◦ Contains a LineChart component\n    ◦ Uses provided chartData for plotting\n    ◦ Sets chart margins for layout\n    ◦ Adds an XAxis for dates and a YAxis with automatic domain\n    ◦ Includes a Tooltip for interactive data display\n    ◦ Includes a Legend for chart clarity\n    ◦ Plots a monotone Line for price data, styled with a purple stroke and no dots"
                },
                "metadata": {
                    "offset": 961,
                    "originalCode": "    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>",
                    "fullPath": "/project/workspace/frontend/src/StockChart.jsx",
                    "id": "81a0486b-2853-4c67-aa49-ff8f36a1c15c",
                    "filename": "StockChart.jsx"
                }
            }
        },
        "timestamp": "2025-08-19 22:25:42.000",
        "event": "create_new_section",
        "id": "QSfyjFh1Z0yVARyUbaSb"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 7,
            "section_id": "81a0486b-2853-4c67-aa49-ff8f36a1c15c",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:25:42.000",
        "event": "mapping_hover",
        "id": "WxTjqaZ8YDH6F9eACdUO"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "unstructured",
            "section_id": "81a0486b-2853-4c67-aa49-ff8f36a1c15c",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:25:42.000",
        "event": "mapping_unhover",
        "id": "t7l2BxvoAIdai04MpSSx"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 8,
            "section_id": "81a0486b-2853-4c67-aa49-ff8f36a1c15c",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:25:42.000",
        "event": "mapping_hover",
        "id": "tLQvgIM7ux169v9wUaOD"
    },
    {
        "source": "backend",
        "data": {
            "code": "48:     <div style={{ marginTop: \"2rem\" }}>\n49:       <h3>\n50:         {company} ({ticker})\n51:       </h3>\n52:       <ResponsiveContainer width=\"100%\" height={300}>\n53:         <LineChart\n54:           data={chartData}\n55:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n56:         >\n57:           <XAxis dataKey=\"date\" />\n58:           <YAxis domain={[\"auto\", \"auto\"]} />\n59:           <Tooltip />\n60:           <Legend />\n61:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n62:         </LineChart>\n63:       </ResponsiveContainer>\n64:     </div>",
            "summary": "This code defines a React component section that displays a heading with the company name and ticker, followed by a responsive line chart visualizing stock price data. The chart is built using Recharts components, including X and Y axes, a tooltip for interactive data display, a legend, and a monotone line representing the price, styled in purple and without dots. The chart's container is set to occupy the full width and a fixed height, with a margin at the top for spacing, ensuring a clean and adaptive layout within the application.",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "<div style={{ marginTop: \"2rem\" }}>",
                            "line": 48
                        }
                    ],
                    "summaryComponent": "a React component section"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<h3>",
                            "line": 49
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 50
                        }
                    ],
                    "summaryComponent": "displays a heading with the company name and ticker"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 52
                        },
                        {
                            "code": "<LineChart",
                            "line": 53
                        },
                        {
                            "code": "data={chartData}",
                            "line": 54
                        }
                    ],
                    "summaryComponent": "a responsive line chart visualizing stock price data"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 52
                        },
                        {
                            "code": "<LineChart",
                            "line": 53
                        },
                        {
                            "code": "<XAxis dataKey=\"date\" />",
                            "line": 57
                        },
                        {
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                            "line": 58
                        },
                        {
                            "code": "<Tooltip />",
                            "line": 59
                        },
                        {
                            "code": "<Legend />",
                            "line": 60
                        },
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 61
                        }
                    ],
                    "summaryComponent": "built using Recharts components"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<XAxis dataKey=\"date\" />",
                            "line": 57
                        },
                        {
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                            "line": 58
                        }
                    ],
                    "summaryComponent": "X and Y axes"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<Tooltip />",
                            "line": 59
                        }
                    ],
                    "summaryComponent": "a tooltip for interactive data display"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<Legend />",
                            "line": 60
                        }
                    ],
                    "summaryComponent": "a legend"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 61
                        }
                    ],
                    "summaryComponent": "a monotone line representing the price, styled in purple and without dots"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 52
                        }
                    ],
                    "summaryComponent": "container is set to occupy the full width and a fixed height"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<div style={{ marginTop: \"2rem\" }}>",
                            "line": 48
                        }
                    ],
                    "summaryComponent": "a margin at the top for spacing"
                }
            ]
        },
        "timestamp": "2025-08-19 22:25:42.000",
        "event": "map_summary_code",
        "id": "tMNojQKLmxUjTOfKIm81"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 8,
            "section_id": "81a0486b-2853-4c67-aa49-ff8f36a1c15c",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:25:43.000",
        "event": "mapping_hover",
        "id": "FiFMS9z2NOviDcCbdfaj"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "unstructured",
            "section_id": "81a0486b-2853-4c67-aa49-ff8f36a1c15c",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:25:43.000",
        "event": "mapping_unhover",
        "id": "PlfKaxRaRYSuE59e8KRL"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "unstructured",
            "section_id": "81a0486b-2853-4c67-aa49-ff8f36a1c15c",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:25:43.000",
        "event": "mapping_unhover",
        "id": "VU3yF0gwtqZAwoA8q7By"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "unstructured",
            "section_id": "81a0486b-2853-4c67-aa49-ff8f36a1c15c",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:25:44.000",
        "event": "mapping_unhover",
        "id": "Q6aviqOS64P6sd9Xt3k6"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 2,
            "section_id": "81a0486b-2853-4c67-aa49-ff8f36a1c15c",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:25:44.000",
        "event": "mapping_hover",
        "id": "T56LNBb5BX7YYcQwEb3G"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "unstructured",
            "section_id": "81a0486b-2853-4c67-aa49-ff8f36a1c15c",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:25:44.000",
        "event": "mapping_unhover",
        "id": "YoyruLYQMlskFih5hKCH"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 0,
            "section_id": "81a0486b-2853-4c67-aa49-ff8f36a1c15c",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:25:44.000",
        "event": "mapping_hover",
        "id": "rVJgI15Yjm3VdQjABtny"
    },
    {
        "source": "frontend",
        "data": {
            "before_structured": "unstructured",
            "after_structured": "unstructured",
            "section_id": "81a0486b-2853-4c67-aa49-ff8f36a1c15c",
            "before_detail_level": "medium",
            "after_detail_level": "high"
        },
        "timestamp": "2025-08-19 22:25:48.000",
        "event": "change_summary_level",
        "id": "AtxY3exJZ7DRlA5WxEku"
    },
    {
        "source": "frontend",
        "data": {
            "before_structured": "unstructured",
            "after_structured": "structured",
            "section_id": "81a0486b-2853-4c67-aa49-ff8f36a1c15c",
            "before_detail_level": "high",
            "after_detail_level": "high"
        },
        "timestamp": "2025-08-19 22:25:50.000",
        "event": "change_summary_level",
        "id": "hfvaxClCob9WltxHyF6L"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "81a0486b-2853-4c67-aa49-ff8f36a1c15c",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:25:51.000",
        "event": "mapping_unhover",
        "id": "4n6DJSgYddbswmtQ0rNk"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 4,
            "section_id": "81a0486b-2853-4c67-aa49-ff8f36a1c15c",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:25:51.000",
        "event": "mapping_hover",
        "id": "FNnCAYP38HIWnLmU7iyq"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "81a0486b-2853-4c67-aa49-ff8f36a1c15c",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:25:51.000",
        "event": "mapping_unhover",
        "id": "FqXcsGhCslJZmEpO5tBm"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 5,
            "section_id": "81a0486b-2853-4c67-aa49-ff8f36a1c15c",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:25:51.000",
        "event": "mapping_hover",
        "id": "JMnY3Bb5VoQajeK5RJKU"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 7,
            "section_id": "81a0486b-2853-4c67-aa49-ff8f36a1c15c",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:25:51.000",
        "event": "mapping_hover",
        "id": "MQCfzg1n6atx8TmXb30r"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "81a0486b-2853-4c67-aa49-ff8f36a1c15c",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:25:51.000",
        "event": "mapping_unhover",
        "id": "OL1kXHPKhiDDain6XO5K"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "81a0486b-2853-4c67-aa49-ff8f36a1c15c",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:25:51.000",
        "event": "mapping_unhover",
        "id": "PKnpNBUujR5iq3cUVnhL"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 2,
            "section_id": "81a0486b-2853-4c67-aa49-ff8f36a1c15c",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:25:51.000",
        "event": "mapping_hover",
        "id": "RFUC5aAM2HxFJWWT03eG"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "81a0486b-2853-4c67-aa49-ff8f36a1c15c",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:25:51.000",
        "event": "mapping_unhover",
        "id": "RqeIqUA0o5KV7M3PRXNG"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 1,
            "section_id": "81a0486b-2853-4c67-aa49-ff8f36a1c15c",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:25:51.000",
        "event": "mapping_hover",
        "id": "S8ZX7NFzvCQh8hkFk3iy"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 3,
            "section_id": "81a0486b-2853-4c67-aa49-ff8f36a1c15c",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:25:51.000",
        "event": "mapping_hover",
        "id": "ZzvZMxc8ltQL14rDwIWS"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 0,
            "section_id": "81a0486b-2853-4c67-aa49-ff8f36a1c15c",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:25:51.000",
        "event": "mapping_hover",
        "id": "v9k3thvuUxqTCXAwSqEd"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "81a0486b-2853-4c67-aa49-ff8f36a1c15c",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:25:51.000",
        "event": "mapping_unhover",
        "id": "wkhSTAAMR2g5GHfAr5pC"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "81a0486b-2853-4c67-aa49-ff8f36a1c15c",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:25:59.000",
        "event": "mapping_unhover",
        "id": "2pTv2CqZOuPaHQxWMPTm"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "81a0486b-2853-4c67-aa49-ff8f36a1c15c",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:25:59.000",
        "event": "mapping_unhover",
        "id": "MSKAJq6Sy9mNzFZjNHxr"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 10,
            "section_id": "81a0486b-2853-4c67-aa49-ff8f36a1c15c",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:25:59.000",
        "event": "mapping_hover",
        "id": "VWVflD2zFAiBoXaDINvg"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 8,
            "section_id": "81a0486b-2853-4c67-aa49-ff8f36a1c15c",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:25:59.000",
        "event": "mapping_hover",
        "id": "Z1WGAXBvgfxCSoDNihbx"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "81a0486b-2853-4c67-aa49-ff8f36a1c15c",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:25:59.000",
        "event": "mapping_unhover",
        "id": "ZKt08OOv7hHade1jwYSe"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "81a0486b-2853-4c67-aa49-ff8f36a1c15c",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:26:00.000",
        "event": "mapping_unhover",
        "id": "Rv0MYQiW430CeRKbXx9M"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 7,
            "section_id": "81a0486b-2853-4c67-aa49-ff8f36a1c15c",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:26:00.000",
        "event": "mapping_hover",
        "id": "chp0swiaES6Wz7rOv6mO"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 7,
            "section_id": "81a0486b-2853-4c67-aa49-ff8f36a1c15c",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:26:01.000",
        "event": "mapping_hover",
        "id": "APjvAWsBntECwSNtWcj2"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "81a0486b-2853-4c67-aa49-ff8f36a1c15c",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:26:01.000",
        "event": "mapping_unhover",
        "id": "cMn49Srs2CI99luCarJR"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 8,
            "section_id": "81a0486b-2853-4c67-aa49-ff8f36a1c15c",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:26:01.000",
        "event": "mapping_hover",
        "id": "rVbs4VQ2KFK7EgEoCHwa"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "81a0486b-2853-4c67-aa49-ff8f36a1c15c",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:26:03.000",
        "event": "mapping_unhover",
        "id": "FOGL4XS0w9kV5DcIYPdk"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 10,
            "section_id": "81a0486b-2853-4c67-aa49-ff8f36a1c15c",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:26:03.000",
        "event": "mapping_hover",
        "id": "FVx4BrFRNLlxYxT4IY4j"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "81a0486b-2853-4c67-aa49-ff8f36a1c15c",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:26:03.000",
        "event": "mapping_unhover",
        "id": "cEedjQkT8gx7a0ndfdUI"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 9,
            "section_id": "81a0486b-2853-4c67-aa49-ff8f36a1c15c",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:26:03.000",
        "event": "mapping_hover",
        "id": "sL9iE6b1pp0pnKqgcQmX"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "81a0486b-2853-4c67-aa49-ff8f36a1c15c",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:26:04.000",
        "event": "mapping_unhover",
        "id": "29dYHNb91whjxiEl47cB"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 9,
            "section_id": "81a0486b-2853-4c67-aa49-ff8f36a1c15c",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:26:04.000",
        "event": "mapping_hover",
        "id": "IUfPXAT3oEtLdmxJUCdF"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "81a0486b-2853-4c67-aa49-ff8f36a1c15c",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:26:07.000",
        "event": "mapping_unhover",
        "id": "RUScjQlvJrA6zXMalnVV"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "81a0486b-2853-4c67-aa49-ff8f36a1c15c",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:26:07.000",
        "event": "mapping_unhover",
        "id": "giEZ4tKWZw0E4Z43ZO8p"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 10,
            "section_id": "81a0486b-2853-4c67-aa49-ff8f36a1c15c",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:26:07.000",
        "event": "mapping_hover",
        "id": "oSbE6kIyJzF29BbdQcoX"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 9,
            "section_id": "81a0486b-2853-4c67-aa49-ff8f36a1c15c",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:26:13.000",
        "event": "mapping_hover",
        "id": "AvjwdgWCGXpEUSOCFsxF"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 10,
            "section_id": "81a0486b-2853-4c67-aa49-ff8f36a1c15c",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:26:13.000",
        "event": "mapping_hover",
        "id": "XjOG641wOQEVT3V83fjs"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "81a0486b-2853-4c67-aa49-ff8f36a1c15c",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:26:13.000",
        "event": "mapping_unhover",
        "id": "vPe4o5XhnvwISee2Nu5H"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "81a0486b-2853-4c67-aa49-ff8f36a1c15c",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:26:15.000",
        "event": "mapping_unhover",
        "id": "98FJEnSkISZKY9FqiosO"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 10,
            "section_id": "81a0486b-2853-4c67-aa49-ff8f36a1c15c",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:26:15.000",
        "event": "mapping_hover",
        "id": "XQ4LTUlvRrR27yjNmCKI"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "81a0486b-2853-4c67-aa49-ff8f36a1c15c",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:26:15.000",
        "event": "mapping_unhover",
        "id": "cFMP5aMmcPvqqrnSVdgs"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 10,
            "section_id": "81a0486b-2853-4c67-aa49-ff8f36a1c15c",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:26:15.000",
        "event": "mapping_hover",
        "id": "f1IoJrEM7WpQyuWuq6Xx"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "81a0486b-2853-4c67-aa49-ff8f36a1c15c",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:26:19.000",
        "event": "mapping_unhover",
        "id": "2dxOXh7sWQJ0ZLBGwSYJ"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "81a0486b-2853-4c67-aa49-ff8f36a1c15c",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:26:19.000",
        "event": "mapping_unhover",
        "id": "7hli80BDXATxHhwy3zuK"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 8,
            "section_id": "81a0486b-2853-4c67-aa49-ff8f36a1c15c",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:26:19.000",
        "event": "mapping_hover",
        "id": "Y1hofDrlBRYThFzt8LnV"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 9,
            "section_id": "81a0486b-2853-4c67-aa49-ff8f36a1c15c",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:26:19.000",
        "event": "mapping_hover",
        "id": "l7UvR4sZlhW7T5FgsxaS"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 7,
            "section_id": "81a0486b-2853-4c67-aa49-ff8f36a1c15c",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:26:19.000",
        "event": "mapping_hover",
        "id": "lC8UTLFsKnes68v1Kyf7"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "81a0486b-2853-4c67-aa49-ff8f36a1c15c",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:26:19.000",
        "event": "mapping_unhover",
        "id": "vbmEZXahc7P2pMYvqTzw"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "81a0486b-2853-4c67-aa49-ff8f36a1c15c",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:26:27.000",
        "event": "mapping_unhover",
        "id": "Dby8qF1dPhFGFox0l3UE"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "81a0486b-2853-4c67-aa49-ff8f36a1c15c",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:26:27.000",
        "event": "mapping_unhover",
        "id": "jtLrBU6idPYaqaQv9kRg"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 8,
            "section_id": "81a0486b-2853-4c67-aa49-ff8f36a1c15c",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:26:27.000",
        "event": "mapping_hover",
        "id": "m32cTk2DIyYBEWM29kJ7"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "81a0486b-2853-4c67-aa49-ff8f36a1c15c",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:26:40.000",
        "event": "mapping_unhover",
        "id": "HDHblIjZfIS1kwSDrmbb"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 7,
            "section_id": "81a0486b-2853-4c67-aa49-ff8f36a1c15c",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:26:40.000",
        "event": "mapping_hover",
        "id": "PVjTbribx9Z9cQor8iCt"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 6,
            "section_id": "81a0486b-2853-4c67-aa49-ff8f36a1c15c",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:26:40.000",
        "event": "mapping_hover",
        "id": "t3IIE3nRKuTQjcFdXbpa"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "81a0486b-2853-4c67-aa49-ff8f36a1c15c",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:26:41.000",
        "event": "mapping_unhover",
        "id": "LjmrEPOUO9OuphKkVp7H"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 7,
            "section_id": "81a0486b-2853-4c67-aa49-ff8f36a1c15c",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:26:42.000",
        "event": "mapping_hover",
        "id": "3UP2kDZY82KLuhsZdqfA"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 9,
            "section_id": "81a0486b-2853-4c67-aa49-ff8f36a1c15c",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:26:42.000",
        "event": "mapping_hover",
        "id": "B1ETHfsvTAovMgf1xizz"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 10,
            "section_id": "81a0486b-2853-4c67-aa49-ff8f36a1c15c",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:26:42.000",
        "event": "mapping_hover",
        "id": "BsNayHi2Y8fdNLdNDoio"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "81a0486b-2853-4c67-aa49-ff8f36a1c15c",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:26:42.000",
        "event": "mapping_unhover",
        "id": "Dmtt8I4rPQlCRYEgrHVv"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "81a0486b-2853-4c67-aa49-ff8f36a1c15c",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:26:42.000",
        "event": "mapping_unhover",
        "id": "V4zlvWkzdUkx5EOUY4gx"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 6,
            "section_id": "81a0486b-2853-4c67-aa49-ff8f36a1c15c",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:26:42.000",
        "event": "mapping_hover",
        "id": "XtQcDJZkEHG0ya0CPzGN"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "81a0486b-2853-4c67-aa49-ff8f36a1c15c",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:26:42.000",
        "event": "mapping_unhover",
        "id": "ZnUNbM58kVPKqZSdZiGF"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 8,
            "section_id": "81a0486b-2853-4c67-aa49-ff8f36a1c15c",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:26:42.000",
        "event": "mapping_hover",
        "id": "gQWF6fJRTlNGbo7IsVsZ"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 7,
            "section_id": "81a0486b-2853-4c67-aa49-ff8f36a1c15c",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:26:42.000",
        "event": "mapping_hover",
        "id": "mRrmpUP1N7LKq8GuXy8s"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "81a0486b-2853-4c67-aa49-ff8f36a1c15c",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:26:42.000",
        "event": "mapping_unhover",
        "id": "t4JQJqdJJFzVpIK70nmV"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "81a0486b-2853-4c67-aa49-ff8f36a1c15c",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:26:42.000",
        "event": "mapping_unhover",
        "id": "yHJpQCNT6mgf54ylWaDZ"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "81a0486b-2853-4c67-aa49-ff8f36a1c15c",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:26:47.000",
        "event": "mapping_unhover",
        "id": "1W1peFzSmaRZi3VEKGg7"
    },
    {
        "source": "frontend",
        "data": {
            "structured": "structured",
            "section_id": "81a0486b-2853-4c67-aa49-ff8f36a1c15c",
            "detail_level": "high",
            "summary": "• Creates a div container with a top margin for spacing\n• Displays a heading showing the company name and ticker symbol\n• Renders a ResponsiveContainer from Recharts\n  ◦ Sets width to 100% and height to 300px for adaptability\n  ◦ Contains a LineChart component\n    ◦ Uses provided chartData for plotting\n    ◦ Sets chart margins for layout\n    ◦ Adds an XAxis for dates and a YAxis with automatic domain\n    ◦ Includes a Tooltip for interactive data display\n    ◦ Includes a Legend for chart clarity\n    ◦ Plots a monotone Line for price data, styled with a purple stroke and no dots"
        },
        "timestamp": "2025-08-19 22:26:48.000",
        "event": "click_edit_in_prompt",
        "id": "jUk4njivsJVmpAMM0BJr"
    },
    {
        "source": "frontend",
        "data": {
            "original_summary": "• Creates a div container with a top margin for spacing\n• Displays a heading showing the company name and ticker symbol\n• Renders a ResponsiveContainer from Recharts\n  ◦ Sets width to 100% and height to 300px for adaptability\n  ◦ Contains a LineChart component\n    ◦ Uses provided chartData for plotting\n    ◦ Sets chart margins for layout\n    ◦ Adds an XAxis for dates and a YAxis with automatic domain\n    ◦ Includes a Tooltip for interactive data display\n    ◦ Includes a Legend for chart clarity\n    ◦ Plots a monotone Line for price data, styled with a purple stroke and no dots",
            "instruction": "use formatDateString function to change XAxis \"Adds an XAxis for dates and a YAxis with automatic domain\"",
            "section_id": "81a0486b-2853-4c67-aa49-ff8f36a1c15c",
            "detail_level": "high",
            "structured": "structured"
        },
        "timestamp": "2025-08-19 22:28:07.000",
        "event": "apply_instruction_summary",
        "id": "VlXjcep3T127snqWqV0K"
    },
    {
        "source": "backend",
        "data": {
            "instruction": "use formatDateString function to change XAxis \"Adds an XAxis for dates and a YAxis with automatic domain\"",
            "original_code": "    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>",
            "original_summary": "• Creates a div container with a top margin for spacing\n• Displays a heading showing the company name and ticker symbol\n• Renders a ResponsiveContainer from Recharts\n  ◦ Sets width to 100% and height to 300px for adaptability\n  ◦ Contains a LineChart component\n    ◦ Uses provided chartData for plotting\n    ◦ Sets chart margins for layout\n    ◦ Adds an XAxis for dates and a YAxis with automatic domain\n    ◦ Includes a Tooltip for interactive data display\n    ◦ Includes a Legend for chart clarity\n    ◦ Plots a monotone Line for price data, styled with a purple stroke and no dots",
            "updated_summary": "• Creates a div container with a top margin for spacing  \n• Displays a heading showing the company name and ticker symbol  \n• Renders a ResponsiveContainer from Recharts  \n  ◦ Sets width to 100% and height to 300px for adaptability  \n  ◦ Contains a LineChart component  \n    ◦ Uses provided chartData for plotting  \n    ◦ Sets chart margins for layout  \n    ◦ Adds an XAxis for dates, formatting the date labels using the formatDateString function, and a YAxis with automatic domain  \n    ◦ Includes a Tooltip for interactive data display  \n    ◦ Includes a Legend for chart clarity  \n    ◦ Plots a monotone Line for price data, styled with a purple stroke and no dots"
        },
        "timestamp": "2025-08-19 22:28:08.000",
        "event": "apply_instruction_summary",
        "id": "Gy6R6oTX5a86djTnPMq8"
    },
    {
        "source": "frontend",
        "data": {
            "edited_summary": "• Creates a div container with a top margin for spacing  \n• Displays a heading showing the company name and ticker symbol  \n• Renders a ResponsiveContainer from Recharts  \n  ◦ Sets width to 100% and height to 300px for adaptability  \n  ◦ Contains a LineChart component  \n    ◦ Uses provided chartData for plotting  \n    ◦ Sets chart margins for layout  \n    ◦ Adds an XAxis for dates, formatting the date labels using the formatDateString function, and a YAxis with automatic domain  \n    ◦ Includes a Tooltip for interactive data display  \n    ◦ Includes a Legend for chart clarity  \n    ◦ Plots a monotone Line for price data, styled with a purple stroke and no dots",
            "structured": "structured",
            "section_id": "81a0486b-2853-4c67-aa49-ff8f36a1c15c",
            "detail_level": "high",
            "original_summary": "• Creates a div container with a top margin for spacing\n• Displays a heading showing the company name and ticker symbol\n• Renders a ResponsiveContainer from Recharts\n  ◦ Sets width to 100% and height to 300px for adaptability\n  ◦ Contains a LineChart component\n    ◦ Uses provided chartData for plotting\n    ◦ Sets chart margins for layout\n    ◦ Adds an XAxis for dates and a YAxis with automatic domain\n    ◦ Includes a Tooltip for interactive data display\n    ◦ Includes a Legend for chart clarity\n    ◦ Plots a monotone Line for price data, styled with a purple stroke and no dots"
        },
        "timestamp": "2025-08-19 22:28:16.000",
        "event": "commit_modified_summary",
        "id": "X3m5zgzVNqEtQzdsg03D"
    },
    {
        "source": "backend",
        "data": {
            "edited_summary": "• Creates a div container with a top margin for spacing  \n• Displays a heading showing the company name and ticker symbol  \n• Renders a ResponsiveContainer from Recharts  \n  ◦ Sets width to 100% and height to 300px for adaptability  \n  ◦ Contains a LineChart component  \n    ◦ Uses provided chartData for plotting  \n    ◦ Sets chart margins for layout  \n    ◦ Adds an XAxis for dates, formatting the date labels using the formatDateString function, and a YAxis with automatic domain  \n    ◦ Includes a Tooltip for interactive data display  \n    ◦ Includes a Legend for chart clarity  \n    ◦ Plots a monotone Line for price data, styled with a purple stroke and no dots",
            "structured_type": "structured",
            "updated_code": "<div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatDateString} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>",
            "original_code": "    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>",
            "detail_level": "high",
            "original_summary": "• Creates a div container with a top margin for spacing\n• Displays a heading showing the company name and ticker symbol\n• Renders a ResponsiveContainer from Recharts\n  ◦ Sets width to 100% and height to 300px for adaptability\n  ◦ Contains a LineChart component\n    ◦ Uses provided chartData for plotting\n    ◦ Sets chart margins for layout\n    ◦ Adds an XAxis for dates and a YAxis with automatic domain\n    ◦ Includes a Tooltip for interactive data display\n    ◦ Includes a Legend for chart clarity\n    ◦ Plots a monotone Line for price data, styled with a purple stroke and no dots"
        },
        "timestamp": "2025-08-19 22:28:18.000",
        "event": "modify_summary_mediation",
        "id": "QuH5Tekp8dkeVHkeGkW9"
    },
    {
        "source": "backend",
        "data": {
            "new_code": "    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatDateString} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>",
            "new_summary": {
                "medium_unstructured": "This snippet creates a styled section that shows the company name and ticker symbol, followed by a responsive line chart visualizing stock price data. The chart now formats the X-axis date labels using a custom formatter, in addition to including axes, a legend, a tooltip, and a single line representing price over time. The layout ensures the chart fits well within its container.",
                "title": "Stock Chart Rendering Component with Custom X-Axis Date Formatting",
                "low_unstructured": "This code renders a styled container displaying a company name and ticker, along with a responsive line chart of stock prices, now featuring custom-formatted X-axis date labels.",
                "low_structured": "• Displays company name and ticker\n• Renders a responsive line chart of stock prices with custom-formatted X-axis date labels",
                "medium_structured": "• Renders a container with a top margin\n• Displays the company name and ticker in a heading\n• Shows a responsive line chart\n  ◦ Chart includes X and Y axes, with the X-axis dates now formatted using a custom formatter\n  ◦ Includes a tooltip, a legend, and a line for price data\n  ◦ The chart adapts to the container's width and has a fixed height",
                "high_unstructured": "This code defines a React component section that displays a heading with the company name and ticker, followed by a responsive line chart visualizing stock price data. The chart is built using Recharts components, including X and Y axes—with the X-axis now displaying dates formatted by a custom function—a tooltip for interactive data display, a legend, and a monotone line representing the price, styled in purple and without dots. The chart's container is set to occupy the full width and a fixed height, with a margin at the top for spacing, ensuring a clean and adaptive layout within the application.",
                "high_structured": "• Creates a div container with a top margin for spacing\n• Displays a heading showing the company name and ticker symbol\n• Renders a ResponsiveContainer from Recharts\n  ◦ Sets width to 100% and height to 300px for adaptability\n  ◦ Contains a LineChart component\n    ◦ Uses provided chartData for plotting\n    ◦ Sets chart margins for layout\n    ◦ Adds an XAxis for dates, now using a custom tickFormatter to format date labels\n    ◦ Adds a YAxis with automatic domain\n    ◦ Includes a Tooltip for interactive data display\n    ◦ Includes a Legend for chart clarity\n    ◦ Plots a monotone Line for price data, styled with a purple stroke and no dots"
            },
            "original_code": "    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatDateString} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>",
            "old_summary": {
                "medium_unstructured": "This snippet creates a styled section that shows the company name and ticker symbol, followed by a responsive line chart visualizing stock price data. The chart includes axes, a legend, a tooltip, and a single line representing price over time. The layout ensures the chart fits well within its container.",
                "title": "Stock Chart Rendering Component",
                "low_unstructured": "This code renders a styled container displaying a company name and ticker, along with a responsive line chart of stock prices.",
                "low_structured": "• Displays company name and ticker\n• Renders a responsive line chart of stock prices",
                "medium_structured": "• Renders a container with a top margin\n• Displays the company name and ticker in a heading\n• Shows a responsive line chart\n  ◦ Chart includes X and Y axes, a tooltip, a legend, and a line for price data\n  ◦ The chart adapts to the container's width and has a fixed height",
                "high_unstructured": "This code defines a React component section that displays a heading with the company name and ticker, followed by a responsive line chart visualizing stock price data. The chart is built using Recharts components, including X and Y axes, a tooltip for interactive data display, a legend, and a monotone line representing the price, styled in purple and without dots. The chart's container is set to occupy the full width and a fixed height, with a margin at the top for spacing, ensuring a clean and adaptive layout within the application.",
                "high_structured": "• Creates a div container with a top margin for spacing\n• Displays a heading showing the company name and ticker symbol\n• Renders a ResponsiveContainer from Recharts\n  ◦ Sets width to 100% and height to 300px for adaptability\n  ◦ Contains a LineChart component\n    ◦ Uses provided chartData for plotting\n    ◦ Sets chart margins for layout\n    ◦ Adds an XAxis for dates and a YAxis with automatic domain\n    ◦ Includes a Tooltip for interactive data display\n    ◦ Includes a Legend for chart clarity\n    ◦ Plots a monotone Line for price data, styled with a purple stroke and no dots"
            }
        },
        "timestamp": "2025-08-19 22:28:24.000",
        "event": "summarize_modified_code",
        "id": "TGOSKOfw264LAih2YfnQ"
    },
    {
        "source": "backend",
        "data": {
            "code": "48:     <div style={{ marginTop: \"2rem\" }}>\n49:       <h3>\n50:         {company} ({ticker})\n51:       </h3>\n52:       <ResponsiveContainer width=\"100%\" height={300}>\n53:         <LineChart\n54:           data={chartData}\n55:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n56:         >\n57:           <XAxis dataKey=\"date\" tickFormatter={formatDateString} />\n58:           <YAxis domain={[\"auto\", \"auto\"]} />\n59:           <Tooltip />\n60:           <Legend />\n61:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n62:         </LineChart>\n63:       </ResponsiveContainer>\n64:     </div>",
            "summary": "• Displays company name and ticker\n• Renders a responsive line chart of stock prices with custom-formatted X-axis date labels",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "<h3>",
                            "line": 49
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 50
                        }
                    ],
                    "summaryComponent": "Displays company name and ticker"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 52
                        },
                        {
                            "code": "<LineChart",
                            "line": 53
                        },
                        {
                            "code": "data={chartData}",
                            "line": 54
                        },
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                            "line": 57
                        },
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 61
                        }
                    ],
                    "summaryComponent": "Renders a responsive line chart of stock prices with custom-formatted X-axis date labels"
                }
            ]
        },
        "timestamp": "2025-08-19 22:28:26.000",
        "event": "map_summary_code",
        "id": "QpQhhmuJritK7OntnQHW"
    },
    {
        "source": "backend",
        "data": {
            "code": "48:     <div style={{ marginTop: \"2rem\" }}>\n49:       <h3>\n50:         {company} ({ticker})\n51:       </h3>\n52:       <ResponsiveContainer width=\"100%\" height={300}>\n53:         <LineChart\n54:           data={chartData}\n55:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n56:         >\n57:           <XAxis dataKey=\"date\" tickFormatter={formatDateString} />\n58:           <YAxis domain={[\"auto\", \"auto\"]} />\n59:           <Tooltip />\n60:           <Legend />\n61:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n62:         </LineChart>\n63:       </ResponsiveContainer>\n64:     </div>",
            "summary": "• Renders a container with a top margin\n• Displays the company name and ticker in a heading\n• Shows a responsive line chart\n  ◦ Chart includes X and Y axes, with the X-axis dates now formatted using a custom formatter\n  ◦ Includes a tooltip, a legend, and a line for price data\n  ◦ The chart adapts to the container's width and has a fixed height",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "<div style={{ marginTop: \"2rem\" }}>",
                            "line": 48
                        }
                    ],
                    "summaryComponent": "Renders a container with a top margin"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<h3>",
                            "line": 49
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 50
                        }
                    ],
                    "summaryComponent": "Displays the company name and ticker in a heading"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 52
                        },
                        {
                            "code": "<LineChart",
                            "line": 53
                        }
                    ],
                    "summaryComponent": "Shows a responsive line chart"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                            "line": 57
                        },
                        {
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                            "line": 58
                        }
                    ],
                    "summaryComponent": "Chart includes X and Y axes, with the X-axis dates now formatted using a custom formatter"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<Tooltip />",
                            "line": 59
                        },
                        {
                            "code": "<Legend />",
                            "line": 60
                        },
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 61
                        }
                    ],
                    "summaryComponent": "Includes a tooltip, a legend, and a line for price data"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 52
                        }
                    ],
                    "summaryComponent": "The chart adapts to the container's width and has a fixed height"
                }
            ]
        },
        "timestamp": "2025-08-19 22:28:27.000",
        "event": "map_summary_code",
        "id": "GAuw57eiobJwuDcaP8NA"
    },
    {
        "source": "backend",
        "data": {
            "code": "48:     <div style={{ marginTop: \"2rem\" }}>\n49:       <h3>\n50:         {company} ({ticker})\n51:       </h3>\n52:       <ResponsiveContainer width=\"100%\" height={300}>\n53:         <LineChart\n54:           data={chartData}\n55:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n56:         >\n57:           <XAxis dataKey=\"date\" tickFormatter={formatDateString} />\n58:           <YAxis domain={[\"auto\", \"auto\"]} />\n59:           <Tooltip />\n60:           <Legend />\n61:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n62:         </LineChart>\n63:       </ResponsiveContainer>\n64:     </div>",
            "summary": "This code renders a styled container displaying a company name and ticker, along with a responsive line chart of stock prices, now featuring custom-formatted X-axis date labels.",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "<div style={{ marginTop: \"2rem\" }}>",
                            "line": 48
                        }
                    ],
                    "summaryComponent": "renders a styled container"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<h3>",
                            "line": 49
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 50
                        }
                    ],
                    "summaryComponent": "displaying a company name and ticker"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 52
                        },
                        {
                            "code": "<LineChart",
                            "line": 53
                        }
                    ],
                    "summaryComponent": "along with a responsive line chart"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 61
                        }
                    ],
                    "summaryComponent": "of stock prices"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                            "line": 57
                        }
                    ],
                    "summaryComponent": "now featuring custom-formatted X-axis date labels"
                }
            ]
        },
        "timestamp": "2025-08-19 22:28:27.000",
        "event": "map_summary_code",
        "id": "iQdTGG6L30SRJzFfpTay"
    },
    {
        "source": "backend",
        "data": {
            "code": "48:     <div style={{ marginTop: \"2rem\" }}>\n49:       <h3>\n50:         {company} ({ticker})\n51:       </h3>\n52:       <ResponsiveContainer width=\"100%\" height={300}>\n53:         <LineChart\n54:           data={chartData}\n55:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n56:         >\n57:           <XAxis dataKey=\"date\" tickFormatter={formatDateString} />\n58:           <YAxis domain={[\"auto\", \"auto\"]} />\n59:           <Tooltip />\n60:           <Legend />\n61:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n62:         </LineChart>\n63:       </ResponsiveContainer>\n64:     </div>",
            "summary": "• Creates a div container with a top margin for spacing\n• Displays a heading showing the company name and ticker symbol\n• Renders a ResponsiveContainer from Recharts\n  ◦ Sets width to 100% and height to 300px for adaptability\n  ◦ Contains a LineChart component\n    ◦ Uses provided chartData for plotting\n    ◦ Sets chart margins for layout\n    ◦ Adds an XAxis for dates, now using a custom tickFormatter to format date labels\n    ◦ Adds a YAxis with automatic domain\n    ◦ Includes a Tooltip for interactive data display\n    ◦ Includes a Legend for chart clarity\n    ◦ Plots a monotone Line for price data, styled with a purple stroke and no dots",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "<div style={{ marginTop: \"2rem\" }}>",
                            "line": 48
                        }
                    ],
                    "summaryComponent": "Creates a div container with a top margin for spacing"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<h3>",
                            "line": 49
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 50
                        }
                    ],
                    "summaryComponent": "Displays a heading showing the company name and ticker symbol"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 52
                        }
                    ],
                    "summaryComponent": "Renders a ResponsiveContainer from Recharts"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 52
                        }
                    ],
                    "summaryComponent": "Sets width to 100% and height to 300px for adaptability"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<LineChart",
                            "line": 53
                        }
                    ],
                    "summaryComponent": "Contains a LineChart component"
                },
                {
                    "codeSegments": [
                        {
                            "code": "data={chartData}",
                            "line": 54
                        }
                    ],
                    "summaryComponent": "Uses provided chartData for plotting"
                },
                {
                    "codeSegments": [
                        {
                            "code": "margin={{ top: 10, right: 30, left: 0, bottom: 0 }}",
                            "line": 55
                        }
                    ],
                    "summaryComponent": "Sets chart margins for layout"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                            "line": 57
                        }
                    ],
                    "summaryComponent": "Adds an XAxis for dates, now using a custom tickFormatter to format date labels"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                            "line": 58
                        }
                    ],
                    "summaryComponent": "Adds a YAxis with automatic domain"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<Tooltip />",
                            "line": 59
                        }
                    ],
                    "summaryComponent": "Includes a Tooltip for interactive data display"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<Legend />",
                            "line": 60
                        }
                    ],
                    "summaryComponent": "Includes a Legend for chart clarity"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 61
                        }
                    ],
                    "summaryComponent": "Plots a monotone Line for price data, styled with a purple stroke and no dots"
                }
            ]
        },
        "timestamp": "2025-08-19 22:28:28.000",
        "event": "map_summary_code",
        "id": "oaudDK1WWvakRqiRep7V"
    },
    {
        "source": "backend",
        "data": {
            "code": "48:     <div style={{ marginTop: \"2rem\" }}>\n49:       <h3>\n50:         {company} ({ticker})\n51:       </h3>\n52:       <ResponsiveContainer width=\"100%\" height={300}>\n53:         <LineChart\n54:           data={chartData}\n55:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n56:         >\n57:           <XAxis dataKey=\"date\" tickFormatter={formatDateString} />\n58:           <YAxis domain={[\"auto\", \"auto\"]} />\n59:           <Tooltip />\n60:           <Legend />\n61:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n62:         </LineChart>\n63:       </ResponsiveContainer>\n64:     </div>",
            "summary": "This snippet creates a styled section that shows the company name and ticker symbol, followed by a responsive line chart visualizing stock price data. The chart now formats the X-axis date labels using a custom formatter, in addition to including axes, a legend, a tooltip, and a single line representing price over time. The layout ensures the chart fits well within its container.",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "<div style={{ marginTop: \"2rem\" }}>",
                            "line": 48
                        }
                    ],
                    "summaryComponent": "creates a styled section"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<h3>",
                            "line": 49
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 50
                        }
                    ],
                    "summaryComponent": "shows the company name and ticker symbol"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 52
                        },
                        {
                            "code": "<LineChart",
                            "line": 53
                        }
                    ],
                    "summaryComponent": "a responsive line chart"
                },
                {
                    "codeSegments": [
                        {
                            "code": "data={chartData}",
                            "line": 54
                        },
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 61
                        }
                    ],
                    "summaryComponent": "visualizing stock price data"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                            "line": 57
                        }
                    ],
                    "summaryComponent": "formats the X-axis date labels using a custom formatter"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                            "line": 57
                        },
                        {
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                            "line": 58
                        }
                    ],
                    "summaryComponent": "including axes"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<Legend />",
                            "line": 60
                        }
                    ],
                    "summaryComponent": "a legend"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<Tooltip />",
                            "line": 59
                        }
                    ],
                    "summaryComponent": "a tooltip"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 61
                        }
                    ],
                    "summaryComponent": "a single line representing price over time"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 52
                        }
                    ],
                    "summaryComponent": "the chart fits well within its container"
                }
            ]
        },
        "timestamp": "2025-08-19 22:28:29.000",
        "event": "map_summary_code",
        "id": "VCapbiYKk5mugXX3oMFH"
    },
    {
        "source": "frontend",
        "data": {
            "section_id": "b234211a-3d61-4e07-b161-55ee669921c5",
            "section_data": {
                "selectedStructured": "unstructured",
                "lines": [
                    48,
                    64
                ],
                "title": "Stock Chart Rendering Component with Custom X-Axis Date Formatting",
                "selectedDetailLevel": "medium",
                "summaryMappings": {
                    "medium_unstructured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "<div style={{ marginTop: \"2rem\" }}>",
                                    "line": 48
                                }
                            ],
                            "summaryComponent": "creates a styled section"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<h3>",
                                    "line": 49
                                },
                                {
                                    "code": "{company} ({ticker})",
                                    "line": 50
                                }
                            ],
                            "summaryComponent": "shows the company name and ticker symbol"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 52
                                },
                                {
                                    "code": "<LineChart",
                                    "line": 53
                                }
                            ],
                            "summaryComponent": "a responsive line chart"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "data={chartData}",
                                    "line": 54
                                },
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 61
                                }
                            ],
                            "summaryComponent": "visualizing stock price data"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                                    "line": 57
                                }
                            ],
                            "summaryComponent": "formats the X-axis date labels using a custom formatter"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                                    "line": 57
                                },
                                {
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                                    "line": 58
                                }
                            ],
                            "summaryComponent": "including axes"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<Legend />",
                                    "line": 60
                                }
                            ],
                            "summaryComponent": "a legend"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<Tooltip />",
                                    "line": 59
                                }
                            ],
                            "summaryComponent": "a tooltip"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 61
                                }
                            ],
                            "summaryComponent": "a single line representing price over time"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 52
                                }
                            ],
                            "summaryComponent": "the chart fits well within its container"
                        }
                    ],
                    "high_unstructured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "<div style={{ marginTop: \"2rem\" }}>",
                                    "line": 48
                                }
                            ],
                            "summaryComponent": "a React component section"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<h3>",
                                    "line": 49
                                },
                                {
                                    "code": "{company} ({ticker})",
                                    "line": 50
                                }
                            ],
                            "summaryComponent": "displays a heading with the company name and ticker"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 52
                                },
                                {
                                    "code": "<LineChart",
                                    "line": 53
                                },
                                {
                                    "code": "data={chartData}",
                                    "line": 54
                                }
                            ],
                            "summaryComponent": "a responsive line chart visualizing stock price data"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<LineChart",
                                    "line": 53
                                },
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                                    "line": 57
                                },
                                {
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                                    "line": 58
                                },
                                {
                                    "code": "<Tooltip />",
                                    "line": 59
                                },
                                {
                                    "code": "<Legend />",
                                    "line": 60
                                },
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 61
                                }
                            ],
                            "summaryComponent": "built using Recharts components"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                                    "line": 57
                                },
                                {
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                                    "line": 58
                                }
                            ],
                            "summaryComponent": "X and Y axes"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                                    "line": 57
                                }
                            ],
                            "summaryComponent": "the X-axis now displaying dates formatted by a custom function"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<Tooltip />",
                                    "line": 59
                                }
                            ],
                            "summaryComponent": "a tooltip for interactive data display"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<Legend />",
                                    "line": 60
                                }
                            ],
                            "summaryComponent": "a legend"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 61
                                }
                            ],
                            "summaryComponent": "a monotone line representing the price, styled in purple and without dots"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<div style={{ marginTop: \"2rem\" }}>",
                                    "line": 48
                                },
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 52
                                }
                            ],
                            "summaryComponent": "container is set to occupy the full width and a fixed height, with a margin at the top for spacing"
                        }
                    ],
                    "low_unstructured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "<div style={{ marginTop: \"2rem\" }}>",
                                    "line": 48
                                }
                            ],
                            "summaryComponent": "renders a styled container"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<h3>",
                                    "line": 49
                                },
                                {
                                    "code": "{company} ({ticker})",
                                    "line": 50
                                }
                            ],
                            "summaryComponent": "displaying a company name and ticker"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 52
                                },
                                {
                                    "code": "<LineChart",
                                    "line": 53
                                }
                            ],
                            "summaryComponent": "along with a responsive line chart"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 61
                                }
                            ],
                            "summaryComponent": "of stock prices"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                                    "line": 57
                                }
                            ],
                            "summaryComponent": "now featuring custom-formatted X-axis date labels"
                        }
                    ],
                    "low_structured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "<h3>",
                                    "line": 49
                                },
                                {
                                    "code": "{company} ({ticker})",
                                    "line": 50
                                }
                            ],
                            "summaryComponent": "Displays company name and ticker"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 52
                                },
                                {
                                    "code": "<LineChart",
                                    "line": 53
                                },
                                {
                                    "code": "data={chartData}",
                                    "line": 54
                                },
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                                    "line": 57
                                },
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 61
                                }
                            ],
                            "summaryComponent": "Renders a responsive line chart of stock prices with custom-formatted X-axis date labels"
                        }
                    ],
                    "medium_structured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "<div style={{ marginTop: \"2rem\" }}>",
                                    "line": 48
                                }
                            ],
                            "summaryComponent": "Renders a container with a top margin"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<h3>",
                                    "line": 49
                                },
                                {
                                    "code": "{company} ({ticker})",
                                    "line": 50
                                }
                            ],
                            "summaryComponent": "Displays the company name and ticker in a heading"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 52
                                },
                                {
                                    "code": "<LineChart",
                                    "line": 53
                                }
                            ],
                            "summaryComponent": "Shows a responsive line chart"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                                    "line": 57
                                },
                                {
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                                    "line": 58
                                }
                            ],
                            "summaryComponent": "Chart includes X and Y axes, with the X-axis dates now formatted using a custom formatter"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<Tooltip />",
                                    "line": 59
                                },
                                {
                                    "code": "<Legend />",
                                    "line": 60
                                },
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 61
                                }
                            ],
                            "summaryComponent": "Includes a tooltip, a legend, and a line for price data"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 52
                                }
                            ],
                            "summaryComponent": "The chart adapts to the container's width and has a fixed height"
                        }
                    ],
                    "high_structured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "<div style={{ marginTop: \"2rem\" }}>",
                                    "line": 48
                                }
                            ],
                            "summaryComponent": "Creates a div container with a top margin for spacing"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<h3>",
                                    "line": 49
                                },
                                {
                                    "code": "{company} ({ticker})",
                                    "line": 50
                                }
                            ],
                            "summaryComponent": "Displays a heading showing the company name and ticker symbol"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 52
                                }
                            ],
                            "summaryComponent": "Renders a ResponsiveContainer from Recharts"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 52
                                }
                            ],
                            "summaryComponent": "Sets width to 100% and height to 300px for adaptability"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<LineChart",
                                    "line": 53
                                }
                            ],
                            "summaryComponent": "Contains a LineChart component"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "data={chartData}",
                                    "line": 54
                                }
                            ],
                            "summaryComponent": "Uses provided chartData for plotting"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "margin={{ top: 10, right: 30, left: 0, bottom: 0 }}",
                                    "line": 55
                                }
                            ],
                            "summaryComponent": "Sets chart margins for layout"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                                    "line": 57
                                }
                            ],
                            "summaryComponent": "Adds an XAxis for dates, now using a custom tickFormatter to format date labels"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                                    "line": 58
                                }
                            ],
                            "summaryComponent": "Adds a YAxis with automatic domain"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<Tooltip />",
                                    "line": 59
                                }
                            ],
                            "summaryComponent": "Includes a Tooltip for interactive data display"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<Legend />",
                                    "line": 60
                                }
                            ],
                            "summaryComponent": "Includes a Legend for chart clarity"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 61
                                }
                            ],
                            "summaryComponent": "Plots a monotone Line for price data, styled with a purple stroke and no dots"
                        }
                    ]
                },
                "editPromptStructured": null,
                "createdAt": 1755628119000,
                "editPromptValue": "",
                "oldSummaryData": {
                    "medium_unstructured": "This snippet creates a styled section that shows the company name and ticker symbol, followed by a responsive line chart visualizing stock price data. The chart includes axes, a legend, a tooltip, and a single line representing price over time. The layout ensures the chart fits well within its container.",
                    "title": "Stock Chart Rendering Component",
                    "low_unstructured": "This code renders a styled container displaying a company name and ticker, along with a responsive line chart of stock prices.",
                    "low_structured": "• Displays company name and ticker\n• Renders a responsive line chart of stock prices",
                    "medium_structured": "• Renders a container with a top margin\n• Displays the company name and ticker in a heading\n• Shows a responsive line chart\n  ◦ Chart includes X and Y axes, a tooltip, a legend, and a line for price data\n  ◦ The chart adapts to the container's width and has a fixed height",
                    "high_unstructured": "This code defines a React component section that displays a heading with the company name and ticker, followed by a responsive line chart visualizing stock price data. The chart is built using Recharts components, including X and Y axes, a tooltip for interactive data display, a legend, and a monotone line representing the price, styled in purple and without dots. The chart's container is set to occupy the full width and a fixed height, with a margin at the top for spacing, ensuring a clean and adaptive layout within the application.",
                    "high_structured": "• Creates a div container with a top margin for spacing\n• Displays a heading showing the company name and ticker symbol\n• Renders a ResponsiveContainer from Recharts\n  ◦ Sets width to 100% and height to 300px for adaptability\n  ◦ Contains a LineChart component\n    ◦ Uses provided chartData for plotting\n    ◦ Sets chart margins for layout\n    ◦ Adds an XAxis for dates and a YAxis with automatic domain\n    ◦ Includes a Tooltip for interactive data display\n    ◦ Includes a Legend for chart clarity\n    ◦ Plots a monotone Line for price data, styled with a purple stroke and no dots"
                },
                "editPromptDetailLevel": null,
                "summaryData": {
                    "medium_unstructured": "This snippet creates a styled section that shows the company name and ticker symbol, followed by a responsive line chart visualizing stock price data. The chart now formats the X-axis date labels using a custom formatter, in addition to including axes, a legend, a tooltip, and a single line representing price over time. The layout ensures the chart fits well within its container.",
                    "title": "Stock Chart Rendering Component with Custom X-Axis Date Formatting",
                    "low_unstructured": "This code renders a styled container displaying a company name and ticker, along with a responsive line chart of stock prices, now featuring custom-formatted X-axis date labels.",
                    "low_structured": "• Displays company name and ticker\n• Renders a responsive line chart of stock prices with custom-formatted X-axis date labels",
                    "medium_structured": "• Renders a container with a top margin\n• Displays the company name and ticker in a heading\n• Shows a responsive line chart\n  ◦ Chart includes X and Y axes, with the X-axis dates now formatted using a custom formatter\n  ◦ Includes a tooltip, a legend, and a line for price data\n  ◦ The chart adapts to the container's width and has a fixed height",
                    "high_unstructured": "This code defines a React component section that displays a heading with the company name and ticker, followed by a responsive line chart visualizing stock price data. The chart is built using Recharts components, including X and Y axes—with the X-axis now displaying dates formatted by a custom function—a tooltip for interactive data display, a legend, and a monotone line representing the price, styled in purple and without dots. The chart's container is set to occupy the full width and a fixed height, with a margin at the top for spacing, ensuring a clean and adaptive layout within the application.",
                    "high_structured": "• Creates a div container with a top margin for spacing\n• Displays a heading showing the company name and ticker symbol\n• Renders a ResponsiveContainer from Recharts\n  ◦ Sets width to 100% and height to 300px for adaptability\n  ◦ Contains a LineChart component\n    ◦ Uses provided chartData for plotting\n    ◦ Sets chart margins for layout\n    ◦ Adds an XAxis for dates, now using a custom tickFormatter to format date labels\n    ◦ Adds a YAxis with automatic domain\n    ◦ Includes a Tooltip for interactive data display\n    ◦ Includes a Legend for chart clarity\n    ◦ Plots a monotone Line for price data, styled with a purple stroke and no dots"
                },
                "metadata": {
                    "offset": 961,
                    "originalCode": "    <div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatDateString} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>",
                    "fullPath": "/project/workspace/frontend/src/StockChart.jsx",
                    "id": "b234211a-3d61-4e07-b161-55ee669921c5",
                    "filename": "StockChart.jsx"
                }
            }
        },
        "timestamp": "2025-08-19 22:28:39.000",
        "event": "create_new_section",
        "id": "3W3B5QHeKYezGZ6mTWMI"
    },
    {
        "source": "backend",
        "data": {
            "code": "48:     <div style={{ marginTop: \"2rem\" }}>\n49:       <h3>\n50:         {company} ({ticker})\n51:       </h3>\n52:       <ResponsiveContainer width=\"100%\" height={300}>\n53:         <LineChart\n54:           data={chartData}\n55:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n56:         >\n57:           <XAxis dataKey=\"date\" tickFormatter={formatDateString} />\n58:           <YAxis domain={[\"auto\", \"auto\"]} />\n59:           <Tooltip />\n60:           <Legend />\n61:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n62:         </LineChart>\n63:       </ResponsiveContainer>\n64:     </div>",
            "summary": "This code defines a React component section that displays a heading with the company name and ticker, followed by a responsive line chart visualizing stock price data. The chart is built using Recharts components, including X and Y axes—with the X-axis now displaying dates formatted by a custom function—a tooltip for interactive data display, a legend, and a monotone line representing the price, styled in purple and without dots. The chart's container is set to occupy the full width and a fixed height, with a margin at the top for spacing, ensuring a clean and adaptive layout within the application.",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "<div style={{ marginTop: \"2rem\" }}>",
                            "line": 48
                        }
                    ],
                    "summaryComponent": "a React component section"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<h3>",
                            "line": 49
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 50
                        }
                    ],
                    "summaryComponent": "displays a heading with the company name and ticker"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 52
                        },
                        {
                            "code": "<LineChart",
                            "line": 53
                        },
                        {
                            "code": "data={chartData}",
                            "line": 54
                        }
                    ],
                    "summaryComponent": "a responsive line chart visualizing stock price data"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<LineChart",
                            "line": 53
                        },
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                            "line": 57
                        },
                        {
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                            "line": 58
                        },
                        {
                            "code": "<Tooltip />",
                            "line": 59
                        },
                        {
                            "code": "<Legend />",
                            "line": 60
                        },
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 61
                        }
                    ],
                    "summaryComponent": "built using Recharts components"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                            "line": 57
                        },
                        {
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                            "line": 58
                        }
                    ],
                    "summaryComponent": "X and Y axes"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                            "line": 57
                        }
                    ],
                    "summaryComponent": "the X-axis now displaying dates formatted by a custom function"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<Tooltip />",
                            "line": 59
                        }
                    ],
                    "summaryComponent": "a tooltip for interactive data display"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<Legend />",
                            "line": 60
                        }
                    ],
                    "summaryComponent": "a legend"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 61
                        }
                    ],
                    "summaryComponent": "a monotone line representing the price, styled in purple and without dots"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<div style={{ marginTop: \"2rem\" }}>",
                            "line": 48
                        },
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 52
                        }
                    ],
                    "summaryComponent": "container is set to occupy the full width and a fixed height, with a margin at the top for spacing"
                }
            ]
        },
        "timestamp": "2025-08-19 22:28:39.000",
        "event": "map_summary_code",
        "id": "O9ccD8IAOSCSTxrsmsqx"
    },
    {
        "source": "frontend",
        "data": {
            "before_section_id": "81a0486b-2853-4c67-aa49-ff8f36a1c15c",
            "after_section_id": "b234211a-3d61-4e07-b161-55ee669921c5"
        },
        "timestamp": "2025-08-19 22:28:39.000",
        "event": "autotransit_section",
        "id": "Zig9euvswfx5IgvWBFIl"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 4,
            "section_id": "b234211a-3d61-4e07-b161-55ee669921c5",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:29:11.000",
        "event": "mapping_hover",
        "id": "AURKKIwFiZYe6kzWHyPC"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "unstructured",
            "section_id": "b234211a-3d61-4e07-b161-55ee669921c5",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:29:12.000",
        "event": "mapping_unhover",
        "id": "UP9TS9dYgXM17CYKhbdh"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 6,
            "section_id": "b234211a-3d61-4e07-b161-55ee669921c5",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:29:12.000",
        "event": "mapping_hover",
        "id": "pMsA59ZIf7R2lwbNdr4m"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "unstructured",
            "section_id": "b234211a-3d61-4e07-b161-55ee669921c5",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:29:12.000",
        "event": "mapping_unhover",
        "id": "xt7yoNjzfuARnOjZEBe4"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "unstructured",
            "section_id": "b234211a-3d61-4e07-b161-55ee669921c5",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:30:16.000",
        "event": "mapping_unhover",
        "id": "AT344D3D3n3v4EhKm22N"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 9,
            "section_id": "b234211a-3d61-4e07-b161-55ee669921c5",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:30:16.000",
        "event": "mapping_hover",
        "id": "DvrMlAGL9A2dbYO7njlA"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 2,
            "section_id": "b234211a-3d61-4e07-b161-55ee669921c5",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:30:16.000",
        "event": "mapping_hover",
        "id": "aPP5md7SKlUAe3GZKetZ"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "unstructured",
            "section_id": "b234211a-3d61-4e07-b161-55ee669921c5",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:30:16.000",
        "event": "mapping_unhover",
        "id": "lOH2LQHGVurCHblyI84u"
    },
    {
        "source": "frontend",
        "data": {},
        "timestamp": "2025-08-19 22:30:18.000",
        "event": "click_summarize_code",
        "id": "dZqHqCKE53FoqE1FrrSY"
    },
    {
        "source": "backend",
        "data": {
            "selected_code": "const express = require(\"express\");\nconst cors = require(\"cors\");\nconst yahooFinance = require(\"yahoo-finance2\").default;\n\nconst app = express();\nconst PORT = 3000;\n\napp.use(cors());\napp.use(express.json());\n\napp.get(\"/api/hello\", (req, res) => {\n  res.json({ message: \"Hello from the backend!\" });\n});\n\napp.get(\"/api/stock/:symbol\", async (req, res) => {\n  try {\n    const symbol = req.params.symbol.toUpperCase();\n    const data = await yahooFinance.chart(symbol, {\n      period1: \"2024-01-01\",\n      interval: \"1d\",\n    });\n    const quotes = data.quotes;\n\n    const companyName = data.meta?.shortName || symbol;\n\n    const response = {\n      ticker: symbol,\n      name: companyName,\n      data: quotes.map((q) => ({\n        date: q.date,\n        close: q.close,\n        volume: q.volume,\n      })),\n    };\n\n    console.log(response);\n    res.json(response);\n  } catch (err) {\n    console.error(err);\n    res.status(500).send(\"Error fetching stock data\");\n  }\n});\n\napp.listen(PORT, \"0.0.0.0\", () => {\n  console.log(`Server running on http://localhost:${PORT}`);\n});\n",
            "summary": {
                "medium_unstructured": "The code initializes an Express server that listens on port 3000 and uses CORS and JSON middleware. It defines two endpoints: one returns a hello message, and another fetches and returns stock data for a given symbol using the yahoo-finance2 library. The stock endpoint processes the symbol, retrieves chart data since 2024-01-01, and responds with formatted stock information or an error.",
                "title": "Express Server Providing Stock Data and Hello Endpoint",
                "low_unstructured": "This code sets up an Express server with endpoints for a hello message and stock data retrieval.",
                "low_structured": "• Sets up an Express server\n• Provides hello and stock data endpoints\n• Uses CORS and JSON middleware",
                "medium_structured": "• Initializes an Express server on port 3000\n• Adds CORS and JSON parsing middleware\n• Defines endpoints:\n  ◦ /api/hello returns a hello message\n  ◦ /api/stock/:symbol fetches and returns stock data using yahoo-finance2\n• Handles errors by returning a 500 status code",
                "high_unstructured": "This code creates an Express server that listens on port 3000 and incorporates CORS and JSON body parsing middleware. It exposes a '/api/hello' endpoint that returns a simple JSON greeting, and a '/api/stock/:symbol' endpoint that retrieves daily stock data from Yahoo Finance starting from January 1, 2024, for the provided symbol. The stock endpoint processes the symbol to uppercase, fetches chart data, extracts the company name and relevant quote details (date, close, volume), and returns them in a structured JSON response. Errors during data retrieval are logged and result in a 500 error response, and the server logs its startup URL.",
                "high_structured": "• Sets up an Express server listening on port 3000\n• Middleware:\n  ◦ Enables CORS for cross-origin requests\n  ◦ Parses incoming JSON request bodies\n• Defines endpoints:\n  ◦ /api/hello: responds with a JSON hello message\n  ◦ /api/stock/:symbol:\n    ◦ Converts the symbol parameter to uppercase\n    ◦ Fetches daily stock chart data from Yahoo Finance since 2024-01-01\n    ◦ Extracts company name and quote details (date, close, volume)\n    ◦ Returns a structured JSON response with ticker, name, and data array\n    ◦ Handles errors by logging and sending a 500 error response\n• Logs the server URL when it starts"
            }
        },
        "timestamp": "2025-08-19 22:30:28.000",
        "event": "summarize_selected_code",
        "id": "MwieQ6X0vExIFrcXsOsl"
    },
    {
        "source": "backend",
        "data": {
            "code": "1: const express = require(\"express\");\n2: const cors = require(\"cors\");\n3: const yahooFinance = require(\"yahoo-finance2\").default;\n4: \n5: const app = express();\n6: const PORT = 3000;\n7: \n8: app.use(cors());\n9: app.use(express.json());\n10: \n11: app.get(\"/api/hello\", (req, res) => {\n12:   res.json({ message: \"Hello from the backend!\" });\n13: });\n14: \n15: app.get(\"/api/stock/:symbol\", async (req, res) => {\n16:   try {\n17:     const symbol = req.params.symbol.toUpperCase();\n18:     const data = await yahooFinance.chart(symbol, {\n19:       period1: \"2024-01-01\",\n20:       interval: \"1d\",\n21:     });\n22:     const quotes = data.quotes;\n23: \n24:     const companyName = data.meta?.shortName || symbol;\n25: \n26:     const response = {\n27:       ticker: symbol,\n28:       name: companyName,\n29:       data: quotes.map((q) => ({\n30:         date: q.date,\n31:         close: q.close,\n32:         volume: q.volume,\n33:       })),\n34:     };\n35: \n36:     console.log(response);\n37:     res.json(response);\n38:   } catch (err) {\n39:     console.error(err);\n40:     res.status(500).send(\"Error fetching stock data\");\n41:   }\n42: });\n43: \n44: app.listen(PORT, \"0.0.0.0\", () => {\n45:   console.log(`Server running on http://localhost:${PORT}`);\n46: });\n47: ",
            "summary": "• Sets up an Express server\n• Provides hello and stock data endpoints\n• Uses CORS and JSON middleware",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "const express = require(\"express\");",
                            "line": 1
                        },
                        {
                            "code": "const app = express();",
                            "line": 5
                        },
                        {
                            "code": "app.listen(PORT, \"0.0.0.0\", () => {",
                            "line": 44
                        }
                    ],
                    "summaryComponent": "Sets up an Express server"
                },
                {
                    "codeSegments": [
                        {
                            "code": "app.get(\"/api/hello\", (req, res) => {",
                            "line": 11
                        },
                        {
                            "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {",
                            "line": 15
                        }
                    ],
                    "summaryComponent": "Provides hello and stock data endpoints"
                },
                {
                    "codeSegments": [
                        {
                            "code": "app.use(cors());",
                            "line": 8
                        },
                        {
                            "code": "app.use(express.json());",
                            "line": 9
                        }
                    ],
                    "summaryComponent": "Uses CORS and JSON middleware"
                }
            ]
        },
        "timestamp": "2025-08-19 22:30:30.000",
        "event": "map_summary_code",
        "id": "uZ5FBZBhGVWjS4844tXv"
    },
    {
        "source": "backend",
        "data": {
            "code": "1: const express = require(\"express\");\n2: const cors = require(\"cors\");\n3: const yahooFinance = require(\"yahoo-finance2\").default;\n4: \n5: const app = express();\n6: const PORT = 3000;\n7: \n8: app.use(cors());\n9: app.use(express.json());\n10: \n11: app.get(\"/api/hello\", (req, res) => {\n12:   res.json({ message: \"Hello from the backend!\" });\n13: });\n14: \n15: app.get(\"/api/stock/:symbol\", async (req, res) => {\n16:   try {\n17:     const symbol = req.params.symbol.toUpperCase();\n18:     const data = await yahooFinance.chart(symbol, {\n19:       period1: \"2024-01-01\",\n20:       interval: \"1d\",\n21:     });\n22:     const quotes = data.quotes;\n23: \n24:     const companyName = data.meta?.shortName || symbol;\n25: \n26:     const response = {\n27:       ticker: symbol,\n28:       name: companyName,\n29:       data: quotes.map((q) => ({\n30:         date: q.date,\n31:         close: q.close,\n32:         volume: q.volume,\n33:       })),\n34:     };\n35: \n36:     console.log(response);\n37:     res.json(response);\n38:   } catch (err) {\n39:     console.error(err);\n40:     res.status(500).send(\"Error fetching stock data\");\n41:   }\n42: });\n43: \n44: app.listen(PORT, \"0.0.0.0\", () => {\n45:   console.log(`Server running on http://localhost:${PORT}`);\n46: });\n47: ",
            "summary": "This code sets up an Express server with endpoints for a hello message and stock data retrieval.",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "const express = require(\"express\");",
                            "line": 1
                        },
                        {
                            "code": "const app = express();",
                            "line": 5
                        },
                        {
                            "code": "app.listen(PORT, \"0.0.0.0\", () => {",
                            "line": 44
                        }
                    ],
                    "summaryComponent": "sets up an Express server"
                },
                {
                    "codeSegments": [
                        {
                            "code": "app.get(\"/api/hello\", (req, res) => {",
                            "line": 11
                        },
                        {
                            "code": "res.json({ message: \"Hello from the backend!\" });",
                            "line": 12
                        }
                    ],
                    "summaryComponent": "with endpoints for a hello message"
                },
                {
                    "codeSegments": [
                        {
                            "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {",
                            "line": 15
                        }
                    ],
                    "summaryComponent": "and stock data retrieval"
                }
            ]
        },
        "timestamp": "2025-08-19 22:30:31.000",
        "event": "map_summary_code",
        "id": "9SVDTtuuF4dXh824205y"
    },
    {
        "source": "backend",
        "data": {
            "code": "1: const express = require(\"express\");\n2: const cors = require(\"cors\");\n3: const yahooFinance = require(\"yahoo-finance2\").default;\n4: \n5: const app = express();\n6: const PORT = 3000;\n7: \n8: app.use(cors());\n9: app.use(express.json());\n10: \n11: app.get(\"/api/hello\", (req, res) => {\n12:   res.json({ message: \"Hello from the backend!\" });\n13: });\n14: \n15: app.get(\"/api/stock/:symbol\", async (req, res) => {\n16:   try {\n17:     const symbol = req.params.symbol.toUpperCase();\n18:     const data = await yahooFinance.chart(symbol, {\n19:       period1: \"2024-01-01\",\n20:       interval: \"1d\",\n21:     });\n22:     const quotes = data.quotes;\n23: \n24:     const companyName = data.meta?.shortName || symbol;\n25: \n26:     const response = {\n27:       ticker: symbol,\n28:       name: companyName,\n29:       data: quotes.map((q) => ({\n30:         date: q.date,\n31:         close: q.close,\n32:         volume: q.volume,\n33:       })),\n34:     };\n35: \n36:     console.log(response);\n37:     res.json(response);\n38:   } catch (err) {\n39:     console.error(err);\n40:     res.status(500).send(\"Error fetching stock data\");\n41:   }\n42: });\n43: \n44: app.listen(PORT, \"0.0.0.0\", () => {\n45:   console.log(`Server running on http://localhost:${PORT}`);\n46: });\n47: ",
            "summary": "• Initializes an Express server on port 3000\n• Adds CORS and JSON parsing middleware\n• Defines endpoints:\n  ◦ /api/hello returns a hello message\n  ◦ /api/stock/:symbol fetches and returns stock data using yahoo-finance2\n• Handles errors by returning a 500 status code",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "const app = express();",
                            "line": 5
                        },
                        {
                            "code": "const PORT = 3000;",
                            "line": 6
                        },
                        {
                            "code": "app.listen(PORT, \"0.0.0.0\", () => {",
                            "line": 44
                        }
                    ],
                    "summaryComponent": "Initializes an Express server on port 3000"
                },
                {
                    "codeSegments": [
                        {
                            "code": "app.use(cors());",
                            "line": 8
                        },
                        {
                            "code": "app.use(express.json());",
                            "line": 9
                        }
                    ],
                    "summaryComponent": "Adds CORS and JSON parsing middleware"
                },
                {
                    "codeSegments": [
                        {
                            "code": "app.get(\"/api/hello\", (req, res) => {",
                            "line": 11
                        },
                        {
                            "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {",
                            "line": 15
                        }
                    ],
                    "summaryComponent": "Defines endpoints:"
                },
                {
                    "codeSegments": [
                        {
                            "code": "app.get(\"/api/hello\", (req, res) => {",
                            "line": 11
                        },
                        {
                            "code": "res.json({ message: \"Hello from the backend!\" });",
                            "line": 12
                        }
                    ],
                    "summaryComponent": "/api/hello returns a hello message"
                },
                {
                    "codeSegments": [
                        {
                            "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {",
                            "line": 15
                        },
                        {
                            "code": "const data = await yahooFinance.chart(symbol, {",
                            "line": 18
                        },
                        {
                            "code": "res.json(response);",
                            "line": 37
                        }
                    ],
                    "summaryComponent": "/api/stock/:symbol fetches and returns stock data using yahoo-finance2"
                },
                {
                    "codeSegments": [
                        {
                            "code": "res.status(500).send(\"Error fetching stock data\");",
                            "line": 40
                        }
                    ],
                    "summaryComponent": "Handles errors by returning a 500 status code"
                }
            ]
        },
        "timestamp": "2025-08-19 22:30:32.000",
        "event": "map_summary_code",
        "id": "QdwfPRNb79xcm6XBfAle"
    },
    {
        "source": "backend",
        "data": {
            "code": "1: const express = require(\"express\");\n2: const cors = require(\"cors\");\n3: const yahooFinance = require(\"yahoo-finance2\").default;\n4: \n5: const app = express();\n6: const PORT = 3000;\n7: \n8: app.use(cors());\n9: app.use(express.json());\n10: \n11: app.get(\"/api/hello\", (req, res) => {\n12:   res.json({ message: \"Hello from the backend!\" });\n13: });\n14: \n15: app.get(\"/api/stock/:symbol\", async (req, res) => {\n16:   try {\n17:     const symbol = req.params.symbol.toUpperCase();\n18:     const data = await yahooFinance.chart(symbol, {\n19:       period1: \"2024-01-01\",\n20:       interval: \"1d\",\n21:     });\n22:     const quotes = data.quotes;\n23: \n24:     const companyName = data.meta?.shortName || symbol;\n25: \n26:     const response = {\n27:       ticker: symbol,\n28:       name: companyName,\n29:       data: quotes.map((q) => ({\n30:         date: q.date,\n31:         close: q.close,\n32:         volume: q.volume,\n33:       })),\n34:     };\n35: \n36:     console.log(response);\n37:     res.json(response);\n38:   } catch (err) {\n39:     console.error(err);\n40:     res.status(500).send(\"Error fetching stock data\");\n41:   }\n42: });\n43: \n44: app.listen(PORT, \"0.0.0.0\", () => {\n45:   console.log(`Server running on http://localhost:${PORT}`);\n46: });\n47: ",
            "summary": "The code initializes an Express server that listens on port 3000 and uses CORS and JSON middleware. It defines two endpoints: one returns a hello message, and another fetches and returns stock data for a given symbol using the yahoo-finance2 library. The stock endpoint processes the symbol, retrieves chart data since 2024-01-01, and responds with formatted stock information or an error.",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "const express = require(\"express\");",
                            "line": 1
                        },
                        {
                            "code": "const app = express();",
                            "line": 5
                        }
                    ],
                    "summaryComponent": "initializes an Express server"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const PORT = 3000;",
                            "line": 6
                        },
                        {
                            "code": "app.listen(PORT, \"0.0.0.0\", () => {",
                            "line": 44
                        }
                    ],
                    "summaryComponent": "listens on port 3000"
                },
                {
                    "codeSegments": [
                        {
                            "code": "app.use(cors());",
                            "line": 8
                        },
                        {
                            "code": "app.use(express.json());",
                            "line": 9
                        }
                    ],
                    "summaryComponent": "uses CORS and JSON middleware"
                },
                {
                    "codeSegments": [
                        {
                            "code": "app.get(\"/api/hello\", (req, res) => {",
                            "line": 11
                        },
                        {
                            "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {",
                            "line": 15
                        }
                    ],
                    "summaryComponent": "defines two endpoints"
                },
                {
                    "codeSegments": [
                        {
                            "code": "res.json({ message: \"Hello from the backend!\" });",
                            "line": 12
                        }
                    ],
                    "summaryComponent": "one returns a hello message"
                },
                {
                    "codeSegments": [
                        {
                            "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {",
                            "line": 15
                        },
                        {
                            "code": "const symbol = req.params.symbol.toUpperCase();",
                            "line": 17
                        },
                        {
                            "code": "const data = await yahooFinance.chart(symbol, {",
                            "line": 18
                        },
                        {
                            "code": "res.json(response);",
                            "line": 37
                        }
                    ],
                    "summaryComponent": "another fetches and returns stock data for a given symbol"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const yahooFinance = require(\"yahoo-finance2\").default;",
                            "line": 3
                        },
                        {
                            "code": "const data = await yahooFinance.chart(symbol, {",
                            "line": 18
                        }
                    ],
                    "summaryComponent": "using the yahoo-finance2 library"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const symbol = req.params.symbol.toUpperCase();",
                            "line": 17
                        }
                    ],
                    "summaryComponent": "The stock endpoint processes the symbol"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const data = await yahooFinance.chart(symbol, {",
                            "line": 18
                        },
                        {
                            "code": "period1: \"2024-01-01\",",
                            "line": 19
                        }
                    ],
                    "summaryComponent": "retrieves chart data since 2024-01-01"
                },
                {
                    "codeSegments": [
                        {
                            "code": "res.json(response);",
                            "line": 37
                        },
                        {
                            "code": "res.status(500).send(\"Error fetching stock data\");",
                            "line": 40
                        }
                    ],
                    "summaryComponent": "responds with formatted stock information or an error"
                }
            ]
        },
        "timestamp": "2025-08-19 22:30:35.000",
        "event": "map_summary_code",
        "id": "wT0811oQu8K6kh9UW1cT"
    },
    {
        "source": "backend",
        "data": {
            "code": "1: const express = require(\"express\");\n2: const cors = require(\"cors\");\n3: const yahooFinance = require(\"yahoo-finance2\").default;\n4: \n5: const app = express();\n6: const PORT = 3000;\n7: \n8: app.use(cors());\n9: app.use(express.json());\n10: \n11: app.get(\"/api/hello\", (req, res) => {\n12:   res.json({ message: \"Hello from the backend!\" });\n13: });\n14: \n15: app.get(\"/api/stock/:symbol\", async (req, res) => {\n16:   try {\n17:     const symbol = req.params.symbol.toUpperCase();\n18:     const data = await yahooFinance.chart(symbol, {\n19:       period1: \"2024-01-01\",\n20:       interval: \"1d\",\n21:     });\n22:     const quotes = data.quotes;\n23: \n24:     const companyName = data.meta?.shortName || symbol;\n25: \n26:     const response = {\n27:       ticker: symbol,\n28:       name: companyName,\n29:       data: quotes.map((q) => ({\n30:         date: q.date,\n31:         close: q.close,\n32:         volume: q.volume,\n33:       })),\n34:     };\n35: \n36:     console.log(response);\n37:     res.json(response);\n38:   } catch (err) {\n39:     console.error(err);\n40:     res.status(500).send(\"Error fetching stock data\");\n41:   }\n42: });\n43: \n44: app.listen(PORT, \"0.0.0.0\", () => {\n45:   console.log(`Server running on http://localhost:${PORT}`);\n46: });\n47: ",
            "summary": "• Sets up an Express server listening on port 3000\n• Middleware:\n  ◦ Enables CORS for cross-origin requests\n  ◦ Parses incoming JSON request bodies\n• Defines endpoints:\n  ◦ /api/hello: responds with a JSON hello message\n  ◦ /api/stock/:symbol:\n    ◦ Converts the symbol parameter to uppercase\n    ◦ Fetches daily stock chart data from Yahoo Finance since 2024-01-01\n    ◦ Extracts company name and quote details (date, close, volume)\n    ◦ Returns a structured JSON response with ticker, name, and data array\n    ◦ Handles errors by logging and sending a 500 error response\n• Logs the server URL when it starts",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "const app = express();",
                            "line": 5
                        },
                        {
                            "code": "const PORT = 3000;",
                            "line": 6
                        },
                        {
                            "code": "app.listen(PORT, \"0.0.0.0\", () => {",
                            "line": 44
                        }
                    ],
                    "summaryComponent": "Sets up an Express server listening on port 3000"
                },
                {
                    "codeSegments": [
                        {
                            "code": "app.use(cors());",
                            "line": 8
                        }
                    ],
                    "summaryComponent": "Enables CORS for cross-origin requests"
                },
                {
                    "codeSegments": [
                        {
                            "code": "app.use(express.json());",
                            "line": 9
                        }
                    ],
                    "summaryComponent": "Parses incoming JSON request bodies"
                },
                {
                    "codeSegments": [
                        {
                            "code": "app.get(\"/api/hello\", (req, res) => {",
                            "line": 11
                        },
                        {
                            "code": "res.json({ message: \"Hello from the backend!\" });",
                            "line": 12
                        }
                    ],
                    "summaryComponent": "/api/hello: responds with a JSON hello message"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const symbol = req.params.symbol.toUpperCase();",
                            "line": 17
                        }
                    ],
                    "summaryComponent": "Converts the symbol parameter to uppercase"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const data = await yahooFinance.chart(symbol, {",
                            "line": 18
                        },
                        {
                            "code": "period1: \"2024-01-01\",",
                            "line": 19
                        },
                        {
                            "code": "interval: \"1d\",",
                            "line": 20
                        }
                    ],
                    "summaryComponent": "Fetches daily stock chart data from Yahoo Finance since 2024-01-01"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const companyName = data.meta?.shortName || symbol;",
                            "line": 24
                        },
                        {
                            "code": "const response = {",
                            "line": 26
                        },
                        {
                            "code": "name: companyName,",
                            "line": 28
                        },
                        {
                            "code": "data: quotes.map((q) => ({",
                            "line": 29
                        },
                        {
                            "code": "date: q.date,",
                            "line": 30
                        },
                        {
                            "code": "close: q.close,",
                            "line": 31
                        },
                        {
                            "code": "volume: q.volume,",
                            "line": 32
                        }
                    ],
                    "summaryComponent": "Extracts company name and quote details (date, close, volume)"
                },
                {
                    "codeSegments": [
                        {
                            "code": "res.json(response);",
                            "line": 37
                        }
                    ],
                    "summaryComponent": "Returns a structured JSON response with ticker, name, and data array"
                },
                {
                    "codeSegments": [
                        {
                            "code": "console.error(err);",
                            "line": 39
                        },
                        {
                            "code": "res.status(500).send(\"Error fetching stock data\");",
                            "line": 40
                        }
                    ],
                    "summaryComponent": "Handles errors by logging and sending a 500 error response"
                },
                {
                    "codeSegments": [
                        {
                            "code": "console.log(`Server running on http://localhost:${PORT}`);",
                            "line": 45
                        }
                    ],
                    "summaryComponent": "Logs the server URL when it starts"
                }
            ]
        },
        "timestamp": "2025-08-19 22:30:39.000",
        "event": "map_summary_code",
        "id": "zsfzqt0o3I5DsDgVk0cW"
    },
    {
        "source": "frontend",
        "data": {
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "section_data": {
                "summaryMappings": {
                    "medium_unstructured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "const express = require(\"express\");",
                                    "line": 1
                                },
                                {
                                    "code": "const app = express();",
                                    "line": 5
                                }
                            ],
                            "summaryComponent": "initializes an Express server"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const PORT = 3000;",
                                    "line": 6
                                },
                                {
                                    "code": "app.listen(PORT, \"0.0.0.0\", () => {",
                                    "line": 44
                                }
                            ],
                            "summaryComponent": "listens on port 3000"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "app.use(cors());",
                                    "line": 8
                                },
                                {
                                    "code": "app.use(express.json());",
                                    "line": 9
                                }
                            ],
                            "summaryComponent": "uses CORS and JSON middleware"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "app.get(\"/api/hello\", (req, res) => {",
                                    "line": 11
                                },
                                {
                                    "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {",
                                    "line": 15
                                }
                            ],
                            "summaryComponent": "defines two endpoints"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "res.json({ message: \"Hello from the backend!\" });",
                                    "line": 12
                                }
                            ],
                            "summaryComponent": "one returns a hello message"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {",
                                    "line": 15
                                },
                                {
                                    "code": "const symbol = req.params.symbol.toUpperCase();",
                                    "line": 17
                                },
                                {
                                    "code": "const data = await yahooFinance.chart(symbol, {",
                                    "line": 18
                                },
                                {
                                    "code": "res.json(response);",
                                    "line": 37
                                }
                            ],
                            "summaryComponent": "another fetches and returns stock data for a given symbol"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const yahooFinance = require(\"yahoo-finance2\").default;",
                                    "line": 3
                                },
                                {
                                    "code": "const data = await yahooFinance.chart(symbol, {",
                                    "line": 18
                                }
                            ],
                            "summaryComponent": "using the yahoo-finance2 library"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const symbol = req.params.symbol.toUpperCase();",
                                    "line": 17
                                }
                            ],
                            "summaryComponent": "The stock endpoint processes the symbol"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const data = await yahooFinance.chart(symbol, {",
                                    "line": 18
                                },
                                {
                                    "code": "period1: \"2024-01-01\",",
                                    "line": 19
                                }
                            ],
                            "summaryComponent": "retrieves chart data since 2024-01-01"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "res.json(response);",
                                    "line": 37
                                },
                                {
                                    "code": "res.status(500).send(\"Error fetching stock data\");",
                                    "line": 40
                                }
                            ],
                            "summaryComponent": "responds with formatted stock information or an error"
                        }
                    ],
                    "high_unstructured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "const app = express();",
                                    "line": 5
                                }
                            ],
                            "summaryComponent": "creates an Express server"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const PORT = 3000;",
                                    "line": 6
                                },
                                {
                                    "code": "app.listen(PORT, \"0.0.0.0\", () => {",
                                    "line": 44
                                }
                            ],
                            "summaryComponent": "listens on port 3000"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "app.use(cors());",
                                    "line": 8
                                },
                                {
                                    "code": "app.use(express.json());",
                                    "line": 9
                                }
                            ],
                            "summaryComponent": "incorporates CORS and JSON body parsing middleware"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "app.get(\"/api/hello\", (req, res) => {",
                                    "line": 11
                                },
                                {
                                    "code": "res.json({ message: \"Hello from the backend!\" });",
                                    "line": 12
                                }
                            ],
                            "summaryComponent": "exposes a '/api/hello' endpoint that returns a simple JSON greeting"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {",
                                    "line": 15
                                },
                                {
                                    "code": "const data = await yahooFinance.chart(symbol, {",
                                    "line": 18
                                },
                                {
                                    "code": "period1: \"2024-01-01\",",
                                    "line": 19
                                },
                                {
                                    "code": "interval: \"1d\",",
                                    "line": 20
                                }
                            ],
                            "summaryComponent": "a '/api/stock/:symbol' endpoint that retrieves daily stock data from Yahoo Finance starting from January 1, 2024, for the provided symbol"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const symbol = req.params.symbol.toUpperCase();",
                                    "line": 17
                                }
                            ],
                            "summaryComponent": "processes the symbol to uppercase"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const data = await yahooFinance.chart(symbol, {",
                                    "line": 18
                                }
                            ],
                            "summaryComponent": "fetches chart data"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const companyName = data.meta?.shortName || symbol;",
                                    "line": 24
                                },
                                {
                                    "code": "const response = {",
                                    "line": 26
                                },
                                {
                                    "code": "name: companyName,",
                                    "line": 28
                                },
                                {
                                    "code": "data: quotes.map((q) => ({",
                                    "line": 29
                                },
                                {
                                    "code": "date: q.date,",
                                    "line": 30
                                },
                                {
                                    "code": "close: q.close,",
                                    "line": 31
                                },
                                {
                                    "code": "volume: q.volume,",
                                    "line": 32
                                }
                            ],
                            "summaryComponent": "extracts the company name and relevant quote details (date, close, volume)"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "res.json(response);",
                                    "line": 37
                                }
                            ],
                            "summaryComponent": "returns them in a structured JSON response"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "console.error(err);",
                                    "line": 39
                                },
                                {
                                    "code": "res.status(500).send(\"Error fetching stock data\");",
                                    "line": 40
                                }
                            ],
                            "summaryComponent": "Errors during data retrieval are logged and result in a 500 error response"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "console.log(`Server running on http://localhost:${PORT}`);",
                                    "line": 45
                                }
                            ],
                            "summaryComponent": "the server logs its startup URL"
                        }
                    ],
                    "low_unstructured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "const express = require(\"express\");",
                                    "line": 1
                                },
                                {
                                    "code": "const app = express();",
                                    "line": 5
                                },
                                {
                                    "code": "app.listen(PORT, \"0.0.0.0\", () => {",
                                    "line": 44
                                }
                            ],
                            "summaryComponent": "sets up an Express server"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "app.get(\"/api/hello\", (req, res) => {",
                                    "line": 11
                                },
                                {
                                    "code": "res.json({ message: \"Hello from the backend!\" });",
                                    "line": 12
                                }
                            ],
                            "summaryComponent": "with endpoints for a hello message"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {",
                                    "line": 15
                                }
                            ],
                            "summaryComponent": "and stock data retrieval"
                        }
                    ],
                    "low_structured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "const express = require(\"express\");",
                                    "line": 1
                                },
                                {
                                    "code": "const app = express();",
                                    "line": 5
                                },
                                {
                                    "code": "app.listen(PORT, \"0.0.0.0\", () => {",
                                    "line": 44
                                }
                            ],
                            "summaryComponent": "Sets up an Express server"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "app.get(\"/api/hello\", (req, res) => {",
                                    "line": 11
                                },
                                {
                                    "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {",
                                    "line": 15
                                }
                            ],
                            "summaryComponent": "Provides hello and stock data endpoints"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "app.use(cors());",
                                    "line": 8
                                },
                                {
                                    "code": "app.use(express.json());",
                                    "line": 9
                                }
                            ],
                            "summaryComponent": "Uses CORS and JSON middleware"
                        }
                    ],
                    "medium_structured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "const app = express();",
                                    "line": 5
                                },
                                {
                                    "code": "const PORT = 3000;",
                                    "line": 6
                                },
                                {
                                    "code": "app.listen(PORT, \"0.0.0.0\", () => {",
                                    "line": 44
                                }
                            ],
                            "summaryComponent": "Initializes an Express server on port 3000"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "app.use(cors());",
                                    "line": 8
                                },
                                {
                                    "code": "app.use(express.json());",
                                    "line": 9
                                }
                            ],
                            "summaryComponent": "Adds CORS and JSON parsing middleware"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "app.get(\"/api/hello\", (req, res) => {",
                                    "line": 11
                                },
                                {
                                    "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {",
                                    "line": 15
                                }
                            ],
                            "summaryComponent": "Defines endpoints:"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "app.get(\"/api/hello\", (req, res) => {",
                                    "line": 11
                                },
                                {
                                    "code": "res.json({ message: \"Hello from the backend!\" });",
                                    "line": 12
                                }
                            ],
                            "summaryComponent": "/api/hello returns a hello message"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {",
                                    "line": 15
                                },
                                {
                                    "code": "const data = await yahooFinance.chart(symbol, {",
                                    "line": 18
                                },
                                {
                                    "code": "res.json(response);",
                                    "line": 37
                                }
                            ],
                            "summaryComponent": "/api/stock/:symbol fetches and returns stock data using yahoo-finance2"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "res.status(500).send(\"Error fetching stock data\");",
                                    "line": 40
                                }
                            ],
                            "summaryComponent": "Handles errors by returning a 500 status code"
                        }
                    ],
                    "high_structured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "const app = express();",
                                    "line": 5
                                },
                                {
                                    "code": "const PORT = 3000;",
                                    "line": 6
                                },
                                {
                                    "code": "app.listen(PORT, \"0.0.0.0\", () => {",
                                    "line": 44
                                }
                            ],
                            "summaryComponent": "Sets up an Express server listening on port 3000"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "app.use(cors());",
                                    "line": 8
                                }
                            ],
                            "summaryComponent": "Enables CORS for cross-origin requests"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "app.use(express.json());",
                                    "line": 9
                                }
                            ],
                            "summaryComponent": "Parses incoming JSON request bodies"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "app.get(\"/api/hello\", (req, res) => {",
                                    "line": 11
                                },
                                {
                                    "code": "res.json({ message: \"Hello from the backend!\" });",
                                    "line": 12
                                }
                            ],
                            "summaryComponent": "/api/hello: responds with a JSON hello message"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const symbol = req.params.symbol.toUpperCase();",
                                    "line": 17
                                }
                            ],
                            "summaryComponent": "Converts the symbol parameter to uppercase"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const data = await yahooFinance.chart(symbol, {",
                                    "line": 18
                                },
                                {
                                    "code": "period1: \"2024-01-01\",",
                                    "line": 19
                                },
                                {
                                    "code": "interval: \"1d\",",
                                    "line": 20
                                }
                            ],
                            "summaryComponent": "Fetches daily stock chart data from Yahoo Finance since 2024-01-01"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const companyName = data.meta?.shortName || symbol;",
                                    "line": 24
                                },
                                {
                                    "code": "const response = {",
                                    "line": 26
                                },
                                {
                                    "code": "name: companyName,",
                                    "line": 28
                                },
                                {
                                    "code": "data: quotes.map((q) => ({",
                                    "line": 29
                                },
                                {
                                    "code": "date: q.date,",
                                    "line": 30
                                },
                                {
                                    "code": "close: q.close,",
                                    "line": 31
                                },
                                {
                                    "code": "volume: q.volume,",
                                    "line": 32
                                }
                            ],
                            "summaryComponent": "Extracts company name and quote details (date, close, volume)"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "res.json(response);",
                                    "line": 37
                                }
                            ],
                            "summaryComponent": "Returns a structured JSON response with ticker, name, and data array"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "console.error(err);",
                                    "line": 39
                                },
                                {
                                    "code": "res.status(500).send(\"Error fetching stock data\");",
                                    "line": 40
                                }
                            ],
                            "summaryComponent": "Handles errors by logging and sending a 500 error response"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "console.log(`Server running on http://localhost:${PORT}`);",
                                    "line": 45
                                }
                            ],
                            "summaryComponent": "Logs the server URL when it starts"
                        }
                    ]
                },
                "lines": [
                    1,
                    47
                ],
                "title": "Express Server Providing Stock Data and Hello Endpoint",
                "selectedDetailLevel": "medium",
                "editPromptStructured": null,
                "createdAt": 1755628240000,
                "editPromptValue": "",
                "editPromptDetailLevel": null,
                "selectedStructured": "unstructured",
                "summaryData": {
                    "medium_unstructured": "The code initializes an Express server that listens on port 3000 and uses CORS and JSON middleware. It defines two endpoints: one returns a hello message, and another fetches and returns stock data for a given symbol using the yahoo-finance2 library. The stock endpoint processes the symbol, retrieves chart data since 2024-01-01, and responds with formatted stock information or an error.",
                    "title": "Express Server Providing Stock Data and Hello Endpoint",
                    "low_unstructured": "This code sets up an Express server with endpoints for a hello message and stock data retrieval.",
                    "low_structured": "• Sets up an Express server\n• Provides hello and stock data endpoints\n• Uses CORS and JSON middleware",
                    "medium_structured": "• Initializes an Express server on port 3000\n• Adds CORS and JSON parsing middleware\n• Defines endpoints:\n  ◦ /api/hello returns a hello message\n  ◦ /api/stock/:symbol fetches and returns stock data using yahoo-finance2\n• Handles errors by returning a 500 status code",
                    "high_unstructured": "This code creates an Express server that listens on port 3000 and incorporates CORS and JSON body parsing middleware. It exposes a '/api/hello' endpoint that returns a simple JSON greeting, and a '/api/stock/:symbol' endpoint that retrieves daily stock data from Yahoo Finance starting from January 1, 2024, for the provided symbol. The stock endpoint processes the symbol to uppercase, fetches chart data, extracts the company name and relevant quote details (date, close, volume), and returns them in a structured JSON response. Errors during data retrieval are logged and result in a 500 error response, and the server logs its startup URL.",
                    "high_structured": "• Sets up an Express server listening on port 3000\n• Middleware:\n  ◦ Enables CORS for cross-origin requests\n  ◦ Parses incoming JSON request bodies\n• Defines endpoints:\n  ◦ /api/hello: responds with a JSON hello message\n  ◦ /api/stock/:symbol:\n    ◦ Converts the symbol parameter to uppercase\n    ◦ Fetches daily stock chart data from Yahoo Finance since 2024-01-01\n    ◦ Extracts company name and quote details (date, close, volume)\n    ◦ Returns a structured JSON response with ticker, name, and data array\n    ◦ Handles errors by logging and sending a 500 error response\n• Logs the server URL when it starts"
                },
                "metadata": {
                    "offset": 0,
                    "originalCode": "const express = require(\"express\");\nconst cors = require(\"cors\");\nconst yahooFinance = require(\"yahoo-finance2\").default;\n\nconst app = express();\nconst PORT = 3000;\n\napp.use(cors());\napp.use(express.json());\n\napp.get(\"/api/hello\", (req, res) => {\n  res.json({ message: \"Hello from the backend!\" });\n});\n\napp.get(\"/api/stock/:symbol\", async (req, res) => {\n  try {\n    const symbol = req.params.symbol.toUpperCase();\n    const data = await yahooFinance.chart(symbol, {\n      period1: \"2024-01-01\",\n      interval: \"1d\",\n    });\n    const quotes = data.quotes;\n\n    const companyName = data.meta?.shortName || symbol;\n\n    const response = {\n      ticker: symbol,\n      name: companyName,\n      data: quotes.map((q) => ({\n        date: q.date,\n        close: q.close,\n        volume: q.volume,\n      })),\n    };\n\n    console.log(response);\n    res.json(response);\n  } catch (err) {\n    console.error(err);\n    res.status(500).send(\"Error fetching stock data\");\n  }\n});\n\napp.listen(PORT, \"0.0.0.0\", () => {\n  console.log(`Server running on http://localhost:${PORT}`);\n});\n",
                    "fullPath": "/project/workspace/server/index.js",
                    "id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
                    "filename": "index.js"
                }
            }
        },
        "timestamp": "2025-08-19 22:30:40.000",
        "event": "create_new_section",
        "id": "SteVJPMbbZgM1ZOjK4KR"
    },
    {
        "source": "frontend",
        "data": {
            "before_section_id": "b234211a-3d61-4e07-b161-55ee669921c5",
            "after_section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0"
        },
        "timestamp": "2025-08-19 22:30:40.000",
        "event": "autotransit_section",
        "id": "m3z03YzrwtPUpyed60JD"
    },
    {
        "source": "backend",
        "data": {
            "code": "1: const express = require(\"express\");\n2: const cors = require(\"cors\");\n3: const yahooFinance = require(\"yahoo-finance2\").default;\n4: \n5: const app = express();\n6: const PORT = 3000;\n7: \n8: app.use(cors());\n9: app.use(express.json());\n10: \n11: app.get(\"/api/hello\", (req, res) => {\n12:   res.json({ message: \"Hello from the backend!\" });\n13: });\n14: \n15: app.get(\"/api/stock/:symbol\", async (req, res) => {\n16:   try {\n17:     const symbol = req.params.symbol.toUpperCase();\n18:     const data = await yahooFinance.chart(symbol, {\n19:       period1: \"2024-01-01\",\n20:       interval: \"1d\",\n21:     });\n22:     const quotes = data.quotes;\n23: \n24:     const companyName = data.meta?.shortName || symbol;\n25: \n26:     const response = {\n27:       ticker: symbol,\n28:       name: companyName,\n29:       data: quotes.map((q) => ({\n30:         date: q.date,\n31:         close: q.close,\n32:         volume: q.volume,\n33:       })),\n34:     };\n35: \n36:     console.log(response);\n37:     res.json(response);\n38:   } catch (err) {\n39:     console.error(err);\n40:     res.status(500).send(\"Error fetching stock data\");\n41:   }\n42: });\n43: \n44: app.listen(PORT, \"0.0.0.0\", () => {\n45:   console.log(`Server running on http://localhost:${PORT}`);\n46: });\n47: ",
            "summary": "This code creates an Express server that listens on port 3000 and incorporates CORS and JSON body parsing middleware. It exposes a '/api/hello' endpoint that returns a simple JSON greeting, and a '/api/stock/:symbol' endpoint that retrieves daily stock data from Yahoo Finance starting from January 1, 2024, for the provided symbol. The stock endpoint processes the symbol to uppercase, fetches chart data, extracts the company name and relevant quote details (date, close, volume), and returns them in a structured JSON response. Errors during data retrieval are logged and result in a 500 error response, and the server logs its startup URL.",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "const app = express();",
                            "line": 5
                        }
                    ],
                    "summaryComponent": "creates an Express server"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const PORT = 3000;",
                            "line": 6
                        },
                        {
                            "code": "app.listen(PORT, \"0.0.0.0\", () => {",
                            "line": 44
                        }
                    ],
                    "summaryComponent": "listens on port 3000"
                },
                {
                    "codeSegments": [
                        {
                            "code": "app.use(cors());",
                            "line": 8
                        },
                        {
                            "code": "app.use(express.json());",
                            "line": 9
                        }
                    ],
                    "summaryComponent": "incorporates CORS and JSON body parsing middleware"
                },
                {
                    "codeSegments": [
                        {
                            "code": "app.get(\"/api/hello\", (req, res) => {",
                            "line": 11
                        },
                        {
                            "code": "res.json({ message: \"Hello from the backend!\" });",
                            "line": 12
                        }
                    ],
                    "summaryComponent": "exposes a '/api/hello' endpoint that returns a simple JSON greeting"
                },
                {
                    "codeSegments": [
                        {
                            "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {",
                            "line": 15
                        },
                        {
                            "code": "const data = await yahooFinance.chart(symbol, {",
                            "line": 18
                        },
                        {
                            "code": "period1: \"2024-01-01\",",
                            "line": 19
                        },
                        {
                            "code": "interval: \"1d\",",
                            "line": 20
                        }
                    ],
                    "summaryComponent": "a '/api/stock/:symbol' endpoint that retrieves daily stock data from Yahoo Finance starting from January 1, 2024, for the provided symbol"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const symbol = req.params.symbol.toUpperCase();",
                            "line": 17
                        }
                    ],
                    "summaryComponent": "processes the symbol to uppercase"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const data = await yahooFinance.chart(symbol, {",
                            "line": 18
                        }
                    ],
                    "summaryComponent": "fetches chart data"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const companyName = data.meta?.shortName || symbol;",
                            "line": 24
                        },
                        {
                            "code": "const response = {",
                            "line": 26
                        },
                        {
                            "code": "name: companyName,",
                            "line": 28
                        },
                        {
                            "code": "data: quotes.map((q) => ({",
                            "line": 29
                        },
                        {
                            "code": "date: q.date,",
                            "line": 30
                        },
                        {
                            "code": "close: q.close,",
                            "line": 31
                        },
                        {
                            "code": "volume: q.volume,",
                            "line": 32
                        }
                    ],
                    "summaryComponent": "extracts the company name and relevant quote details (date, close, volume)"
                },
                {
                    "codeSegments": [
                        {
                            "code": "res.json(response);",
                            "line": 37
                        }
                    ],
                    "summaryComponent": "returns them in a structured JSON response"
                },
                {
                    "codeSegments": [
                        {
                            "code": "console.error(err);",
                            "line": 39
                        },
                        {
                            "code": "res.status(500).send(\"Error fetching stock data\");",
                            "line": 40
                        }
                    ],
                    "summaryComponent": "Errors during data retrieval are logged and result in a 500 error response"
                },
                {
                    "codeSegments": [
                        {
                            "code": "console.log(`Server running on http://localhost:${PORT}`);",
                            "line": 45
                        }
                    ],
                    "summaryComponent": "the server logs its startup URL"
                }
            ]
        },
        "timestamp": "2025-08-19 22:30:40.000",
        "event": "map_summary_code",
        "id": "ytE9pmoNLDnx6RxmdFen"
    },
    {
        "source": "frontend",
        "data": {
            "before_structured": "unstructured",
            "after_structured": "structured",
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "before_detail_level": "medium",
            "after_detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:30:50.000",
        "event": "change_summary_level",
        "id": "0nQjwVKtDybpl1fU7mKk"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:30:50.000",
        "event": "mapping_unhover",
        "id": "9LpdkUOkmEGLWzA1zaYe"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 0,
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:30:50.000",
        "event": "mapping_hover",
        "id": "YVgtjwT7ZDCoTpmAKXJk"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:30:52.000",
        "event": "mapping_unhover",
        "id": "FCHpgIvObffPAe3xhTVK"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 0,
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:30:52.000",
        "event": "mapping_hover",
        "id": "megklhMWkA55dTZEa9mh"
    },
    {
        "source": "frontend",
        "data": {
            "before_structured": "structured",
            "after_structured": "structured",
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "before_detail_level": "medium",
            "after_detail_level": "high"
        },
        "timestamp": "2025-08-19 22:31:00.000",
        "event": "change_summary_level",
        "id": "Dq9NWHVrT79OQucfm0QE"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 8,
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:31:11.000",
        "event": "mapping_hover",
        "id": "s8ggrE0gC0Fi2RtlkknJ"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 5,
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:31:20.000",
        "event": "mapping_hover",
        "id": "k6RKDY4bT9bilBnjpAAb"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:31:20.000",
        "event": "mapping_unhover",
        "id": "tRXFtaRXylgZv7iao9fo"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:31:21.000",
        "event": "mapping_unhover",
        "id": "Co75v4JbEK7XQXDLH5ys"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:31:29.000",
        "event": "mapping_unhover",
        "id": "0Rq66duZIm5zyb0q1iFK"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 3,
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:31:29.000",
        "event": "mapping_hover",
        "id": "33UnDe8OLayekAbhyLUB"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 2,
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:31:30.000",
        "event": "mapping_hover",
        "id": "IP4AeLDcpXjUYvydrY0A"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 1,
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:31:30.000",
        "event": "mapping_hover",
        "id": "c7b6OTDp9z72c0Nbfg26"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:31:30.000",
        "event": "mapping_unhover",
        "id": "xTzA729JbrPaGOG6Qvel"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 1,
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:31:31.000",
        "event": "mapping_hover",
        "id": "1boPfPWjiwNWk8ldBE1g"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:31:31.000",
        "event": "mapping_unhover",
        "id": "ZJ2DJm1Yh65AmWVAZnpx"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:31:31.000",
        "event": "mapping_unhover",
        "id": "cVfILkJwMV5eax5AuBI7"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 1,
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:31:47.000",
        "event": "mapping_hover",
        "id": "Cf2FPkKb9CJCoM3nMyua"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:31:48.000",
        "event": "mapping_unhover",
        "id": "56FWCBmEBFYEcJXMx2Ij"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:31:48.000",
        "event": "mapping_unhover",
        "id": "5G1ZIYpBXTD58G6XGJp8"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 2,
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:31:48.000",
        "event": "mapping_hover",
        "id": "8CVPKbZmBP4mtxgiD3Qq"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 3,
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:31:49.000",
        "event": "mapping_hover",
        "id": "uCBVhgwH8JPkGmPe4dsb"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:31:53.000",
        "event": "mapping_unhover",
        "id": "CqdKz3BlEfbLjDhzZBTq"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 4,
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:31:53.000",
        "event": "mapping_hover",
        "id": "W8mRFyLoj6Qog4LKwqUC"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 5,
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:31:53.000",
        "event": "mapping_hover",
        "id": "Z9P3oLzBIZO2T8JHZuCz"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:31:53.000",
        "event": "mapping_unhover",
        "id": "pvDBwL7QuOD0bEw71kq9"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:31:54.000",
        "event": "mapping_unhover",
        "id": "0FG7qg1VRtYUMpFpeKTp"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 4,
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:31:54.000",
        "event": "mapping_hover",
        "id": "eckDZnyzqlr1ifxKXFUt"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:31:57.000",
        "event": "mapping_unhover",
        "id": "XjDqm9CPi1pTwfB8jvaf"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 5,
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:31:57.000",
        "event": "mapping_hover",
        "id": "bYuElVLufcj5NcNp4JKA"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:32:01.000",
        "event": "mapping_unhover",
        "id": "Mb32A8hVxc1jMrjVzljH"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 6,
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:32:01.000",
        "event": "mapping_hover",
        "id": "dmejbnj8mj5wH6VCgPcj"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 8,
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:32:04.000",
        "event": "mapping_hover",
        "id": "4faxA6K5lma6APs4rtGh"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:32:04.000",
        "event": "mapping_unhover",
        "id": "SQSW17XVzIPzgVti9Gjd"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 7,
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:32:04.000",
        "event": "mapping_hover",
        "id": "bg2IvPVQyXyiNHTfUPok"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:32:04.000",
        "event": "mapping_unhover",
        "id": "wevJEI9489QYumy0HQc3"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 7,
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:32:05.000",
        "event": "mapping_hover",
        "id": "JXGjuLDERaJUX6rekG8k"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:32:05.000",
        "event": "mapping_unhover",
        "id": "ztBSKqMzZRWZBg0buwCa"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:32:08.000",
        "event": "mapping_unhover",
        "id": "nuB428SnPj1nGKPErkRY"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 8,
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:32:08.000",
        "event": "mapping_hover",
        "id": "riR3JlQbOLN4UHPd3JTe"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:32:09.000",
        "event": "mapping_unhover",
        "id": "yw9eYyVVWz8FZFLzrRr6"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:32:14.000",
        "event": "mapping_unhover",
        "id": "uD1v0HdFhaiPRsPR0Wz6"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 7,
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:32:14.000",
        "event": "mapping_hover",
        "id": "w9XwgWpdzOOEJEJwQOQS"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:32:44.000",
        "event": "mapping_unhover",
        "id": "03BglIBZdhIaexXsgIc6"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 4,
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:32:44.000",
        "event": "mapping_hover",
        "id": "50BAo7rSKkG1gQFySeax"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 9,
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:32:44.000",
        "event": "mapping_hover",
        "id": "BGxkqedDMRRXuY1ZwDUh"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:32:44.000",
        "event": "mapping_unhover",
        "id": "M3M1Qyok7kHAQ7vd26Er"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 7,
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:32:44.000",
        "event": "mapping_hover",
        "id": "Qg48JgITLnk7o1wgzqXt"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 8,
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:32:44.000",
        "event": "mapping_hover",
        "id": "UpALVVtmVeYNixywOxM5"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:32:44.000",
        "event": "mapping_unhover",
        "id": "Vr7yEGINawVlyc5DvO4S"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 6,
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:32:44.000",
        "event": "mapping_hover",
        "id": "WYrkU79zwYfunml86zW2"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:32:44.000",
        "event": "mapping_unhover",
        "id": "hvbIaaKU9isgKtlmyqlb"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:32:44.000",
        "event": "mapping_unhover",
        "id": "twsczP8t2osZqxOKB5YL"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:32:45.000",
        "event": "mapping_unhover",
        "id": "6BcuhAfEnFg9ePV5iUCl"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 8,
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:32:45.000",
        "event": "mapping_hover",
        "id": "CAMa4yUDmUAsJNoaAH7k"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 5,
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:32:45.000",
        "event": "mapping_hover",
        "id": "H9B3GJRyEg4xUMH4zBxi"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:32:46.000",
        "event": "mapping_unhover",
        "id": "vvIrDL7PteDOfQRJiPo4"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:32:50.000",
        "event": "mapping_unhover",
        "id": "Sjj0QELP9TtQWiXw3tVd"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 5,
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:32:50.000",
        "event": "mapping_hover",
        "id": "scOH98t6CpVIC7f9AAI6"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 5,
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:32:51.000",
        "event": "mapping_hover",
        "id": "DJILJnu3RjLDZohUK5i9"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 7,
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:32:51.000",
        "event": "mapping_hover",
        "id": "FhQ8lb29ahavtEMtKYZt"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:32:51.000",
        "event": "mapping_unhover",
        "id": "bWJZovMGWfv0erqwJ2Qt"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:32:52.000",
        "event": "mapping_unhover",
        "id": "1enNxB9hsayhPzkTMaml"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 1,
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:32:52.000",
        "event": "mapping_hover",
        "id": "9ZkbwnvfXjMtc2tMQ4gU"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 2,
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:32:52.000",
        "event": "mapping_hover",
        "id": "gEcGgGjYrv78IBwsprQl"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:32:52.000",
        "event": "mapping_unhover",
        "id": "qQSppMQhkM7OVFW2Sgza"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:32:53.000",
        "event": "mapping_unhover",
        "id": "1KV4x2xxriukah23OcmR"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:32:53.000",
        "event": "mapping_unhover",
        "id": "QK8w0TaHQJo5xo73aATv"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 0,
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:32:53.000",
        "event": "mapping_hover",
        "id": "Yo243QvWglRz84A1iEoO"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 3,
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:32:54.000",
        "event": "mapping_hover",
        "id": "Y2HmqrBz3j3YkgUZGgk4"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:32:54.000",
        "event": "mapping_unhover",
        "id": "ZXud845KxUW1kpktGsFI"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:32:55.000",
        "event": "mapping_unhover",
        "id": "Au0vX7oypQaAUoDJ6I53"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 5,
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:32:55.000",
        "event": "mapping_hover",
        "id": "E2bZL96BOewJkOhAIJxL"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 8,
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:32:55.000",
        "event": "mapping_hover",
        "id": "FH5w6vrWXF8ZsGjvo8KU"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 1,
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:32:55.000",
        "event": "mapping_hover",
        "id": "KGnGVaoekltDU9x28ILP"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:32:55.000",
        "event": "mapping_unhover",
        "id": "pyojJe4PpcJ8bEYf83lL"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 0,
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:32:55.000",
        "event": "mapping_hover",
        "id": "s2yuX73COWDwMaLKERIa"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:32:55.000",
        "event": "mapping_unhover",
        "id": "sqRLLXDLzFAdVhd3Q30b"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:32:55.000",
        "event": "mapping_unhover",
        "id": "v4LKRLf9sL87gmFh6j4T"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 5,
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:32:59.000",
        "event": "mapping_hover",
        "id": "1IRYzJMPLvyngoSFx50a"
    },
    {
        "source": "frontend",
        "data": {
            "structured": "structured",
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "high",
            "summary": "• Sets up an Express server listening on port 3000\n• Middleware:\n  ◦ Enables CORS for cross-origin requests\n  ◦ Parses incoming JSON request bodies\n• Defines endpoints:\n  ◦ /api/hello: responds with a JSON hello message\n  ◦ /api/stock/:symbol:\n    ◦ Converts the symbol parameter to uppercase\n    ◦ Fetches daily stock chart data from Yahoo Finance since 2024-01-01\n    ◦ Extracts company name and quote details (date, close, volume)\n    ◦ Returns a structured JSON response with ticker, name, and data array\n    ◦ Handles errors by logging and sending a 500 error response\n• Logs the server URL when it starts"
        },
        "timestamp": "2025-08-19 22:32:59.000",
        "event": "click_edit_in_prompt",
        "id": "6071JHdbAsyTQbl6cpz2"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:32:59.000",
        "event": "mapping_unhover",
        "id": "xMRQK0cQHCF9SBASiUxn"
    },
    {
        "source": "frontend",
        "data": {
            "original_summary": "• Sets up an Express server listening on port 3000\n• Middleware:\n  ◦ Enables CORS for cross-origin requests\n  ◦ Parses incoming JSON request bodies\n• Defines endpoints:\n  ◦ /api/hello: responds with a JSON hello message\n  ◦ /api/stock/:symbol:\n    ◦ Converts the symbol parameter to uppercase\n    ◦ Fetches daily stock chart data from Yahoo Finance since 2024-01-01\n    ◦ Extracts company name and quote details (date, close, volume)\n    ◦ Returns a structured JSON response with ticker, name, and data array\n    ◦ Handles errors by logging and sending a 500 error response\n• Logs the server URL when it starts",
            "instruction": "The frontend also wants to know the current stock price!",
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "high",
            "structured": "structured"
        },
        "timestamp": "2025-08-19 22:33:05.000",
        "event": "apply_instruction_summary",
        "id": "FHfV1BuyuboOjxvx3CJs"
    },
    {
        "source": "backend",
        "data": {
            "instruction": "The frontend also wants to know the current stock price!",
            "original_code": "const express = require(\"express\");\nconst cors = require(\"cors\");\nconst yahooFinance = require(\"yahoo-finance2\").default;\n\nconst app = express();\nconst PORT = 3000;\n\napp.use(cors());\napp.use(express.json());\n\napp.get(\"/api/hello\", (req, res) => {\n  res.json({ message: \"Hello from the backend!\" });\n});\n\napp.get(\"/api/stock/:symbol\", async (req, res) => {\n  try {\n    const symbol = req.params.symbol.toUpperCase();\n    const data = await yahooFinance.chart(symbol, {\n      period1: \"2024-01-01\",\n      interval: \"1d\",\n    });\n    const quotes = data.quotes;\n\n    const companyName = data.meta?.shortName || symbol;\n\n    const response = {\n      ticker: symbol,\n      name: companyName,\n      data: quotes.map((q) => ({\n        date: q.date,\n        close: q.close,\n        volume: q.volume,\n      })),\n    };\n\n    console.log(response);\n    res.json(response);\n  } catch (err) {\n    console.error(err);\n    res.status(500).send(\"Error fetching stock data\");\n  }\n});\n\napp.listen(PORT, \"0.0.0.0\", () => {\n  console.log(`Server running on http://localhost:${PORT}`);\n});\n",
            "original_summary": "• Sets up an Express server listening on port 3000\n• Middleware:\n  ◦ Enables CORS for cross-origin requests\n  ◦ Parses incoming JSON request bodies\n• Defines endpoints:\n  ◦ /api/hello: responds with a JSON hello message\n  ◦ /api/stock/:symbol:\n    ◦ Converts the symbol parameter to uppercase\n    ◦ Fetches daily stock chart data from Yahoo Finance since 2024-01-01\n    ◦ Extracts company name and quote details (date, close, volume)\n    ◦ Returns a structured JSON response with ticker, name, and data array\n    ◦ Handles errors by logging and sending a 500 error response\n• Logs the server URL when it starts",
            "updated_summary": "• Sets up an Express server listening on port 3000  \n• Middleware:  \n  ◦ Enables CORS for cross-origin requests  \n  ◦ Parses incoming JSON request bodies  \n• Defines endpoints:  \n  ◦ /api/hello: responds with a JSON hello message  \n  ◦ /api/stock/:symbol:  \n    ◦ Converts the symbol parameter to uppercase  \n    ◦ Fetches daily stock chart data from Yahoo Finance since 2024-01-01  \n    ◦ Extracts company name and quote details (date, close, volume)  \n    ◦ Returns a structured JSON response with ticker, name, data array, and the current stock price  \n    ◦ Handles errors by logging and sending a 500 error response  \n• Logs the server URL when it starts"
        },
        "timestamp": "2025-08-19 22:33:07.000",
        "event": "apply_instruction_summary",
        "id": "ZEsYwySJQ2PFLaKdiU4a"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:33:23.000",
        "event": "mapping_unhover",
        "id": "LXpZD1VohRbEQXQ8bQum"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:33:23.000",
        "event": "mapping_unhover",
        "id": "UpTupN12rPFzfCRKONiN"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 6,
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:33:23.000",
        "event": "mapping_hover",
        "id": "WJrhrp6vncaoK4692Qoj"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 8,
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:33:23.000",
        "event": "mapping_hover",
        "id": "b1GnHDv2FQNErcxHTBO5"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 6,
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:33:24.000",
        "event": "mapping_hover",
        "id": "0scjA5QhcfZSfvhhCMy9"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 3,
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:33:24.000",
        "event": "mapping_hover",
        "id": "2CGLvx6oxd9KTH38tH36"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:33:24.000",
        "event": "mapping_unhover",
        "id": "3JVLJQxQs5aqOtuyUTsp"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:33:24.000",
        "event": "mapping_unhover",
        "id": "AhCfJ5py6riwrwK7ZNEN"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:33:24.000",
        "event": "mapping_unhover",
        "id": "Hv0CtQSIMxiQRg6r9TY6"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 8,
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "high"
        },
        "timestamp": "2025-08-19 22:33:24.000",
        "event": "mapping_hover",
        "id": "Z9sSj5ctrYVYyvFO1mJb"
    },
    {
        "source": "frontend",
        "data": {
            "edited_summary": "• Sets up an Express server listening on port 3000  \n• Middleware:  \n  ◦ Enables CORS for cross-origin requests  \n  ◦ Parses incoming JSON request bodies  \n• Defines endpoints:  \n  ◦ /api/hello: responds with a JSON hello message  \n  ◦ /api/stock/:symbol:  \n    ◦ Converts the symbol parameter to uppercase  \n    ◦ Fetches daily stock chart data from Yahoo Finance since 2024-01-01  \n    ◦ Extracts company name and quote details (date, close, volume)  \n    ◦ Returns a structured JSON response with ticker, name, data array, and the current stock price  \n    ◦ Handles errors by logging and sending a 500 error response  \n• Logs the server URL when it starts",
            "structured": "structured",
            "section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "detail_level": "high",
            "original_summary": "• Sets up an Express server listening on port 3000\n• Middleware:\n  ◦ Enables CORS for cross-origin requests\n  ◦ Parses incoming JSON request bodies\n• Defines endpoints:\n  ◦ /api/hello: responds with a JSON hello message\n  ◦ /api/stock/:symbol:\n    ◦ Converts the symbol parameter to uppercase\n    ◦ Fetches daily stock chart data from Yahoo Finance since 2024-01-01\n    ◦ Extracts company name and quote details (date, close, volume)\n    ◦ Returns a structured JSON response with ticker, name, and data array\n    ◦ Handles errors by logging and sending a 500 error response\n• Logs the server URL when it starts"
        },
        "timestamp": "2025-08-19 22:33:26.000",
        "event": "commit_modified_summary",
        "id": "NUe3pz9TLamZj3QJJKXE"
    },
    {
        "source": "backend",
        "data": {
            "edited_summary": "• Sets up an Express server listening on port 3000  \n• Middleware:  \n  ◦ Enables CORS for cross-origin requests  \n  ◦ Parses incoming JSON request bodies  \n• Defines endpoints:  \n  ◦ /api/hello: responds with a JSON hello message  \n  ◦ /api/stock/:symbol:  \n    ◦ Converts the symbol parameter to uppercase  \n    ◦ Fetches daily stock chart data from Yahoo Finance since 2024-01-01  \n    ◦ Extracts company name and quote details (date, close, volume)  \n    ◦ Returns a structured JSON response with ticker, name, data array, and the current stock price  \n    ◦ Handles errors by logging and sending a 500 error response  \n• Logs the server URL when it starts",
            "structured_type": "structured",
            "updated_code": "const express = require(\"express\");\nconst cors = require(\"cors\");\nconst yahooFinance = require(\"yahoo-finance2\").default;\n\nconst app = express();\nconst PORT = 3000;\n\napp.use(cors());\napp.use(express.json());\n\napp.get(\"/api/hello\", (req, res) => {\n  res.json({ message: \"Hello from the backend!\" });\n});\n\napp.get(\"/api/stock/:symbol\", async (req, res) => {\n  try {\n    const symbol = req.params.symbol.toUpperCase();\n    const data = await yahooFinance.chart(symbol, {\n      period1: \"2024-01-01\",\n      interval: \"1d\",\n    });\n    const quotes = data.quotes;\n\n    const companyName = data.meta?.shortName || symbol;\n\n    // Find the most recent quote with a valid close price for current price\n    let currentPrice = null;\n    if (quotes && quotes.length > 0) {\n      for (let i = quotes.length - 1; i >= 0; i--) {\n        if (typeof quotes[i].close === \"number\") {\n          currentPrice = quotes[i].close;\n          break;\n        }\n      }\n    }\n\n    const response = {\n      ticker: symbol,\n      name: companyName,\n      data: quotes.map((q) => ({\n        date: q.date,\n        close: q.close,\n        volume: q.volume,\n      })),\n      currentPrice: currentPrice,\n    };\n\n    console.log(response);\n    res.json(response);\n  } catch (err) {\n    console.error(err);\n    res.status(500).send(\"Error fetching stock data\");\n  }\n});\n\napp.listen(PORT, \"0.0.0.0\", () => {\n  console.log(`Server running on http://localhost:${PORT}`);\n});",
            "original_code": "const express = require(\"express\");\nconst cors = require(\"cors\");\nconst yahooFinance = require(\"yahoo-finance2\").default;\n\nconst app = express();\nconst PORT = 3000;\n\napp.use(cors());\napp.use(express.json());\n\napp.get(\"/api/hello\", (req, res) => {\n  res.json({ message: \"Hello from the backend!\" });\n});\n\napp.get(\"/api/stock/:symbol\", async (req, res) => {\n  try {\n    const symbol = req.params.symbol.toUpperCase();\n    const data = await yahooFinance.chart(symbol, {\n      period1: \"2024-01-01\",\n      interval: \"1d\",\n    });\n    const quotes = data.quotes;\n\n    const companyName = data.meta?.shortName || symbol;\n\n    const response = {\n      ticker: symbol,\n      name: companyName,\n      data: quotes.map((q) => ({\n        date: q.date,\n        close: q.close,\n        volume: q.volume,\n      })),\n    };\n\n    console.log(response);\n    res.json(response);\n  } catch (err) {\n    console.error(err);\n    res.status(500).send(\"Error fetching stock data\");\n  }\n});\n\napp.listen(PORT, \"0.0.0.0\", () => {\n  console.log(`Server running on http://localhost:${PORT}`);\n});\n",
            "detail_level": "high",
            "original_summary": "• Sets up an Express server listening on port 3000\n• Middleware:\n  ◦ Enables CORS for cross-origin requests\n  ◦ Parses incoming JSON request bodies\n• Defines endpoints:\n  ◦ /api/hello: responds with a JSON hello message\n  ◦ /api/stock/:symbol:\n    ◦ Converts the symbol parameter to uppercase\n    ◦ Fetches daily stock chart data from Yahoo Finance since 2024-01-01\n    ◦ Extracts company name and quote details (date, close, volume)\n    ◦ Returns a structured JSON response with ticker, name, and data array\n    ◦ Handles errors by logging and sending a 500 error response\n• Logs the server URL when it starts"
        },
        "timestamp": "2025-08-19 22:33:30.000",
        "event": "modify_summary_mediation",
        "id": "KyDzbjFMIfoeEgubbRTB"
    },
    {
        "source": "backend",
        "data": {
            "new_code": "const express = require(\"express\");\nconst cors = require(\"cors\");\nconst yahooFinance = require(\"yahoo-finance2\").default;\n\nconst app = express();\nconst PORT = 3000;\n\napp.use(cors());\napp.use(express.json());\n\napp.get(\"/api/hello\", (req, res) => {\n  res.json({ message: \"Hello from the backend!\" });\n});\n\napp.get(\"/api/stock/:symbol\", async (req, res) => {\n  try {\n    const symbol = req.params.symbol.toUpperCase();\n    const data = await yahooFinance.chart(symbol, {\n      period1: \"2024-01-01\",\n      interval: \"1d\",\n    });\n    const quotes = data.quotes;\n\n    const companyName = data.meta?.shortName || symbol;\n\n    // Find the most recent quote with a valid close price for current price\n    let currentPrice = null;\n    if (quotes && quotes.length > 0) {\n      for (let i = quotes.length - 1; i >= 0; i--) {\n        if (typeof quotes[i].close === \"number\") {\n          currentPrice = quotes[i].close;\n          break;\n        }\n      }\n    }\n\n    const response = {\n      ticker: symbol,\n      name: companyName,\n      data: quotes.map((q) => ({\n        date: q.date,\n        close: q.close,\n        volume: q.volume,\n      })),\n      currentPrice: currentPrice,\n    };\n\n    console.log(response);\n    res.json(response);\n  } catch (err) {\n    console.error(err);\n    res.status(500).send(\"Error fetching stock data\");\n  }\n});\n\napp.listen(PORT, \"0.0.0.0\", () => {\n  console.log(`Server running on http://localhost:${PORT}`);\n});",
            "new_summary": {
                "medium_unstructured": "The code initializes an Express server that listens on port 3000 and uses CORS and JSON middleware. It defines two endpoints: one returns a hello message, and another fetches and returns stock data for a given symbol using the yahoo-finance2 library. The stock endpoint processes the symbol, retrieves chart data since 2024-01-01, and responds with formatted stock information, now also including the most recent valid close price as 'currentPrice' in the response, or an error.",
                "title": "Express Server Providing Stock Data with Current Price and Hello Endpoint",
                "low_unstructured": "This code sets up an Express server with endpoints for a hello message and stock data retrieval, now including the most recent valid close price as 'currentPrice' in the stock data response.",
                "low_structured": "• Sets up an Express server\n• Provides hello and stock data endpoints\n• Uses CORS and JSON middleware\n• Stock data endpoint now includes the most recent valid close price as 'currentPrice' in the response",
                "medium_structured": "• Initializes an Express server on port 3000\n• Adds CORS and JSON parsing middleware\n• Defines endpoints:\n  ◦ /api/hello returns a hello message\n  ◦ /api/stock/:symbol fetches and returns stock data using yahoo-finance2, now also including the most recent valid close price as 'currentPrice' in the response\n• Handles errors by returning a 500 status code",
                "high_unstructured": "This code creates an Express server that listens on port 3000 and incorporates CORS and JSON body parsing middleware. It exposes a '/api/hello' endpoint that returns a simple JSON greeting, and a '/api/stock/:symbol' endpoint that retrieves daily stock data from Yahoo Finance starting from January 1, 2024, for the provided symbol. The stock endpoint processes the symbol to uppercase, fetches chart data, extracts the company name and relevant quote details (date, close, volume), and now also determines and includes the most recent valid close price as 'currentPrice' in the structured JSON response. Errors during data retrieval are logged and result in a 500 error response, and the server logs its startup URL.",
                "high_structured": "• Sets up an Express server listening on port 3000\n• Middleware:\n  ◦ Enables CORS for cross-origin requests\n  ◦ Parses incoming JSON request bodies\n• Defines endpoints:\n  ◦ /api/hello: responds with a JSON hello message\n  ◦ /api/stock/:symbol:\n    ◦ Converts the symbol parameter to uppercase\n    ◦ Fetches daily stock chart data from Yahoo Finance since 2024-01-01\n    ◦ Extracts company name and quote details (date, close, volume)\n    ◦ Determines and includes the most recent valid close price as 'currentPrice' in the response\n    ◦ Returns a structured JSON response with ticker, name, data array, and currentPrice\n    ◦ Handles errors by logging and sending a 500 error response\n• Logs the server URL when it starts"
            },
            "original_code": "const express = require(\"express\");\nconst cors = require(\"cors\");\nconst yahooFinance = require(\"yahoo-finance2\").default;\n\nconst app = express();\nconst PORT = 3000;\n\napp.use(cors());\napp.use(express.json());\n\napp.get(\"/api/hello\", (req, res) => {\n  res.json({ message: \"Hello from the backend!\" });\n});\n\napp.get(\"/api/stock/:symbol\", async (req, res) => {\n  try {\n    const symbol = req.params.symbol.toUpperCase();\n    const data = await yahooFinance.chart(symbol, {\n      period1: \"2024-01-01\",\n      interval: \"1d\",\n    });\n    const quotes = data.quotes;\n\n    const companyName = data.meta?.shortName || symbol;\n\n    // Find the most recent quote with a valid close price for current price\n    let currentPrice = null;\n    if (quotes && quotes.length > 0) {\n      for (let i = quotes.length - 1; i >= 0; i--) {\n        if (typeof quotes[i].close === \"number\") {\n          currentPrice = quotes[i].close;\n          break;\n        }\n      }\n    }\n\n    const response = {\n      ticker: symbol,\n      name: companyName,\n      data: quotes.map((q) => ({\n        date: q.date,\n        close: q.close,\n        volume: q.volume,\n      })),\n      currentPrice: currentPrice,\n    };\n\n    console.log(response);\n    res.json(response);\n  } catch (err) {\n    console.error(err);\n    res.status(500).send(\"Error fetching stock data\");\n  }\n});\n\napp.listen(PORT, \"0.0.0.0\", () => {\n  console.log(`Server running on http://localhost:${PORT}`);\n});",
            "old_summary": {
                "medium_unstructured": "The code initializes an Express server that listens on port 3000 and uses CORS and JSON middleware. It defines two endpoints: one returns a hello message, and another fetches and returns stock data for a given symbol using the yahoo-finance2 library. The stock endpoint processes the symbol, retrieves chart data since 2024-01-01, and responds with formatted stock information or an error.",
                "title": "Express Server Providing Stock Data and Hello Endpoint",
                "low_unstructured": "This code sets up an Express server with endpoints for a hello message and stock data retrieval.",
                "low_structured": "• Sets up an Express server\n• Provides hello and stock data endpoints\n• Uses CORS and JSON middleware",
                "medium_structured": "• Initializes an Express server on port 3000\n• Adds CORS and JSON parsing middleware\n• Defines endpoints:\n  ◦ /api/hello returns a hello message\n  ◦ /api/stock/:symbol fetches and returns stock data using yahoo-finance2\n• Handles errors by returning a 500 status code",
                "high_unstructured": "This code creates an Express server that listens on port 3000 and incorporates CORS and JSON body parsing middleware. It exposes a '/api/hello' endpoint that returns a simple JSON greeting, and a '/api/stock/:symbol' endpoint that retrieves daily stock data from Yahoo Finance starting from January 1, 2024, for the provided symbol. The stock endpoint processes the symbol to uppercase, fetches chart data, extracts the company name and relevant quote details (date, close, volume), and returns them in a structured JSON response. Errors during data retrieval are logged and result in a 500 error response, and the server logs its startup URL.",
                "high_structured": "• Sets up an Express server listening on port 3000\n• Middleware:\n  ◦ Enables CORS for cross-origin requests\n  ◦ Parses incoming JSON request bodies\n• Defines endpoints:\n  ◦ /api/hello: responds with a JSON hello message\n  ◦ /api/stock/:symbol:\n    ◦ Converts the symbol parameter to uppercase\n    ◦ Fetches daily stock chart data from Yahoo Finance since 2024-01-01\n    ◦ Extracts company name and quote details (date, close, volume)\n    ◦ Returns a structured JSON response with ticker, name, and data array\n    ◦ Handles errors by logging and sending a 500 error response\n• Logs the server URL when it starts"
            }
        },
        "timestamp": "2025-08-19 22:33:37.000",
        "event": "summarize_modified_code",
        "id": "S3FYK966xS9wpslSdvl9"
    },
    {
        "source": "backend",
        "data": {
            "code": "1: const express = require(\"express\");\n2: const cors = require(\"cors\");\n3: const yahooFinance = require(\"yahoo-finance2\").default;\n4: \n5: const app = express();\n6: const PORT = 3000;\n7: \n8: app.use(cors());\n9: app.use(express.json());\n10: \n11: app.get(\"/api/hello\", (req, res) => {\n12:   res.json({ message: \"Hello from the backend!\" });\n13: });\n14: \n15: app.get(\"/api/stock/:symbol\", async (req, res) => {\n16:   try {\n17:     const symbol = req.params.symbol.toUpperCase();\n18:     const data = await yahooFinance.chart(symbol, {\n19:       period1: \"2024-01-01\",\n20:       interval: \"1d\",\n21:     });\n22:     const quotes = data.quotes;\n23: \n24:     const companyName = data.meta?.shortName || symbol;\n25: \n26:     // Find the most recent quote with a valid close price for current price\n27:     let currentPrice = null;\n28:     if (quotes && quotes.length > 0) {\n29:       for (let i = quotes.length - 1; i >= 0; i--) {\n30:         if (typeof quotes[i].close === \"number\") {\n31:           currentPrice = quotes[i].close;\n32:           break;\n33:         }\n34:       }\n35:     }\n36: \n37:     const response = {\n38:       ticker: symbol,\n39:       name: companyName,\n40:       data: quotes.map((q) => ({\n41:         date: q.date,\n42:         close: q.close,\n43:         volume: q.volume,\n44:       })),\n45:       currentPrice: currentPrice,\n46:     };\n47: \n48:     console.log(response);\n49:     res.json(response);\n50:   } catch (err) {\n51:     console.error(err);\n52:     res.status(500).send(\"Error fetching stock data\");\n53:   }\n54: });\n55: \n56: app.listen(PORT, \"0.0.0.0\", () => {\n57:   console.log(`Server running on http://localhost:${PORT}`);\n58: });",
            "summary": "• Sets up an Express server\n• Provides hello and stock data endpoints\n• Uses CORS and JSON middleware\n• Stock data endpoint now includes the most recent valid close price as 'currentPrice' in the response",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "const express = require(\"express\");",
                            "line": 1
                        },
                        {
                            "code": "const app = express();",
                            "line": 5
                        },
                        {
                            "code": "app.listen(PORT, \"0.0.0.0\", () => {",
                            "line": 56
                        }
                    ],
                    "summaryComponent": "Sets up an Express server"
                },
                {
                    "codeSegments": [
                        {
                            "code": "app.get(\"/api/hello\", (req, res) => {",
                            "line": 11
                        },
                        {
                            "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {",
                            "line": 15
                        }
                    ],
                    "summaryComponent": "Provides hello and stock data endpoints"
                },
                {
                    "codeSegments": [
                        {
                            "code": "app.use(cors());",
                            "line": 8
                        },
                        {
                            "code": "app.use(express.json());",
                            "line": 9
                        }
                    ],
                    "summaryComponent": "Uses CORS and JSON middleware"
                },
                {
                    "codeSegments": [
                        {
                            "code": "let currentPrice = null;",
                            "line": 27
                        },
                        {
                            "code": "if (quotes && quotes.length > 0) {",
                            "line": 28
                        },
                        {
                            "code": "for (let i = quotes.length - 1; i >= 0; i--) {",
                            "line": 29
                        },
                        {
                            "code": "if (typeof quotes[i].close === \"number\") {",
                            "line": 30
                        },
                        {
                            "code": "currentPrice = quotes[i].close;",
                            "line": 31
                        },
                        {
                            "code": "currentPrice: currentPrice,",
                            "line": 45
                        }
                    ],
                    "summaryComponent": "Stock data endpoint now includes the most recent valid close price as 'currentPrice' in the response"
                }
            ]
        },
        "timestamp": "2025-08-19 22:33:40.000",
        "event": "map_summary_code",
        "id": "97I6kah9KoXuk7fkFN43"
    },
    {
        "source": "backend",
        "data": {
            "code": "1: const express = require(\"express\");\n2: const cors = require(\"cors\");\n3: const yahooFinance = require(\"yahoo-finance2\").default;\n4: \n5: const app = express();\n6: const PORT = 3000;\n7: \n8: app.use(cors());\n9: app.use(express.json());\n10: \n11: app.get(\"/api/hello\", (req, res) => {\n12:   res.json({ message: \"Hello from the backend!\" });\n13: });\n14: \n15: app.get(\"/api/stock/:symbol\", async (req, res) => {\n16:   try {\n17:     const symbol = req.params.symbol.toUpperCase();\n18:     const data = await yahooFinance.chart(symbol, {\n19:       period1: \"2024-01-01\",\n20:       interval: \"1d\",\n21:     });\n22:     const quotes = data.quotes;\n23: \n24:     const companyName = data.meta?.shortName || symbol;\n25: \n26:     // Find the most recent quote with a valid close price for current price\n27:     let currentPrice = null;\n28:     if (quotes && quotes.length > 0) {\n29:       for (let i = quotes.length - 1; i >= 0; i--) {\n30:         if (typeof quotes[i].close === \"number\") {\n31:           currentPrice = quotes[i].close;\n32:           break;\n33:         }\n34:       }\n35:     }\n36: \n37:     const response = {\n38:       ticker: symbol,\n39:       name: companyName,\n40:       data: quotes.map((q) => ({\n41:         date: q.date,\n42:         close: q.close,\n43:         volume: q.volume,\n44:       })),\n45:       currentPrice: currentPrice,\n46:     };\n47: \n48:     console.log(response);\n49:     res.json(response);\n50:   } catch (err) {\n51:     console.error(err);\n52:     res.status(500).send(\"Error fetching stock data\");\n53:   }\n54: });\n55: \n56: app.listen(PORT, \"0.0.0.0\", () => {\n57:   console.log(`Server running on http://localhost:${PORT}`);\n58: });",
            "summary": "This code sets up an Express server with endpoints for a hello message and stock data retrieval, now including the most recent valid close price as 'currentPrice' in the stock data response.",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "const express = require(\"express\");",
                            "line": 1
                        },
                        {
                            "code": "const app = express();",
                            "line": 5
                        },
                        {
                            "code": "app.listen(PORT, \"0.0.0.0\", () => {",
                            "line": 56
                        }
                    ],
                    "summaryComponent": "sets up an Express server"
                },
                {
                    "codeSegments": [
                        {
                            "code": "app.get(\"/api/hello\", (req, res) => {",
                            "line": 11
                        },
                        {
                            "code": "res.json({ message: \"Hello from the backend!\" });",
                            "line": 12
                        }
                    ],
                    "summaryComponent": "with endpoints for a hello message"
                },
                {
                    "codeSegments": [
                        {
                            "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {",
                            "line": 15
                        }
                    ],
                    "summaryComponent": "and stock data retrieval"
                },
                {
                    "codeSegments": [
                        {
                            "code": "// Find the most recent quote with a valid close price for current price",
                            "line": 26
                        },
                        {
                            "code": "let currentPrice = null;",
                            "line": 27
                        },
                        {
                            "code": "if (quotes && quotes.length > 0) {",
                            "line": 28
                        },
                        {
                            "code": "for (let i = quotes.length - 1; i >= 0; i--) {",
                            "line": 29
                        },
                        {
                            "code": "if (typeof quotes[i].close === \"number\") {",
                            "line": 30
                        },
                        {
                            "code": "currentPrice = quotes[i].close;",
                            "line": 31
                        }
                    ],
                    "summaryComponent": "now including the most recent valid close price as 'currentPrice'"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const response = {",
                            "line": 37
                        },
                        {
                            "code": "currentPrice: currentPrice,",
                            "line": 45
                        },
                        {
                            "code": "res.json(response);",
                            "line": 49
                        }
                    ],
                    "summaryComponent": "in the stock data response"
                }
            ]
        },
        "timestamp": "2025-08-19 22:33:41.000",
        "event": "map_summary_code",
        "id": "Jp0zFamGEZH2aIn9tTgp"
    },
    {
        "source": "backend",
        "data": {
            "code": "1: const express = require(\"express\");\n2: const cors = require(\"cors\");\n3: const yahooFinance = require(\"yahoo-finance2\").default;\n4: \n5: const app = express();\n6: const PORT = 3000;\n7: \n8: app.use(cors());\n9: app.use(express.json());\n10: \n11: app.get(\"/api/hello\", (req, res) => {\n12:   res.json({ message: \"Hello from the backend!\" });\n13: });\n14: \n15: app.get(\"/api/stock/:symbol\", async (req, res) => {\n16:   try {\n17:     const symbol = req.params.symbol.toUpperCase();\n18:     const data = await yahooFinance.chart(symbol, {\n19:       period1: \"2024-01-01\",\n20:       interval: \"1d\",\n21:     });\n22:     const quotes = data.quotes;\n23: \n24:     const companyName = data.meta?.shortName || symbol;\n25: \n26:     // Find the most recent quote with a valid close price for current price\n27:     let currentPrice = null;\n28:     if (quotes && quotes.length > 0) {\n29:       for (let i = quotes.length - 1; i >= 0; i--) {\n30:         if (typeof quotes[i].close === \"number\") {\n31:           currentPrice = quotes[i].close;\n32:           break;\n33:         }\n34:       }\n35:     }\n36: \n37:     const response = {\n38:       ticker: symbol,\n39:       name: companyName,\n40:       data: quotes.map((q) => ({\n41:         date: q.date,\n42:         close: q.close,\n43:         volume: q.volume,\n44:       })),\n45:       currentPrice: currentPrice,\n46:     };\n47: \n48:     console.log(response);\n49:     res.json(response);\n50:   } catch (err) {\n51:     console.error(err);\n52:     res.status(500).send(\"Error fetching stock data\");\n53:   }\n54: });\n55: \n56: app.listen(PORT, \"0.0.0.0\", () => {\n57:   console.log(`Server running on http://localhost:${PORT}`);\n58: });",
            "summary": "• Initializes an Express server on port 3000\n• Adds CORS and JSON parsing middleware\n• Defines endpoints:\n  ◦ /api/hello returns a hello message\n  ◦ /api/stock/:symbol fetches and returns stock data using yahoo-finance2, now also including the most recent valid close price as 'currentPrice' in the response\n• Handles errors by returning a 500 status code",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "const app = express();",
                            "line": 5
                        },
                        {
                            "code": "const PORT = 3000;",
                            "line": 6
                        },
                        {
                            "code": "app.listen(PORT, \"0.0.0.0\", () => {",
                            "line": 56
                        }
                    ],
                    "summaryComponent": "Initializes an Express server on port 3000"
                },
                {
                    "codeSegments": [
                        {
                            "code": "app.use(cors());",
                            "line": 8
                        },
                        {
                            "code": "app.use(express.json());",
                            "line": 9
                        }
                    ],
                    "summaryComponent": "Adds CORS and JSON parsing middleware"
                },
                {
                    "codeSegments": [
                        {
                            "code": "app.get(\"/api/hello\", (req, res) => {",
                            "line": 11
                        },
                        {
                            "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {",
                            "line": 15
                        }
                    ],
                    "summaryComponent": "Defines endpoints:"
                },
                {
                    "codeSegments": [
                        {
                            "code": "app.get(\"/api/hello\", (req, res) => {",
                            "line": 11
                        },
                        {
                            "code": "res.json({ message: \"Hello from the backend!\" });",
                            "line": 12
                        }
                    ],
                    "summaryComponent": "/api/hello returns a hello message"
                },
                {
                    "codeSegments": [
                        {
                            "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {",
                            "line": 15
                        },
                        {
                            "code": "const data = await yahooFinance.chart(symbol, {",
                            "line": 18
                        },
                        {
                            "code": "const quotes = data.quotes;",
                            "line": 22
                        },
                        {
                            "code": "let currentPrice = null;",
                            "line": 27
                        },
                        {
                            "code": "if (typeof quotes[i].close === \"number\") {",
                            "line": 30
                        },
                        {
                            "code": "currentPrice = quotes[i].close;",
                            "line": 31
                        },
                        {
                            "code": "currentPrice: currentPrice,",
                            "line": 45
                        }
                    ],
                    "summaryComponent": "/api/stock/:symbol fetches and returns stock data using yahoo-finance2, now also including the most recent valid close price as 'currentPrice' in the response"
                },
                {
                    "codeSegments": [
                        {
                            "code": "res.status(500).send(\"Error fetching stock data\");",
                            "line": 52
                        }
                    ],
                    "summaryComponent": "Handles errors by returning a 500 status code"
                }
            ]
        },
        "timestamp": "2025-08-19 22:33:41.000",
        "event": "map_summary_code",
        "id": "PmAuhhudr4zWXgMT4dJa"
    },
    {
        "source": "backend",
        "data": {
            "code": "1: const express = require(\"express\");\n2: const cors = require(\"cors\");\n3: const yahooFinance = require(\"yahoo-finance2\").default;\n4: \n5: const app = express();\n6: const PORT = 3000;\n7: \n8: app.use(cors());\n9: app.use(express.json());\n10: \n11: app.get(\"/api/hello\", (req, res) => {\n12:   res.json({ message: \"Hello from the backend!\" });\n13: });\n14: \n15: app.get(\"/api/stock/:symbol\", async (req, res) => {\n16:   try {\n17:     const symbol = req.params.symbol.toUpperCase();\n18:     const data = await yahooFinance.chart(symbol, {\n19:       period1: \"2024-01-01\",\n20:       interval: \"1d\",\n21:     });\n22:     const quotes = data.quotes;\n23: \n24:     const companyName = data.meta?.shortName || symbol;\n25: \n26:     // Find the most recent quote with a valid close price for current price\n27:     let currentPrice = null;\n28:     if (quotes && quotes.length > 0) {\n29:       for (let i = quotes.length - 1; i >= 0; i--) {\n30:         if (typeof quotes[i].close === \"number\") {\n31:           currentPrice = quotes[i].close;\n32:           break;\n33:         }\n34:       }\n35:     }\n36: \n37:     const response = {\n38:       ticker: symbol,\n39:       name: companyName,\n40:       data: quotes.map((q) => ({\n41:         date: q.date,\n42:         close: q.close,\n43:         volume: q.volume,\n44:       })),\n45:       currentPrice: currentPrice,\n46:     };\n47: \n48:     console.log(response);\n49:     res.json(response);\n50:   } catch (err) {\n51:     console.error(err);\n52:     res.status(500).send(\"Error fetching stock data\");\n53:   }\n54: });\n55: \n56: app.listen(PORT, \"0.0.0.0\", () => {\n57:   console.log(`Server running on http://localhost:${PORT}`);\n58: });",
            "summary": "The code initializes an Express server that listens on port 3000 and uses CORS and JSON middleware. It defines two endpoints: one returns a hello message, and another fetches and returns stock data for a given symbol using the yahoo-finance2 library. The stock endpoint processes the symbol, retrieves chart data since 2024-01-01, and responds with formatted stock information, now also including the most recent valid close price as 'currentPrice' in the response, or an error.",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "const express = require(\"express\");",
                            "line": 1
                        },
                        {
                            "code": "const app = express();",
                            "line": 5
                        }
                    ],
                    "summaryComponent": "initializes an Express server"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const PORT = 3000;",
                            "line": 6
                        },
                        {
                            "code": "app.listen(PORT, \"0.0.0.0\", () => {",
                            "line": 56
                        }
                    ],
                    "summaryComponent": "listens on port 3000"
                },
                {
                    "codeSegments": [
                        {
                            "code": "app.use(cors());",
                            "line": 8
                        },
                        {
                            "code": "app.use(express.json());",
                            "line": 9
                        }
                    ],
                    "summaryComponent": "uses CORS and JSON middleware"
                },
                {
                    "codeSegments": [
                        {
                            "code": "app.get(\"/api/hello\", (req, res) => {",
                            "line": 11
                        },
                        {
                            "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {",
                            "line": 15
                        }
                    ],
                    "summaryComponent": "defines two endpoints"
                },
                {
                    "codeSegments": [
                        {
                            "code": "res.json({ message: \"Hello from the backend!\" });",
                            "line": 12
                        }
                    ],
                    "summaryComponent": "one returns a hello message"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const yahooFinance = require(\"yahoo-finance2\").default;",
                            "line": 3
                        },
                        {
                            "code": "const data = await yahooFinance.chart(symbol, {",
                            "line": 18
                        }
                    ],
                    "summaryComponent": "another fetches and returns stock data for a given symbol using the yahoo-finance2 library"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const symbol = req.params.symbol.toUpperCase();",
                            "line": 17
                        }
                    ],
                    "summaryComponent": "The stock endpoint processes the symbol"
                },
                {
                    "codeSegments": [
                        {
                            "code": "period1: \"2024-01-01\",",
                            "line": 19
                        }
                    ],
                    "summaryComponent": "retrieves chart data since 2024-01-01"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const response = {",
                            "line": 37
                        },
                        {
                            "code": "res.json(response);",
                            "line": 49
                        }
                    ],
                    "summaryComponent": "responds with formatted stock information"
                },
                {
                    "codeSegments": [
                        {
                            "code": "let currentPrice = null;",
                            "line": 27
                        },
                        {
                            "code": "if (typeof quotes[i].close === \"number\") {",
                            "line": 30
                        },
                        {
                            "code": "currentPrice = quotes[i].close;",
                            "line": 31
                        },
                        {
                            "code": "currentPrice: currentPrice,",
                            "line": 45
                        },
                        {
                            "code": "res.status(500).send(\"Error fetching stock data\");",
                            "line": 52
                        }
                    ],
                    "summaryComponent": "now also including the most recent valid close price as 'currentPrice' in the response, or an error"
                }
            ]
        },
        "timestamp": "2025-08-19 22:33:42.000",
        "event": "map_summary_code",
        "id": "mjatiCDIRE3pZhshmTAa"
    },
    {
        "source": "backend",
        "data": {
            "code": "1: const express = require(\"express\");\n2: const cors = require(\"cors\");\n3: const yahooFinance = require(\"yahoo-finance2\").default;\n4: \n5: const app = express();\n6: const PORT = 3000;\n7: \n8: app.use(cors());\n9: app.use(express.json());\n10: \n11: app.get(\"/api/hello\", (req, res) => {\n12:   res.json({ message: \"Hello from the backend!\" });\n13: });\n14: \n15: app.get(\"/api/stock/:symbol\", async (req, res) => {\n16:   try {\n17:     const symbol = req.params.symbol.toUpperCase();\n18:     const data = await yahooFinance.chart(symbol, {\n19:       period1: \"2024-01-01\",\n20:       interval: \"1d\",\n21:     });\n22:     const quotes = data.quotes;\n23: \n24:     const companyName = data.meta?.shortName || symbol;\n25: \n26:     // Find the most recent quote with a valid close price for current price\n27:     let currentPrice = null;\n28:     if (quotes && quotes.length > 0) {\n29:       for (let i = quotes.length - 1; i >= 0; i--) {\n30:         if (typeof quotes[i].close === \"number\") {\n31:           currentPrice = quotes[i].close;\n32:           break;\n33:         }\n34:       }\n35:     }\n36: \n37:     const response = {\n38:       ticker: symbol,\n39:       name: companyName,\n40:       data: quotes.map((q) => ({\n41:         date: q.date,\n42:         close: q.close,\n43:         volume: q.volume,\n44:       })),\n45:       currentPrice: currentPrice,\n46:     };\n47: \n48:     console.log(response);\n49:     res.json(response);\n50:   } catch (err) {\n51:     console.error(err);\n52:     res.status(500).send(\"Error fetching stock data\");\n53:   }\n54: });\n55: \n56: app.listen(PORT, \"0.0.0.0\", () => {\n57:   console.log(`Server running on http://localhost:${PORT}`);\n58: });",
            "summary": "• Sets up an Express server listening on port 3000\n• Middleware:\n  ◦ Enables CORS for cross-origin requests\n  ◦ Parses incoming JSON request bodies\n• Defines endpoints:\n  ◦ /api/hello: responds with a JSON hello message\n  ◦ /api/stock/:symbol:\n    ◦ Converts the symbol parameter to uppercase\n    ◦ Fetches daily stock chart data from Yahoo Finance since 2024-01-01\n    ◦ Extracts company name and quote details (date, close, volume)\n    ◦ Determines and includes the most recent valid close price as 'currentPrice' in the response\n    ◦ Returns a structured JSON response with ticker, name, data array, and currentPrice\n    ◦ Handles errors by logging and sending a 500 error response\n• Logs the server URL when it starts",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "const app = express();",
                            "line": 5
                        },
                        {
                            "code": "const PORT = 3000;",
                            "line": 6
                        },
                        {
                            "code": "app.listen(PORT, \"0.0.0.0\", () => {",
                            "line": 56
                        }
                    ],
                    "summaryComponent": "Sets up an Express server listening on port 3000"
                },
                {
                    "codeSegments": [
                        {
                            "code": "app.use(cors());",
                            "line": 8
                        }
                    ],
                    "summaryComponent": "Enables CORS for cross-origin requests"
                },
                {
                    "codeSegments": [
                        {
                            "code": "app.use(express.json());",
                            "line": 9
                        }
                    ],
                    "summaryComponent": "Parses incoming JSON request bodies"
                },
                {
                    "codeSegments": [
                        {
                            "code": "app.get(\"/api/hello\", (req, res) => {",
                            "line": 11
                        },
                        {
                            "code": "res.json({ message: \"Hello from the backend!\" });",
                            "line": 12
                        }
                    ],
                    "summaryComponent": "/api/hello: responds with a JSON hello message"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const symbol = req.params.symbol.toUpperCase();",
                            "line": 17
                        }
                    ],
                    "summaryComponent": "Converts the symbol parameter to uppercase"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const data = await yahooFinance.chart(symbol, {",
                            "line": 18
                        },
                        {
                            "code": "period1: \"2024-01-01\",",
                            "line": 19
                        },
                        {
                            "code": "interval: \"1d\",",
                            "line": 20
                        }
                    ],
                    "summaryComponent": "Fetches daily stock chart data from Yahoo Finance since 2024-01-01"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const companyName = data.meta?.shortName || symbol;",
                            "line": 24
                        },
                        {
                            "code": "data: quotes.map((q) => ({",
                            "line": 40
                        },
                        {
                            "code": "date: q.date,",
                            "line": 41
                        },
                        {
                            "code": "close: q.close,",
                            "line": 42
                        },
                        {
                            "code": "volume: q.volume,",
                            "line": 43
                        }
                    ],
                    "summaryComponent": "Extracts company name and quote details (date, close, volume)"
                },
                {
                    "codeSegments": [
                        {
                            "code": "let currentPrice = null;",
                            "line": 27
                        },
                        {
                            "code": "if (quotes && quotes.length > 0) {",
                            "line": 28
                        },
                        {
                            "code": "for (let i = quotes.length - 1; i >= 0; i--) {",
                            "line": 29
                        },
                        {
                            "code": "if (typeof quotes[i].close === \"number\") {",
                            "line": 30
                        },
                        {
                            "code": "currentPrice = quotes[i].close;",
                            "line": 31
                        }
                    ],
                    "summaryComponent": "Determines and includes the most recent valid close price as 'currentPrice' in the response"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const response = {",
                            "line": 37
                        },
                        {
                            "code": "ticker: symbol,",
                            "line": 38
                        },
                        {
                            "code": "name: companyName,",
                            "line": 39
                        },
                        {
                            "code": "data: quotes.map((q) => ({",
                            "line": 40
                        },
                        {
                            "code": "currentPrice: currentPrice,",
                            "line": 45
                        },
                        {
                            "code": "res.json(response);",
                            "line": 49
                        }
                    ],
                    "summaryComponent": "Returns a structured JSON response with ticker, name, data array, and currentPrice"
                },
                {
                    "codeSegments": [
                        {
                            "code": "catch (err) {",
                            "line": 50
                        },
                        {
                            "code": "console.error(err);",
                            "line": 51
                        },
                        {
                            "code": "res.status(500).send(\"Error fetching stock data\");",
                            "line": 52
                        }
                    ],
                    "summaryComponent": "Handles errors by logging and sending a 500 error response"
                },
                {
                    "codeSegments": [
                        {
                            "code": "console.log(`Server running on http://localhost:${PORT}`);",
                            "line": 57
                        }
                    ],
                    "summaryComponent": "Logs the server URL when it starts"
                }
            ]
        },
        "timestamp": "2025-08-19 22:33:44.000",
        "event": "map_summary_code",
        "id": "WFhDJ05G7gRzgDabkRLf"
    },
    {
        "source": "frontend",
        "data": {
            "before_section_id": "a200c29e-3a68-44cd-a9e9-6bf4bbfaa9b0",
            "after_section_id": "d705a13c-60c9-44f4-a94f-c7da3bbe29d3"
        },
        "timestamp": "2025-08-19 22:33:45.000",
        "event": "autotransit_section",
        "id": "WdQO5qlmGb3oHLBl8BCH"
    },
    {
        "source": "backend",
        "data": {
            "code": "1: const express = require(\"express\");\n2: const cors = require(\"cors\");\n3: const yahooFinance = require(\"yahoo-finance2\").default;\n4: \n5: const app = express();\n6: const PORT = 3000;\n7: \n8: app.use(cors());\n9: app.use(express.json());\n10: \n11: app.get(\"/api/hello\", (req, res) => {\n12:   res.json({ message: \"Hello from the backend!\" });\n13: });\n14: \n15: app.get(\"/api/stock/:symbol\", async (req, res) => {\n16:   try {\n17:     const symbol = req.params.symbol.toUpperCase();\n18:     const data = await yahooFinance.chart(symbol, {\n19:       period1: \"2024-01-01\",\n20:       interval: \"1d\",\n21:     });\n22:     const quotes = data.quotes;\n23: \n24:     const companyName = data.meta?.shortName || symbol;\n25: \n26:     // Find the most recent quote with a valid close price for current price\n27:     let currentPrice = null;\n28:     if (quotes && quotes.length > 0) {\n29:       for (let i = quotes.length - 1; i >= 0; i--) {\n30:         if (typeof quotes[i].close === \"number\") {\n31:           currentPrice = quotes[i].close;\n32:           break;\n33:         }\n34:       }\n35:     }\n36: \n37:     const response = {\n38:       ticker: symbol,\n39:       name: companyName,\n40:       data: quotes.map((q) => ({\n41:         date: q.date,\n42:         close: q.close,\n43:         volume: q.volume,\n44:       })),\n45:       currentPrice: currentPrice,\n46:     };\n47: \n48:     console.log(response);\n49:     res.json(response);\n50:   } catch (err) {\n51:     console.error(err);\n52:     res.status(500).send(\"Error fetching stock data\");\n53:   }\n54: });\n55: \n56: app.listen(PORT, \"0.0.0.0\", () => {\n57:   console.log(`Server running on http://localhost:${PORT}`);\n58: });",
            "summary": "This code creates an Express server that listens on port 3000 and incorporates CORS and JSON body parsing middleware. It exposes a '/api/hello' endpoint that returns a simple JSON greeting, and a '/api/stock/:symbol' endpoint that retrieves daily stock data from Yahoo Finance starting from January 1, 2024, for the provided symbol. The stock endpoint processes the symbol to uppercase, fetches chart data, extracts the company name and relevant quote details (date, close, volume), and now also determines and includes the most recent valid close price as 'currentPrice' in the structured JSON response. Errors during data retrieval are logged and result in a 500 error response, and the server logs its startup URL.",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "const express = require(\"express\");",
                            "line": 1
                        },
                        {
                            "code": "const app = express();",
                            "line": 5
                        }
                    ],
                    "summaryComponent": "creates an Express server"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const PORT = 3000;",
                            "line": 6
                        },
                        {
                            "code": "app.listen(PORT, \"0.0.0.0\", () => {",
                            "line": 56
                        }
                    ],
                    "summaryComponent": "listens on port 3000"
                },
                {
                    "codeSegments": [
                        {
                            "code": "app.use(cors());",
                            "line": 8
                        },
                        {
                            "code": "app.use(express.json());",
                            "line": 9
                        }
                    ],
                    "summaryComponent": "incorporates CORS and JSON body parsing middleware"
                },
                {
                    "codeSegments": [
                        {
                            "code": "app.get(\"/api/hello\", (req, res) => {",
                            "line": 11
                        },
                        {
                            "code": "res.json({ message: \"Hello from the backend!\" });",
                            "line": 12
                        }
                    ],
                    "summaryComponent": "exposes a '/api/hello' endpoint that returns a simple JSON greeting"
                },
                {
                    "codeSegments": [
                        {
                            "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {",
                            "line": 15
                        },
                        {
                            "code": "const symbol = req.params.symbol.toUpperCase();",
                            "line": 17
                        },
                        {
                            "code": "const data = await yahooFinance.chart(symbol, {",
                            "line": 18
                        },
                        {
                            "code": "period1: \"2024-01-01\",",
                            "line": 19
                        },
                        {
                            "code": "interval: \"1d\",",
                            "line": 20
                        }
                    ],
                    "summaryComponent": "a '/api/stock/:symbol' endpoint that retrieves daily stock data from Yahoo Finance starting from January 1, 2024, for the provided symbol"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const symbol = req.params.symbol.toUpperCase();",
                            "line": 17
                        }
                    ],
                    "summaryComponent": "processes the symbol to uppercase"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const data = await yahooFinance.chart(symbol, {",
                            "line": 18
                        }
                    ],
                    "summaryComponent": "fetches chart data"
                },
                {
                    "codeSegments": [
                        {
                            "code": "const companyName = data.meta?.shortName || symbol;",
                            "line": 24
                        },
                        {
                            "code": "data: quotes.map((q) => ({",
                            "line": 40
                        },
                        {
                            "code": "date: q.date,",
                            "line": 41
                        },
                        {
                            "code": "close: q.close,",
                            "line": 42
                        },
                        {
                            "code": "volume: q.volume,",
                            "line": 43
                        }
                    ],
                    "summaryComponent": "extracts the company name and relevant quote details (date, close, volume)"
                },
                {
                    "codeSegments": [
                        {
                            "code": "let currentPrice = null;",
                            "line": 27
                        },
                        {
                            "code": "if (quotes && quotes.length > 0) {",
                            "line": 28
                        },
                        {
                            "code": "for (let i = quotes.length - 1; i >= 0; i--) {",
                            "line": 29
                        },
                        {
                            "code": "if (typeof quotes[i].close === \"number\") {",
                            "line": 30
                        },
                        {
                            "code": "currentPrice = quotes[i].close;",
                            "line": 31
                        },
                        {
                            "code": "currentPrice: currentPrice,",
                            "line": 45
                        }
                    ],
                    "summaryComponent": "determines and includes the most recent valid close price as 'currentPrice' in the structured JSON response"
                },
                {
                    "codeSegments": [
                        {
                            "code": "console.error(err);",
                            "line": 51
                        },
                        {
                            "code": "res.status(500).send(\"Error fetching stock data\");",
                            "line": 52
                        }
                    ],
                    "summaryComponent": "Errors during data retrieval are logged and result in a 500 error response"
                },
                {
                    "codeSegments": [
                        {
                            "code": "console.log(`Server running on http://localhost:${PORT}`);",
                            "line": 57
                        }
                    ],
                    "summaryComponent": "the server logs its startup URL"
                }
            ]
        },
        "timestamp": "2025-08-19 22:33:45.000",
        "event": "map_summary_code",
        "id": "jQUuo8q2Bolv1oXtZ5wp"
    },
    {
        "source": "frontend",
        "data": {
            "section_id": "d705a13c-60c9-44f4-a94f-c7da3bbe29d3",
            "section_data": {
                "selectedStructured": "unstructured",
                "lines": [
                    1,
                    58
                ],
                "title": "Express Server Providing Stock Data with Current Price and Hello Endpoint",
                "selectedDetailLevel": "medium",
                "summaryMappings": {
                    "medium_unstructured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "const express = require(\"express\");",
                                    "line": 1
                                },
                                {
                                    "code": "const app = express();",
                                    "line": 5
                                }
                            ],
                            "summaryComponent": "initializes an Express server"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const PORT = 3000;",
                                    "line": 6
                                },
                                {
                                    "code": "app.listen(PORT, \"0.0.0.0\", () => {",
                                    "line": 56
                                }
                            ],
                            "summaryComponent": "listens on port 3000"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "app.use(cors());",
                                    "line": 8
                                },
                                {
                                    "code": "app.use(express.json());",
                                    "line": 9
                                }
                            ],
                            "summaryComponent": "uses CORS and JSON middleware"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "app.get(\"/api/hello\", (req, res) => {",
                                    "line": 11
                                },
                                {
                                    "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {",
                                    "line": 15
                                }
                            ],
                            "summaryComponent": "defines two endpoints"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "res.json({ message: \"Hello from the backend!\" });",
                                    "line": 12
                                }
                            ],
                            "summaryComponent": "one returns a hello message"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const yahooFinance = require(\"yahoo-finance2\").default;",
                                    "line": 3
                                },
                                {
                                    "code": "const data = await yahooFinance.chart(symbol, {",
                                    "line": 18
                                }
                            ],
                            "summaryComponent": "another fetches and returns stock data for a given symbol using the yahoo-finance2 library"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const symbol = req.params.symbol.toUpperCase();",
                                    "line": 17
                                }
                            ],
                            "summaryComponent": "The stock endpoint processes the symbol"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "period1: \"2024-01-01\",",
                                    "line": 19
                                }
                            ],
                            "summaryComponent": "retrieves chart data since 2024-01-01"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const response = {",
                                    "line": 37
                                },
                                {
                                    "code": "res.json(response);",
                                    "line": 49
                                }
                            ],
                            "summaryComponent": "responds with formatted stock information"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "let currentPrice = null;",
                                    "line": 27
                                },
                                {
                                    "code": "if (typeof quotes[i].close === \"number\") {",
                                    "line": 30
                                },
                                {
                                    "code": "currentPrice = quotes[i].close;",
                                    "line": 31
                                },
                                {
                                    "code": "currentPrice: currentPrice,",
                                    "line": 45
                                },
                                {
                                    "code": "res.status(500).send(\"Error fetching stock data\");",
                                    "line": 52
                                }
                            ],
                            "summaryComponent": "now also including the most recent valid close price as 'currentPrice' in the response, or an error"
                        }
                    ],
                    "high_unstructured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "const express = require(\"express\");",
                                    "line": 1
                                },
                                {
                                    "code": "const app = express();",
                                    "line": 5
                                }
                            ],
                            "summaryComponent": "creates an Express server"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const PORT = 3000;",
                                    "line": 6
                                },
                                {
                                    "code": "app.listen(PORT, \"0.0.0.0\", () => {",
                                    "line": 56
                                }
                            ],
                            "summaryComponent": "listens on port 3000"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "app.use(cors());",
                                    "line": 8
                                },
                                {
                                    "code": "app.use(express.json());",
                                    "line": 9
                                }
                            ],
                            "summaryComponent": "incorporates CORS and JSON body parsing middleware"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "app.get(\"/api/hello\", (req, res) => {",
                                    "line": 11
                                },
                                {
                                    "code": "res.json({ message: \"Hello from the backend!\" });",
                                    "line": 12
                                }
                            ],
                            "summaryComponent": "exposes a '/api/hello' endpoint that returns a simple JSON greeting"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {",
                                    "line": 15
                                },
                                {
                                    "code": "const symbol = req.params.symbol.toUpperCase();",
                                    "line": 17
                                },
                                {
                                    "code": "const data = await yahooFinance.chart(symbol, {",
                                    "line": 18
                                },
                                {
                                    "code": "period1: \"2024-01-01\",",
                                    "line": 19
                                },
                                {
                                    "code": "interval: \"1d\",",
                                    "line": 20
                                }
                            ],
                            "summaryComponent": "a '/api/stock/:symbol' endpoint that retrieves daily stock data from Yahoo Finance starting from January 1, 2024, for the provided symbol"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const symbol = req.params.symbol.toUpperCase();",
                                    "line": 17
                                }
                            ],
                            "summaryComponent": "processes the symbol to uppercase"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const data = await yahooFinance.chart(symbol, {",
                                    "line": 18
                                }
                            ],
                            "summaryComponent": "fetches chart data"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const companyName = data.meta?.shortName || symbol;",
                                    "line": 24
                                },
                                {
                                    "code": "data: quotes.map((q) => ({",
                                    "line": 40
                                },
                                {
                                    "code": "date: q.date,",
                                    "line": 41
                                },
                                {
                                    "code": "close: q.close,",
                                    "line": 42
                                },
                                {
                                    "code": "volume: q.volume,",
                                    "line": 43
                                }
                            ],
                            "summaryComponent": "extracts the company name and relevant quote details (date, close, volume)"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "let currentPrice = null;",
                                    "line": 27
                                },
                                {
                                    "code": "if (quotes && quotes.length > 0) {",
                                    "line": 28
                                },
                                {
                                    "code": "for (let i = quotes.length - 1; i >= 0; i--) {",
                                    "line": 29
                                },
                                {
                                    "code": "if (typeof quotes[i].close === \"number\") {",
                                    "line": 30
                                },
                                {
                                    "code": "currentPrice = quotes[i].close;",
                                    "line": 31
                                },
                                {
                                    "code": "currentPrice: currentPrice,",
                                    "line": 45
                                }
                            ],
                            "summaryComponent": "determines and includes the most recent valid close price as 'currentPrice' in the structured JSON response"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "console.error(err);",
                                    "line": 51
                                },
                                {
                                    "code": "res.status(500).send(\"Error fetching stock data\");",
                                    "line": 52
                                }
                            ],
                            "summaryComponent": "Errors during data retrieval are logged and result in a 500 error response"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "console.log(`Server running on http://localhost:${PORT}`);",
                                    "line": 57
                                }
                            ],
                            "summaryComponent": "the server logs its startup URL"
                        }
                    ],
                    "low_unstructured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "const express = require(\"express\");",
                                    "line": 1
                                },
                                {
                                    "code": "const app = express();",
                                    "line": 5
                                },
                                {
                                    "code": "app.listen(PORT, \"0.0.0.0\", () => {",
                                    "line": 56
                                }
                            ],
                            "summaryComponent": "sets up an Express server"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "app.get(\"/api/hello\", (req, res) => {",
                                    "line": 11
                                },
                                {
                                    "code": "res.json({ message: \"Hello from the backend!\" });",
                                    "line": 12
                                }
                            ],
                            "summaryComponent": "with endpoints for a hello message"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {",
                                    "line": 15
                                }
                            ],
                            "summaryComponent": "and stock data retrieval"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "// Find the most recent quote with a valid close price for current price",
                                    "line": 26
                                },
                                {
                                    "code": "let currentPrice = null;",
                                    "line": 27
                                },
                                {
                                    "code": "if (quotes && quotes.length > 0) {",
                                    "line": 28
                                },
                                {
                                    "code": "for (let i = quotes.length - 1; i >= 0; i--) {",
                                    "line": 29
                                },
                                {
                                    "code": "if (typeof quotes[i].close === \"number\") {",
                                    "line": 30
                                },
                                {
                                    "code": "currentPrice = quotes[i].close;",
                                    "line": 31
                                }
                            ],
                            "summaryComponent": "now including the most recent valid close price as 'currentPrice'"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const response = {",
                                    "line": 37
                                },
                                {
                                    "code": "currentPrice: currentPrice,",
                                    "line": 45
                                },
                                {
                                    "code": "res.json(response);",
                                    "line": 49
                                }
                            ],
                            "summaryComponent": "in the stock data response"
                        }
                    ],
                    "low_structured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "const express = require(\"express\");",
                                    "line": 1
                                },
                                {
                                    "code": "const app = express();",
                                    "line": 5
                                },
                                {
                                    "code": "app.listen(PORT, \"0.0.0.0\", () => {",
                                    "line": 56
                                }
                            ],
                            "summaryComponent": "Sets up an Express server"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "app.get(\"/api/hello\", (req, res) => {",
                                    "line": 11
                                },
                                {
                                    "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {",
                                    "line": 15
                                }
                            ],
                            "summaryComponent": "Provides hello and stock data endpoints"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "app.use(cors());",
                                    "line": 8
                                },
                                {
                                    "code": "app.use(express.json());",
                                    "line": 9
                                }
                            ],
                            "summaryComponent": "Uses CORS and JSON middleware"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "let currentPrice = null;",
                                    "line": 27
                                },
                                {
                                    "code": "if (quotes && quotes.length > 0) {",
                                    "line": 28
                                },
                                {
                                    "code": "for (let i = quotes.length - 1; i >= 0; i--) {",
                                    "line": 29
                                },
                                {
                                    "code": "if (typeof quotes[i].close === \"number\") {",
                                    "line": 30
                                },
                                {
                                    "code": "currentPrice = quotes[i].close;",
                                    "line": 31
                                },
                                {
                                    "code": "currentPrice: currentPrice,",
                                    "line": 45
                                }
                            ],
                            "summaryComponent": "Stock data endpoint now includes the most recent valid close price as 'currentPrice' in the response"
                        }
                    ],
                    "medium_structured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "const app = express();",
                                    "line": 5
                                },
                                {
                                    "code": "const PORT = 3000;",
                                    "line": 6
                                },
                                {
                                    "code": "app.listen(PORT, \"0.0.0.0\", () => {",
                                    "line": 56
                                }
                            ],
                            "summaryComponent": "Initializes an Express server on port 3000"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "app.use(cors());",
                                    "line": 8
                                },
                                {
                                    "code": "app.use(express.json());",
                                    "line": 9
                                }
                            ],
                            "summaryComponent": "Adds CORS and JSON parsing middleware"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "app.get(\"/api/hello\", (req, res) => {",
                                    "line": 11
                                },
                                {
                                    "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {",
                                    "line": 15
                                }
                            ],
                            "summaryComponent": "Defines endpoints:"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "app.get(\"/api/hello\", (req, res) => {",
                                    "line": 11
                                },
                                {
                                    "code": "res.json({ message: \"Hello from the backend!\" });",
                                    "line": 12
                                }
                            ],
                            "summaryComponent": "/api/hello returns a hello message"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "app.get(\"/api/stock/:symbol\", async (req, res) => {",
                                    "line": 15
                                },
                                {
                                    "code": "const data = await yahooFinance.chart(symbol, {",
                                    "line": 18
                                },
                                {
                                    "code": "const quotes = data.quotes;",
                                    "line": 22
                                },
                                {
                                    "code": "let currentPrice = null;",
                                    "line": 27
                                },
                                {
                                    "code": "if (typeof quotes[i].close === \"number\") {",
                                    "line": 30
                                },
                                {
                                    "code": "currentPrice = quotes[i].close;",
                                    "line": 31
                                },
                                {
                                    "code": "currentPrice: currentPrice,",
                                    "line": 45
                                }
                            ],
                            "summaryComponent": "/api/stock/:symbol fetches and returns stock data using yahoo-finance2, now also including the most recent valid close price as 'currentPrice' in the response"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "res.status(500).send(\"Error fetching stock data\");",
                                    "line": 52
                                }
                            ],
                            "summaryComponent": "Handles errors by returning a 500 status code"
                        }
                    ],
                    "high_structured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "const app = express();",
                                    "line": 5
                                },
                                {
                                    "code": "const PORT = 3000;",
                                    "line": 6
                                },
                                {
                                    "code": "app.listen(PORT, \"0.0.0.0\", () => {",
                                    "line": 56
                                }
                            ],
                            "summaryComponent": "Sets up an Express server listening on port 3000"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "app.use(cors());",
                                    "line": 8
                                }
                            ],
                            "summaryComponent": "Enables CORS for cross-origin requests"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "app.use(express.json());",
                                    "line": 9
                                }
                            ],
                            "summaryComponent": "Parses incoming JSON request bodies"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "app.get(\"/api/hello\", (req, res) => {",
                                    "line": 11
                                },
                                {
                                    "code": "res.json({ message: \"Hello from the backend!\" });",
                                    "line": 12
                                }
                            ],
                            "summaryComponent": "/api/hello: responds with a JSON hello message"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const symbol = req.params.symbol.toUpperCase();",
                                    "line": 17
                                }
                            ],
                            "summaryComponent": "Converts the symbol parameter to uppercase"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const data = await yahooFinance.chart(symbol, {",
                                    "line": 18
                                },
                                {
                                    "code": "period1: \"2024-01-01\",",
                                    "line": 19
                                },
                                {
                                    "code": "interval: \"1d\",",
                                    "line": 20
                                }
                            ],
                            "summaryComponent": "Fetches daily stock chart data from Yahoo Finance since 2024-01-01"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const companyName = data.meta?.shortName || symbol;",
                                    "line": 24
                                },
                                {
                                    "code": "data: quotes.map((q) => ({",
                                    "line": 40
                                },
                                {
                                    "code": "date: q.date,",
                                    "line": 41
                                },
                                {
                                    "code": "close: q.close,",
                                    "line": 42
                                },
                                {
                                    "code": "volume: q.volume,",
                                    "line": 43
                                }
                            ],
                            "summaryComponent": "Extracts company name and quote details (date, close, volume)"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "let currentPrice = null;",
                                    "line": 27
                                },
                                {
                                    "code": "if (quotes && quotes.length > 0) {",
                                    "line": 28
                                },
                                {
                                    "code": "for (let i = quotes.length - 1; i >= 0; i--) {",
                                    "line": 29
                                },
                                {
                                    "code": "if (typeof quotes[i].close === \"number\") {",
                                    "line": 30
                                },
                                {
                                    "code": "currentPrice = quotes[i].close;",
                                    "line": 31
                                }
                            ],
                            "summaryComponent": "Determines and includes the most recent valid close price as 'currentPrice' in the response"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "const response = {",
                                    "line": 37
                                },
                                {
                                    "code": "ticker: symbol,",
                                    "line": 38
                                },
                                {
                                    "code": "name: companyName,",
                                    "line": 39
                                },
                                {
                                    "code": "data: quotes.map((q) => ({",
                                    "line": 40
                                },
                                {
                                    "code": "currentPrice: currentPrice,",
                                    "line": 45
                                },
                                {
                                    "code": "res.json(response);",
                                    "line": 49
                                }
                            ],
                            "summaryComponent": "Returns a structured JSON response with ticker, name, data array, and currentPrice"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "catch (err) {",
                                    "line": 50
                                },
                                {
                                    "code": "console.error(err);",
                                    "line": 51
                                },
                                {
                                    "code": "res.status(500).send(\"Error fetching stock data\");",
                                    "line": 52
                                }
                            ],
                            "summaryComponent": "Handles errors by logging and sending a 500 error response"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "console.log(`Server running on http://localhost:${PORT}`);",
                                    "line": 57
                                }
                            ],
                            "summaryComponent": "Logs the server URL when it starts"
                        }
                    ]
                },
                "editPromptStructured": null,
                "createdAt": 1755628425000,
                "editPromptValue": "",
                "oldSummaryData": {
                    "medium_unstructured": "The code initializes an Express server that listens on port 3000 and uses CORS and JSON middleware. It defines two endpoints: one returns a hello message, and another fetches and returns stock data for a given symbol using the yahoo-finance2 library. The stock endpoint processes the symbol, retrieves chart data since 2024-01-01, and responds with formatted stock information or an error.",
                    "title": "Express Server Providing Stock Data and Hello Endpoint",
                    "low_unstructured": "This code sets up an Express server with endpoints for a hello message and stock data retrieval.",
                    "low_structured": "• Sets up an Express server\n• Provides hello and stock data endpoints\n• Uses CORS and JSON middleware",
                    "medium_structured": "• Initializes an Express server on port 3000\n• Adds CORS and JSON parsing middleware\n• Defines endpoints:\n  ◦ /api/hello returns a hello message\n  ◦ /api/stock/:symbol fetches and returns stock data using yahoo-finance2\n• Handles errors by returning a 500 status code",
                    "high_unstructured": "This code creates an Express server that listens on port 3000 and incorporates CORS and JSON body parsing middleware. It exposes a '/api/hello' endpoint that returns a simple JSON greeting, and a '/api/stock/:symbol' endpoint that retrieves daily stock data from Yahoo Finance starting from January 1, 2024, for the provided symbol. The stock endpoint processes the symbol to uppercase, fetches chart data, extracts the company name and relevant quote details (date, close, volume), and returns them in a structured JSON response. Errors during data retrieval are logged and result in a 500 error response, and the server logs its startup URL.",
                    "high_structured": "• Sets up an Express server listening on port 3000\n• Middleware:\n  ◦ Enables CORS for cross-origin requests\n  ◦ Parses incoming JSON request bodies\n• Defines endpoints:\n  ◦ /api/hello: responds with a JSON hello message\n  ◦ /api/stock/:symbol:\n    ◦ Converts the symbol parameter to uppercase\n    ◦ Fetches daily stock chart data from Yahoo Finance since 2024-01-01\n    ◦ Extracts company name and quote details (date, close, volume)\n    ◦ Returns a structured JSON response with ticker, name, and data array\n    ◦ Handles errors by logging and sending a 500 error response\n• Logs the server URL when it starts"
                },
                "editPromptDetailLevel": null,
                "summaryData": {
                    "medium_unstructured": "The code initializes an Express server that listens on port 3000 and uses CORS and JSON middleware. It defines two endpoints: one returns a hello message, and another fetches and returns stock data for a given symbol using the yahoo-finance2 library. The stock endpoint processes the symbol, retrieves chart data since 2024-01-01, and responds with formatted stock information, now also including the most recent valid close price as 'currentPrice' in the response, or an error.",
                    "title": "Express Server Providing Stock Data with Current Price and Hello Endpoint",
                    "low_unstructured": "This code sets up an Express server with endpoints for a hello message and stock data retrieval, now including the most recent valid close price as 'currentPrice' in the stock data response.",
                    "low_structured": "• Sets up an Express server\n• Provides hello and stock data endpoints\n• Uses CORS and JSON middleware\n• Stock data endpoint now includes the most recent valid close price as 'currentPrice' in the response",
                    "medium_structured": "• Initializes an Express server on port 3000\n• Adds CORS and JSON parsing middleware\n• Defines endpoints:\n  ◦ /api/hello returns a hello message\n  ◦ /api/stock/:symbol fetches and returns stock data using yahoo-finance2, now also including the most recent valid close price as 'currentPrice' in the response\n• Handles errors by returning a 500 status code",
                    "high_unstructured": "This code creates an Express server that listens on port 3000 and incorporates CORS and JSON body parsing middleware. It exposes a '/api/hello' endpoint that returns a simple JSON greeting, and a '/api/stock/:symbol' endpoint that retrieves daily stock data from Yahoo Finance starting from January 1, 2024, for the provided symbol. The stock endpoint processes the symbol to uppercase, fetches chart data, extracts the company name and relevant quote details (date, close, volume), and now also determines and includes the most recent valid close price as 'currentPrice' in the structured JSON response. Errors during data retrieval are logged and result in a 500 error response, and the server logs its startup URL.",
                    "high_structured": "• Sets up an Express server listening on port 3000\n• Middleware:\n  ◦ Enables CORS for cross-origin requests\n  ◦ Parses incoming JSON request bodies\n• Defines endpoints:\n  ◦ /api/hello: responds with a JSON hello message\n  ◦ /api/stock/:symbol:\n    ◦ Converts the symbol parameter to uppercase\n    ◦ Fetches daily stock chart data from Yahoo Finance since 2024-01-01\n    ◦ Extracts company name and quote details (date, close, volume)\n    ◦ Determines and includes the most recent valid close price as 'currentPrice' in the response\n    ◦ Returns a structured JSON response with ticker, name, data array, and currentPrice\n    ◦ Handles errors by logging and sending a 500 error response\n• Logs the server URL when it starts"
                },
                "metadata": {
                    "offset": 0,
                    "originalCode": "const express = require(\"express\");\nconst cors = require(\"cors\");\nconst yahooFinance = require(\"yahoo-finance2\").default;\n\nconst app = express();\nconst PORT = 3000;\n\napp.use(cors());\napp.use(express.json());\n\napp.get(\"/api/hello\", (req, res) => {\n  res.json({ message: \"Hello from the backend!\" });\n});\n\napp.get(\"/api/stock/:symbol\", async (req, res) => {\n  try {\n    const symbol = req.params.symbol.toUpperCase();\n    const data = await yahooFinance.chart(symbol, {\n      period1: \"2024-01-01\",\n      interval: \"1d\",\n    });\n    const quotes = data.quotes;\n\n    const companyName = data.meta?.shortName || symbol;\n\n    // Find the most recent quote with a valid close price for current price\n    let currentPrice = null;\n    if (quotes && quotes.length > 0) {\n      for (let i = quotes.length - 1; i >= 0; i--) {\n        if (typeof quotes[i].close === \"number\") {\n          currentPrice = quotes[i].close;\n          break;\n        }\n      }\n    }\n\n    const response = {\n      ticker: symbol,\n      name: companyName,\n      data: quotes.map((q) => ({\n        date: q.date,\n        close: q.close,\n        volume: q.volume,\n      })),\n      currentPrice: currentPrice,\n    };\n\n    console.log(response);\n    res.json(response);\n  } catch (err) {\n    console.error(err);\n    res.status(500).send(\"Error fetching stock data\");\n  }\n});\n\napp.listen(PORT, \"0.0.0.0\", () => {\n  console.log(`Server running on http://localhost:${PORT}`);\n});",
                    "fullPath": "/project/workspace/server/index.js",
                    "id": "d705a13c-60c9-44f4-a94f-c7da3bbe29d3",
                    "filename": "index.js"
                }
            }
        },
        "timestamp": "2025-08-19 22:33:45.000",
        "event": "create_new_section",
        "id": "npeJz6yIrvDB3p00Pjzu"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 6,
            "section_id": "d705a13c-60c9-44f4-a94f-c7da3bbe29d3",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:33:53.000",
        "event": "mapping_hover",
        "id": "NjKy4JWAHo8n4wF2gWmN"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "unstructured",
            "section_id": "d705a13c-60c9-44f4-a94f-c7da3bbe29d3",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:33:54.000",
        "event": "mapping_unhover",
        "id": "06vYgdgbr4Ua2NjZAmRI"
    },
    {
        "source": "frontend",
        "data": {},
        "timestamp": "2025-08-19 22:34:37.000",
        "event": "click_summarize_code",
        "id": "EdmjYiOn4ZWxZ47CAsxA"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "unstructured",
            "section_id": "d705a13c-60c9-44f4-a94f-c7da3bbe29d3",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:34:45.000",
        "event": "mapping_unhover",
        "id": "9yBb3F87faDpFrrSfgD4"
    },
    {
        "source": "backend",
        "data": {
            "selected_code": "<div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatDateString} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>",
            "summary": {
                "medium_unstructured": "This snippet displays a stock chart within a styled div, including a heading with the company name and ticker symbol. It uses a responsive container to render a line chart with axes, tooltips, a legend, and a line representing price data. The chart is visually customized with specific margins and styling.",
                "title": "Stock Chart Rendering Component Section",
                "low_unstructured": "This code renders a styled stock chart with a title and a line graph.",
                "low_structured": "• Renders a container with margin\n• Displays a heading with company and ticker\n• Shows a responsive line chart",
                "medium_structured": "• Renders a div with a top margin\n• Displays a heading showing the company and ticker\n• Uses ResponsiveContainer to ensure the chart fits its parent\n• Renders a LineChart with:\n  ◦ X and Y axes, with the X axis using a custom date formatter\n  ◦ Tooltip and Legend components for interactivity\n  ◦ A monotone Line for price data, styled with a specific color and no dots",
                "high_unstructured": "This code creates a styled container that displays a heading with the company name and ticker symbol, followed by a responsive line chart. The chart is implemented using Recharts components, including LineChart, XAxis, YAxis, Tooltip, Legend, and Line, all wrapped in a ResponsiveContainer set to a fixed height and full width. The X axis uses a custom date formatter, and the Y axis automatically scales to the data. The price data is plotted as a smooth monotone line without dots, and the chart includes interactive tooltip and legend features for better data interpretation.",
                "high_structured": "• Renders a div with a top margin for spacing\n• Displays a heading with the company name and ticker symbol\n• Embeds a ResponsiveContainer to make the chart adapt to its parent width and a fixed height\n• Inside the container, renders a LineChart with:\n  ◦ Data provided by chartData\n  ◦ Custom margins for layout control\n  ◦ XAxis configured to use the 'date' key and a custom tick formatter for month display\n  ◦ YAxis set to automatically scale based on data\n  ◦ Tooltip component for interactive data display on hover\n  ◦ Legend component for identifying chart elements\n  ◦ A monotone Line that plots 'price' values, styled with a specific stroke color and dots disabled for a cleaner look"
            }
        },
        "timestamp": "2025-08-19 22:34:45.000",
        "event": "summarize_selected_code",
        "id": "BtyBVnRjxLn53KifmqGm"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 8,
            "section_id": "d705a13c-60c9-44f4-a94f-c7da3bbe29d3",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:34:45.000",
        "event": "mapping_hover",
        "id": "EQtoE1k58YOPQjcfFCpi"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "unstructured",
            "section_id": "d705a13c-60c9-44f4-a94f-c7da3bbe29d3",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:34:45.000",
        "event": "mapping_unhover",
        "id": "RrU0HRwcu6atNFdKdTJH"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "unstructured",
            "section_id": "d705a13c-60c9-44f4-a94f-c7da3bbe29d3",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:34:45.000",
        "event": "mapping_unhover",
        "id": "al2vVxxSzaSU0AjYEf7A"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 9,
            "section_id": "d705a13c-60c9-44f4-a94f-c7da3bbe29d3",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:34:45.000",
        "event": "mapping_hover",
        "id": "n9Sj9dYvgiKPdaKuHAk3"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 6,
            "section_id": "d705a13c-60c9-44f4-a94f-c7da3bbe29d3",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:34:45.000",
        "event": "mapping_hover",
        "id": "odvSMquBWytazbfEK92I"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "unstructured",
            "section_id": "d705a13c-60c9-44f4-a94f-c7da3bbe29d3",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:34:45.000",
        "event": "mapping_unhover",
        "id": "ooWKC0IRXXur87VB5gJI"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 2,
            "section_id": "d705a13c-60c9-44f4-a94f-c7da3bbe29d3",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:34:45.000",
        "event": "mapping_hover",
        "id": "rNyJq967p96lAiVwnYk7"
    },
    {
        "source": "backend",
        "data": {
            "code": "48: <div style={{ marginTop: \"2rem\" }}>\n49:       <h3>\n50:         {company} ({ticker})\n51:       </h3>\n52:       <ResponsiveContainer width=\"100%\" height={300}>\n53:         <LineChart\n54:           data={chartData}\n55:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n56:         >\n57:           <XAxis dataKey=\"date\" tickFormatter={formatDateString} />\n58:           <YAxis domain={[\"auto\", \"auto\"]} />\n59:           <Tooltip />\n60:           <Legend />\n61:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n62:         </LineChart>\n63:       </ResponsiveContainer>\n64:     </div>",
            "summary": "• Renders a container with margin\n• Displays a heading with company and ticker\n• Shows a responsive line chart",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "<div style={{ marginTop: \"2rem\" }}>",
                            "line": 48
                        }
                    ],
                    "summaryComponent": "Renders a container with margin"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<h3>",
                            "line": 49
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 50
                        }
                    ],
                    "summaryComponent": "Displays a heading with company and ticker"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 52
                        },
                        {
                            "code": "<LineChart",
                            "line": 53
                        }
                    ],
                    "summaryComponent": "Shows a responsive line chart"
                }
            ]
        },
        "timestamp": "2025-08-19 22:34:47.000",
        "event": "map_summary_code",
        "id": "koWFYbZtHDvCjw4NCu4U"
    },
    {
        "source": "backend",
        "data": {
            "code": "48: <div style={{ marginTop: \"2rem\" }}>\n49:       <h3>\n50:         {company} ({ticker})\n51:       </h3>\n52:       <ResponsiveContainer width=\"100%\" height={300}>\n53:         <LineChart\n54:           data={chartData}\n55:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n56:         >\n57:           <XAxis dataKey=\"date\" tickFormatter={formatDateString} />\n58:           <YAxis domain={[\"auto\", \"auto\"]} />\n59:           <Tooltip />\n60:           <Legend />\n61:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n62:         </LineChart>\n63:       </ResponsiveContainer>\n64:     </div>",
            "summary": "This code renders a styled stock chart with a title and a line graph.",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "<div style={{ marginTop: \"2rem\" }}>",
                            "line": 48
                        },
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 52
                        },
                        {
                            "code": "<LineChart",
                            "line": 53
                        }
                    ],
                    "summaryComponent": "renders"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<div style={{ marginTop: \"2rem\" }}>",
                            "line": 48
                        },
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 52
                        },
                        {
                            "code": "<LineChart",
                            "line": 53
                        }
                    ],
                    "summaryComponent": "a styled stock chart"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<h3>",
                            "line": 49
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 50
                        }
                    ],
                    "summaryComponent": "with a title"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 61
                        }
                    ],
                    "summaryComponent": "and a line graph"
                }
            ]
        },
        "timestamp": "2025-08-19 22:34:48.000",
        "event": "map_summary_code",
        "id": "h9VhccJQFu0whOuzbrjV"
    },
    {
        "source": "backend",
        "data": {
            "code": "48: <div style={{ marginTop: \"2rem\" }}>\n49:       <h3>\n50:         {company} ({ticker})\n51:       </h3>\n52:       <ResponsiveContainer width=\"100%\" height={300}>\n53:         <LineChart\n54:           data={chartData}\n55:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n56:         >\n57:           <XAxis dataKey=\"date\" tickFormatter={formatDateString} />\n58:           <YAxis domain={[\"auto\", \"auto\"]} />\n59:           <Tooltip />\n60:           <Legend />\n61:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n62:         </LineChart>\n63:       </ResponsiveContainer>\n64:     </div>",
            "summary": "• Renders a div with a top margin\n• Displays a heading showing the company and ticker\n• Uses ResponsiveContainer to ensure the chart fits its parent\n• Renders a LineChart with:\n  ◦ X and Y axes, with the X axis using a custom date formatter\n  ◦ Tooltip and Legend components for interactivity\n  ◦ A monotone Line for price data, styled with a specific color and no dots",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "<div style={{ marginTop: \"2rem\" }}>",
                            "line": 48
                        }
                    ],
                    "summaryComponent": "Renders a div with a top margin"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<h3>",
                            "line": 49
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 50
                        }
                    ],
                    "summaryComponent": "Displays a heading showing the company and ticker"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 52
                        }
                    ],
                    "summaryComponent": "Uses ResponsiveContainer to ensure the chart fits its parent"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<LineChart",
                            "line": 53
                        }
                    ],
                    "summaryComponent": "Renders a LineChart with:"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                            "line": 57
                        },
                        {
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                            "line": 58
                        }
                    ],
                    "summaryComponent": "X and Y axes, with the X axis using a custom date formatter"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<Tooltip />",
                            "line": 59
                        },
                        {
                            "code": "<Legend />",
                            "line": 60
                        }
                    ],
                    "summaryComponent": "Tooltip and Legend components for interactivity"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 61
                        }
                    ],
                    "summaryComponent": "A monotone Line for price data, styled with a specific color and no dots"
                }
            ]
        },
        "timestamp": "2025-08-19 22:34:48.000",
        "event": "map_summary_code",
        "id": "zr6tBnV7sYUPd92Q8uQf"
    },
    {
        "source": "backend",
        "data": {
            "code": "48: <div style={{ marginTop: \"2rem\" }}>\n49:       <h3>\n50:         {company} ({ticker})\n51:       </h3>\n52:       <ResponsiveContainer width=\"100%\" height={300}>\n53:         <LineChart\n54:           data={chartData}\n55:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n56:         >\n57:           <XAxis dataKey=\"date\" tickFormatter={formatDateString} />\n58:           <YAxis domain={[\"auto\", \"auto\"]} />\n59:           <Tooltip />\n60:           <Legend />\n61:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n62:         </LineChart>\n63:       </ResponsiveContainer>\n64:     </div>",
            "summary": "• Renders a div with a top margin for spacing\n• Displays a heading with the company name and ticker symbol\n• Embeds a ResponsiveContainer to make the chart adapt to its parent width and a fixed height\n• Inside the container, renders a LineChart with:\n  ◦ Data provided by chartData\n  ◦ Custom margins for layout control\n  ◦ XAxis configured to use the 'date' key and a custom tick formatter for month display\n  ◦ YAxis set to automatically scale based on data\n  ◦ Tooltip component for interactive data display on hover\n  ◦ Legend component for identifying chart elements\n  ◦ A monotone Line that plots 'price' values, styled with a specific stroke color and dots disabled for a cleaner look",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "<div style={{ marginTop: \"2rem\" }}>",
                            "line": 48
                        }
                    ],
                    "summaryComponent": "Renders a div with a top margin for spacing"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<h3>",
                            "line": 49
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 50
                        }
                    ],
                    "summaryComponent": "Displays a heading with the company name and ticker symbol"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 52
                        }
                    ],
                    "summaryComponent": "Embeds a ResponsiveContainer to make the chart adapt to its parent width and a fixed height"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<LineChart",
                            "line": 53
                        }
                    ],
                    "summaryComponent": "Inside the container, renders a LineChart with:"
                },
                {
                    "codeSegments": [
                        {
                            "code": "data={chartData}",
                            "line": 54
                        }
                    ],
                    "summaryComponent": "Data provided by chartData"
                },
                {
                    "codeSegments": [
                        {
                            "code": "margin={{ top: 10, right: 30, left: 0, bottom: 0 }}",
                            "line": 55
                        }
                    ],
                    "summaryComponent": "Custom margins for layout control"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                            "line": 57
                        }
                    ],
                    "summaryComponent": "XAxis configured to use the 'date' key and a custom tick formatter for month display"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                            "line": 58
                        }
                    ],
                    "summaryComponent": "YAxis set to automatically scale based on data"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<Tooltip />",
                            "line": 59
                        }
                    ],
                    "summaryComponent": "Tooltip component for interactive data display on hover"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<Legend />",
                            "line": 60
                        }
                    ],
                    "summaryComponent": "Legend component for identifying chart elements"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 61
                        }
                    ],
                    "summaryComponent": "A monotone Line that plots 'price' values, styled with a specific stroke color and dots disabled for a cleaner look"
                }
            ]
        },
        "timestamp": "2025-08-19 22:34:49.000",
        "event": "map_summary_code",
        "id": "t9HzBnPJxePER96HnfZz"
    },
    {
        "source": "frontend",
        "data": {
            "before_section_id": "d705a13c-60c9-44f4-a94f-c7da3bbe29d3",
            "after_section_id": "73a170dc-989b-47c4-af84-6fbd2d9592f3"
        },
        "timestamp": "2025-08-19 22:34:50.000",
        "event": "autotransit_section",
        "id": "0SHVRA5NnEhPsQqy30yI"
    },
    {
        "source": "backend",
        "data": {
            "code": "48: <div style={{ marginTop: \"2rem\" }}>\n49:       <h3>\n50:         {company} ({ticker})\n51:       </h3>\n52:       <ResponsiveContainer width=\"100%\" height={300}>\n53:         <LineChart\n54:           data={chartData}\n55:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n56:         >\n57:           <XAxis dataKey=\"date\" tickFormatter={formatDateString} />\n58:           <YAxis domain={[\"auto\", \"auto\"]} />\n59:           <Tooltip />\n60:           <Legend />\n61:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n62:         </LineChart>\n63:       </ResponsiveContainer>\n64:     </div>",
            "summary": "This code creates a styled container that displays a heading with the company name and ticker symbol, followed by a responsive line chart. The chart is implemented using Recharts components, including LineChart, XAxis, YAxis, Tooltip, Legend, and Line, all wrapped in a ResponsiveContainer set to a fixed height and full width. The X axis uses a custom date formatter, and the Y axis automatically scales to the data. The price data is plotted as a smooth monotone line without dots, and the chart includes interactive tooltip and legend features for better data interpretation.",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "<div style={{ marginTop: \"2rem\" }}>",
                            "line": 48
                        }
                    ],
                    "summaryComponent": "creates a styled container"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<h3>",
                            "line": 49
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 50
                        }
                    ],
                    "summaryComponent": "displays a heading with the company name and ticker symbol"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 52
                        },
                        {
                            "code": "<LineChart",
                            "line": 53
                        }
                    ],
                    "summaryComponent": "a responsive line chart"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<LineChart",
                            "line": 53
                        },
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                            "line": 57
                        },
                        {
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                            "line": 58
                        },
                        {
                            "code": "<Tooltip />",
                            "line": 59
                        },
                        {
                            "code": "<Legend />",
                            "line": 60
                        },
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 61
                        }
                    ],
                    "summaryComponent": "implemented using Recharts components, including LineChart, XAxis, YAxis, Tooltip, Legend, and Line"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 52
                        }
                    ],
                    "summaryComponent": "all wrapped in a ResponsiveContainer set to a fixed height and full width"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                            "line": 57
                        }
                    ],
                    "summaryComponent": "The X axis uses a custom date formatter"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                            "line": 58
                        }
                    ],
                    "summaryComponent": "the Y axis automatically scales to the data"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 61
                        }
                    ],
                    "summaryComponent": "The price data is plotted as a smooth monotone line without dots"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<Tooltip />",
                            "line": 59
                        },
                        {
                            "code": "<Legend />",
                            "line": 60
                        }
                    ],
                    "summaryComponent": "the chart includes interactive tooltip and legend features"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<Tooltip />",
                            "line": 59
                        },
                        {
                            "code": "<Legend />",
                            "line": 60
                        }
                    ],
                    "summaryComponent": "for better data interpretation"
                }
            ]
        },
        "timestamp": "2025-08-19 22:34:50.000",
        "event": "map_summary_code",
        "id": "GJzRShhloyBwhJxQSOFQ"
    },
    {
        "source": "backend",
        "data": {
            "code": "48: <div style={{ marginTop: \"2rem\" }}>\n49:       <h3>\n50:         {company} ({ticker})\n51:       </h3>\n52:       <ResponsiveContainer width=\"100%\" height={300}>\n53:         <LineChart\n54:           data={chartData}\n55:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n56:         >\n57:           <XAxis dataKey=\"date\" tickFormatter={formatDateString} />\n58:           <YAxis domain={[\"auto\", \"auto\"]} />\n59:           <Tooltip />\n60:           <Legend />\n61:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n62:         </LineChart>\n63:       </ResponsiveContainer>\n64:     </div>",
            "summary": "This snippet displays a stock chart within a styled div, including a heading with the company name and ticker symbol. It uses a responsive container to render a line chart with axes, tooltips, a legend, and a line representing price data. The chart is visually customized with specific margins and styling.",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "<div style={{ marginTop: \"2rem\" }}>",
                            "line": 48
                        }
                    ],
                    "summaryComponent": "displays a stock chart within a styled div"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<h3>",
                            "line": 49
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 50
                        }
                    ],
                    "summaryComponent": "including a heading with the company name and ticker symbol"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 52
                        }
                    ],
                    "summaryComponent": "uses a responsive container"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<LineChart",
                            "line": 53
                        }
                    ],
                    "summaryComponent": "to render a line chart"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                            "line": 57
                        },
                        {
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                            "line": 58
                        }
                    ],
                    "summaryComponent": "with axes"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<Tooltip />",
                            "line": 59
                        }
                    ],
                    "summaryComponent": "tooltips"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<Legend />",
                            "line": 60
                        }
                    ],
                    "summaryComponent": "a legend"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 61
                        }
                    ],
                    "summaryComponent": "a line representing price data"
                },
                {
                    "codeSegments": [
                        {
                            "code": "margin={{ top: 10, right: 30, left: 0, bottom: 0 }}",
                            "line": 55
                        },
                        {
                            "code": "<div style={{ marginTop: \"2rem\" }}>",
                            "line": 48
                        }
                    ],
                    "summaryComponent": "visually customized with specific margins and styling"
                }
            ]
        },
        "timestamp": "2025-08-19 22:34:50.000",
        "event": "map_summary_code",
        "id": "JsCOAr54shb2l0qv0soE"
    },
    {
        "source": "frontend",
        "data": {
            "section_id": "73a170dc-989b-47c4-af84-6fbd2d9592f3",
            "section_data": {
                "summaryMappings": {
                    "medium_unstructured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "<div style={{ marginTop: \"2rem\" }}>",
                                    "line": 48
                                }
                            ],
                            "summaryComponent": "displays a stock chart within a styled div"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<h3>",
                                    "line": 49
                                },
                                {
                                    "code": "{company} ({ticker})",
                                    "line": 50
                                }
                            ],
                            "summaryComponent": "including a heading with the company name and ticker symbol"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 52
                                }
                            ],
                            "summaryComponent": "uses a responsive container"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<LineChart",
                                    "line": 53
                                }
                            ],
                            "summaryComponent": "to render a line chart"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                                    "line": 57
                                },
                                {
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                                    "line": 58
                                }
                            ],
                            "summaryComponent": "with axes"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<Tooltip />",
                                    "line": 59
                                }
                            ],
                            "summaryComponent": "tooltips"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<Legend />",
                                    "line": 60
                                }
                            ],
                            "summaryComponent": "a legend"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 61
                                }
                            ],
                            "summaryComponent": "a line representing price data"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "margin={{ top: 10, right: 30, left: 0, bottom: 0 }}",
                                    "line": 55
                                },
                                {
                                    "code": "<div style={{ marginTop: \"2rem\" }}>",
                                    "line": 48
                                }
                            ],
                            "summaryComponent": "visually customized with specific margins and styling"
                        }
                    ],
                    "high_unstructured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "<div style={{ marginTop: \"2rem\" }}>",
                                    "line": 48
                                }
                            ],
                            "summaryComponent": "creates a styled container"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<h3>",
                                    "line": 49
                                },
                                {
                                    "code": "{company} ({ticker})",
                                    "line": 50
                                }
                            ],
                            "summaryComponent": "displays a heading with the company name and ticker symbol"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 52
                                },
                                {
                                    "code": "<LineChart",
                                    "line": 53
                                }
                            ],
                            "summaryComponent": "a responsive line chart"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<LineChart",
                                    "line": 53
                                },
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                                    "line": 57
                                },
                                {
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                                    "line": 58
                                },
                                {
                                    "code": "<Tooltip />",
                                    "line": 59
                                },
                                {
                                    "code": "<Legend />",
                                    "line": 60
                                },
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 61
                                }
                            ],
                            "summaryComponent": "implemented using Recharts components, including LineChart, XAxis, YAxis, Tooltip, Legend, and Line"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 52
                                }
                            ],
                            "summaryComponent": "all wrapped in a ResponsiveContainer set to a fixed height and full width"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                                    "line": 57
                                }
                            ],
                            "summaryComponent": "The X axis uses a custom date formatter"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                                    "line": 58
                                }
                            ],
                            "summaryComponent": "the Y axis automatically scales to the data"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 61
                                }
                            ],
                            "summaryComponent": "The price data is plotted as a smooth monotone line without dots"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<Tooltip />",
                                    "line": 59
                                },
                                {
                                    "code": "<Legend />",
                                    "line": 60
                                }
                            ],
                            "summaryComponent": "the chart includes interactive tooltip and legend features"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<Tooltip />",
                                    "line": 59
                                },
                                {
                                    "code": "<Legend />",
                                    "line": 60
                                }
                            ],
                            "summaryComponent": "for better data interpretation"
                        }
                    ],
                    "low_unstructured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "<div style={{ marginTop: \"2rem\" }}>",
                                    "line": 48
                                },
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 52
                                },
                                {
                                    "code": "<LineChart",
                                    "line": 53
                                }
                            ],
                            "summaryComponent": "renders"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<div style={{ marginTop: \"2rem\" }}>",
                                    "line": 48
                                },
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 52
                                },
                                {
                                    "code": "<LineChart",
                                    "line": 53
                                }
                            ],
                            "summaryComponent": "a styled stock chart"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<h3>",
                                    "line": 49
                                },
                                {
                                    "code": "{company} ({ticker})",
                                    "line": 50
                                }
                            ],
                            "summaryComponent": "with a title"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 61
                                }
                            ],
                            "summaryComponent": "and a line graph"
                        }
                    ],
                    "low_structured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "<div style={{ marginTop: \"2rem\" }}>",
                                    "line": 48
                                }
                            ],
                            "summaryComponent": "Renders a container with margin"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<h3>",
                                    "line": 49
                                },
                                {
                                    "code": "{company} ({ticker})",
                                    "line": 50
                                }
                            ],
                            "summaryComponent": "Displays a heading with company and ticker"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 52
                                },
                                {
                                    "code": "<LineChart",
                                    "line": 53
                                }
                            ],
                            "summaryComponent": "Shows a responsive line chart"
                        }
                    ],
                    "medium_structured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "<div style={{ marginTop: \"2rem\" }}>",
                                    "line": 48
                                }
                            ],
                            "summaryComponent": "Renders a div with a top margin"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<h3>",
                                    "line": 49
                                },
                                {
                                    "code": "{company} ({ticker})",
                                    "line": 50
                                }
                            ],
                            "summaryComponent": "Displays a heading showing the company and ticker"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 52
                                }
                            ],
                            "summaryComponent": "Uses ResponsiveContainer to ensure the chart fits its parent"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<LineChart",
                                    "line": 53
                                }
                            ],
                            "summaryComponent": "Renders a LineChart with:"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                                    "line": 57
                                },
                                {
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                                    "line": 58
                                }
                            ],
                            "summaryComponent": "X and Y axes, with the X axis using a custom date formatter"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<Tooltip />",
                                    "line": 59
                                },
                                {
                                    "code": "<Legend />",
                                    "line": 60
                                }
                            ],
                            "summaryComponent": "Tooltip and Legend components for interactivity"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 61
                                }
                            ],
                            "summaryComponent": "A monotone Line for price data, styled with a specific color and no dots"
                        }
                    ],
                    "high_structured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "<div style={{ marginTop: \"2rem\" }}>",
                                    "line": 48
                                }
                            ],
                            "summaryComponent": "Renders a div with a top margin for spacing"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<h3>",
                                    "line": 49
                                },
                                {
                                    "code": "{company} ({ticker})",
                                    "line": 50
                                }
                            ],
                            "summaryComponent": "Displays a heading with the company name and ticker symbol"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 52
                                }
                            ],
                            "summaryComponent": "Embeds a ResponsiveContainer to make the chart adapt to its parent width and a fixed height"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<LineChart",
                                    "line": 53
                                }
                            ],
                            "summaryComponent": "Inside the container, renders a LineChart with:"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "data={chartData}",
                                    "line": 54
                                }
                            ],
                            "summaryComponent": "Data provided by chartData"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "margin={{ top: 10, right: 30, left: 0, bottom: 0 }}",
                                    "line": 55
                                }
                            ],
                            "summaryComponent": "Custom margins for layout control"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                                    "line": 57
                                }
                            ],
                            "summaryComponent": "XAxis configured to use the 'date' key and a custom tick formatter for month display"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                                    "line": 58
                                }
                            ],
                            "summaryComponent": "YAxis set to automatically scale based on data"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<Tooltip />",
                                    "line": 59
                                }
                            ],
                            "summaryComponent": "Tooltip component for interactive data display on hover"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<Legend />",
                                    "line": 60
                                }
                            ],
                            "summaryComponent": "Legend component for identifying chart elements"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 61
                                }
                            ],
                            "summaryComponent": "A monotone Line that plots 'price' values, styled with a specific stroke color and dots disabled for a cleaner look"
                        }
                    ]
                },
                "lines": [
                    48,
                    64
                ],
                "title": "Stock Chart Rendering Component Section",
                "selectedDetailLevel": "medium",
                "editPromptStructured": null,
                "createdAt": 1755628490000,
                "editPromptValue": "",
                "editPromptDetailLevel": null,
                "selectedStructured": "unstructured",
                "summaryData": {
                    "medium_unstructured": "This snippet displays a stock chart within a styled div, including a heading with the company name and ticker symbol. It uses a responsive container to render a line chart with axes, tooltips, a legend, and a line representing price data. The chart is visually customized with specific margins and styling.",
                    "title": "Stock Chart Rendering Component Section",
                    "low_unstructured": "This code renders a styled stock chart with a title and a line graph.",
                    "low_structured": "• Renders a container with margin\n• Displays a heading with company and ticker\n• Shows a responsive line chart",
                    "medium_structured": "• Renders a div with a top margin\n• Displays a heading showing the company and ticker\n• Uses ResponsiveContainer to ensure the chart fits its parent\n• Renders a LineChart with:\n  ◦ X and Y axes, with the X axis using a custom date formatter\n  ◦ Tooltip and Legend components for interactivity\n  ◦ A monotone Line for price data, styled with a specific color and no dots",
                    "high_unstructured": "This code creates a styled container that displays a heading with the company name and ticker symbol, followed by a responsive line chart. The chart is implemented using Recharts components, including LineChart, XAxis, YAxis, Tooltip, Legend, and Line, all wrapped in a ResponsiveContainer set to a fixed height and full width. The X axis uses a custom date formatter, and the Y axis automatically scales to the data. The price data is plotted as a smooth monotone line without dots, and the chart includes interactive tooltip and legend features for better data interpretation.",
                    "high_structured": "• Renders a div with a top margin for spacing\n• Displays a heading with the company name and ticker symbol\n• Embeds a ResponsiveContainer to make the chart adapt to its parent width and a fixed height\n• Inside the container, renders a LineChart with:\n  ◦ Data provided by chartData\n  ◦ Custom margins for layout control\n  ◦ XAxis configured to use the 'date' key and a custom tick formatter for month display\n  ◦ YAxis set to automatically scale based on data\n  ◦ Tooltip component for interactive data display on hover\n  ◦ Legend component for identifying chart elements\n  ◦ A monotone Line that plots 'price' values, styled with a specific stroke color and dots disabled for a cleaner look"
                },
                "metadata": {
                    "offset": 957,
                    "originalCode": "<div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatDateString} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>",
                    "fullPath": "/project/workspace/frontend/src/StockChart.jsx",
                    "id": "73a170dc-989b-47c4-af84-6fbd2d9592f3",
                    "filename": "StockChart.jsx"
                }
            }
        },
        "timestamp": "2025-08-19 22:34:50.000",
        "event": "create_new_section",
        "id": "Tp3aobOqHqF9gvyzweoJ"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "unstructured",
            "section_id": "73a170dc-989b-47c4-af84-6fbd2d9592f3",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:35:02.000",
        "event": "mapping_unhover",
        "id": "9tSP3mA0VEyrZAFgCwCZ"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 3,
            "section_id": "73a170dc-989b-47c4-af84-6fbd2d9592f3",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:35:02.000",
        "event": "mapping_hover",
        "id": "EG8GWCCKucggN4sPOuZ3"
    },
    {
        "source": "frontend",
        "data": {
            "before_structured": "unstructured",
            "after_structured": "structured",
            "section_id": "73a170dc-989b-47c4-af84-6fbd2d9592f3",
            "before_detail_level": "medium",
            "after_detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:35:04.000",
        "event": "change_summary_level",
        "id": "UzbOok6tGyEm75LdK9Yf"
    },
    {
        "source": "frontend",
        "data": {
            "structured": "structured",
            "section_id": "73a170dc-989b-47c4-af84-6fbd2d9592f3",
            "detail_level": "medium",
            "summary": "• Renders a div with a top margin\n• Displays a heading showing the company and ticker\n• Uses ResponsiveContainer to ensure the chart fits its parent\n• Renders a LineChart with:\n  ◦ X and Y axes, with the X axis using a custom date formatter\n  ◦ Tooltip and Legend components for interactivity\n  ◦ A monotone Line for price data, styled with a specific color and no dots"
        },
        "timestamp": "2025-08-19 22:35:09.000",
        "event": "click_edit_in_prompt",
        "id": "9TBju8koAvDurSkh7XaW"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 4,
            "section_id": "73a170dc-989b-47c4-af84-6fbd2d9592f3",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:35:15.000",
        "event": "mapping_hover",
        "id": "29JrJ4PZUp1jyUpTDoBf"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 2,
            "section_id": "73a170dc-989b-47c4-af84-6fbd2d9592f3",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:35:15.000",
        "event": "mapping_hover",
        "id": "P2VrH4RlxO0sydXL9vX5"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "73a170dc-989b-47c4-af84-6fbd2d9592f3",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:35:15.000",
        "event": "mapping_unhover",
        "id": "TksV3untn3Tbyt2q9huM"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 1,
            "section_id": "73a170dc-989b-47c4-af84-6fbd2d9592f3",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:35:15.000",
        "event": "mapping_hover",
        "id": "YdzgHQ8yHrwpasikVw8e"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "73a170dc-989b-47c4-af84-6fbd2d9592f3",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:35:15.000",
        "event": "mapping_unhover",
        "id": "cuxkENHzO2Jzp8LZxYTk"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "73a170dc-989b-47c4-af84-6fbd2d9592f3",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:35:15.000",
        "event": "mapping_unhover",
        "id": "d5FHmjd7RjiNkxBvf27y"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "73a170dc-989b-47c4-af84-6fbd2d9592f3",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:35:15.000",
        "event": "mapping_unhover",
        "id": "dci5gSPOh5WQM084jzwT"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 6,
            "section_id": "73a170dc-989b-47c4-af84-6fbd2d9592f3",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:35:15.000",
        "event": "mapping_hover",
        "id": "ifZatLeBpB82NOLBec7O"
    },
    {
        "source": "frontend",
        "data": {
            "before_structured": "structured",
            "after_structured": "unstructured",
            "section_id": "73a170dc-989b-47c4-af84-6fbd2d9592f3",
            "before_detail_level": "medium",
            "after_detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:35:17.000",
        "event": "change_summary_level",
        "id": "6TqkBjOW6BUKMLxDRFXe"
    },
    {
        "source": "frontend",
        "data": {
            "before_structured": "unstructured",
            "after_structured": "structured",
            "section_id": "73a170dc-989b-47c4-af84-6fbd2d9592f3",
            "before_detail_level": "medium",
            "after_detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:35:26.000",
        "event": "change_summary_level",
        "id": "9VUVNQObLSmUUmmgtJX7"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "73a170dc-989b-47c4-af84-6fbd2d9592f3",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:35:27.000",
        "event": "mapping_unhover",
        "id": "0wSIZASvbvc3Hkbh1PYQ"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "73a170dc-989b-47c4-af84-6fbd2d9592f3",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:35:27.000",
        "event": "mapping_unhover",
        "id": "1cnzbY7m2daCMEUkstnD"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 3,
            "section_id": "73a170dc-989b-47c4-af84-6fbd2d9592f3",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:35:27.000",
        "event": "mapping_hover",
        "id": "1syakbW5pSTXxonk9vLy"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 2,
            "section_id": "73a170dc-989b-47c4-af84-6fbd2d9592f3",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:35:27.000",
        "event": "mapping_hover",
        "id": "4lMvuZU6t4bEwfi8JDrw"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 4,
            "section_id": "73a170dc-989b-47c4-af84-6fbd2d9592f3",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:35:27.000",
        "event": "mapping_hover",
        "id": "NhzPZyldVEnJUb5W8DDY"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "73a170dc-989b-47c4-af84-6fbd2d9592f3",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:35:27.000",
        "event": "mapping_unhover",
        "id": "NubAW4rCdzggBUCoseoI"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 1,
            "section_id": "73a170dc-989b-47c4-af84-6fbd2d9592f3",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:35:27.000",
        "event": "mapping_hover",
        "id": "PGlm00d3XTVuDw1AZ5ID"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "73a170dc-989b-47c4-af84-6fbd2d9592f3",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:35:27.000",
        "event": "mapping_unhover",
        "id": "VqptC95JVV07esb0ceii"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 2,
            "section_id": "73a170dc-989b-47c4-af84-6fbd2d9592f3",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:35:27.000",
        "event": "mapping_hover",
        "id": "XBFQo3NYDcuTOuARyALw"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "73a170dc-989b-47c4-af84-6fbd2d9592f3",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:35:27.000",
        "event": "mapping_unhover",
        "id": "hPZ7QtIDJWwoF9QBd3UQ"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 0,
            "section_id": "73a170dc-989b-47c4-af84-6fbd2d9592f3",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:35:27.000",
        "event": "mapping_hover",
        "id": "md1oguUop6ADonNIzvqb"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 4,
            "section_id": "73a170dc-989b-47c4-af84-6fbd2d9592f3",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:35:28.000",
        "event": "mapping_hover",
        "id": "5r6xs1fUfS4tgaqxZzQN"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 3,
            "section_id": "73a170dc-989b-47c4-af84-6fbd2d9592f3",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:35:28.000",
        "event": "mapping_hover",
        "id": "CerpiNUlujlwZde2HzhO"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "73a170dc-989b-47c4-af84-6fbd2d9592f3",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:35:28.000",
        "event": "mapping_unhover",
        "id": "GXtpd2mslZQ0nrT6KKHJ"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 6,
            "section_id": "73a170dc-989b-47c4-af84-6fbd2d9592f3",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:35:28.000",
        "event": "mapping_hover",
        "id": "U9YhBkmff4j0CW7DsPH7"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "73a170dc-989b-47c4-af84-6fbd2d9592f3",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:35:28.000",
        "event": "mapping_unhover",
        "id": "XPqJAZg0031ZnHb3eKQN"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "73a170dc-989b-47c4-af84-6fbd2d9592f3",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:35:28.000",
        "event": "mapping_unhover",
        "id": "ZjrJBOqvuXOzHe1lvb6J"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "73a170dc-989b-47c4-af84-6fbd2d9592f3",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:35:28.000",
        "event": "mapping_unhover",
        "id": "e4y86f4Tp4lOIv33dpSI"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "73a170dc-989b-47c4-af84-6fbd2d9592f3",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:35:28.000",
        "event": "mapping_unhover",
        "id": "vVQUSmDtYd5RH86tL3ek"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 5,
            "section_id": "73a170dc-989b-47c4-af84-6fbd2d9592f3",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:35:28.000",
        "event": "mapping_hover",
        "id": "y1a4CFcGsRwww41cY9uq"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "73a170dc-989b-47c4-af84-6fbd2d9592f3",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:35:31.000",
        "event": "mapping_unhover",
        "id": "0kWkg9ITPUVCzNQTzJfH"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 1,
            "section_id": "73a170dc-989b-47c4-af84-6fbd2d9592f3",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:35:31.000",
        "event": "mapping_hover",
        "id": "0rrTY3hGtb2rHqwFlo9v"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 2,
            "section_id": "73a170dc-989b-47c4-af84-6fbd2d9592f3",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:35:31.000",
        "event": "mapping_hover",
        "id": "5UmP9EvhcCUxYjBxTfOJ"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "73a170dc-989b-47c4-af84-6fbd2d9592f3",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:35:31.000",
        "event": "mapping_unhover",
        "id": "H4LV9gQwwjRNKfbmYyFd"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 4,
            "section_id": "73a170dc-989b-47c4-af84-6fbd2d9592f3",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:35:31.000",
        "event": "mapping_hover",
        "id": "SJkzruzlxj47ONAvUWv0"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "73a170dc-989b-47c4-af84-6fbd2d9592f3",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:35:31.000",
        "event": "mapping_unhover",
        "id": "UmXUARVyP3NDIUdRivXg"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "73a170dc-989b-47c4-af84-6fbd2d9592f3",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:35:31.000",
        "event": "mapping_unhover",
        "id": "V6i0G37cH6BWC8TfhmVO"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 6,
            "section_id": "73a170dc-989b-47c4-af84-6fbd2d9592f3",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:35:31.000",
        "event": "mapping_hover",
        "id": "lNFTXGB58822RopyLG5t"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "73a170dc-989b-47c4-af84-6fbd2d9592f3",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:35:31.000",
        "event": "mapping_unhover",
        "id": "oxvLb5awjUQdhFP4puQ7"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 0,
            "section_id": "73a170dc-989b-47c4-af84-6fbd2d9592f3",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:35:31.000",
        "event": "mapping_hover",
        "id": "uERQ38a0rnRC8j3erMjC"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 1,
            "section_id": "73a170dc-989b-47c4-af84-6fbd2d9592f3",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:35:32.000",
        "event": "mapping_hover",
        "id": "1CLFAlrpDvoY24lFB2cu"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 2,
            "section_id": "73a170dc-989b-47c4-af84-6fbd2d9592f3",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:35:32.000",
        "event": "mapping_hover",
        "id": "L40yn0hiZinRYZUbULo5"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 0,
            "section_id": "73a170dc-989b-47c4-af84-6fbd2d9592f3",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:35:32.000",
        "event": "mapping_hover",
        "id": "M1rSRU3ZhN7T6gQ8cRu2"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "73a170dc-989b-47c4-af84-6fbd2d9592f3",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:35:32.000",
        "event": "mapping_unhover",
        "id": "MpySZYewsLHl5fI5mbIF"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "73a170dc-989b-47c4-af84-6fbd2d9592f3",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:35:32.000",
        "event": "mapping_unhover",
        "id": "OuIByBJF7Qe9pWXPlMJz"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "73a170dc-989b-47c4-af84-6fbd2d9592f3",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:35:32.000",
        "event": "mapping_unhover",
        "id": "Y7BGQs3fMECOY3dw55Rq"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 4,
            "section_id": "73a170dc-989b-47c4-af84-6fbd2d9592f3",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:35:32.000",
        "event": "mapping_hover",
        "id": "crrBEvmg1EsWkybgXoN4"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "73a170dc-989b-47c4-af84-6fbd2d9592f3",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:35:32.000",
        "event": "mapping_unhover",
        "id": "x7zcYyb2ndzSSASYwQbe"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "73a170dc-989b-47c4-af84-6fbd2d9592f3",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:35:37.000",
        "event": "mapping_unhover",
        "id": "0X5SX9ArUlq2PEaEF3TL"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "73a170dc-989b-47c4-af84-6fbd2d9592f3",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:35:37.000",
        "event": "mapping_unhover",
        "id": "1ITFxEF1LEKTNTpimFug"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 6,
            "section_id": "73a170dc-989b-47c4-af84-6fbd2d9592f3",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:35:37.000",
        "event": "mapping_hover",
        "id": "VsT0CAvMnaTCmzmiaXSR"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 2,
            "section_id": "73a170dc-989b-47c4-af84-6fbd2d9592f3",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:35:37.000",
        "event": "mapping_hover",
        "id": "hxhwCF6d9FCRcooxAypA"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 4,
            "section_id": "73a170dc-989b-47c4-af84-6fbd2d9592f3",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:35:37.000",
        "event": "mapping_hover",
        "id": "woZfMHSz3pA2Xy0tAn3M"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 1,
            "section_id": "73a170dc-989b-47c4-af84-6fbd2d9592f3",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:35:38.000",
        "event": "mapping_hover",
        "id": "1WL1DCzFLoEZkX6XTU0c"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "73a170dc-989b-47c4-af84-6fbd2d9592f3",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:35:38.000",
        "event": "mapping_unhover",
        "id": "Ji5dPqz8NivNHwGNg5Cj"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "73a170dc-989b-47c4-af84-6fbd2d9592f3",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:35:38.000",
        "event": "mapping_unhover",
        "id": "Oyv8IjvdM4uvqJfgMWSZ"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "73a170dc-989b-47c4-af84-6fbd2d9592f3",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:35:38.000",
        "event": "mapping_unhover",
        "id": "YRFDOgFG5uEzgC12dFOw"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 0,
            "section_id": "73a170dc-989b-47c4-af84-6fbd2d9592f3",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:35:38.000",
        "event": "mapping_hover",
        "id": "pCis2aWCvKbvDxM2E7cJ"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "73a170dc-989b-47c4-af84-6fbd2d9592f3",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:36:15.000",
        "event": "mapping_unhover",
        "id": "2jzd0RNnFvNtZkG6BENQ"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 5,
            "section_id": "73a170dc-989b-47c4-af84-6fbd2d9592f3",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:36:15.000",
        "event": "mapping_hover",
        "id": "5sMySdGoDvGeypjrcNcj"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "73a170dc-989b-47c4-af84-6fbd2d9592f3",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:36:16.000",
        "event": "mapping_unhover",
        "id": "6Uzo9WljyfAgblWgbc2g"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 6,
            "section_id": "73a170dc-989b-47c4-af84-6fbd2d9592f3",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:36:16.000",
        "event": "mapping_hover",
        "id": "94PevaCMveKVGpToxqDE"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 5,
            "section_id": "73a170dc-989b-47c4-af84-6fbd2d9592f3",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:36:16.000",
        "event": "mapping_hover",
        "id": "XqXOinoyDzjbsjSvzHtz"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "73a170dc-989b-47c4-af84-6fbd2d9592f3",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:36:16.000",
        "event": "mapping_unhover",
        "id": "ohL1UH6U0wadqcANrP0r"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 5,
            "section_id": "73a170dc-989b-47c4-af84-6fbd2d9592f3",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:36:26.000",
        "event": "mapping_hover",
        "id": "HzxjxIFkIl25VvRuDYu3"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "73a170dc-989b-47c4-af84-6fbd2d9592f3",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:36:26.000",
        "event": "mapping_unhover",
        "id": "s8z1WSf3zzC990llymyF"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "73a170dc-989b-47c4-af84-6fbd2d9592f3",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:36:52.000",
        "event": "mapping_unhover",
        "id": "60Bdxt06QD5BkyELSNWE"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 4,
            "section_id": "73a170dc-989b-47c4-af84-6fbd2d9592f3",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:36:52.000",
        "event": "mapping_hover",
        "id": "8IvkAOXXH9frK6RMdaGy"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 0,
            "section_id": "73a170dc-989b-47c4-af84-6fbd2d9592f3",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:36:52.000",
        "event": "mapping_hover",
        "id": "COgbVvg3aDAliVzNTgBm"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "73a170dc-989b-47c4-af84-6fbd2d9592f3",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:36:52.000",
        "event": "mapping_unhover",
        "id": "aIDfF4L1F36ks2WIzqHt"
    },
    {
        "source": "frontend",
        "data": {
            "original_summary": "• Renders a div with a top margin\n• Displays a heading showing the company and ticker\n• Uses ResponsiveContainer to ensure the chart fits its parent\n• Renders a LineChart with:\n  ◦ X and Y axes, with the X axis using a custom date formatter\n  ◦ Tooltip and Legend components for interactivity\n  ◦ A monotone Line for price data, styled with a specific color and no dots",
            "instruction": "画一条 currentPrice 的虚线 \nbackend will send \"response = {\n      ticker: symbol,\n      name: companyName,\n      data: quotes.map((q) => ({\n        date: q.date,\n        close: q.close,\n        volume: q.volume,\n      })),\n      currentPrice: currentPrice,\n    };\"\nuse currentPrice as",
            "section_id": "73a170dc-989b-47c4-af84-6fbd2d9592f3",
            "detail_level": "medium",
            "structured": "structured"
        },
        "timestamp": "2025-08-19 22:37:15.000",
        "event": "apply_instruction_summary",
        "id": "MYXULCCGCFKrN1fj61dm"
    },
    {
        "source": "backend",
        "data": {
            "instruction": "画一条 currentPrice 的虚线 \nbackend will send \"response = {\n      ticker: symbol,\n      name: companyName,\n      data: quotes.map((q) => ({\n        date: q.date,\n        close: q.close,\n        volume: q.volume,\n      })),\n      currentPrice: currentPrice,\n    };\"\nuse currentPrice as",
            "original_code": "<div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatDateString} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>",
            "original_summary": "• Renders a div with a top margin\n• Displays a heading showing the company and ticker\n• Uses ResponsiveContainer to ensure the chart fits its parent\n• Renders a LineChart with:\n  ◦ X and Y axes, with the X axis using a custom date formatter\n  ◦ Tooltip and Legend components for interactivity\n  ◦ A monotone Line for price data, styled with a specific color and no dots",
            "updated_summary": "• Renders a div with a top margin  \n• Displays a heading showing the company and ticker  \n• Uses ResponsiveContainer to ensure the chart fits its parent  \n• Renders a LineChart with:  \n  ◦ X and Y axes, with the X axis using a custom date formatter  \n  ◦ Tooltip and Legend components for interactivity  \n  ◦ A monotone Line for price data, styled with a specific color and no dots  \n  ◦ Draws a dashed horizontal line at the currentPrice value, using the currentPrice field from the backend response"
        },
        "timestamp": "2025-08-19 22:37:16.000",
        "event": "apply_instruction_summary",
        "id": "EvoRCKm11I6ttdPljjQw"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 6,
            "section_id": "73a170dc-989b-47c4-af84-6fbd2d9592f3",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:37:26.000",
        "event": "mapping_hover",
        "id": "7yKpGdlI15C3eWbrWHx4"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "73a170dc-989b-47c4-af84-6fbd2d9592f3",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:37:26.000",
        "event": "mapping_unhover",
        "id": "RMMDAF96ruwpYDNQ05h4"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 6,
            "section_id": "73a170dc-989b-47c4-af84-6fbd2d9592f3",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:37:26.000",
        "event": "mapping_hover",
        "id": "luy7mLuS6qMDzbFEaEeB"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "73a170dc-989b-47c4-af84-6fbd2d9592f3",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:37:26.000",
        "event": "mapping_unhover",
        "id": "vic6qbsxdeXZdb0THK9B"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "73a170dc-989b-47c4-af84-6fbd2d9592f3",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:37:27.000",
        "event": "mapping_unhover",
        "id": "B0BWFLGdgZ79EzNcuxSx"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 4,
            "section_id": "73a170dc-989b-47c4-af84-6fbd2d9592f3",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:37:27.000",
        "event": "mapping_hover",
        "id": "EJpNlFspT3GTl1PFeEtL"
    },
    {
        "source": "frontend",
        "data": {
            "edited_summary": "• Renders a div with a top margin  \n• Displays a heading showing the company and ticker  \n• Uses ResponsiveContainer to ensure the chart fits its parent  \n• Renders a LineChart with:  \n  ◦ X and Y axes, with the X axis using a custom date formatter  \n  ◦ Tooltip and Legend components for interactivity  \n  ◦ A monotone Line for price data, styled with a specific color and no dots  \n  ◦ Draws a dashed horizontal line at the currentPrice value, using the currentPrice field from the backend response",
            "structured": "structured",
            "section_id": "73a170dc-989b-47c4-af84-6fbd2d9592f3",
            "detail_level": "medium",
            "original_summary": "• Renders a div with a top margin\n• Displays a heading showing the company and ticker\n• Uses ResponsiveContainer to ensure the chart fits its parent\n• Renders a LineChart with:\n  ◦ X and Y axes, with the X axis using a custom date formatter\n  ◦ Tooltip and Legend components for interactivity\n  ◦ A monotone Line for price data, styled with a specific color and no dots"
        },
        "timestamp": "2025-08-19 22:37:29.000",
        "event": "commit_modified_summary",
        "id": "oF5KDzM9nq7wfpoffVEe"
    },
    {
        "source": "backend",
        "data": {
            "edited_summary": "• Renders a div with a top margin  \n• Displays a heading showing the company and ticker  \n• Uses ResponsiveContainer to ensure the chart fits its parent  \n• Renders a LineChart with:  \n  ◦ X and Y axes, with the X axis using a custom date formatter  \n  ◦ Tooltip and Legend components for interactivity  \n  ◦ A monotone Line for price data, styled with a specific color and no dots  \n  ◦ Draws a dashed horizontal line at the currentPrice value, using the currentPrice field from the backend response",
            "structured_type": "structured",
            "updated_code": "<div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatDateString} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n          {data.currentPrice !== undefined && (\n            <ReferenceLine\n              y={data.currentPrice}\n              stroke=\"red\"\n              strokeDasharray=\"5 5\"\n              label={{ value: \"Current Price\", position: \"right\", fill: \"red\" }}\n            />\n          )}\n        </LineChart>\n      </ResponsiveContainer>\n    </div>",
            "original_code": "<div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatDateString} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>",
            "detail_level": "medium",
            "original_summary": "• Renders a div with a top margin\n• Displays a heading showing the company and ticker\n• Uses ResponsiveContainer to ensure the chart fits its parent\n• Renders a LineChart with:\n  ◦ X and Y axes, with the X axis using a custom date formatter\n  ◦ Tooltip and Legend components for interactivity\n  ◦ A monotone Line for price data, styled with a specific color and no dots"
        },
        "timestamp": "2025-08-19 22:37:32.000",
        "event": "modify_summary_mediation",
        "id": "VMx7RAPI1PW8uHSGnM69"
    },
    {
        "source": "backend",
        "data": {
            "new_code": "<div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatDateString} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n          {data.currentPrice !== undefined && (\n            <ReferenceLine\n              y={data.currentPrice}\n              stroke=\"red\"\n              strokeDasharray=\"5 5\"\n              label={{ value: \"Current Price\", position: \"right\", fill: \"red\" }}\n            />\n          )}\n        </LineChart>\n      </ResponsiveContainer>\n    </div>",
            "new_summary": {
                "medium_unstructured": "This snippet displays a stock chart within a styled div, including a heading with the company name and ticker symbol. It uses a responsive container to render a line chart with axes, tooltips, a legend, and a line representing price data. In addition, the chart now visually highlights the current price with a red dashed reference line and label when current price data is present.",
                "title": "Stock Chart Rendering Component Section with Current Price Reference Line",
                "low_unstructured": "This code renders a styled stock chart with a title and a line graph, and now also displays a red dashed reference line at the current price if available.",
                "low_structured": "• Renders a container with margin\n• Displays a heading with company and ticker\n• Shows a responsive line chart\n• Adds a red dashed reference line labeled 'Current Price' if current price data is provided",
                "medium_structured": "• Renders a div with a top margin\n• Displays a heading showing the company and ticker\n• Uses ResponsiveContainer to ensure the chart fits its parent\n• Renders a LineChart with:\n  ◦ X and Y axes, with the X axis using a custom date formatter\n  ◦ Tooltip and Legend components for interactivity\n  ◦ A monotone Line for price data, styled with a specific color and no dots\n  ◦ A red dashed ReferenceLine labeled 'Current Price' when current price data is available",
                "high_unstructured": "This code creates a styled container that displays a heading with the company name and ticker symbol, followed by a responsive line chart. The chart is implemented using Recharts components, including LineChart, XAxis, YAxis, Tooltip, Legend, and Line, all wrapped in a ResponsiveContainer set to a fixed height and full width. The X axis uses a custom date formatter, and the Y axis automatically scales to the data. The price data is plotted as a smooth monotone line without dots, and the chart includes interactive tooltip and legend features for better data interpretation. Additionally, when current price data is provided, a red dashed reference line labeled 'Current Price' is drawn at the corresponding value for visual emphasis.",
                "high_structured": "• Renders a div with a top margin for spacing\n• Displays a heading with the company name and ticker symbol\n• Embeds a ResponsiveContainer to make the chart adapt to its parent width and a fixed height\n• Inside the container, renders a LineChart with:\n  ◦ Data provided by chartData\n  ◦ Custom margins for layout control\n  ◦ XAxis configured to use the 'date' key and a custom tick formatter for month display\n  ◦ YAxis set to automatically scale based on data\n  ◦ Tooltip component for interactive data display on hover\n  ◦ Legend component for identifying chart elements\n  ◦ A monotone Line that plots 'price' values, styled with a specific stroke color and dots disabled for a cleaner look\n  ◦ A red dashed ReferenceLine with a 'Current Price' label is added when current price data is present"
            },
            "original_code": "<div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatDateString} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n          {data.currentPrice !== undefined && (\n            <ReferenceLine\n              y={data.currentPrice}\n              stroke=\"red\"\n              strokeDasharray=\"5 5\"\n              label={{ value: \"Current Price\", position: \"right\", fill: \"red\" }}\n            />\n          )}\n        </LineChart>\n      </ResponsiveContainer>\n    </div>",
            "old_summary": {
                "medium_unstructured": "This snippet displays a stock chart within a styled div, including a heading with the company name and ticker symbol. It uses a responsive container to render a line chart with axes, tooltips, a legend, and a line representing price data. The chart is visually customized with specific margins and styling.",
                "title": "Stock Chart Rendering Component Section",
                "low_unstructured": "This code renders a styled stock chart with a title and a line graph.",
                "low_structured": "• Renders a container with margin\n• Displays a heading with company and ticker\n• Shows a responsive line chart",
                "medium_structured": "• Renders a div with a top margin\n• Displays a heading showing the company and ticker\n• Uses ResponsiveContainer to ensure the chart fits its parent\n• Renders a LineChart with:\n  ◦ X and Y axes, with the X axis using a custom date formatter\n  ◦ Tooltip and Legend components for interactivity\n  ◦ A monotone Line for price data, styled with a specific color and no dots",
                "high_unstructured": "This code creates a styled container that displays a heading with the company name and ticker symbol, followed by a responsive line chart. The chart is implemented using Recharts components, including LineChart, XAxis, YAxis, Tooltip, Legend, and Line, all wrapped in a ResponsiveContainer set to a fixed height and full width. The X axis uses a custom date formatter, and the Y axis automatically scales to the data. The price data is plotted as a smooth monotone line without dots, and the chart includes interactive tooltip and legend features for better data interpretation.",
                "high_structured": "• Renders a div with a top margin for spacing\n• Displays a heading with the company name and ticker symbol\n• Embeds a ResponsiveContainer to make the chart adapt to its parent width and a fixed height\n• Inside the container, renders a LineChart with:\n  ◦ Data provided by chartData\n  ◦ Custom margins for layout control\n  ◦ XAxis configured to use the 'date' key and a custom tick formatter for month display\n  ◦ YAxis set to automatically scale based on data\n  ◦ Tooltip component for interactive data display on hover\n  ◦ Legend component for identifying chart elements\n  ◦ A monotone Line that plots 'price' values, styled with a specific stroke color and dots disabled for a cleaner look"
            }
        },
        "timestamp": "2025-08-19 22:37:40.000",
        "event": "summarize_modified_code",
        "id": "72Kl5egPPbV5jGboj2GO"
    },
    {
        "source": "backend",
        "data": {
            "code": "48: <div style={{ marginTop: \"2rem\" }}>\n49:       <h3>\n50:         {company} ({ticker})\n51:       </h3>\n52:       <ResponsiveContainer width=\"100%\" height={300}>\n53:         <LineChart\n54:           data={chartData}\n55:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n56:         >\n57:           <XAxis dataKey=\"date\" tickFormatter={formatDateString} />\n58:           <YAxis domain={[\"auto\", \"auto\"]} />\n59:           <Tooltip />\n60:           <Legend />\n61:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n62:           {data.currentPrice !== undefined && (\n63:             <ReferenceLine\n64:               y={data.currentPrice}\n65:               stroke=\"red\"\n66:               strokeDasharray=\"5 5\"\n67:               label={{ value: \"Current Price\", position: \"right\", fill: \"red\" }}\n68:             />\n69:           )}\n70:         </LineChart>\n71:       </ResponsiveContainer>\n72:     </div>",
            "summary": "• Renders a container with margin\n• Displays a heading with company and ticker\n• Shows a responsive line chart\n• Adds a red dashed reference line labeled 'Current Price' if current price data is provided",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "<div style={{ marginTop: \"2rem\" }}>",
                            "line": 48
                        }
                    ],
                    "summaryComponent": "Renders a container with margin"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<h3>",
                            "line": 49
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 50
                        }
                    ],
                    "summaryComponent": "Displays a heading with company and ticker"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 52
                        },
                        {
                            "code": "<LineChart",
                            "line": 53
                        }
                    ],
                    "summaryComponent": "Shows a responsive line chart"
                },
                {
                    "codeSegments": [
                        {
                            "code": "{data.currentPrice !== undefined && (",
                            "line": 62
                        },
                        {
                            "code": "<ReferenceLine",
                            "line": 63
                        },
                        {
                            "code": "y={data.currentPrice}",
                            "line": 64
                        },
                        {
                            "code": "stroke=\"red\"",
                            "line": 65
                        },
                        {
                            "code": "strokeDasharray=\"5 5\"",
                            "line": 66
                        },
                        {
                            "code": "label={{ value: \"Current Price\", position: \"right\", fill: \"red\" }}",
                            "line": 67
                        }
                    ],
                    "summaryComponent": "Adds a red dashed reference line labeled 'Current Price' if current price data is provided"
                }
            ]
        },
        "timestamp": "2025-08-19 22:37:42.000",
        "event": "map_summary_code",
        "id": "luIFltK9dUvbq57LmEbi"
    },
    {
        "source": "backend",
        "data": {
            "code": "48: <div style={{ marginTop: \"2rem\" }}>\n49:       <h3>\n50:         {company} ({ticker})\n51:       </h3>\n52:       <ResponsiveContainer width=\"100%\" height={300}>\n53:         <LineChart\n54:           data={chartData}\n55:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n56:         >\n57:           <XAxis dataKey=\"date\" tickFormatter={formatDateString} />\n58:           <YAxis domain={[\"auto\", \"auto\"]} />\n59:           <Tooltip />\n60:           <Legend />\n61:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n62:           {data.currentPrice !== undefined && (\n63:             <ReferenceLine\n64:               y={data.currentPrice}\n65:               stroke=\"red\"\n66:               strokeDasharray=\"5 5\"\n67:               label={{ value: \"Current Price\", position: \"right\", fill: \"red\" }}\n68:             />\n69:           )}\n70:         </LineChart>\n71:       </ResponsiveContainer>\n72:     </div>",
            "summary": "This code renders a styled stock chart with a title and a line graph, and now also displays a red dashed reference line at the current price if available.",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "<div style={{ marginTop: \"2rem\" }}>",
                            "line": 48
                        },
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 52
                        },
                        {
                            "code": "<LineChart",
                            "line": 53
                        }
                    ],
                    "summaryComponent": "renders a styled stock chart"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<h3>",
                            "line": 49
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 50
                        }
                    ],
                    "summaryComponent": "with a title"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 61
                        }
                    ],
                    "summaryComponent": "and a line graph"
                },
                {
                    "codeSegments": [
                        {
                            "code": "{data.currentPrice !== undefined && (",
                            "line": 62
                        },
                        {
                            "code": "<ReferenceLine",
                            "line": 63
                        },
                        {
                            "code": "y={data.currentPrice}",
                            "line": 64
                        },
                        {
                            "code": "stroke=\"red\"",
                            "line": 65
                        },
                        {
                            "code": "strokeDasharray=\"5 5\"",
                            "line": 66
                        },
                        {
                            "code": "label={{ value: \"Current Price\", position: \"right\", fill: \"red\" }}",
                            "line": 67
                        }
                    ],
                    "summaryComponent": "also displays a red dashed reference line at the current price if available"
                }
            ]
        },
        "timestamp": "2025-08-19 22:37:43.000",
        "event": "map_summary_code",
        "id": "cVCkUrnG1MevvY71DkwH"
    },
    {
        "source": "backend",
        "data": {
            "code": "48: <div style={{ marginTop: \"2rem\" }}>\n49:       <h3>\n50:         {company} ({ticker})\n51:       </h3>\n52:       <ResponsiveContainer width=\"100%\" height={300}>\n53:         <LineChart\n54:           data={chartData}\n55:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n56:         >\n57:           <XAxis dataKey=\"date\" tickFormatter={formatDateString} />\n58:           <YAxis domain={[\"auto\", \"auto\"]} />\n59:           <Tooltip />\n60:           <Legend />\n61:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n62:           {data.currentPrice !== undefined && (\n63:             <ReferenceLine\n64:               y={data.currentPrice}\n65:               stroke=\"red\"\n66:               strokeDasharray=\"5 5\"\n67:               label={{ value: \"Current Price\", position: \"right\", fill: \"red\" }}\n68:             />\n69:           )}\n70:         </LineChart>\n71:       </ResponsiveContainer>\n72:     </div>",
            "summary": "This snippet displays a stock chart within a styled div, including a heading with the company name and ticker symbol. It uses a responsive container to render a line chart with axes, tooltips, a legend, and a line representing price data. In addition, the chart now visually highlights the current price with a red dashed reference line and label when current price data is present.",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "<div style={{ marginTop: \"2rem\" }}>",
                            "line": 48
                        }
                    ],
                    "summaryComponent": "displays a stock chart within a styled div"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<h3>",
                            "line": 49
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 50
                        }
                    ],
                    "summaryComponent": "including a heading with the company name and ticker symbol"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 52
                        }
                    ],
                    "summaryComponent": "uses a responsive container"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<LineChart",
                            "line": 53
                        }
                    ],
                    "summaryComponent": "to render a line chart"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                            "line": 57
                        },
                        {
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                            "line": 58
                        }
                    ],
                    "summaryComponent": "with axes"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<Tooltip />",
                            "line": 59
                        }
                    ],
                    "summaryComponent": "tooltips"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<Legend />",
                            "line": 60
                        }
                    ],
                    "summaryComponent": "a legend"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 61
                        }
                    ],
                    "summaryComponent": "a line representing price data"
                },
                {
                    "codeSegments": [
                        {
                            "code": "{data.currentPrice !== undefined && (",
                            "line": 62
                        },
                        {
                            "code": "<ReferenceLine",
                            "line": 63
                        },
                        {
                            "code": "y={data.currentPrice}",
                            "line": 64
                        },
                        {
                            "code": "stroke=\"red\"",
                            "line": 65
                        },
                        {
                            "code": "strokeDasharray=\"5 5\"",
                            "line": 66
                        },
                        {
                            "code": "label={{ value: \"Current Price\", position: \"right\", fill: \"red\" }}",
                            "line": 67
                        }
                    ],
                    "summaryComponent": "the chart now visually highlights the current price with a red dashed reference line and label"
                },
                {
                    "codeSegments": [
                        {
                            "code": "{data.currentPrice !== undefined && (",
                            "line": 62
                        }
                    ],
                    "summaryComponent": "when current price data is present"
                }
            ]
        },
        "timestamp": "2025-08-19 22:37:44.000",
        "event": "map_summary_code",
        "id": "9IqFlZkIxCzIsCQaVQYQ"
    },
    {
        "source": "backend",
        "data": {
            "code": "48: <div style={{ marginTop: \"2rem\" }}>\n49:       <h3>\n50:         {company} ({ticker})\n51:       </h3>\n52:       <ResponsiveContainer width=\"100%\" height={300}>\n53:         <LineChart\n54:           data={chartData}\n55:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n56:         >\n57:           <XAxis dataKey=\"date\" tickFormatter={formatDateString} />\n58:           <YAxis domain={[\"auto\", \"auto\"]} />\n59:           <Tooltip />\n60:           <Legend />\n61:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n62:           {data.currentPrice !== undefined && (\n63:             <ReferenceLine\n64:               y={data.currentPrice}\n65:               stroke=\"red\"\n66:               strokeDasharray=\"5 5\"\n67:               label={{ value: \"Current Price\", position: \"right\", fill: \"red\" }}\n68:             />\n69:           )}\n70:         </LineChart>\n71:       </ResponsiveContainer>\n72:     </div>",
            "summary": "• Renders a div with a top margin for spacing\n• Displays a heading with the company name and ticker symbol\n• Embeds a ResponsiveContainer to make the chart adapt to its parent width and a fixed height\n• Inside the container, renders a LineChart with:\n  ◦ Data provided by chartData\n  ◦ Custom margins for layout control\n  ◦ XAxis configured to use the 'date' key and a custom tick formatter for month display\n  ◦ YAxis set to automatically scale based on data\n  ◦ Tooltip component for interactive data display on hover\n  ◦ Legend component for identifying chart elements\n  ◦ A monotone Line that plots 'price' values, styled with a specific stroke color and dots disabled for a cleaner look\n  ◦ A red dashed ReferenceLine with a 'Current Price' label is added when current price data is present",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "<div style={{ marginTop: \"2rem\" }}>",
                            "line": 48
                        }
                    ],
                    "summaryComponent": "Renders a div with a top margin for spacing"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<h3>",
                            "line": 49
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 50
                        }
                    ],
                    "summaryComponent": "Displays a heading with the company name and ticker symbol"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 52
                        }
                    ],
                    "summaryComponent": "Embeds a ResponsiveContainer to make the chart adapt to its parent width and a fixed height"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<LineChart",
                            "line": 53
                        }
                    ],
                    "summaryComponent": "Inside the container, renders a LineChart with:"
                },
                {
                    "codeSegments": [
                        {
                            "code": "data={chartData}",
                            "line": 54
                        }
                    ],
                    "summaryComponent": "Data provided by chartData"
                },
                {
                    "codeSegments": [
                        {
                            "code": "margin={{ top: 10, right: 30, left: 0, bottom: 0 }}",
                            "line": 55
                        }
                    ],
                    "summaryComponent": "Custom margins for layout control"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                            "line": 57
                        }
                    ],
                    "summaryComponent": "XAxis configured to use the 'date' key and a custom tick formatter for month display"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                            "line": 58
                        }
                    ],
                    "summaryComponent": "YAxis set to automatically scale based on data"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<Tooltip />",
                            "line": 59
                        }
                    ],
                    "summaryComponent": "Tooltip component for interactive data display on hover"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<Legend />",
                            "line": 60
                        }
                    ],
                    "summaryComponent": "Legend component for identifying chart elements"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 61
                        }
                    ],
                    "summaryComponent": "A monotone Line that plots 'price' values, styled with a specific stroke color and dots disabled for a cleaner look"
                },
                {
                    "codeSegments": [
                        {
                            "code": "{data.currentPrice !== undefined && (",
                            "line": 62
                        },
                        {
                            "code": "<ReferenceLine",
                            "line": 63
                        },
                        {
                            "code": "y={data.currentPrice}",
                            "line": 64
                        },
                        {
                            "code": "stroke=\"red\"",
                            "line": 65
                        },
                        {
                            "code": "strokeDasharray=\"5 5\"",
                            "line": 66
                        },
                        {
                            "code": "label={{ value: \"Current Price\", position: \"right\", fill: \"red\" }}",
                            "line": 67
                        }
                    ],
                    "summaryComponent": "A red dashed ReferenceLine with a 'Current Price' label is added when current price data is present"
                }
            ]
        },
        "timestamp": "2025-08-19 22:37:44.000",
        "event": "map_summary_code",
        "id": "nZ6hf5KMwCoiq9vRHMtd"
    },
    {
        "source": "backend",
        "data": {
            "code": "48: <div style={{ marginTop: \"2rem\" }}>\n49:       <h3>\n50:         {company} ({ticker})\n51:       </h3>\n52:       <ResponsiveContainer width=\"100%\" height={300}>\n53:         <LineChart\n54:           data={chartData}\n55:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n56:         >\n57:           <XAxis dataKey=\"date\" tickFormatter={formatDateString} />\n58:           <YAxis domain={[\"auto\", \"auto\"]} />\n59:           <Tooltip />\n60:           <Legend />\n61:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n62:           {data.currentPrice !== undefined && (\n63:             <ReferenceLine\n64:               y={data.currentPrice}\n65:               stroke=\"red\"\n66:               strokeDasharray=\"5 5\"\n67:               label={{ value: \"Current Price\", position: \"right\", fill: \"red\" }}\n68:             />\n69:           )}\n70:         </LineChart>\n71:       </ResponsiveContainer>\n72:     </div>",
            "summary": "• Renders a div with a top margin\n• Displays a heading showing the company and ticker\n• Uses ResponsiveContainer to ensure the chart fits its parent\n• Renders a LineChart with:\n  ◦ X and Y axes, with the X axis using a custom date formatter\n  ◦ Tooltip and Legend components for interactivity\n  ◦ A monotone Line for price data, styled with a specific color and no dots\n  ◦ A red dashed ReferenceLine labeled 'Current Price' when current price data is available",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "<div style={{ marginTop: \"2rem\" }}>",
                            "line": 48
                        }
                    ],
                    "summaryComponent": "Renders a div with a top margin"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<h3>",
                            "line": 49
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 50
                        }
                    ],
                    "summaryComponent": "Displays a heading showing the company and ticker"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 52
                        }
                    ],
                    "summaryComponent": "Uses ResponsiveContainer to ensure the chart fits its parent"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<LineChart",
                            "line": 53
                        }
                    ],
                    "summaryComponent": "Renders a LineChart with:"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                            "line": 57
                        },
                        {
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                            "line": 58
                        }
                    ],
                    "summaryComponent": "X and Y axes, with the X axis using a custom date formatter"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<Tooltip />",
                            "line": 59
                        },
                        {
                            "code": "<Legend />",
                            "line": 60
                        }
                    ],
                    "summaryComponent": "Tooltip and Legend components for interactivity"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 61
                        }
                    ],
                    "summaryComponent": "A monotone Line for price data, styled with a specific color and no dots"
                },
                {
                    "codeSegments": [
                        {
                            "code": "{data.currentPrice !== undefined && (",
                            "line": 62
                        },
                        {
                            "code": "<ReferenceLine",
                            "line": 63
                        },
                        {
                            "code": "y={data.currentPrice}",
                            "line": 64
                        },
                        {
                            "code": "stroke=\"red\"",
                            "line": 65
                        },
                        {
                            "code": "strokeDasharray=\"5 5\"",
                            "line": 66
                        },
                        {
                            "code": "label={{ value: \"Current Price\", position: \"right\", fill: \"red\" }}",
                            "line": 67
                        }
                    ],
                    "summaryComponent": "A red dashed ReferenceLine labeled 'Current Price' when current price data is available"
                }
            ]
        },
        "timestamp": "2025-08-19 22:37:45.000",
        "event": "map_summary_code",
        "id": "OMUeNmLNywmsGaGNm58K"
    },
    {
        "source": "backend",
        "data": {
            "code": "48: <div style={{ marginTop: \"2rem\" }}>\n49:       <h3>\n50:         {company} ({ticker})\n51:       </h3>\n52:       <ResponsiveContainer width=\"100%\" height={300}>\n53:         <LineChart\n54:           data={chartData}\n55:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n56:         >\n57:           <XAxis dataKey=\"date\" tickFormatter={formatDateString} />\n58:           <YAxis domain={[\"auto\", \"auto\"]} />\n59:           <Tooltip />\n60:           <Legend />\n61:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n62:           {data.currentPrice !== undefined && (\n63:             <ReferenceLine\n64:               y={data.currentPrice}\n65:               stroke=\"red\"\n66:               strokeDasharray=\"5 5\"\n67:               label={{ value: \"Current Price\", position: \"right\", fill: \"red\" }}\n68:             />\n69:           )}\n70:         </LineChart>\n71:       </ResponsiveContainer>\n72:     </div>",
            "summary": "This code creates a styled container that displays a heading with the company name and ticker symbol, followed by a responsive line chart. The chart is implemented using Recharts components, including LineChart, XAxis, YAxis, Tooltip, Legend, and Line, all wrapped in a ResponsiveContainer set to a fixed height and full width. The X axis uses a custom date formatter, and the Y axis automatically scales to the data. The price data is plotted as a smooth monotone line without dots, and the chart includes interactive tooltip and legend features for better data interpretation. Additionally, when current price data is provided, a red dashed reference line labeled 'Current Price' is drawn at the corresponding value for visual emphasis.",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "<div style={{ marginTop: \"2rem\" }}>",
                            "line": 48
                        }
                    ],
                    "summaryComponent": "a styled container"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<h3>",
                            "line": 49
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 50
                        }
                    ],
                    "summaryComponent": "displays a heading with the company name and ticker symbol"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 52
                        },
                        {
                            "code": "<LineChart",
                            "line": 53
                        }
                    ],
                    "summaryComponent": "a responsive line chart"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<LineChart",
                            "line": 53
                        },
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                            "line": 57
                        },
                        {
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                            "line": 58
                        },
                        {
                            "code": "<Tooltip />",
                            "line": 59
                        },
                        {
                            "code": "<Legend />",
                            "line": 60
                        },
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 61
                        }
                    ],
                    "summaryComponent": "implemented using Recharts components, including LineChart, XAxis, YAxis, Tooltip, Legend, and Line"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 52
                        }
                    ],
                    "summaryComponent": "all wrapped in a ResponsiveContainer set to a fixed height and full width"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                            "line": 57
                        }
                    ],
                    "summaryComponent": "The X axis uses a custom date formatter"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                            "line": 58
                        }
                    ],
                    "summaryComponent": "the Y axis automatically scales to the data"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 61
                        }
                    ],
                    "summaryComponent": "The price data is plotted as a smooth monotone line without dots"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<Tooltip />",
                            "line": 59
                        },
                        {
                            "code": "<Legend />",
                            "line": 60
                        }
                    ],
                    "summaryComponent": "the chart includes interactive tooltip and legend features for better data interpretation"
                },
                {
                    "codeSegments": [
                        {
                            "code": "{data.currentPrice !== undefined && (",
                            "line": 62
                        },
                        {
                            "code": "<ReferenceLine",
                            "line": 63
                        },
                        {
                            "code": "y={data.currentPrice}",
                            "line": 64
                        },
                        {
                            "code": "stroke=\"red\"",
                            "line": 65
                        },
                        {
                            "code": "strokeDasharray=\"5 5\"",
                            "line": 66
                        },
                        {
                            "code": "label={{ value: \"Current Price\", position: \"right\", fill: \"red\" }}",
                            "line": 67
                        }
                    ],
                    "summaryComponent": "when current price data is provided, a red dashed reference line labeled 'Current Price' is drawn at the corresponding value for visual emphasis"
                }
            ]
        },
        "timestamp": "2025-08-19 22:37:46.000",
        "event": "map_summary_code",
        "id": "IZG8WSFziQEoHT6FV54q"
    },
    {
        "source": "frontend",
        "data": {
            "section_id": "6dc9d13b-732a-4db9-a0ad-dc1a1a1b021a",
            "section_data": {
                "selectedStructured": "unstructured",
                "lines": [
                    48,
                    72
                ],
                "title": "Stock Chart Rendering Component Section with Current Price Reference Line",
                "selectedDetailLevel": "medium",
                "summaryMappings": {
                    "medium_unstructured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "<div style={{ marginTop: \"2rem\" }}>",
                                    "line": 48
                                }
                            ],
                            "summaryComponent": "displays a stock chart within a styled div"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<h3>",
                                    "line": 49
                                },
                                {
                                    "code": "{company} ({ticker})",
                                    "line": 50
                                }
                            ],
                            "summaryComponent": "including a heading with the company name and ticker symbol"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 52
                                }
                            ],
                            "summaryComponent": "uses a responsive container"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<LineChart",
                                    "line": 53
                                }
                            ],
                            "summaryComponent": "to render a line chart"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                                    "line": 57
                                },
                                {
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                                    "line": 58
                                }
                            ],
                            "summaryComponent": "with axes"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<Tooltip />",
                                    "line": 59
                                }
                            ],
                            "summaryComponent": "tooltips"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<Legend />",
                                    "line": 60
                                }
                            ],
                            "summaryComponent": "a legend"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 61
                                }
                            ],
                            "summaryComponent": "a line representing price data"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "{data.currentPrice !== undefined && (",
                                    "line": 62
                                },
                                {
                                    "code": "<ReferenceLine",
                                    "line": 63
                                },
                                {
                                    "code": "y={data.currentPrice}",
                                    "line": 64
                                },
                                {
                                    "code": "stroke=\"red\"",
                                    "line": 65
                                },
                                {
                                    "code": "strokeDasharray=\"5 5\"",
                                    "line": 66
                                },
                                {
                                    "code": "label={{ value: \"Current Price\", position: \"right\", fill: \"red\" }}",
                                    "line": 67
                                }
                            ],
                            "summaryComponent": "the chart now visually highlights the current price with a red dashed reference line and label"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "{data.currentPrice !== undefined && (",
                                    "line": 62
                                }
                            ],
                            "summaryComponent": "when current price data is present"
                        }
                    ],
                    "high_unstructured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "<div style={{ marginTop: \"2rem\" }}>",
                                    "line": 48
                                }
                            ],
                            "summaryComponent": "a styled container"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<h3>",
                                    "line": 49
                                },
                                {
                                    "code": "{company} ({ticker})",
                                    "line": 50
                                }
                            ],
                            "summaryComponent": "displays a heading with the company name and ticker symbol"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 52
                                },
                                {
                                    "code": "<LineChart",
                                    "line": 53
                                }
                            ],
                            "summaryComponent": "a responsive line chart"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<LineChart",
                                    "line": 53
                                },
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                                    "line": 57
                                },
                                {
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                                    "line": 58
                                },
                                {
                                    "code": "<Tooltip />",
                                    "line": 59
                                },
                                {
                                    "code": "<Legend />",
                                    "line": 60
                                },
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 61
                                }
                            ],
                            "summaryComponent": "implemented using Recharts components, including LineChart, XAxis, YAxis, Tooltip, Legend, and Line"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 52
                                }
                            ],
                            "summaryComponent": "all wrapped in a ResponsiveContainer set to a fixed height and full width"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                                    "line": 57
                                }
                            ],
                            "summaryComponent": "The X axis uses a custom date formatter"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                                    "line": 58
                                }
                            ],
                            "summaryComponent": "the Y axis automatically scales to the data"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 61
                                }
                            ],
                            "summaryComponent": "The price data is plotted as a smooth monotone line without dots"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<Tooltip />",
                                    "line": 59
                                },
                                {
                                    "code": "<Legend />",
                                    "line": 60
                                }
                            ],
                            "summaryComponent": "the chart includes interactive tooltip and legend features for better data interpretation"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "{data.currentPrice !== undefined && (",
                                    "line": 62
                                },
                                {
                                    "code": "<ReferenceLine",
                                    "line": 63
                                },
                                {
                                    "code": "y={data.currentPrice}",
                                    "line": 64
                                },
                                {
                                    "code": "stroke=\"red\"",
                                    "line": 65
                                },
                                {
                                    "code": "strokeDasharray=\"5 5\"",
                                    "line": 66
                                },
                                {
                                    "code": "label={{ value: \"Current Price\", position: \"right\", fill: \"red\" }}",
                                    "line": 67
                                }
                            ],
                            "summaryComponent": "when current price data is provided, a red dashed reference line labeled 'Current Price' is drawn at the corresponding value for visual emphasis"
                        }
                    ],
                    "low_unstructured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "<div style={{ marginTop: \"2rem\" }}>",
                                    "line": 48
                                },
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 52
                                },
                                {
                                    "code": "<LineChart",
                                    "line": 53
                                }
                            ],
                            "summaryComponent": "renders a styled stock chart"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<h3>",
                                    "line": 49
                                },
                                {
                                    "code": "{company} ({ticker})",
                                    "line": 50
                                }
                            ],
                            "summaryComponent": "with a title"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 61
                                }
                            ],
                            "summaryComponent": "and a line graph"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "{data.currentPrice !== undefined && (",
                                    "line": 62
                                },
                                {
                                    "code": "<ReferenceLine",
                                    "line": 63
                                },
                                {
                                    "code": "y={data.currentPrice}",
                                    "line": 64
                                },
                                {
                                    "code": "stroke=\"red\"",
                                    "line": 65
                                },
                                {
                                    "code": "strokeDasharray=\"5 5\"",
                                    "line": 66
                                },
                                {
                                    "code": "label={{ value: \"Current Price\", position: \"right\", fill: \"red\" }}",
                                    "line": 67
                                }
                            ],
                            "summaryComponent": "also displays a red dashed reference line at the current price if available"
                        }
                    ],
                    "low_structured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "<div style={{ marginTop: \"2rem\" }}>",
                                    "line": 48
                                }
                            ],
                            "summaryComponent": "Renders a container with margin"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<h3>",
                                    "line": 49
                                },
                                {
                                    "code": "{company} ({ticker})",
                                    "line": 50
                                }
                            ],
                            "summaryComponent": "Displays a heading with company and ticker"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 52
                                },
                                {
                                    "code": "<LineChart",
                                    "line": 53
                                }
                            ],
                            "summaryComponent": "Shows a responsive line chart"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "{data.currentPrice !== undefined && (",
                                    "line": 62
                                },
                                {
                                    "code": "<ReferenceLine",
                                    "line": 63
                                },
                                {
                                    "code": "y={data.currentPrice}",
                                    "line": 64
                                },
                                {
                                    "code": "stroke=\"red\"",
                                    "line": 65
                                },
                                {
                                    "code": "strokeDasharray=\"5 5\"",
                                    "line": 66
                                },
                                {
                                    "code": "label={{ value: \"Current Price\", position: \"right\", fill: \"red\" }}",
                                    "line": 67
                                }
                            ],
                            "summaryComponent": "Adds a red dashed reference line labeled 'Current Price' if current price data is provided"
                        }
                    ],
                    "medium_structured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "<div style={{ marginTop: \"2rem\" }}>",
                                    "line": 48
                                }
                            ],
                            "summaryComponent": "Renders a div with a top margin"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<h3>",
                                    "line": 49
                                },
                                {
                                    "code": "{company} ({ticker})",
                                    "line": 50
                                }
                            ],
                            "summaryComponent": "Displays a heading showing the company and ticker"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 52
                                }
                            ],
                            "summaryComponent": "Uses ResponsiveContainer to ensure the chart fits its parent"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<LineChart",
                                    "line": 53
                                }
                            ],
                            "summaryComponent": "Renders a LineChart with:"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                                    "line": 57
                                },
                                {
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                                    "line": 58
                                }
                            ],
                            "summaryComponent": "X and Y axes, with the X axis using a custom date formatter"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<Tooltip />",
                                    "line": 59
                                },
                                {
                                    "code": "<Legend />",
                                    "line": 60
                                }
                            ],
                            "summaryComponent": "Tooltip and Legend components for interactivity"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 61
                                }
                            ],
                            "summaryComponent": "A monotone Line for price data, styled with a specific color and no dots"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "{data.currentPrice !== undefined && (",
                                    "line": 62
                                },
                                {
                                    "code": "<ReferenceLine",
                                    "line": 63
                                },
                                {
                                    "code": "y={data.currentPrice}",
                                    "line": 64
                                },
                                {
                                    "code": "stroke=\"red\"",
                                    "line": 65
                                },
                                {
                                    "code": "strokeDasharray=\"5 5\"",
                                    "line": 66
                                },
                                {
                                    "code": "label={{ value: \"Current Price\", position: \"right\", fill: \"red\" }}",
                                    "line": 67
                                }
                            ],
                            "summaryComponent": "A red dashed ReferenceLine labeled 'Current Price' when current price data is available"
                        }
                    ],
                    "high_structured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "<div style={{ marginTop: \"2rem\" }}>",
                                    "line": 48
                                }
                            ],
                            "summaryComponent": "Renders a div with a top margin for spacing"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<h3>",
                                    "line": 49
                                },
                                {
                                    "code": "{company} ({ticker})",
                                    "line": 50
                                }
                            ],
                            "summaryComponent": "Displays a heading with the company name and ticker symbol"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 52
                                }
                            ],
                            "summaryComponent": "Embeds a ResponsiveContainer to make the chart adapt to its parent width and a fixed height"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<LineChart",
                                    "line": 53
                                }
                            ],
                            "summaryComponent": "Inside the container, renders a LineChart with:"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "data={chartData}",
                                    "line": 54
                                }
                            ],
                            "summaryComponent": "Data provided by chartData"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "margin={{ top: 10, right: 30, left: 0, bottom: 0 }}",
                                    "line": 55
                                }
                            ],
                            "summaryComponent": "Custom margins for layout control"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                                    "line": 57
                                }
                            ],
                            "summaryComponent": "XAxis configured to use the 'date' key and a custom tick formatter for month display"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                                    "line": 58
                                }
                            ],
                            "summaryComponent": "YAxis set to automatically scale based on data"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<Tooltip />",
                                    "line": 59
                                }
                            ],
                            "summaryComponent": "Tooltip component for interactive data display on hover"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<Legend />",
                                    "line": 60
                                }
                            ],
                            "summaryComponent": "Legend component for identifying chart elements"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 61
                                }
                            ],
                            "summaryComponent": "A monotone Line that plots 'price' values, styled with a specific stroke color and dots disabled for a cleaner look"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "{data.currentPrice !== undefined && (",
                                    "line": 62
                                },
                                {
                                    "code": "<ReferenceLine",
                                    "line": 63
                                },
                                {
                                    "code": "y={data.currentPrice}",
                                    "line": 64
                                },
                                {
                                    "code": "stroke=\"red\"",
                                    "line": 65
                                },
                                {
                                    "code": "strokeDasharray=\"5 5\"",
                                    "line": 66
                                },
                                {
                                    "code": "label={{ value: \"Current Price\", position: \"right\", fill: \"red\" }}",
                                    "line": 67
                                }
                            ],
                            "summaryComponent": "A red dashed ReferenceLine with a 'Current Price' label is added when current price data is present"
                        }
                    ]
                },
                "editPromptStructured": null,
                "createdAt": 1755628666000,
                "editPromptValue": "",
                "oldSummaryData": {
                    "medium_unstructured": "This snippet displays a stock chart within a styled div, including a heading with the company name and ticker symbol. It uses a responsive container to render a line chart with axes, tooltips, a legend, and a line representing price data. The chart is visually customized with specific margins and styling.",
                    "title": "Stock Chart Rendering Component Section",
                    "low_unstructured": "This code renders a styled stock chart with a title and a line graph.",
                    "low_structured": "• Renders a container with margin\n• Displays a heading with company and ticker\n• Shows a responsive line chart",
                    "medium_structured": "• Renders a div with a top margin\n• Displays a heading showing the company and ticker\n• Uses ResponsiveContainer to ensure the chart fits its parent\n• Renders a LineChart with:\n  ◦ X and Y axes, with the X axis using a custom date formatter\n  ◦ Tooltip and Legend components for interactivity\n  ◦ A monotone Line for price data, styled with a specific color and no dots",
                    "high_unstructured": "This code creates a styled container that displays a heading with the company name and ticker symbol, followed by a responsive line chart. The chart is implemented using Recharts components, including LineChart, XAxis, YAxis, Tooltip, Legend, and Line, all wrapped in a ResponsiveContainer set to a fixed height and full width. The X axis uses a custom date formatter, and the Y axis automatically scales to the data. The price data is plotted as a smooth monotone line without dots, and the chart includes interactive tooltip and legend features for better data interpretation.",
                    "high_structured": "• Renders a div with a top margin for spacing\n• Displays a heading with the company name and ticker symbol\n• Embeds a ResponsiveContainer to make the chart adapt to its parent width and a fixed height\n• Inside the container, renders a LineChart with:\n  ◦ Data provided by chartData\n  ◦ Custom margins for layout control\n  ◦ XAxis configured to use the 'date' key and a custom tick formatter for month display\n  ◦ YAxis set to automatically scale based on data\n  ◦ Tooltip component for interactive data display on hover\n  ◦ Legend component for identifying chart elements\n  ◦ A monotone Line that plots 'price' values, styled with a specific stroke color and dots disabled for a cleaner look"
                },
                "editPromptDetailLevel": null,
                "summaryData": {
                    "medium_unstructured": "This snippet displays a stock chart within a styled div, including a heading with the company name and ticker symbol. It uses a responsive container to render a line chart with axes, tooltips, a legend, and a line representing price data. In addition, the chart now visually highlights the current price with a red dashed reference line and label when current price data is present.",
                    "title": "Stock Chart Rendering Component Section with Current Price Reference Line",
                    "low_unstructured": "This code renders a styled stock chart with a title and a line graph, and now also displays a red dashed reference line at the current price if available.",
                    "low_structured": "• Renders a container with margin\n• Displays a heading with company and ticker\n• Shows a responsive line chart\n• Adds a red dashed reference line labeled 'Current Price' if current price data is provided",
                    "medium_structured": "• Renders a div with a top margin\n• Displays a heading showing the company and ticker\n• Uses ResponsiveContainer to ensure the chart fits its parent\n• Renders a LineChart with:\n  ◦ X and Y axes, with the X axis using a custom date formatter\n  ◦ Tooltip and Legend components for interactivity\n  ◦ A monotone Line for price data, styled with a specific color and no dots\n  ◦ A red dashed ReferenceLine labeled 'Current Price' when current price data is available",
                    "high_unstructured": "This code creates a styled container that displays a heading with the company name and ticker symbol, followed by a responsive line chart. The chart is implemented using Recharts components, including LineChart, XAxis, YAxis, Tooltip, Legend, and Line, all wrapped in a ResponsiveContainer set to a fixed height and full width. The X axis uses a custom date formatter, and the Y axis automatically scales to the data. The price data is plotted as a smooth monotone line without dots, and the chart includes interactive tooltip and legend features for better data interpretation. Additionally, when current price data is provided, a red dashed reference line labeled 'Current Price' is drawn at the corresponding value for visual emphasis.",
                    "high_structured": "• Renders a div with a top margin for spacing\n• Displays a heading with the company name and ticker symbol\n• Embeds a ResponsiveContainer to make the chart adapt to its parent width and a fixed height\n• Inside the container, renders a LineChart with:\n  ◦ Data provided by chartData\n  ◦ Custom margins for layout control\n  ◦ XAxis configured to use the 'date' key and a custom tick formatter for month display\n  ◦ YAxis set to automatically scale based on data\n  ◦ Tooltip component for interactive data display on hover\n  ◦ Legend component for identifying chart elements\n  ◦ A monotone Line that plots 'price' values, styled with a specific stroke color and dots disabled for a cleaner look\n  ◦ A red dashed ReferenceLine with a 'Current Price' label is added when current price data is present"
                },
                "metadata": {
                    "offset": 957,
                    "originalCode": "<div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatDateString} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n          {data.currentPrice !== undefined && (\n            <ReferenceLine\n              y={data.currentPrice}\n              stroke=\"red\"\n              strokeDasharray=\"5 5\"\n              label={{ value: \"Current Price\", position: \"right\", fill: \"red\" }}\n            />\n          )}\n        </LineChart>\n      </ResponsiveContainer>\n    </div>",
                    "fullPath": "/project/workspace/frontend/src/StockChart.jsx",
                    "id": "6dc9d13b-732a-4db9-a0ad-dc1a1a1b021a",
                    "filename": "StockChart.jsx"
                }
            }
        },
        "timestamp": "2025-08-19 22:37:47.000",
        "event": "create_new_section",
        "id": "9d6hUaDNKC1PSmHzNC8x"
    },
    {
        "source": "frontend",
        "data": {
            "before_section_id": "73a170dc-989b-47c4-af84-6fbd2d9592f3",
            "after_section_id": "6dc9d13b-732a-4db9-a0ad-dc1a1a1b021a"
        },
        "timestamp": "2025-08-19 22:37:47.000",
        "event": "autotransit_section",
        "id": "GqgpO0035DUGKBMv2smX"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "unstructured",
            "section_id": "6dc9d13b-732a-4db9-a0ad-dc1a1a1b021a",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:38:13.000",
        "event": "mapping_unhover",
        "id": "8jtIBwYWppM6sbXC3ydz"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "unstructured",
            "section_id": "6dc9d13b-732a-4db9-a0ad-dc1a1a1b021a",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:38:13.000",
        "event": "mapping_unhover",
        "id": "FP2NZ9PyLum0jVf3iJsi"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 4,
            "section_id": "6dc9d13b-732a-4db9-a0ad-dc1a1a1b021a",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:38:13.000",
        "event": "mapping_hover",
        "id": "azJ8JkVqPkvvjEdVYjSo"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "unstructured",
            "section_id": "6dc9d13b-732a-4db9-a0ad-dc1a1a1b021a",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:38:13.000",
        "event": "mapping_unhover",
        "id": "bmGxUzbLpW8KcBDN4OYe"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 7,
            "section_id": "6dc9d13b-732a-4db9-a0ad-dc1a1a1b021a",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:38:13.000",
        "event": "mapping_hover",
        "id": "c7kQniWxmVyKVVF37Wc1"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 8,
            "section_id": "6dc9d13b-732a-4db9-a0ad-dc1a1a1b021a",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:38:13.000",
        "event": "mapping_hover",
        "id": "eKdRlWKOTDRYWPpIMRrj"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "unstructured",
            "section_id": "6dc9d13b-732a-4db9-a0ad-dc1a1a1b021a",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:38:13.000",
        "event": "mapping_unhover",
        "id": "oBfhv9iYuhvReWEgE9ca"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 9,
            "section_id": "6dc9d13b-732a-4db9-a0ad-dc1a1a1b021a",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:38:13.000",
        "event": "mapping_hover",
        "id": "xtW8IskeAa59VSGVHeo9"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "unstructured",
            "section_id": "6dc9d13b-732a-4db9-a0ad-dc1a1a1b021a",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:38:41.000",
        "event": "mapping_unhover",
        "id": "BsDySyv4MF4As4gFmqUX"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 2,
            "section_id": "6dc9d13b-732a-4db9-a0ad-dc1a1a1b021a",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:38:41.000",
        "event": "mapping_hover",
        "id": "WZE51XrmzKYcKLxb2uWr"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 0,
            "section_id": "6dc9d13b-732a-4db9-a0ad-dc1a1a1b021a",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:38:41.000",
        "event": "mapping_hover",
        "id": "c7Uw3LbRChwvFcgUpPSm"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "unstructured",
            "section_id": "6dc9d13b-732a-4db9-a0ad-dc1a1a1b021a",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:38:41.000",
        "event": "mapping_unhover",
        "id": "e3i9UsjEBloPo0Ue21pR"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 1,
            "section_id": "6dc9d13b-732a-4db9-a0ad-dc1a1a1b021a",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:38:41.000",
        "event": "mapping_hover",
        "id": "kq5ROM5cFJpbo2HD72Yy"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "unstructured",
            "section_id": "6dc9d13b-732a-4db9-a0ad-dc1a1a1b021a",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:38:42.000",
        "event": "mapping_unhover",
        "id": "bbBxPCzLPWUVAShsM8TJ"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 8,
            "section_id": "6dc9d13b-732a-4db9-a0ad-dc1a1a1b021a",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:38:46.000",
        "event": "mapping_hover",
        "id": "hrBefGygoogeZQCavt0i"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "unstructured",
            "section_id": "6dc9d13b-732a-4db9-a0ad-dc1a1a1b021a",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:38:47.000",
        "event": "mapping_unhover",
        "id": "1TpoQRk6BVmcFpzMS3cD"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "unstructured",
            "section_id": "6dc9d13b-732a-4db9-a0ad-dc1a1a1b021a",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:38:47.000",
        "event": "mapping_unhover",
        "id": "MDQffcmEEGt5VZl70fM9"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 9,
            "section_id": "6dc9d13b-732a-4db9-a0ad-dc1a1a1b021a",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:38:47.000",
        "event": "mapping_hover",
        "id": "nSWdCHVkRaHjAdJ1bGfU"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 9,
            "section_id": "6dc9d13b-732a-4db9-a0ad-dc1a1a1b021a",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:38:49.000",
        "event": "mapping_hover",
        "id": "Gw2Z4VzIS7ZkBm5XQdyW"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "unstructured",
            "section_id": "6dc9d13b-732a-4db9-a0ad-dc1a1a1b021a",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:38:49.000",
        "event": "mapping_unhover",
        "id": "gYrFqmdhXQbjj1cAPuiw"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 8,
            "section_id": "6dc9d13b-732a-4db9-a0ad-dc1a1a1b021a",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:38:51.000",
        "event": "mapping_hover",
        "id": "OykBYHJ5PSuPHsp7IUOX"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "unstructured",
            "section_id": "6dc9d13b-732a-4db9-a0ad-dc1a1a1b021a",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:38:54.000",
        "event": "mapping_unhover",
        "id": "AnMjxCeQKVAFLYWBSYyr"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 1,
            "section_id": "6dc9d13b-732a-4db9-a0ad-dc1a1a1b021a",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:38:54.000",
        "event": "mapping_hover",
        "id": "E5taAT5KSi50dVaCtuUW"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "unstructured",
            "section_id": "6dc9d13b-732a-4db9-a0ad-dc1a1a1b021a",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:38:54.000",
        "event": "mapping_unhover",
        "id": "OZ48091JINisgkZemtgM"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "unstructured",
            "mapping_index": 0,
            "section_id": "6dc9d13b-732a-4db9-a0ad-dc1a1a1b021a",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:38:54.000",
        "event": "mapping_hover",
        "id": "Rv8Up5FIKjf3STNnB4gh"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "unstructured",
            "section_id": "6dc9d13b-732a-4db9-a0ad-dc1a1a1b021a",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:38:54.000",
        "event": "mapping_unhover",
        "id": "dIXBGI5Ciiu4edTz3wle"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 1,
            "section_id": "6dc9d13b-732a-4db9-a0ad-dc1a1a1b021a",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:38:55.000",
        "event": "mapping_hover",
        "id": "CLPwqzwPxZlsbGeHCJjF"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 4,
            "section_id": "6dc9d13b-732a-4db9-a0ad-dc1a1a1b021a",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:38:55.000",
        "event": "mapping_hover",
        "id": "Chrc2M78hDMaiLMlqZJG"
    },
    {
        "source": "frontend",
        "data": {
            "before_structured": "unstructured",
            "after_structured": "structured",
            "section_id": "6dc9d13b-732a-4db9-a0ad-dc1a1a1b021a",
            "before_detail_level": "medium",
            "after_detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:38:55.000",
        "event": "change_summary_level",
        "id": "DmKsdxfB2bpdCGwz9MET"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "6dc9d13b-732a-4db9-a0ad-dc1a1a1b021a",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:38:55.000",
        "event": "mapping_unhover",
        "id": "Ec9aSSAKO7ACqvLze5pk"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 5,
            "section_id": "6dc9d13b-732a-4db9-a0ad-dc1a1a1b021a",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:38:55.000",
        "event": "mapping_hover",
        "id": "G98q8U0pGu02tkjnLQ3K"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 2,
            "section_id": "6dc9d13b-732a-4db9-a0ad-dc1a1a1b021a",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:38:55.000",
        "event": "mapping_hover",
        "id": "H2xaKu3ob0Wvx9MW4Cw5"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 3,
            "section_id": "6dc9d13b-732a-4db9-a0ad-dc1a1a1b021a",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:38:55.000",
        "event": "mapping_hover",
        "id": "IK17Nfl3OQ6CyVc5nZAQ"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "6dc9d13b-732a-4db9-a0ad-dc1a1a1b021a",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:38:55.000",
        "event": "mapping_unhover",
        "id": "RNimwekCVHfvyhOPWLQF"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 0,
            "section_id": "6dc9d13b-732a-4db9-a0ad-dc1a1a1b021a",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:38:55.000",
        "event": "mapping_hover",
        "id": "Z1Jg8WGxbL8E1Ze8EYgJ"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "6dc9d13b-732a-4db9-a0ad-dc1a1a1b021a",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:38:55.000",
        "event": "mapping_unhover",
        "id": "e7VUKjOCxnA8qsxlJvlZ"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "6dc9d13b-732a-4db9-a0ad-dc1a1a1b021a",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:38:55.000",
        "event": "mapping_unhover",
        "id": "em8N9QOl6fr65LEJ0f9c"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "6dc9d13b-732a-4db9-a0ad-dc1a1a1b021a",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:38:55.000",
        "event": "mapping_unhover",
        "id": "lou7IU3LCHKUooYsjmz4"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "6dc9d13b-732a-4db9-a0ad-dc1a1a1b021a",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:38:55.000",
        "event": "mapping_unhover",
        "id": "nmTwMmq33UCj3y2J4VDj"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "6dc9d13b-732a-4db9-a0ad-dc1a1a1b021a",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:38:58.000",
        "event": "mapping_unhover",
        "id": "TMDmuQEV3WROJozwvlew"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 7,
            "section_id": "6dc9d13b-732a-4db9-a0ad-dc1a1a1b021a",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:38:58.000",
        "event": "mapping_hover",
        "id": "hamivSpPQOvUCVcuQdQp"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "6dc9d13b-732a-4db9-a0ad-dc1a1a1b021a",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:38:58.000",
        "event": "mapping_unhover",
        "id": "nMudOxBEXoihNeGxufaP"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 6,
            "section_id": "6dc9d13b-732a-4db9-a0ad-dc1a1a1b021a",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:38:58.000",
        "event": "mapping_hover",
        "id": "sR9Se0SJV8QpVg9j7XnJ"
    },
    {
        "source": "frontend",
        "data": {
            "structured": "structured",
            "section_id": "6dc9d13b-732a-4db9-a0ad-dc1a1a1b021a",
            "detail_level": "medium",
            "summary": "• Renders a div with a top margin\n• Displays a heading showing the company and ticker\n• Uses ResponsiveContainer to ensure the chart fits its parent\n• Renders a LineChart with:\n  ◦ X and Y axes, with the X axis using a custom date formatter\n  ◦ Tooltip and Legend components for interactivity\n  ◦ A monotone Line for price data, styled with a specific color and no dots\n  ◦ A red dashed ReferenceLine labeled 'Current Price' when current price data is available"
        },
        "timestamp": "2025-08-19 22:39:00.000",
        "event": "click_edit_in_prompt",
        "id": "wA0gSx3BVIxbbA3PbQFc"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "section_id": "6dc9d13b-732a-4db9-a0ad-dc1a1a1b021a",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:39:01.000",
        "event": "mapping_unhover",
        "id": "op0bMUYkcc7XpN53901H"
    },
    {
        "source": "frontend",
        "data": {
            "structured_type": "structured",
            "mapping_index": 5,
            "section_id": "6dc9d13b-732a-4db9-a0ad-dc1a1a1b021a",
            "detail_level": "medium"
        },
        "timestamp": "2025-08-19 22:39:01.000",
        "event": "mapping_hover",
        "id": "xF2yMZsH3JPzjfGDWXqb"
    },
    {
        "source": "frontend",
        "data": {
            "edited_summary": "• Renders a div with a top margin\n• Displays a heading showing the company and ticker\n• Uses ResponsiveContainer to ensure the chart fits its parent\n• Renders a LineChart with:\n  ◦ X and Y axes, with the X axis using a custom date formatter\n  ◦ Tooltip and Legend components for interactivity\n  ◦ A monotone Line for price data, styled with a specific color and no dots\n  ◦ A red dashed ReferenceLine when current price data is available",
            "structured": "structured",
            "section_id": "6dc9d13b-732a-4db9-a0ad-dc1a1a1b021a",
            "detail_level": "medium",
            "original_summary": "• Renders a div with a top margin\n• Displays a heading showing the company and ticker\n• Uses ResponsiveContainer to ensure the chart fits its parent\n• Renders a LineChart with:\n  ◦ X and Y axes, with the X axis using a custom date formatter\n  ◦ Tooltip and Legend components for interactivity\n  ◦ A monotone Line for price data, styled with a specific color and no dots\n  ◦ A red dashed ReferenceLine labeled 'Current Price' when current price data is available"
        },
        "timestamp": "2025-08-19 22:39:18.000",
        "event": "commit_modified_summary",
        "id": "lPCWfdk7J94DFamWmqcY"
    },
    {
        "source": "backend",
        "data": {
            "edited_summary": "• Renders a div with a top margin\n• Displays a heading showing the company and ticker\n• Uses ResponsiveContainer to ensure the chart fits its parent\n• Renders a LineChart with:\n  ◦ X and Y axes, with the X axis using a custom date formatter\n  ◦ Tooltip and Legend components for interactivity\n  ◦ A monotone Line for price data, styled with a specific color and no dots\n  ◦ A red dashed ReferenceLine when current price data is available",
            "structured_type": "structured",
            "updated_code": "<div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatDateString} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n          {data.currentPrice !== undefined && (\n            <ReferenceLine\n              y={data.currentPrice}\n              stroke=\"red\"\n              strokeDasharray=\"5 5\"\n            />\n          )}\n        </LineChart>\n      </ResponsiveContainer>\n    </div>",
            "original_code": "<div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatDateString} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n          {data.currentPrice !== undefined && (\n            <ReferenceLine\n              y={data.currentPrice}\n              stroke=\"red\"\n              strokeDasharray=\"5 5\"\n              label={{ value: \"Current Price\", position: \"right\", fill: \"red\" }}\n            />\n          )}\n        </LineChart>\n      </ResponsiveContainer>\n    </div>",
            "detail_level": "medium",
            "original_summary": "• Renders a div with a top margin\n• Displays a heading showing the company and ticker\n• Uses ResponsiveContainer to ensure the chart fits its parent\n• Renders a LineChart with:\n  ◦ X and Y axes, with the X axis using a custom date formatter\n  ◦ Tooltip and Legend components for interactivity\n  ◦ A monotone Line for price data, styled with a specific color and no dots\n  ◦ A red dashed ReferenceLine labeled 'Current Price' when current price data is available"
        },
        "timestamp": "2025-08-19 22:39:20.000",
        "event": "modify_summary_mediation",
        "id": "ofZjwIBV6AfsNM0P8nj7"
    },
    {
        "source": "backend",
        "data": {
            "new_code": "<div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatDateString} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n          {data.currentPrice !== undefined && (\n            <ReferenceLine\n              y={data.currentPrice}\n              stroke=\"red\"\n              strokeDasharray=\"5 5\"\n            />\n          )}\n        </LineChart>\n      </ResponsiveContainer>\n    </div>",
            "new_summary": {
                "medium_unstructured": "This snippet displays a stock chart within a styled div, including a heading with the company name and ticker symbol. It uses a responsive container to render a line chart with axes, tooltips, a legend, and a line representing price data. In addition, the chart visually highlights the current price with a red dashed reference line when current price data is present, but the reference line is now shown without a label.",
                "title": "Stock Chart Rendering Component Section with Current Price Reference Line (Label Removed)",
                "low_unstructured": "This code renders a styled stock chart with a title and a line graph, and now displays a red dashed reference line at the current price if available, but no longer includes a label for the reference line.",
                "low_structured": "• Renders a container with margin\n• Displays a heading with company and ticker\n• Shows a responsive line chart\n• Adds a red dashed reference line at the current price if current price data is provided, but the reference line no longer has a 'Current Price' label",
                "medium_structured": "• Renders a div with a top margin\n• Displays a heading showing the company and ticker\n• Uses ResponsiveContainer to ensure the chart fits its parent\n• Renders a LineChart with:\n  ◦ X and Y axes, with the X axis using a custom date formatter\n  ◦ Tooltip and Legend components for interactivity\n  ◦ A monotone Line for price data, styled with a specific color and no dots\n  ◦ A red dashed ReferenceLine is shown at the current price when data is available, but the 'Current Price' label has been removed",
                "high_unstructured": "This code creates a styled container that displays a heading with the company name and ticker symbol, followed by a responsive line chart. The chart is implemented using Recharts components, including LineChart, XAxis, YAxis, Tooltip, Legend, and Line, all wrapped in a ResponsiveContainer set to a fixed height and full width. The X axis uses a custom date formatter, and the Y axis automatically scales to the data. The price data is plotted as a smooth monotone line without dots, and the chart includes interactive tooltip and legend features for better data interpretation. Additionally, when current price data is provided, a red dashed reference line is drawn at the corresponding value for visual emphasis, but this reference line no longer includes a 'Current Price' label.",
                "high_structured": "• Renders a div with a top margin for spacing\n• Displays a heading with the company name and ticker symbol\n• Embeds a ResponsiveContainer to make the chart adapt to its parent width and a fixed height\n• Inside the container, renders a LineChart with:\n  ◦ Data provided by chartData\n  ◦ Custom margins for layout control\n  ◦ XAxis configured to use the 'date' key and a custom tick formatter for month display\n  ◦ YAxis set to automatically scale based on data\n  ◦ Tooltip component for interactive data display on hover\n  ◦ Legend component for identifying chart elements\n  ◦ A monotone Line that plots 'price' values, styled with a specific stroke color and dots disabled for a cleaner look\n  ◦ A red dashed ReferenceLine is added at the current price when data is present, but the 'Current Price' label has been removed from the reference line"
            },
            "original_code": "<div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatDateString} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n          {data.currentPrice !== undefined && (\n            <ReferenceLine\n              y={data.currentPrice}\n              stroke=\"red\"\n              strokeDasharray=\"5 5\"\n            />\n          )}\n        </LineChart>\n      </ResponsiveContainer>\n    </div>",
            "old_summary": {
                "medium_unstructured": "This snippet displays a stock chart within a styled div, including a heading with the company name and ticker symbol. It uses a responsive container to render a line chart with axes, tooltips, a legend, and a line representing price data. In addition, the chart now visually highlights the current price with a red dashed reference line and label when current price data is present.",
                "title": "Stock Chart Rendering Component Section with Current Price Reference Line",
                "low_unstructured": "This code renders a styled stock chart with a title and a line graph, and now also displays a red dashed reference line at the current price if available.",
                "low_structured": "• Renders a container with margin\n• Displays a heading with company and ticker\n• Shows a responsive line chart\n• Adds a red dashed reference line labeled 'Current Price' if current price data is provided",
                "medium_structured": "• Renders a div with a top margin\n• Displays a heading showing the company and ticker\n• Uses ResponsiveContainer to ensure the chart fits its parent\n• Renders a LineChart with:\n  ◦ X and Y axes, with the X axis using a custom date formatter\n  ◦ Tooltip and Legend components for interactivity\n  ◦ A monotone Line for price data, styled with a specific color and no dots\n  ◦ A red dashed ReferenceLine labeled 'Current Price' when current price data is available",
                "high_unstructured": "This code creates a styled container that displays a heading with the company name and ticker symbol, followed by a responsive line chart. The chart is implemented using Recharts components, including LineChart, XAxis, YAxis, Tooltip, Legend, and Line, all wrapped in a ResponsiveContainer set to a fixed height and full width. The X axis uses a custom date formatter, and the Y axis automatically scales to the data. The price data is plotted as a smooth monotone line without dots, and the chart includes interactive tooltip and legend features for better data interpretation. Additionally, when current price data is provided, a red dashed reference line labeled 'Current Price' is drawn at the corresponding value for visual emphasis.",
                "high_structured": "• Renders a div with a top margin for spacing\n• Displays a heading with the company name and ticker symbol\n• Embeds a ResponsiveContainer to make the chart adapt to its parent width and a fixed height\n• Inside the container, renders a LineChart with:\n  ◦ Data provided by chartData\n  ◦ Custom margins for layout control\n  ◦ XAxis configured to use the 'date' key and a custom tick formatter for month display\n  ◦ YAxis set to automatically scale based on data\n  ◦ Tooltip component for interactive data display on hover\n  ◦ Legend component for identifying chart elements\n  ◦ A monotone Line that plots 'price' values, styled with a specific stroke color and dots disabled for a cleaner look\n  ◦ A red dashed ReferenceLine with a 'Current Price' label is added when current price data is present"
            }
        },
        "timestamp": "2025-08-19 22:39:27.000",
        "event": "summarize_modified_code",
        "id": "t1DWvZa0zac7GS1EoyuH"
    },
    {
        "source": "backend",
        "data": {
            "code": "48: <div style={{ marginTop: \"2rem\" }}>\n49:       <h3>\n50:         {company} ({ticker})\n51:       </h3>\n52:       <ResponsiveContainer width=\"100%\" height={300}>\n53:         <LineChart\n54:           data={chartData}\n55:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n56:         >\n57:           <XAxis dataKey=\"date\" tickFormatter={formatDateString} />\n58:           <YAxis domain={[\"auto\", \"auto\"]} />\n59:           <Tooltip />\n60:           <Legend />\n61:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n62:           {data.currentPrice !== undefined && (\n63:             <ReferenceLine\n64:               y={data.currentPrice}\n65:               stroke=\"red\"\n66:               strokeDasharray=\"5 5\"\n67:             />\n68:           )}\n69:         </LineChart>\n70:       </ResponsiveContainer>\n71:     </div>",
            "summary": "• Renders a container with margin\n• Displays a heading with company and ticker\n• Shows a responsive line chart\n• Adds a red dashed reference line at the current price if current price data is provided, but the reference line no longer has a 'Current Price' label",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "<div style={{ marginTop: \"2rem\" }}>",
                            "line": 48
                        }
                    ],
                    "summaryComponent": "Renders a container with margin"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<h3>",
                            "line": 49
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 50
                        }
                    ],
                    "summaryComponent": "Displays a heading with company and ticker"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 52
                        },
                        {
                            "code": "<LineChart",
                            "line": 53
                        }
                    ],
                    "summaryComponent": "Shows a responsive line chart"
                },
                {
                    "codeSegments": [
                        {
                            "code": "{data.currentPrice !== undefined && (",
                            "line": 62
                        },
                        {
                            "code": "<ReferenceLine",
                            "line": 63
                        },
                        {
                            "code": "y={data.currentPrice}",
                            "line": 64
                        },
                        {
                            "code": "stroke=\"red\"",
                            "line": 65
                        },
                        {
                            "code": "strokeDasharray=\"5 5\"",
                            "line": 66
                        }
                    ],
                    "summaryComponent": "Adds a red dashed reference line at the current price if current price data is provided, but the reference line no longer has a 'Current Price' label"
                }
            ]
        },
        "timestamp": "2025-08-19 22:39:29.000",
        "event": "map_summary_code",
        "id": "SY4nki84VyLmXKRV7Ya6"
    },
    {
        "source": "backend",
        "data": {
            "code": "48: <div style={{ marginTop: \"2rem\" }}>\n49:       <h3>\n50:         {company} ({ticker})\n51:       </h3>\n52:       <ResponsiveContainer width=\"100%\" height={300}>\n53:         <LineChart\n54:           data={chartData}\n55:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n56:         >\n57:           <XAxis dataKey=\"date\" tickFormatter={formatDateString} />\n58:           <YAxis domain={[\"auto\", \"auto\"]} />\n59:           <Tooltip />\n60:           <Legend />\n61:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n62:           {data.currentPrice !== undefined && (\n63:             <ReferenceLine\n64:               y={data.currentPrice}\n65:               stroke=\"red\"\n66:               strokeDasharray=\"5 5\"\n67:             />\n68:           )}\n69:         </LineChart>\n70:       </ResponsiveContainer>\n71:     </div>",
            "summary": "This code renders a styled stock chart with a title and a line graph, and now displays a red dashed reference line at the current price if available, but no longer includes a label for the reference line.",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "<div style={{ marginTop: \"2rem\" }}>",
                            "line": 48
                        },
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 52
                        },
                        {
                            "code": "<LineChart",
                            "line": 53
                        }
                    ],
                    "summaryComponent": "renders a styled stock chart"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<h3>",
                            "line": 49
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 50
                        }
                    ],
                    "summaryComponent": "with a title"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 61
                        }
                    ],
                    "summaryComponent": "and a line graph"
                },
                {
                    "codeSegments": [
                        {
                            "code": "{data.currentPrice !== undefined && (",
                            "line": 62
                        },
                        {
                            "code": "<ReferenceLine",
                            "line": 63
                        },
                        {
                            "code": "y={data.currentPrice}",
                            "line": 64
                        },
                        {
                            "code": "stroke=\"red\"",
                            "line": 65
                        },
                        {
                            "code": "strokeDasharray=\"5 5\"",
                            "line": 66
                        }
                    ],
                    "summaryComponent": "now displays a red dashed reference line at the current price if available"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<ReferenceLine",
                            "line": 63
                        }
                    ],
                    "summaryComponent": "but no longer includes a label for the reference line"
                }
            ]
        },
        "timestamp": "2025-08-19 22:39:30.000",
        "event": "map_summary_code",
        "id": "Arkt8UIlVGW8FlV7Ia4n"
    },
    {
        "source": "backend",
        "data": {
            "code": "48: <div style={{ marginTop: \"2rem\" }}>\n49:       <h3>\n50:         {company} ({ticker})\n51:       </h3>\n52:       <ResponsiveContainer width=\"100%\" height={300}>\n53:         <LineChart\n54:           data={chartData}\n55:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n56:         >\n57:           <XAxis dataKey=\"date\" tickFormatter={formatDateString} />\n58:           <YAxis domain={[\"auto\", \"auto\"]} />\n59:           <Tooltip />\n60:           <Legend />\n61:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n62:           {data.currentPrice !== undefined && (\n63:             <ReferenceLine\n64:               y={data.currentPrice}\n65:               stroke=\"red\"\n66:               strokeDasharray=\"5 5\"\n67:             />\n68:           )}\n69:         </LineChart>\n70:       </ResponsiveContainer>\n71:     </div>",
            "summary": "• Renders a div with a top margin for spacing\n• Displays a heading with the company name and ticker symbol\n• Embeds a ResponsiveContainer to make the chart adapt to its parent width and a fixed height\n• Inside the container, renders a LineChart with:\n  ◦ Data provided by chartData\n  ◦ Custom margins for layout control\n  ◦ XAxis configured to use the 'date' key and a custom tick formatter for month display\n  ◦ YAxis set to automatically scale based on data\n  ◦ Tooltip component for interactive data display on hover\n  ◦ Legend component for identifying chart elements\n  ◦ A monotone Line that plots 'price' values, styled with a specific stroke color and dots disabled for a cleaner look\n  ◦ A red dashed ReferenceLine is added at the current price when data is present, but the 'Current Price' label has been removed from the reference line",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "<div style={{ marginTop: \"2rem\" }}>",
                            "line": 48
                        }
                    ],
                    "summaryComponent": "Renders a div with a top margin for spacing"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<h3>",
                            "line": 49
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 50
                        }
                    ],
                    "summaryComponent": "Displays a heading with the company name and ticker symbol"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 52
                        }
                    ],
                    "summaryComponent": "Embeds a ResponsiveContainer to make the chart adapt to its parent width and a fixed height"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<LineChart",
                            "line": 53
                        }
                    ],
                    "summaryComponent": "Inside the container, renders a LineChart with:"
                },
                {
                    "codeSegments": [
                        {
                            "code": "data={chartData}",
                            "line": 54
                        }
                    ],
                    "summaryComponent": "Data provided by chartData"
                },
                {
                    "codeSegments": [
                        {
                            "code": "margin={{ top: 10, right: 30, left: 0, bottom: 0 }}",
                            "line": 55
                        }
                    ],
                    "summaryComponent": "Custom margins for layout control"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                            "line": 57
                        }
                    ],
                    "summaryComponent": "XAxis configured to use the 'date' key and a custom tick formatter for month display"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                            "line": 58
                        }
                    ],
                    "summaryComponent": "YAxis set to automatically scale based on data"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<Tooltip />",
                            "line": 59
                        }
                    ],
                    "summaryComponent": "Tooltip component for interactive data display on hover"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<Legend />",
                            "line": 60
                        }
                    ],
                    "summaryComponent": "Legend component for identifying chart elements"
                }
            ]
        },
        "timestamp": "2025-08-19 22:39:30.000",
        "event": "map_summary_code",
        "id": "xfK0xTtiVJSjTojWgoZb"
    },
    {
        "source": "backend",
        "data": {
            "code": "48: <div style={{ marginTop: \"2rem\" }}>\n49:       <h3>\n50:         {company} ({ticker})\n51:       </h3>\n52:       <ResponsiveContainer width=\"100%\" height={300}>\n53:         <LineChart\n54:           data={chartData}\n55:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n56:         >\n57:           <XAxis dataKey=\"date\" tickFormatter={formatDateString} />\n58:           <YAxis domain={[\"auto\", \"auto\"]} />\n59:           <Tooltip />\n60:           <Legend />\n61:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n62:           {data.currentPrice !== undefined && (\n63:             <ReferenceLine\n64:               y={data.currentPrice}\n65:               stroke=\"red\"\n66:               strokeDasharray=\"5 5\"\n67:             />\n68:           )}\n69:         </LineChart>\n70:       </ResponsiveContainer>\n71:     </div>",
            "summary": "• Renders a div with a top margin\n• Displays a heading showing the company and ticker\n• Uses ResponsiveContainer to ensure the chart fits its parent\n• Renders a LineChart with:\n  ◦ X and Y axes, with the X axis using a custom date formatter\n  ◦ Tooltip and Legend components for interactivity\n  ◦ A monotone Line for price data, styled with a specific color and no dots\n  ◦ A red dashed ReferenceLine is shown at the current price when data is available, but the 'Current Price' label has been removed",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "<div style={{ marginTop: \"2rem\" }}>",
                            "line": 48
                        }
                    ],
                    "summaryComponent": "Renders a div with a top margin"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<h3>",
                            "line": 49
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 50
                        }
                    ],
                    "summaryComponent": "Displays a heading showing the company and ticker"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 52
                        }
                    ],
                    "summaryComponent": "Uses ResponsiveContainer to ensure the chart fits its parent"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<LineChart",
                            "line": 53
                        }
                    ],
                    "summaryComponent": "Renders a LineChart with:"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                            "line": 57
                        },
                        {
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                            "line": 58
                        }
                    ],
                    "summaryComponent": "X and Y axes, with the X axis using a custom date formatter"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<Tooltip />",
                            "line": 59
                        },
                        {
                            "code": "<Legend />",
                            "line": 60
                        }
                    ],
                    "summaryComponent": "Tooltip and Legend components for interactivity"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 61
                        }
                    ],
                    "summaryComponent": "A monotone Line for price data, styled with a specific color and no dots"
                },
                {
                    "codeSegments": [
                        {
                            "code": "{data.currentPrice !== undefined && (",
                            "line": 62
                        },
                        {
                            "code": "<ReferenceLine",
                            "line": 63
                        },
                        {
                            "code": "y={data.currentPrice}",
                            "line": 64
                        },
                        {
                            "code": "stroke=\"red\"",
                            "line": 65
                        },
                        {
                            "code": "strokeDasharray=\"5 5\"",
                            "line": 66
                        }
                    ],
                    "summaryComponent": "A red dashed ReferenceLine is shown at the current price when data is available, but the 'Current Price' label has been removed"
                }
            ]
        },
        "timestamp": "2025-08-19 22:39:31.000",
        "event": "map_summary_code",
        "id": "ID9ISjc5ko45jRedlOeb"
    },
    {
        "source": "backend",
        "data": {
            "code": "48: <div style={{ marginTop: \"2rem\" }}>\n49:       <h3>\n50:         {company} ({ticker})\n51:       </h3>\n52:       <ResponsiveContainer width=\"100%\" height={300}>\n53:         <LineChart\n54:           data={chartData}\n55:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n56:         >\n57:           <XAxis dataKey=\"date\" tickFormatter={formatDateString} />\n58:           <YAxis domain={[\"auto\", \"auto\"]} />\n59:           <Tooltip />\n60:           <Legend />\n61:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n62:           {data.currentPrice !== undefined && (\n63:             <ReferenceLine\n64:               y={data.currentPrice}\n65:               stroke=\"red\"\n66:               strokeDasharray=\"5 5\"\n67:             />\n68:           )}\n69:         </LineChart>\n70:       </ResponsiveContainer>\n71:     </div>",
            "summary": "This snippet displays a stock chart within a styled div, including a heading with the company name and ticker symbol. It uses a responsive container to render a line chart with axes, tooltips, a legend, and a line representing price data. In addition, the chart visually highlights the current price with a red dashed reference line when current price data is present, but the reference line is now shown without a label.",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "<div style={{ marginTop: \"2rem\" }}>",
                            "line": 48
                        }
                    ],
                    "summaryComponent": "displays a stock chart within a styled div"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<h3>",
                            "line": 49
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 50
                        }
                    ],
                    "summaryComponent": "including a heading with the company name and ticker symbol"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 52
                        }
                    ],
                    "summaryComponent": "uses a responsive container"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<LineChart",
                            "line": 53
                        }
                    ],
                    "summaryComponent": "to render a line chart"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                            "line": 57
                        },
                        {
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                            "line": 58
                        }
                    ],
                    "summaryComponent": "with axes"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<Tooltip />",
                            "line": 59
                        }
                    ],
                    "summaryComponent": "tooltips"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<Legend />",
                            "line": 60
                        }
                    ],
                    "summaryComponent": "a legend"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 61
                        }
                    ],
                    "summaryComponent": "a line representing price data"
                },
                {
                    "codeSegments": [
                        {
                            "code": "{data.currentPrice !== undefined && (",
                            "line": 62
                        },
                        {
                            "code": "<ReferenceLine",
                            "line": 63
                        },
                        {
                            "code": "y={data.currentPrice}",
                            "line": 64
                        },
                        {
                            "code": "stroke=\"red\"",
                            "line": 65
                        },
                        {
                            "code": "strokeDasharray=\"5 5\"",
                            "line": 66
                        }
                    ],
                    "summaryComponent": "the chart visually highlights the current price with a red dashed reference line when current price data is present"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<ReferenceLine",
                            "line": 63
                        }
                    ],
                    "summaryComponent": "the reference line is now shown without a label"
                }
            ]
        },
        "timestamp": "2025-08-19 22:39:31.000",
        "event": "map_summary_code",
        "id": "v2hrdhcmtdmmZBCUEiF7"
    },
    {
        "source": "backend",
        "data": {
            "code": "48: <div style={{ marginTop: \"2rem\" }}>\n49:       <h3>\n50:         {company} ({ticker})\n51:       </h3>\n52:       <ResponsiveContainer width=\"100%\" height={300}>\n53:         <LineChart\n54:           data={chartData}\n55:           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n56:         >\n57:           <XAxis dataKey=\"date\" tickFormatter={formatDateString} />\n58:           <YAxis domain={[\"auto\", \"auto\"]} />\n59:           <Tooltip />\n60:           <Legend />\n61:           <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n62:           {data.currentPrice !== undefined && (\n63:             <ReferenceLine\n64:               y={data.currentPrice}\n65:               stroke=\"red\"\n66:               strokeDasharray=\"5 5\"\n67:             />\n68:           )}\n69:         </LineChart>\n70:       </ResponsiveContainer>\n71:     </div>",
            "summary": "This code creates a styled container that displays a heading with the company name and ticker symbol, followed by a responsive line chart. The chart is implemented using Recharts components, including LineChart, XAxis, YAxis, Tooltip, Legend, and Line, all wrapped in a ResponsiveContainer set to a fixed height and full width. The X axis uses a custom date formatter, and the Y axis automatically scales to the data. The price data is plotted as a smooth monotone line without dots, and the chart includes interactive tooltip and legend features for better data interpretation. Additionally, when current price data is provided, a red dashed reference line is drawn at the corresponding value for visual emphasis, but this reference line no longer includes a 'Current Price' label.",
            "mapping": [
                {
                    "codeSegments": [
                        {
                            "code": "<div style={{ marginTop: \"2rem\" }}>",
                            "line": 48
                        }
                    ],
                    "summaryComponent": "a styled container"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<h3>",
                            "line": 49
                        },
                        {
                            "code": "{company} ({ticker})",
                            "line": 50
                        }
                    ],
                    "summaryComponent": "displays a heading with the company name and ticker symbol"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 52
                        },
                        {
                            "code": "<LineChart",
                            "line": 53
                        }
                    ],
                    "summaryComponent": "a responsive line chart"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<LineChart",
                            "line": 53
                        },
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                            "line": 57
                        },
                        {
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                            "line": 58
                        },
                        {
                            "code": "<Tooltip />",
                            "line": 59
                        },
                        {
                            "code": "<Legend />",
                            "line": 60
                        },
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 61
                        }
                    ],
                    "summaryComponent": "implemented using Recharts components, including LineChart, XAxis, YAxis, Tooltip, Legend, and Line"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                            "line": 52
                        }
                    ],
                    "summaryComponent": "all wrapped in a ResponsiveContainer set to a fixed height and full width"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                            "line": 57
                        }
                    ],
                    "summaryComponent": "The X axis uses a custom date formatter"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                            "line": 58
                        }
                    ],
                    "summaryComponent": "the Y axis automatically scales to the data"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                            "line": 61
                        }
                    ],
                    "summaryComponent": "The price data is plotted as a smooth monotone line without dots"
                },
                {
                    "codeSegments": [
                        {
                            "code": "<Tooltip />",
                            "line": 59
                        },
                        {
                            "code": "<Legend />",
                            "line": 60
                        }
                    ],
                    "summaryComponent": "the chart includes interactive tooltip and legend features for better data interpretation"
                },
                {
                    "codeSegments": [
                        {
                            "code": "{data.currentPrice !== undefined && (",
                            "line": 62
                        },
                        {
                            "code": "<ReferenceLine",
                            "line": 63
                        },
                        {
                            "code": "y={data.currentPrice}",
                            "line": 64
                        },
                        {
                            "code": "stroke=\"red\"",
                            "line": 65
                        },
                        {
                            "code": "strokeDasharray=\"5 5\"",
                            "line": 66
                        }
                    ],
                    "summaryComponent": "when current price data is provided, a red dashed reference line is drawn at the corresponding value for visual emphasis, but this reference line no longer includes a 'Current Price' label"
                }
            ]
        },
        "timestamp": "2025-08-19 22:39:32.000",
        "event": "map_summary_code",
        "id": "1x8IwIAz3Jpv8YkHybwI"
    },
    {
        "source": "frontend",
        "data": {
            "before_section_id": "6dc9d13b-732a-4db9-a0ad-dc1a1a1b021a",
            "after_section_id": "aa936441-5bf3-4a7a-ac56-91446176625a"
        },
        "timestamp": "2025-08-19 22:39:32.000",
        "event": "autotransit_section",
        "id": "QToEEH4QwdlVvGhRVdKQ"
    },
    {
        "source": "frontend",
        "data": {
            "section_id": "aa936441-5bf3-4a7a-ac56-91446176625a",
            "section_data": {
                "selectedStructured": "unstructured",
                "lines": [
                    48,
                    71
                ],
                "title": "Stock Chart Rendering Component Section with Current Price Reference Line (Label Removed)",
                "selectedDetailLevel": "medium",
                "summaryMappings": {
                    "medium_unstructured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "<div style={{ marginTop: \"2rem\" }}>",
                                    "line": 48
                                }
                            ],
                            "summaryComponent": "displays a stock chart within a styled div"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<h3>",
                                    "line": 49
                                },
                                {
                                    "code": "{company} ({ticker})",
                                    "line": 50
                                }
                            ],
                            "summaryComponent": "including a heading with the company name and ticker symbol"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 52
                                }
                            ],
                            "summaryComponent": "uses a responsive container"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<LineChart",
                                    "line": 53
                                }
                            ],
                            "summaryComponent": "to render a line chart"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                                    "line": 57
                                },
                                {
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                                    "line": 58
                                }
                            ],
                            "summaryComponent": "with axes"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<Tooltip />",
                                    "line": 59
                                }
                            ],
                            "summaryComponent": "tooltips"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<Legend />",
                                    "line": 60
                                }
                            ],
                            "summaryComponent": "a legend"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 61
                                }
                            ],
                            "summaryComponent": "a line representing price data"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "{data.currentPrice !== undefined && (",
                                    "line": 62
                                },
                                {
                                    "code": "<ReferenceLine",
                                    "line": 63
                                },
                                {
                                    "code": "y={data.currentPrice}",
                                    "line": 64
                                },
                                {
                                    "code": "stroke=\"red\"",
                                    "line": 65
                                },
                                {
                                    "code": "strokeDasharray=\"5 5\"",
                                    "line": 66
                                }
                            ],
                            "summaryComponent": "the chart visually highlights the current price with a red dashed reference line when current price data is present"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<ReferenceLine",
                                    "line": 63
                                }
                            ],
                            "summaryComponent": "the reference line is now shown without a label"
                        }
                    ],
                    "high_unstructured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "<div style={{ marginTop: \"2rem\" }}>",
                                    "line": 48
                                }
                            ],
                            "summaryComponent": "a styled container"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<h3>",
                                    "line": 49
                                },
                                {
                                    "code": "{company} ({ticker})",
                                    "line": 50
                                }
                            ],
                            "summaryComponent": "displays a heading with the company name and ticker symbol"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 52
                                },
                                {
                                    "code": "<LineChart",
                                    "line": 53
                                }
                            ],
                            "summaryComponent": "a responsive line chart"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<LineChart",
                                    "line": 53
                                },
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                                    "line": 57
                                },
                                {
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                                    "line": 58
                                },
                                {
                                    "code": "<Tooltip />",
                                    "line": 59
                                },
                                {
                                    "code": "<Legend />",
                                    "line": 60
                                },
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 61
                                }
                            ],
                            "summaryComponent": "implemented using Recharts components, including LineChart, XAxis, YAxis, Tooltip, Legend, and Line"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 52
                                }
                            ],
                            "summaryComponent": "all wrapped in a ResponsiveContainer set to a fixed height and full width"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                                    "line": 57
                                }
                            ],
                            "summaryComponent": "The X axis uses a custom date formatter"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                                    "line": 58
                                }
                            ],
                            "summaryComponent": "the Y axis automatically scales to the data"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 61
                                }
                            ],
                            "summaryComponent": "The price data is plotted as a smooth monotone line without dots"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<Tooltip />",
                                    "line": 59
                                },
                                {
                                    "code": "<Legend />",
                                    "line": 60
                                }
                            ],
                            "summaryComponent": "the chart includes interactive tooltip and legend features for better data interpretation"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "{data.currentPrice !== undefined && (",
                                    "line": 62
                                },
                                {
                                    "code": "<ReferenceLine",
                                    "line": 63
                                },
                                {
                                    "code": "y={data.currentPrice}",
                                    "line": 64
                                },
                                {
                                    "code": "stroke=\"red\"",
                                    "line": 65
                                },
                                {
                                    "code": "strokeDasharray=\"5 5\"",
                                    "line": 66
                                }
                            ],
                            "summaryComponent": "when current price data is provided, a red dashed reference line is drawn at the corresponding value for visual emphasis, but this reference line no longer includes a 'Current Price' label"
                        }
                    ],
                    "low_unstructured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "<div style={{ marginTop: \"2rem\" }}>",
                                    "line": 48
                                },
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 52
                                },
                                {
                                    "code": "<LineChart",
                                    "line": 53
                                }
                            ],
                            "summaryComponent": "renders a styled stock chart"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<h3>",
                                    "line": 49
                                },
                                {
                                    "code": "{company} ({ticker})",
                                    "line": 50
                                }
                            ],
                            "summaryComponent": "with a title"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 61
                                }
                            ],
                            "summaryComponent": "and a line graph"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "{data.currentPrice !== undefined && (",
                                    "line": 62
                                },
                                {
                                    "code": "<ReferenceLine",
                                    "line": 63
                                },
                                {
                                    "code": "y={data.currentPrice}",
                                    "line": 64
                                },
                                {
                                    "code": "stroke=\"red\"",
                                    "line": 65
                                },
                                {
                                    "code": "strokeDasharray=\"5 5\"",
                                    "line": 66
                                }
                            ],
                            "summaryComponent": "now displays a red dashed reference line at the current price if available"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<ReferenceLine",
                                    "line": 63
                                }
                            ],
                            "summaryComponent": "but no longer includes a label for the reference line"
                        }
                    ],
                    "low_structured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "<div style={{ marginTop: \"2rem\" }}>",
                                    "line": 48
                                }
                            ],
                            "summaryComponent": "Renders a container with margin"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<h3>",
                                    "line": 49
                                },
                                {
                                    "code": "{company} ({ticker})",
                                    "line": 50
                                }
                            ],
                            "summaryComponent": "Displays a heading with company and ticker"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 52
                                },
                                {
                                    "code": "<LineChart",
                                    "line": 53
                                }
                            ],
                            "summaryComponent": "Shows a responsive line chart"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "{data.currentPrice !== undefined && (",
                                    "line": 62
                                },
                                {
                                    "code": "<ReferenceLine",
                                    "line": 63
                                },
                                {
                                    "code": "y={data.currentPrice}",
                                    "line": 64
                                },
                                {
                                    "code": "stroke=\"red\"",
                                    "line": 65
                                },
                                {
                                    "code": "strokeDasharray=\"5 5\"",
                                    "line": 66
                                }
                            ],
                            "summaryComponent": "Adds a red dashed reference line at the current price if current price data is provided, but the reference line no longer has a 'Current Price' label"
                        }
                    ],
                    "medium_structured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "<div style={{ marginTop: \"2rem\" }}>",
                                    "line": 48
                                }
                            ],
                            "summaryComponent": "Renders a div with a top margin"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<h3>",
                                    "line": 49
                                },
                                {
                                    "code": "{company} ({ticker})",
                                    "line": 50
                                }
                            ],
                            "summaryComponent": "Displays a heading showing the company and ticker"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 52
                                }
                            ],
                            "summaryComponent": "Uses ResponsiveContainer to ensure the chart fits its parent"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<LineChart",
                                    "line": 53
                                }
                            ],
                            "summaryComponent": "Renders a LineChart with:"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                                    "line": 57
                                },
                                {
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                                    "line": 58
                                }
                            ],
                            "summaryComponent": "X and Y axes, with the X axis using a custom date formatter"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<Tooltip />",
                                    "line": 59
                                },
                                {
                                    "code": "<Legend />",
                                    "line": 60
                                }
                            ],
                            "summaryComponent": "Tooltip and Legend components for interactivity"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />",
                                    "line": 61
                                }
                            ],
                            "summaryComponent": "A monotone Line for price data, styled with a specific color and no dots"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "{data.currentPrice !== undefined && (",
                                    "line": 62
                                },
                                {
                                    "code": "<ReferenceLine",
                                    "line": 63
                                },
                                {
                                    "code": "y={data.currentPrice}",
                                    "line": 64
                                },
                                {
                                    "code": "stroke=\"red\"",
                                    "line": 65
                                },
                                {
                                    "code": "strokeDasharray=\"5 5\"",
                                    "line": 66
                                }
                            ],
                            "summaryComponent": "A red dashed ReferenceLine is shown at the current price when data is available, but the 'Current Price' label has been removed"
                        }
                    ],
                    "high_structured": [
                        {
                            "codeSegments": [
                                {
                                    "code": "<div style={{ marginTop: \"2rem\" }}>",
                                    "line": 48
                                }
                            ],
                            "summaryComponent": "Renders a div with a top margin for spacing"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<h3>",
                                    "line": 49
                                },
                                {
                                    "code": "{company} ({ticker})",
                                    "line": 50
                                }
                            ],
                            "summaryComponent": "Displays a heading with the company name and ticker symbol"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<ResponsiveContainer width=\"100%\" height={300}>",
                                    "line": 52
                                }
                            ],
                            "summaryComponent": "Embeds a ResponsiveContainer to make the chart adapt to its parent width and a fixed height"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<LineChart",
                                    "line": 53
                                }
                            ],
                            "summaryComponent": "Inside the container, renders a LineChart with:"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "data={chartData}",
                                    "line": 54
                                }
                            ],
                            "summaryComponent": "Data provided by chartData"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "margin={{ top: 10, right: 30, left: 0, bottom: 0 }}",
                                    "line": 55
                                }
                            ],
                            "summaryComponent": "Custom margins for layout control"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<XAxis dataKey=\"date\" tickFormatter={formatDateString} />",
                                    "line": 57
                                }
                            ],
                            "summaryComponent": "XAxis configured to use the 'date' key and a custom tick formatter for month display"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<YAxis domain={[\"auto\", \"auto\"]} />",
                                    "line": 58
                                }
                            ],
                            "summaryComponent": "YAxis set to automatically scale based on data"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<Tooltip />",
                                    "line": 59
                                }
                            ],
                            "summaryComponent": "Tooltip component for interactive data display on hover"
                        },
                        {
                            "codeSegments": [
                                {
                                    "code": "<Legend />",
                                    "line": 60
                                }
                            ],
                            "summaryComponent": "Legend component for identifying chart elements"
                        }
                    ]
                },
                "editPromptStructured": null,
                "createdAt": 1755628772000,
                "editPromptValue": "",
                "oldSummaryData": {
                    "medium_unstructured": "This snippet displays a stock chart within a styled div, including a heading with the company name and ticker symbol. It uses a responsive container to render a line chart with axes, tooltips, a legend, and a line representing price data. In addition, the chart now visually highlights the current price with a red dashed reference line and label when current price data is present.",
                    "title": "Stock Chart Rendering Component Section with Current Price Reference Line",
                    "low_unstructured": "This code renders a styled stock chart with a title and a line graph, and now also displays a red dashed reference line at the current price if available.",
                    "low_structured": "• Renders a container with margin\n• Displays a heading with company and ticker\n• Shows a responsive line chart\n• Adds a red dashed reference line labeled 'Current Price' if current price data is provided",
                    "medium_structured": "• Renders a div with a top margin\n• Displays a heading showing the company and ticker\n• Uses ResponsiveContainer to ensure the chart fits its parent\n• Renders a LineChart with:\n  ◦ X and Y axes, with the X axis using a custom date formatter\n  ◦ Tooltip and Legend components for interactivity\n  ◦ A monotone Line for price data, styled with a specific color and no dots\n  ◦ A red dashed ReferenceLine labeled 'Current Price' when current price data is available",
                    "high_unstructured": "This code creates a styled container that displays a heading with the company name and ticker symbol, followed by a responsive line chart. The chart is implemented using Recharts components, including LineChart, XAxis, YAxis, Tooltip, Legend, and Line, all wrapped in a ResponsiveContainer set to a fixed height and full width. The X axis uses a custom date formatter, and the Y axis automatically scales to the data. The price data is plotted as a smooth monotone line without dots, and the chart includes interactive tooltip and legend features for better data interpretation. Additionally, when current price data is provided, a red dashed reference line labeled 'Current Price' is drawn at the corresponding value for visual emphasis.",
                    "high_structured": "• Renders a div with a top margin for spacing\n• Displays a heading with the company name and ticker symbol\n• Embeds a ResponsiveContainer to make the chart adapt to its parent width and a fixed height\n• Inside the container, renders a LineChart with:\n  ◦ Data provided by chartData\n  ◦ Custom margins for layout control\n  ◦ XAxis configured to use the 'date' key and a custom tick formatter for month display\n  ◦ YAxis set to automatically scale based on data\n  ◦ Tooltip component for interactive data display on hover\n  ◦ Legend component for identifying chart elements\n  ◦ A monotone Line that plots 'price' values, styled with a specific stroke color and dots disabled for a cleaner look\n  ◦ A red dashed ReferenceLine with a 'Current Price' label is added when current price data is present"
                },
                "editPromptDetailLevel": null,
                "summaryData": {
                    "medium_unstructured": "This snippet displays a stock chart within a styled div, including a heading with the company name and ticker symbol. It uses a responsive container to render a line chart with axes, tooltips, a legend, and a line representing price data. In addition, the chart visually highlights the current price with a red dashed reference line when current price data is present, but the reference line is now shown without a label.",
                    "title": "Stock Chart Rendering Component Section with Current Price Reference Line (Label Removed)",
                    "low_unstructured": "This code renders a styled stock chart with a title and a line graph, and now displays a red dashed reference line at the current price if available, but no longer includes a label for the reference line.",
                    "low_structured": "• Renders a container with margin\n• Displays a heading with company and ticker\n• Shows a responsive line chart\n• Adds a red dashed reference line at the current price if current price data is provided, but the reference line no longer has a 'Current Price' label",
                    "medium_structured": "• Renders a div with a top margin\n• Displays a heading showing the company and ticker\n• Uses ResponsiveContainer to ensure the chart fits its parent\n• Renders a LineChart with:\n  ◦ X and Y axes, with the X axis using a custom date formatter\n  ◦ Tooltip and Legend components for interactivity\n  ◦ A monotone Line for price data, styled with a specific color and no dots\n  ◦ A red dashed ReferenceLine is shown at the current price when data is available, but the 'Current Price' label has been removed",
                    "high_unstructured": "This code creates a styled container that displays a heading with the company name and ticker symbol, followed by a responsive line chart. The chart is implemented using Recharts components, including LineChart, XAxis, YAxis, Tooltip, Legend, and Line, all wrapped in a ResponsiveContainer set to a fixed height and full width. The X axis uses a custom date formatter, and the Y axis automatically scales to the data. The price data is plotted as a smooth monotone line without dots, and the chart includes interactive tooltip and legend features for better data interpretation. Additionally, when current price data is provided, a red dashed reference line is drawn at the corresponding value for visual emphasis, but this reference line no longer includes a 'Current Price' label.",
                    "high_structured": "• Renders a div with a top margin for spacing\n• Displays a heading with the company name and ticker symbol\n• Embeds a ResponsiveContainer to make the chart adapt to its parent width and a fixed height\n• Inside the container, renders a LineChart with:\n  ◦ Data provided by chartData\n  ◦ Custom margins for layout control\n  ◦ XAxis configured to use the 'date' key and a custom tick formatter for month display\n  ◦ YAxis set to automatically scale based on data\n  ◦ Tooltip component for interactive data display on hover\n  ◦ Legend component for identifying chart elements\n  ◦ A monotone Line that plots 'price' values, styled with a specific stroke color and dots disabled for a cleaner look\n  ◦ A red dashed ReferenceLine is added at the current price when data is present, but the 'Current Price' label has been removed from the reference line"
                },
                "metadata": {
                    "offset": 957,
                    "originalCode": "<div style={{ marginTop: \"2rem\" }}>\n      <h3>\n        {company} ({ticker})\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <XAxis dataKey=\"date\" tickFormatter={formatDateString} />\n          <YAxis domain={[\"auto\", \"auto\"]} />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" dot={false} />\n          {data.currentPrice !== undefined && (\n            <ReferenceLine\n              y={data.currentPrice}\n              stroke=\"red\"\n              strokeDasharray=\"5 5\"\n            />\n          )}\n        </LineChart>\n      </ResponsiveContainer>\n    </div>",
                    "fullPath": "/project/workspace/frontend/src/StockChart.jsx",
                    "id": "aa936441-5bf3-4a7a-ac56-91446176625a",
                    "filename": "StockChart.jsx"
                }
            }
        },
        "timestamp": "2025-08-19 22:39:32.000",
        "event": "create_new_section",
        "id": "yBifYjR4MY50cGekY69o"
    }
]