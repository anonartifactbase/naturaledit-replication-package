Participant,Category,Code,Segment
1,Future improvements for NaturalEdit,"Alternative representations (dependency graph, data flow) support comprehension beyond summaries","Exactly—maybe like a dependency graph, or a data flow representation. These are all different representations that can help people understand."
1,Adjustable granularity and structure,High granularity helps in understanding the details,"For example, if I want to know why a certain function returned None, then I need to go inside and check."
1,Future improvements for NaturalEdit,Multi-file support requires a structured overview and inter-code connections,"I think in cases like API calls—for example, when writing a function—sometimes you can just treat the function as a black box: all you need is its input/output and rough purpose, and that’s already helpful."
1,Adjustable granularity and structure,Order mismatches between the summary structure and code structure,"One thing I noticed: sometimes the mapping in the structured summary doesn’t align top-to-bottom with the code. For example, the last part of the summary might not actually correspond to the last part of the code. That mismatch happens sometimes."
1,Interactive mapping between summaries and code,Mapping helps to understand code more effectively,mapping is very useful too.
1,Auto-updated new summaries with diffs,Auto-updated new summaries maintain a consistent workflow,I think the ability to sync the summary automatically after direct edits is really useful.
1,Auto-updated new summaries with diffs,Low trust in the quality of the diffs,Mainly the golden-colored diff—it feels a bit uncontrolled.
1,Future improvements for NaturalEdit,Large projects have more complex logic and cross-file connections,"Yes, and when I make modifications, sometimes the necessary prompt or context is also in another file. Being able to connect those would make it easier to find the context when understanding the code."
1,Future improvements for NaturalEdit,Multi-file support requires a structured overview and inter-code connections,"I think it would be best if it could show relationships. For example, if I see a function in one file but its definition is in file B, then in the summary, when I come across that function, there could be a link or menu that lets me jump to file B. That way I can quickly understand what the function does—that would be helpful."
1,Interactive mapping between summaries and code,Mapping helps locate the modification points,you seemed to prefer using mapping to locate the point of modification. Even when the task was just a small local change—not editing the whole codebase or several files—you still tended to first pinpoint the exact location before modifying.
1,Modifiable code summaries for AI modification,Decisions about manually editing summaries depend on the simplicity of the modifications,"Not necessarily—it mainly depends on whichever feels easier. For visualization, I’d use direct instruction. But for deleting something, or changing a return value, I might directly modify the summary."
1,Applying edit instruction to the summary,The intermediate edited summary helps refine or clarify vague intent before editing,"Yes, that’s actually very helpful. Especially when I’m not yet clear about my intent, summaries help clarify it."
1,Applying edit instruction to the summary,The intermediate edited summary helps pre-validate code modifications with the developer’s intentions,"I thought the summary was helpful in that case. Because if I directly modified the code, I’d still need to do a code review to figure out which one was correct. And that requires re-understanding part of the code.
But if the summary directly tells me “higher is better,” then I immediately know."
1,Factors impacting system usability,Familiarity with code requires only direct instructions,"If I’m familiar with the codebase, I might just look at the structure directly, or if I already know where to change, I’ll just tell it to modify that part."
1,Factors impacting system usability,Familiarity with code requires only direct instructions,"But if I already know what the code is supposed to do, then I don’t need a summary. Especially for visualization-related tasks, summaries don’t help much.
Say I want to modify a chart—I already know what it currently looks like and what I want it to become. In that case, I don’t need to worry about the internal logic; direct instruction is enough."
1,Adjustable granularity and structure,The content of summaries with different granularities requires more design,"Overall, they’re pretty helpful. But if they’re too detailed, sometimes gaps appear. For example, with “legend,” I don’t know if it’s included by default. If the summary doesn’t cover it, then I have to check the code, but I might not find it there either."
1,Applying edit instruction to the summary,Less trust in LLM’s capability to focus on differences in edited summaries,"Yes, but the problem is that if the diff is only one or two words, while the summary itself is long, I still feel uncertain whether the model actually followed my small change."
1,Applying edit instruction to the summary,Less trust in LLM’s capability to focus on differences in edited summaries,"But sometimes if I only make a tiny change—like adding just one or two words to the summary—and the summary itself is very long, then I worry the model might ignore my small modification."
1,Auto-updated new summaries with diffs,Low trust in the quality of the diffs,"Yes. But right now the diffs feel a bit random. For example, sometimes even if parentheses weren’t actually changed, the diff still shows them as modified, even though nothing substantive happened."
1,Applying edit instruction to the summary,The intermediate edited summary helps understand LLM edits,"Yes, that’s more helpful and easier to understand than just reading the code diff."
1,Applying edit instruction to the summary,The intermediate edited summary helps understand LLM edits,"Or in some tasks, I originally don’t know which part of the code to modify. But by reading the summary diff, I can discover which parts need to be changed to achieve the goal. This really helps in understanding both the overall code and the result of modifications."
1,Applying edit instruction to the summary,The intermediate edited summary helps pre-validate code modifications with the developer’s intentions,"Yes, it may be better, mainly because it helps me understand the changes. I don’t necessarily read the whole summary, but I’ll check the diff part, so I know what it was before and what was added after.
For example, sometimes I don’t know whether a certain feature already existed. But through the summary diff, I can see it was actually newly added. Then I can infer that implementing this feature might require manually adding a function."
1,Applying edit instruction to the summary,The intermediate edited summary helps pre-validate code modifications with the developer’s intentions,"But if I apply direct instructions through the summary, then I only need to understand that part of the summary—it’s clearer which modifications will be applied to the code."
1,Applying edit instruction to the summary,The intermediate edited summary helps increase the sense of control over LLM edits,"When I give direct instructions to modify code, sometimes I miss information that’s already in the summary, because I didn’t notice it. So the controllability isn’t as strong."
1,Modifiable code summaries for AI modification,Manually editing the summary is of high physical workload,"Because if I have to edit the summary directly, then I need to read through a long block of text."
1,Direct edit instructions for AI modification,Direct edit instructions are natural and convenient for expressing human intent,direct instruction
1,Applying edit instruction to the summary,Applying instruction on summary makes editing intuitive and reduces the workload,putting direct instructions on the summary and then modifying the code—are the more useful ones.
1,Interactive mapping between summaries and code,Need mappings between code diffs and summary diffs,"I think it would be even better if the code diff and summary diff could be mapped together. Right now, if I only look at the summary diff, sometimes I don’t really know what was changed. For example, if I only made a tiny change, like in the legend, that might not show up clearly in the summary diff, but you can see it in the code diff.
On the other hand, if I only look at the code diff, sometimes I can’t fully understand the meaning of the modification or which feature it corresponds to."
1,Interactive mapping between summaries and code,Mapping helps with focusing inversely on summary segments from code on demand,"Yes, exactly. Sometimes when I don’t understand a particular line, I’ll use mapping to check the summary."
1,Interactive mapping between summaries and code,Mapping helps with focusing inversely on summary segments from code on demand,"Instead, I first look at the code, then use mapping to locate and check with the summary. Because some code I already know, or it already has comments, so I don’t need to read the summary. Only when I encounter a line I don’t understand, I’ll use mapping to find the corresponding summary."
1,Interactive mapping between summaries and code,Mapping helps reduce cognitive workload,"Yes, it does. If the summary is too long, I usually won’t read it."
1,Comprehension strategies for AI code,Reading the summary involves a high workload,"But when understanding code, if it immediately gives me the most detailed summary—like a huge wall of text—I’d really dislike reading it."
1,Adjustable granularity and structure,"Granularity should align with structural units (line, block, function)","Here’s an example I just thought of: in code structure, an if block can be seen as a structural unit. The most detailed summary could go down to line-level, medium granularity could be block-level, and lowest granularity could be function-level. This kind of structured presentation aligns more closely with the code’s structure."
1,Adjustable granularity and structure,High granularity helps in understanding the details,"I think if the code has high information density, then the most detailed summary works best."
1,Adjustable granularity and structure,High granularity helps in understanding the details,"the most detailed granularity is more suited for algorithmic problems, where each line carries a lot of information, and line-by-line explanations are very helpful"
1,Adjustable granularity and structure,High granularity contains necessary edit points and is useful for modification,"But if a file has many functions and I need to add a bigger feature, then low granularity is more suitable."
1,Adjustable granularity and structure,Low granularity is useful for large-scale modification,"especially if I need to modify small details inside a function, or even at a specific line like line 112. In those cases, low granularity isn’t enough."
1,Adjustable granularity and structure,Medium granularity balances detail and efficiency,"For granularity, I find medium-level most useful. When it’s too low, the summary is too high-level and sometimes doesn’t fit the task"
1,Adjustable granularity and structure,Paragraph summaries are hard to read as they are jumbled together and lengthy,I find reading structured summaries easier than long paragraphs.
1,Adjustable granularity and structure,Structured summaries are easier to skim through for their hierarchy,"hierarchy is clearer, and each line represents one thing—it makes understanding more efficient."
1,Adjustable granularity and structure,Structured summaries are easier to read as they align with program logic,Since they align with code structure
1,Interactive mapping between summaries and code,Mapping serves as auto-generated comments,"It’s kind of like auto-generated comments. Sometimes code has no comments, or the comments aren’t great, so this is very useful."
1,Interactive mapping between summaries and code,Mapping helps to understand code more effectively,"If I want to understand what a certain line does, I can directly locate and check it."
1,Comprehension strategies for AI code,Avoiding comprehension of AI-generated code due to cognitive workload,"I generally don’t want to understand what it wrote, since sometimes the output is quite large."
1,Factors impacting system usability,Scoping AI modifications improves controllability and testability,"Typically, I restrict the modification scope to a single function—on one hand that makes testing easier"
1,Validation strategies for AI modifications,Run the code to validate AI edits,"adding some print statements. So I mainly look at results, not the code itself."
1,Validation strategies for AI modifications,Running tests to validate AI edits,"Instead, I verify whether the modification is correct by writing some unit tests"
1,Comprehension strategies for AI code,Macro-level comprehension prioritized over line-level comprehension,"So for code understanding, I think understanding the macro structure is more useful than understanding things at the micro level (like what each line does). It’s also more efficient."
2,Factors impacting system usability,"Imperative programming uses instructions, while declarative programming uses summaries","Yes, it does. Different tasks differ. It’s kind of like imperative vs declarative programming. For backend or algorithm tasks, I want to understand the internal logic more deeply. In that case, I’ll first use features that help me build a clear understanding, then use summaries to edit. For frontend tasks, I only care about the final result. So I rely more on direct instructions; as long as the final output matches them, I'm satisfied, without worrying too much about the internals."
2,Future improvements for NaturalEdit,Large projects have more complex logic and cross-file connections,"Also, large projects require understanding references and calls across files. If the tool could support cross-file understanding, that would help a lot."
2,Adjustable granularity and structure,The content of summaries with different granularities requires more design,"I feel like it doesn’t yet direct the LLM properly. For example, if I summarize a file at the coarsest granularity, what I care about is: what functions does the file contain, and roughly what each function does. I don’t care about internal implementation—just the function names, definitions, inputs/outputs, and overall file purpose."
2,Factors impacting system usability,Unfamiliarity with code leads to increased use of summaries,"If I’m unfamiliar, I’ll rely heavily on summaries. With the color mapping across parts, I may first read through the whole code with the summaries to get a rough understanding."
2,Other,Less trust in LLM's capability to focus on differences in edited summaries,"With summaries, I feel less confident, because I don’t know exactly how they work or if the model catches the key points."
2,Adjustable granularity and structure,The summary representation should be context-aware or customizable by users,the summary’s form should depend on context—different situations have different audiences
2,Applying edit instruction to the summary,The intermediate edited summary helps pre-validate code modifications with the developer’s intentions,"the advantage is I can see what the summary looks like first, so I know what kind of change is expected."
2,Applying edit instruction to the summary,Less trust in LLM's capability to focus on differences in edited summaries,"The downside is, if I have to commit an entire summary, I feel less confident. By contrast, giving a very short prompt to directly change the code feels more reliable. I’d rather not give it both a long summary and the code, then have it find the link. That feels less trustworthy."
2,Adjustable granularity and structure,Hierarchy and indentation help keep the summaries structured,"The structured output does have hierarchy and indentation, which helps distinguish levels."
2,Adjustable granularity and structure,Structured summaries are more helpful for large-scale code,"For very large codebases, structured output may be more useful."
2,Interactive mapping between summaries and code,Visualizing mappings in the summary input area could be helpful,"Another idea: in the input box, if different parts could also be color-coded in sync with the summary, that would be better."
2,Auto-updated new summaries with diffs,Diff for new summaries helps validation,"Also, after editing a summary, the “diff view” is really useful—it shows what was changed or added."
2,Interactive mapping between summaries and code,Mapping might be better for mapping structural blocks instead of lines,"But I think it’d be better if it could distinguish and explain by block or call block. Right now it’s more line-by-line. For example, when explaining the stock charts component, it only highlighted one line. If I could hover over the component and see the whole block, that would be more natural. Like in VS Code, where you can collapse/expand a function. Mapping explanations to blocks would be more intuitive."
2,Interactive mapping between summaries and code,Mapping helps to understand code more effectively,"For example, the mapping function—it’s really useful for understanding code, boosts efficiency a lot. Compared with some other tools I’ve seen, it feels much more practical."
2,Applying edit instruction to the summary,Applying instruction on summary makes editing intuitive and reduces the workload,"NaturalEdit’s way of applying prompts to the summary makes it a lot easier, even if it’s a bit of extra work. It basically converts my intent into a prompt."
2,Other,Applying instructions to a summary helps modify it,"NaturalEdit’s way of applying prompts to the summary makes it a lot easier, even if it’s a bit of extra work."
2,Modifiable code summaries for AI modification,Summaries are not intuitive to modify due to a lack of edit points,"If the thing I want isn’t already present, editing directly is harder."
2,Modifiable code summaries for AI modification,Manually editing the summary is of high physical workload,"Editing the summary is less intuitive, so I use it less."
2,Applying edit instruction to the summary,Applying instruction on summary makes editing intuitive and reduces the workload,"More importantly, I can apply my instructions directly to the summary, and then modify via the summary."
2,Adjustable granularity and structure,High granularity contains necessary edit points and is useful for modification,That’s where NaturalEdit helps—since it allows adjusting three levels of detail. That’s useful.
2,Modifiable code summaries for AI modification,Summaries are not intuitive to modify due to a lack of edit points,"Often I don’t directly edit summaries, because they don’t contain the points I want to edit."
2,Direct edit instructions for AI modification,Direct edit instructions are natural and convenient for expressing human intent,"Of those two, direct editing feels more natural—it matches the habit from using chat, where you just say “please do X.”"
2,Validation strategies for AI modifications,Summarize the edits with AI again to assist with validation,"If I want to read more carefully, I might open a separate window, give it the code, and have it summarize for me—or even give it the diff and ask it to explain."
2,Validation strategies for AI modifications,Read the code to validate AI edits,"Yes, usually I’ll skim through."
2,Validation strategies for AI modifications,Running tests to validate AI edits,The other is that I might have it automatically generate unit tests—if the code is reasonably easy to test. Then it runs the tests. Gradually improving test coverage can be fairly efficient.
2,Interactive mapping between summaries and code,Mapping helps reduce cognitive workload,"For me, I usually prefer having it explain each part—what each piece does, how the whole flow processes data or achieves a goal. For example, what role each component plays. But right now, if I just use chat mode, it can’t really map explanations to the code precisely. That still requires my own brain to do the mapping. Right. NaturalEdit’s advantage is that it automatically helps me do that mapping, so it reduces the burden a lot."
3,Future improvements for NaturalEdit,Multi-file support requires a structured overview and inter-code connections,"Ideally, a tool could tell me the project’s architecture—what components it has (frontend, backend), what each part consists of, and which files they’re in. A framework diagram would be best, or at least a structured description."
3,Future improvements for NaturalEdit,Multi-file support requires a coarser mapping,"Maybe it should map to specific functions. Since interfaces are essentially functions with parameters, mapping should ideally point to a class or function definition."
3,Future improvements for NaturalEdit,Naturaledit would be useful if it supported multiple files,Support for multiple files.
3,Factors impacting system usability,Unfamiliarity with code leads to increased use of summaries,"If I had no familiarity with the code, I’d probably just use natural language."
3,Factors impacting system usability,Code that requires more control benefits from summaries for understanding and modification,"But if frontend also requires very fine control, then I’d still check the summary.
So I think it’s not about task type itself, but about how much control you want."
3,Factors impacting system usability,"Imperative programming uses instructions, while declarative programming uses summaries","If it’s an algorithm, I need it to exactly match my expectations, so I’d carefully check the summary. If it’s frontend, I don’t care—just show me the result."
3,Interactive mapping between summaries and code,Structured summaries and mappings make non-English speakers more likely to read summaries,I also think this relates to Chinese vs. English.
3,Auto-updated new summaries with diffs,Auto-updated new summaries with diffs help in iterative modifications,"I think in iterative modifications, that feature would be very effective."
3,Adjustable granularity and structure,Paragraph summaries are hard to read as they are jumbled together and lengthy,"With natural language, I don’t want to read something like a manual. I want to modify code, so I don’t need long explanations—I need a more efficient way."
3,Adjustable granularity and structure,Structured summaries are easier to read as they align with program logic,"I prefer structured summaries. Because when understanding a program, you naturally break it into parts, each responsible for a function. That program logic corresponds to structured summaries."
3,Adjustable granularity and structure,High granularity contains necessary edit points and is useful for modification,"If I need to modify a specific function, then I’ll make the granularity finer"
3,Adjustable granularity and structure,Low granularity is easy to skim for comprehension,"So at the beginning, when I’m trying to understand the functionality, I’ll use a coarse granularity."
3,Direct edit instructions for AI modification,Direct edit instructions are natural and convenient for expressing human intent,"But if I use an instruction, I can just give a more casual, abstract description and let it infer my intent. So it’s more convenient—it helps you skip some tedious steps."
3,Modifiable code summaries for AI modification,Manually editing the summary is of high physical workload,"Directly editing the summary is inconvenient: first, operationally, I’d need to load the whole summary and then modify specific parts, which is cumbersome (though solvable)."
3,Applying edit instruction to the summary,The intermediate edited summary helps pre-validate code modifications with the developer’s intentions,"If its understanding is wrong, then I can adjust my description."
3,Applying edit instruction to the summary,The intermediate edited summary helps increase the sense of control over LLM edits,"That makes me feel more reassured, or like the result might be better. Of course, I can’t say for sure if it’s objectively better, but it feels good."
3,Applying edit instruction to the summary,The intermediate edited summary helps pre-validate code modifications with the developer’s intentions,"If there’s a summary in between, I can evaluate whether it correctly understood my intent."
3,Direct edit instructions for AI modification,Direct edit instructions are usually vague and casual,"My instructions can be very casual, even vague."
3,Direct edit instructions for AI modification,Direct edit instructions are natural and convenient for expressing human intent,"I’d definitely prefer to just give a vague, casual description and have it understand my intent."
4,Future improvements for NaturalEdit,Code diffs should provide options to accept or reject changes,"I do have one question: why did it suddenly disappear? When I didn’t click accept, it just disappeared. It should add an accept option."
4,comprehension_comments,Like the concise or clear descriptions of code summaries,"Simple and easy to understand. Comprehensive, with one sentence per line or two of code—that’s best."
4,Auto-updated new summaries with diffs,Low trust in the quality of the diffs,"I mean, I know. I know the red is deletions, the green is additions, and those additions correspond to the new summary’s mapping, right? But I also know those green additions must align with my original instruction. So I don’t need to check the mapping."
4,Validation strategies for AI modifications,Run the code to validate AI edits,"I only check whether the functionality works. If it works, I’m done. If it doesn’t, then I’ll revisit."
4,Modifiable code summaries for AI modification,Manually editing the summary is of high physical workload,"The less editing, the better. I already have enough to look at—if the workload increases, that’s worse."
4,Other,Prefer automating two steps into the code without requiring manual confirmation,"I’d rather just say what I want directly, then let the system apply it automatically to the summary, form a modified summary, and continue."
4,Applying edit instruction to the summary,Prefer automating two steps in the code without requiring manual confirmation,"You could implement it in the backend: when I enter an instruction and click the button, it first applies it to the summary, then gives the modified summary to the LLM."
4,Adjustable granularity and structure,Low granularity is easy to skim for comprehension,"So I think it could just go straight to the highest level—or maybe a mid-level plus a high-level. Anyway, I think higher levels are more useful."
4,Adjustable granularity and structure,Paragraph summaries are easier to read because their logic is cohesive,"Some people may like structured, but I personally feel paragraphs have more logical flow."
4,Factors impacting system usability,Familiarity with code requires only direct instructions,"Because I already knew everything in the first task. I didn’t need the summary, and I didn’t need to learn the code structure. With all the code there, I could tell what it was doing."
4,Interactive mapping between summaries and code,Mapping helps to understand code more effectively,"So from this perspective, mapping is very helpful for tasks where I have no or very little knowledge about a framework. It lets me quickly build not only a general picture of the whole product, but also some details. Maybe not down to the code level, but enough to better understand the project’s logic: where data comes from, where it goes, what’s the input, what’s the output. That’s the advantage of your mapping and granularity design."
4,Interactive mapping between summaries and code,Mapping helps to understand code more effectively,"when you suggested using mapping, that’s when NaturalEdit’s mapping feature showed its value. It could tell me the meaning of each line of code, so the user could infer where the code came from, and then simulate its behavior—like how it gets a name—and use that to write frontend code."
4,Comprehension strategies for AI code,Developers have different needs for understanding code semantics,"Yes. If it’s some kind of “grunt work,” where there isn’t much algorithmic complexity—just technical implementation, like using a library—I don’t care much about the details. For example, if it’s a web scraper, I just tell it the requirements and let it implement the functionality and scrape the data. I don’t care how exactly it’s done.
But if it’s something I’ll need to modify and improve later, then I’ll read and understand it line by line. For example, when writing a program to control sensors, I must understand which parameters each line controls, so that later, when making custom adjustments, I can tune them myself."
4,Factors impacting system usability,Code that requires more control benefits from summaries for understanding and modification,It mainly depends on whether the code needs further optimization. I look at whether the code is just for a one-off task (no later changes) or something I’ll frequently need to modify and maintain.
4,Validation strategies for AI modifications,Summarize the edits with AI again to assist with validation,"If it generates ten lines of code that I don’t understand, I’ll first ask it to explain the overall function of those ten lines. Then, if there are still two or three lines I don’t get, I’ll copy those specific lines back in and ask it to explain in more detail. For example, I’ll say, “please explain this code in detail.”"
5,Future improvements for NaturalEdit,Having a mechanism for editing history is beneficial,"One area is the summary history at the bottom. I didn’t interact with it much, but I liked that it keeps a history of what the code or summary looked like. If I had to nitpick, I’d say more interactions around that would be useful. For example, GitHub has a branch view of how code evolves—some way to visualize history like that could be very helpful."
5,Future improvements for NaturalEdit,Having a mechanism for editing history is beneficial,"Exactly. For example, when I’m doing data exploration, sometimes my code goes in two different directions, like two branches. It would be nice if I could say, “I like this part of branch A and this part of branch B—combine them”—without manually merging the code myself."
5,Factors impacting system usability,Reliance on AI hinders learning coding,"I think what this system does is allow me to have confidence writing code that I know nothing about—which can be both good and bad. For example, I haven’t used XGBoost since early undergrad, and I remember nothing about it. But with this system, I didn’t really need to remember anything, which was nice.
At the same time, it also makes me feel that there is value in knowing how to write the code yourself, so you can validate it. My opinions on this are a bit divided. I like the fact that I don’t need to know everything to write code, but I also worry that if I rely on the system, I might not learn as much as I should."
5,Future improvements for NaturalEdit,Jupyter Notebook may benefit from NaturalEdit,"I do wonder how it would work for data engineering tasks. For example, when I’m using a Jupyter Notebook, I usually focus on one part of the notebook instead of the entire file. But even then, the ability to select the extent of the summaries I want to use—like the select-and-summarize feature—helped me break down the parts I wanted to focus on."
5,Future improvements for NaturalEdit,Jupyter Notebook may benefit from NaturalEdit,"Yes, but even in Jupyter Notebook, depending on where you are in the document, you might make changes in the beginning that ripple to the end. So even though changes feel localized, their effects can extend across the notebook."
5,Comprehension strategies for AI code,Like the concise or clear descriptions of code summaries,"I definitely liked them. Even without changing details, the summaries were clear. It was a very easy way to understand what the code was trying to do. I don’t think there’s anything I would change about them right now. Overall, I really liked them."
5,Future improvements for NaturalEdit,Code diffs should provide options to accept or reject changes,"Currently, the accept/reject option is all-or-nothing—you either accept everything or nothing, which I find annoying."
5,Future improvements for NaturalEdit,Code diffs should provide options to accept or reject changes,"One thing I would want the system to have is a way to accept or reject changes as they come in, instead of being directly applied."
5,Auto-updated new summaries with diffs,Yellow highlights are blended with color mappings,"I did have one comment: I think the new part in the summary was shown in yellow, but since other parts were also yellow, it felt overloaded. The highlighting blended too much with the existing color coding in the summary."
5,Auto-updated new summaries with diffs,Diff for new summaries helps validation,"I really liked it—the diff view means I don’t have to re-read everything to find what changed. Especially when I’m using the modified summary as a way to understand what’s going to change in the code, it’s nice to have that explicitly shown with colors."
5,Applying edit instruction to the summary,Controlling edit logic and trusting direct instruction is a trade-off,"So I think it’s a trade-off: do I want to spend time carefully thinking about how to phrase the change, or do I just want to stay high level in my instructions and let the system handle the details?"
5,Modifiable code summaries for AI modification,Manually editing the summary is of high physical workload,"In PASTA, I would have to read the summary, identify where I wanted to add edits, and then actually write them. In this case, I just need to understand what the code is doing and then write instructions."
5,Applying edit instruction to the summary,The intermediate edited summary helps pre-validate code modifications with the developer’s intentions,"Instead of doing all the heavy work, I only need to validate whether the change was done correctly by the LLM."
5,Applying edit instruction to the summary,Applying instruction on summary makes editing intuitive and reduces the workload,"I like the applied version, because it’s less work for me."
5,Applying edit instruction to the summary,The intermediate edited summary helps increase the sense of control over LLM edits,Yes. That intermediate step feels like a safety net between giving instructions and actually changing the codebase. It’s nice to have that guardrail.
5,Applying edit instruction to the summary,The intermediate edited summary helps pre-validate code modifications with the developer’s intentions,"That was good—it almost created an intermediate view of what might change. In PASTA, I had to run the code or execute the command to see the change. The code would only change after I wrote the instruction. But when applying it to the summary first, it gave me an idea of how things might change before committing to the code.
I didn’t encounter errors in this case, but if there were errors in the summary, I could correct them there instead of having to roll back after changes were already applied to the codebase."
5,Adjustable granularity and structure,High granularity contains necessary edit points and is useful for modification,"But if I’m trying to modify specific things within a function, then I would like more details to understand and locate specific points."
5,Adjustable granularity and structure,Low granularity is suitable for large-scale modification,"If I’m looking to change or add an entire function, I don’t want too many details."
5,Adjustable granularity and structure,Structured summaries are helpful for locating edit points,"I really liked using the structured, bullet-point version, especially when I was searching for information. For searching, it was much more useful to have bullet points."
5,Adjustable granularity and structure,Structured summaries are easier to skim through for their hierarchy,"Because each bullet point represented a single idea. It wasn’t overloaded, and each was short, so it was easier to skim through and quickly find what I wanted to focus on."
5,Adjustable granularity and structure,Paragraph summaries are hard to read as they are jumbled together and lengthy,"In contrast, a paragraph is longer and can be a bit overwhelming to read through."
5,Adjustable granularity and structure,Different granularity helps understanding in different levels,"Having on-demand different versions of the explanations was useful—I might not always need the details, but if I wanted them, they were available. That was very cool."
5,Adjustable granularity and structure,Low granularity is easy to skim for comprehension,initially it just gave a high-level understanding of what was being fetched
5,Adjustable granularity and structure,High granularity helps in understanding the details,"But when we created a finer granularity, it showed what each column meant."
5,Adjustable granularity and structure,Different granularity helps understanding in different levels,I really liked the granularity. It was good to understand the code at different levels.
5,Interactive mapping between summaries and code,Mapping helps locate the modification points,"For example, it might have taken me longer to find which function to change if I only had the summary. But because the summary was directly linked to specific parts of the code, if I wanted to change a particular function—like something related to data—I could just click on it, and it would take me to the correct chunk of code."
5,Interactive mapping between summaries and code,Mapping helps locate the modification points,"That helped me understand which part of the code needed to be changed. So the combination of the summary and color coding helped me not only understand the code but also plan how to change it, or which code I needed to modify."
5,Interactive mapping between summaries and code,Mapping helps to understand code more effectively,"I especially appreciated the color coding, because I could map the text summary directly to the exact code it referred to."
5,Comprehension strategies for AI code,Reading the summary helps understand code,"I really like the summary part, especially since some of the code was not written by me. I used the summary to understand what the code was doing, rather than actually reading all the syntax. For both NaturalEdit and PASTA, I really liked the summary feature."
5,Validation strategies for AI modifications,Run the code to validate AI edits,"A little bit. For the most part, I just run the code and see if it gives the correct output. My validation strategy is basically: does it run without errors or not? If it runs, that’s good enough."
6,Future improvements for NaturalEdit,Auto-summarize the opened file instead of selecting it to summarize,"Like I said, if it could automatically process a file instead of me having to manually select a section, that would be even better."
6,Future improvements for NaturalEdit,Help search for and find the modification points,"But if it could automatically locate the function, say if I want to search or modify a block’s format, and it can directly locate that function—that would be great."
6,Adjustable granularity and structure,High granularity helps in understanding the details,"But if it’s a language I’m not familiar with, then this fine-grained summary would be useful—like explaining line by line what the function is doing."
6,Adjustable granularity and structure,Low granularity is easy to skim for comprehension,"I feel I don’t need the summaries to be so granular—they can be coarser. For example, “what this function does,” rather than explaining line by line. I don’t need that level of detail."
6,Adjustable granularity and structure,High granularity helps in understanding the details,I think they’re quite good. Especially when they’re granular—each item is very clear.
6,Auto-updated new summaries with diffs,Diff for new summaries helps validation,Very useful. It’s just like when we commit code at GitHub—we always review it to check for any accidental changes. This kind of diff is a very important feature.
6,Auto-updated new summaries with diffs,Auto-updated new summaries maintain a consistent workflow,"That’s really good. Compared to manually re-selecting and regenerating a summary every time, it’s much more efficient."
6,Modifiable code summaries for AI modification,Manually editing the summary is of high physical workload,"Otherwise it’s like rereading the code all over again. Sometimes the summary is so detailed it just feels like the code rewritten in natural language, which looks almost the same."
6,Comprehension strategies for AI code,Reading the summary involves a high workload,this way it saves the effort of reading.
6,Modifiable code summaries for AI modification,Manually editing the summary is of high physical workload,I don’t want to read through a bunch of summaries and figure out which code they correspond to. That’s almost like editing the code myself.
6,Applying edit instruction to the summary,Applying instruction on summary makes editing intuitive and reduces the workload,"I prefer just giving the instruction, and then letting the system generate the summary and decide where to put it."
6,Interactive mapping between summaries and code,Mapping helps locate the modification points,"I think it’s great—it makes it easier to find the code. Honestly, as long as you know what that part of the summary says, if the code is reasonably written, most people can find the corresponding code just from the summary. It’s easy to locate."
6,Interactive mapping between summaries and code,Mapping helps to understand code more effectively,I think structured summaries are really good because of the highlights—they link directly to the code.
6,Adjustable granularity and structure,Structured summaries are easier to read as they align with program logic,"But a structured summary is line by line, tied to the specific code. That’s more aligned."
6,Adjustable granularity and structure,Paragraph summaries are hard to read as they are jumbled together and lengthy,The paragraph summary looks overwhelming.
6,Validation strategies for AI modifications,Read the code to validate AI edits,"I’ll take a look, just to see if what it wrote has any problems. Usually, I first check if it looks like what I want, and then I’ll test it."
7,Direct edit instructions for AI modification,Distrust direct edit instructions’ accuracy,"Especially when writing papers, I’ve noticed that GPT sometimes writes code that works but isn’t very reasonable. I feel I have to understand exactly what it’s modifying, otherwise it’s dangerous."
7,Future improvements for NaturalEdit,Multi-file support requires a structured overview and inter-code connections,"Cross-file summaries would need a higher-level summary. For example, a repo-level summary that outlines each file. Then you could drill down: from repo to file-level summaries, then to function-level, and finally line-level. That hierarchical structure would be most useful."
7,Factors impacting system usability,Unfamiliarity with code leads to increased use of summaries,"If I don’t understand, I’d lean more on natural language modifications. But if I can understand Python, I prefer to just read and modify the code myself, rather than using natural language edits."
7,Auto-updated new summaries with diffs,Diff for new summaries helps validation,"It didn’t modify unnecessary places, but only highlighted the necessary changes in the summary diff. I could immediately see what was changed and quickly judge whether it understood my instruction."
7,Modifiable code summaries for AI modification,Manually editing the summary is of high physical workload,"Direct instructions are much better. If I have to manually edit the summary, I need to understand the logical relations between its sentences and figure out where exactly to insert my instruction—before or after which sentence. That’s troublesome."
7,Interactive mapping between summaries and code,Mapping helps locate the modification points,"Ideally, I wouldn’t need to reselect the modification range myself. For example, if I throw in a whole file, it could generate a map for each function. Then, in the next step, if I want to edit one function, I could just click its map, and it would automatically treat that function as the new input—no need to manually reselect."
7,Adjustable granularity and structure,Paragraph summaries are easier to read because their logic is cohesive,"Paragraphs have a more natural logical flow. Structure just tells you that these things exist, but it doesn’t explain the relationships between them—for example, which part includes which"
7,Adjustable granularity and structure,"Granularity should align with structural units (line, block, function)","So maybe granularity could just be fixed like this: for a file input, show function-level summaries; for a function input, show line-level summaries. No need to add more levels."
7,Modifiable code summaries for AI modification,Manually editing the summary is more prone to error,"But if you edit via the summary, you just describe the requirement and the model will know which places need updating and change them all consistently. Manual editing is definitely more error-prone."
7,Applying edit instruction to the summary,Applying instruction on summary makes editing intuitive and reduces the workload,Then applying it to code reduced the burden of me manually checking whether the modifications were correct.
7,Applying edit instruction to the summary,The intermediate edited summary helps pre-validate code modifications with the developer’s intentions,Showing the modifications in the summary helps me check whether the LLM actually understood my instruction
7,Applying edit instruction to the summary,The intermediate edited summary helps pre-validate code modifications with the developer’s intentions,"That way, you can stop errors in advance and correct them before they’re applied."
7,Applying edit instruction to the summary,The intermediate edited summary helps increase the sense of control over LLM edits,"It’s like having a mechanism to stop errors early. When you use an LLM, if it starts going off track, you can catch it early and stop it, which saves tokens or other resources"
7,Validation strategies for AI modifications,Read the code to validate AI edits,"I ask it not to output the whole file, but just to list the specific places that need to be changed—like one, two, three, four, five—and show what they should look like. Then I go through each one step by step to check if the changes are correct. If everything looks right, I’ll let it apply those changes to the code"
8,Future improvements for NaturalEdit,Design code edit history management is beneficial,"And it would also be cool to have branching threads—like you could go back to a certain node and branch off from there, exploring another potential workflow without losing the previous path."
8,Auto-updated new summaries with diffs,Diff for new summaries helps validation,"Instead of reading the updated summary in full, I focused on whether the updates I asked for were actually reflected in the code. That made the diff highlights a very useful feature."
8,Adjustable granularity and structure,Paragraph summaries are easier to read because their logic is cohesive,"On the other hand, if you’re not very familiar with the code, the paragraph-style summary is better, since it reads more naturally and makes sense even without deep technical knowledge."
8,Adjustable granularity and structure,"Structured summaries are easier to read as they align with program logic, particularly line-by-line logic","When you know specifically what you want to change, the bullet-pointed summary is more useful because it’s closer to a line-by-line comparison with the code."
8,Interactive mapping between summaries and code,Mapping helps to understand code more effectively,"It not only provides an overall summary but also shows which part of the code each summary item comes from, and that really helps comprehension."
8,Future improvements for NaturalEdit,Help search for and find the modification points,"I mentioned earlier, but I think it would be even more useful if the highlights were clickable, so clicking on a summary phrase could take me directly to the corresponding part of the code"
8,Factors impacting system usability,Scoping AI modifications improves controllability and testability,"NaturalEdit only applies changes within the highlighted summary region. That gives me better control over where the LLM edits, instead of having it inject code into multiple files that I might not expect."
8,Direct edit instructions for AI modification,Direct edit instructions are natural and convenient for expressing human intent,"That’s why instead of editing the summary directly, I preferred giving edit instructions, because that matches how I currently use LLMs."
8,Adjustable granularity and structure,High granularity contains necessary edit points and is useful for modification,"Personally, I see myself relying more on the finer granularity, because when you’re actually editing the code, those detailed summaries are most helpful."
8,Adjustable granularity and structure,Different granularity helps understanding in different levels,"I especially liked the granularity control. The ability to move from an overall summary to more detailed, function-level descriptions was really powerful."
8,Adjustable granularity and structure,Low granularity is easy to skim for comprehension,"If you’re not actually editing any code and just want to know in general what a file is doing, then the very concise, high-level summary is quite nice and useful."
8,Comprehension strategies for AI code,"Start with macro-level comprehension to understand the big picture, then narrow scope to understand details","I thought the best workflow was starting with a summary of the entire script, then narrowing down to individual functions I needed to modify."
8,Validation strategies for AI modifications,Read the code to validate AI edits,"I try not to blindly apply everything the agent generates. Instead, I read through the suggested code, check that it makes sense, try it out, and if it doesn’t work, roll it back. Then I’ll go deeper into the changes the LLM attempted, making sure I understand what it tried to do."
9,Future improvements for NaturalEdit,Add debugging feature,"it would be great if I could just paste the error message into the system and have it tell me which line is wrong and needs checking.
If that feature were added, it would feel very complete."
9,Factors impacting system usability,Unfamiliarity with code leads to increased use of summaries,"But if it’s code I’m not familiar with, or a new type of data, then I would rely heavily on the summary."
9,Auto-updated new summaries with diffs,Diff for new summaries helps validation,"Automatically updating the summary is like having a second layer of checking. Otherwise, if you wanted to review changes without a tool showing the differences, it would be tiring."
9,Interactive mapping between summaries and code,Mapping helps to understand code more effectively,"Understanding code usually goes from the high level down to the low level. For example, you might start with one summary sentence that represents ten lines of code, and first understand the gist of those ten lines. Then you zoom in a bit more to see what five of those lines mean, and finally you drill down to each individual line. This layered correspondence means that once you understand one line, you can connect it back up to the overall code."
9,Comprehension strategies for AI code,"Start with macro-level comprehension to understand the big picture, then narrow scope to understand details","But if I’m facing a completely unfamiliar large file, I’d probably want to start with an unstructured summary to quickly get the gist. Then I would gradually switch to more structured forms and drill down step by step"
9,Adjustable granularity and structure,Structured summaries are easier to read as they align with program logic,"I prefer the summaries of most generated code to be structured, since that aligns better with machine-interpretable language."
9,Modifiable code summaries for AI modification,Manually editing the summary is more prone to error,"Usually, the system-generated summary based on my instruction is more complete than what I would write myself, and I tend to trust it more"
9,Direct edit instructions for AI modification,Direct edit instructions are natural and convenient for expressing human intent,This interaction feels more natural to me—I still prefer giving instructions
9,Applying edit instruction to the summary,Applying instruction on summary makes editing intuitive and reduces the workload,"If I only give instructions, I might not really understand what’s going on. But this process basically forces the user to understand what the machine is doing, which I think is a better strategy"
9,Comprehension strategies for AI code,Avoiding comprehension of AI-generated code due to cognitive workload,"So my strategy is: let the model write first, and if there are problems, then I debug and check. Usually, that’s enough—I don’t need to put much effort into understanding the fine details."
10,Interactive mapping between summaries and code,Need mappings between code diffs and summary diffs,"But even when I give an instruction, I’d still like the system’s output to include an updated summary that incorporates my instruction. That way, I can confirm how my instruction is reflected in the summary."
10,Auto-updated new summaries with diffs,Diff for new summaries helps validation,"But even when I give an instruction, I’d still like the system’s output to include an updated summary that incorporates my instruction. That way, I can confirm how my instruction is reflected in the summary."
10,Auto-updated new summaries with diffs,Diff for new summaries helps validation,"But when I give an instruction, the summary should still be updated to reflect it—and ideally, my instruction should be highlighted in a different color to distinguish it."
10,Comprehension strategies for AI code,Avoiding comprehension of AI-generated code due to cognitive workload,"Even though I’m fairly familiar with the technology, I’ve basically regressed to the point where I don’t want to read code at all."
10,Applying edit instruction to the summary,The intermediate edited summary helps pre-validate code modifications with the developer’s intentions,"ut later I realized applying the instructions to the summary was better. It reorganizes what I want into a new summary, so I can check it first, then generate the code."
10,Interactive mapping between summaries and code,Structured summaries and mappings make non-English speakers more likely to read summaries,"Maybe native speakers would prefer paragraphs, but for me, if it’s just one big block of text, I don’t even want to read it. I want to see step by step what’s happening. With the structured view, I assume it follows the code’s sequence."
10,Adjustable granularity and structure,High granularity contains necessary edit points and is useful for modification,"I just need to edit the smallest-grain part of the explanation to complete the change. That makes the modifications feel incremental, without affecting other parts."
10,Applying edit instruction to the summary,The intermediate edited summary helps increase the sense of control over LLM edits,"I would glance at the edits, which gave me more confidence. Because of the summaries, I only needed to make small changes there, and the generated code reflected incremental modifications."
10,Validation strategies for AI modifications,Run the code to validate AI edits,"I just look at the final result. If the result is wrong, then it’s wrong, and I’ll ask the model to regenerate. I don’t care about what the code itself means."
11,Future improvements for NaturalEdit,Add a runtime sandbox to catch errors in advance,"Third, adding a runtime sandbox environment would be great—so it could catch and prevent bugs or errors in advance."
11,Future improvements for NaturalEdit,Naturaledit would be useful if it supported multiple files,"Second, the ability to handle more complex structures and read or manipulate larger-scale data."
11,Future improvements for NaturalEdit,"Include multimodal support, particularly images","First, support for multimodality. For example, with JSON files, I’d rather just take a screenshot than copy all the text. The system could definitely improve in that direction."
11,Future improvements for NaturalEdit,"Include multimodal support, particularly images","For slightly more complex edits—like the second concatenation task—it would be much better if multimodal support was available, so I could also include an image."
11,Adjustable granularity and structure,Structured summaries are helpful for locating edit points,Structure is especially helpful—it divides the code more clearly and makes it easier to locate parts.
11,Adjustable granularity and structure,Paragraph summaries are hard to read as they are jumbled together and lengthy,"If it’s just pure text, the summaries are often too long and tedious to read. Sometimes the logical order gets mixed up—for example, something from the beginning might appear at the end—which makes it harder to follow"
11,Applying edit instruction to the summary,The intermediate edited summary helps increase the sense of control over LLM edits,"Adding the summary layer makes the black box a little more transparent, giving me more of a sense of control. Honestly, I didn’t really edit the summaries much myself, but just having them shown and explained made me feel more comfortable. It gave me a feeling of control. The practical use may not be huge, but the experience feels much better."
11,Other,"Not a 1 to 1 correlation between code and summary, could be more precise","It can point me to the general location, but not mark the scope 100% accurately, since code often overlaps and interleaves in ways that can’t be perfectly separated. But overall, I think the benefits far outweigh the drawbacks."
11,Interactive mapping between summaries and code,Mapping helps locate the modification points,The advantage is that it helps me quickly locate the relevant code and explains which line is doing what.
11,Interactive mapping between summaries and code,Mapping helps to understand code more effectively,"But NaturalEdit made big improvements in interaction. For example, it can highlight the changes, show me exactly where modifications happen, and indicate what the edits look like. This improves the experience a lot. It prevents me from feeling lost about what the system is doing, and overall usability is much higher."
11,Validation strategies for AI modifications,"Read the code to validate AI edits
(backup plan)","Of course, I’ll skim the overall structure, but LLMs often use efficient and concise, but not very intuitive, styles. So I just browse roughly."
11,Validation strategies for AI modifications,Run the code to validate AI edits,"I usually just copy it and run it. If the result works, I don’t look too closely at the process."
11,Comprehension strategies for AI code,"Start with macro-level comprehension to understand the big picture, then narrow scope to understand details","I usually copy the entire file and let the LLM explain it to me. After I understand the explanation, I’ll specify which module needs modification, then tell it the inputs and outputs, and let it handle the changes. That’s one approach, mostly for understanding the code."
12,Future improvements for NaturalEdit,Help search for and find the modification points,"One improvement would be around selecting the code segment to summarize and modify. Right now the user has to manually choose a piece of code, but often I don’t know where to start. If I’m not sure how the selected segment relates to the rest of the code, I hesitate between selecting just a small part or the entire file. If the system had a smarter way to guide users in defining the modification scope, it would be much more useful."
12,Validation strategies for AI modifications,Use AI to directly refine and fix AI edits,"In those cases, I usually let the model regenerate or reorganize, rather than manually doing large-scale edits. Manual changes are rare—I mostly rely on the system"
12,Validation strategies for AI modifications,Run the code to validate AI edits,"But now I mostly do web programming, involving both frontend and backend across multiple files. In those cases, the generated code volume is much larger, so I rely on direct testing: run it in the browser and see if the functionality works. That’s immediate validation—I just check results after modification."
12,Applying edit instruction to the summary,The intermediate edited summary helps pre-validate code modifications with the developer’s intentions,"Compared to applying direct instructions on code, first editing the summary with indirect instructions is a more structured approach. It allows me to validate whether the system understood my intention before making code changes."
12,Interactive mapping between summaries and code,Mapping helps locate the modification points,"It also helps me quickly locate specific code, even if I want to modify it manually. And highlighting the key components makes it more intuitive than reading a plain paragraph with no mapping, making it easier for fast reading."
12,Interactive mapping between summaries and code,"Mapping provides evidence for edits, building trust","Mapping’s biggest role is providing evidence. It lets me quickly verify whether the summary is correct. If I don’t already understand the code, mapping helps me trust it more quickly."
12,Interactive mapping between summaries and code,Mapping helps to understand code more effectively,"It also supports fast verification—when I read the task description, I usually already have an idea of what the code should look like. Mapping deepens that understanding."
12,Adjustable granularity and structure,"Different granularity gives more variations of summaries and more keywords to change, increasing effectiveness of summary-mediated prompting","As for granularity, I like to switch between different versions and see which one contains the keywords I’m looking for. A summary that’s too general is useless, but one that’s too fine-grained might not match what I want to change. Using keyword matching, I can usually find an ideal level of granularity."
12,Adjustable granularity and structure,High granularity contains necessary edit points and is useful for modification,"If the information I want happens to appear in the summary, I can directly edit that version. But if the granularity isn’t right, the summary may not include what I want to change, and then it’s not very convenient to use as a template."
12,Interactive mapping between summaries and code,Mapping helps to understand code more effectively,"Its representation was relatively weak—it wasn’t rich text, not very intuitive, and couldn’t directly map to the code. It also lacked evidence, which made it hard to build trust and maintain control."
12,Future improvements for NaturalEdit,Design code edit history management is beneficial,"But if the system could record the whole track of modifications, that would be very helpful—I could review step by step how the code evolved. That kind of representation and structure would be really useful."
12,Applying edit instruction to the summary,The intermediate edited summary helps system understand LLM edits,"To summarize: if I only give direct instructions, they may not fully capture my intention. But with the summary, I can express my intent more clearly, and the system understands it better."
12,Applying edit instruction to the summary,The intermediate edited summary helps pre-validate code modifications with the developer’s intentions,"Summary-based interaction is helpful, but compared to direct prompting it requires extra effort—you first have to interpret the summary, then modify it. Its advantage is giving me an extra intermediate layer: I modify the summary, and then code is generated. This structured approach makes it clearer how the system interprets my intent."
12,Modifiable code summaries for AI modification,Manually editing the summary is of high physical workload,"Summary-based interaction is helpful, but compared to direct prompting it requires extra effort—you first have to interpret the summary, then modify it."
12,Applying edit instruction to the summary,The intermediate edited summary helps pre-validate code modifications with the developer’s intentions,"In the previous version of the tool, direct instructions would directly apply to the summary. That way, before modification, I could already see the system’s intended direction and better understand what it was about to do."
12,Interactive mapping between summaries and code,Mapping helps to understand code more effectively,"For me, most of the understanding comes after modification—by looking at where it changed things and using the mapping in the summary."